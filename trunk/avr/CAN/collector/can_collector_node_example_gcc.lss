
can_collector_node_example_gcc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000025a  00800100  00002e34  00002ec8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  0080035a  0080035a  00003122  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  00003124  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  00003874  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  000038c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000332  00000000  00000000  000039a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000f49  00000000  00000000  00003cda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000065c  00000000  00000000  00004c23  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000150a  00000000  00000000  0000527f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000230  00000000  00000000  0000678c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000628  00000000  00000000  000069bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 9e 11 	jmp	0x233c	; 0x233c <__vector_9>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 45 01 	jmp	0x28a	; 0x28a <__vector_18>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      80:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	13 e0       	ldi	r17, 0x03	; 3
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e4 e3       	ldi	r30, 0x34	; 52
      a8:	fe e2       	ldi	r31, 0x2E	; 46
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	aa 35       	cpi	r26, 0x5A	; 90
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	13 e0       	ldi	r17, 0x03	; 3
      bc:	aa e5       	ldi	r26, 0x5A	; 90
      be:	b3 e0       	ldi	r27, 0x03	; 3
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	ab 37       	cpi	r26, 0x7B	; 123
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
      ce:	0c 94 18 17 	jmp	0x2e30	; 0x2e30 <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <main>:
//! This program performs some remote frames (c.f. NB_TARGET).
//! The response must be a data frame that contents (in the order) the addressed
//! node temperature, luminosity and VCC values.
//------------------------------------------------------------------------------
int main (void)
{	
      d6:	df 93       	push	r29
      d8:	cf 93       	push	r28
      da:	cd b7       	in	r28, 0x3d	; 61
      dc:	de b7       	in	r29, 0x3e	; 62
    CLKPR = 0x80;  CLKPR = 0x00;  // Clock prescaler Reset
      de:	e1 e6       	ldi	r30, 0x61	; 97
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	80 e8       	ldi	r24, 0x80	; 128
      e4:	80 83       	st	Z, r24
      e6:	e1 e6       	ldi	r30, 0x61	; 97
      e8:	f0 e0       	ldi	r31, 0x00	; 0
      ea:	10 82       	st	Z, r1
   
	uart_init(CONF_8BIT_NOPAR_1STOP,UART_BAUDRATE);
      ec:	83 e0       	ldi	r24, 0x03	; 3
      ee:	40 e0       	ldi	r20, 0x00	; 0
      f0:	56 e9       	ldi	r21, 0x96	; 150
      f2:	60 e0       	ldi	r22, 0x00	; 0
      f4:	70 e0       	ldi	r23, 0x00	; 0
      f6:	0e 94 3c 12 	call	0x2478	; 0x2478 <uart_init>
    
    can_init(0);
      fa:	80 e0       	ldi	r24, 0x00	; 0
      fc:	0e 94 9b 05 	call	0xb36	; 0xb36 <can_init>

	DDRA = 0xFF; // LED'er output
     100:	e1 e2       	ldi	r30, 0x21	; 33
     102:	f0 e0       	ldi	r31, 0x00	; 0
     104:	8f ef       	ldi	r24, 0xFF	; 255
     106:	80 83       	st	Z, r24
	PORTA = 0xFF; // LED'er t√¶ndt
     108:	e2 e2       	ldi	r30, 0x22	; 34
     10a:	f0 e0       	ldi	r31, 0x00	; 0
     10c:	8f ef       	ldi	r24, 0xFF	; 255
     10e:	80 83       	st	Z, r24

    DDRD = 0xFF;
     110:	ea e2       	ldi	r30, 0x2A	; 42
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	8f ef       	ldi	r24, 0xFF	; 255
     116:	80 83       	st	Z, r24
    PORTD |= 0b1000000;
     118:	ab e2       	ldi	r26, 0x2B	; 43
     11a:	b0 e0       	ldi	r27, 0x00	; 0
     11c:	eb e2       	ldi	r30, 0x2B	; 43
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	80 81       	ld	r24, Z
     122:	80 64       	ori	r24, 0x40	; 64
     124:	8c 93       	st	X, r24


    // Interrupt
    
    
    sei();
     126:	78 94       	sei

    CANIE2 = 0xFF;
     128:	ee ed       	ldi	r30, 0xDE	; 222
     12a:	f0 e0       	ldi	r31, 0x00	; 0
     12c:	8f ef       	ldi	r24, 0xFF	; 255
     12e:	80 83       	st	Z, r24
    CANIE1 = 0xFF;
     130:	ef ed       	ldi	r30, 0xDF	; 223
     132:	f0 e0       	ldi	r31, 0x00	; 0
     134:	8f ef       	ldi	r24, 0xFF	; 255
     136:	80 83       	st	Z, r24

    CANGIE |=(1<<ENRX);
     138:	ab ed       	ldi	r26, 0xDB	; 219
     13a:	b0 e0       	ldi	r27, 0x00	; 0
     13c:	eb ed       	ldi	r30, 0xDB	; 219
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	80 62       	ori	r24, 0x20	; 32
     144:	8c 93       	st	X, r24
    //CANGIE |=(1<<ENTX);

    CANGIE |=(1<<ENIT);
     146:	ab ed       	ldi	r26, 0xDB	; 219
     148:	b0 e0       	ldi	r27, 0x00	; 0
     14a:	eb ed       	ldi	r30, 0xDB	; 219
     14c:	f0 e0       	ldi	r31, 0x00	; 0
     14e:	80 81       	ld	r24, Z
     150:	80 68       	ori	r24, 0x80	; 128
     152:	8c 93       	st	X, r24

    response_msg.pt_data = &response_buffer[0];
     154:	8b e5       	ldi	r24, 0x5B	; 91
     156:	93 e0       	ldi	r25, 0x03	; 3
     158:	90 93 6d 03 	sts	0x036D, r25
     15c:	80 93 6c 03 	sts	0x036C, r24
    response_msg.status = 0;
     160:	10 92 6e 03 	sts	0x036E, r1

    display_sensor_values();
     164:	0e 94 b9 00 	call	0x172	; 0x172 <display_sensor_values>

    return 0;
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	90 e0       	ldi	r25, 0x00	; 0
}
     16c:	cf 91       	pop	r28
     16e:	df 91       	pop	r29
     170:	08 95       	ret

00000172 <display_sensor_values>:
//!     local temperature, the local luminosity and the VCC values.
//!     When the DVK90CAN1 receives an response, it formates the data and
//!     sends it to a terminal.
//------------------------------------------------------------------------------
void display_sensor_values(void)
{
     172:	df 93       	push	r29
     174:	cf 93       	push	r28
     176:	cd b7       	in	r28, 0x3d	; 61
     178:	de b7       	in	r29, 0x3e	; 62
     17a:	68 97       	sbiw	r28, 0x18	; 24
     17c:	0f b6       	in	r0, 0x3f	; 63
     17e:	f8 94       	cli
     180:	de bf       	out	0x3e, r29	; 62
     182:	0f be       	out	0x3f, r0	; 63
     184:	cd bf       	out	0x3d, r28	; 61
 
    U8 tx_remote_buffer[9];
    st_cmd_t tx_remote_msg;

    // --- Init variables
    tx_remote_msg.pt_data = &tx_remote_buffer[0];
     186:	ce 01       	movw	r24, r28
     188:	03 96       	adiw	r24, 0x03	; 3
     18a:	9d 8b       	std	Y+21, r25	; 0x15
     18c:	8c 8b       	std	Y+20, r24	; 0x14
    tx_remote_msg.status = 0;
     18e:	1e 8a       	std	Y+22, r1	; 0x16

    // UART
    uart_mini_printf("GOGO");
     190:	00 d0       	rcall	.+0      	; 0x192 <display_sensor_values+0x20>
     192:	ed b7       	in	r30, 0x3d	; 61
     194:	fe b7       	in	r31, 0x3e	; 62
     196:	31 96       	adiw	r30, 0x01	; 1
     198:	80 e0       	ldi	r24, 0x00	; 0
     19a:	91 e0       	ldi	r25, 0x01	; 1
     19c:	91 83       	std	Z+1, r25	; 0x01
     19e:	80 83       	st	Z, r24
     1a0:	0e 94 16 13 	call	0x262c	; 0x262c <uart_mini_printf>
     1a4:	0f 90       	pop	r0
     1a6:	0f 90       	pop	r0

    while (1)
    {
        wait_for(100);  // x ms between refreshed screen
     1a8:	84 e6       	ldi	r24, 0x64	; 100
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	0e 94 9e 10 	call	0x213c	; 0x213c <wait_for>
        for(j=0; j<NB_TARGET; j++)
     1b0:	19 82       	std	Y+1, r1	; 0x01
     1b2:	66 c0       	rjmp	.+204    	; 0x280 <display_sensor_values+0x10e>
        {
            CANGIE |=(1<<ENIT);
     1b4:	ab ed       	ldi	r26, 0xDB	; 219
     1b6:	b0 e0       	ldi	r27, 0x00	; 0
     1b8:	eb ed       	ldi	r30, 0xDB	; 219
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
     1bc:	80 81       	ld	r24, Z
     1be:	80 68       	ori	r24, 0x80	; 128
     1c0:	8c 93       	st	X, r24
            // --- Init Rx Commands
      	    for(i=0; i<9; i++) response_buffer[i]=0; // Nulstiller buffer
     1c2:	1a 82       	std	Y+2, r1	; 0x02
     1c4:	0a c0       	rjmp	.+20     	; 0x1da <display_sensor_values+0x68>
     1c6:	8a 81       	ldd	r24, Y+2	; 0x02
     1c8:	88 2f       	mov	r24, r24
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	fc 01       	movw	r30, r24
     1ce:	e5 5a       	subi	r30, 0xA5	; 165
     1d0:	fc 4f       	sbci	r31, 0xFC	; 252
     1d2:	10 82       	st	Z, r1
     1d4:	8a 81       	ldd	r24, Y+2	; 0x02
     1d6:	8f 5f       	subi	r24, 0xFF	; 255
     1d8:	8a 83       	std	Y+2, r24	; 0x02
     1da:	8a 81       	ldd	r24, Y+2	; 0x02
     1dc:	89 30       	cpi	r24, 0x09	; 9
     1de:	98 f3       	brcs	.-26     	; 0x1c6 <display_sensor_values+0x54>
            response_msg.id.std = ID_TAG_BASE + j;
     1e0:	89 81       	ldd	r24, Y+1	; 0x01
     1e2:	88 2f       	mov	r24, r24
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	80 58       	subi	r24, 0x80	; 128
     1e8:	9f 4f       	sbci	r25, 0xFF	; 255
     1ea:	90 93 68 03 	sts	0x0368, r25
     1ee:	80 93 67 03 	sts	0x0367, r24
            response_msg.ctrl.ide = 0;
     1f2:	10 92 70 03 	sts	0x0370, r1
            response_msg.ctrl.rtr = 0;
     1f6:	10 92 6f 03 	sts	0x036F, r1
            response_msg.dlc = 5;
     1fa:	85 e0       	ldi	r24, 0x05	; 5
     1fc:	80 93 6b 03 	sts	0x036B, r24
            response_msg.cmd = CMD_RX_DATA_MASKED;
     200:	88 e0       	ldi	r24, 0x08	; 8
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	90 93 66 03 	sts	0x0366, r25
     208:	80 93 65 03 	sts	0x0365, r24
            // --- Rx Command
            while(can_cmd(&response_msg) != CAN_CMD_ACCEPTED);
     20c:	84 e6       	ldi	r24, 0x64	; 100
     20e:	93 e0       	ldi	r25, 0x03	; 3
     210:	0e 94 b9 05 	call	0xb72	; 0xb72 <can_cmd>
     214:	88 23       	and	r24, r24
     216:	d1 f7       	brne	.-12     	; 0x20c <display_sensor_values+0x9a>

            // --- Init Tx Commands
  	        for(i=0; i<9; i++) tx_remote_buffer[i]=0; // Nulstiller buffer
     218:	1a 82       	std	Y+2, r1	; 0x02
     21a:	0c c0       	rjmp	.+24     	; 0x234 <display_sensor_values+0xc2>
     21c:	8a 81       	ldd	r24, Y+2	; 0x02
     21e:	28 2f       	mov	r18, r24
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	ce 01       	movw	r24, r28
     224:	03 96       	adiw	r24, 0x03	; 3
     226:	fc 01       	movw	r30, r24
     228:	e2 0f       	add	r30, r18
     22a:	f3 1f       	adc	r31, r19
     22c:	10 82       	st	Z, r1
     22e:	8a 81       	ldd	r24, Y+2	; 0x02
     230:	8f 5f       	subi	r24, 0xFF	; 255
     232:	8a 83       	std	Y+2, r24	; 0x02
     234:	8a 81       	ldd	r24, Y+2	; 0x02
     236:	89 30       	cpi	r24, 0x09	; 9
     238:	88 f3       	brcs	.-30     	; 0x21c <display_sensor_values+0xaa>
            tx_remote_msg.id.std = ID_TAG_BASE + j;
     23a:	89 81       	ldd	r24, Y+1	; 0x01
     23c:	88 2f       	mov	r24, r24
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	80 58       	subi	r24, 0x80	; 128
     242:	9f 4f       	sbci	r25, 0xFF	; 255
     244:	98 8b       	std	Y+16, r25	; 0x10
     246:	8f 87       	std	Y+15, r24	; 0x0f
            tx_remote_msg.ctrl.ide = 0;
     248:	18 8e       	std	Y+24, r1	; 0x18
            tx_remote_msg.ctrl.rtr = 1;
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	8f 8b       	std	Y+23, r24	; 0x17
            tx_remote_msg.dlc = 8; // Antal data bytes der skal modtages 
     24e:	88 e0       	ldi	r24, 0x08	; 8
     250:	8b 8b       	std	Y+19, r24	; 0x13
            tx_remote_msg.cmd = CMD_TX_REMOTE;
     252:	83 e0       	ldi	r24, 0x03	; 3
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	9e 87       	std	Y+14, r25	; 0x0e
     258:	8d 87       	std	Y+13, r24	; 0x0d
            // --- Tx Command
            while(can_cmd(&tx_remote_msg) != CAN_CMD_ACCEPTED);
     25a:	ce 01       	movw	r24, r28
     25c:	0c 96       	adiw	r24, 0x0c	; 12
     25e:	0e 94 b9 05 	call	0xb72	; 0xb72 <can_cmd>
     262:	88 23       	and	r24, r24
     264:	d1 f7       	brne	.-12     	; 0x25a <display_sensor_values+0xe8>

            // --- Wait for Tx remote completed
            while(can_get_status(&tx_remote_msg) == CAN_STATUS_NOT_COMPLETED);
     266:	ce 01       	movw	r24, r28
     268:	0c 96       	adiw	r24, 0x0c	; 12
     26a:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <can_get_status>
     26e:	81 30       	cpi	r24, 0x01	; 1
     270:	d1 f3       	breq	.-12     	; 0x266 <display_sensor_values+0xf4>

            wait_for(50); // Wait x ms for a response if exits
     272:	82 e3       	ldi	r24, 0x32	; 50
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	0e 94 9e 10 	call	0x213c	; 0x213c <wait_for>
    uart_mini_printf("GOGO");

    while (1)
    {
        wait_for(100);  // x ms between refreshed screen
        for(j=0; j<NB_TARGET; j++)
     27a:	89 81       	ldd	r24, Y+1	; 0x01
     27c:	8f 5f       	subi	r24, 0xFF	; 255
     27e:	89 83       	std	Y+1, r24	; 0x01
     280:	89 81       	ldd	r24, Y+1	; 0x01
     282:	83 30       	cpi	r24, 0x03	; 3
     284:	08 f4       	brcc	.+2      	; 0x288 <display_sensor_values+0x116>
     286:	96 cf       	rjmp	.-212    	; 0x1b4 <display_sensor_values+0x42>
     288:	8f cf       	rjmp	.-226    	; 0x1a8 <display_sensor_values+0x36>

0000028a <__vector_18>:
        }
    }
}

ISR(CANIT_vect)
{
     28a:	1f 92       	push	r1
     28c:	0f 92       	push	r0
     28e:	0f b6       	in	r0, 0x3f	; 63
     290:	0f 92       	push	r0
     292:	00 90 5b 00 	lds	r0, 0x005B
     296:	0f 92       	push	r0
     298:	11 24       	eor	r1, r1
     29a:	2f 93       	push	r18
     29c:	3f 93       	push	r19
     29e:	4f 93       	push	r20
     2a0:	5f 93       	push	r21
     2a2:	6f 93       	push	r22
     2a4:	7f 93       	push	r23
     2a6:	8f 93       	push	r24
     2a8:	9f 93       	push	r25
     2aa:	af 93       	push	r26
     2ac:	bf 93       	push	r27
     2ae:	ef 93       	push	r30
     2b0:	ff 93       	push	r31
     2b2:	df 93       	push	r29
     2b4:	cf 93       	push	r28
     2b6:	0f 92       	push	r0
     2b8:	cd b7       	in	r28, 0x3d	; 61
     2ba:	de b7       	in	r29, 0x3e	; 62
    U8 tmp;
 
    CANGIE &=~(1<<ENIT);
     2bc:	ab ed       	ldi	r26, 0xDB	; 219
     2be:	b0 e0       	ldi	r27, 0x00	; 0
     2c0:	eb ed       	ldi	r30, 0xDB	; 219
     2c2:	f0 e0       	ldi	r31, 0x00	; 0
     2c4:	80 81       	ld	r24, Z
     2c6:	8f 77       	andi	r24, 0x7F	; 127
     2c8:	8c 93       	st	X, r24
    
    if (can_get_status(&response_msg) == CAN_STATUS_COMPLETED)
     2ca:	84 e6       	ldi	r24, 0x64	; 100
     2cc:	93 e0       	ldi	r25, 0x03	; 3
     2ce:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <can_get_status>
     2d2:	88 23       	and	r24, r24
     2d4:	09 f0       	breq	.+2      	; 0x2d8 <__vector_18+0x4e>
     2d6:	cd c0       	rjmp	.+410    	; 0x472 <__vector_18+0x1e8>
            {
                // --- Node ID
				uart_mini_printf("Node: %d",response_msg.id.std-127);
     2d8:	80 91 67 03 	lds	r24, 0x0367
     2dc:	90 91 68 03 	lds	r25, 0x0368
     2e0:	9c 01       	movw	r18, r24
     2e2:	2f 57       	subi	r18, 0x7F	; 127
     2e4:	30 40       	sbci	r19, 0x00	; 0
     2e6:	00 d0       	rcall	.+0      	; 0x2e8 <__vector_18+0x5e>
     2e8:	00 d0       	rcall	.+0      	; 0x2ea <__vector_18+0x60>
     2ea:	ed b7       	in	r30, 0x3d	; 61
     2ec:	fe b7       	in	r31, 0x3e	; 62
     2ee:	31 96       	adiw	r30, 0x01	; 1
     2f0:	85 e0       	ldi	r24, 0x05	; 5
     2f2:	91 e0       	ldi	r25, 0x01	; 1
     2f4:	91 83       	std	Z+1, r25	; 0x01
     2f6:	80 83       	st	Z, r24
     2f8:	33 83       	std	Z+3, r19	; 0x03
     2fa:	22 83       	std	Z+2, r18	; 0x02
     2fc:	0e 94 16 13 	call	0x262c	; 0x262c <uart_mini_printf>
     300:	0f 90       	pop	r0
     302:	0f 90       	pop	r0
     304:	0f 90       	pop	r0
     306:	0f 90       	pop	r0
                
                // --- Data               
               	uart_mini_printf(", Data1: %03d", response_buffer[0]);
     308:	80 91 5b 03 	lds	r24, 0x035B
     30c:	28 2f       	mov	r18, r24
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	00 d0       	rcall	.+0      	; 0x312 <__vector_18+0x88>
     312:	00 d0       	rcall	.+0      	; 0x314 <__vector_18+0x8a>
     314:	ed b7       	in	r30, 0x3d	; 61
     316:	fe b7       	in	r31, 0x3e	; 62
     318:	31 96       	adiw	r30, 0x01	; 1
     31a:	8e e0       	ldi	r24, 0x0E	; 14
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	91 83       	std	Z+1, r25	; 0x01
     320:	80 83       	st	Z, r24
     322:	33 83       	std	Z+3, r19	; 0x03
     324:	22 83       	std	Z+2, r18	; 0x02
     326:	0e 94 16 13 	call	0x262c	; 0x262c <uart_mini_printf>
     32a:	0f 90       	pop	r0
     32c:	0f 90       	pop	r0
     32e:	0f 90       	pop	r0
     330:	0f 90       	pop	r0

				uart_mini_printf(", Data2: %03d", response_buffer[1]);
     332:	80 91 5c 03 	lds	r24, 0x035C
     336:	28 2f       	mov	r18, r24
     338:	30 e0       	ldi	r19, 0x00	; 0
     33a:	00 d0       	rcall	.+0      	; 0x33c <__vector_18+0xb2>
     33c:	00 d0       	rcall	.+0      	; 0x33e <__vector_18+0xb4>
     33e:	ed b7       	in	r30, 0x3d	; 61
     340:	fe b7       	in	r31, 0x3e	; 62
     342:	31 96       	adiw	r30, 0x01	; 1
     344:	8c e1       	ldi	r24, 0x1C	; 28
     346:	91 e0       	ldi	r25, 0x01	; 1
     348:	91 83       	std	Z+1, r25	; 0x01
     34a:	80 83       	st	Z, r24
     34c:	33 83       	std	Z+3, r19	; 0x03
     34e:	22 83       	std	Z+2, r18	; 0x02
     350:	0e 94 16 13 	call	0x262c	; 0x262c <uart_mini_printf>
     354:	0f 90       	pop	r0
     356:	0f 90       	pop	r0
     358:	0f 90       	pop	r0
     35a:	0f 90       	pop	r0
				uart_mini_printf(", Data3: %03d", response_buffer[2]);
     35c:	80 91 5d 03 	lds	r24, 0x035D
     360:	28 2f       	mov	r18, r24
     362:	30 e0       	ldi	r19, 0x00	; 0
     364:	00 d0       	rcall	.+0      	; 0x366 <__vector_18+0xdc>
     366:	00 d0       	rcall	.+0      	; 0x368 <__vector_18+0xde>
     368:	ed b7       	in	r30, 0x3d	; 61
     36a:	fe b7       	in	r31, 0x3e	; 62
     36c:	31 96       	adiw	r30, 0x01	; 1
     36e:	8a e2       	ldi	r24, 0x2A	; 42
     370:	91 e0       	ldi	r25, 0x01	; 1
     372:	91 83       	std	Z+1, r25	; 0x01
     374:	80 83       	st	Z, r24
     376:	33 83       	std	Z+3, r19	; 0x03
     378:	22 83       	std	Z+2, r18	; 0x02
     37a:	0e 94 16 13 	call	0x262c	; 0x262c <uart_mini_printf>
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	0f 90       	pop	r0
				uart_mini_printf(", Data4: %03d", response_buffer[3]);
     386:	80 91 5e 03 	lds	r24, 0x035E
     38a:	28 2f       	mov	r18, r24
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	00 d0       	rcall	.+0      	; 0x390 <__vector_18+0x106>
     390:	00 d0       	rcall	.+0      	; 0x392 <__vector_18+0x108>
     392:	ed b7       	in	r30, 0x3d	; 61
     394:	fe b7       	in	r31, 0x3e	; 62
     396:	31 96       	adiw	r30, 0x01	; 1
     398:	88 e3       	ldi	r24, 0x38	; 56
     39a:	91 e0       	ldi	r25, 0x01	; 1
     39c:	91 83       	std	Z+1, r25	; 0x01
     39e:	80 83       	st	Z, r24
     3a0:	33 83       	std	Z+3, r19	; 0x03
     3a2:	22 83       	std	Z+2, r18	; 0x02
     3a4:	0e 94 16 13 	call	0x262c	; 0x262c <uart_mini_printf>
     3a8:	0f 90       	pop	r0
     3aa:	0f 90       	pop	r0
     3ac:	0f 90       	pop	r0
     3ae:	0f 90       	pop	r0
				uart_mini_printf(", Data5: %03d", response_buffer[4]);
     3b0:	80 91 5f 03 	lds	r24, 0x035F
     3b4:	28 2f       	mov	r18, r24
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	00 d0       	rcall	.+0      	; 0x3ba <__vector_18+0x130>
     3ba:	00 d0       	rcall	.+0      	; 0x3bc <__vector_18+0x132>
     3bc:	ed b7       	in	r30, 0x3d	; 61
     3be:	fe b7       	in	r31, 0x3e	; 62
     3c0:	31 96       	adiw	r30, 0x01	; 1
     3c2:	86 e4       	ldi	r24, 0x46	; 70
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	91 83       	std	Z+1, r25	; 0x01
     3c8:	80 83       	st	Z, r24
     3ca:	33 83       	std	Z+3, r19	; 0x03
     3cc:	22 83       	std	Z+2, r18	; 0x02
     3ce:	0e 94 16 13 	call	0x262c	; 0x262c <uart_mini_printf>
     3d2:	0f 90       	pop	r0
     3d4:	0f 90       	pop	r0
     3d6:	0f 90       	pop	r0
     3d8:	0f 90       	pop	r0
				uart_mini_printf(", Data6: %03d", response_buffer[5]);
     3da:	80 91 60 03 	lds	r24, 0x0360
     3de:	28 2f       	mov	r18, r24
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	00 d0       	rcall	.+0      	; 0x3e4 <__vector_18+0x15a>
     3e4:	00 d0       	rcall	.+0      	; 0x3e6 <__vector_18+0x15c>
     3e6:	ed b7       	in	r30, 0x3d	; 61
     3e8:	fe b7       	in	r31, 0x3e	; 62
     3ea:	31 96       	adiw	r30, 0x01	; 1
     3ec:	84 e5       	ldi	r24, 0x54	; 84
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	91 83       	std	Z+1, r25	; 0x01
     3f2:	80 83       	st	Z, r24
     3f4:	33 83       	std	Z+3, r19	; 0x03
     3f6:	22 83       	std	Z+2, r18	; 0x02
     3f8:	0e 94 16 13 	call	0x262c	; 0x262c <uart_mini_printf>
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0
     400:	0f 90       	pop	r0
     402:	0f 90       	pop	r0
				uart_mini_printf(", Data7: %03d", response_buffer[6]);                
     404:	80 91 61 03 	lds	r24, 0x0361
     408:	28 2f       	mov	r18, r24
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	00 d0       	rcall	.+0      	; 0x40e <__vector_18+0x184>
     40e:	00 d0       	rcall	.+0      	; 0x410 <__vector_18+0x186>
     410:	ed b7       	in	r30, 0x3d	; 61
     412:	fe b7       	in	r31, 0x3e	; 62
     414:	31 96       	adiw	r30, 0x01	; 1
     416:	82 e6       	ldi	r24, 0x62	; 98
     418:	91 e0       	ldi	r25, 0x01	; 1
     41a:	91 83       	std	Z+1, r25	; 0x01
     41c:	80 83       	st	Z, r24
     41e:	33 83       	std	Z+3, r19	; 0x03
     420:	22 83       	std	Z+2, r18	; 0x02
     422:	0e 94 16 13 	call	0x262c	; 0x262c <uart_mini_printf>
     426:	0f 90       	pop	r0
     428:	0f 90       	pop	r0
     42a:	0f 90       	pop	r0
     42c:	0f 90       	pop	r0
				uart_mini_printf(", Data8: %03d", response_buffer[7]);
     42e:	80 91 62 03 	lds	r24, 0x0362
     432:	28 2f       	mov	r18, r24
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	00 d0       	rcall	.+0      	; 0x438 <__vector_18+0x1ae>
     438:	00 d0       	rcall	.+0      	; 0x43a <__vector_18+0x1b0>
     43a:	ed b7       	in	r30, 0x3d	; 61
     43c:	fe b7       	in	r31, 0x3e	; 62
     43e:	31 96       	adiw	r30, 0x01	; 1
     440:	80 e7       	ldi	r24, 0x70	; 112
     442:	91 e0       	ldi	r25, 0x01	; 1
     444:	91 83       	std	Z+1, r25	; 0x01
     446:	80 83       	st	Z, r24
     448:	33 83       	std	Z+3, r19	; 0x03
     44a:	22 83       	std	Z+2, r18	; 0x02
     44c:	0e 94 16 13 	call	0x262c	; 0x262c <uart_mini_printf>
     450:	0f 90       	pop	r0
     452:	0f 90       	pop	r0
     454:	0f 90       	pop	r0
     456:	0f 90       	pop	r0
				uart_mini_printf("\r\n");  
     458:	00 d0       	rcall	.+0      	; 0x45a <__vector_18+0x1d0>
     45a:	ed b7       	in	r30, 0x3d	; 61
     45c:	fe b7       	in	r31, 0x3e	; 62
     45e:	31 96       	adiw	r30, 0x01	; 1
     460:	8e e7       	ldi	r24, 0x7E	; 126
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	91 83       	std	Z+1, r25	; 0x01
     466:	80 83       	st	Z, r24
     468:	0e 94 16 13 	call	0x262c	; 0x262c <uart_mini_printf>
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
     470:	0c c0       	rjmp	.+24     	; 0x48a <__vector_18+0x200>
            }
            else
            {
                response_msg.cmd = CMD_ABORT;
     472:	8c e0       	ldi	r24, 0x0C	; 12
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	90 93 66 03 	sts	0x0366, r25
     47a:	80 93 65 03 	sts	0x0365, r24
  	            while (can_cmd(&response_msg) != CAN_CMD_ACCEPTED);
     47e:	84 e6       	ldi	r24, 0x64	; 100
     480:	93 e0       	ldi	r25, 0x03	; 3
     482:	0e 94 b9 05 	call	0xb72	; 0xb72 <can_cmd>
     486:	88 23       	and	r24, r24
     488:	d1 f7       	brne	.-12     	; 0x47e <__vector_18+0x1f4>
            }
}
     48a:	0f 90       	pop	r0
     48c:	cf 91       	pop	r28
     48e:	df 91       	pop	r29
     490:	ff 91       	pop	r31
     492:	ef 91       	pop	r30
     494:	bf 91       	pop	r27
     496:	af 91       	pop	r26
     498:	9f 91       	pop	r25
     49a:	8f 91       	pop	r24
     49c:	7f 91       	pop	r23
     49e:	6f 91       	pop	r22
     4a0:	5f 91       	pop	r21
     4a2:	4f 91       	pop	r20
     4a4:	3f 91       	pop	r19
     4a6:	2f 91       	pop	r18
     4a8:	0f 90       	pop	r0
     4aa:	00 92 5b 00 	sts	0x005B, r0
     4ae:	0f 90       	pop	r0
     4b0:	0f be       	out	0x3f, r0	; 63
     4b2:	0f 90       	pop	r0
     4b4:	1f 90       	pop	r1
     4b6:	18 95       	reti

000004b8 <can_clear_all_mob>:
//! @param none
//!
//! @return none
//------------------------------------------------------------------------------
void can_clear_all_mob(void)
{
     4b8:	df 93       	push	r29
     4ba:	cf 93       	push	r28
     4bc:	00 d0       	rcall	.+0      	; 0x4be <can_clear_all_mob+0x6>
     4be:	0f 92       	push	r0
     4c0:	cd b7       	in	r28, 0x3d	; 61
     4c2:	de b7       	in	r29, 0x3e	; 62
U8  mob_number;
/*
    U8  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     4c4:	1b 82       	std	Y+3, r1	; 0x03
     4c6:	1b c0       	rjmp	.+54     	; 0x4fe <can_clear_all_mob+0x46>
    {
        CANPAGE = (mob_number << 4);    //! Page index
     4c8:	ed ee       	ldi	r30, 0xED	; 237
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	8b 81       	ldd	r24, Y+3	; 0x03
     4ce:	82 95       	swap	r24
     4d0:	80 7f       	andi	r24, 0xF0	; 240
     4d2:	80 83       	st	Z, r24
        Can_clear_mob();                //! All MOb Registers=0
     4d4:	8e ee       	ldi	r24, 0xEE	; 238
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	9a 83       	std	Y+2, r25	; 0x02
     4da:	89 83       	std	Y+1, r24	; 0x01
     4dc:	08 c0       	rjmp	.+16     	; 0x4ee <can_clear_all_mob+0x36>
     4de:	e9 81       	ldd	r30, Y+1	; 0x01
     4e0:	fa 81       	ldd	r31, Y+2	; 0x02
     4e2:	10 82       	st	Z, r1
     4e4:	89 81       	ldd	r24, Y+1	; 0x01
     4e6:	9a 81       	ldd	r25, Y+2	; 0x02
     4e8:	01 96       	adiw	r24, 0x01	; 1
     4ea:	9a 83       	std	Y+2, r25	; 0x02
     4ec:	89 83       	std	Y+1, r24	; 0x01
     4ee:	89 81       	ldd	r24, Y+1	; 0x01
     4f0:	9a 81       	ldd	r25, Y+2	; 0x02
     4f2:	88 3f       	cpi	r24, 0xF8	; 248
     4f4:	91 05       	cpc	r25, r1
     4f6:	98 f3       	brcs	.-26     	; 0x4de <can_clear_all_mob+0x26>
U8  mob_number;
/*
    U8  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     4f8:	8b 81       	ldd	r24, Y+3	; 0x03
     4fa:	8f 5f       	subi	r24, 0xFF	; 255
     4fc:	8b 83       	std	Y+3, r24	; 0x03
     4fe:	8b 81       	ldd	r24, Y+3	; 0x03
     500:	8f 30       	cpi	r24, 0x0F	; 15
     502:	10 f3       	brcs	.-60     	; 0x4c8 <can_clear_all_mob+0x10>
        {
            CANMSG = 0;                 //! MOb data FIFO
        }
*/
    }
}
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	cf 91       	pop	r28
     50c:	df 91       	pop	r29
     50e:	08 95       	ret

00000510 <can_get_mob_free>:
//! @return Handle of MOb.
//!          - MOb[0] upto MOb[LAST_MOB_NB]
//!          - 0xFF if no MOb
//------------------------------------------------------------------------------
U8 can_get_mob_free(void)
{
     510:	df 93       	push	r29
     512:	cf 93       	push	r28
     514:	00 d0       	rcall	.+0      	; 0x516 <can_get_mob_free+0x6>
     516:	0f 92       	push	r0
     518:	cd b7       	in	r28, 0x3d	; 61
     51a:	de b7       	in	r29, 0x3e	; 62
    U8 mob_number, page_saved;

    page_saved = CANPAGE;
     51c:	ed ee       	ldi	r30, 0xED	; 237
     51e:	f0 e0       	ldi	r31, 0x00	; 0
     520:	80 81       	ld	r24, Z
     522:	89 83       	std	Y+1, r24	; 0x01
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     524:	1a 82       	std	Y+2, r1	; 0x02
     526:	19 c0       	rjmp	.+50     	; 0x55a <can_get_mob_free+0x4a>
    {
        Can_set_mob(mob_number);
     528:	ed ee       	ldi	r30, 0xED	; 237
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	8a 81       	ldd	r24, Y+2	; 0x02
     52e:	82 95       	swap	r24
     530:	80 7f       	andi	r24, 0xF0	; 240
     532:	80 83       	st	Z, r24
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
     534:	ef ee       	ldi	r30, 0xEF	; 239
     536:	f0 e0       	ldi	r31, 0x00	; 0
     538:	80 81       	ld	r24, Z
     53a:	88 2f       	mov	r24, r24
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	80 7c       	andi	r24, 0xC0	; 192
     540:	90 70       	andi	r25, 0x00	; 0
     542:	00 97       	sbiw	r24, 0x00	; 0
     544:	39 f4       	brne	.+14     	; 0x554 <can_get_mob_free+0x44>
        {
            CANPAGE = page_saved;
     546:	ed ee       	ldi	r30, 0xED	; 237
     548:	f0 e0       	ldi	r31, 0x00	; 0
     54a:	89 81       	ldd	r24, Y+1	; 0x01
     54c:	80 83       	st	Z, r24
            return (mob_number);
     54e:	8a 81       	ldd	r24, Y+2	; 0x02
     550:	8b 83       	std	Y+3, r24	; 0x03
     552:	0c c0       	rjmp	.+24     	; 0x56c <can_get_mob_free+0x5c>
U8 can_get_mob_free(void)
{
    U8 mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     554:	8a 81       	ldd	r24, Y+2	; 0x02
     556:	8f 5f       	subi	r24, 0xFF	; 255
     558:	8a 83       	std	Y+2, r24	; 0x02
     55a:	8a 81       	ldd	r24, Y+2	; 0x02
     55c:	8f 30       	cpi	r24, 0x0F	; 15
     55e:	20 f3       	brcs	.-56     	; 0x528 <can_get_mob_free+0x18>
        {
            CANPAGE = page_saved;
            return (mob_number);
        }
    }
    CANPAGE = page_saved;
     560:	ed ee       	ldi	r30, 0xED	; 237
     562:	f0 e0       	ldi	r31, 0x00	; 0
     564:	89 81       	ldd	r24, Y+1	; 0x01
     566:	80 83       	st	Z, r24
    return (NO_MOB);
     568:	8f ef       	ldi	r24, 0xFF	; 255
     56a:	8b 83       	std	Y+3, r24	; 0x03
     56c:	8b 81       	ldd	r24, Y+3	; 0x03
}
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	0f 90       	pop	r0
     574:	cf 91       	pop	r28
     576:	df 91       	pop	r29
     578:	08 95       	ret

0000057a <can_get_mob_status>:
//!          -  MOB_CRC_ERROR
//!          -  MOB_STUFF_ERROR
//!          -  MOB_BIT_ERROR
//------------------------------------------------------------------------------
U8 can_get_mob_status(void)
{
     57a:	df 93       	push	r29
     57c:	cf 93       	push	r28
     57e:	00 d0       	rcall	.+0      	; 0x580 <can_get_mob_status+0x6>
     580:	0f 92       	push	r0
     582:	cd b7       	in	r28, 0x3d	; 61
     584:	de b7       	in	r29, 0x3e	; 62
    U8 mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     586:	ef ee       	ldi	r30, 0xEF	; 239
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	80 81       	ld	r24, Z
     58c:	88 2f       	mov	r24, r24
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	80 7c       	andi	r24, 0xC0	; 192
     592:	90 70       	andi	r25, 0x00	; 0
     594:	00 97       	sbiw	r24, 0x00	; 0
     596:	19 f4       	brne	.+6      	; 0x59e <can_get_mob_status+0x24>
     598:	8f ef       	ldi	r24, 0xFF	; 255
     59a:	8b 83       	std	Y+3, r24	; 0x03
     59c:	1d c0       	rjmp	.+58     	; 0x5d8 <can_get_mob_status+0x5e>

    canstmob_copy = CANSTMOB; // Copy for test integrity
     59e:	ee ee       	ldi	r30, 0xEE	; 238
     5a0:	f0 e0       	ldi	r31, 0x00	; 0
     5a2:	80 81       	ld	r24, Z
     5a4:	89 83       	std	Y+1, r24	; 0x01

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
     5a6:	89 81       	ldd	r24, Y+1	; 0x01
     5a8:	80 7e       	andi	r24, 0xE0	; 224
     5aa:	8a 83       	std	Y+2, r24	; 0x02
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
     5ac:	8a 81       	ldd	r24, Y+2	; 0x02
     5ae:	80 32       	cpi	r24, 0x20	; 32
     5b0:	31 f0       	breq	.+12     	; 0x5be <can_get_mob_status+0x44>
     5b2:	8a 81       	ldd	r24, Y+2	; 0x02
     5b4:	80 34       	cpi	r24, 0x40	; 64
     5b6:	19 f0       	breq	.+6      	; 0x5be <can_get_mob_status+0x44>
     5b8:	8a 81       	ldd	r24, Y+2	; 0x02
     5ba:	80 3a       	cpi	r24, 0xA0	; 160
     5bc:	19 f4       	brne	.+6      	; 0x5c4 <can_get_mob_status+0x4a>
         (mob_status==MOB_TX_COMPLETED) ||   \
         (mob_status==MOB_RX_COMPLETED_DLCW) ) { return(mob_status); }
     5be:	8a 81       	ldd	r24, Y+2	; 0x02
     5c0:	8b 83       	std	Y+3, r24	; 0x03
     5c2:	0a c0       	rjmp	.+20     	; 0x5d8 <can_get_mob_status+0x5e>
    // - MOb Status bit_0 = MOB_ACK_ERROR
    // - MOb Status bit_1 = MOB_FORM_ERROR
    // - MOb Status bit_2 = MOB_CRC_ERROR
    // - MOb Status bit_3 = MOB_STUFF_ERROR
    // - MOb Status bit_4 = MOB_BIT_ERROR
    mob_status = canstmob_copy & ERR_MOB_MSK;
     5c4:	89 81       	ldd	r24, Y+1	; 0x01
     5c6:	8f 71       	andi	r24, 0x1F	; 31
     5c8:	8a 83       	std	Y+2, r24	; 0x02
    if (mob_status != 0) { return(mob_status); }
     5ca:	8a 81       	ldd	r24, Y+2	; 0x02
     5cc:	88 23       	and	r24, r24
     5ce:	19 f0       	breq	.+6      	; 0x5d6 <can_get_mob_status+0x5c>
     5d0:	8a 81       	ldd	r24, Y+2	; 0x02
     5d2:	8b 83       	std	Y+3, r24	; 0x03
     5d4:	01 c0       	rjmp	.+2      	; 0x5d8 <can_get_mob_status+0x5e>

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
     5d6:	1b 82       	std	Y+3, r1	; 0x03
     5d8:	8b 81       	ldd	r24, Y+3	; 0x03
}
     5da:	0f 90       	pop	r0
     5dc:	0f 90       	pop	r0
     5de:	0f 90       	pop	r0
     5e0:	cf 91       	pop	r28
     5e2:	df 91       	pop	r29
     5e4:	08 95       	ret

000005e6 <can_get_data>:
//! @param CAN message data address.
//!
//! @return none.
//------------------------------------------------------------------------------
void can_get_data(U8* p_can_message_data)
{
     5e6:	df 93       	push	r29
     5e8:	cf 93       	push	r28
     5ea:	00 d0       	rcall	.+0      	; 0x5ec <can_get_data+0x6>
     5ec:	0f 92       	push	r0
     5ee:	cd b7       	in	r28, 0x3d	; 61
     5f0:	de b7       	in	r29, 0x3e	; 62
     5f2:	9b 83       	std	Y+3, r25	; 0x03
     5f4:	8a 83       	std	Y+2, r24	; 0x02
    U8 data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
     5f6:	19 82       	std	Y+1, r1	; 0x01
     5f8:	0f c0       	rjmp	.+30     	; 0x618 <can_get_data+0x32>
    {
        *(p_can_message_data + data_index) = CANMSG;
     5fa:	89 81       	ldd	r24, Y+1	; 0x01
     5fc:	28 2f       	mov	r18, r24
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	8a 81       	ldd	r24, Y+2	; 0x02
     602:	9b 81       	ldd	r25, Y+3	; 0x03
     604:	dc 01       	movw	r26, r24
     606:	a2 0f       	add	r26, r18
     608:	b3 1f       	adc	r27, r19
     60a:	ea ef       	ldi	r30, 0xFA	; 250
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	80 81       	ld	r24, Z
     610:	8c 93       	st	X, r24
//------------------------------------------------------------------------------
void can_get_data(U8* p_can_message_data)
{
    U8 data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
     612:	89 81       	ldd	r24, Y+1	; 0x01
     614:	8f 5f       	subi	r24, 0xFF	; 255
     616:	89 83       	std	Y+1, r24	; 0x01
     618:	89 81       	ldd	r24, Y+1	; 0x01
     61a:	28 2f       	mov	r18, r24
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	ef ee       	ldi	r30, 0xEF	; 239
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	80 81       	ld	r24, Z
     624:	88 2f       	mov	r24, r24
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	8f 70       	andi	r24, 0x0F	; 15
     62a:	90 70       	andi	r25, 0x00	; 0
     62c:	28 17       	cp	r18, r24
     62e:	39 07       	cpc	r19, r25
     630:	24 f3       	brlt	.-56     	; 0x5fa <can_get_data+0x14>
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
     632:	0f 90       	pop	r0
     634:	0f 90       	pop	r0
     636:	0f 90       	pop	r0
     638:	cf 91       	pop	r28
     63a:	df 91       	pop	r29
     63c:	08 95       	ret

0000063e <can_auto_baudrate>:
//! @return Baudrate Status
//!         ==0: research of bit timing configuration failed
//!         ==1: baudrate performed
//------------------------------------------------------------------------------
U8 can_auto_baudrate (U8 mode)
{
     63e:	df 93       	push	r29
     640:	cf 93       	push	r28
     642:	cd b7       	in	r28, 0x3d	; 61
     644:	de b7       	in	r29, 0x3e	; 62
     646:	68 97       	sbiw	r28, 0x18	; 24
     648:	0f b6       	in	r0, 0x3f	; 63
     64a:	f8 94       	cli
     64c:	de bf       	out	0x3e, r29	; 62
     64e:	0f be       	out	0x3f, r0	; 63
     650:	cd bf       	out	0x3d, r28	; 61
     652:	8a 8b       	std	Y+18, r24	; 0x12
    U8  u8_temp0;                               //! Temporary variable
    U8  brp, prs, ntq, phs1, phs2;              //! Bit timing segment variables
    U8  phs1_inc;                               //! Computing needed
    U8  bt_not_found, wait_for_rx, evaluate;    //! Keys for "while()" loops
    U8  try_conf;                               //! Key for configurate CAN
    U8  ovrtim_flag=0;                          //! Timer overflow count
     654:	1e 82       	std	Y+6, r1	; 0x06
    U16 conf_index;                             //! Count of bit timing configuration tried
    U8  bt_performed;                           //! Return flag

    //! --- Default setting
    phs1_inc = evaluate = 0;
     656:	18 86       	std	Y+8, r1	; 0x08
     658:	88 85       	ldd	r24, Y+8	; 0x08
     65a:	8b 87       	std	Y+11, r24	; 0x0b
    bt_performed = 0;
     65c:	1b 82       	std	Y+3, r1	; 0x03
    conf_index = 0;
     65e:	1d 82       	std	Y+5, r1	; 0x05
     660:	1c 82       	std	Y+4, r1	; 0x04
    bt_not_found = 1;
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	8a 87       	std	Y+10, r24	; 0x0a

    //! --- Init segment variables with MIN values if mode=0
    //!     or init segment variables with CANBTx if mode=1
    if (mode==0)
     666:	8a 89       	ldd	r24, Y+18	; 0x12
     668:	88 23       	and	r24, r24
     66a:	a9 f4       	brne	.+42     	; 0x696 <can_auto_baudrate+0x58>
    {
        brp  = BRP_MIN;
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	88 8b       	std	Y+16, r24	; 0x10
        ntq  = NTQ_MIN;
     670:	88 e0       	ldi	r24, 0x08	; 8
     672:	8e 87       	std	Y+14, r24	; 0x0e
        phs1 = PHS1_MIN;
     674:	82 e0       	ldi	r24, 0x02	; 2
     676:	8d 87       	std	Y+13, r24	; 0x0d
        phs2 = PHS2_MIN;
     678:	82 e0       	ldi	r24, 0x02	; 2
     67a:	8c 87       	std	Y+12, r24	; 0x0c
        prs  = ntq - ( phs1 + phs2 + 1 );
     67c:	9d 85       	ldd	r25, Y+13	; 0x0d
     67e:	8c 85       	ldd	r24, Y+12	; 0x0c
     680:	89 0f       	add	r24, r25
     682:	98 2f       	mov	r25, r24
     684:	90 95       	com	r25
     686:	8e 85       	ldd	r24, Y+14	; 0x0e
     688:	89 0f       	add	r24, r25
     68a:	8f 87       	std	Y+15, r24	; 0x0f
        try_conf = 1;       //! Try this configuration
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	8f 83       	std	Y+7, r24	; 0x07
        wait_for_rx = 1;    //! Enable "while (wait_for_rx ..." loop
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	89 87       	std	Y+9, r24	; 0x09
     694:	a5 c0       	rjmp	.+330    	; 0x7e0 <can_auto_baudrate+0x1a2>
    }
    else //! mode = 1
    {
        brp  = Max ((((CANBT1 &  BRP_MSK) >> 1) +1) , BRP_MIN );
     696:	e2 ee       	ldi	r30, 0xE2	; 226
     698:	f0 e0       	ldi	r31, 0x00	; 0
     69a:	80 81       	ld	r24, Z
     69c:	88 2f       	mov	r24, r24
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	8e 77       	andi	r24, 0x7E	; 126
     6a2:	90 70       	andi	r25, 0x00	; 0
     6a4:	95 95       	asr	r25
     6a6:	87 95       	ror	r24
     6a8:	01 96       	adiw	r24, 0x01	; 1
     6aa:	82 30       	cpi	r24, 0x02	; 2
     6ac:	91 05       	cpc	r25, r1
     6ae:	6c f0       	brlt	.+26     	; 0x6ca <can_auto_baudrate+0x8c>
     6b0:	e2 ee       	ldi	r30, 0xE2	; 226
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	80 81       	ld	r24, Z
     6b6:	88 2f       	mov	r24, r24
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	8e 77       	andi	r24, 0x7E	; 126
     6bc:	90 70       	andi	r25, 0x00	; 0
     6be:	95 95       	asr	r25
     6c0:	87 95       	ror	r24
     6c2:	98 2f       	mov	r25, r24
     6c4:	9f 5f       	subi	r25, 0xFF	; 255
     6c6:	98 8f       	std	Y+24, r25	; 0x18
     6c8:	02 c0       	rjmp	.+4      	; 0x6ce <can_auto_baudrate+0x90>
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	88 8f       	std	Y+24, r24	; 0x18
     6ce:	98 8d       	ldd	r25, Y+24	; 0x18
     6d0:	98 8b       	std	Y+16, r25	; 0x10
        prs  = Max ((((CANBT2 &  PRS_MSK) >> 1) +1) , PRS_MIN );
     6d2:	e3 ee       	ldi	r30, 0xE3	; 227
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	80 81       	ld	r24, Z
     6d8:	88 2f       	mov	r24, r24
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	8e 70       	andi	r24, 0x0E	; 14
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	95 95       	asr	r25
     6e2:	87 95       	ror	r24
     6e4:	01 96       	adiw	r24, 0x01	; 1
     6e6:	82 30       	cpi	r24, 0x02	; 2
     6e8:	91 05       	cpc	r25, r1
     6ea:	6c f0       	brlt	.+26     	; 0x706 <can_auto_baudrate+0xc8>
     6ec:	e3 ee       	ldi	r30, 0xE3	; 227
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	80 81       	ld	r24, Z
     6f2:	88 2f       	mov	r24, r24
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	8e 70       	andi	r24, 0x0E	; 14
     6f8:	90 70       	andi	r25, 0x00	; 0
     6fa:	95 95       	asr	r25
     6fc:	87 95       	ror	r24
     6fe:	98 2f       	mov	r25, r24
     700:	9f 5f       	subi	r25, 0xFF	; 255
     702:	9f 8b       	std	Y+23, r25	; 0x17
     704:	02 c0       	rjmp	.+4      	; 0x70a <can_auto_baudrate+0xcc>
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	8f 8b       	std	Y+23, r24	; 0x17
     70a:	9f 89       	ldd	r25, Y+23	; 0x17
     70c:	9f 87       	std	Y+15, r25	; 0x0f
        phs1 = Max ((((CANBT3 & PHS1_MSK) >> 1) +1) , PHS1_MIN);
     70e:	e4 ee       	ldi	r30, 0xE4	; 228
     710:	f0 e0       	ldi	r31, 0x00	; 0
     712:	80 81       	ld	r24, Z
     714:	88 2f       	mov	r24, r24
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	8e 70       	andi	r24, 0x0E	; 14
     71a:	90 70       	andi	r25, 0x00	; 0
     71c:	95 95       	asr	r25
     71e:	87 95       	ror	r24
     720:	01 96       	adiw	r24, 0x01	; 1
     722:	83 30       	cpi	r24, 0x03	; 3
     724:	91 05       	cpc	r25, r1
     726:	6c f0       	brlt	.+26     	; 0x742 <can_auto_baudrate+0x104>
     728:	e4 ee       	ldi	r30, 0xE4	; 228
     72a:	f0 e0       	ldi	r31, 0x00	; 0
     72c:	80 81       	ld	r24, Z
     72e:	88 2f       	mov	r24, r24
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	8e 70       	andi	r24, 0x0E	; 14
     734:	90 70       	andi	r25, 0x00	; 0
     736:	95 95       	asr	r25
     738:	87 95       	ror	r24
     73a:	98 2f       	mov	r25, r24
     73c:	9f 5f       	subi	r25, 0xFF	; 255
     73e:	9e 8b       	std	Y+22, r25	; 0x16
     740:	02 c0       	rjmp	.+4      	; 0x746 <can_auto_baudrate+0x108>
     742:	82 e0       	ldi	r24, 0x02	; 2
     744:	8e 8b       	std	Y+22, r24	; 0x16
     746:	9e 89       	ldd	r25, Y+22	; 0x16
     748:	9d 87       	std	Y+13, r25	; 0x0d
        phs2 = Max ((((CANBT3 & PHS2_MSK) >> 4) +1) , PHS2_MIN);
     74a:	e4 ee       	ldi	r30, 0xE4	; 228
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	80 81       	ld	r24, Z
     750:	88 2f       	mov	r24, r24
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	80 77       	andi	r24, 0x70	; 112
     756:	90 70       	andi	r25, 0x00	; 0
     758:	95 95       	asr	r25
     75a:	87 95       	ror	r24
     75c:	95 95       	asr	r25
     75e:	87 95       	ror	r24
     760:	95 95       	asr	r25
     762:	87 95       	ror	r24
     764:	95 95       	asr	r25
     766:	87 95       	ror	r24
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	83 30       	cpi	r24, 0x03	; 3
     76c:	91 05       	cpc	r25, r1
     76e:	9c f0       	brlt	.+38     	; 0x796 <can_auto_baudrate+0x158>
     770:	e4 ee       	ldi	r30, 0xE4	; 228
     772:	f0 e0       	ldi	r31, 0x00	; 0
     774:	80 81       	ld	r24, Z
     776:	88 2f       	mov	r24, r24
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	80 77       	andi	r24, 0x70	; 112
     77c:	90 70       	andi	r25, 0x00	; 0
     77e:	95 95       	asr	r25
     780:	87 95       	ror	r24
     782:	95 95       	asr	r25
     784:	87 95       	ror	r24
     786:	95 95       	asr	r25
     788:	87 95       	ror	r24
     78a:	95 95       	asr	r25
     78c:	87 95       	ror	r24
     78e:	98 2f       	mov	r25, r24
     790:	9f 5f       	subi	r25, 0xFF	; 255
     792:	9d 8b       	std	Y+21, r25	; 0x15
     794:	02 c0       	rjmp	.+4      	; 0x79a <can_auto_baudrate+0x15c>
     796:	82 e0       	ldi	r24, 0x02	; 2
     798:	8d 8b       	std	Y+21, r24	; 0x15
     79a:	9d 89       	ldd	r25, Y+21	; 0x15
     79c:	9c 87       	std	Y+12, r25	; 0x0c
        ntq  = Max ((prs + phs1 + phs2 + 1) , NTQ_MIN);
     79e:	8f 85       	ldd	r24, Y+15	; 0x0f
     7a0:	28 2f       	mov	r18, r24
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	8d 85       	ldd	r24, Y+13	; 0x0d
     7a6:	88 2f       	mov	r24, r24
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	28 0f       	add	r18, r24
     7ac:	39 1f       	adc	r19, r25
     7ae:	8c 85       	ldd	r24, Y+12	; 0x0c
     7b0:	88 2f       	mov	r24, r24
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	82 0f       	add	r24, r18
     7b6:	93 1f       	adc	r25, r19
     7b8:	01 96       	adiw	r24, 0x01	; 1
     7ba:	9c 8b       	std	Y+20, r25	; 0x14
     7bc:	8b 8b       	std	Y+19, r24	; 0x13
     7be:	8b 89       	ldd	r24, Y+19	; 0x13
     7c0:	9c 89       	ldd	r25, Y+20	; 0x14
     7c2:	88 30       	cpi	r24, 0x08	; 8
     7c4:	91 05       	cpc	r25, r1
     7c6:	24 f4       	brge	.+8      	; 0x7d0 <can_auto_baudrate+0x192>
     7c8:	88 e0       	ldi	r24, 0x08	; 8
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	9c 8b       	std	Y+20, r25	; 0x14
     7ce:	8b 8b       	std	Y+19, r24	; 0x13
     7d0:	9b 89       	ldd	r25, Y+19	; 0x13
     7d2:	9e 87       	std	Y+14, r25	; 0x0e
        phs1_inc = evaluate = 1;   //! To enter in "while (evaluate ..." loop
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	88 87       	std	Y+8, r24	; 0x08
     7d8:	88 85       	ldd	r24, Y+8	; 0x08
     7da:	8b 87       	std	Y+11, r24	; 0x0b
        try_conf = 0;       //! Look for the next configuration
     7dc:	1f 82       	std	Y+7, r1	; 0x07
        wait_for_rx = 0;    //! Skip "while (wait_for_rx ..." loop
     7de:	19 86       	std	Y+9, r1	; 0x09
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
     7e0:	19 8a       	std	Y+17, r1	; 0x11
     7e2:	1b c0       	rjmp	.+54     	; 0x81a <can_auto_baudrate+0x1dc>
    {
        Can_set_mob(u8_temp0);  //! Page index
     7e4:	ed ee       	ldi	r30, 0xED	; 237
     7e6:	f0 e0       	ldi	r31, 0x00	; 0
     7e8:	89 89       	ldd	r24, Y+17	; 0x11
     7ea:	82 95       	swap	r24
     7ec:	80 7f       	andi	r24, 0xF0	; 240
     7ee:	80 83       	st	Z, r24
        Can_clear_mob();        //! All MOb Registers = 0x00
     7f0:	8e ee       	ldi	r24, 0xEE	; 238
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	9a 83       	std	Y+2, r25	; 0x02
     7f6:	89 83       	std	Y+1, r24	; 0x01
     7f8:	08 c0       	rjmp	.+16     	; 0x80a <can_auto_baudrate+0x1cc>
     7fa:	e9 81       	ldd	r30, Y+1	; 0x01
     7fc:	fa 81       	ldd	r31, Y+2	; 0x02
     7fe:	10 82       	st	Z, r1
     800:	89 81       	ldd	r24, Y+1	; 0x01
     802:	9a 81       	ldd	r25, Y+2	; 0x02
     804:	01 96       	adiw	r24, 0x01	; 1
     806:	9a 83       	std	Y+2, r25	; 0x02
     808:	89 83       	std	Y+1, r24	; 0x01
     80a:	89 81       	ldd	r24, Y+1	; 0x01
     80c:	9a 81       	ldd	r25, Y+2	; 0x02
     80e:	88 3f       	cpi	r24, 0xF8	; 248
     810:	91 05       	cpc	r25, r1
     812:	98 f3       	brcs	.-26     	; 0x7fa <can_auto_baudrate+0x1bc>
        try_conf = 0;       //! Look for the next configuration
        wait_for_rx = 0;    //! Skip "while (wait_for_rx ..." loop
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
     814:	89 89       	ldd	r24, Y+17	; 0x11
     816:	8f 5f       	subi	r24, 0xFF	; 255
     818:	89 8b       	std	Y+17, r24	; 0x11
     81a:	89 89       	ldd	r24, Y+17	; 0x11
     81c:	8f 30       	cpi	r24, 0x0F	; 15
     81e:	10 f3       	brcs	.-60     	; 0x7e4 <can_auto_baudrate+0x1a6>
     820:	61 c1       	rjmp	.+706    	; 0xae4 <can_auto_baudrate+0x4a6>
        Can_clear_mob();        //! All MOb Registers = 0x00
    }

    while (bt_not_found == 1)
    {
        if (try_conf == 1)
     822:	8f 81       	ldd	r24, Y+7	; 0x07
     824:	81 30       	cpi	r24, 0x01	; 1
     826:	09 f0       	breq	.+2      	; 0x82a <can_auto_baudrate+0x1ec>
     828:	c2 c0       	rjmp	.+388    	; 0x9ae <can_auto_baudrate+0x370>
        {
            Can_reset();
     82a:	e8 ed       	ldi	r30, 0xD8	; 216
     82c:	f0 e0       	ldi	r31, 0x00	; 0
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	80 83       	st	Z, r24
            conf_index++;
     832:	8c 81       	ldd	r24, Y+4	; 0x04
     834:	9d 81       	ldd	r25, Y+5	; 0x05
     836:	01 96       	adiw	r24, 0x01	; 1
     838:	9d 83       	std	Y+5, r25	; 0x05
     83a:	8c 83       	std	Y+4, r24	; 0x04
            ovrtim_flag=0;
     83c:	1e 82       	std	Y+6, r1	; 0x06

            //! --- CANBTx registers update (sjw = phs2/2, 3 sample points)
            CANBT1 = ((brp-1) << BRP);
     83e:	e2 ee       	ldi	r30, 0xE2	; 226
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	88 89       	ldd	r24, Y+16	; 0x10
     844:	81 50       	subi	r24, 0x01	; 1
     846:	88 0f       	add	r24, r24
     848:	80 83       	st	Z, r24
            CANBT2 = (((phs2 >> 1)-1) << SJW) |((prs-1) << PRS);
     84a:	e3 ee       	ldi	r30, 0xE3	; 227
     84c:	f0 e0       	ldi	r31, 0x00	; 0
     84e:	8c 85       	ldd	r24, Y+12	; 0x0c
     850:	86 95       	lsr	r24
     852:	88 2f       	mov	r24, r24
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	01 97       	sbiw	r24, 0x01	; 1
     858:	88 0f       	add	r24, r24
     85a:	99 1f       	adc	r25, r25
     85c:	82 95       	swap	r24
     85e:	92 95       	swap	r25
     860:	90 7f       	andi	r25, 0xF0	; 240
     862:	98 27       	eor	r25, r24
     864:	80 7f       	andi	r24, 0xF0	; 240
     866:	98 27       	eor	r25, r24
     868:	28 2f       	mov	r18, r24
     86a:	8f 85       	ldd	r24, Y+15	; 0x0f
     86c:	88 2f       	mov	r24, r24
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	01 97       	sbiw	r24, 0x01	; 1
     872:	88 0f       	add	r24, r24
     874:	99 1f       	adc	r25, r25
     876:	82 2b       	or	r24, r18
     878:	80 83       	st	Z, r24
            CANBT3 = (((phs2-1) << PHS2) | ((phs1-1) << PHS1) | (1<<SMP));
     87a:	e4 ee       	ldi	r30, 0xE4	; 228
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	8c 85       	ldd	r24, Y+12	; 0x0c
     880:	88 2f       	mov	r24, r24
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	01 97       	sbiw	r24, 0x01	; 1
     886:	82 95       	swap	r24
     888:	92 95       	swap	r25
     88a:	90 7f       	andi	r25, 0xF0	; 240
     88c:	98 27       	eor	r25, r24
     88e:	80 7f       	andi	r24, 0xF0	; 240
     890:	98 27       	eor	r25, r24
     892:	28 2f       	mov	r18, r24
     894:	8d 85       	ldd	r24, Y+13	; 0x0d
     896:	88 2f       	mov	r24, r24
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	88 0f       	add	r24, r24
     89e:	99 1f       	adc	r25, r25
     8a0:	82 2b       	or	r24, r18
     8a2:	81 60       	ori	r24, 0x01	; 1
     8a4:	80 83       	st	Z, r24

            //! --- Set CAN-Timer - Used for time-out
            //!     There are 641 (0x281) possible evaluations. The first one provides the faster
            //!         the faster bit timing, the last one gives the slower. It is necessary to
            //!         modulate the time-out versus bit timing (0x281>>3=0x50, matching an U8).
            CANTCON = (U8)(conf_index >> 3);
     8a6:	e5 ee       	ldi	r30, 0xE5	; 229
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	8c 81       	ldd	r24, Y+4	; 0x04
     8ac:	9d 81       	ldd	r25, Y+5	; 0x05
     8ae:	96 95       	lsr	r25
     8b0:	87 95       	ror	r24
     8b2:	96 95       	lsr	r25
     8b4:	87 95       	ror	r24
     8b6:	96 95       	lsr	r25
     8b8:	87 95       	ror	r24
     8ba:	80 83       	st	Z, r24

            //! --- MOb configuration
            Can_set_mob(MOB_0);                 //! Use MOb-0
     8bc:	ed ee       	ldi	r30, 0xED	; 237
     8be:	f0 e0       	ldi	r31, 0x00	; 0
     8c0:	10 82       	st	Z, r1
            CANSTMOB = 0;                       //! Reset MOb status (undone by "Can_reset()")
     8c2:	ee ee       	ldi	r30, 0xEE	; 238
     8c4:	f0 e0       	ldi	r31, 0x00	; 0
     8c6:	10 82       	st	Z, r1
            CANCDMOB = (MOB_Rx_ENA  << CONMOB); //! MOb 0 in receive mode
     8c8:	ef ee       	ldi	r30, 0xEF	; 239
     8ca:	f0 e0       	ldi	r31, 0x00	; 0
     8cc:	80 e8       	ldi	r24, 0x80	; 128
     8ce:	80 83       	st	Z, r24

            //! CAN controller configuration
            CANGCON = (1<<LISTEN) | (1<<ENASTB);//! Enable CAN controller in "listen" mode
     8d0:	e8 ed       	ldi	r30, 0xD8	; 216
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	8a e0       	ldi	r24, 0x0A	; 10
     8d6:	80 83       	st	Z, r24
            while ((CANGSTA & (1<<ENFG)) == 0); //! Wait for Enable OK
     8d8:	e9 ed       	ldi	r30, 0xD9	; 217
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	80 81       	ld	r24, Z
     8de:	88 2f       	mov	r24, r24
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	84 70       	andi	r24, 0x04	; 4
     8e4:	90 70       	andi	r25, 0x00	; 0
     8e6:	00 97       	sbiw	r24, 0x00	; 0
     8e8:	b9 f3       	breq	.-18     	; 0x8d8 <can_auto_baudrate+0x29a>
            CANGIT = 0xFF;                      //! Reset General errors and OVRTIM flag
     8ea:	ea ed       	ldi	r30, 0xDA	; 218
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	8f ef       	ldi	r24, 0xFF	; 255
     8f0:	80 83       	st	Z, r24
     8f2:	5d c0       	rjmp	.+186    	; 0x9ae <can_auto_baudrate+0x370>
        //!     Try to perform a CAN message reception in "LISTEN" mode without error and
        //!     before a time_out done by CAN-Timer.
        //!     Else gives the hand to "EVALUATE LOOP" to have a new set of bit timing.
        while (wait_for_rx == 1)
        {
            u8_temp0 = CANSTMOB;
     8f4:	ee ee       	ldi	r30, 0xEE	; 238
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	80 81       	ld	r24, Z
     8fa:	89 8b       	std	Y+17, r24	; 0x11
            //! --- RxOK received ?
            if ((u8_temp0 & (1<<RXOK)) != 0)
     8fc:	89 89       	ldd	r24, Y+17	; 0x11
     8fe:	88 2f       	mov	r24, r24
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	80 72       	andi	r24, 0x20	; 32
     904:	90 70       	andi	r25, 0x00	; 0
     906:	00 97       	sbiw	r24, 0x00	; 0
     908:	c9 f0       	breq	.+50     	; 0x93c <can_auto_baudrate+0x2fe>
            {   //! --- It is the successful output of "can_auto_baudrate" function
                wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
     90a:	19 86       	std	Y+9, r1	; 0x09
                evaluate = 0;       //! Will skip "while (evaluate ..." loop
     90c:	18 86       	std	Y+8, r1	; 0x08
                bt_not_found = 0;   //! Out of "while (bt_not_found ..." loop
     90e:	1a 86       	std	Y+10, r1	; 0x0a
                bt_performed = 1;   //! Return flag = TRUE
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	8b 83       	std	Y+3, r24	; 0x03
                DISABLE_MOB;        //! Disable MOb-0
     914:	af ee       	ldi	r26, 0xEF	; 239
     916:	b0 e0       	ldi	r27, 0x00	; 0
     918:	ef ee       	ldi	r30, 0xEF	; 239
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	80 81       	ld	r24, Z
     91e:	8f 73       	andi	r24, 0x3F	; 63
     920:	8c 93       	st	X, r24
                CANGCON = 0x00;     //! Disable CAN controller & reset "listen" mode
     922:	e8 ed       	ldi	r30, 0xD8	; 216
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	10 82       	st	Z, r1
                while ((CANGSTA & (1<<ENFG)) != 0); //! Wait for Disable OK
     928:	e9 ed       	ldi	r30, 0xD9	; 217
     92a:	f0 e0       	ldi	r31, 0x00	; 0
     92c:	80 81       	ld	r24, Z
     92e:	88 2f       	mov	r24, r24
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	84 70       	andi	r24, 0x04	; 4
     934:	90 70       	andi	r25, 0x00	; 0
     936:	00 97       	sbiw	r24, 0x00	; 0
     938:	b9 f7       	brne	.-18     	; 0x928 <can_auto_baudrate+0x2ea>
     93a:	39 c0       	rjmp	.+114    	; 0x9ae <can_auto_baudrate+0x370>
            }
             //! --- Else stop if any errors
             else
            {
                //! --- MOb error ?
                if ((u8_temp0 & ((1<<BERR)|(1<<SERR)|(1<<CERR)|(1<<FERR)|(1<<AERR))) !=0)
     93c:	89 89       	ldd	r24, Y+17	; 0x11
     93e:	88 2f       	mov	r24, r24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	8f 71       	andi	r24, 0x1F	; 31
     944:	90 70       	andi	r25, 0x00	; 0
     946:	00 97       	sbiw	r24, 0x00	; 0
     948:	19 f0       	breq	.+6      	; 0x950 <can_auto_baudrate+0x312>
                {
                    evaluate = 1;       //! Will enter in "while (evaluate ..." loop
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	88 87       	std	Y+8, r24	; 0x08
                    wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
     94e:	19 86       	std	Y+9, r1	; 0x09
                }

                u8_temp0 = CANGIT;
     950:	ea ed       	ldi	r30, 0xDA	; 218
     952:	f0 e0       	ldi	r31, 0x00	; 0
     954:	80 81       	ld	r24, Z
     956:	89 8b       	std	Y+17, r24	; 0x11

                //! --- Time_out reached ?
                if ((u8_temp0 & (1<<OVRTIM)) !=0 )
     958:	89 89       	ldd	r24, Y+17	; 0x11
     95a:	88 2f       	mov	r24, r24
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	80 72       	andi	r24, 0x20	; 32
     960:	90 70       	andi	r25, 0x00	; 0
     962:	00 97       	sbiw	r24, 0x00	; 0
     964:	c1 f0       	breq	.+48     	; 0x996 <can_auto_baudrate+0x358>
                {
                    if (ovrtim_flag==0)
     966:	8e 81       	ldd	r24, Y+6	; 0x06
     968:	88 23       	and	r24, r24
     96a:	59 f4       	brne	.+22     	; 0x982 <can_auto_baudrate+0x344>
                    {
                        //! --- First Time_out
                        CANGIT |= (1<<OVRTIM);  // Reset OVRTIM
     96c:	aa ed       	ldi	r26, 0xDA	; 218
     96e:	b0 e0       	ldi	r27, 0x00	; 0
     970:	ea ed       	ldi	r30, 0xDA	; 218
     972:	f0 e0       	ldi	r31, 0x00	; 0
     974:	80 81       	ld	r24, Z
     976:	80 62       	ori	r24, 0x20	; 32
     978:	8c 93       	st	X, r24
                        ovrtim_flag++;
     97a:	8e 81       	ldd	r24, Y+6	; 0x06
     97c:	8f 5f       	subi	r24, 0xFF	; 255
     97e:	8e 83       	std	Y+6, r24	; 0x06
     980:	0a c0       	rjmp	.+20     	; 0x996 <can_auto_baudrate+0x358>
                    }
                    else
                    {
                        //! --- Second Time_out
                        CANGIT |= (1<<OVRTIM);  // Reset OVRTIM
     982:	aa ed       	ldi	r26, 0xDA	; 218
     984:	b0 e0       	ldi	r27, 0x00	; 0
     986:	ea ed       	ldi	r30, 0xDA	; 218
     988:	f0 e0       	ldi	r31, 0x00	; 0
     98a:	80 81       	ld	r24, Z
     98c:	80 62       	ori	r24, 0x20	; 32
     98e:	8c 93       	st	X, r24
                        evaluate = 1;           //! Will enter in "while (evaluate ..." loop
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	88 87       	std	Y+8, r24	; 0x08
                        wait_for_rx = 0;        //! Out of "while (wait_for_rx ..." loop
     994:	19 86       	std	Y+9, r1	; 0x09
                    }
                }

                //! --- General error ?
                if ((u8_temp0 & ((1<<SERG)|(1<<CERG)|(1<<FERG)|(1<<AERG))) !=0)
     996:	89 89       	ldd	r24, Y+17	; 0x11
     998:	88 2f       	mov	r24, r24
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	8f 70       	andi	r24, 0x0F	; 15
     99e:	90 70       	andi	r25, 0x00	; 0
     9a0:	00 97       	sbiw	r24, 0x00	; 0
     9a2:	29 f0       	breq	.+10     	; 0x9ae <can_auto_baudrate+0x370>
                {
                    evaluate = 1;       //! Will enter in "while (evaluate ..." loop
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	88 87       	std	Y+8, r24	; 0x08
                    wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
     9a8:	19 86       	std	Y+9, r1	; 0x09
                    try_conf = 1;       //! Try this configuration
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	8f 83       	std	Y+7, r24	; 0x07
        //! --- WAIT_FOR_RX LOOP:
        //!     ================
        //!     Try to perform a CAN message reception in "LISTEN" mode without error and
        //!     before a time_out done by CAN-Timer.
        //!     Else gives the hand to "EVALUATE LOOP" to have a new set of bit timing.
        while (wait_for_rx == 1)
     9ae:	89 85       	ldd	r24, Y+9	; 0x09
     9b0:	81 30       	cpi	r24, 0x01	; 1
     9b2:	09 f4       	brne	.+2      	; 0x9b6 <can_auto_baudrate+0x378>
     9b4:	9f cf       	rjmp	.-194    	; 0x8f4 <can_auto_baudrate+0x2b6>
     9b6:	92 c0       	rjmp	.+292    	; 0xadc <can_auto_baudrate+0x49e>
        //!     limit and after it is the Prescaler. During the computing high (80%)
        //!     and low (75%) limits of sampling point location are tested. SJW and
        //!     the number of sampling points are not calculated in this loop.
        while (evaluate == 1)
        {
            if (phs1_inc != 0) phs1++;
     9b8:	8b 85       	ldd	r24, Y+11	; 0x0b
     9ba:	88 23       	and	r24, r24
     9bc:	19 f0       	breq	.+6      	; 0x9c4 <can_auto_baudrate+0x386>
     9be:	8d 85       	ldd	r24, Y+13	; 0x0d
     9c0:	8f 5f       	subi	r24, 0xFF	; 255
     9c2:	8d 87       	std	Y+13, r24	; 0x0d
            phs1_inc = 1;
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	8b 87       	std	Y+11, r24	; 0x0b

            // --- The following test takes into account the previous incrementation of phs1
            if ((phs1 > PHS1_MAX) && (phs2 >= PHS2_MAX))
     9c8:	8d 85       	ldd	r24, Y+13	; 0x0d
     9ca:	89 30       	cpi	r24, 0x09	; 9
     9cc:	78 f1       	brcs	.+94     	; 0xa2c <can_auto_baudrate+0x3ee>
     9ce:	8c 85       	ldd	r24, Y+12	; 0x0c
     9d0:	88 30       	cpi	r24, 0x08	; 8
     9d2:	60 f1       	brcs	.+88     	; 0xa2c <can_auto_baudrate+0x3ee>
            {
                phs1 = PHS1_MIN;
     9d4:	82 e0       	ldi	r24, 0x02	; 2
     9d6:	8d 87       	std	Y+13, r24	; 0x0d
                phs2 = PHS2_MIN;
     9d8:	82 e0       	ldi	r24, 0x02	; 2
     9da:	8c 87       	std	Y+12, r24	; 0x0c
                phs1_inc = 0;
     9dc:	1b 86       	std	Y+11, r1	; 0x0b
                if (ntq != NTQ_MAX) ntq++;
     9de:	8e 85       	ldd	r24, Y+14	; 0x0e
     9e0:	89 31       	cpi	r24, 0x19	; 25
     9e2:	21 f0       	breq	.+8      	; 0x9ec <can_auto_baudrate+0x3ae>
     9e4:	8e 85       	ldd	r24, Y+14	; 0x0e
     9e6:	8f 5f       	subi	r24, 0xFF	; 255
     9e8:	8e 87       	std	Y+14, r24	; 0x0e
     9ea:	78 c0       	rjmp	.+240    	; 0xadc <can_auto_baudrate+0x49e>
                else
                {
                    ntq = NTQ_MIN;
     9ec:	88 e0       	ldi	r24, 0x08	; 8
     9ee:	8e 87       	std	Y+14, r24	; 0x0e
                    if (brp != BRP_MAX) brp++;
     9f0:	88 89       	ldd	r24, Y+16	; 0x10
     9f2:	80 34       	cpi	r24, 0x40	; 64
     9f4:	21 f0       	breq	.+8      	; 0x9fe <can_auto_baudrate+0x3c0>
     9f6:	88 89       	ldd	r24, Y+16	; 0x10
     9f8:	8f 5f       	subi	r24, 0xFF	; 255
     9fa:	88 8b       	std	Y+16, r24	; 0x10
     9fc:	6f c0       	rjmp	.+222    	; 0xadc <can_auto_baudrate+0x49e>
                    else
                    {
                        //! --- It is the failing of "can_auto_baudrate" function
                        evaluate = 0;       //! Out of "while (evaluate ..." loop
     9fe:	18 86       	std	Y+8, r1	; 0x08
                        bt_performed = 0;   //! Return flag = FALSE
     a00:	1b 82       	std	Y+3, r1	; 0x03
                        bt_not_found = 0;   //! Out of "while (bt_not_found ..." loop
     a02:	1a 86       	std	Y+10, r1	; 0x0a
                        DISABLE_MOB;        //! Disable MOb-0
     a04:	af ee       	ldi	r26, 0xEF	; 239
     a06:	b0 e0       	ldi	r27, 0x00	; 0
     a08:	ef ee       	ldi	r30, 0xEF	; 239
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	80 81       	ld	r24, Z
     a0e:	8f 73       	andi	r24, 0x3F	; 63
     a10:	8c 93       	st	X, r24
                        CANGCON = 0x00;     //! Disable CAN controller & reset "listen" mode
     a12:	e8 ed       	ldi	r30, 0xD8	; 216
     a14:	f0 e0       	ldi	r31, 0x00	; 0
     a16:	10 82       	st	Z, r1
                        while ((CANGSTA & (1<<ENFG)) != 0); //! Wait for Disable OK
     a18:	e9 ed       	ldi	r30, 0xD9	; 217
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
     a1c:	80 81       	ld	r24, Z
     a1e:	88 2f       	mov	r24, r24
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	84 70       	andi	r24, 0x04	; 4
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	00 97       	sbiw	r24, 0x00	; 0
     a28:	b9 f7       	brne	.-18     	; 0xa18 <can_auto_baudrate+0x3da>
     a2a:	58 c0       	rjmp	.+176    	; 0xadc <can_auto_baudrate+0x49e>
                }
            }
            else    // if (phs1 > PHS1_MAX ...
            {
                //! --- If psh1 > 5 then phs1 =phs2 or =phs2+1, else phs1=phs2
                if (phs1>5)
     a2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     a2e:	86 30       	cpi	r24, 0x06	; 6
     a30:	80 f0       	brcs	.+32     	; 0xa52 <can_auto_baudrate+0x414>
                {
                    if (phs1>(phs2+1)) phs1=(++phs2);
     a32:	8d 85       	ldd	r24, Y+13	; 0x0d
     a34:	28 2f       	mov	r18, r24
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	8c 85       	ldd	r24, Y+12	; 0x0c
     a3a:	88 2f       	mov	r24, r24
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	01 96       	adiw	r24, 0x01	; 1
     a40:	82 17       	cp	r24, r18
     a42:	93 07       	cpc	r25, r19
     a44:	44 f4       	brge	.+16     	; 0xa56 <can_auto_baudrate+0x418>
     a46:	8c 85       	ldd	r24, Y+12	; 0x0c
     a48:	8f 5f       	subi	r24, 0xFF	; 255
     a4a:	8c 87       	std	Y+12, r24	; 0x0c
     a4c:	8c 85       	ldd	r24, Y+12	; 0x0c
     a4e:	8d 87       	std	Y+13, r24	; 0x0d
     a50:	02 c0       	rjmp	.+4      	; 0xa56 <can_auto_baudrate+0x418>
                }
                else
                {
                phs2=phs1;
     a52:	8d 85       	ldd	r24, Y+13	; 0x0d
     a54:	8c 87       	std	Y+12, r24	; 0x0c
                }
                prs = ntq - ( phs1 + phs2 + 1 );
     a56:	9d 85       	ldd	r25, Y+13	; 0x0d
     a58:	8c 85       	ldd	r24, Y+12	; 0x0c
     a5a:	89 0f       	add	r24, r25
     a5c:	98 2f       	mov	r25, r24
     a5e:	90 95       	com	r25
     a60:	8e 85       	ldd	r24, Y+14	; 0x0e
     a62:	89 0f       	add	r24, r25
     a64:	8f 87       	std	Y+15, r24	; 0x0f

                //! --- Test PRS limits
                if ((prs <= PRS_MAX) && (prs >= PRS_MIN))
     a66:	8f 85       	ldd	r24, Y+15	; 0x0f
     a68:	89 30       	cpi	r24, 0x09	; 9
     a6a:	c0 f5       	brcc	.+112    	; 0xadc <can_auto_baudrate+0x49e>
     a6c:	8f 85       	ldd	r24, Y+15	; 0x0f
     a6e:	88 23       	and	r24, r24
     a70:	a9 f1       	breq	.+106    	; 0xadc <can_auto_baudrate+0x49e>
                {
                    //! --- Values  accepted if  80% >= sampling point >= 75%
                    if (((phs2<<2) >= (1+prs+phs1)) && ((phs2+phs2+phs2) <= (1+prs+phs1)))
     a72:	8c 85       	ldd	r24, Y+12	; 0x0c
     a74:	88 2f       	mov	r24, r24
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	ac 01       	movw	r20, r24
     a7a:	44 0f       	add	r20, r20
     a7c:	55 1f       	adc	r21, r21
     a7e:	44 0f       	add	r20, r20
     a80:	55 1f       	adc	r21, r21
     a82:	8f 85       	ldd	r24, Y+15	; 0x0f
     a84:	88 2f       	mov	r24, r24
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	9c 01       	movw	r18, r24
     a8a:	2f 5f       	subi	r18, 0xFF	; 255
     a8c:	3f 4f       	sbci	r19, 0xFF	; 255
     a8e:	8d 85       	ldd	r24, Y+13	; 0x0d
     a90:	88 2f       	mov	r24, r24
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	82 0f       	add	r24, r18
     a96:	93 1f       	adc	r25, r19
     a98:	48 17       	cp	r20, r24
     a9a:	59 07       	cpc	r21, r25
     a9c:	fc f0       	brlt	.+62     	; 0xadc <can_auto_baudrate+0x49e>
     a9e:	8c 85       	ldd	r24, Y+12	; 0x0c
     aa0:	28 2f       	mov	r18, r24
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	8c 85       	ldd	r24, Y+12	; 0x0c
     aa6:	88 2f       	mov	r24, r24
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	28 0f       	add	r18, r24
     aac:	39 1f       	adc	r19, r25
     aae:	8c 85       	ldd	r24, Y+12	; 0x0c
     ab0:	88 2f       	mov	r24, r24
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	a9 01       	movw	r20, r18
     ab6:	48 0f       	add	r20, r24
     ab8:	59 1f       	adc	r21, r25
     aba:	8f 85       	ldd	r24, Y+15	; 0x0f
     abc:	88 2f       	mov	r24, r24
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	9c 01       	movw	r18, r24
     ac2:	2f 5f       	subi	r18, 0xFF	; 255
     ac4:	3f 4f       	sbci	r19, 0xFF	; 255
     ac6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ac8:	88 2f       	mov	r24, r24
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	82 0f       	add	r24, r18
     ace:	93 1f       	adc	r25, r19
     ad0:	84 17       	cp	r24, r20
     ad2:	95 07       	cpc	r25, r21
     ad4:	1c f0       	brlt	.+6      	; 0xadc <can_auto_baudrate+0x49e>
                    {
                        evaluate = 0;     //! Out of "while (evaluate ..." loop &
     ad6:	18 86       	std	Y+8, r1	; 0x08
                        wait_for_rx = 1;  //!    new "while (bt_not_found ..." loop
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	89 87       	std	Y+9, r24	; 0x09
        //!     then Phase2=Phase1 and if Phase1>5, Phase1 can be equal to Phase2 or
        //!     Phase2+1. After this, the number of TQ is increased up to its high
        //!     limit and after it is the Prescaler. During the computing high (80%)
        //!     and low (75%) limits of sampling point location are tested. SJW and
        //!     the number of sampling points are not calculated in this loop.
        while (evaluate == 1)
     adc:	88 85       	ldd	r24, Y+8	; 0x08
     ade:	81 30       	cpi	r24, 0x01	; 1
     ae0:	09 f4       	brne	.+2      	; 0xae4 <can_auto_baudrate+0x4a6>
     ae2:	6a cf       	rjmp	.-300    	; 0x9b8 <can_auto_baudrate+0x37a>
    {
        Can_set_mob(u8_temp0);  //! Page index
        Can_clear_mob();        //! All MOb Registers = 0x00
    }

    while (bt_not_found == 1)
     ae4:	8a 85       	ldd	r24, Y+10	; 0x0a
     ae6:	81 30       	cpi	r24, 0x01	; 1
     ae8:	09 f4       	brne	.+2      	; 0xaec <can_auto_baudrate+0x4ae>
     aea:	9b ce       	rjmp	.-714    	; 0x822 <can_auto_baudrate+0x1e4>
                }
            }
        } // while (evaluate ...
    } // while (bt_not_found ...

    return (bt_performed);
     aec:	8b 81       	ldd	r24, Y+3	; 0x03
}
     aee:	68 96       	adiw	r28, 0x18	; 24
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	f8 94       	cli
     af4:	de bf       	out	0x3e, r29	; 62
     af6:	0f be       	out	0x3f, r0	; 63
     af8:	cd bf       	out	0x3d, r28	; 61
     afa:	cf 91       	pop	r28
     afc:	df 91       	pop	r29
     afe:	08 95       	ret

00000b00 <can_fixed_baudrate>:
//!
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
U8 can_fixed_baudrate(U8 mode)
{
     b00:	df 93       	push	r29
     b02:	cf 93       	push	r28
     b04:	0f 92       	push	r0
     b06:	cd b7       	in	r28, 0x3d	; 61
     b08:	de b7       	in	r29, 0x3e	; 62
     b0a:	89 83       	std	Y+1, r24	; 0x01
    Can_reset();
     b0c:	e8 ed       	ldi	r30, 0xD8	; 216
     b0e:	f0 e0       	ldi	r31, 0x00	; 0
     b10:	81 e0       	ldi	r24, 0x01	; 1
     b12:	80 83       	st	Z, r24
    Can_conf_bt();
     b14:	e2 ee       	ldi	r30, 0xE2	; 226
     b16:	f0 e0       	ldi	r31, 0x00	; 0
     b18:	82 e0       	ldi	r24, 0x02	; 2
     b1a:	80 83       	st	Z, r24
     b1c:	e3 ee       	ldi	r30, 0xE3	; 227
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	8c e0       	ldi	r24, 0x0C	; 12
     b22:	80 83       	st	Z, r24
     b24:	e4 ee       	ldi	r30, 0xE4	; 228
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	87 e3       	ldi	r24, 0x37	; 55
     b2a:	80 83       	st	Z, r24
    return 1;
     b2c:	81 e0       	ldi	r24, 0x01	; 1
}
     b2e:	0f 90       	pop	r0
     b30:	cf 91       	pop	r28
     b32:	df 91       	pop	r29
     b34:	08 95       	ret

00000b36 <can_init>:
//!         ==0: research of bit timing configuration failed
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
U8 can_init(U8 mode)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <can_init+0x6>
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
     b40:	89 83       	std	Y+1, r24	; 0x01
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     b42:	89 81       	ldd	r24, Y+1	; 0x01
     b44:	0e 94 80 05 	call	0xb00	; 0xb00 <can_fixed_baudrate>
     b48:	88 23       	and	r24, r24
     b4a:	11 f4       	brne	.+4      	; 0xb50 <can_init+0x1a>
     b4c:	1a 82       	std	Y+2, r1	; 0x02
     b4e:	0b c0       	rjmp	.+22     	; 0xb66 <can_init+0x30>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     b50:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <can_clear_all_mob>
    Can_enable();                               // c.f. macro in "can_drv.h" 
     b54:	a8 ed       	ldi	r26, 0xD8	; 216
     b56:	b0 e0       	ldi	r27, 0x00	; 0
     b58:	e8 ed       	ldi	r30, 0xD8	; 216
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	80 81       	ld	r24, Z
     b5e:	82 60       	ori	r24, 0x02	; 2
     b60:	8c 93       	st	X, r24
    return (1);
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	8a 83       	std	Y+2, r24	; 0x02
     b66:	8a 81       	ldd	r24, Y+2	; 0x02
}
     b68:	0f 90       	pop	r0
     b6a:	0f 90       	pop	r0
     b6c:	cf 91       	pop	r28
     b6e:	df 91       	pop	r29
     b70:	08 95       	ret

00000b72 <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
U8 can_cmd(st_cmd_t* cmd)
{
     b72:	df 93       	push	r29
     b74:	cf 93       	push	r28
     b76:	cd b7       	in	r28, 0x3d	; 61
     b78:	de b7       	in	r29, 0x3e	; 62
     b7a:	2d 97       	sbiw	r28, 0x0d	; 13
     b7c:	0f b6       	in	r0, 0x3f	; 63
     b7e:	f8 94       	cli
     b80:	de bf       	out	0x3e, r29	; 62
     b82:	0f be       	out	0x3f, r0	; 63
     b84:	cd bf       	out	0x3d, r28	; 61
     b86:	9a 87       	std	Y+10, r25	; 0x0a
     b88:	89 87       	std	Y+9, r24	; 0x09
  U8 mob_handle, cpt;
  U32 u32_temp;
  
  if (cmd->cmd == CMD_ABORT)
     b8a:	e9 85       	ldd	r30, Y+9	; 0x09
     b8c:	fa 85       	ldd	r31, Y+10	; 0x0a
     b8e:	81 81       	ldd	r24, Z+1	; 0x01
     b90:	92 81       	ldd	r25, Z+2	; 0x02
     b92:	8c 30       	cpi	r24, 0x0C	; 12
     b94:	91 05       	cpc	r25, r1
     b96:	f9 f4       	brne	.+62     	; 0xbd6 <can_cmd+0x64>
  {
    if (cmd->status == MOB_PENDING)
     b98:	e9 85       	ldd	r30, Y+9	; 0x09
     b9a:	fa 85       	ldd	r31, Y+10	; 0x0a
     b9c:	82 85       	ldd	r24, Z+10	; 0x0a
     b9e:	80 36       	cpi	r24, 0x60	; 96
     ba0:	a9 f4       	brne	.+42     	; 0xbcc <can_cmd+0x5a>
    {
      // Rx or Tx not yet performed
      Can_set_mob(cmd->handle);
     ba2:	ad ee       	ldi	r26, 0xED	; 237
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e9 85       	ldd	r30, Y+9	; 0x09
     ba8:	fa 85       	ldd	r31, Y+10	; 0x0a
     baa:	80 81       	ld	r24, Z
     bac:	82 95       	swap	r24
     bae:	80 7f       	andi	r24, 0xF0	; 240
     bb0:	8c 93       	st	X, r24
      Can_mob_abort();
     bb2:	af ee       	ldi	r26, 0xEF	; 239
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	ef ee       	ldi	r30, 0xEF	; 239
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	8f 73       	andi	r24, 0x3F	; 63
     bbe:	8c 93       	st	X, r24
      Can_clear_status_mob();       // To be sure !
     bc0:	ee ee       	ldi	r30, 0xEE	; 238
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	10 82       	st	Z, r1
      cmd->handle = 0;
     bc6:	e9 85       	ldd	r30, Y+9	; 0x09
     bc8:	fa 85       	ldd	r31, Y+10	; 0x0a
     bca:	10 82       	st	Z, r1
    }
    cmd->status = STATUS_CLEARED; 
     bcc:	e9 85       	ldd	r30, Y+9	; 0x09
     bce:	fa 85       	ldd	r31, Y+10	; 0x0a
     bd0:	12 86       	std	Z+10, r1	; 0x0a
     bd2:	0c 94 eb 0e 	jmp	0x1dd6	; 0x1dd6 <__stack+0xcd7>
  }
  else
  {
    mob_handle = can_get_mob_free();
     bd6:	0e 94 88 02 	call	0x510	; 0x510 <can_get_mob_free>
     bda:	8c 83       	std	Y+4, r24	; 0x04
    if (mob_handle!= NO_MOB)
     bdc:	8c 81       	ldd	r24, Y+4	; 0x04
     bde:	8f 3f       	cpi	r24, 0xFF	; 255
     be0:	11 f4       	brne	.+4      	; 0xbe6 <can_cmd+0x74>
     be2:	0c 94 e4 0e 	jmp	0x1dc8	; 0x1dc8 <__stack+0xcc9>
    {
      cmd->status = MOB_PENDING; 
     be6:	e9 85       	ldd	r30, Y+9	; 0x09
     be8:	fa 85       	ldd	r31, Y+10	; 0x0a
     bea:	80 e6       	ldi	r24, 0x60	; 96
     bec:	82 87       	std	Z+10, r24	; 0x0a
      cmd->handle = mob_handle;
     bee:	e9 85       	ldd	r30, Y+9	; 0x09
     bf0:	fa 85       	ldd	r31, Y+10	; 0x0a
     bf2:	8c 81       	ldd	r24, Y+4	; 0x04
     bf4:	80 83       	st	Z, r24
      Can_set_mob(mob_handle);
     bf6:	ed ee       	ldi	r30, 0xED	; 237
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	8c 81       	ldd	r24, Y+4	; 0x04
     bfc:	82 95       	swap	r24
     bfe:	80 7f       	andi	r24, 0xF0	; 240
     c00:	80 83       	st	Z, r24
      Can_clear_mob();
     c02:	8e ee       	ldi	r24, 0xEE	; 238
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	9a 83       	std	Y+2, r25	; 0x02
     c08:	89 83       	std	Y+1, r24	; 0x01
     c0a:	08 c0       	rjmp	.+16     	; 0xc1c <can_cmd+0xaa>
     c0c:	e9 81       	ldd	r30, Y+1	; 0x01
     c0e:	fa 81       	ldd	r31, Y+2	; 0x02
     c10:	10 82       	st	Z, r1
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	9a 81       	ldd	r25, Y+2	; 0x02
     c16:	01 96       	adiw	r24, 0x01	; 1
     c18:	9a 83       	std	Y+2, r25	; 0x02
     c1a:	89 83       	std	Y+1, r24	; 0x01
     c1c:	89 81       	ldd	r24, Y+1	; 0x01
     c1e:	9a 81       	ldd	r25, Y+2	; 0x02
     c20:	88 3f       	cpi	r24, 0xF8	; 248
     c22:	91 05       	cpc	r25, r1
     c24:	98 f3       	brcs	.-26     	; 0xc0c <can_cmd+0x9a>
          
      switch (cmd->cmd)
     c26:	e9 85       	ldd	r30, Y+9	; 0x09
     c28:	fa 85       	ldd	r31, Y+10	; 0x0a
     c2a:	81 81       	ldd	r24, Z+1	; 0x01
     c2c:	92 81       	ldd	r25, Z+2	; 0x02
     c2e:	9d 87       	std	Y+13, r25	; 0x0d
     c30:	8c 87       	std	Y+12, r24	; 0x0c
     c32:	8c 85       	ldd	r24, Y+12	; 0x0c
     c34:	9d 85       	ldd	r25, Y+13	; 0x0d
     c36:	86 30       	cpi	r24, 0x06	; 6
     c38:	91 05       	cpc	r25, r1
     c3a:	09 f4       	brne	.+2      	; 0xc3e <can_cmd+0xcc>
     c3c:	73 c3       	rjmp	.+1766   	; 0x1324 <__stack+0x225>
     c3e:	8c 85       	ldd	r24, Y+12	; 0x0c
     c40:	9d 85       	ldd	r25, Y+13	; 0x0d
     c42:	87 30       	cpi	r24, 0x07	; 7
     c44:	91 05       	cpc	r25, r1
     c46:	30 f5       	brcc	.+76     	; 0xc94 <can_cmd+0x122>
     c48:	8c 85       	ldd	r24, Y+12	; 0x0c
     c4a:	9d 85       	ldd	r25, Y+13	; 0x0d
     c4c:	83 30       	cpi	r24, 0x03	; 3
     c4e:	91 05       	cpc	r25, r1
     c50:	09 f4       	brne	.+2      	; 0xc54 <can_cmd+0xe2>
     c52:	d3 c1       	rjmp	.+934    	; 0xffa <can_cmd+0x488>
     c54:	8c 85       	ldd	r24, Y+12	; 0x0c
     c56:	9d 85       	ldd	r25, Y+13	; 0x0d
     c58:	84 30       	cpi	r24, 0x04	; 4
     c5a:	91 05       	cpc	r25, r1
     c5c:	68 f4       	brcc	.+26     	; 0xc78 <can_cmd+0x106>
     c5e:	8c 85       	ldd	r24, Y+12	; 0x0c
     c60:	9d 85       	ldd	r25, Y+13	; 0x0d
     c62:	81 30       	cpi	r24, 0x01	; 1
     c64:	91 05       	cpc	r25, r1
     c66:	e9 f1       	breq	.+122    	; 0xce2 <can_cmd+0x170>
     c68:	8c 85       	ldd	r24, Y+12	; 0x0c
     c6a:	9d 85       	ldd	r25, Y+13	; 0x0d
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	91 05       	cpc	r25, r1
     c70:	09 f4       	brne	.+2      	; 0xc74 <can_cmd+0x102>
     c72:	02 c1       	rjmp	.+516    	; 0xe78 <can_cmd+0x306>
     c74:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <__stack+0xcc1>
     c78:	8c 85       	ldd	r24, Y+12	; 0x0c
     c7a:	9d 85       	ldd	r25, Y+13	; 0x0d
     c7c:	84 30       	cpi	r24, 0x04	; 4
     c7e:	91 05       	cpc	r25, r1
     c80:	09 f4       	brne	.+2      	; 0xc84 <can_cmd+0x112>
     c82:	64 c2       	rjmp	.+1224   	; 0x114c <__stack+0x4d>
     c84:	8c 85       	ldd	r24, Y+12	; 0x0c
     c86:	9d 85       	ldd	r25, Y+13	; 0x0d
     c88:	85 30       	cpi	r24, 0x05	; 5
     c8a:	91 05       	cpc	r25, r1
     c8c:	09 f4       	brne	.+2      	; 0xc90 <can_cmd+0x11e>
     c8e:	cf c2       	rjmp	.+1438   	; 0x122e <__stack+0x12f>
     c90:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <__stack+0xcc1>
     c94:	8c 85       	ldd	r24, Y+12	; 0x0c
     c96:	9d 85       	ldd	r25, Y+13	; 0x0d
     c98:	89 30       	cpi	r24, 0x09	; 9
     c9a:	91 05       	cpc	r25, r1
     c9c:	09 f4       	brne	.+2      	; 0xca0 <can_cmd+0x12e>
     c9e:	c3 c5       	rjmp	.+2950   	; 0x1826 <__stack+0x727>
     ca0:	8c 85       	ldd	r24, Y+12	; 0x0c
     ca2:	9d 85       	ldd	r25, Y+13	; 0x0d
     ca4:	8a 30       	cpi	r24, 0x0A	; 10
     ca6:	91 05       	cpc	r25, r1
     ca8:	70 f4       	brcc	.+28     	; 0xcc6 <can_cmd+0x154>
     caa:	8c 85       	ldd	r24, Y+12	; 0x0c
     cac:	9d 85       	ldd	r25, Y+13	; 0x0d
     cae:	87 30       	cpi	r24, 0x07	; 7
     cb0:	91 05       	cpc	r25, r1
     cb2:	09 f4       	brne	.+2      	; 0xcb6 <can_cmd+0x144>
     cb4:	ba c3       	rjmp	.+1908   	; 0x142a <__stack+0x32b>
     cb6:	8c 85       	ldd	r24, Y+12	; 0x0c
     cb8:	9d 85       	ldd	r25, Y+13	; 0x0d
     cba:	88 30       	cpi	r24, 0x08	; 8
     cbc:	91 05       	cpc	r25, r1
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <can_cmd+0x150>
     cc0:	ae c4       	rjmp	.+2396   	; 0x161e <__stack+0x51f>
     cc2:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <__stack+0xcc1>
     cc6:	8c 85       	ldd	r24, Y+12	; 0x0c
     cc8:	9d 85       	ldd	r25, Y+13	; 0x0d
     cca:	8a 30       	cpi	r24, 0x0A	; 10
     ccc:	91 05       	cpc	r25, r1
     cce:	09 f4       	brne	.+2      	; 0xcd2 <can_cmd+0x160>
     cd0:	b6 c6       	rjmp	.+3436   	; 0x1a3e <__stack+0x93f>
     cd2:	8c 85       	ldd	r24, Y+12	; 0x0c
     cd4:	9d 85       	ldd	r25, Y+13	; 0x0d
     cd6:	8b 30       	cpi	r24, 0x0B	; 11
     cd8:	91 05       	cpc	r25, r1
     cda:	09 f4       	brne	.+2      	; 0xcde <can_cmd+0x16c>
     cdc:	4c c7       	rjmp	.+3736   	; 0x1b76 <__stack+0xa77>
     cde:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <__stack+0xcc1>
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     ce2:	e9 85       	ldd	r30, Y+9	; 0x09
     ce4:	fa 85       	ldd	r31, Y+10	; 0x0a
     ce6:	84 85       	ldd	r24, Z+12	; 0x0c
     ce8:	88 23       	and	r24, r24
     cea:	09 f4       	brne	.+2      	; 0xcee <can_cmd+0x17c>
     cec:	57 c0       	rjmp	.+174    	; 0xd9c <can_cmd+0x22a>
     cee:	a3 ef       	ldi	r26, 0xF3	; 243
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	89 85       	ldd	r24, Y+9	; 0x09
     cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf6:	03 96       	adiw	r24, 0x03	; 3
     cf8:	fc 01       	movw	r30, r24
     cfa:	33 96       	adiw	r30, 0x03	; 3
     cfc:	80 81       	ld	r24, Z
     cfe:	28 2f       	mov	r18, r24
     d00:	22 0f       	add	r18, r18
     d02:	22 0f       	add	r18, r18
     d04:	22 0f       	add	r18, r18
     d06:	89 85       	ldd	r24, Y+9	; 0x09
     d08:	9a 85       	ldd	r25, Y+10	; 0x0a
     d0a:	03 96       	adiw	r24, 0x03	; 3
     d0c:	fc 01       	movw	r30, r24
     d0e:	32 96       	adiw	r30, 0x02	; 2
     d10:	80 81       	ld	r24, Z
     d12:	82 95       	swap	r24
     d14:	86 95       	lsr	r24
     d16:	87 70       	andi	r24, 0x07	; 7
     d18:	82 0f       	add	r24, r18
     d1a:	8c 93       	st	X, r24
     d1c:	a2 ef       	ldi	r26, 0xF2	; 242
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	89 85       	ldd	r24, Y+9	; 0x09
     d22:	9a 85       	ldd	r25, Y+10	; 0x0a
     d24:	03 96       	adiw	r24, 0x03	; 3
     d26:	fc 01       	movw	r30, r24
     d28:	32 96       	adiw	r30, 0x02	; 2
     d2a:	80 81       	ld	r24, Z
     d2c:	28 2f       	mov	r18, r24
     d2e:	22 0f       	add	r18, r18
     d30:	22 0f       	add	r18, r18
     d32:	22 0f       	add	r18, r18
     d34:	89 85       	ldd	r24, Y+9	; 0x09
     d36:	9a 85       	ldd	r25, Y+10	; 0x0a
     d38:	03 96       	adiw	r24, 0x03	; 3
     d3a:	fc 01       	movw	r30, r24
     d3c:	31 96       	adiw	r30, 0x01	; 1
     d3e:	80 81       	ld	r24, Z
     d40:	82 95       	swap	r24
     d42:	86 95       	lsr	r24
     d44:	87 70       	andi	r24, 0x07	; 7
     d46:	82 0f       	add	r24, r18
     d48:	8c 93       	st	X, r24
     d4a:	a1 ef       	ldi	r26, 0xF1	; 241
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	89 85       	ldd	r24, Y+9	; 0x09
     d50:	9a 85       	ldd	r25, Y+10	; 0x0a
     d52:	03 96       	adiw	r24, 0x03	; 3
     d54:	fc 01       	movw	r30, r24
     d56:	31 96       	adiw	r30, 0x01	; 1
     d58:	80 81       	ld	r24, Z
     d5a:	28 2f       	mov	r18, r24
     d5c:	22 0f       	add	r18, r18
     d5e:	22 0f       	add	r18, r18
     d60:	22 0f       	add	r18, r18
     d62:	89 85       	ldd	r24, Y+9	; 0x09
     d64:	9a 85       	ldd	r25, Y+10	; 0x0a
     d66:	03 96       	adiw	r24, 0x03	; 3
     d68:	fc 01       	movw	r30, r24
     d6a:	80 81       	ld	r24, Z
     d6c:	82 95       	swap	r24
     d6e:	86 95       	lsr	r24
     d70:	87 70       	andi	r24, 0x07	; 7
     d72:	82 0f       	add	r24, r18
     d74:	8c 93       	st	X, r24
     d76:	a0 ef       	ldi	r26, 0xF0	; 240
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	89 85       	ldd	r24, Y+9	; 0x09
     d7c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d7e:	03 96       	adiw	r24, 0x03	; 3
     d80:	fc 01       	movw	r30, r24
     d82:	80 81       	ld	r24, Z
     d84:	88 0f       	add	r24, r24
     d86:	88 0f       	add	r24, r24
     d88:	88 0f       	add	r24, r24
     d8a:	8c 93       	st	X, r24
     d8c:	af ee       	ldi	r26, 0xEF	; 239
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	ef ee       	ldi	r30, 0xEF	; 239
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	80 61       	ori	r24, 0x10	; 16
     d98:	8c 93       	st	X, r24
     d9a:	28 c0       	rjmp	.+80     	; 0xdec <can_cmd+0x27a>
          else              { Can_set_std_id(cmd->id.std);}
     d9c:	a3 ef       	ldi	r26, 0xF3	; 243
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	89 85       	ldd	r24, Y+9	; 0x09
     da2:	9a 85       	ldd	r25, Y+10	; 0x0a
     da4:	03 96       	adiw	r24, 0x03	; 3
     da6:	fc 01       	movw	r30, r24
     da8:	31 96       	adiw	r30, 0x01	; 1
     daa:	80 81       	ld	r24, Z
     dac:	28 2f       	mov	r18, r24
     dae:	22 95       	swap	r18
     db0:	22 0f       	add	r18, r18
     db2:	20 7e       	andi	r18, 0xE0	; 224
     db4:	89 85       	ldd	r24, Y+9	; 0x09
     db6:	9a 85       	ldd	r25, Y+10	; 0x0a
     db8:	03 96       	adiw	r24, 0x03	; 3
     dba:	fc 01       	movw	r30, r24
     dbc:	80 81       	ld	r24, Z
     dbe:	86 95       	lsr	r24
     dc0:	86 95       	lsr	r24
     dc2:	86 95       	lsr	r24
     dc4:	82 0f       	add	r24, r18
     dc6:	8c 93       	st	X, r24
     dc8:	a2 ef       	ldi	r26, 0xF2	; 242
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	89 85       	ldd	r24, Y+9	; 0x09
     dce:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd0:	03 96       	adiw	r24, 0x03	; 3
     dd2:	fc 01       	movw	r30, r24
     dd4:	80 81       	ld	r24, Z
     dd6:	82 95       	swap	r24
     dd8:	88 0f       	add	r24, r24
     dda:	80 7e       	andi	r24, 0xE0	; 224
     ddc:	8c 93       	st	X, r24
     dde:	af ee       	ldi	r26, 0xEF	; 239
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	ef ee       	ldi	r30, 0xEF	; 239
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	8f 7e       	andi	r24, 0xEF	; 239
     dea:	8c 93       	st	X, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     dec:	1b 82       	std	Y+3, r1	; 0x03
     dee:	11 c0       	rjmp	.+34     	; 0xe12 <can_cmd+0x2a0>
     df0:	aa ef       	ldi	r26, 0xFA	; 250
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e9 85       	ldd	r30, Y+9	; 0x09
     df6:	fa 85       	ldd	r31, Y+10	; 0x0a
     df8:	20 85       	ldd	r18, Z+8	; 0x08
     dfa:	31 85       	ldd	r19, Z+9	; 0x09
     dfc:	8b 81       	ldd	r24, Y+3	; 0x03
     dfe:	88 2f       	mov	r24, r24
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	f9 01       	movw	r30, r18
     e04:	e8 0f       	add	r30, r24
     e06:	f9 1f       	adc	r31, r25
     e08:	80 81       	ld	r24, Z
     e0a:	8c 93       	st	X, r24
     e0c:	8b 81       	ldd	r24, Y+3	; 0x03
     e0e:	8f 5f       	subi	r24, 0xFF	; 255
     e10:	8b 83       	std	Y+3, r24	; 0x03
     e12:	e9 85       	ldd	r30, Y+9	; 0x09
     e14:	fa 85       	ldd	r31, Y+10	; 0x0a
     e16:	97 81       	ldd	r25, Z+7	; 0x07
     e18:	8b 81       	ldd	r24, Y+3	; 0x03
     e1a:	89 17       	cp	r24, r25
     e1c:	48 f3       	brcs	.-46     	; 0xdf0 <can_cmd+0x27e>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     e1e:	e9 85       	ldd	r30, Y+9	; 0x09
     e20:	fa 85       	ldd	r31, Y+10	; 0x0a
     e22:	83 85       	ldd	r24, Z+11	; 0x0b
     e24:	88 23       	and	r24, r24
     e26:	41 f0       	breq	.+16     	; 0xe38 <can_cmd+0x2c6>
     e28:	a0 ef       	ldi	r26, 0xF0	; 240
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e0 ef       	ldi	r30, 0xF0	; 240
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	84 60       	ori	r24, 0x04	; 4
     e34:	8c 93       	st	X, r24
     e36:	07 c0       	rjmp	.+14     	; 0xe46 <can_cmd+0x2d4>
            else Can_clear_rtr();    
     e38:	a0 ef       	ldi	r26, 0xF0	; 240
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e0 ef       	ldi	r30, 0xF0	; 240
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	8b 7f       	andi	r24, 0xFB	; 251
     e44:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
     e46:	af ee       	ldi	r26, 0xEF	; 239
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	ef ee       	ldi	r30, 0xEF	; 239
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	90 81       	ld	r25, Z
     e50:	e9 85       	ldd	r30, Y+9	; 0x09
     e52:	fa 85       	ldd	r31, Y+10	; 0x0a
     e54:	87 81       	ldd	r24, Z+7	; 0x07
     e56:	89 2b       	or	r24, r25
     e58:	8c 93       	st	X, r24
          Can_config_tx();
     e5a:	af ee       	ldi	r26, 0xEF	; 239
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	ef ee       	ldi	r30, 0xEF	; 239
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	8f 73       	andi	r24, 0x3F	; 63
     e66:	8c 93       	st	X, r24
     e68:	af ee       	ldi	r26, 0xEF	; 239
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	ef ee       	ldi	r30, 0xEF	; 239
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	80 64       	ori	r24, 0x40	; 64
     e74:	8c 93       	st	X, r24
     e76:	af c7       	rjmp	.+3934   	; 0x1dd6 <__stack+0xcd7>
          break;
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     e78:	e9 85       	ldd	r30, Y+9	; 0x09
     e7a:	fa 85       	ldd	r31, Y+10	; 0x0a
     e7c:	84 85       	ldd	r24, Z+12	; 0x0c
     e7e:	88 23       	and	r24, r24
     e80:	09 f4       	brne	.+2      	; 0xe84 <can_cmd+0x312>
     e82:	57 c0       	rjmp	.+174    	; 0xf32 <can_cmd+0x3c0>
     e84:	a3 ef       	ldi	r26, 0xF3	; 243
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	89 85       	ldd	r24, Y+9	; 0x09
     e8a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e8c:	03 96       	adiw	r24, 0x03	; 3
     e8e:	fc 01       	movw	r30, r24
     e90:	33 96       	adiw	r30, 0x03	; 3
     e92:	80 81       	ld	r24, Z
     e94:	28 2f       	mov	r18, r24
     e96:	22 0f       	add	r18, r18
     e98:	22 0f       	add	r18, r18
     e9a:	22 0f       	add	r18, r18
     e9c:	89 85       	ldd	r24, Y+9	; 0x09
     e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea0:	03 96       	adiw	r24, 0x03	; 3
     ea2:	fc 01       	movw	r30, r24
     ea4:	32 96       	adiw	r30, 0x02	; 2
     ea6:	80 81       	ld	r24, Z
     ea8:	82 95       	swap	r24
     eaa:	86 95       	lsr	r24
     eac:	87 70       	andi	r24, 0x07	; 7
     eae:	82 0f       	add	r24, r18
     eb0:	8c 93       	st	X, r24
     eb2:	a2 ef       	ldi	r26, 0xF2	; 242
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	89 85       	ldd	r24, Y+9	; 0x09
     eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eba:	03 96       	adiw	r24, 0x03	; 3
     ebc:	fc 01       	movw	r30, r24
     ebe:	32 96       	adiw	r30, 0x02	; 2
     ec0:	80 81       	ld	r24, Z
     ec2:	28 2f       	mov	r18, r24
     ec4:	22 0f       	add	r18, r18
     ec6:	22 0f       	add	r18, r18
     ec8:	22 0f       	add	r18, r18
     eca:	89 85       	ldd	r24, Y+9	; 0x09
     ecc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ece:	03 96       	adiw	r24, 0x03	; 3
     ed0:	fc 01       	movw	r30, r24
     ed2:	31 96       	adiw	r30, 0x01	; 1
     ed4:	80 81       	ld	r24, Z
     ed6:	82 95       	swap	r24
     ed8:	86 95       	lsr	r24
     eda:	87 70       	andi	r24, 0x07	; 7
     edc:	82 0f       	add	r24, r18
     ede:	8c 93       	st	X, r24
     ee0:	a1 ef       	ldi	r26, 0xF1	; 241
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	89 85       	ldd	r24, Y+9	; 0x09
     ee6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee8:	03 96       	adiw	r24, 0x03	; 3
     eea:	fc 01       	movw	r30, r24
     eec:	31 96       	adiw	r30, 0x01	; 1
     eee:	80 81       	ld	r24, Z
     ef0:	28 2f       	mov	r18, r24
     ef2:	22 0f       	add	r18, r18
     ef4:	22 0f       	add	r18, r18
     ef6:	22 0f       	add	r18, r18
     ef8:	89 85       	ldd	r24, Y+9	; 0x09
     efa:	9a 85       	ldd	r25, Y+10	; 0x0a
     efc:	03 96       	adiw	r24, 0x03	; 3
     efe:	fc 01       	movw	r30, r24
     f00:	80 81       	ld	r24, Z
     f02:	82 95       	swap	r24
     f04:	86 95       	lsr	r24
     f06:	87 70       	andi	r24, 0x07	; 7
     f08:	82 0f       	add	r24, r18
     f0a:	8c 93       	st	X, r24
     f0c:	a0 ef       	ldi	r26, 0xF0	; 240
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	89 85       	ldd	r24, Y+9	; 0x09
     f12:	9a 85       	ldd	r25, Y+10	; 0x0a
     f14:	03 96       	adiw	r24, 0x03	; 3
     f16:	fc 01       	movw	r30, r24
     f18:	80 81       	ld	r24, Z
     f1a:	88 0f       	add	r24, r24
     f1c:	88 0f       	add	r24, r24
     f1e:	88 0f       	add	r24, r24
     f20:	8c 93       	st	X, r24
     f22:	af ee       	ldi	r26, 0xEF	; 239
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	ef ee       	ldi	r30, 0xEF	; 239
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	80 61       	ori	r24, 0x10	; 16
     f2e:	8c 93       	st	X, r24
     f30:	28 c0       	rjmp	.+80     	; 0xf82 <can_cmd+0x410>
          else              { Can_set_std_id(cmd->id.std);}
     f32:	a3 ef       	ldi	r26, 0xF3	; 243
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	89 85       	ldd	r24, Y+9	; 0x09
     f38:	9a 85       	ldd	r25, Y+10	; 0x0a
     f3a:	03 96       	adiw	r24, 0x03	; 3
     f3c:	fc 01       	movw	r30, r24
     f3e:	31 96       	adiw	r30, 0x01	; 1
     f40:	80 81       	ld	r24, Z
     f42:	28 2f       	mov	r18, r24
     f44:	22 95       	swap	r18
     f46:	22 0f       	add	r18, r18
     f48:	20 7e       	andi	r18, 0xE0	; 224
     f4a:	89 85       	ldd	r24, Y+9	; 0x09
     f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f4e:	03 96       	adiw	r24, 0x03	; 3
     f50:	fc 01       	movw	r30, r24
     f52:	80 81       	ld	r24, Z
     f54:	86 95       	lsr	r24
     f56:	86 95       	lsr	r24
     f58:	86 95       	lsr	r24
     f5a:	82 0f       	add	r24, r18
     f5c:	8c 93       	st	X, r24
     f5e:	a2 ef       	ldi	r26, 0xF2	; 242
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	89 85       	ldd	r24, Y+9	; 0x09
     f64:	9a 85       	ldd	r25, Y+10	; 0x0a
     f66:	03 96       	adiw	r24, 0x03	; 3
     f68:	fc 01       	movw	r30, r24
     f6a:	80 81       	ld	r24, Z
     f6c:	82 95       	swap	r24
     f6e:	88 0f       	add	r24, r24
     f70:	80 7e       	andi	r24, 0xE0	; 224
     f72:	8c 93       	st	X, r24
     f74:	af ee       	ldi	r26, 0xEF	; 239
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	ef ee       	ldi	r30, 0xEF	; 239
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	8f 7e       	andi	r24, 0xEF	; 239
     f80:	8c 93       	st	X, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     f82:	1b 82       	std	Y+3, r1	; 0x03
     f84:	11 c0       	rjmp	.+34     	; 0xfa8 <can_cmd+0x436>
     f86:	aa ef       	ldi	r26, 0xFA	; 250
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e9 85       	ldd	r30, Y+9	; 0x09
     f8c:	fa 85       	ldd	r31, Y+10	; 0x0a
     f8e:	20 85       	ldd	r18, Z+8	; 0x08
     f90:	31 85       	ldd	r19, Z+9	; 0x09
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	f9 01       	movw	r30, r18
     f9a:	e8 0f       	add	r30, r24
     f9c:	f9 1f       	adc	r31, r25
     f9e:	80 81       	ld	r24, Z
     fa0:	8c 93       	st	X, r24
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	8f 5f       	subi	r24, 0xFF	; 255
     fa6:	8b 83       	std	Y+3, r24	; 0x03
     fa8:	e9 85       	ldd	r30, Y+9	; 0x09
     faa:	fa 85       	ldd	r31, Y+10	; 0x0a
     fac:	97 81       	ldd	r25, Z+7	; 0x07
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	89 17       	cp	r24, r25
     fb2:	48 f3       	brcs	.-46     	; 0xf86 <can_cmd+0x414>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     fb4:	e9 85       	ldd	r30, Y+9	; 0x09
     fb6:	fa 85       	ldd	r31, Y+10	; 0x0a
     fb8:	13 86       	std	Z+11, r1	; 0x0b
     fba:	a0 ef       	ldi	r26, 0xF0	; 240
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e0 ef       	ldi	r30, 0xF0	; 240
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	8b 7f       	andi	r24, 0xFB	; 251
     fc6:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
     fc8:	af ee       	ldi	r26, 0xEF	; 239
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	ef ee       	ldi	r30, 0xEF	; 239
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	90 81       	ld	r25, Z
     fd2:	e9 85       	ldd	r30, Y+9	; 0x09
     fd4:	fa 85       	ldd	r31, Y+10	; 0x0a
     fd6:	87 81       	ldd	r24, Z+7	; 0x07
     fd8:	89 2b       	or	r24, r25
     fda:	8c 93       	st	X, r24
          Can_config_tx();
     fdc:	af ee       	ldi	r26, 0xEF	; 239
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	ef ee       	ldi	r30, 0xEF	; 239
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	8f 73       	andi	r24, 0x3F	; 63
     fe8:	8c 93       	st	X, r24
     fea:	af ee       	ldi	r26, 0xEF	; 239
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	ef ee       	ldi	r30, 0xEF	; 239
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	80 64       	ori	r24, 0x40	; 64
     ff6:	8c 93       	st	X, r24
     ff8:	ee c6       	rjmp	.+3548   	; 0x1dd6 <__stack+0xcd7>
          break;
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     ffa:	e9 85       	ldd	r30, Y+9	; 0x09
     ffc:	fa 85       	ldd	r31, Y+10	; 0x0a
     ffe:	84 85       	ldd	r24, Z+12	; 0x0c
    1000:	88 23       	and	r24, r24
    1002:	09 f4       	brne	.+2      	; 0x1006 <can_cmd+0x494>
    1004:	57 c0       	rjmp	.+174    	; 0x10b4 <can_cmd+0x542>
    1006:	a3 ef       	ldi	r26, 0xF3	; 243
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	89 85       	ldd	r24, Y+9	; 0x09
    100c:	9a 85       	ldd	r25, Y+10	; 0x0a
    100e:	03 96       	adiw	r24, 0x03	; 3
    1010:	fc 01       	movw	r30, r24
    1012:	33 96       	adiw	r30, 0x03	; 3
    1014:	80 81       	ld	r24, Z
    1016:	28 2f       	mov	r18, r24
    1018:	22 0f       	add	r18, r18
    101a:	22 0f       	add	r18, r18
    101c:	22 0f       	add	r18, r18
    101e:	89 85       	ldd	r24, Y+9	; 0x09
    1020:	9a 85       	ldd	r25, Y+10	; 0x0a
    1022:	03 96       	adiw	r24, 0x03	; 3
    1024:	fc 01       	movw	r30, r24
    1026:	32 96       	adiw	r30, 0x02	; 2
    1028:	80 81       	ld	r24, Z
    102a:	82 95       	swap	r24
    102c:	86 95       	lsr	r24
    102e:	87 70       	andi	r24, 0x07	; 7
    1030:	82 0f       	add	r24, r18
    1032:	8c 93       	st	X, r24
    1034:	a2 ef       	ldi	r26, 0xF2	; 242
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	89 85       	ldd	r24, Y+9	; 0x09
    103a:	9a 85       	ldd	r25, Y+10	; 0x0a
    103c:	03 96       	adiw	r24, 0x03	; 3
    103e:	fc 01       	movw	r30, r24
    1040:	32 96       	adiw	r30, 0x02	; 2
    1042:	80 81       	ld	r24, Z
    1044:	28 2f       	mov	r18, r24
    1046:	22 0f       	add	r18, r18
    1048:	22 0f       	add	r18, r18
    104a:	22 0f       	add	r18, r18
    104c:	89 85       	ldd	r24, Y+9	; 0x09
    104e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1050:	03 96       	adiw	r24, 0x03	; 3
    1052:	fc 01       	movw	r30, r24
    1054:	31 96       	adiw	r30, 0x01	; 1
    1056:	80 81       	ld	r24, Z
    1058:	82 95       	swap	r24
    105a:	86 95       	lsr	r24
    105c:	87 70       	andi	r24, 0x07	; 7
    105e:	82 0f       	add	r24, r18
    1060:	8c 93       	st	X, r24
    1062:	a1 ef       	ldi	r26, 0xF1	; 241
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	89 85       	ldd	r24, Y+9	; 0x09
    1068:	9a 85       	ldd	r25, Y+10	; 0x0a
    106a:	03 96       	adiw	r24, 0x03	; 3
    106c:	fc 01       	movw	r30, r24
    106e:	31 96       	adiw	r30, 0x01	; 1
    1070:	80 81       	ld	r24, Z
    1072:	28 2f       	mov	r18, r24
    1074:	22 0f       	add	r18, r18
    1076:	22 0f       	add	r18, r18
    1078:	22 0f       	add	r18, r18
    107a:	89 85       	ldd	r24, Y+9	; 0x09
    107c:	9a 85       	ldd	r25, Y+10	; 0x0a
    107e:	03 96       	adiw	r24, 0x03	; 3
    1080:	fc 01       	movw	r30, r24
    1082:	80 81       	ld	r24, Z
    1084:	82 95       	swap	r24
    1086:	86 95       	lsr	r24
    1088:	87 70       	andi	r24, 0x07	; 7
    108a:	82 0f       	add	r24, r18
    108c:	8c 93       	st	X, r24
    108e:	a0 ef       	ldi	r26, 0xF0	; 240
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	89 85       	ldd	r24, Y+9	; 0x09
    1094:	9a 85       	ldd	r25, Y+10	; 0x0a
    1096:	03 96       	adiw	r24, 0x03	; 3
    1098:	fc 01       	movw	r30, r24
    109a:	80 81       	ld	r24, Z
    109c:	88 0f       	add	r24, r24
    109e:	88 0f       	add	r24, r24
    10a0:	88 0f       	add	r24, r24
    10a2:	8c 93       	st	X, r24
    10a4:	af ee       	ldi	r26, 0xEF	; 239
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	ef ee       	ldi	r30, 0xEF	; 239
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	80 61       	ori	r24, 0x10	; 16
    10b0:	8c 93       	st	X, r24
    10b2:	28 c0       	rjmp	.+80     	; 0x1104 <__stack+0x5>
          else              { Can_set_std_id(cmd->id.std);}
    10b4:	a3 ef       	ldi	r26, 0xF3	; 243
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	89 85       	ldd	r24, Y+9	; 0x09
    10ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    10bc:	03 96       	adiw	r24, 0x03	; 3
    10be:	fc 01       	movw	r30, r24
    10c0:	31 96       	adiw	r30, 0x01	; 1
    10c2:	80 81       	ld	r24, Z
    10c4:	28 2f       	mov	r18, r24
    10c6:	22 95       	swap	r18
    10c8:	22 0f       	add	r18, r18
    10ca:	20 7e       	andi	r18, 0xE0	; 224
    10cc:	89 85       	ldd	r24, Y+9	; 0x09
    10ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d0:	03 96       	adiw	r24, 0x03	; 3
    10d2:	fc 01       	movw	r30, r24
    10d4:	80 81       	ld	r24, Z
    10d6:	86 95       	lsr	r24
    10d8:	86 95       	lsr	r24
    10da:	86 95       	lsr	r24
    10dc:	82 0f       	add	r24, r18
    10de:	8c 93       	st	X, r24
    10e0:	a2 ef       	ldi	r26, 0xF2	; 242
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	89 85       	ldd	r24, Y+9	; 0x09
    10e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e8:	03 96       	adiw	r24, 0x03	; 3
    10ea:	fc 01       	movw	r30, r24
    10ec:	80 81       	ld	r24, Z
    10ee:	82 95       	swap	r24
    10f0:	88 0f       	add	r24, r24
    10f2:	80 7e       	andi	r24, 0xE0	; 224
    10f4:	8c 93       	st	X, r24
    10f6:	af ee       	ldi	r26, 0xEF	; 239
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	ef ee       	ldi	r30, 0xEF	; 239
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	8f 7e       	andi	r24, 0xEF	; 239
    1102:	8c 93       	st	X, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
    1104:	e9 85       	ldd	r30, Y+9	; 0x09
    1106:	fa 85       	ldd	r31, Y+10	; 0x0a
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	83 87       	std	Z+11, r24	; 0x0b
    110c:	a0 ef       	ldi	r26, 0xF0	; 240
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e0 ef       	ldi	r30, 0xF0	; 240
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	84 60       	ori	r24, 0x04	; 4
    1118:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    111a:	af ee       	ldi	r26, 0xEF	; 239
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	ef ee       	ldi	r30, 0xEF	; 239
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	90 81       	ld	r25, Z
    1124:	e9 85       	ldd	r30, Y+9	; 0x09
    1126:	fa 85       	ldd	r31, Y+10	; 0x0a
    1128:	87 81       	ldd	r24, Z+7	; 0x07
    112a:	89 2b       	or	r24, r25
    112c:	8c 93       	st	X, r24
          Can_config_tx();
    112e:	af ee       	ldi	r26, 0xEF	; 239
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	ef ee       	ldi	r30, 0xEF	; 239
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	8f 73       	andi	r24, 0x3F	; 63
    113a:	8c 93       	st	X, r24
    113c:	af ee       	ldi	r26, 0xEF	; 239
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	ef ee       	ldi	r30, 0xEF	; 239
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	80 64       	ori	r24, 0x40	; 64
    1148:	8c 93       	st	X, r24
    114a:	45 c6       	rjmp	.+3210   	; 0x1dd6 <__stack+0xcd7>
          break;
        //------------      
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    114c:	1d 82       	std	Y+5, r1	; 0x05
    114e:	1e 82       	std	Y+6, r1	; 0x06
    1150:	1f 82       	std	Y+7, r1	; 0x07
    1152:	18 86       	std	Y+8, r1	; 0x08
    1154:	a7 ef       	ldi	r26, 0xF7	; 247
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	ce 01       	movw	r24, r28
    115a:	05 96       	adiw	r24, 0x05	; 5
    115c:	fc 01       	movw	r30, r24
    115e:	33 96       	adiw	r30, 0x03	; 3
    1160:	80 81       	ld	r24, Z
    1162:	28 2f       	mov	r18, r24
    1164:	22 0f       	add	r18, r18
    1166:	22 0f       	add	r18, r18
    1168:	22 0f       	add	r18, r18
    116a:	ce 01       	movw	r24, r28
    116c:	05 96       	adiw	r24, 0x05	; 5
    116e:	fc 01       	movw	r30, r24
    1170:	32 96       	adiw	r30, 0x02	; 2
    1172:	80 81       	ld	r24, Z
    1174:	82 95       	swap	r24
    1176:	86 95       	lsr	r24
    1178:	87 70       	andi	r24, 0x07	; 7
    117a:	82 0f       	add	r24, r18
    117c:	8c 93       	st	X, r24
    117e:	a6 ef       	ldi	r26, 0xF6	; 246
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	ce 01       	movw	r24, r28
    1184:	05 96       	adiw	r24, 0x05	; 5
    1186:	fc 01       	movw	r30, r24
    1188:	32 96       	adiw	r30, 0x02	; 2
    118a:	80 81       	ld	r24, Z
    118c:	28 2f       	mov	r18, r24
    118e:	22 0f       	add	r18, r18
    1190:	22 0f       	add	r18, r18
    1192:	22 0f       	add	r18, r18
    1194:	ce 01       	movw	r24, r28
    1196:	05 96       	adiw	r24, 0x05	; 5
    1198:	fc 01       	movw	r30, r24
    119a:	31 96       	adiw	r30, 0x01	; 1
    119c:	80 81       	ld	r24, Z
    119e:	82 95       	swap	r24
    11a0:	86 95       	lsr	r24
    11a2:	87 70       	andi	r24, 0x07	; 7
    11a4:	82 0f       	add	r24, r18
    11a6:	8c 93       	st	X, r24
    11a8:	a5 ef       	ldi	r26, 0xF5	; 245
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	ce 01       	movw	r24, r28
    11ae:	05 96       	adiw	r24, 0x05	; 5
    11b0:	fc 01       	movw	r30, r24
    11b2:	31 96       	adiw	r30, 0x01	; 1
    11b4:	80 81       	ld	r24, Z
    11b6:	98 2f       	mov	r25, r24
    11b8:	99 0f       	add	r25, r25
    11ba:	99 0f       	add	r25, r25
    11bc:	99 0f       	add	r25, r25
    11be:	fe 01       	movw	r30, r28
    11c0:	35 96       	adiw	r30, 0x05	; 5
    11c2:	80 81       	ld	r24, Z
    11c4:	82 95       	swap	r24
    11c6:	86 95       	lsr	r24
    11c8:	87 70       	andi	r24, 0x07	; 7
    11ca:	89 0f       	add	r24, r25
    11cc:	8c 93       	st	X, r24
    11ce:	a4 ef       	ldi	r26, 0xF4	; 244
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	fe 01       	movw	r30, r28
    11d4:	35 96       	adiw	r30, 0x05	; 5
    11d6:	80 81       	ld	r24, Z
    11d8:	88 0f       	add	r24, r24
    11da:	88 0f       	add	r24, r24
    11dc:	88 0f       	add	r24, r24
    11de:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    11e0:	af ee       	ldi	r26, 0xEF	; 239
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	ef ee       	ldi	r30, 0xEF	; 239
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	90 81       	ld	r25, Z
    11ea:	e9 85       	ldd	r30, Y+9	; 0x09
    11ec:	fa 85       	ldd	r31, Y+10	; 0x0a
    11ee:	87 81       	ldd	r24, Z+7	; 0x07
    11f0:	89 2b       	or	r24, r25
    11f2:	8c 93       	st	X, r24
          Can_clear_rtrmsk();
    11f4:	a4 ef       	ldi	r26, 0xF4	; 244
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e4 ef       	ldi	r30, 0xF4	; 244
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	8b 7f       	andi	r24, 0xFB	; 251
    1200:	8c 93       	st	X, r24
          Can_clear_idemsk();
    1202:	a4 ef       	ldi	r26, 0xF4	; 244
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e4 ef       	ldi	r30, 0xF4	; 244
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	8e 7f       	andi	r24, 0xFE	; 254
    120e:	8c 93       	st	X, r24
          Can_config_rx();       
    1210:	af ee       	ldi	r26, 0xEF	; 239
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	ef ee       	ldi	r30, 0xEF	; 239
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	8f 73       	andi	r24, 0x3F	; 63
    121c:	8c 93       	st	X, r24
    121e:	af ee       	ldi	r26, 0xEF	; 239
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	ef ee       	ldi	r30, 0xEF	; 239
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	80 68       	ori	r24, 0x80	; 128
    122a:	8c 93       	st	X, r24
    122c:	d4 c5       	rjmp	.+2984   	; 0x1dd6 <__stack+0xcd7>
          break;
        //------------      
        case CMD_RX_DATA:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    122e:	1d 82       	std	Y+5, r1	; 0x05
    1230:	1e 82       	std	Y+6, r1	; 0x06
    1232:	1f 82       	std	Y+7, r1	; 0x07
    1234:	18 86       	std	Y+8, r1	; 0x08
    1236:	a7 ef       	ldi	r26, 0xF7	; 247
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	ce 01       	movw	r24, r28
    123c:	05 96       	adiw	r24, 0x05	; 5
    123e:	fc 01       	movw	r30, r24
    1240:	33 96       	adiw	r30, 0x03	; 3
    1242:	80 81       	ld	r24, Z
    1244:	28 2f       	mov	r18, r24
    1246:	22 0f       	add	r18, r18
    1248:	22 0f       	add	r18, r18
    124a:	22 0f       	add	r18, r18
    124c:	ce 01       	movw	r24, r28
    124e:	05 96       	adiw	r24, 0x05	; 5
    1250:	fc 01       	movw	r30, r24
    1252:	32 96       	adiw	r30, 0x02	; 2
    1254:	80 81       	ld	r24, Z
    1256:	82 95       	swap	r24
    1258:	86 95       	lsr	r24
    125a:	87 70       	andi	r24, 0x07	; 7
    125c:	82 0f       	add	r24, r18
    125e:	8c 93       	st	X, r24
    1260:	a6 ef       	ldi	r26, 0xF6	; 246
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	ce 01       	movw	r24, r28
    1266:	05 96       	adiw	r24, 0x05	; 5
    1268:	fc 01       	movw	r30, r24
    126a:	32 96       	adiw	r30, 0x02	; 2
    126c:	80 81       	ld	r24, Z
    126e:	28 2f       	mov	r18, r24
    1270:	22 0f       	add	r18, r18
    1272:	22 0f       	add	r18, r18
    1274:	22 0f       	add	r18, r18
    1276:	ce 01       	movw	r24, r28
    1278:	05 96       	adiw	r24, 0x05	; 5
    127a:	fc 01       	movw	r30, r24
    127c:	31 96       	adiw	r30, 0x01	; 1
    127e:	80 81       	ld	r24, Z
    1280:	82 95       	swap	r24
    1282:	86 95       	lsr	r24
    1284:	87 70       	andi	r24, 0x07	; 7
    1286:	82 0f       	add	r24, r18
    1288:	8c 93       	st	X, r24
    128a:	a5 ef       	ldi	r26, 0xF5	; 245
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	ce 01       	movw	r24, r28
    1290:	05 96       	adiw	r24, 0x05	; 5
    1292:	fc 01       	movw	r30, r24
    1294:	31 96       	adiw	r30, 0x01	; 1
    1296:	80 81       	ld	r24, Z
    1298:	98 2f       	mov	r25, r24
    129a:	99 0f       	add	r25, r25
    129c:	99 0f       	add	r25, r25
    129e:	99 0f       	add	r25, r25
    12a0:	fe 01       	movw	r30, r28
    12a2:	35 96       	adiw	r30, 0x05	; 5
    12a4:	80 81       	ld	r24, Z
    12a6:	82 95       	swap	r24
    12a8:	86 95       	lsr	r24
    12aa:	87 70       	andi	r24, 0x07	; 7
    12ac:	89 0f       	add	r24, r25
    12ae:	8c 93       	st	X, r24
    12b0:	a4 ef       	ldi	r26, 0xF4	; 244
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	fe 01       	movw	r30, r28
    12b6:	35 96       	adiw	r30, 0x05	; 5
    12b8:	80 81       	ld	r24, Z
    12ba:	88 0f       	add	r24, r24
    12bc:	88 0f       	add	r24, r24
    12be:	88 0f       	add	r24, r24
    12c0:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    12c2:	af ee       	ldi	r26, 0xEF	; 239
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	ef ee       	ldi	r30, 0xEF	; 239
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	90 81       	ld	r25, Z
    12cc:	e9 85       	ldd	r30, Y+9	; 0x09
    12ce:	fa 85       	ldd	r31, Y+10	; 0x0a
    12d0:	87 81       	ldd	r24, Z+7	; 0x07
    12d2:	89 2b       	or	r24, r25
    12d4:	8c 93       	st	X, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    12d6:	e9 85       	ldd	r30, Y+9	; 0x09
    12d8:	fa 85       	ldd	r31, Y+10	; 0x0a
    12da:	13 86       	std	Z+11, r1	; 0x0b
    12dc:	a4 ef       	ldi	r26, 0xF4	; 244
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e4 ef       	ldi	r30, 0xF4	; 244
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	84 60       	ori	r24, 0x04	; 4
    12e8:	8c 93       	st	X, r24
    12ea:	a0 ef       	ldi	r26, 0xF0	; 240
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	e0 ef       	ldi	r30, 0xF0	; 240
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	8b 7f       	andi	r24, 0xFB	; 251
    12f6:	8c 93       	st	X, r24
          Can_clear_idemsk();
    12f8:	a4 ef       	ldi	r26, 0xF4	; 244
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e4 ef       	ldi	r30, 0xF4	; 244
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	8e 7f       	andi	r24, 0xFE	; 254
    1304:	8c 93       	st	X, r24
          Can_config_rx();       
    1306:	af ee       	ldi	r26, 0xEF	; 239
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	ef ee       	ldi	r30, 0xEF	; 239
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	8f 73       	andi	r24, 0x3F	; 63
    1312:	8c 93       	st	X, r24
    1314:	af ee       	ldi	r26, 0xEF	; 239
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	ef ee       	ldi	r30, 0xEF	; 239
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	80 68       	ori	r24, 0x80	; 128
    1320:	8c 93       	st	X, r24
    1322:	59 c5       	rjmp	.+2738   	; 0x1dd6 <__stack+0xcd7>
          break;
        //------------      
        case CMD_RX_REMOTE:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    1324:	1d 82       	std	Y+5, r1	; 0x05
    1326:	1e 82       	std	Y+6, r1	; 0x06
    1328:	1f 82       	std	Y+7, r1	; 0x07
    132a:	18 86       	std	Y+8, r1	; 0x08
    132c:	a7 ef       	ldi	r26, 0xF7	; 247
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	ce 01       	movw	r24, r28
    1332:	05 96       	adiw	r24, 0x05	; 5
    1334:	fc 01       	movw	r30, r24
    1336:	33 96       	adiw	r30, 0x03	; 3
    1338:	80 81       	ld	r24, Z
    133a:	28 2f       	mov	r18, r24
    133c:	22 0f       	add	r18, r18
    133e:	22 0f       	add	r18, r18
    1340:	22 0f       	add	r18, r18
    1342:	ce 01       	movw	r24, r28
    1344:	05 96       	adiw	r24, 0x05	; 5
    1346:	fc 01       	movw	r30, r24
    1348:	32 96       	adiw	r30, 0x02	; 2
    134a:	80 81       	ld	r24, Z
    134c:	82 95       	swap	r24
    134e:	86 95       	lsr	r24
    1350:	87 70       	andi	r24, 0x07	; 7
    1352:	82 0f       	add	r24, r18
    1354:	8c 93       	st	X, r24
    1356:	a6 ef       	ldi	r26, 0xF6	; 246
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	ce 01       	movw	r24, r28
    135c:	05 96       	adiw	r24, 0x05	; 5
    135e:	fc 01       	movw	r30, r24
    1360:	32 96       	adiw	r30, 0x02	; 2
    1362:	80 81       	ld	r24, Z
    1364:	28 2f       	mov	r18, r24
    1366:	22 0f       	add	r18, r18
    1368:	22 0f       	add	r18, r18
    136a:	22 0f       	add	r18, r18
    136c:	ce 01       	movw	r24, r28
    136e:	05 96       	adiw	r24, 0x05	; 5
    1370:	fc 01       	movw	r30, r24
    1372:	31 96       	adiw	r30, 0x01	; 1
    1374:	80 81       	ld	r24, Z
    1376:	82 95       	swap	r24
    1378:	86 95       	lsr	r24
    137a:	87 70       	andi	r24, 0x07	; 7
    137c:	82 0f       	add	r24, r18
    137e:	8c 93       	st	X, r24
    1380:	a5 ef       	ldi	r26, 0xF5	; 245
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	ce 01       	movw	r24, r28
    1386:	05 96       	adiw	r24, 0x05	; 5
    1388:	fc 01       	movw	r30, r24
    138a:	31 96       	adiw	r30, 0x01	; 1
    138c:	80 81       	ld	r24, Z
    138e:	98 2f       	mov	r25, r24
    1390:	99 0f       	add	r25, r25
    1392:	99 0f       	add	r25, r25
    1394:	99 0f       	add	r25, r25
    1396:	fe 01       	movw	r30, r28
    1398:	35 96       	adiw	r30, 0x05	; 5
    139a:	80 81       	ld	r24, Z
    139c:	82 95       	swap	r24
    139e:	86 95       	lsr	r24
    13a0:	87 70       	andi	r24, 0x07	; 7
    13a2:	89 0f       	add	r24, r25
    13a4:	8c 93       	st	X, r24
    13a6:	a4 ef       	ldi	r26, 0xF4	; 244
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	fe 01       	movw	r30, r28
    13ac:	35 96       	adiw	r30, 0x05	; 5
    13ae:	80 81       	ld	r24, Z
    13b0:	88 0f       	add	r24, r24
    13b2:	88 0f       	add	r24, r24
    13b4:	88 0f       	add	r24, r24
    13b6:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    13b8:	af ee       	ldi	r26, 0xEF	; 239
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	ef ee       	ldi	r30, 0xEF	; 239
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	90 81       	ld	r25, Z
    13c2:	e9 85       	ldd	r30, Y+9	; 0x09
    13c4:	fa 85       	ldd	r31, Y+10	; 0x0a
    13c6:	87 81       	ldd	r24, Z+7	; 0x07
    13c8:	89 2b       	or	r24, r25
    13ca:	8c 93       	st	X, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    13cc:	e9 85       	ldd	r30, Y+9	; 0x09
    13ce:	fa 85       	ldd	r31, Y+10	; 0x0a
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	83 87       	std	Z+11, r24	; 0x0b
    13d4:	a4 ef       	ldi	r26, 0xF4	; 244
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e4 ef       	ldi	r30, 0xF4	; 244
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	84 60       	ori	r24, 0x04	; 4
    13e0:	8c 93       	st	X, r24
    13e2:	a0 ef       	ldi	r26, 0xF0	; 240
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e0 ef       	ldi	r30, 0xF0	; 240
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	84 60       	ori	r24, 0x04	; 4
    13ee:	8c 93       	st	X, r24
          Can_clear_rplv();
    13f0:	af ee       	ldi	r26, 0xEF	; 239
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	ef ee       	ldi	r30, 0xEF	; 239
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	8f 7d       	andi	r24, 0xDF	; 223
    13fc:	8c 93       	st	X, r24
          Can_clear_idemsk();
    13fe:	a4 ef       	ldi	r26, 0xF4	; 244
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	e4 ef       	ldi	r30, 0xF4	; 244
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	8e 7f       	andi	r24, 0xFE	; 254
    140a:	8c 93       	st	X, r24
          Can_config_rx();       
    140c:	af ee       	ldi	r26, 0xEF	; 239
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	ef ee       	ldi	r30, 0xEF	; 239
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	8f 73       	andi	r24, 0x3F	; 63
    1418:	8c 93       	st	X, r24
    141a:	af ee       	ldi	r26, 0xEF	; 239
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	ef ee       	ldi	r30, 0xEF	; 239
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	80 68       	ori	r24, 0x80	; 128
    1426:	8c 93       	st	X, r24
    1428:	d6 c4       	rjmp	.+2476   	; 0x1dd6 <__stack+0xcd7>
          break;
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    142a:	e9 85       	ldd	r30, Y+9	; 0x09
    142c:	fa 85       	ldd	r31, Y+10	; 0x0a
    142e:	84 85       	ldd	r24, Z+12	; 0x0c
    1430:	88 23       	and	r24, r24
    1432:	09 f4       	brne	.+2      	; 0x1436 <__stack+0x337>
    1434:	57 c0       	rjmp	.+174    	; 0x14e4 <__stack+0x3e5>
    1436:	a3 ef       	ldi	r26, 0xF3	; 243
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	89 85       	ldd	r24, Y+9	; 0x09
    143c:	9a 85       	ldd	r25, Y+10	; 0x0a
    143e:	03 96       	adiw	r24, 0x03	; 3
    1440:	fc 01       	movw	r30, r24
    1442:	33 96       	adiw	r30, 0x03	; 3
    1444:	80 81       	ld	r24, Z
    1446:	28 2f       	mov	r18, r24
    1448:	22 0f       	add	r18, r18
    144a:	22 0f       	add	r18, r18
    144c:	22 0f       	add	r18, r18
    144e:	89 85       	ldd	r24, Y+9	; 0x09
    1450:	9a 85       	ldd	r25, Y+10	; 0x0a
    1452:	03 96       	adiw	r24, 0x03	; 3
    1454:	fc 01       	movw	r30, r24
    1456:	32 96       	adiw	r30, 0x02	; 2
    1458:	80 81       	ld	r24, Z
    145a:	82 95       	swap	r24
    145c:	86 95       	lsr	r24
    145e:	87 70       	andi	r24, 0x07	; 7
    1460:	82 0f       	add	r24, r18
    1462:	8c 93       	st	X, r24
    1464:	a2 ef       	ldi	r26, 0xF2	; 242
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	89 85       	ldd	r24, Y+9	; 0x09
    146a:	9a 85       	ldd	r25, Y+10	; 0x0a
    146c:	03 96       	adiw	r24, 0x03	; 3
    146e:	fc 01       	movw	r30, r24
    1470:	32 96       	adiw	r30, 0x02	; 2
    1472:	80 81       	ld	r24, Z
    1474:	28 2f       	mov	r18, r24
    1476:	22 0f       	add	r18, r18
    1478:	22 0f       	add	r18, r18
    147a:	22 0f       	add	r18, r18
    147c:	89 85       	ldd	r24, Y+9	; 0x09
    147e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1480:	03 96       	adiw	r24, 0x03	; 3
    1482:	fc 01       	movw	r30, r24
    1484:	31 96       	adiw	r30, 0x01	; 1
    1486:	80 81       	ld	r24, Z
    1488:	82 95       	swap	r24
    148a:	86 95       	lsr	r24
    148c:	87 70       	andi	r24, 0x07	; 7
    148e:	82 0f       	add	r24, r18
    1490:	8c 93       	st	X, r24
    1492:	a1 ef       	ldi	r26, 0xF1	; 241
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	89 85       	ldd	r24, Y+9	; 0x09
    1498:	9a 85       	ldd	r25, Y+10	; 0x0a
    149a:	03 96       	adiw	r24, 0x03	; 3
    149c:	fc 01       	movw	r30, r24
    149e:	31 96       	adiw	r30, 0x01	; 1
    14a0:	80 81       	ld	r24, Z
    14a2:	28 2f       	mov	r18, r24
    14a4:	22 0f       	add	r18, r18
    14a6:	22 0f       	add	r18, r18
    14a8:	22 0f       	add	r18, r18
    14aa:	89 85       	ldd	r24, Y+9	; 0x09
    14ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ae:	03 96       	adiw	r24, 0x03	; 3
    14b0:	fc 01       	movw	r30, r24
    14b2:	80 81       	ld	r24, Z
    14b4:	82 95       	swap	r24
    14b6:	86 95       	lsr	r24
    14b8:	87 70       	andi	r24, 0x07	; 7
    14ba:	82 0f       	add	r24, r18
    14bc:	8c 93       	st	X, r24
    14be:	a0 ef       	ldi	r26, 0xF0	; 240
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	89 85       	ldd	r24, Y+9	; 0x09
    14c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14c6:	03 96       	adiw	r24, 0x03	; 3
    14c8:	fc 01       	movw	r30, r24
    14ca:	80 81       	ld	r24, Z
    14cc:	88 0f       	add	r24, r24
    14ce:	88 0f       	add	r24, r24
    14d0:	88 0f       	add	r24, r24
    14d2:	8c 93       	st	X, r24
    14d4:	af ee       	ldi	r26, 0xEF	; 239
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	ef ee       	ldi	r30, 0xEF	; 239
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	80 61       	ori	r24, 0x10	; 16
    14e0:	8c 93       	st	X, r24
    14e2:	28 c0       	rjmp	.+80     	; 0x1534 <__stack+0x435>
          else              { Can_set_std_id(cmd->id.std);}
    14e4:	a3 ef       	ldi	r26, 0xF3	; 243
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	89 85       	ldd	r24, Y+9	; 0x09
    14ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ec:	03 96       	adiw	r24, 0x03	; 3
    14ee:	fc 01       	movw	r30, r24
    14f0:	31 96       	adiw	r30, 0x01	; 1
    14f2:	80 81       	ld	r24, Z
    14f4:	28 2f       	mov	r18, r24
    14f6:	22 95       	swap	r18
    14f8:	22 0f       	add	r18, r18
    14fa:	20 7e       	andi	r18, 0xE0	; 224
    14fc:	89 85       	ldd	r24, Y+9	; 0x09
    14fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1500:	03 96       	adiw	r24, 0x03	; 3
    1502:	fc 01       	movw	r30, r24
    1504:	80 81       	ld	r24, Z
    1506:	86 95       	lsr	r24
    1508:	86 95       	lsr	r24
    150a:	86 95       	lsr	r24
    150c:	82 0f       	add	r24, r18
    150e:	8c 93       	st	X, r24
    1510:	a2 ef       	ldi	r26, 0xF2	; 242
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	89 85       	ldd	r24, Y+9	; 0x09
    1516:	9a 85       	ldd	r25, Y+10	; 0x0a
    1518:	03 96       	adiw	r24, 0x03	; 3
    151a:	fc 01       	movw	r30, r24
    151c:	80 81       	ld	r24, Z
    151e:	82 95       	swap	r24
    1520:	88 0f       	add	r24, r24
    1522:	80 7e       	andi	r24, 0xE0	; 224
    1524:	8c 93       	st	X, r24
    1526:	af ee       	ldi	r26, 0xEF	; 239
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	ef ee       	ldi	r30, 0xEF	; 239
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	8f 7e       	andi	r24, 0xEF	; 239
    1532:	8c 93       	st	X, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    1534:	8f ef       	ldi	r24, 0xFF	; 255
    1536:	9f ef       	ldi	r25, 0xFF	; 255
    1538:	af ef       	ldi	r26, 0xFF	; 255
    153a:	bf ef       	ldi	r27, 0xFF	; 255
    153c:	8d 83       	std	Y+5, r24	; 0x05
    153e:	9e 83       	std	Y+6, r25	; 0x06
    1540:	af 83       	std	Y+7, r26	; 0x07
    1542:	b8 87       	std	Y+8, r27	; 0x08
    1544:	a7 ef       	ldi	r26, 0xF7	; 247
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	ce 01       	movw	r24, r28
    154a:	05 96       	adiw	r24, 0x05	; 5
    154c:	fc 01       	movw	r30, r24
    154e:	33 96       	adiw	r30, 0x03	; 3
    1550:	80 81       	ld	r24, Z
    1552:	28 2f       	mov	r18, r24
    1554:	22 0f       	add	r18, r18
    1556:	22 0f       	add	r18, r18
    1558:	22 0f       	add	r18, r18
    155a:	ce 01       	movw	r24, r28
    155c:	05 96       	adiw	r24, 0x05	; 5
    155e:	fc 01       	movw	r30, r24
    1560:	32 96       	adiw	r30, 0x02	; 2
    1562:	80 81       	ld	r24, Z
    1564:	82 95       	swap	r24
    1566:	86 95       	lsr	r24
    1568:	87 70       	andi	r24, 0x07	; 7
    156a:	82 0f       	add	r24, r18
    156c:	8c 93       	st	X, r24
    156e:	a6 ef       	ldi	r26, 0xF6	; 246
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	ce 01       	movw	r24, r28
    1574:	05 96       	adiw	r24, 0x05	; 5
    1576:	fc 01       	movw	r30, r24
    1578:	32 96       	adiw	r30, 0x02	; 2
    157a:	80 81       	ld	r24, Z
    157c:	28 2f       	mov	r18, r24
    157e:	22 0f       	add	r18, r18
    1580:	22 0f       	add	r18, r18
    1582:	22 0f       	add	r18, r18
    1584:	ce 01       	movw	r24, r28
    1586:	05 96       	adiw	r24, 0x05	; 5
    1588:	fc 01       	movw	r30, r24
    158a:	31 96       	adiw	r30, 0x01	; 1
    158c:	80 81       	ld	r24, Z
    158e:	82 95       	swap	r24
    1590:	86 95       	lsr	r24
    1592:	87 70       	andi	r24, 0x07	; 7
    1594:	82 0f       	add	r24, r18
    1596:	8c 93       	st	X, r24
    1598:	a5 ef       	ldi	r26, 0xF5	; 245
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	ce 01       	movw	r24, r28
    159e:	05 96       	adiw	r24, 0x05	; 5
    15a0:	fc 01       	movw	r30, r24
    15a2:	31 96       	adiw	r30, 0x01	; 1
    15a4:	80 81       	ld	r24, Z
    15a6:	98 2f       	mov	r25, r24
    15a8:	99 0f       	add	r25, r25
    15aa:	99 0f       	add	r25, r25
    15ac:	99 0f       	add	r25, r25
    15ae:	fe 01       	movw	r30, r28
    15b0:	35 96       	adiw	r30, 0x05	; 5
    15b2:	80 81       	ld	r24, Z
    15b4:	82 95       	swap	r24
    15b6:	86 95       	lsr	r24
    15b8:	87 70       	andi	r24, 0x07	; 7
    15ba:	89 0f       	add	r24, r25
    15bc:	8c 93       	st	X, r24
    15be:	a4 ef       	ldi	r26, 0xF4	; 244
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	fe 01       	movw	r30, r28
    15c4:	35 96       	adiw	r30, 0x05	; 5
    15c6:	80 81       	ld	r24, Z
    15c8:	88 0f       	add	r24, r24
    15ca:	88 0f       	add	r24, r24
    15cc:	88 0f       	add	r24, r24
    15ce:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    15d0:	af ee       	ldi	r26, 0xEF	; 239
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	ef ee       	ldi	r30, 0xEF	; 239
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	90 81       	ld	r25, Z
    15da:	e9 85       	ldd	r30, Y+9	; 0x09
    15dc:	fa 85       	ldd	r31, Y+10	; 0x0a
    15de:	87 81       	ldd	r24, Z+7	; 0x07
    15e0:	89 2b       	or	r24, r25
    15e2:	8c 93       	st	X, r24
          Can_clear_rtrmsk();
    15e4:	a4 ef       	ldi	r26, 0xF4	; 244
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e4 ef       	ldi	r30, 0xF4	; 244
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	8b 7f       	andi	r24, 0xFB	; 251
    15f0:	8c 93       	st	X, r24
          Can_set_idemsk();
    15f2:	a4 ef       	ldi	r26, 0xF4	; 244
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e4 ef       	ldi	r30, 0xF4	; 244
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	81 60       	ori	r24, 0x01	; 1
    15fe:	8c 93       	st	X, r24
          Can_config_rx();       
    1600:	af ee       	ldi	r26, 0xEF	; 239
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	ef ee       	ldi	r30, 0xEF	; 239
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	8f 73       	andi	r24, 0x3F	; 63
    160c:	8c 93       	st	X, r24
    160e:	af ee       	ldi	r26, 0xEF	; 239
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	ef ee       	ldi	r30, 0xEF	; 239
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	80 68       	ori	r24, 0x80	; 128
    161a:	8c 93       	st	X, r24
    161c:	dc c3       	rjmp	.+1976   	; 0x1dd6 <__stack+0xcd7>
          break;
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    161e:	e9 85       	ldd	r30, Y+9	; 0x09
    1620:	fa 85       	ldd	r31, Y+10	; 0x0a
    1622:	84 85       	ldd	r24, Z+12	; 0x0c
    1624:	88 23       	and	r24, r24
    1626:	09 f4       	brne	.+2      	; 0x162a <__stack+0x52b>
    1628:	57 c0       	rjmp	.+174    	; 0x16d8 <__stack+0x5d9>
    162a:	a3 ef       	ldi	r26, 0xF3	; 243
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	89 85       	ldd	r24, Y+9	; 0x09
    1630:	9a 85       	ldd	r25, Y+10	; 0x0a
    1632:	03 96       	adiw	r24, 0x03	; 3
    1634:	fc 01       	movw	r30, r24
    1636:	33 96       	adiw	r30, 0x03	; 3
    1638:	80 81       	ld	r24, Z
    163a:	28 2f       	mov	r18, r24
    163c:	22 0f       	add	r18, r18
    163e:	22 0f       	add	r18, r18
    1640:	22 0f       	add	r18, r18
    1642:	89 85       	ldd	r24, Y+9	; 0x09
    1644:	9a 85       	ldd	r25, Y+10	; 0x0a
    1646:	03 96       	adiw	r24, 0x03	; 3
    1648:	fc 01       	movw	r30, r24
    164a:	32 96       	adiw	r30, 0x02	; 2
    164c:	80 81       	ld	r24, Z
    164e:	82 95       	swap	r24
    1650:	86 95       	lsr	r24
    1652:	87 70       	andi	r24, 0x07	; 7
    1654:	82 0f       	add	r24, r18
    1656:	8c 93       	st	X, r24
    1658:	a2 ef       	ldi	r26, 0xF2	; 242
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	89 85       	ldd	r24, Y+9	; 0x09
    165e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1660:	03 96       	adiw	r24, 0x03	; 3
    1662:	fc 01       	movw	r30, r24
    1664:	32 96       	adiw	r30, 0x02	; 2
    1666:	80 81       	ld	r24, Z
    1668:	28 2f       	mov	r18, r24
    166a:	22 0f       	add	r18, r18
    166c:	22 0f       	add	r18, r18
    166e:	22 0f       	add	r18, r18
    1670:	89 85       	ldd	r24, Y+9	; 0x09
    1672:	9a 85       	ldd	r25, Y+10	; 0x0a
    1674:	03 96       	adiw	r24, 0x03	; 3
    1676:	fc 01       	movw	r30, r24
    1678:	31 96       	adiw	r30, 0x01	; 1
    167a:	80 81       	ld	r24, Z
    167c:	82 95       	swap	r24
    167e:	86 95       	lsr	r24
    1680:	87 70       	andi	r24, 0x07	; 7
    1682:	82 0f       	add	r24, r18
    1684:	8c 93       	st	X, r24
    1686:	a1 ef       	ldi	r26, 0xF1	; 241
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	89 85       	ldd	r24, Y+9	; 0x09
    168c:	9a 85       	ldd	r25, Y+10	; 0x0a
    168e:	03 96       	adiw	r24, 0x03	; 3
    1690:	fc 01       	movw	r30, r24
    1692:	31 96       	adiw	r30, 0x01	; 1
    1694:	80 81       	ld	r24, Z
    1696:	28 2f       	mov	r18, r24
    1698:	22 0f       	add	r18, r18
    169a:	22 0f       	add	r18, r18
    169c:	22 0f       	add	r18, r18
    169e:	89 85       	ldd	r24, Y+9	; 0x09
    16a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a2:	03 96       	adiw	r24, 0x03	; 3
    16a4:	fc 01       	movw	r30, r24
    16a6:	80 81       	ld	r24, Z
    16a8:	82 95       	swap	r24
    16aa:	86 95       	lsr	r24
    16ac:	87 70       	andi	r24, 0x07	; 7
    16ae:	82 0f       	add	r24, r18
    16b0:	8c 93       	st	X, r24
    16b2:	a0 ef       	ldi	r26, 0xF0	; 240
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	89 85       	ldd	r24, Y+9	; 0x09
    16b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ba:	03 96       	adiw	r24, 0x03	; 3
    16bc:	fc 01       	movw	r30, r24
    16be:	80 81       	ld	r24, Z
    16c0:	88 0f       	add	r24, r24
    16c2:	88 0f       	add	r24, r24
    16c4:	88 0f       	add	r24, r24
    16c6:	8c 93       	st	X, r24
    16c8:	af ee       	ldi	r26, 0xEF	; 239
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	ef ee       	ldi	r30, 0xEF	; 239
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	80 61       	ori	r24, 0x10	; 16
    16d4:	8c 93       	st	X, r24
    16d6:	28 c0       	rjmp	.+80     	; 0x1728 <__stack+0x629>
          else              { Can_set_std_id(cmd->id.std);}
    16d8:	a3 ef       	ldi	r26, 0xF3	; 243
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	89 85       	ldd	r24, Y+9	; 0x09
    16de:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e0:	03 96       	adiw	r24, 0x03	; 3
    16e2:	fc 01       	movw	r30, r24
    16e4:	31 96       	adiw	r30, 0x01	; 1
    16e6:	80 81       	ld	r24, Z
    16e8:	28 2f       	mov	r18, r24
    16ea:	22 95       	swap	r18
    16ec:	22 0f       	add	r18, r18
    16ee:	20 7e       	andi	r18, 0xE0	; 224
    16f0:	89 85       	ldd	r24, Y+9	; 0x09
    16f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f4:	03 96       	adiw	r24, 0x03	; 3
    16f6:	fc 01       	movw	r30, r24
    16f8:	80 81       	ld	r24, Z
    16fa:	86 95       	lsr	r24
    16fc:	86 95       	lsr	r24
    16fe:	86 95       	lsr	r24
    1700:	82 0f       	add	r24, r18
    1702:	8c 93       	st	X, r24
    1704:	a2 ef       	ldi	r26, 0xF2	; 242
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	89 85       	ldd	r24, Y+9	; 0x09
    170a:	9a 85       	ldd	r25, Y+10	; 0x0a
    170c:	03 96       	adiw	r24, 0x03	; 3
    170e:	fc 01       	movw	r30, r24
    1710:	80 81       	ld	r24, Z
    1712:	82 95       	swap	r24
    1714:	88 0f       	add	r24, r24
    1716:	80 7e       	andi	r24, 0xE0	; 224
    1718:	8c 93       	st	X, r24
    171a:	af ee       	ldi	r26, 0xEF	; 239
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	ef ee       	ldi	r30, 0xEF	; 239
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	8f 7e       	andi	r24, 0xEF	; 239
    1726:	8c 93       	st	X, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    1728:	8f ef       	ldi	r24, 0xFF	; 255
    172a:	9f ef       	ldi	r25, 0xFF	; 255
    172c:	af ef       	ldi	r26, 0xFF	; 255
    172e:	bf ef       	ldi	r27, 0xFF	; 255
    1730:	8d 83       	std	Y+5, r24	; 0x05
    1732:	9e 83       	std	Y+6, r25	; 0x06
    1734:	af 83       	std	Y+7, r26	; 0x07
    1736:	b8 87       	std	Y+8, r27	; 0x08
    1738:	a7 ef       	ldi	r26, 0xF7	; 247
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	ce 01       	movw	r24, r28
    173e:	05 96       	adiw	r24, 0x05	; 5
    1740:	fc 01       	movw	r30, r24
    1742:	33 96       	adiw	r30, 0x03	; 3
    1744:	80 81       	ld	r24, Z
    1746:	28 2f       	mov	r18, r24
    1748:	22 0f       	add	r18, r18
    174a:	22 0f       	add	r18, r18
    174c:	22 0f       	add	r18, r18
    174e:	ce 01       	movw	r24, r28
    1750:	05 96       	adiw	r24, 0x05	; 5
    1752:	fc 01       	movw	r30, r24
    1754:	32 96       	adiw	r30, 0x02	; 2
    1756:	80 81       	ld	r24, Z
    1758:	82 95       	swap	r24
    175a:	86 95       	lsr	r24
    175c:	87 70       	andi	r24, 0x07	; 7
    175e:	82 0f       	add	r24, r18
    1760:	8c 93       	st	X, r24
    1762:	a6 ef       	ldi	r26, 0xF6	; 246
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	ce 01       	movw	r24, r28
    1768:	05 96       	adiw	r24, 0x05	; 5
    176a:	fc 01       	movw	r30, r24
    176c:	32 96       	adiw	r30, 0x02	; 2
    176e:	80 81       	ld	r24, Z
    1770:	28 2f       	mov	r18, r24
    1772:	22 0f       	add	r18, r18
    1774:	22 0f       	add	r18, r18
    1776:	22 0f       	add	r18, r18
    1778:	ce 01       	movw	r24, r28
    177a:	05 96       	adiw	r24, 0x05	; 5
    177c:	fc 01       	movw	r30, r24
    177e:	31 96       	adiw	r30, 0x01	; 1
    1780:	80 81       	ld	r24, Z
    1782:	82 95       	swap	r24
    1784:	86 95       	lsr	r24
    1786:	87 70       	andi	r24, 0x07	; 7
    1788:	82 0f       	add	r24, r18
    178a:	8c 93       	st	X, r24
    178c:	a5 ef       	ldi	r26, 0xF5	; 245
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	ce 01       	movw	r24, r28
    1792:	05 96       	adiw	r24, 0x05	; 5
    1794:	fc 01       	movw	r30, r24
    1796:	31 96       	adiw	r30, 0x01	; 1
    1798:	80 81       	ld	r24, Z
    179a:	98 2f       	mov	r25, r24
    179c:	99 0f       	add	r25, r25
    179e:	99 0f       	add	r25, r25
    17a0:	99 0f       	add	r25, r25
    17a2:	fe 01       	movw	r30, r28
    17a4:	35 96       	adiw	r30, 0x05	; 5
    17a6:	80 81       	ld	r24, Z
    17a8:	82 95       	swap	r24
    17aa:	86 95       	lsr	r24
    17ac:	87 70       	andi	r24, 0x07	; 7
    17ae:	89 0f       	add	r24, r25
    17b0:	8c 93       	st	X, r24
    17b2:	a4 ef       	ldi	r26, 0xF4	; 244
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	fe 01       	movw	r30, r28
    17b8:	35 96       	adiw	r30, 0x05	; 5
    17ba:	80 81       	ld	r24, Z
    17bc:	88 0f       	add	r24, r24
    17be:	88 0f       	add	r24, r24
    17c0:	88 0f       	add	r24, r24
    17c2:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    17c4:	af ee       	ldi	r26, 0xEF	; 239
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	ef ee       	ldi	r30, 0xEF	; 239
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	90 81       	ld	r25, Z
    17ce:	e9 85       	ldd	r30, Y+9	; 0x09
    17d0:	fa 85       	ldd	r31, Y+10	; 0x0a
    17d2:	87 81       	ldd	r24, Z+7	; 0x07
    17d4:	89 2b       	or	r24, r25
    17d6:	8c 93       	st	X, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    17d8:	e9 85       	ldd	r30, Y+9	; 0x09
    17da:	fa 85       	ldd	r31, Y+10	; 0x0a
    17dc:	13 86       	std	Z+11, r1	; 0x0b
    17de:	a4 ef       	ldi	r26, 0xF4	; 244
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e4 ef       	ldi	r30, 0xF4	; 244
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	84 60       	ori	r24, 0x04	; 4
    17ea:	8c 93       	st	X, r24
    17ec:	a0 ef       	ldi	r26, 0xF0	; 240
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e0 ef       	ldi	r30, 0xF0	; 240
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	8b 7f       	andi	r24, 0xFB	; 251
    17f8:	8c 93       	st	X, r24
          Can_set_idemsk();
    17fa:	a4 ef       	ldi	r26, 0xF4	; 244
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	e4 ef       	ldi	r30, 0xF4	; 244
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	81 60       	ori	r24, 0x01	; 1
    1806:	8c 93       	st	X, r24
          Can_config_rx();       
    1808:	af ee       	ldi	r26, 0xEF	; 239
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	ef ee       	ldi	r30, 0xEF	; 239
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	8f 73       	andi	r24, 0x3F	; 63
    1814:	8c 93       	st	X, r24
    1816:	af ee       	ldi	r26, 0xEF	; 239
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	ef ee       	ldi	r30, 0xEF	; 239
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	80 68       	ori	r24, 0x80	; 128
    1822:	8c 93       	st	X, r24
    1824:	d8 c2       	rjmp	.+1456   	; 0x1dd6 <__stack+0xcd7>
          break;
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1826:	e9 85       	ldd	r30, Y+9	; 0x09
    1828:	fa 85       	ldd	r31, Y+10	; 0x0a
    182a:	84 85       	ldd	r24, Z+12	; 0x0c
    182c:	88 23       	and	r24, r24
    182e:	09 f4       	brne	.+2      	; 0x1832 <__stack+0x733>
    1830:	57 c0       	rjmp	.+174    	; 0x18e0 <__stack+0x7e1>
    1832:	a3 ef       	ldi	r26, 0xF3	; 243
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	89 85       	ldd	r24, Y+9	; 0x09
    1838:	9a 85       	ldd	r25, Y+10	; 0x0a
    183a:	03 96       	adiw	r24, 0x03	; 3
    183c:	fc 01       	movw	r30, r24
    183e:	33 96       	adiw	r30, 0x03	; 3
    1840:	80 81       	ld	r24, Z
    1842:	28 2f       	mov	r18, r24
    1844:	22 0f       	add	r18, r18
    1846:	22 0f       	add	r18, r18
    1848:	22 0f       	add	r18, r18
    184a:	89 85       	ldd	r24, Y+9	; 0x09
    184c:	9a 85       	ldd	r25, Y+10	; 0x0a
    184e:	03 96       	adiw	r24, 0x03	; 3
    1850:	fc 01       	movw	r30, r24
    1852:	32 96       	adiw	r30, 0x02	; 2
    1854:	80 81       	ld	r24, Z
    1856:	82 95       	swap	r24
    1858:	86 95       	lsr	r24
    185a:	87 70       	andi	r24, 0x07	; 7
    185c:	82 0f       	add	r24, r18
    185e:	8c 93       	st	X, r24
    1860:	a2 ef       	ldi	r26, 0xF2	; 242
    1862:	b0 e0       	ldi	r27, 0x00	; 0
    1864:	89 85       	ldd	r24, Y+9	; 0x09
    1866:	9a 85       	ldd	r25, Y+10	; 0x0a
    1868:	03 96       	adiw	r24, 0x03	; 3
    186a:	fc 01       	movw	r30, r24
    186c:	32 96       	adiw	r30, 0x02	; 2
    186e:	80 81       	ld	r24, Z
    1870:	28 2f       	mov	r18, r24
    1872:	22 0f       	add	r18, r18
    1874:	22 0f       	add	r18, r18
    1876:	22 0f       	add	r18, r18
    1878:	89 85       	ldd	r24, Y+9	; 0x09
    187a:	9a 85       	ldd	r25, Y+10	; 0x0a
    187c:	03 96       	adiw	r24, 0x03	; 3
    187e:	fc 01       	movw	r30, r24
    1880:	31 96       	adiw	r30, 0x01	; 1
    1882:	80 81       	ld	r24, Z
    1884:	82 95       	swap	r24
    1886:	86 95       	lsr	r24
    1888:	87 70       	andi	r24, 0x07	; 7
    188a:	82 0f       	add	r24, r18
    188c:	8c 93       	st	X, r24
    188e:	a1 ef       	ldi	r26, 0xF1	; 241
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	89 85       	ldd	r24, Y+9	; 0x09
    1894:	9a 85       	ldd	r25, Y+10	; 0x0a
    1896:	03 96       	adiw	r24, 0x03	; 3
    1898:	fc 01       	movw	r30, r24
    189a:	31 96       	adiw	r30, 0x01	; 1
    189c:	80 81       	ld	r24, Z
    189e:	28 2f       	mov	r18, r24
    18a0:	22 0f       	add	r18, r18
    18a2:	22 0f       	add	r18, r18
    18a4:	22 0f       	add	r18, r18
    18a6:	89 85       	ldd	r24, Y+9	; 0x09
    18a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18aa:	03 96       	adiw	r24, 0x03	; 3
    18ac:	fc 01       	movw	r30, r24
    18ae:	80 81       	ld	r24, Z
    18b0:	82 95       	swap	r24
    18b2:	86 95       	lsr	r24
    18b4:	87 70       	andi	r24, 0x07	; 7
    18b6:	82 0f       	add	r24, r18
    18b8:	8c 93       	st	X, r24
    18ba:	a0 ef       	ldi	r26, 0xF0	; 240
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	89 85       	ldd	r24, Y+9	; 0x09
    18c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c2:	03 96       	adiw	r24, 0x03	; 3
    18c4:	fc 01       	movw	r30, r24
    18c6:	80 81       	ld	r24, Z
    18c8:	88 0f       	add	r24, r24
    18ca:	88 0f       	add	r24, r24
    18cc:	88 0f       	add	r24, r24
    18ce:	8c 93       	st	X, r24
    18d0:	af ee       	ldi	r26, 0xEF	; 239
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	ef ee       	ldi	r30, 0xEF	; 239
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	80 61       	ori	r24, 0x10	; 16
    18dc:	8c 93       	st	X, r24
    18de:	28 c0       	rjmp	.+80     	; 0x1930 <__stack+0x831>
          else              { Can_set_std_id(cmd->id.std);}
    18e0:	a3 ef       	ldi	r26, 0xF3	; 243
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	89 85       	ldd	r24, Y+9	; 0x09
    18e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e8:	03 96       	adiw	r24, 0x03	; 3
    18ea:	fc 01       	movw	r30, r24
    18ec:	31 96       	adiw	r30, 0x01	; 1
    18ee:	80 81       	ld	r24, Z
    18f0:	28 2f       	mov	r18, r24
    18f2:	22 95       	swap	r18
    18f4:	22 0f       	add	r18, r18
    18f6:	20 7e       	andi	r18, 0xE0	; 224
    18f8:	89 85       	ldd	r24, Y+9	; 0x09
    18fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    18fc:	03 96       	adiw	r24, 0x03	; 3
    18fe:	fc 01       	movw	r30, r24
    1900:	80 81       	ld	r24, Z
    1902:	86 95       	lsr	r24
    1904:	86 95       	lsr	r24
    1906:	86 95       	lsr	r24
    1908:	82 0f       	add	r24, r18
    190a:	8c 93       	st	X, r24
    190c:	a2 ef       	ldi	r26, 0xF2	; 242
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	89 85       	ldd	r24, Y+9	; 0x09
    1912:	9a 85       	ldd	r25, Y+10	; 0x0a
    1914:	03 96       	adiw	r24, 0x03	; 3
    1916:	fc 01       	movw	r30, r24
    1918:	80 81       	ld	r24, Z
    191a:	82 95       	swap	r24
    191c:	88 0f       	add	r24, r24
    191e:	80 7e       	andi	r24, 0xE0	; 224
    1920:	8c 93       	st	X, r24
    1922:	af ee       	ldi	r26, 0xEF	; 239
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	ef ee       	ldi	r30, 0xEF	; 239
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	8f 7e       	andi	r24, 0xEF	; 239
    192e:	8c 93       	st	X, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    1930:	8f ef       	ldi	r24, 0xFF	; 255
    1932:	9f ef       	ldi	r25, 0xFF	; 255
    1934:	af ef       	ldi	r26, 0xFF	; 255
    1936:	bf ef       	ldi	r27, 0xFF	; 255
    1938:	8d 83       	std	Y+5, r24	; 0x05
    193a:	9e 83       	std	Y+6, r25	; 0x06
    193c:	af 83       	std	Y+7, r26	; 0x07
    193e:	b8 87       	std	Y+8, r27	; 0x08
    1940:	a7 ef       	ldi	r26, 0xF7	; 247
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	ce 01       	movw	r24, r28
    1946:	05 96       	adiw	r24, 0x05	; 5
    1948:	fc 01       	movw	r30, r24
    194a:	33 96       	adiw	r30, 0x03	; 3
    194c:	80 81       	ld	r24, Z
    194e:	28 2f       	mov	r18, r24
    1950:	22 0f       	add	r18, r18
    1952:	22 0f       	add	r18, r18
    1954:	22 0f       	add	r18, r18
    1956:	ce 01       	movw	r24, r28
    1958:	05 96       	adiw	r24, 0x05	; 5
    195a:	fc 01       	movw	r30, r24
    195c:	32 96       	adiw	r30, 0x02	; 2
    195e:	80 81       	ld	r24, Z
    1960:	82 95       	swap	r24
    1962:	86 95       	lsr	r24
    1964:	87 70       	andi	r24, 0x07	; 7
    1966:	82 0f       	add	r24, r18
    1968:	8c 93       	st	X, r24
    196a:	a6 ef       	ldi	r26, 0xF6	; 246
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	ce 01       	movw	r24, r28
    1970:	05 96       	adiw	r24, 0x05	; 5
    1972:	fc 01       	movw	r30, r24
    1974:	32 96       	adiw	r30, 0x02	; 2
    1976:	80 81       	ld	r24, Z
    1978:	28 2f       	mov	r18, r24
    197a:	22 0f       	add	r18, r18
    197c:	22 0f       	add	r18, r18
    197e:	22 0f       	add	r18, r18
    1980:	ce 01       	movw	r24, r28
    1982:	05 96       	adiw	r24, 0x05	; 5
    1984:	fc 01       	movw	r30, r24
    1986:	31 96       	adiw	r30, 0x01	; 1
    1988:	80 81       	ld	r24, Z
    198a:	82 95       	swap	r24
    198c:	86 95       	lsr	r24
    198e:	87 70       	andi	r24, 0x07	; 7
    1990:	82 0f       	add	r24, r18
    1992:	8c 93       	st	X, r24
    1994:	a5 ef       	ldi	r26, 0xF5	; 245
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	ce 01       	movw	r24, r28
    199a:	05 96       	adiw	r24, 0x05	; 5
    199c:	fc 01       	movw	r30, r24
    199e:	31 96       	adiw	r30, 0x01	; 1
    19a0:	80 81       	ld	r24, Z
    19a2:	98 2f       	mov	r25, r24
    19a4:	99 0f       	add	r25, r25
    19a6:	99 0f       	add	r25, r25
    19a8:	99 0f       	add	r25, r25
    19aa:	fe 01       	movw	r30, r28
    19ac:	35 96       	adiw	r30, 0x05	; 5
    19ae:	80 81       	ld	r24, Z
    19b0:	82 95       	swap	r24
    19b2:	86 95       	lsr	r24
    19b4:	87 70       	andi	r24, 0x07	; 7
    19b6:	89 0f       	add	r24, r25
    19b8:	8c 93       	st	X, r24
    19ba:	a4 ef       	ldi	r26, 0xF4	; 244
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	fe 01       	movw	r30, r28
    19c0:	35 96       	adiw	r30, 0x05	; 5
    19c2:	80 81       	ld	r24, Z
    19c4:	88 0f       	add	r24, r24
    19c6:	88 0f       	add	r24, r24
    19c8:	88 0f       	add	r24, r24
    19ca:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    19cc:	af ee       	ldi	r26, 0xEF	; 239
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	ef ee       	ldi	r30, 0xEF	; 239
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	90 81       	ld	r25, Z
    19d6:	e9 85       	ldd	r30, Y+9	; 0x09
    19d8:	fa 85       	ldd	r31, Y+10	; 0x0a
    19da:	87 81       	ldd	r24, Z+7	; 0x07
    19dc:	89 2b       	or	r24, r25
    19de:	8c 93       	st	X, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    19e0:	e9 85       	ldd	r30, Y+9	; 0x09
    19e2:	fa 85       	ldd	r31, Y+10	; 0x0a
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	83 87       	std	Z+11, r24	; 0x0b
    19e8:	a4 ef       	ldi	r26, 0xF4	; 244
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	e4 ef       	ldi	r30, 0xF4	; 244
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	84 60       	ori	r24, 0x04	; 4
    19f4:	8c 93       	st	X, r24
    19f6:	a0 ef       	ldi	r26, 0xF0	; 240
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	e0 ef       	ldi	r30, 0xF0	; 240
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	84 60       	ori	r24, 0x04	; 4
    1a02:	8c 93       	st	X, r24
          Can_clear_rplv();
    1a04:	af ee       	ldi	r26, 0xEF	; 239
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	ef ee       	ldi	r30, 0xEF	; 239
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	8f 7d       	andi	r24, 0xDF	; 223
    1a10:	8c 93       	st	X, r24
          Can_set_idemsk();
    1a12:	a4 ef       	ldi	r26, 0xF4	; 244
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	e4 ef       	ldi	r30, 0xF4	; 244
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	81 60       	ori	r24, 0x01	; 1
    1a1e:	8c 93       	st	X, r24
          Can_config_rx();       
    1a20:	af ee       	ldi	r26, 0xEF	; 239
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	ef ee       	ldi	r30, 0xEF	; 239
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	8f 73       	andi	r24, 0x3F	; 63
    1a2c:	8c 93       	st	X, r24
    1a2e:	af ee       	ldi	r26, 0xEF	; 239
    1a30:	b0 e0       	ldi	r27, 0x00	; 0
    1a32:	ef ee       	ldi	r30, 0xEF	; 239
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	80 68       	ori	r24, 0x80	; 128
    1a3a:	8c 93       	st	X, r24
    1a3c:	cc c1       	rjmp	.+920    	; 0x1dd6 <__stack+0xcd7>
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    1a3e:	1b 82       	std	Y+3, r1	; 0x03
    1a40:	11 c0       	rjmp	.+34     	; 0x1a64 <__stack+0x965>
    1a42:	aa ef       	ldi	r26, 0xFA	; 250
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	e9 85       	ldd	r30, Y+9	; 0x09
    1a48:	fa 85       	ldd	r31, Y+10	; 0x0a
    1a4a:	20 85       	ldd	r18, Z+8	; 0x08
    1a4c:	31 85       	ldd	r19, Z+9	; 0x09
    1a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a50:	88 2f       	mov	r24, r24
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	f9 01       	movw	r30, r18
    1a56:	e8 0f       	add	r30, r24
    1a58:	f9 1f       	adc	r31, r25
    1a5a:	80 81       	ld	r24, Z
    1a5c:	8c 93       	st	X, r24
    1a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a60:	8f 5f       	subi	r24, 0xFF	; 255
    1a62:	8b 83       	std	Y+3, r24	; 0x03
    1a64:	e9 85       	ldd	r30, Y+9	; 0x09
    1a66:	fa 85       	ldd	r31, Y+10	; 0x0a
    1a68:	97 81       	ldd	r25, Z+7	; 0x07
    1a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6c:	89 17       	cp	r24, r25
    1a6e:	48 f3       	brcs	.-46     	; 0x1a42 <__stack+0x943>
          u32_temp=0; Can_set_ext_msk(u32_temp);
    1a70:	1d 82       	std	Y+5, r1	; 0x05
    1a72:	1e 82       	std	Y+6, r1	; 0x06
    1a74:	1f 82       	std	Y+7, r1	; 0x07
    1a76:	18 86       	std	Y+8, r1	; 0x08
    1a78:	a7 ef       	ldi	r26, 0xF7	; 247
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	ce 01       	movw	r24, r28
    1a7e:	05 96       	adiw	r24, 0x05	; 5
    1a80:	fc 01       	movw	r30, r24
    1a82:	33 96       	adiw	r30, 0x03	; 3
    1a84:	80 81       	ld	r24, Z
    1a86:	28 2f       	mov	r18, r24
    1a88:	22 0f       	add	r18, r18
    1a8a:	22 0f       	add	r18, r18
    1a8c:	22 0f       	add	r18, r18
    1a8e:	ce 01       	movw	r24, r28
    1a90:	05 96       	adiw	r24, 0x05	; 5
    1a92:	fc 01       	movw	r30, r24
    1a94:	32 96       	adiw	r30, 0x02	; 2
    1a96:	80 81       	ld	r24, Z
    1a98:	82 95       	swap	r24
    1a9a:	86 95       	lsr	r24
    1a9c:	87 70       	andi	r24, 0x07	; 7
    1a9e:	82 0f       	add	r24, r18
    1aa0:	8c 93       	st	X, r24
    1aa2:	a6 ef       	ldi	r26, 0xF6	; 246
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	ce 01       	movw	r24, r28
    1aa8:	05 96       	adiw	r24, 0x05	; 5
    1aaa:	fc 01       	movw	r30, r24
    1aac:	32 96       	adiw	r30, 0x02	; 2
    1aae:	80 81       	ld	r24, Z
    1ab0:	28 2f       	mov	r18, r24
    1ab2:	22 0f       	add	r18, r18
    1ab4:	22 0f       	add	r18, r18
    1ab6:	22 0f       	add	r18, r18
    1ab8:	ce 01       	movw	r24, r28
    1aba:	05 96       	adiw	r24, 0x05	; 5
    1abc:	fc 01       	movw	r30, r24
    1abe:	31 96       	adiw	r30, 0x01	; 1
    1ac0:	80 81       	ld	r24, Z
    1ac2:	82 95       	swap	r24
    1ac4:	86 95       	lsr	r24
    1ac6:	87 70       	andi	r24, 0x07	; 7
    1ac8:	82 0f       	add	r24, r18
    1aca:	8c 93       	st	X, r24
    1acc:	a5 ef       	ldi	r26, 0xF5	; 245
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	ce 01       	movw	r24, r28
    1ad2:	05 96       	adiw	r24, 0x05	; 5
    1ad4:	fc 01       	movw	r30, r24
    1ad6:	31 96       	adiw	r30, 0x01	; 1
    1ad8:	80 81       	ld	r24, Z
    1ada:	98 2f       	mov	r25, r24
    1adc:	99 0f       	add	r25, r25
    1ade:	99 0f       	add	r25, r25
    1ae0:	99 0f       	add	r25, r25
    1ae2:	fe 01       	movw	r30, r28
    1ae4:	35 96       	adiw	r30, 0x05	; 5
    1ae6:	80 81       	ld	r24, Z
    1ae8:	82 95       	swap	r24
    1aea:	86 95       	lsr	r24
    1aec:	87 70       	andi	r24, 0x07	; 7
    1aee:	89 0f       	add	r24, r25
    1af0:	8c 93       	st	X, r24
    1af2:	a4 ef       	ldi	r26, 0xF4	; 244
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	fe 01       	movw	r30, r28
    1af8:	35 96       	adiw	r30, 0x05	; 5
    1afa:	80 81       	ld	r24, Z
    1afc:	88 0f       	add	r24, r24
    1afe:	88 0f       	add	r24, r24
    1b00:	88 0f       	add	r24, r24
    1b02:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    1b04:	af ee       	ldi	r26, 0xEF	; 239
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	ef ee       	ldi	r30, 0xEF	; 239
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	90 81       	ld	r25, Z
    1b0e:	e9 85       	ldd	r30, Y+9	; 0x09
    1b10:	fa 85       	ldd	r31, Y+10	; 0x0a
    1b12:	87 81       	ldd	r24, Z+7	; 0x07
    1b14:	89 2b       	or	r24, r25
    1b16:	8c 93       	st	X, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1b18:	e9 85       	ldd	r30, Y+9	; 0x09
    1b1a:	fa 85       	ldd	r31, Y+10	; 0x0a
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	83 87       	std	Z+11, r24	; 0x0b
    1b20:	a4 ef       	ldi	r26, 0xF4	; 244
    1b22:	b0 e0       	ldi	r27, 0x00	; 0
    1b24:	e4 ef       	ldi	r30, 0xF4	; 244
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	84 60       	ori	r24, 0x04	; 4
    1b2c:	8c 93       	st	X, r24
    1b2e:	a0 ef       	ldi	r26, 0xF0	; 240
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	e0 ef       	ldi	r30, 0xF0	; 240
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	84 60       	ori	r24, 0x04	; 4
    1b3a:	8c 93       	st	X, r24
          Can_set_rplv();
    1b3c:	af ee       	ldi	r26, 0xEF	; 239
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	ef ee       	ldi	r30, 0xEF	; 239
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	80 62       	ori	r24, 0x20	; 32
    1b48:	8c 93       	st	X, r24
          Can_clear_idemsk();
    1b4a:	a4 ef       	ldi	r26, 0xF4	; 244
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	e4 ef       	ldi	r30, 0xF4	; 244
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	8e 7f       	andi	r24, 0xFE	; 254
    1b56:	8c 93       	st	X, r24
          Can_config_rx();       
    1b58:	af ee       	ldi	r26, 0xEF	; 239
    1b5a:	b0 e0       	ldi	r27, 0x00	; 0
    1b5c:	ef ee       	ldi	r30, 0xEF	; 239
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	8f 73       	andi	r24, 0x3F	; 63
    1b64:	8c 93       	st	X, r24
    1b66:	af ee       	ldi	r26, 0xEF	; 239
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	ef ee       	ldi	r30, 0xEF	; 239
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	80 68       	ori	r24, 0x80	; 128
    1b72:	8c 93       	st	X, r24
    1b74:	30 c1       	rjmp	.+608    	; 0x1dd6 <__stack+0xcd7>
          break;
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1b76:	e9 85       	ldd	r30, Y+9	; 0x09
    1b78:	fa 85       	ldd	r31, Y+10	; 0x0a
    1b7a:	84 85       	ldd	r24, Z+12	; 0x0c
    1b7c:	88 23       	and	r24, r24
    1b7e:	09 f4       	brne	.+2      	; 0x1b82 <__stack+0xa83>
    1b80:	57 c0       	rjmp	.+174    	; 0x1c30 <__stack+0xb31>
    1b82:	a3 ef       	ldi	r26, 0xF3	; 243
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	89 85       	ldd	r24, Y+9	; 0x09
    1b88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b8a:	03 96       	adiw	r24, 0x03	; 3
    1b8c:	fc 01       	movw	r30, r24
    1b8e:	33 96       	adiw	r30, 0x03	; 3
    1b90:	80 81       	ld	r24, Z
    1b92:	28 2f       	mov	r18, r24
    1b94:	22 0f       	add	r18, r18
    1b96:	22 0f       	add	r18, r18
    1b98:	22 0f       	add	r18, r18
    1b9a:	89 85       	ldd	r24, Y+9	; 0x09
    1b9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b9e:	03 96       	adiw	r24, 0x03	; 3
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	32 96       	adiw	r30, 0x02	; 2
    1ba4:	80 81       	ld	r24, Z
    1ba6:	82 95       	swap	r24
    1ba8:	86 95       	lsr	r24
    1baa:	87 70       	andi	r24, 0x07	; 7
    1bac:	82 0f       	add	r24, r18
    1bae:	8c 93       	st	X, r24
    1bb0:	a2 ef       	ldi	r26, 0xF2	; 242
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	89 85       	ldd	r24, Y+9	; 0x09
    1bb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb8:	03 96       	adiw	r24, 0x03	; 3
    1bba:	fc 01       	movw	r30, r24
    1bbc:	32 96       	adiw	r30, 0x02	; 2
    1bbe:	80 81       	ld	r24, Z
    1bc0:	28 2f       	mov	r18, r24
    1bc2:	22 0f       	add	r18, r18
    1bc4:	22 0f       	add	r18, r18
    1bc6:	22 0f       	add	r18, r18
    1bc8:	89 85       	ldd	r24, Y+9	; 0x09
    1bca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bcc:	03 96       	adiw	r24, 0x03	; 3
    1bce:	fc 01       	movw	r30, r24
    1bd0:	31 96       	adiw	r30, 0x01	; 1
    1bd2:	80 81       	ld	r24, Z
    1bd4:	82 95       	swap	r24
    1bd6:	86 95       	lsr	r24
    1bd8:	87 70       	andi	r24, 0x07	; 7
    1bda:	82 0f       	add	r24, r18
    1bdc:	8c 93       	st	X, r24
    1bde:	a1 ef       	ldi	r26, 0xF1	; 241
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	89 85       	ldd	r24, Y+9	; 0x09
    1be4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be6:	03 96       	adiw	r24, 0x03	; 3
    1be8:	fc 01       	movw	r30, r24
    1bea:	31 96       	adiw	r30, 0x01	; 1
    1bec:	80 81       	ld	r24, Z
    1bee:	28 2f       	mov	r18, r24
    1bf0:	22 0f       	add	r18, r18
    1bf2:	22 0f       	add	r18, r18
    1bf4:	22 0f       	add	r18, r18
    1bf6:	89 85       	ldd	r24, Y+9	; 0x09
    1bf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bfa:	03 96       	adiw	r24, 0x03	; 3
    1bfc:	fc 01       	movw	r30, r24
    1bfe:	80 81       	ld	r24, Z
    1c00:	82 95       	swap	r24
    1c02:	86 95       	lsr	r24
    1c04:	87 70       	andi	r24, 0x07	; 7
    1c06:	82 0f       	add	r24, r18
    1c08:	8c 93       	st	X, r24
    1c0a:	a0 ef       	ldi	r26, 0xF0	; 240
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	89 85       	ldd	r24, Y+9	; 0x09
    1c10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c12:	03 96       	adiw	r24, 0x03	; 3
    1c14:	fc 01       	movw	r30, r24
    1c16:	80 81       	ld	r24, Z
    1c18:	88 0f       	add	r24, r24
    1c1a:	88 0f       	add	r24, r24
    1c1c:	88 0f       	add	r24, r24
    1c1e:	8c 93       	st	X, r24
    1c20:	af ee       	ldi	r26, 0xEF	; 239
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	ef ee       	ldi	r30, 0xEF	; 239
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	80 61       	ori	r24, 0x10	; 16
    1c2c:	8c 93       	st	X, r24
    1c2e:	28 c0       	rjmp	.+80     	; 0x1c80 <__stack+0xb81>
          else              { Can_set_std_id(cmd->id.std);}
    1c30:	a3 ef       	ldi	r26, 0xF3	; 243
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	89 85       	ldd	r24, Y+9	; 0x09
    1c36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c38:	03 96       	adiw	r24, 0x03	; 3
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	31 96       	adiw	r30, 0x01	; 1
    1c3e:	80 81       	ld	r24, Z
    1c40:	28 2f       	mov	r18, r24
    1c42:	22 95       	swap	r18
    1c44:	22 0f       	add	r18, r18
    1c46:	20 7e       	andi	r18, 0xE0	; 224
    1c48:	89 85       	ldd	r24, Y+9	; 0x09
    1c4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4c:	03 96       	adiw	r24, 0x03	; 3
    1c4e:	fc 01       	movw	r30, r24
    1c50:	80 81       	ld	r24, Z
    1c52:	86 95       	lsr	r24
    1c54:	86 95       	lsr	r24
    1c56:	86 95       	lsr	r24
    1c58:	82 0f       	add	r24, r18
    1c5a:	8c 93       	st	X, r24
    1c5c:	a2 ef       	ldi	r26, 0xF2	; 242
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	89 85       	ldd	r24, Y+9	; 0x09
    1c62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c64:	03 96       	adiw	r24, 0x03	; 3
    1c66:	fc 01       	movw	r30, r24
    1c68:	80 81       	ld	r24, Z
    1c6a:	82 95       	swap	r24
    1c6c:	88 0f       	add	r24, r24
    1c6e:	80 7e       	andi	r24, 0xE0	; 224
    1c70:	8c 93       	st	X, r24
    1c72:	af ee       	ldi	r26, 0xEF	; 239
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	ef ee       	ldi	r30, 0xEF	; 239
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	8f 7e       	andi	r24, 0xEF	; 239
    1c7e:	8c 93       	st	X, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    1c80:	1b 82       	std	Y+3, r1	; 0x03
    1c82:	11 c0       	rjmp	.+34     	; 0x1ca6 <__stack+0xba7>
    1c84:	aa ef       	ldi	r26, 0xFA	; 250
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	e9 85       	ldd	r30, Y+9	; 0x09
    1c8a:	fa 85       	ldd	r31, Y+10	; 0x0a
    1c8c:	20 85       	ldd	r18, Z+8	; 0x08
    1c8e:	31 85       	ldd	r19, Z+9	; 0x09
    1c90:	8b 81       	ldd	r24, Y+3	; 0x03
    1c92:	88 2f       	mov	r24, r24
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	f9 01       	movw	r30, r18
    1c98:	e8 0f       	add	r30, r24
    1c9a:	f9 1f       	adc	r31, r25
    1c9c:	80 81       	ld	r24, Z
    1c9e:	8c 93       	st	X, r24
    1ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca2:	8f 5f       	subi	r24, 0xFF	; 255
    1ca4:	8b 83       	std	Y+3, r24	; 0x03
    1ca6:	e9 85       	ldd	r30, Y+9	; 0x09
    1ca8:	fa 85       	ldd	r31, Y+10	; 0x0a
    1caa:	97 81       	ldd	r25, Z+7	; 0x07
    1cac:	8b 81       	ldd	r24, Y+3	; 0x03
    1cae:	89 17       	cp	r24, r25
    1cb0:	48 f3       	brcs	.-46     	; 0x1c84 <__stack+0xb85>
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    1cb2:	8f ef       	ldi	r24, 0xFF	; 255
    1cb4:	9f ef       	ldi	r25, 0xFF	; 255
    1cb6:	af ef       	ldi	r26, 0xFF	; 255
    1cb8:	bf ef       	ldi	r27, 0xFF	; 255
    1cba:	8d 83       	std	Y+5, r24	; 0x05
    1cbc:	9e 83       	std	Y+6, r25	; 0x06
    1cbe:	af 83       	std	Y+7, r26	; 0x07
    1cc0:	b8 87       	std	Y+8, r27	; 0x08
    1cc2:	a7 ef       	ldi	r26, 0xF7	; 247
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	ce 01       	movw	r24, r28
    1cc8:	05 96       	adiw	r24, 0x05	; 5
    1cca:	fc 01       	movw	r30, r24
    1ccc:	33 96       	adiw	r30, 0x03	; 3
    1cce:	80 81       	ld	r24, Z
    1cd0:	28 2f       	mov	r18, r24
    1cd2:	22 0f       	add	r18, r18
    1cd4:	22 0f       	add	r18, r18
    1cd6:	22 0f       	add	r18, r18
    1cd8:	ce 01       	movw	r24, r28
    1cda:	05 96       	adiw	r24, 0x05	; 5
    1cdc:	fc 01       	movw	r30, r24
    1cde:	32 96       	adiw	r30, 0x02	; 2
    1ce0:	80 81       	ld	r24, Z
    1ce2:	82 95       	swap	r24
    1ce4:	86 95       	lsr	r24
    1ce6:	87 70       	andi	r24, 0x07	; 7
    1ce8:	82 0f       	add	r24, r18
    1cea:	8c 93       	st	X, r24
    1cec:	a6 ef       	ldi	r26, 0xF6	; 246
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	ce 01       	movw	r24, r28
    1cf2:	05 96       	adiw	r24, 0x05	; 5
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	32 96       	adiw	r30, 0x02	; 2
    1cf8:	80 81       	ld	r24, Z
    1cfa:	28 2f       	mov	r18, r24
    1cfc:	22 0f       	add	r18, r18
    1cfe:	22 0f       	add	r18, r18
    1d00:	22 0f       	add	r18, r18
    1d02:	ce 01       	movw	r24, r28
    1d04:	05 96       	adiw	r24, 0x05	; 5
    1d06:	fc 01       	movw	r30, r24
    1d08:	31 96       	adiw	r30, 0x01	; 1
    1d0a:	80 81       	ld	r24, Z
    1d0c:	82 95       	swap	r24
    1d0e:	86 95       	lsr	r24
    1d10:	87 70       	andi	r24, 0x07	; 7
    1d12:	82 0f       	add	r24, r18
    1d14:	8c 93       	st	X, r24
    1d16:	a5 ef       	ldi	r26, 0xF5	; 245
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	ce 01       	movw	r24, r28
    1d1c:	05 96       	adiw	r24, 0x05	; 5
    1d1e:	fc 01       	movw	r30, r24
    1d20:	31 96       	adiw	r30, 0x01	; 1
    1d22:	80 81       	ld	r24, Z
    1d24:	98 2f       	mov	r25, r24
    1d26:	99 0f       	add	r25, r25
    1d28:	99 0f       	add	r25, r25
    1d2a:	99 0f       	add	r25, r25
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	35 96       	adiw	r30, 0x05	; 5
    1d30:	80 81       	ld	r24, Z
    1d32:	82 95       	swap	r24
    1d34:	86 95       	lsr	r24
    1d36:	87 70       	andi	r24, 0x07	; 7
    1d38:	89 0f       	add	r24, r25
    1d3a:	8c 93       	st	X, r24
    1d3c:	a4 ef       	ldi	r26, 0xF4	; 244
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	fe 01       	movw	r30, r28
    1d42:	35 96       	adiw	r30, 0x05	; 5
    1d44:	80 81       	ld	r24, Z
    1d46:	88 0f       	add	r24, r24
    1d48:	88 0f       	add	r24, r24
    1d4a:	88 0f       	add	r24, r24
    1d4c:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    1d4e:	af ee       	ldi	r26, 0xEF	; 239
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	ef ee       	ldi	r30, 0xEF	; 239
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	90 81       	ld	r25, Z
    1d58:	e9 85       	ldd	r30, Y+9	; 0x09
    1d5a:	fa 85       	ldd	r31, Y+10	; 0x0a
    1d5c:	87 81       	ldd	r24, Z+7	; 0x07
    1d5e:	89 2b       	or	r24, r25
    1d60:	8c 93       	st	X, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1d62:	e9 85       	ldd	r30, Y+9	; 0x09
    1d64:	fa 85       	ldd	r31, Y+10	; 0x0a
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	83 87       	std	Z+11, r24	; 0x0b
    1d6a:	a4 ef       	ldi	r26, 0xF4	; 244
    1d6c:	b0 e0       	ldi	r27, 0x00	; 0
    1d6e:	e4 ef       	ldi	r30, 0xF4	; 244
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
    1d74:	84 60       	ori	r24, 0x04	; 4
    1d76:	8c 93       	st	X, r24
    1d78:	a0 ef       	ldi	r26, 0xF0	; 240
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	e0 ef       	ldi	r30, 0xF0	; 240
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	80 81       	ld	r24, Z
    1d82:	84 60       	ori	r24, 0x04	; 4
    1d84:	8c 93       	st	X, r24
          Can_set_rplv();
    1d86:	af ee       	ldi	r26, 0xEF	; 239
    1d88:	b0 e0       	ldi	r27, 0x00	; 0
    1d8a:	ef ee       	ldi	r30, 0xEF	; 239
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	80 62       	ori	r24, 0x20	; 32
    1d92:	8c 93       	st	X, r24
          Can_set_idemsk();
    1d94:	a4 ef       	ldi	r26, 0xF4	; 244
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
    1d98:	e4 ef       	ldi	r30, 0xF4	; 244
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	81 60       	ori	r24, 0x01	; 1
    1da0:	8c 93       	st	X, r24
          Can_config_rx();       
    1da2:	af ee       	ldi	r26, 0xEF	; 239
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	ef ee       	ldi	r30, 0xEF	; 239
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	8f 73       	andi	r24, 0x3F	; 63
    1dae:	8c 93       	st	X, r24
    1db0:	af ee       	ldi	r26, 0xEF	; 239
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	ef ee       	ldi	r30, 0xEF	; 239
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	80 68       	ori	r24, 0x80	; 128
    1dbc:	8c 93       	st	X, r24
    1dbe:	0b c0       	rjmp	.+22     	; 0x1dd6 <__stack+0xcd7>
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    1dc0:	e9 85       	ldd	r30, Y+9	; 0x09
    1dc2:	fa 85       	ldd	r31, Y+10	; 0x0a
    1dc4:	12 86       	std	Z+10, r1	; 0x0a
    1dc6:	07 c0       	rjmp	.+14     	; 0x1dd6 <__stack+0xcd7>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    1dc8:	e9 85       	ldd	r30, Y+9	; 0x09
    1dca:	fa 85       	ldd	r31, Y+10	; 0x0a
    1dcc:	8f e1       	ldi	r24, 0x1F	; 31
    1dce:	82 87       	std	Z+10, r24	; 0x0a
      return CAN_CMD_REFUSED;
    1dd0:	9f ef       	ldi	r25, 0xFF	; 255
    1dd2:	9b 87       	std	Y+11, r25	; 0x0b
    1dd4:	01 c0       	rjmp	.+2      	; 0x1dd8 <__stack+0xcd9>
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1dd6:	1b 86       	std	Y+11, r1	; 0x0b
    1dd8:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    1dda:	2d 96       	adiw	r28, 0x0d	; 13
    1ddc:	0f b6       	in	r0, 0x3f	; 63
    1dde:	f8 94       	cli
    1de0:	de bf       	out	0x3e, r29	; 62
    1de2:	0f be       	out	0x3f, r0	; 63
    1de4:	cd bf       	out	0x3d, r28	; 61
    1de6:	cf 91       	pop	r28
    1de8:	df 91       	pop	r29
    1dea:	08 95       	ret

00001dec <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
U8 can_get_status (st_cmd_t* cmd)
{
    1dec:	df 93       	push	r29
    1dee:	cf 93       	push	r28
    1df0:	cd b7       	in	r28, 0x3d	; 61
    1df2:	de b7       	in	r29, 0x3e	; 62
    1df4:	27 97       	sbiw	r28, 0x07	; 7
    1df6:	0f b6       	in	r0, 0x3f	; 63
    1df8:	f8 94       	cli
    1dfa:	de bf       	out	0x3e, r29	; 62
    1dfc:	0f be       	out	0x3f, r0	; 63
    1dfe:	cd bf       	out	0x3d, r28	; 61
    1e00:	9c 83       	std	Y+4, r25	; 0x04
    1e02:	8b 83       	std	Y+3, r24	; 0x03
    U8 a_status, rtn_val;
     
    a_status = cmd->status;
    1e04:	eb 81       	ldd	r30, Y+3	; 0x03
    1e06:	fc 81       	ldd	r31, Y+4	; 0x04
    1e08:	82 85       	ldd	r24, Z+10	; 0x0a
    1e0a:	8a 83       	std	Y+2, r24	; 0x02
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    1e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0e:	88 23       	and	r24, r24
    1e10:	31 f0       	breq	.+12     	; 0x1e1e <can_get_status+0x32>
    1e12:	8a 81       	ldd	r24, Y+2	; 0x02
    1e14:	8f 31       	cpi	r24, 0x1F	; 31
    1e16:	19 f0       	breq	.+6      	; 0x1e1e <can_get_status+0x32>
    1e18:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1a:	8f 3f       	cpi	r24, 0xFF	; 255
    1e1c:	19 f4       	brne	.+6      	; 0x1e24 <can_get_status+0x38>
    {
        return CAN_STATUS_ERROR;
    1e1e:	22 e0       	ldi	r18, 0x02	; 2
    1e20:	2f 83       	std	Y+7, r18	; 0x07
    1e22:	fb c0       	rjmp	.+502    	; 0x201a <can_get_status+0x22e>
    }

    Can_set_mob(cmd->handle);
    1e24:	ad ee       	ldi	r26, 0xED	; 237
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	eb 81       	ldd	r30, Y+3	; 0x03
    1e2a:	fc 81       	ldd	r31, Y+4	; 0x04
    1e2c:	80 81       	ld	r24, Z
    1e2e:	82 95       	swap	r24
    1e30:	80 7f       	andi	r24, 0xF0	; 240
    1e32:	8c 93       	st	X, r24
    a_status = can_get_mob_status();
    1e34:	0e 94 bd 02 	call	0x57a	; 0x57a <can_get_mob_status>
    1e38:	8a 83       	std	Y+2, r24	; 0x02
    
    switch (a_status)
    1e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3c:	28 2f       	mov	r18, r24
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	3e 83       	std	Y+6, r19	; 0x06
    1e42:	2d 83       	std	Y+5, r18	; 0x05
    1e44:	8d 81       	ldd	r24, Y+5	; 0x05
    1e46:	9e 81       	ldd	r25, Y+6	; 0x06
    1e48:	80 32       	cpi	r24, 0x20	; 32
    1e4a:	91 05       	cpc	r25, r1
    1e4c:	c9 f0       	breq	.+50     	; 0x1e80 <can_get_status+0x94>
    1e4e:	2d 81       	ldd	r18, Y+5	; 0x05
    1e50:	3e 81       	ldd	r19, Y+6	; 0x06
    1e52:	21 32       	cpi	r18, 0x21	; 33
    1e54:	31 05       	cpc	r19, r1
    1e56:	2c f4       	brge	.+10     	; 0x1e62 <can_get_status+0x76>
    1e58:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5c:	00 97       	sbiw	r24, 0x00	; 0
    1e5e:	69 f0       	breq	.+26     	; 0x1e7a <can_get_status+0x8e>
    1e60:	ca c0       	rjmp	.+404    	; 0x1ff6 <can_get_status+0x20a>
    1e62:	2d 81       	ldd	r18, Y+5	; 0x05
    1e64:	3e 81       	ldd	r19, Y+6	; 0x06
    1e66:	20 34       	cpi	r18, 0x40	; 64
    1e68:	31 05       	cpc	r19, r1
    1e6a:	09 f4       	brne	.+2      	; 0x1e6e <can_get_status+0x82>
    1e6c:	b4 c0       	rjmp	.+360    	; 0x1fd6 <can_get_status+0x1ea>
    1e6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e70:	9e 81       	ldd	r25, Y+6	; 0x06
    1e72:	80 3a       	cpi	r24, 0xA0	; 160
    1e74:	91 05       	cpc	r25, r1
    1e76:	21 f0       	breq	.+8      	; 0x1e80 <can_get_status+0x94>
    1e78:	be c0       	rjmp	.+380    	; 0x1ff6 <can_get_status+0x20a>
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	89 83       	std	Y+1, r24	; 0x01
    1e7e:	cb c0       	rjmp	.+406    	; 0x2016 <can_get_status+0x22a>
            break;
        //---------------      
        case MOB_RX_COMPLETED:     
        case MOB_RX_COMPLETED_DLCW:
            cmd->dlc = Can_get_dlc();
    1e80:	ef ee       	ldi	r30, 0xEF	; 239
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	8f 70       	andi	r24, 0x0F	; 15
    1e88:	eb 81       	ldd	r30, Y+3	; 0x03
    1e8a:	fc 81       	ldd	r31, Y+4	; 0x04
    1e8c:	87 83       	std	Z+7, r24	; 0x07
            can_get_data(cmd->pt_data);
    1e8e:	eb 81       	ldd	r30, Y+3	; 0x03
    1e90:	fc 81       	ldd	r31, Y+4	; 0x04
    1e92:	80 85       	ldd	r24, Z+8	; 0x08
    1e94:	91 85       	ldd	r25, Z+9	; 0x09
    1e96:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <can_get_data>
            cmd->ctrl.rtr = Can_get_rtr();
    1e9a:	e0 ef       	ldi	r30, 0xF0	; 240
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	88 2f       	mov	r24, r24
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	84 70       	andi	r24, 0x04	; 4
    1ea6:	90 70       	andi	r25, 0x00	; 0
    1ea8:	95 95       	asr	r25
    1eaa:	87 95       	ror	r24
    1eac:	95 95       	asr	r25
    1eae:	87 95       	ror	r24
    1eb0:	eb 81       	ldd	r30, Y+3	; 0x03
    1eb2:	fc 81       	ldd	r31, Y+4	; 0x04
    1eb4:	83 87       	std	Z+11, r24	; 0x0b
            if (Can_get_ide()) // if extended frame
    1eb6:	ef ee       	ldi	r30, 0xEF	; 239
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	88 2f       	mov	r24, r24
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	80 71       	andi	r24, 0x10	; 16
    1ec2:	90 70       	andi	r25, 0x00	; 0
    1ec4:	95 95       	asr	r25
    1ec6:	87 95       	ror	r24
    1ec8:	95 95       	asr	r25
    1eca:	87 95       	ror	r24
    1ecc:	95 95       	asr	r25
    1ece:	87 95       	ror	r24
    1ed0:	95 95       	asr	r25
    1ed2:	87 95       	ror	r24
    1ed4:	00 97       	sbiw	r24, 0x00	; 0
    1ed6:	09 f4       	brne	.+2      	; 0x1eda <can_get_status+0xee>
    1ed8:	4c c0       	rjmp	.+152    	; 0x1f72 <can_get_status+0x186>
            {
                cmd->ctrl.ide = 1; // extended frame
    1eda:	eb 81       	ldd	r30, Y+3	; 0x03
    1edc:	fc 81       	ldd	r31, Y+4	; 0x04
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	84 87       	std	Z+12, r24	; 0x0c
                Can_get_ext_id(cmd->id.ext);
    1ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee6:	03 96       	adiw	r24, 0x03	; 3
    1ee8:	dc 01       	movw	r26, r24
    1eea:	13 96       	adiw	r26, 0x03	; 3
    1eec:	e3 ef       	ldi	r30, 0xF3	; 243
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	86 95       	lsr	r24
    1ef4:	86 95       	lsr	r24
    1ef6:	86 95       	lsr	r24
    1ef8:	8c 93       	st	X, r24
    1efa:	8b 81       	ldd	r24, Y+3	; 0x03
    1efc:	9c 81       	ldd	r25, Y+4	; 0x04
    1efe:	03 96       	adiw	r24, 0x03	; 3
    1f00:	dc 01       	movw	r26, r24
    1f02:	12 96       	adiw	r26, 0x02	; 2
    1f04:	e2 ef       	ldi	r30, 0xF2	; 242
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	80 81       	ld	r24, Z
    1f0a:	98 2f       	mov	r25, r24
    1f0c:	96 95       	lsr	r25
    1f0e:	96 95       	lsr	r25
    1f10:	96 95       	lsr	r25
    1f12:	e3 ef       	ldi	r30, 0xF3	; 243
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	82 95       	swap	r24
    1f1a:	88 0f       	add	r24, r24
    1f1c:	80 7e       	andi	r24, 0xE0	; 224
    1f1e:	89 0f       	add	r24, r25
    1f20:	8c 93       	st	X, r24
    1f22:	8b 81       	ldd	r24, Y+3	; 0x03
    1f24:	9c 81       	ldd	r25, Y+4	; 0x04
    1f26:	03 96       	adiw	r24, 0x03	; 3
    1f28:	dc 01       	movw	r26, r24
    1f2a:	11 96       	adiw	r26, 0x01	; 1
    1f2c:	e1 ef       	ldi	r30, 0xF1	; 241
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 81       	ld	r24, Z
    1f32:	98 2f       	mov	r25, r24
    1f34:	96 95       	lsr	r25
    1f36:	96 95       	lsr	r25
    1f38:	96 95       	lsr	r25
    1f3a:	e2 ef       	ldi	r30, 0xF2	; 242
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	80 81       	ld	r24, Z
    1f40:	82 95       	swap	r24
    1f42:	88 0f       	add	r24, r24
    1f44:	80 7e       	andi	r24, 0xE0	; 224
    1f46:	89 0f       	add	r24, r25
    1f48:	8c 93       	st	X, r24
    1f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4e:	03 96       	adiw	r24, 0x03	; 3
    1f50:	dc 01       	movw	r26, r24
    1f52:	e0 ef       	ldi	r30, 0xF0	; 240
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	98 2f       	mov	r25, r24
    1f5a:	96 95       	lsr	r25
    1f5c:	96 95       	lsr	r25
    1f5e:	96 95       	lsr	r25
    1f60:	e1 ef       	ldi	r30, 0xF1	; 241
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	82 95       	swap	r24
    1f68:	88 0f       	add	r24, r24
    1f6a:	80 7e       	andi	r24, 0xE0	; 224
    1f6c:	89 0f       	add	r24, r25
    1f6e:	8c 93       	st	X, r24
    1f70:	22 c0       	rjmp	.+68     	; 0x1fb6 <can_get_status+0x1ca>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    1f72:	eb 81       	ldd	r30, Y+3	; 0x03
    1f74:	fc 81       	ldd	r31, Y+4	; 0x04
    1f76:	14 86       	std	Z+12, r1	; 0x0c
                    Can_get_std_id(cmd->id.std);
    1f78:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f7c:	03 96       	adiw	r24, 0x03	; 3
    1f7e:	dc 01       	movw	r26, r24
    1f80:	11 96       	adiw	r26, 0x01	; 1
    1f82:	e3 ef       	ldi	r30, 0xF3	; 243
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	82 95       	swap	r24
    1f8a:	86 95       	lsr	r24
    1f8c:	87 70       	andi	r24, 0x07	; 7
    1f8e:	8c 93       	st	X, r24
    1f90:	8b 81       	ldd	r24, Y+3	; 0x03
    1f92:	9c 81       	ldd	r25, Y+4	; 0x04
    1f94:	03 96       	adiw	r24, 0x03	; 3
    1f96:	dc 01       	movw	r26, r24
    1f98:	e2 ef       	ldi	r30, 0xF2	; 242
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	98 2f       	mov	r25, r24
    1fa0:	92 95       	swap	r25
    1fa2:	96 95       	lsr	r25
    1fa4:	97 70       	andi	r25, 0x07	; 7
    1fa6:	e3 ef       	ldi	r30, 0xF3	; 243
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	88 0f       	add	r24, r24
    1fae:	88 0f       	add	r24, r24
    1fb0:	88 0f       	add	r24, r24
    1fb2:	89 0f       	add	r24, r25
    1fb4:	8c 93       	st	X, r24
                }
            // Status field of descriptor: 0x20 if Rx completed
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
    1fb6:	eb 81       	ldd	r30, Y+3	; 0x03
    1fb8:	fc 81       	ldd	r31, Y+4	; 0x04
    1fba:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbc:	82 87       	std	Z+10, r24	; 0x0a
            Can_mob_abort();        // Freed the MOB
    1fbe:	af ee       	ldi	r26, 0xEF	; 239
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	ef ee       	ldi	r30, 0xEF	; 239
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	8f 73       	andi	r24, 0x3F	; 63
    1fca:	8c 93       	st	X, r24
            Can_clear_status_mob(); //   and reset MOb status
    1fcc:	ee ee       	ldi	r30, 0xEE	; 238
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_COMPLETED;
    1fd2:	19 82       	std	Y+1, r1	; 0x01
    1fd4:	20 c0       	rjmp	.+64     	; 0x2016 <can_get_status+0x22a>
            break;
        //---------------      
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    1fd6:	eb 81       	ldd	r30, Y+3	; 0x03
    1fd8:	fc 81       	ldd	r31, Y+4	; 0x04
    1fda:	8a 81       	ldd	r24, Y+2	; 0x02
    1fdc:	82 87       	std	Z+10, r24	; 0x0a
            Can_mob_abort();        // Freed the MOB
    1fde:	af ee       	ldi	r26, 0xEF	; 239
    1fe0:	b0 e0       	ldi	r27, 0x00	; 0
    1fe2:	ef ee       	ldi	r30, 0xEF	; 239
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	80 81       	ld	r24, Z
    1fe8:	8f 73       	andi	r24, 0x3F	; 63
    1fea:	8c 93       	st	X, r24
            Can_clear_status_mob(); //   and reset MOb status
    1fec:	ee ee       	ldi	r30, 0xEE	; 238
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_COMPLETED;
    1ff2:	19 82       	std	Y+1, r1	; 0x01
    1ff4:	10 c0       	rjmp	.+32     	; 0x2016 <can_get_status+0x22a>
            break;
        //---------------      
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    1ff6:	eb 81       	ldd	r30, Y+3	; 0x03
    1ff8:	fc 81       	ldd	r31, Y+4	; 0x04
    1ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffc:	82 87       	std	Z+10, r24	; 0x0a
            Can_mob_abort();        // Freed the MOB
    1ffe:	af ee       	ldi	r26, 0xEF	; 239
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	ef ee       	ldi	r30, 0xEF	; 239
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	8f 73       	andi	r24, 0x3F	; 63
    200a:	8c 93       	st	X, r24
            Can_clear_status_mob(); //   and reset MOb status
    200c:	ee ee       	ldi	r30, 0xEE	; 238
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_ERROR;
    2012:	82 e0       	ldi	r24, 0x02	; 2
    2014:	89 83       	std	Y+1, r24	; 0x01
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
    2016:	99 81       	ldd	r25, Y+1	; 0x01
    2018:	9f 83       	std	Y+7, r25	; 0x07
    201a:	8f 81       	ldd	r24, Y+7	; 0x07
}
    201c:	27 96       	adiw	r28, 0x07	; 7
    201e:	0f b6       	in	r0, 0x3f	; 63
    2020:	f8 94       	cli
    2022:	de bf       	out	0x3e, r29	; 62
    2024:	0f be       	out	0x3f, r0	; 63
    2026:	cd bf       	out	0x3d, r28	; 61
    2028:	cf 91       	pop	r28
    202a:	df 91       	pop	r29
    202c:	08 95       	ret

0000202e <led_init>:
//!
//! @return  none
//!
//------------------------------------------------------------------------------
void led_init(void)
{
    202e:	df 93       	push	r29
    2030:	cf 93       	push	r28
    2032:	cd b7       	in	r28, 0x3d	; 61
    2034:	de b7       	in	r29, 0x3e	; 62
    //-- Set direction
    LED_PORT_DIR = 0xFF;
    2036:	e1 e2       	ldi	r30, 0x21	; 33
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	8f ef       	ldi	r24, 0xFF	; 255
    203c:	80 83       	st	Z, r24
    //-- Clear LEDs.
    LED_PORT_OUT = 0x00;    
    203e:	e2 e2       	ldi	r30, 0x22	; 34
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	10 82       	st	Z, r1
}
    2044:	cf 91       	pop	r28
    2046:	df 91       	pop	r29
    2048:	08 95       	ret

0000204a <write_led>:
//!
//! @return (none)
//!
//------------------------------------------------------------------------------
void write_led(U8 led_display)
{
    204a:	df 93       	push	r29
    204c:	cf 93       	push	r28
    204e:	0f 92       	push	r0
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
    2054:	89 83       	std	Y+1, r24	; 0x01
    LED_PORT_OUT = led_display;
    2056:	e2 e2       	ldi	r30, 0x22	; 34
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	89 81       	ldd	r24, Y+1	; 0x01
    205c:	80 83       	st	Z, r24
}
    205e:	0f 90       	pop	r0
    2060:	cf 91       	pop	r28
    2062:	df 91       	pop	r29
    2064:	08 95       	ret

00002066 <swap_nibble_led>:
//!
//! @return  none
//!
//------------------------------------------------------------------------------
void swap_nibble_led(void)
{
    2066:	df 93       	push	r29
    2068:	cf 93       	push	r28
    206a:	cd b7       	in	r28, 0x3d	; 61
    206c:	de b7       	in	r29, 0x3e	; 62
    LED_PORT_OUT = (LED_PORT_IN << 4) | (LED_PORT_IN >> 4);
    206e:	a2 e2       	ldi	r26, 0x22	; 34
    2070:	b0 e0       	ldi	r27, 0x00	; 0
    2072:	e0 e2       	ldi	r30, 0x20	; 32
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	80 81       	ld	r24, Z
    2078:	88 2f       	mov	r24, r24
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	82 95       	swap	r24
    207e:	92 95       	swap	r25
    2080:	90 7f       	andi	r25, 0xF0	; 240
    2082:	98 27       	eor	r25, r24
    2084:	80 7f       	andi	r24, 0xF0	; 240
    2086:	98 27       	eor	r25, r24
    2088:	98 2f       	mov	r25, r24
    208a:	e0 e2       	ldi	r30, 0x20	; 32
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	82 95       	swap	r24
    2092:	8f 70       	andi	r24, 0x0F	; 15
    2094:	89 2b       	or	r24, r25
    2096:	8c 93       	st	X, r24
}
    2098:	cf 91       	pop	r28
    209a:	df 91       	pop	r29
    209c:	08 95       	ret

0000209e <toggle_led>:
//!
//! @return  none
//!
//------------------------------------------------------------------------------
void toggle_led(void)
{
    209e:	df 93       	push	r29
    20a0:	cf 93       	push	r28
    20a2:	cd b7       	in	r28, 0x3d	; 61
    20a4:	de b7       	in	r29, 0x3e	; 62
    LED_PORT_IN = 0xFF;
    20a6:	e0 e2       	ldi	r30, 0x20	; 32
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	8f ef       	ldi	r24, 0xFF	; 255
    20ac:	80 83       	st	Z, r24
}
    20ae:	cf 91       	pop	r28
    20b0:	df 91       	pop	r29
    20b2:	08 95       	ret

000020b4 <write_led_number>:
//!             FALSE: led_number >= 8 or led_level >=2,
//!             TRUE:  In range
//!
//------------------------------------------------------------------------------
U8 write_led_number(U8 led_number,Bool led_level)
{
    20b4:	df 93       	push	r29
    20b6:	cf 93       	push	r28
    20b8:	00 d0       	rcall	.+0      	; 0x20ba <write_led_number+0x6>
    20ba:	0f 92       	push	r0
    20bc:	cd b7       	in	r28, 0x3d	; 61
    20be:	de b7       	in	r29, 0x3e	; 62
    20c0:	8a 83       	std	Y+2, r24	; 0x02
    20c2:	6b 83       	std	Y+3, r22	; 0x03
U8 range_error;
    
    range_error = FALSE;
    20c4:	19 82       	std	Y+1, r1	; 0x01
    if (led_number < 8)
    20c6:	8a 81       	ldd	r24, Y+2	; 0x02
    20c8:	88 30       	cpi	r24, 0x08	; 8
    20ca:	88 f5       	brcc	.+98     	; 0x212e <write_led_number+0x7a>
    {
        if (led_level==0)
    20cc:	8b 81       	ldd	r24, Y+3	; 0x03
    20ce:	88 23       	and	r24, r24
    20d0:	b1 f4       	brne	.+44     	; 0x20fe <write_led_number+0x4a>
        {
            range_error = TRUE;
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	89 83       	std	Y+1, r24	; 0x01
            LED_PORT_OUT &= ~(1<<led_number);
    20d6:	a2 e2       	ldi	r26, 0x22	; 34
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	e2 e2       	ldi	r30, 0x22	; 34
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	80 81       	ld	r24, Z
    20e0:	48 2f       	mov	r20, r24
    20e2:	8a 81       	ldd	r24, Y+2	; 0x02
    20e4:	28 2f       	mov	r18, r24
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	02 2e       	mov	r0, r18
    20ee:	02 c0       	rjmp	.+4      	; 0x20f4 <write_led_number+0x40>
    20f0:	88 0f       	add	r24, r24
    20f2:	99 1f       	adc	r25, r25
    20f4:	0a 94       	dec	r0
    20f6:	e2 f7       	brpl	.-8      	; 0x20f0 <write_led_number+0x3c>
    20f8:	80 95       	com	r24
    20fa:	84 23       	and	r24, r20
    20fc:	8c 93       	st	X, r24
        }
        if (led_level==1)
    20fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2100:	81 30       	cpi	r24, 0x01	; 1
    2102:	a9 f4       	brne	.+42     	; 0x212e <write_led_number+0x7a>
        {
            range_error = TRUE;
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	89 83       	std	Y+1, r24	; 0x01
            LED_PORT_OUT |= (1<<led_number);
    2108:	a2 e2       	ldi	r26, 0x22	; 34
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	e2 e2       	ldi	r30, 0x22	; 34
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	48 2f       	mov	r20, r24
    2114:	8a 81       	ldd	r24, Y+2	; 0x02
    2116:	28 2f       	mov	r18, r24
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	02 2e       	mov	r0, r18
    2120:	02 c0       	rjmp	.+4      	; 0x2126 <write_led_number+0x72>
    2122:	88 0f       	add	r24, r24
    2124:	99 1f       	adc	r25, r25
    2126:	0a 94       	dec	r0
    2128:	e2 f7       	brpl	.-8      	; 0x2122 <write_led_number+0x6e>
    212a:	84 2b       	or	r24, r20
    212c:	8c 93       	st	X, r24
        }
    }
    return range_error;
    212e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2130:	0f 90       	pop	r0
    2132:	0f 90       	pop	r0
    2134:	0f 90       	pop	r0
    2136:	cf 91       	pop	r28
    2138:	df 91       	pop	r29
    213a:	08 95       	ret

0000213c <wait_for>:
//!
//! @return  none 
//!
//------------------------------------------------------------------------------
void wait_for(U16 ms_count)
{
    213c:	df 93       	push	r29
    213e:	cf 93       	push	r28
    2140:	cd b7       	in	r28, 0x3d	; 61
    2142:	de b7       	in	r29, 0x3e	; 62
    2144:	2a 97       	sbiw	r28, 0x0a	; 10
    2146:	0f b6       	in	r0, 0x3f	; 63
    2148:	f8 94       	cli
    214a:	de bf       	out	0x3e, r29	; 62
    214c:	0f be       	out	0x3f, r0	; 63
    214e:	cd bf       	out	0x3d, r28	; 61
    2150:	9a 87       	std	Y+10, r25	; 0x0a
    2152:	89 87       	std	Y+9, r24	; 0x09
U32 temp;
U16 i;
U8  j, k;

    if (rtc_running == ON)
    2154:	80 91 5a 03 	lds	r24, 0x035A
    2158:	81 30       	cpi	r24, 0x01	; 1
    215a:	09 f0       	breq	.+2      	; 0x215e <wait_for+0x22>
    215c:	45 c0       	rjmp	.+138    	; 0x21e8 <wait_for+0xac>
    {
        Disable_interrupt(); temp = rtc_tics; Enable_interrupt();    //-- Get atomic U32 value
    215e:	f8 94       	cli
    2160:	80 91 75 03 	lds	r24, 0x0375
    2164:	90 91 76 03 	lds	r25, 0x0376
    2168:	a0 91 77 03 	lds	r26, 0x0377
    216c:	b0 91 78 03 	lds	r27, 0x0378
    2170:	8d 83       	std	Y+5, r24	; 0x05
    2172:	9e 83       	std	Y+6, r25	; 0x06
    2174:	af 83       	std	Y+7, r26	; 0x07
    2176:	b8 87       	std	Y+8, r27	; 0x08
    2178:	78 94       	sei
        temp += ((U32)(ms_count));
    217a:	89 85       	ldd	r24, Y+9	; 0x09
    217c:	9a 85       	ldd	r25, Y+10	; 0x0a
    217e:	9c 01       	movw	r18, r24
    2180:	40 e0       	ldi	r20, 0x00	; 0
    2182:	50 e0       	ldi	r21, 0x00	; 0
    2184:	8d 81       	ldd	r24, Y+5	; 0x05
    2186:	9e 81       	ldd	r25, Y+6	; 0x06
    2188:	af 81       	ldd	r26, Y+7	; 0x07
    218a:	b8 85       	ldd	r27, Y+8	; 0x08
    218c:	82 0f       	add	r24, r18
    218e:	93 1f       	adc	r25, r19
    2190:	a4 1f       	adc	r26, r20
    2192:	b5 1f       	adc	r27, r21
    2194:	8d 83       	std	Y+5, r24	; 0x05
    2196:	9e 83       	std	Y+6, r25	; 0x06
    2198:	af 83       	std	Y+7, r26	; 0x07
    219a:	b8 87       	std	Y+8, r27	; 0x08
        while (1)
        {
            Disable_interrupt();    //-- Get atomic U32 values
    219c:	f8 94       	cli
            if (rtc_tics == temp) break;                //-- Standart EXIT
    219e:	20 91 75 03 	lds	r18, 0x0375
    21a2:	30 91 76 03 	lds	r19, 0x0376
    21a6:	40 91 77 03 	lds	r20, 0x0377
    21aa:	50 91 78 03 	lds	r21, 0x0378
    21ae:	8d 81       	ldd	r24, Y+5	; 0x05
    21b0:	9e 81       	ldd	r25, Y+6	; 0x06
    21b2:	af 81       	ldd	r26, Y+7	; 0x07
    21b4:	b8 85       	ldd	r27, Y+8	; 0x08
    21b6:	28 17       	cp	r18, r24
    21b8:	39 07       	cpc	r19, r25
    21ba:	4a 07       	cpc	r20, r26
    21bc:	5b 07       	cpc	r21, r27
    21be:	99 f1       	breq	.+102    	; 0x2226 <wait_for+0xea>
            if (rtc_tics == ((U32)(ms_count)) ) break;  //-- EXIT if overflow (not right)
    21c0:	89 85       	ldd	r24, Y+9	; 0x09
    21c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c4:	9c 01       	movw	r18, r24
    21c6:	40 e0       	ldi	r20, 0x00	; 0
    21c8:	50 e0       	ldi	r21, 0x00	; 0
    21ca:	80 91 75 03 	lds	r24, 0x0375
    21ce:	90 91 76 03 	lds	r25, 0x0376
    21d2:	a0 91 77 03 	lds	r26, 0x0377
    21d6:	b0 91 78 03 	lds	r27, 0x0378
    21da:	28 17       	cp	r18, r24
    21dc:	39 07       	cpc	r19, r25
    21de:	4a 07       	cpc	r20, r26
    21e0:	5b 07       	cpc	r21, r27
    21e2:	09 f1       	breq	.+66     	; 0x2226 <wait_for+0xea>
            Enable_interrupt();
    21e4:	78 94       	sei
    21e6:	da cf       	rjmp	.-76     	; 0x219c <wait_for+0x60>
        }
    }
    else    //-- No RTC, enabling something almost equivalent but not right.
    {
        for (i=0;i<ms_count;i++)
    21e8:	1c 82       	std	Y+4, r1	; 0x04
    21ea:	1b 82       	std	Y+3, r1	; 0x03
    21ec:	15 c0       	rjmp	.+42     	; 0x2218 <wait_for+0xdc>
        {
            for (j=0;j<(U8)(FOSC/1000);j++)
    21ee:	1a 82       	std	Y+2, r1	; 0x02
    21f0:	0b c0       	rjmp	.+22     	; 0x2208 <wait_for+0xcc>
            {
                for (k=0; k<90;k++);
    21f2:	19 82       	std	Y+1, r1	; 0x01
    21f4:	03 c0       	rjmp	.+6      	; 0x21fc <wait_for+0xc0>
    21f6:	89 81       	ldd	r24, Y+1	; 0x01
    21f8:	8f 5f       	subi	r24, 0xFF	; 255
    21fa:	89 83       	std	Y+1, r24	; 0x01
    21fc:	89 81       	ldd	r24, Y+1	; 0x01
    21fe:	8a 35       	cpi	r24, 0x5A	; 90
    2200:	d0 f3       	brcs	.-12     	; 0x21f6 <wait_for+0xba>
    }
    else    //-- No RTC, enabling something almost equivalent but not right.
    {
        for (i=0;i<ms_count;i++)
        {
            for (j=0;j<(U8)(FOSC/1000);j++)
    2202:	8a 81       	ldd	r24, Y+2	; 0x02
    2204:	8f 5f       	subi	r24, 0xFF	; 255
    2206:	8a 83       	std	Y+2, r24	; 0x02
    2208:	8a 81       	ldd	r24, Y+2	; 0x02
    220a:	88 30       	cpi	r24, 0x08	; 8
    220c:	90 f3       	brcs	.-28     	; 0x21f2 <wait_for+0xb6>
            Enable_interrupt();
        }
    }
    else    //-- No RTC, enabling something almost equivalent but not right.
    {
        for (i=0;i<ms_count;i++)
    220e:	8b 81       	ldd	r24, Y+3	; 0x03
    2210:	9c 81       	ldd	r25, Y+4	; 0x04
    2212:	01 96       	adiw	r24, 0x01	; 1
    2214:	9c 83       	std	Y+4, r25	; 0x04
    2216:	8b 83       	std	Y+3, r24	; 0x03
    2218:	2b 81       	ldd	r18, Y+3	; 0x03
    221a:	3c 81       	ldd	r19, Y+4	; 0x04
    221c:	89 85       	ldd	r24, Y+9	; 0x09
    221e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2220:	28 17       	cp	r18, r24
    2222:	39 07       	cpc	r19, r25
    2224:	20 f3       	brcs	.-56     	; 0x21ee <wait_for+0xb2>
            {
                for (k=0; k<90;k++);
            }
        }
    }
}
    2226:	2a 96       	adiw	r28, 0x0a	; 10
    2228:	0f b6       	in	r0, 0x3f	; 63
    222a:	f8 94       	cli
    222c:	de bf       	out	0x3e, r29	; 62
    222e:	0f be       	out	0x3f, r0	; 63
    2230:	cd bf       	out	0x3d, r28	; 61
    2232:	cf 91       	pop	r28
    2234:	df 91       	pop	r29
    2236:	08 95       	ret

00002238 <rtc_int_init>:
//!
//------------------------------------------------------------------------------
#if (RTC_TIMER == 2)

void rtc_int_init(void)
{
    2238:	df 93       	push	r29
    223a:	cf 93       	push	r28
    223c:	00 d0       	rcall	.+0      	; 0x223e <rtc_int_init+0x6>
    223e:	cd b7       	in	r28, 0x3d	; 61
    2240:	de b7       	in	r29, 0x3e	; 62
U16 i;
    
    Disable_interrupt();
    2242:	f8 94       	cli

    Timer8_clear();                 //-- Timer 2 cleared & initialized "OFF"
    2244:	e0 eb       	ldi	r30, 0xB0	; 176
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	10 82       	st	Z, r1
    224a:	e2 eb       	ldi	r30, 0xB2	; 178
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	10 82       	st	Z, r1
    2250:	e3 eb       	ldi	r30, 0xB3	; 179
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	10 82       	st	Z, r1
    for (i=0;i<0xFFFF;i++);         //-- Waiting to let the Xtal stabilize after a power-on
    2256:	1a 82       	std	Y+2, r1	; 0x02
    2258:	19 82       	std	Y+1, r1	; 0x01
    225a:	05 c0       	rjmp	.+10     	; 0x2266 <rtc_int_init+0x2e>
    225c:	89 81       	ldd	r24, Y+1	; 0x01
    225e:	9a 81       	ldd	r25, Y+2	; 0x02
    2260:	01 96       	adiw	r24, 0x01	; 1
    2262:	9a 83       	std	Y+2, r25	; 0x02
    2264:	89 83       	std	Y+1, r24	; 0x01
    2266:	89 81       	ldd	r24, Y+1	; 0x01
    2268:	9a 81       	ldd	r25, Y+2	; 0x02
    226a:	2f ef       	ldi	r18, 0xFF	; 255
    226c:	8f 3f       	cpi	r24, 0xFF	; 255
    226e:	92 07       	cpc	r25, r18
    2270:	a9 f7       	brne	.-22     	; 0x225c <rtc_int_init+0x24>
    Timer8_overflow_it_disable();   //-- Disable OCIE2A interrupt
    2272:	a0 e7       	ldi	r26, 0x70	; 112
    2274:	b0 e0       	ldi	r27, 0x00	; 0
    2276:	e0 e7       	ldi	r30, 0x70	; 112
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	80 81       	ld	r24, Z
    227c:	8e 7f       	andi	r24, 0xFE	; 254
    227e:	8c 93       	st	X, r24
    Timer8_compare_a_it_disable();  //-- Disable TOIE2 interrupt
    2280:	a0 e7       	ldi	r26, 0x70	; 112
    2282:	b0 e0       	ldi	r27, 0x00	; 0
    2284:	e0 e7       	ldi	r30, 0x70	; 112
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	80 81       	ld	r24, Z
    228a:	8d 7f       	andi	r24, 0xFD	; 253
    228c:	8c 93       	st	X, r24
    //-- Config: - CTC mode (mode 2, top=OCR2A)
    //--         - No output
    //--        (- Timer "OFF")
    Timer8_set_mode_output_a(TIMER8_COMP_MODE_NORMAL);
    228e:	a0 eb       	ldi	r26, 0xB0	; 176
    2290:	b0 e0       	ldi	r27, 0x00	; 0
    2292:	e0 eb       	ldi	r30, 0xB0	; 176
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	80 81       	ld	r24, Z
    2298:	8f 7c       	andi	r24, 0xCF	; 207
    229a:	8c 93       	st	X, r24
    Timer8_set_waveform_mode(TIMER8_WGM_CTC_OCR);
    229c:	a0 eb       	ldi	r26, 0xB0	; 176
    229e:	b0 e0       	ldi	r27, 0x00	; 0
    22a0:	e0 eb       	ldi	r30, 0xB0	; 176
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	80 81       	ld	r24, Z
    22a6:	87 7b       	andi	r24, 0xB7	; 183
    22a8:	88 60       	ori	r24, 0x08	; 8
    22aa:	8c 93       	st	X, r24

#   if (RTC_CLOCK == 32)
   
    //--- Asynchronous external clock 32,768 KHZ
        Timer8_2_external_osc();            //-- Init RTC clock
    22ac:	a6 eb       	ldi	r26, 0xB6	; 182
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	e6 eb       	ldi	r30, 0xB6	; 182
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	87 7e       	andi	r24, 0xE7	; 231
    22b8:	88 60       	ori	r24, 0x08	; 8
    22ba:	8c 93       	st	X, r24
        Timer8_set_compare_a(33-1);         //-- MAGIC_NUMBER !
    22bc:	e3 eb       	ldi	r30, 0xB3	; 179
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	80 e2       	ldi	r24, 0x20	; 32
    22c2:	80 83       	st	Z, r24
        //-- No prescaler & timer "ON"
        //-- Tic interval: ((1/32768)*MAGIC_NUMBER) sec = 1.00708008 msec
        Timer8_set_clock(TIMER8_CLKIO_BY_1);
    22c4:	a0 eb       	ldi	r26, 0xB0	; 176
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	e0 eb       	ldi	r30, 0xB0	; 176
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	80 81       	ld	r24, Z
    22ce:	88 7f       	andi	r24, 0xF8	; 248
    22d0:	81 60       	ori	r24, 0x01	; 1
    22d2:	8c 93       	st	X, r24
#   else
#       error This RTC_CLOCK value is not available input for "rtc_drv.c" file

#   endif // (RTC_CLOCK ...
    
    while(Timer8_2_update_busy());    //-- Wait for TCN2UB, OCR2UB and TCR2UB to be cleared
    22d4:	e6 eb       	ldi	r30, 0xB6	; 182
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	80 81       	ld	r24, Z
    22da:	88 2f       	mov	r24, r24
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	87 70       	andi	r24, 0x07	; 7
    22e0:	90 70       	andi	r25, 0x00	; 0
    22e2:	00 97       	sbiw	r24, 0x00	; 0
    22e4:	b9 f7       	brne	.-18     	; 0x22d4 <rtc_int_init+0x9c>

    Timer8_clear_compare_a_it();      //-- Clear Output_Compare Interrupt-flags
    22e6:	a7 e3       	ldi	r26, 0x37	; 55
    22e8:	b0 e0       	ldi	r27, 0x00	; 0
    22ea:	e7 e3       	ldi	r30, 0x37	; 55
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	80 81       	ld	r24, Z
    22f0:	82 60       	ori	r24, 0x02	; 2
    22f2:	8c 93       	st	X, r24
    Timer8_compare_a_it_enable();     //-- Enable Timer2 Output_Compare Interrupt
    22f4:	a0 e7       	ldi	r26, 0x70	; 112
    22f6:	b0 e0       	ldi	r27, 0x00	; 0
    22f8:	e0 e7       	ldi	r30, 0x70	; 112
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	82 60       	ori	r24, 0x02	; 2
    2300:	8c 93       	st	X, r24

    //-- Time setting
    rtc_tics         = 0;
    2302:	10 92 75 03 	sts	0x0375, r1
    2306:	10 92 76 03 	sts	0x0376, r1
    230a:	10 92 77 03 	sts	0x0377, r1
    230e:	10 92 78 03 	sts	0x0378, r1
    rtc_milliseconds = 0;
    2312:	10 92 74 03 	sts	0x0374, r1
    2316:	10 92 73 03 	sts	0x0373, r1
    rtc_seconds      = 0;
    231a:	10 92 7a 03 	sts	0x037A, r1
    rtc_minutes      = 0;
    231e:	10 92 71 03 	sts	0x0371, r1
    rtc_hours        = 0;
    2322:	10 92 79 03 	sts	0x0379, r1
    rtc_days         = 0;
    2326:	10 92 72 03 	sts	0x0372, r1

    rtc_running = ON;
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	80 93 5a 03 	sts	0x035A, r24
    Enable_interrupt();
    2330:	78 94       	sei
}
    2332:	0f 90       	pop	r0
    2334:	0f 90       	pop	r0
    2336:	cf 91       	pop	r28
    2338:	df 91       	pop	r29
    233a:	08 95       	ret

0000233c <__vector_9>:
//!
//------------------------------------------------------------------------------
#if (RTC_TIMER == 2)

ISR(TIMER2_COMP_vect)
{
    233c:	1f 92       	push	r1
    233e:	0f 92       	push	r0
    2340:	0f b6       	in	r0, 0x3f	; 63
    2342:	0f 92       	push	r0
    2344:	11 24       	eor	r1, r1
    2346:	2f 93       	push	r18
    2348:	8f 93       	push	r24
    234a:	9f 93       	push	r25
    234c:	af 93       	push	r26
    234e:	bf 93       	push	r27
    2350:	df 93       	push	r29
    2352:	cf 93       	push	r28
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62
    rtc_tics++;                     //-- Increments tics
    2358:	80 91 75 03 	lds	r24, 0x0375
    235c:	90 91 76 03 	lds	r25, 0x0376
    2360:	a0 91 77 03 	lds	r26, 0x0377
    2364:	b0 91 78 03 	lds	r27, 0x0378
    2368:	01 96       	adiw	r24, 0x01	; 1
    236a:	a1 1d       	adc	r26, r1
    236c:	b1 1d       	adc	r27, r1
    236e:	80 93 75 03 	sts	0x0375, r24
    2372:	90 93 76 03 	sts	0x0376, r25
    2376:	a0 93 77 03 	sts	0x0377, r26
    237a:	b0 93 78 03 	sts	0x0378, r27
    rtc_milliseconds++;             //-- Increments milli seconds
    237e:	80 91 73 03 	lds	r24, 0x0373
    2382:	90 91 74 03 	lds	r25, 0x0374
    2386:	01 96       	adiw	r24, 0x01	; 1
    2388:	90 93 74 03 	sts	0x0374, r25
    238c:	80 93 73 03 	sts	0x0373, r24
    
    if (rtc_milliseconds == 1000)
    2390:	80 91 73 03 	lds	r24, 0x0373
    2394:	90 91 74 03 	lds	r25, 0x0374
    2398:	23 e0       	ldi	r18, 0x03	; 3
    239a:	88 3e       	cpi	r24, 0xE8	; 232
    239c:	92 07       	cpc	r25, r18
    239e:	51 f5       	brne	.+84     	; 0x23f4 <__vector_9+0xb8>
    {
        rtc_milliseconds = 0;
    23a0:	10 92 74 03 	sts	0x0374, r1
    23a4:	10 92 73 03 	sts	0x0373, r1
        rtc_seconds++;              //-- Increments seconds
    23a8:	80 91 7a 03 	lds	r24, 0x037A
    23ac:	8f 5f       	subi	r24, 0xFF	; 255
    23ae:	80 93 7a 03 	sts	0x037A, r24

        if (rtc_seconds == 60)
    23b2:	80 91 7a 03 	lds	r24, 0x037A
    23b6:	8c 33       	cpi	r24, 0x3C	; 60
    23b8:	e9 f4       	brne	.+58     	; 0x23f4 <__vector_9+0xb8>
        {
            rtc_seconds = 0;
    23ba:	10 92 7a 03 	sts	0x037A, r1
            rtc_minutes++;          //-- Increments minutes
    23be:	80 91 71 03 	lds	r24, 0x0371
    23c2:	8f 5f       	subi	r24, 0xFF	; 255
    23c4:	80 93 71 03 	sts	0x0371, r24
            
            if (rtc_minutes == 60)
    23c8:	80 91 71 03 	lds	r24, 0x0371
    23cc:	8c 33       	cpi	r24, 0x3C	; 60
    23ce:	91 f4       	brne	.+36     	; 0x23f4 <__vector_9+0xb8>
            {
                rtc_minutes = 0;
    23d0:	10 92 71 03 	sts	0x0371, r1
                rtc_hours++;        //-- Increments hours
    23d4:	80 91 79 03 	lds	r24, 0x0379
    23d8:	8f 5f       	subi	r24, 0xFF	; 255
    23da:	80 93 79 03 	sts	0x0379, r24
                        
                if (rtc_hours == 24)
    23de:	80 91 79 03 	lds	r24, 0x0379
    23e2:	88 31       	cpi	r24, 0x18	; 24
    23e4:	39 f4       	brne	.+14     	; 0x23f4 <__vector_9+0xb8>
                {
                    rtc_hours = 0;
    23e6:	10 92 79 03 	sts	0x0379, r1
                    rtc_days++;     //-- Increments days
    23ea:	80 91 72 03 	lds	r24, 0x0372
    23ee:	8f 5f       	subi	r24, 0xFF	; 255
    23f0:	80 93 72 03 	sts	0x0372, r24
                }
            }
        }
    }
}
    23f4:	cf 91       	pop	r28
    23f6:	df 91       	pop	r29
    23f8:	bf 91       	pop	r27
    23fa:	af 91       	pop	r26
    23fc:	9f 91       	pop	r25
    23fe:	8f 91       	pop	r24
    2400:	2f 91       	pop	r18
    2402:	0f 90       	pop	r0
    2404:	0f be       	out	0x3f, r0	; 63
    2406:	0f 90       	pop	r0
    2408:	1f 90       	pop	r1
    240a:	18 95       	reti

0000240c <uart_rx_get_3_data>:
//! @param  none
//!
//! @return UART pin value sampled 3 times
//------------------------------------------------------------------------------
Bool uart_rx_get_3_data (void)
{
    240c:	df 93       	push	r29
    240e:	cf 93       	push	r28
    2410:	0f 92       	push	r0
    2412:	cd b7       	in	r28, 0x3d	; 61
    2414:	de b7       	in	r29, 0x3e	; 62
U8 u8_temp = 0;
    2416:	19 82       	std	Y+1, r1	; 0x01

#if ((USE_UART == UART_0) || (USE_UART == UART_1))
    u8_temp = Uart_rx_get_3_data();
    2418:	e9 e2       	ldi	r30, 0x29	; 41
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	90 81       	ld	r25, Z
    241e:	e9 e2       	ldi	r30, 0x29	; 41
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	80 81       	ld	r24, Z
    2424:	98 23       	and	r25, r24
    2426:	e9 e2       	ldi	r30, 0x29	; 41
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	89 23       	and	r24, r25
    242e:	88 2f       	mov	r24, r24
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	84 70       	andi	r24, 0x04	; 4
    2434:	90 70       	andi	r25, 0x00	; 0
    2436:	95 95       	asr	r25
    2438:	87 95       	ror	r24
    243a:	95 95       	asr	r25
    243c:	87 95       	ror	r24
    243e:	89 83       	std	Y+1, r24	; 0x01
    }
#   else
#       error USE_UART definition is not referenced in "uart_drv.h" file
#endif

    return u8_temp;
    2440:	89 81       	ldd	r24, Y+1	; 0x01
}
    2442:	0f 90       	pop	r0
    2444:	cf 91       	pop	r28
    2446:	df 91       	pop	r29
    2448:	08 95       	ret

0000244a <uart_rx_get_data>:
//! @param  none
//!
//! @return UART pin value
//------------------------------------------------------------------------------
Bool uart_rx_get_data (void)
{
    244a:	df 93       	push	r29
    244c:	cf 93       	push	r28
    244e:	0f 92       	push	r0
    2450:	cd b7       	in	r28, 0x3d	; 61
    2452:	de b7       	in	r29, 0x3e	; 62
U8 u8_temp = 0;
    2454:	19 82       	std	Y+1, r1	; 0x01

#if ((USE_UART == UART_0) || (USE_UART == UART_1))
    u8_temp = Uart_rx_get_data();
    2456:	e9 e2       	ldi	r30, 0x29	; 41
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	80 81       	ld	r24, Z
    245c:	88 2f       	mov	r24, r24
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	84 70       	andi	r24, 0x04	; 4
    2462:	90 70       	andi	r25, 0x00	; 0
    2464:	95 95       	asr	r25
    2466:	87 95       	ror	r24
    2468:	95 95       	asr	r25
    246a:	87 95       	ror	r24
    246c:	89 83       	std	Y+1, r24	; 0x01
    }
#   else
#       error USE_UART definition is not referenced in "uart_drv.h" file
#endif

    return u8_temp;
    246e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2470:	0f 90       	pop	r0
    2472:	cf 91       	pop	r28
    2474:	df 91       	pop	r29
    2476:	08 95       	ret

00002478 <uart_init>:
//!         ==0: research of timing failed
//!         ==1: baudrate performed
//!
//------------------------------------------------------------------------------
U8 uart_init (U8 mode, U32 baudrate)
{
    2478:	df 93       	push	r29
    247a:	cf 93       	push	r28
    247c:	00 d0       	rcall	.+0      	; 0x247e <uart_init+0x6>
    247e:	00 d0       	rcall	.+0      	; 0x2480 <uart_init+0x8>
    2480:	00 d0       	rcall	.+0      	; 0x2482 <uart_init+0xa>
    2482:	cd b7       	in	r28, 0x3d	; 61
    2484:	de b7       	in	r29, 0x3e	; 62
    2486:	89 83       	std	Y+1, r24	; 0x01
    2488:	4a 83       	std	Y+2, r20	; 0x02
    248a:	5b 83       	std	Y+3, r21	; 0x03
    248c:	6c 83       	std	Y+4, r22	; 0x04
    248e:	7d 83       	std	Y+5, r23	; 0x05
    Uart_clear();       // Flush, Disable and Reset UART
    2490:	e9 ec       	ldi	r30, 0xC9	; 201
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	10 82       	st	Z, r1
    2496:	aa ec       	ldi	r26, 0xCA	; 202
    2498:	b0 e0       	ldi	r27, 0x00	; 0
    249a:	ee ec       	ldi	r30, 0xCE	; 206
    249c:	f0 e0       	ldi	r31, 0x00	; 0
    249e:	80 81       	ld	r24, Z
    24a0:	8c 93       	st	X, r24
    24a2:	e8 ec       	ldi	r30, 0xC8	; 200
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	80 e4       	ldi	r24, 0x40	; 64
    24a8:	80 83       	st	Z, r24
    24aa:	ea ec       	ldi	r30, 0xCA	; 202
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	86 e0       	ldi	r24, 0x06	; 6
    24b0:	80 83       	st	Z, r24
    24b2:	ed ec       	ldi	r30, 0xCD	; 205
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	10 82       	st	Z, r1
    24b8:	ec ec       	ldi	r30, 0xCC	; 204
    24ba:	f0 e0       	ldi	r31, 0x00	; 0
    24bc:	10 82       	st	Z, r1
    if (Uart_set_baudrate(baudrate) == 0) return 0;  //!<  c.f. macro in "uart_drv.h"
    24be:	ed ec       	ldi	r30, 0xCD	; 205
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	10 82       	st	Z, r1
    24c4:	ec ec       	ldi	r30, 0xCC	; 204
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	89 e1       	ldi	r24, 0x19	; 25
    24ca:	80 83       	st	Z, r24
    24cc:	a8 ec       	ldi	r26, 0xC8	; 200
    24ce:	b0 e0       	ldi	r27, 0x00	; 0
    24d0:	e8 ec       	ldi	r30, 0xC8	; 200
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	80 81       	ld	r24, Z
    24d6:	82 60       	ori	r24, 0x02	; 2
    24d8:	8c 93       	st	X, r24
    24da:	8c 91       	ld	r24, X
    24dc:	88 23       	and	r24, r24
    24de:	11 f4       	brne	.+4      	; 0x24e4 <uart_init+0x6c>
    24e0:	1e 82       	std	Y+6, r1	; 0x06
    24e2:	35 c0       	rjmp	.+106    	; 0x254e <uart_init+0xd6>
    Uart_hw_init(mode);     //!<  c.f. macro in "uart_drv.h"
    24e4:	a8 ec       	ldi	r26, 0xC8	; 200
    24e6:	b0 e0       	ldi	r27, 0x00	; 0
    24e8:	e8 ec       	ldi	r30, 0xC8	; 200
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	80 81       	ld	r24, Z
    24ee:	80 62       	ori	r24, 0x20	; 32
    24f0:	8c 93       	st	X, r24
    24f2:	a9 ec       	ldi	r26, 0xC9	; 201
    24f4:	b0 e0       	ldi	r27, 0x00	; 0
    24f6:	e9 ec       	ldi	r30, 0xC9	; 201
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	80 81       	ld	r24, Z
    24fc:	8b 7f       	andi	r24, 0xFB	; 251
    24fe:	8c 93       	st	X, r24
    2500:	a1 ec       	ldi	r26, 0xC1	; 193
    2502:	b0 e0       	ldi	r27, 0x00	; 0
    2504:	e1 ec       	ldi	r30, 0xC1	; 193
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	80 81       	ld	r24, Z
    250a:	98 2f       	mov	r25, r24
    250c:	89 81       	ldd	r24, Y+1	; 0x01
    250e:	84 70       	andi	r24, 0x04	; 4
    2510:	89 2b       	or	r24, r25
    2512:	8c 93       	st	X, r24
    2514:	ea ec       	ldi	r30, 0xCA	; 202
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	89 81       	ldd	r24, Y+1	; 0x01
    251a:	88 73       	andi	r24, 0x38	; 56
    251c:	80 83       	st	Z, r24
    251e:	aa ec       	ldi	r26, 0xCA	; 202
    2520:	b0 e0       	ldi	r27, 0x00	; 0
    2522:	ea ec       	ldi	r30, 0xCA	; 202
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	80 81       	ld	r24, Z
    2528:	28 2f       	mov	r18, r24
    252a:	89 81       	ldd	r24, Y+1	; 0x01
    252c:	88 2f       	mov	r24, r24
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	83 70       	andi	r24, 0x03	; 3
    2532:	90 70       	andi	r25, 0x00	; 0
    2534:	88 0f       	add	r24, r24
    2536:	99 1f       	adc	r25, r25
    2538:	82 2b       	or	r24, r18
    253a:	8c 93       	st	X, r24
    Uart_enable();          //!<  c.f. macro in "uart_drv.h"
    253c:	a9 ec       	ldi	r26, 0xC9	; 201
    253e:	b0 e0       	ldi	r27, 0x00	; 0
    2540:	e9 ec       	ldi	r30, 0xC9	; 201
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	80 81       	ld	r24, Z
    2546:	88 61       	ori	r24, 0x18	; 24
    2548:	8c 93       	st	X, r24
    return (1);
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	8e 83       	std	Y+6, r24	; 0x06
    254e:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2550:	26 96       	adiw	r28, 0x06	; 6
    2552:	0f b6       	in	r0, 0x3f	; 63
    2554:	f8 94       	cli
    2556:	de bf       	out	0x3e, r29	; 62
    2558:	0f be       	out	0x3f, r0	; 63
    255a:	cd bf       	out	0x3d, r28	; 61
    255c:	cf 91       	pop	r28
    255e:	df 91       	pop	r29
    2560:	08 95       	ret

00002562 <uart_test_hit>:
//!         ==0: Nothing has been received
//!         ==1: A character has been received
//!
//------------------------------------------------------------------------------
U8 uart_test_hit (void)
{
    2562:	df 93       	push	r29
    2564:	cf 93       	push	r28
    2566:	cd b7       	in	r28, 0x3d	; 61
    2568:	de b7       	in	r29, 0x3e	; 62
    return (Uart_rx_ready());
    256a:	e8 ec       	ldi	r30, 0xC8	; 200
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	88 1f       	adc	r24, r24
    2572:	88 27       	eor	r24, r24
    2574:	88 1f       	adc	r24, r24
}
    2576:	cf 91       	pop	r28
    2578:	df 91       	pop	r29
    257a:	08 95       	ret

0000257c <uart_putchar>:
//!
//! @return character sent
//!
//------------------------------------------------------------------------------
U8 uart_putchar (U8 ch)
{
    257c:	df 93       	push	r29
    257e:	cf 93       	push	r28
    2580:	0f 92       	push	r0
    2582:	cd b7       	in	r28, 0x3d	; 61
    2584:	de b7       	in	r29, 0x3e	; 62
    2586:	89 83       	std	Y+1, r24	; 0x01
    while(!Uart_tx_ready());
    2588:	e8 ec       	ldi	r30, 0xC8	; 200
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	80 81       	ld	r24, Z
    258e:	88 2f       	mov	r24, r24
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	80 72       	andi	r24, 0x20	; 32
    2594:	90 70       	andi	r25, 0x00	; 0
    2596:	95 95       	asr	r25
    2598:	87 95       	ror	r24
    259a:	95 95       	asr	r25
    259c:	87 95       	ror	r24
    259e:	95 95       	asr	r25
    25a0:	87 95       	ror	r24
    25a2:	95 95       	asr	r25
    25a4:	87 95       	ror	r24
    25a6:	95 95       	asr	r25
    25a8:	87 95       	ror	r24
    25aa:	00 97       	sbiw	r24, 0x00	; 0
    25ac:	69 f3       	breq	.-38     	; 0x2588 <uart_putchar+0xc>
    Uart_set_tx_busy();     // Set Busy flag before sending (always)
    Uart_send_byte(ch);
    25ae:	ee ec       	ldi	r30, 0xCE	; 206
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	89 81       	ldd	r24, Y+1	; 0x01
    25b4:	80 83       	st	Z, r24
    return (ch);
    25b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    25b8:	0f 90       	pop	r0
    25ba:	cf 91       	pop	r28
    25bc:	df 91       	pop	r29
    25be:	08 95       	ret

000025c0 <uart_getchar>:
//!
//! @return read (received) character on the UART
//!
//------------------------------------------------------------------------------
U8 uart_getchar (void)
{
    25c0:	df 93       	push	r29
    25c2:	cf 93       	push	r28
    25c4:	0f 92       	push	r0
    25c6:	cd b7       	in	r28, 0x3d	; 61
    25c8:	de b7       	in	r29, 0x3e	; 62
    U8 ch;

    while(!Uart_rx_ready());
    25ca:	e8 ec       	ldi	r30, 0xC8	; 200
    25cc:	f0 e0       	ldi	r31, 0x00	; 0
    25ce:	80 81       	ld	r24, Z
    25d0:	88 1f       	adc	r24, r24
    25d2:	88 27       	eor	r24, r24
    25d4:	88 1f       	adc	r24, r24
    25d6:	88 2f       	mov	r24, r24
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	90 70       	andi	r25, 0x00	; 0
    25dc:	00 97       	sbiw	r24, 0x00	; 0
    25de:	a9 f3       	breq	.-22     	; 0x25ca <uart_getchar+0xa>
    ch = Uart_get_byte();
    25e0:	ee ec       	ldi	r30, 0xCE	; 206
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	80 81       	ld	r24, Z
    25e6:	89 83       	std	Y+1, r24	; 0x01
    Uart_ack_rx_byte();
    return ch;
    25e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    25ea:	0f 90       	pop	r0
    25ec:	cf 91       	pop	r28
    25ee:	df 91       	pop	r29
    25f0:	08 95       	ret

000025f2 <uart_put_string>:
//! @return (none)
//!
//------------------------------------------------------------------------------
#ifndef REDUCED_UART_LIB
void uart_put_string (U8 *data_string)
    {
    25f2:	df 93       	push	r29
    25f4:	cf 93       	push	r28
    25f6:	00 d0       	rcall	.+0      	; 0x25f8 <uart_put_string+0x6>
    25f8:	cd b7       	in	r28, 0x3d	; 61
    25fa:	de b7       	in	r29, 0x3e	; 62
    25fc:	9a 83       	std	Y+2, r25	; 0x02
    25fe:	89 83       	std	Y+1, r24	; 0x01
    2600:	0b c0       	rjmp	.+22     	; 0x2618 <uart_put_string+0x26>
    while(*data_string) uart_putchar (*data_string++);
    2602:	e9 81       	ldd	r30, Y+1	; 0x01
    2604:	fa 81       	ldd	r31, Y+2	; 0x02
    2606:	20 81       	ld	r18, Z
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	9a 81       	ldd	r25, Y+2	; 0x02
    260c:	01 96       	adiw	r24, 0x01	; 1
    260e:	9a 83       	std	Y+2, r25	; 0x02
    2610:	89 83       	std	Y+1, r24	; 0x01
    2612:	82 2f       	mov	r24, r18
    2614:	0e 94 be 12 	call	0x257c	; 0x257c <uart_putchar>
    2618:	e9 81       	ldd	r30, Y+1	; 0x01
    261a:	fa 81       	ldd	r31, Y+2	; 0x02
    261c:	80 81       	ld	r24, Z
    261e:	88 23       	and	r24, r24
    2620:	81 f7       	brne	.-32     	; 0x2602 <uart_put_string+0x10>
    }
    2622:	0f 90       	pop	r0
    2624:	0f 90       	pop	r0
    2626:	cf 91       	pop	r28
    2628:	df 91       	pop	r29
    262a:	08 95       	ret

0000262c <uart_mini_printf>:
//! Return: 0 = O.K.
//!
//------------------------------------------------------------------------------
#ifndef REDUCED_UART_LIB
U8 uart_mini_printf(char *format, ...)
{
    262c:	0f 93       	push	r16
    262e:	1f 93       	push	r17
    2630:	df 93       	push	r29
    2632:	cf 93       	push	r28
    2634:	cd b7       	in	r28, 0x3d	; 61
    2636:	de b7       	in	r29, 0x3e	; 62
    2638:	af 97       	sbiw	r28, 0x2f	; 47
    263a:	0f b6       	in	r0, 0x3f	; 63
    263c:	f8 94       	cli
    263e:	de bf       	out	0x3e, r29	; 62
    2640:	0f be       	out	0x3f, r0	; 63
    2642:	cd bf       	out	0x3d, r28	; 61
    S16     s16_val;
    S32     s32_val;
    U16     u16_val;
    U32     u32_val;

    long_flag = FALSE;
    2644:	1f 86       	std	Y+15, r1	; 0x0f
    alt_p_c = FALSE;
    2646:	1e 86       	std	Y+14, r1	; 0x0e
    min_size = DATA_BUF_LEN-1;
    2648:	8b e0       	ldi	r24, 0x0B	; 11
    264a:	88 8b       	std	Y+16, r24	; 0x10

    va_start(arg_ptr, format);   // make arg_ptr point to the first unnamed arg
    264c:	ce 01       	movw	r24, r28
    264e:	c8 96       	adiw	r24, 0x38	; 56
    2650:	99 8f       	std	Y+25, r25	; 0x19
    2652:	88 8f       	std	Y+24, r24	; 0x18
    for (p = (U8 *) format; *p; p++)
    2654:	8e a9       	ldd	r24, Y+54	; 0x36
    2656:	9f a9       	ldd	r25, Y+55	; 0x37
    2658:	9f 8b       	std	Y+23, r25	; 0x17
    265a:	8e 8b       	std	Y+22, r24	; 0x16
    265c:	73 c3       	rjmp	.+1766   	; 0x2d44 <uart_mini_printf+0x718>
    {
        if ((*p == '%') || (alt_p_c == TRUE))
    265e:	ee 89       	ldd	r30, Y+22	; 0x16
    2660:	ff 89       	ldd	r31, Y+23	; 0x17
    2662:	80 81       	ld	r24, Z
    2664:	85 32       	cpi	r24, 0x25	; 37
    2666:	21 f0       	breq	.+8      	; 0x2670 <uart_mini_printf+0x44>
    2668:	8e 85       	ldd	r24, Y+14	; 0x0e
    266a:	81 30       	cpi	r24, 0x01	; 1
    266c:	09 f0       	breq	.+2      	; 0x2670 <uart_mini_printf+0x44>
    266e:	47 c0       	rjmp	.+142    	; 0x26fe <uart_mini_printf+0xd2>
        {
            p++;
    2670:	8e 89       	ldd	r24, Y+22	; 0x16
    2672:	9f 89       	ldd	r25, Y+23	; 0x17
    2674:	01 96       	adiw	r24, 0x01	; 1
    2676:	9f 8b       	std	Y+23, r25	; 0x17
    2678:	8e 8b       	std	Y+22, r24	; 0x16
            uart_putchar(*p);
            alt_p_c = FALSE;
            long_flag = FALSE;
            continue;   // "switch (*p)" section skipped
        }
        switch (*p)
    267a:	ee 89       	ldd	r30, Y+22	; 0x16
    267c:	ff 89       	ldd	r31, Y+23	; 0x17
    267e:	80 81       	ld	r24, Z
    2680:	28 2f       	mov	r18, r24
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	3f a7       	std	Y+47, r19	; 0x2f
    2686:	2e a7       	std	Y+46, r18	; 0x2e
    2688:	8e a5       	ldd	r24, Y+46	; 0x2e
    268a:	9f a5       	ldd	r25, Y+47	; 0x2f
    268c:	84 36       	cpi	r24, 0x64	; 100
    268e:	91 05       	cpc	r25, r1
    2690:	09 f4       	brne	.+2      	; 0x2694 <uart_mini_printf+0x68>
    2692:	96 c0       	rjmp	.+300    	; 0x27c0 <uart_mini_printf+0x194>
    2694:	2e a5       	ldd	r18, Y+46	; 0x2e
    2696:	3f a5       	ldd	r19, Y+47	; 0x2f
    2698:	25 36       	cpi	r18, 0x65	; 101
    269a:	31 05       	cpc	r19, r1
    269c:	94 f4       	brge	.+36     	; 0x26c2 <uart_mini_printf+0x96>
    269e:	8e a5       	ldd	r24, Y+46	; 0x2e
    26a0:	9f a5       	ldd	r25, Y+47	; 0x2f
    26a2:	88 35       	cpi	r24, 0x58	; 88
    26a4:	91 05       	cpc	r25, r1
    26a6:	09 f4       	brne	.+2      	; 0x26aa <uart_mini_printf+0x7e>
    26a8:	fc c1       	rjmp	.+1016   	; 0x2aa2 <uart_mini_printf+0x476>
    26aa:	2e a5       	ldd	r18, Y+46	; 0x2e
    26ac:	3f a5       	ldd	r19, Y+47	; 0x2f
    26ae:	23 36       	cpi	r18, 0x63	; 99
    26b0:	31 05       	cpc	r19, r1
    26b2:	69 f1       	breq	.+90     	; 0x270e <uart_mini_printf+0xe2>
    26b4:	8e a5       	ldd	r24, Y+46	; 0x2e
    26b6:	9f a5       	ldd	r25, Y+47	; 0x2f
    26b8:	80 33       	cpi	r24, 0x30	; 48
    26ba:	91 05       	cpc	r25, r1
    26bc:	09 f4       	brne	.+2      	; 0x26c0 <uart_mini_printf+0x94>
    26be:	bb c2       	rjmp	.+1398   	; 0x2c36 <uart_mini_printf+0x60a>
    26c0:	2d c3       	rjmp	.+1626   	; 0x2d1c <uart_mini_printf+0x6f0>
    26c2:	2e a5       	ldd	r18, Y+46	; 0x2e
    26c4:	3f a5       	ldd	r19, Y+47	; 0x2f
    26c6:	23 37       	cpi	r18, 0x73	; 115
    26c8:	31 05       	cpc	r19, r1
    26ca:	e9 f1       	breq	.+122    	; 0x2746 <uart_mini_printf+0x11a>
    26cc:	8e a5       	ldd	r24, Y+46	; 0x2e
    26ce:	9f a5       	ldd	r25, Y+47	; 0x2f
    26d0:	84 37       	cpi	r24, 0x74	; 116
    26d2:	91 05       	cpc	r25, r1
    26d4:	3c f4       	brge	.+14     	; 0x26e4 <uart_mini_printf+0xb8>
    26d6:	2e a5       	ldd	r18, Y+46	; 0x2e
    26d8:	3f a5       	ldd	r19, Y+47	; 0x2f
    26da:	2c 36       	cpi	r18, 0x6C	; 108
    26dc:	31 05       	cpc	r19, r1
    26de:	09 f4       	brne	.+2      	; 0x26e2 <uart_mini_printf+0xb6>
    26e0:	5c c0       	rjmp	.+184    	; 0x279a <uart_mini_printf+0x16e>
    26e2:	1c c3       	rjmp	.+1592   	; 0x2d1c <uart_mini_printf+0x6f0>
    26e4:	8e a5       	ldd	r24, Y+46	; 0x2e
    26e6:	9f a5       	ldd	r25, Y+47	; 0x2f
    26e8:	85 37       	cpi	r24, 0x75	; 117
    26ea:	91 05       	cpc	r25, r1
    26ec:	09 f4       	brne	.+2      	; 0x26f0 <uart_mini_printf+0xc4>
    26ee:	36 c1       	rjmp	.+620    	; 0x295c <uart_mini_printf+0x330>
    26f0:	2e a5       	ldd	r18, Y+46	; 0x2e
    26f2:	3f a5       	ldd	r19, Y+47	; 0x2f
    26f4:	28 37       	cpi	r18, 0x78	; 120
    26f6:	31 05       	cpc	r19, r1
    26f8:	09 f4       	brne	.+2      	; 0x26fc <uart_mini_printf+0xd0>
    26fa:	d3 c1       	rjmp	.+934    	; 0x2aa2 <uart_mini_printf+0x476>
    26fc:	0f c3       	rjmp	.+1566   	; 0x2d1c <uart_mini_printf+0x6f0>
        {
            p++;
        }
        else
        {
            uart_putchar(*p);
    26fe:	ee 89       	ldd	r30, Y+22	; 0x16
    2700:	ff 89       	ldd	r31, Y+23	; 0x17
    2702:	80 81       	ld	r24, Z
    2704:	0e 94 be 12 	call	0x257c	; 0x257c <uart_putchar>
            alt_p_c = FALSE;
    2708:	1e 86       	std	Y+14, r1	; 0x0e
            long_flag = FALSE;
    270a:	1f 86       	std	Y+15, r1	; 0x0f
    270c:	16 c3       	rjmp	.+1580   	; 0x2d3a <uart_mini_printf+0x70e>
            continue;   // "switch (*p)" section skipped
        }
        switch (*p)
        {
            case 'c':
                if (long_flag == TRUE)      // ERROR: 'l' before any 'c'
    270e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2710:	81 30       	cpi	r24, 0x01	; 1
    2712:	39 f4       	brne	.+14     	; 0x2722 <uart_mini_printf+0xf6>
                {
                    uart_putchar('l');
    2714:	8c e6       	ldi	r24, 0x6C	; 108
    2716:	0e 94 be 12 	call	0x257c	; 0x257c <uart_putchar>
                    uart_putchar('c');
    271a:	83 e6       	ldi	r24, 0x63	; 99
    271c:	0e 94 be 12 	call	0x257c	; 0x257c <uart_putchar>
    2720:	0d c0       	rjmp	.+26     	; 0x273c <uart_mini_printf+0x110>
                }
                else
                {
                    s8_val = (S8)(va_arg(arg_ptr, int));    // s8_val = (S8)(va_arg(arg_ptr, S16));
    2722:	28 8d       	ldd	r18, Y+24	; 0x18
    2724:	39 8d       	ldd	r19, Y+25	; 0x19
    2726:	c9 01       	movw	r24, r18
    2728:	02 96       	adiw	r24, 0x02	; 2
    272a:	99 8f       	std	Y+25, r25	; 0x19
    272c:	88 8f       	std	Y+24, r24	; 0x18
    272e:	f9 01       	movw	r30, r18
    2730:	80 81       	ld	r24, Z
    2732:	91 81       	ldd	r25, Z+1	; 0x01
    2734:	8d 87       	std	Y+13, r24	; 0x0d
                    uart_putchar((U8)(s8_val));
    2736:	8d 85       	ldd	r24, Y+13	; 0x0d
    2738:	0e 94 be 12 	call	0x257c	; 0x257c <uart_putchar>
                }
                // Clean up
                min_size = DATA_BUF_LEN-1;
    273c:	8b e0       	ldi	r24, 0x0B	; 11
    273e:	88 8b       	std	Y+16, r24	; 0x10
                alt_p_c = FALSE;
    2740:	1e 86       	std	Y+14, r1	; 0x0e
                long_flag = FALSE;
    2742:	1f 86       	std	Y+15, r1	; 0x0f
    2744:	fa c2       	rjmp	.+1524   	; 0x2d3a <uart_mini_printf+0x70e>
                break; // case 'c'
                
            case 's':
                if (long_flag == TRUE)      // ERROR: 'l' before any 's'
    2746:	8f 85       	ldd	r24, Y+15	; 0x0f
    2748:	81 30       	cpi	r24, 0x01	; 1
    274a:	39 f4       	brne	.+14     	; 0x275a <uart_mini_printf+0x12e>
                {
                    uart_putchar('l');
    274c:	8c e6       	ldi	r24, 0x6C	; 108
    274e:	0e 94 be 12 	call	0x257c	; 0x257c <uart_putchar>
                    uart_putchar('s');
    2752:	83 e7       	ldi	r24, 0x73	; 115
    2754:	0e 94 be 12 	call	0x257c	; 0x257c <uart_putchar>
    2758:	1b c0       	rjmp	.+54     	; 0x2790 <uart_mini_printf+0x164>
                }
                else
                {
                    for (sval = va_arg(arg_ptr, U8 *); *sval; sval++)
    275a:	28 8d       	ldd	r18, Y+24	; 0x18
    275c:	39 8d       	ldd	r19, Y+25	; 0x19
    275e:	c9 01       	movw	r24, r18
    2760:	02 96       	adiw	r24, 0x02	; 2
    2762:	99 8f       	std	Y+25, r25	; 0x19
    2764:	88 8f       	std	Y+24, r24	; 0x18
    2766:	f9 01       	movw	r30, r18
    2768:	80 81       	ld	r24, Z
    276a:	91 81       	ldd	r25, Z+1	; 0x01
    276c:	9d 8b       	std	Y+21, r25	; 0x15
    276e:	8c 8b       	std	Y+20, r24	; 0x14
    2770:	0a c0       	rjmp	.+20     	; 0x2786 <uart_mini_printf+0x15a>
                    {
                        uart_putchar(*sval);
    2772:	ec 89       	ldd	r30, Y+20	; 0x14
    2774:	fd 89       	ldd	r31, Y+21	; 0x15
    2776:	80 81       	ld	r24, Z
    2778:	0e 94 be 12 	call	0x257c	; 0x257c <uart_putchar>
                    uart_putchar('l');
                    uart_putchar('s');
                }
                else
                {
                    for (sval = va_arg(arg_ptr, U8 *); *sval; sval++)
    277c:	8c 89       	ldd	r24, Y+20	; 0x14
    277e:	9d 89       	ldd	r25, Y+21	; 0x15
    2780:	01 96       	adiw	r24, 0x01	; 1
    2782:	9d 8b       	std	Y+21, r25	; 0x15
    2784:	8c 8b       	std	Y+20, r24	; 0x14
    2786:	ec 89       	ldd	r30, Y+20	; 0x14
    2788:	fd 89       	ldd	r31, Y+21	; 0x15
    278a:	80 81       	ld	r24, Z
    278c:	88 23       	and	r24, r24
    278e:	89 f7       	brne	.-30     	; 0x2772 <uart_mini_printf+0x146>
                    {
                        uart_putchar(*sval);
                    }
                }
                // Clean up
                min_size = DATA_BUF_LEN-1;
    2790:	8b e0       	ldi	r24, 0x0B	; 11
    2792:	88 8b       	std	Y+16, r24	; 0x10
                alt_p_c = FALSE;
    2794:	1e 86       	std	Y+14, r1	; 0x0e
                long_flag = FALSE;
    2796:	1f 86       	std	Y+15, r1	; 0x0f
    2798:	d0 c2       	rjmp	.+1440   	; 0x2d3a <uart_mini_printf+0x70e>
                break;  // case 's'
                
            case 'l':  // It is not the number "ONE" but the lower case of "L" character
                if (long_flag == TRUE)      // ERROR: two consecutive 'l'
    279a:	8f 85       	ldd	r24, Y+15	; 0x0f
    279c:	81 30       	cpi	r24, 0x01	; 1
    279e:	31 f4       	brne	.+12     	; 0x27ac <uart_mini_printf+0x180>
                {
                    uart_putchar('l');
    27a0:	8c e6       	ldi	r24, 0x6C	; 108
    27a2:	0e 94 be 12 	call	0x257c	; 0x257c <uart_putchar>
                    alt_p_c = FALSE;
    27a6:	1e 86       	std	Y+14, r1	; 0x0e
                    long_flag = FALSE;
    27a8:	1f 86       	std	Y+15, r1	; 0x0f
    27aa:	04 c0       	rjmp	.+8      	; 0x27b4 <uart_mini_printf+0x188>
                }
                else
                {
                    alt_p_c = TRUE;
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	8e 87       	std	Y+14, r24	; 0x0e
                    long_flag = TRUE;
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	8f 87       	std	Y+15, r24	; 0x0f
                }
                p--;
    27b4:	8e 89       	ldd	r24, Y+22	; 0x16
    27b6:	9f 89       	ldd	r25, Y+23	; 0x17
    27b8:	01 97       	sbiw	r24, 0x01	; 1
    27ba:	9f 8b       	std	Y+23, r25	; 0x17
    27bc:	8e 8b       	std	Y+22, r24	; 0x16
    27be:	bd c2       	rjmp	.+1402   	; 0x2d3a <uart_mini_printf+0x70e>
                break;  // case 'l'
                
            case 'd':
                n_sign  = FALSE;               
    27c0:	1a 8a       	std	Y+18, r1	; 0x12
                for(data_idx = 0; data_idx < (DATA_BUF_LEN-1); data_idx++)
    27c2:	19 8a       	std	Y+17, r1	; 0x11
    27c4:	0d c0       	rjmp	.+26     	; 0x27e0 <uart_mini_printf+0x1b4>
                {
                    data_buf[data_idx] = '0';
    27c6:	89 89       	ldd	r24, Y+17	; 0x11
    27c8:	28 2f       	mov	r18, r24
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	ce 01       	movw	r24, r28
    27ce:	4a 96       	adiw	r24, 0x1a	; 26
    27d0:	fc 01       	movw	r30, r24
    27d2:	e2 0f       	add	r30, r18
    27d4:	f3 1f       	adc	r31, r19
    27d6:	80 e3       	ldi	r24, 0x30	; 48
    27d8:	80 83       	st	Z, r24
                p--;
                break;  // case 'l'
                
            case 'd':
                n_sign  = FALSE;               
                for(data_idx = 0; data_idx < (DATA_BUF_LEN-1); data_idx++)
    27da:	89 89       	ldd	r24, Y+17	; 0x11
    27dc:	8f 5f       	subi	r24, 0xFF	; 255
    27de:	89 8b       	std	Y+17, r24	; 0x11
    27e0:	89 89       	ldd	r24, Y+17	; 0x11
    27e2:	8b 30       	cpi	r24, 0x0B	; 11
    27e4:	80 f3       	brcs	.-32     	; 0x27c6 <uart_mini_printf+0x19a>
                {
                    data_buf[data_idx] = '0';
                }
                data_buf[DATA_BUF_LEN-1] = 0;
    27e6:	1d a2       	std	Y+37, r1	; 0x25
                data_idx = DATA_BUF_LEN - 2;
    27e8:	8a e0       	ldi	r24, 0x0A	; 10
    27ea:	89 8b       	std	Y+17, r24	; 0x11
                if (long_flag)  // 32-bit
    27ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    27ee:	88 23       	and	r24, r24
    27f0:	09 f4       	brne	.+2      	; 0x27f4 <uart_mini_printf+0x1c8>
    27f2:	5d c0       	rjmp	.+186    	; 0x28ae <uart_mini_printf+0x282>
                {
                    s32_val = va_arg(arg_ptr, S32);
    27f4:	28 8d       	ldd	r18, Y+24	; 0x18
    27f6:	39 8d       	ldd	r19, Y+25	; 0x19
    27f8:	c9 01       	movw	r24, r18
    27fa:	04 96       	adiw	r24, 0x04	; 4
    27fc:	99 8f       	std	Y+25, r25	; 0x19
    27fe:	88 8f       	std	Y+24, r24	; 0x18
    2800:	f9 01       	movw	r30, r18
    2802:	80 81       	ld	r24, Z
    2804:	91 81       	ldd	r25, Z+1	; 0x01
    2806:	a2 81       	ldd	r26, Z+2	; 0x02
    2808:	b3 81       	ldd	r27, Z+3	; 0x03
    280a:	8f 83       	std	Y+7, r24	; 0x07
    280c:	98 87       	std	Y+8, r25	; 0x08
    280e:	a9 87       	std	Y+9, r26	; 0x09
    2810:	ba 87       	std	Y+10, r27	; 0x0a
                    if (s32_val < 0)
    2812:	8f 81       	ldd	r24, Y+7	; 0x07
    2814:	98 85       	ldd	r25, Y+8	; 0x08
    2816:	a9 85       	ldd	r26, Y+9	; 0x09
    2818:	ba 85       	ldd	r27, Y+10	; 0x0a
    281a:	bb 23       	and	r27, r27
    281c:	8c f4       	brge	.+34     	; 0x2840 <uart_mini_printf+0x214>
                    {
                        n_sign = TRUE;
    281e:	81 e0       	ldi	r24, 0x01	; 1
    2820:	8a 8b       	std	Y+18, r24	; 0x12
                        s32_val  = -s32_val;
    2822:	8f 81       	ldd	r24, Y+7	; 0x07
    2824:	98 85       	ldd	r25, Y+8	; 0x08
    2826:	a9 85       	ldd	r26, Y+9	; 0x09
    2828:	ba 85       	ldd	r27, Y+10	; 0x0a
    282a:	b0 95       	com	r27
    282c:	a0 95       	com	r26
    282e:	90 95       	com	r25
    2830:	81 95       	neg	r24
    2832:	9f 4f       	sbci	r25, 0xFF	; 255
    2834:	af 4f       	sbci	r26, 0xFF	; 255
    2836:	bf 4f       	sbci	r27, 0xFF	; 255
    2838:	8f 83       	std	Y+7, r24	; 0x07
    283a:	98 87       	std	Y+8, r25	; 0x08
    283c:	a9 87       	std	Y+9, r26	; 0x09
    283e:	ba 87       	std	Y+10, r27	; 0x0a
                    }
                    while (1)
                    {
                        data_buf[data_idx] = s32_val % 10 + '0';
    2840:	89 89       	ldd	r24, Y+17	; 0x11
    2842:	08 2f       	mov	r16, r24
    2844:	10 e0       	ldi	r17, 0x00	; 0
    2846:	8f 81       	ldd	r24, Y+7	; 0x07
    2848:	98 85       	ldd	r25, Y+8	; 0x08
    284a:	a9 85       	ldd	r26, Y+9	; 0x09
    284c:	ba 85       	ldd	r27, Y+10	; 0x0a
    284e:	2a e0       	ldi	r18, 0x0A	; 10
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	40 e0       	ldi	r20, 0x00	; 0
    2854:	50 e0       	ldi	r21, 0x00	; 0
    2856:	bc 01       	movw	r22, r24
    2858:	cd 01       	movw	r24, r26
    285a:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <__divmodsi4>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	28 2f       	mov	r18, r24
    2864:	20 5d       	subi	r18, 0xD0	; 208
    2866:	ce 01       	movw	r24, r28
    2868:	4a 96       	adiw	r24, 0x1a	; 26
    286a:	fc 01       	movw	r30, r24
    286c:	e0 0f       	add	r30, r16
    286e:	f1 1f       	adc	r31, r17
    2870:	20 83       	st	Z, r18
                        s32_val /= 10;
    2872:	8f 81       	ldd	r24, Y+7	; 0x07
    2874:	98 85       	ldd	r25, Y+8	; 0x08
    2876:	a9 85       	ldd	r26, Y+9	; 0x09
    2878:	ba 85       	ldd	r27, Y+10	; 0x0a
    287a:	2a e0       	ldi	r18, 0x0A	; 10
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	40 e0       	ldi	r20, 0x00	; 0
    2880:	50 e0       	ldi	r21, 0x00	; 0
    2882:	bc 01       	movw	r22, r24
    2884:	cd 01       	movw	r24, r26
    2886:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <__divmodsi4>
    288a:	da 01       	movw	r26, r20
    288c:	c9 01       	movw	r24, r18
    288e:	8f 83       	std	Y+7, r24	; 0x07
    2890:	98 87       	std	Y+8, r25	; 0x08
    2892:	a9 87       	std	Y+9, r26	; 0x09
    2894:	ba 87       	std	Y+10, r27	; 0x0a
                        data_idx--;
    2896:	89 89       	ldd	r24, Y+17	; 0x11
    2898:	81 50       	subi	r24, 0x01	; 1
    289a:	89 8b       	std	Y+17, r24	; 0x11
						if (s32_val==0) break;
    289c:	8f 81       	ldd	r24, Y+7	; 0x07
    289e:	98 85       	ldd	r25, Y+8	; 0x08
    28a0:	a9 85       	ldd	r26, Y+9	; 0x09
    28a2:	ba 85       	ldd	r27, Y+10	; 0x0a
    28a4:	00 97       	sbiw	r24, 0x00	; 0
    28a6:	a1 05       	cpc	r26, r1
    28a8:	b1 05       	cpc	r27, r1
    28aa:	d9 f1       	breq	.+118    	; 0x2922 <uart_mini_printf+0x2f6>
    28ac:	c9 cf       	rjmp	.-110    	; 0x2840 <uart_mini_printf+0x214>
                   }
                }
                else  // 16-bit
                {
                    s16_val = (S16)(va_arg(arg_ptr, int)); // s16_val = va_arg(arg_ptr, S16);
    28ae:	28 8d       	ldd	r18, Y+24	; 0x18
    28b0:	39 8d       	ldd	r19, Y+25	; 0x19
    28b2:	c9 01       	movw	r24, r18
    28b4:	02 96       	adiw	r24, 0x02	; 2
    28b6:	99 8f       	std	Y+25, r25	; 0x19
    28b8:	88 8f       	std	Y+24, r24	; 0x18
    28ba:	f9 01       	movw	r30, r18
    28bc:	80 81       	ld	r24, Z
    28be:	91 81       	ldd	r25, Z+1	; 0x01
    28c0:	9c 87       	std	Y+12, r25	; 0x0c
    28c2:	8b 87       	std	Y+11, r24	; 0x0b
                    if (s16_val < 0)
    28c4:	8b 85       	ldd	r24, Y+11	; 0x0b
    28c6:	9c 85       	ldd	r25, Y+12	; 0x0c
    28c8:	99 23       	and	r25, r25
    28ca:	4c f4       	brge	.+18     	; 0x28de <uart_mini_printf+0x2b2>
                    {
                        n_sign = TRUE;
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	8a 8b       	std	Y+18, r24	; 0x12
                        s16_val  = -s16_val;
    28d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    28d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    28d4:	90 95       	com	r25
    28d6:	81 95       	neg	r24
    28d8:	9f 4f       	sbci	r25, 0xFF	; 255
    28da:	9c 87       	std	Y+12, r25	; 0x0c
    28dc:	8b 87       	std	Y+11, r24	; 0x0b
                    }
                    while (1)
                    {
                        data_buf[data_idx] = s16_val % 10 + '0';
    28de:	89 89       	ldd	r24, Y+17	; 0x11
    28e0:	e8 2f       	mov	r30, r24
    28e2:	f0 e0       	ldi	r31, 0x00	; 0
    28e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    28e6:	9c 85       	ldd	r25, Y+12	; 0x0c
    28e8:	2a e0       	ldi	r18, 0x0A	; 10
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	b9 01       	movw	r22, r18
    28ee:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <__divmodhi4>
    28f2:	28 2f       	mov	r18, r24
    28f4:	20 5d       	subi	r18, 0xD0	; 208
    28f6:	ce 01       	movw	r24, r28
    28f8:	4a 96       	adiw	r24, 0x1a	; 26
    28fa:	e8 0f       	add	r30, r24
    28fc:	f9 1f       	adc	r31, r25
    28fe:	20 83       	st	Z, r18
                        s16_val /= 10;
    2900:	8b 85       	ldd	r24, Y+11	; 0x0b
    2902:	9c 85       	ldd	r25, Y+12	; 0x0c
    2904:	2a e0       	ldi	r18, 0x0A	; 10
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	b9 01       	movw	r22, r18
    290a:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <__divmodhi4>
    290e:	cb 01       	movw	r24, r22
    2910:	9c 87       	std	Y+12, r25	; 0x0c
    2912:	8b 87       	std	Y+11, r24	; 0x0b
                        data_idx--;
    2914:	89 89       	ldd	r24, Y+17	; 0x11
    2916:	81 50       	subi	r24, 0x01	; 1
    2918:	89 8b       	std	Y+17, r24	; 0x11
						if (s16_val==0) break;
    291a:	8b 85       	ldd	r24, Y+11	; 0x0b
    291c:	9c 85       	ldd	r25, Y+12	; 0x0c
    291e:	00 97       	sbiw	r24, 0x00	; 0
    2920:	f1 f6       	brne	.-68     	; 0x28de <uart_mini_printf+0x2b2>
                    }
                }
                if (n_sign) { uart_putchar('-'); }
    2922:	8a 89       	ldd	r24, Y+18	; 0x12
    2924:	88 23       	and	r24, r24
    2926:	19 f0       	breq	.+6      	; 0x292e <uart_mini_printf+0x302>
    2928:	8d e2       	ldi	r24, 0x2D	; 45
    292a:	0e 94 be 12 	call	0x257c	; 0x257c <uart_putchar>
                data_idx++;
    292e:	89 89       	ldd	r24, Y+17	; 0x11
    2930:	8f 5f       	subi	r24, 0xFF	; 255
    2932:	89 8b       	std	Y+17, r24	; 0x11
                if (min_size < data_idx)
    2934:	98 89       	ldd	r25, Y+16	; 0x10
    2936:	89 89       	ldd	r24, Y+17	; 0x11
    2938:	98 17       	cp	r25, r24
    293a:	10 f4       	brcc	.+4      	; 0x2940 <uart_mini_printf+0x314>
                {
                    data_idx = min_size;
    293c:	88 89       	ldd	r24, Y+16	; 0x10
    293e:	89 8b       	std	Y+17, r24	; 0x11
                }
                uart_put_string (data_buf + data_idx);
    2940:	89 89       	ldd	r24, Y+17	; 0x11
    2942:	28 2f       	mov	r18, r24
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	ce 01       	movw	r24, r28
    2948:	4a 96       	adiw	r24, 0x1a	; 26
    294a:	82 0f       	add	r24, r18
    294c:	93 1f       	adc	r25, r19
    294e:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <uart_put_string>
                // Clean up
                min_size = DATA_BUF_LEN-1;
    2952:	8b e0       	ldi	r24, 0x0B	; 11
    2954:	88 8b       	std	Y+16, r24	; 0x10
                alt_p_c = FALSE;
    2956:	1e 86       	std	Y+14, r1	; 0x0e
                long_flag = FALSE;
    2958:	1f 86       	std	Y+15, r1	; 0x0f
    295a:	ef c1       	rjmp	.+990    	; 0x2d3a <uart_mini_printf+0x70e>
                break;  // case 'd'
                
            case 'u':
                for(data_idx = 0; data_idx < (DATA_BUF_LEN-1); data_idx++)
    295c:	19 8a       	std	Y+17, r1	; 0x11
    295e:	0d c0       	rjmp	.+26     	; 0x297a <uart_mini_printf+0x34e>
                {
                    data_buf[data_idx] = '0';
    2960:	89 89       	ldd	r24, Y+17	; 0x11
    2962:	28 2f       	mov	r18, r24
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	ce 01       	movw	r24, r28
    2968:	4a 96       	adiw	r24, 0x1a	; 26
    296a:	fc 01       	movw	r30, r24
    296c:	e2 0f       	add	r30, r18
    296e:	f3 1f       	adc	r31, r19
    2970:	80 e3       	ldi	r24, 0x30	; 48
    2972:	80 83       	st	Z, r24
                alt_p_c = FALSE;
                long_flag = FALSE;
                break;  // case 'd'
                
            case 'u':
                for(data_idx = 0; data_idx < (DATA_BUF_LEN-1); data_idx++)
    2974:	89 89       	ldd	r24, Y+17	; 0x11
    2976:	8f 5f       	subi	r24, 0xFF	; 255
    2978:	89 8b       	std	Y+17, r24	; 0x11
    297a:	89 89       	ldd	r24, Y+17	; 0x11
    297c:	8b 30       	cpi	r24, 0x0B	; 11
    297e:	80 f3       	brcs	.-32     	; 0x2960 <uart_mini_printf+0x334>
                {
                    data_buf[data_idx] = '0';
                }
                data_buf[DATA_BUF_LEN-1] = 0;
    2980:	1d a2       	std	Y+37, r1	; 0x25
                data_idx = DATA_BUF_LEN - 2;
    2982:	8a e0       	ldi	r24, 0x0A	; 10
    2984:	89 8b       	std	Y+17, r24	; 0x11
                if (long_flag)  // 32-bit
    2986:	8f 85       	ldd	r24, Y+15	; 0x0f
    2988:	88 23       	and	r24, r24
    298a:	09 f4       	brne	.+2      	; 0x298e <uart_mini_printf+0x362>
    298c:	46 c0       	rjmp	.+140    	; 0x2a1a <uart_mini_printf+0x3ee>
                {
                    u32_val = va_arg(arg_ptr, U32);
    298e:	28 8d       	ldd	r18, Y+24	; 0x18
    2990:	39 8d       	ldd	r19, Y+25	; 0x19
    2992:	c9 01       	movw	r24, r18
    2994:	04 96       	adiw	r24, 0x04	; 4
    2996:	99 8f       	std	Y+25, r25	; 0x19
    2998:	88 8f       	std	Y+24, r24	; 0x18
    299a:	f9 01       	movw	r30, r18
    299c:	80 81       	ld	r24, Z
    299e:	91 81       	ldd	r25, Z+1	; 0x01
    29a0:	a2 81       	ldd	r26, Z+2	; 0x02
    29a2:	b3 81       	ldd	r27, Z+3	; 0x03
    29a4:	89 83       	std	Y+1, r24	; 0x01
    29a6:	9a 83       	std	Y+2, r25	; 0x02
    29a8:	ab 83       	std	Y+3, r26	; 0x03
    29aa:	bc 83       	std	Y+4, r27	; 0x04
                    while (1)
                    {
                        data_buf[data_idx] = u32_val % 10 + '0';
    29ac:	89 89       	ldd	r24, Y+17	; 0x11
    29ae:	08 2f       	mov	r16, r24
    29b0:	10 e0       	ldi	r17, 0x00	; 0
    29b2:	89 81       	ldd	r24, Y+1	; 0x01
    29b4:	9a 81       	ldd	r25, Y+2	; 0x02
    29b6:	ab 81       	ldd	r26, Y+3	; 0x03
    29b8:	bc 81       	ldd	r27, Y+4	; 0x04
    29ba:	2a e0       	ldi	r18, 0x0A	; 10
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	40 e0       	ldi	r20, 0x00	; 0
    29c0:	50 e0       	ldi	r21, 0x00	; 0
    29c2:	bc 01       	movw	r22, r24
    29c4:	cd 01       	movw	r24, r26
    29c6:	0e 94 db 16 	call	0x2db6	; 0x2db6 <__udivmodsi4>
    29ca:	dc 01       	movw	r26, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	28 2f       	mov	r18, r24
    29d0:	20 5d       	subi	r18, 0xD0	; 208
    29d2:	ce 01       	movw	r24, r28
    29d4:	4a 96       	adiw	r24, 0x1a	; 26
    29d6:	fc 01       	movw	r30, r24
    29d8:	e0 0f       	add	r30, r16
    29da:	f1 1f       	adc	r31, r17
    29dc:	20 83       	st	Z, r18
                        u32_val /= 10;
    29de:	89 81       	ldd	r24, Y+1	; 0x01
    29e0:	9a 81       	ldd	r25, Y+2	; 0x02
    29e2:	ab 81       	ldd	r26, Y+3	; 0x03
    29e4:	bc 81       	ldd	r27, Y+4	; 0x04
    29e6:	2a e0       	ldi	r18, 0x0A	; 10
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	40 e0       	ldi	r20, 0x00	; 0
    29ec:	50 e0       	ldi	r21, 0x00	; 0
    29ee:	bc 01       	movw	r22, r24
    29f0:	cd 01       	movw	r24, r26
    29f2:	0e 94 db 16 	call	0x2db6	; 0x2db6 <__udivmodsi4>
    29f6:	da 01       	movw	r26, r20
    29f8:	c9 01       	movw	r24, r18
    29fa:	89 83       	std	Y+1, r24	; 0x01
    29fc:	9a 83       	std	Y+2, r25	; 0x02
    29fe:	ab 83       	std	Y+3, r26	; 0x03
    2a00:	bc 83       	std	Y+4, r27	; 0x04
                        data_idx--;
    2a02:	89 89       	ldd	r24, Y+17	; 0x11
    2a04:	81 50       	subi	r24, 0x01	; 1
    2a06:	89 8b       	std	Y+17, r24	; 0x11
						if (u32_val==0) break;
    2a08:	89 81       	ldd	r24, Y+1	; 0x01
    2a0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a0c:	ab 81       	ldd	r26, Y+3	; 0x03
    2a0e:	bc 81       	ldd	r27, Y+4	; 0x04
    2a10:	00 97       	sbiw	r24, 0x00	; 0
    2a12:	a1 05       	cpc	r26, r1
    2a14:	b1 05       	cpc	r27, r1
    2a16:	71 f1       	breq	.+92     	; 0x2a74 <uart_mini_printf+0x448>
    2a18:	c9 cf       	rjmp	.-110    	; 0x29ac <uart_mini_printf+0x380>
                    }
                }
                else  // 16-bit
                {
                    u16_val = (U16)(va_arg(arg_ptr, int)); // u16_val = va_arg(arg_ptr, U16);
    2a1a:	28 8d       	ldd	r18, Y+24	; 0x18
    2a1c:	39 8d       	ldd	r19, Y+25	; 0x19
    2a1e:	c9 01       	movw	r24, r18
    2a20:	02 96       	adiw	r24, 0x02	; 2
    2a22:	99 8f       	std	Y+25, r25	; 0x19
    2a24:	88 8f       	std	Y+24, r24	; 0x18
    2a26:	f9 01       	movw	r30, r18
    2a28:	80 81       	ld	r24, Z
    2a2a:	91 81       	ldd	r25, Z+1	; 0x01
    2a2c:	9e 83       	std	Y+6, r25	; 0x06
    2a2e:	8d 83       	std	Y+5, r24	; 0x05
                    while (1)
                    {
                        data_buf[data_idx] = u16_val % 10 + '0';
    2a30:	89 89       	ldd	r24, Y+17	; 0x11
    2a32:	e8 2f       	mov	r30, r24
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	8d 81       	ldd	r24, Y+5	; 0x05
    2a38:	9e 81       	ldd	r25, Y+6	; 0x06
    2a3a:	2a e0       	ldi	r18, 0x0A	; 10
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	b9 01       	movw	r22, r18
    2a40:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <__udivmodhi4>
    2a44:	28 2f       	mov	r18, r24
    2a46:	20 5d       	subi	r18, 0xD0	; 208
    2a48:	ce 01       	movw	r24, r28
    2a4a:	4a 96       	adiw	r24, 0x1a	; 26
    2a4c:	e8 0f       	add	r30, r24
    2a4e:	f9 1f       	adc	r31, r25
    2a50:	20 83       	st	Z, r18
                        data_idx--;
    2a52:	89 89       	ldd	r24, Y+17	; 0x11
    2a54:	81 50       	subi	r24, 0x01	; 1
    2a56:	89 8b       	std	Y+17, r24	; 0x11
                        u16_val /= 10;
    2a58:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5c:	2a e0       	ldi	r18, 0x0A	; 10
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	b9 01       	movw	r22, r18
    2a62:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <__udivmodhi4>
    2a66:	cb 01       	movw	r24, r22
    2a68:	9e 83       	std	Y+6, r25	; 0x06
    2a6a:	8d 83       	std	Y+5, r24	; 0x05
						if (u16_val==0) break;
    2a6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a70:	00 97       	sbiw	r24, 0x00	; 0
    2a72:	f1 f6       	brne	.-68     	; 0x2a30 <uart_mini_printf+0x404>
                    }
                }
                data_idx++;
    2a74:	89 89       	ldd	r24, Y+17	; 0x11
    2a76:	8f 5f       	subi	r24, 0xFF	; 255
    2a78:	89 8b       	std	Y+17, r24	; 0x11
                if (min_size < data_idx)
    2a7a:	98 89       	ldd	r25, Y+16	; 0x10
    2a7c:	89 89       	ldd	r24, Y+17	; 0x11
    2a7e:	98 17       	cp	r25, r24
    2a80:	10 f4       	brcc	.+4      	; 0x2a86 <uart_mini_printf+0x45a>
                {
                    data_idx = min_size;
    2a82:	88 89       	ldd	r24, Y+16	; 0x10
    2a84:	89 8b       	std	Y+17, r24	; 0x11
                }
                uart_put_string (data_buf + data_idx);
    2a86:	89 89       	ldd	r24, Y+17	; 0x11
    2a88:	28 2f       	mov	r18, r24
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	ce 01       	movw	r24, r28
    2a8e:	4a 96       	adiw	r24, 0x1a	; 26
    2a90:	82 0f       	add	r24, r18
    2a92:	93 1f       	adc	r25, r19
    2a94:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <uart_put_string>
                // Clean up
                min_size = DATA_BUF_LEN-1;
    2a98:	8b e0       	ldi	r24, 0x0B	; 11
    2a9a:	88 8b       	std	Y+16, r24	; 0x10
                alt_p_c = FALSE;
    2a9c:	1e 86       	std	Y+14, r1	; 0x0e
                long_flag = FALSE;
    2a9e:	1f 86       	std	Y+15, r1	; 0x0f
    2aa0:	4c c1       	rjmp	.+664    	; 0x2d3a <uart_mini_printf+0x70e>
                break;  // case 'u':
                
            case 'x':
            case 'X':
                for(data_idx = 0; data_idx < (DATA_BUF_LEN-1); data_idx++)
    2aa2:	19 8a       	std	Y+17, r1	; 0x11
    2aa4:	0d c0       	rjmp	.+26     	; 0x2ac0 <uart_mini_printf+0x494>
                {
                    data_buf[data_idx] = '0';
    2aa6:	89 89       	ldd	r24, Y+17	; 0x11
    2aa8:	28 2f       	mov	r18, r24
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	ce 01       	movw	r24, r28
    2aae:	4a 96       	adiw	r24, 0x1a	; 26
    2ab0:	fc 01       	movw	r30, r24
    2ab2:	e2 0f       	add	r30, r18
    2ab4:	f3 1f       	adc	r31, r19
    2ab6:	80 e3       	ldi	r24, 0x30	; 48
    2ab8:	80 83       	st	Z, r24
                long_flag = FALSE;
                break;  // case 'u':
                
            case 'x':
            case 'X':
                for(data_idx = 0; data_idx < (DATA_BUF_LEN-1); data_idx++)
    2aba:	89 89       	ldd	r24, Y+17	; 0x11
    2abc:	8f 5f       	subi	r24, 0xFF	; 255
    2abe:	89 8b       	std	Y+17, r24	; 0x11
    2ac0:	89 89       	ldd	r24, Y+17	; 0x11
    2ac2:	8b 30       	cpi	r24, 0x0B	; 11
    2ac4:	80 f3       	brcs	.-32     	; 0x2aa6 <uart_mini_printf+0x47a>
                {
                    data_buf[data_idx] = '0';
                }
                data_buf[DATA_BUF_LEN-1] = 0;
    2ac6:	1d a2       	std	Y+37, r1	; 0x25
                data_idx = DATA_BUF_LEN - 2;
    2ac8:	8a e0       	ldi	r24, 0x0A	; 10
    2aca:	89 8b       	std	Y+17, r24	; 0x11
                if (long_flag)  // 32-bit
    2acc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ace:	88 23       	and	r24, r24
    2ad0:	09 f4       	brne	.+2      	; 0x2ad4 <uart_mini_printf+0x4a8>
    2ad2:	55 c0       	rjmp	.+170    	; 0x2b7e <uart_mini_printf+0x552>
                { 
                    u32_val = va_arg(arg_ptr, U32);
    2ad4:	28 8d       	ldd	r18, Y+24	; 0x18
    2ad6:	39 8d       	ldd	r19, Y+25	; 0x19
    2ad8:	c9 01       	movw	r24, r18
    2ada:	04 96       	adiw	r24, 0x04	; 4
    2adc:	99 8f       	std	Y+25, r25	; 0x19
    2ade:	88 8f       	std	Y+24, r24	; 0x18
    2ae0:	f9 01       	movw	r30, r18
    2ae2:	80 81       	ld	r24, Z
    2ae4:	91 81       	ldd	r25, Z+1	; 0x01
    2ae6:	a2 81       	ldd	r26, Z+2	; 0x02
    2ae8:	b3 81       	ldd	r27, Z+3	; 0x03
    2aea:	89 83       	std	Y+1, r24	; 0x01
    2aec:	9a 83       	std	Y+2, r25	; 0x02
    2aee:	ab 83       	std	Y+3, r26	; 0x03
    2af0:	bc 83       	std	Y+4, r27	; 0x04
    2af2:	3b c0       	rjmp	.+118    	; 0x2b6a <uart_mini_printf+0x53e>
                    while (u32_val)
                    {
                        u8_temp = (U8)(u32_val & 0x0F);
    2af4:	89 81       	ldd	r24, Y+1	; 0x01
    2af6:	8f 70       	andi	r24, 0x0F	; 15
    2af8:	8b 8b       	std	Y+19, r24	; 0x13
                        data_buf[data_idx] = (u8_temp < 10)? u8_temp+'0':u8_temp-10+(*p=='x'?'a':'A');
    2afa:	89 89       	ldd	r24, Y+17	; 0x11
    2afc:	28 2f       	mov	r18, r24
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	3d a7       	std	Y+45, r19	; 0x2d
    2b02:	2c a7       	std	Y+44, r18	; 0x2c
    2b04:	8b 89       	ldd	r24, Y+19	; 0x13
    2b06:	8a 30       	cpi	r24, 0x0A	; 10
    2b08:	28 f4       	brcc	.+10     	; 0x2b14 <uart_mini_printf+0x4e8>
    2b0a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b0c:	38 2f       	mov	r19, r24
    2b0e:	30 5d       	subi	r19, 0xD0	; 208
    2b10:	3b a7       	std	Y+43, r19	; 0x2b
    2b12:	10 c0       	rjmp	.+32     	; 0x2b34 <uart_mini_printf+0x508>
    2b14:	ee 89       	ldd	r30, Y+22	; 0x16
    2b16:	ff 89       	ldd	r31, Y+23	; 0x17
    2b18:	80 81       	ld	r24, Z
    2b1a:	88 37       	cpi	r24, 0x78	; 120
    2b1c:	19 f4       	brne	.+6      	; 0x2b24 <uart_mini_printf+0x4f8>
    2b1e:	81 e6       	ldi	r24, 0x61	; 97
    2b20:	8a a7       	std	Y+42, r24	; 0x2a
    2b22:	02 c0       	rjmp	.+4      	; 0x2b28 <uart_mini_printf+0x4fc>
    2b24:	91 e4       	ldi	r25, 0x41	; 65
    2b26:	9a a7       	std	Y+42, r25	; 0x2a
    2b28:	8b 89       	ldd	r24, Y+19	; 0x13
    2b2a:	2a a5       	ldd	r18, Y+42	; 0x2a
    2b2c:	82 0f       	add	r24, r18
    2b2e:	38 2f       	mov	r19, r24
    2b30:	3a 50       	subi	r19, 0x0A	; 10
    2b32:	3b a7       	std	Y+43, r19	; 0x2b
    2b34:	ce 01       	movw	r24, r28
    2b36:	4a 96       	adiw	r24, 0x1a	; 26
    2b38:	ec a5       	ldd	r30, Y+44	; 0x2c
    2b3a:	fd a5       	ldd	r31, Y+45	; 0x2d
    2b3c:	e8 0f       	add	r30, r24
    2b3e:	f9 1f       	adc	r31, r25
    2b40:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b42:	80 83       	st	Z, r24
                        u32_val >>= 4;
    2b44:	89 81       	ldd	r24, Y+1	; 0x01
    2b46:	9a 81       	ldd	r25, Y+2	; 0x02
    2b48:	ab 81       	ldd	r26, Y+3	; 0x03
    2b4a:	bc 81       	ldd	r27, Y+4	; 0x04
    2b4c:	68 94       	set
    2b4e:	13 f8       	bld	r1, 3
    2b50:	b6 95       	lsr	r27
    2b52:	a7 95       	ror	r26
    2b54:	97 95       	ror	r25
    2b56:	87 95       	ror	r24
    2b58:	16 94       	lsr	r1
    2b5a:	d1 f7       	brne	.-12     	; 0x2b50 <uart_mini_printf+0x524>
    2b5c:	89 83       	std	Y+1, r24	; 0x01
    2b5e:	9a 83       	std	Y+2, r25	; 0x02
    2b60:	ab 83       	std	Y+3, r26	; 0x03
    2b62:	bc 83       	std	Y+4, r27	; 0x04
                        data_idx--;
    2b64:	89 89       	ldd	r24, Y+17	; 0x11
    2b66:	81 50       	subi	r24, 0x01	; 1
    2b68:	89 8b       	std	Y+17, r24	; 0x11
                data_buf[DATA_BUF_LEN-1] = 0;
                data_idx = DATA_BUF_LEN - 2;
                if (long_flag)  // 32-bit
                { 
                    u32_val = va_arg(arg_ptr, U32);
                    while (u32_val)
    2b6a:	89 81       	ldd	r24, Y+1	; 0x01
    2b6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b6e:	ab 81       	ldd	r26, Y+3	; 0x03
    2b70:	bc 81       	ldd	r27, Y+4	; 0x04
    2b72:	00 97       	sbiw	r24, 0x00	; 0
    2b74:	a1 05       	cpc	r26, r1
    2b76:	b1 05       	cpc	r27, r1
    2b78:	09 f0       	breq	.+2      	; 0x2b7c <uart_mini_printf+0x550>
    2b7a:	bc cf       	rjmp	.-136    	; 0x2af4 <uart_mini_printf+0x4c8>
    2b7c:	45 c0       	rjmp	.+138    	; 0x2c08 <uart_mini_printf+0x5dc>
                        data_idx--;
                    }
                }
                else  // 16-bit
                {
                    u16_val = (U16)(va_arg(arg_ptr, int)); // u16_val = va_arg(arg_ptr, U16);
    2b7e:	28 8d       	ldd	r18, Y+24	; 0x18
    2b80:	39 8d       	ldd	r19, Y+25	; 0x19
    2b82:	c9 01       	movw	r24, r18
    2b84:	02 96       	adiw	r24, 0x02	; 2
    2b86:	99 8f       	std	Y+25, r25	; 0x19
    2b88:	88 8f       	std	Y+24, r24	; 0x18
    2b8a:	f9 01       	movw	r30, r18
    2b8c:	80 81       	ld	r24, Z
    2b8e:	91 81       	ldd	r25, Z+1	; 0x01
    2b90:	9e 83       	std	Y+6, r25	; 0x06
    2b92:	8d 83       	std	Y+5, r24	; 0x05
    2b94:	35 c0       	rjmp	.+106    	; 0x2c00 <uart_mini_printf+0x5d4>
                    while (u16_val)
                    {
                        u8_temp = (U8)(u16_val & 0x0F);
    2b96:	8d 81       	ldd	r24, Y+5	; 0x05
    2b98:	8f 70       	andi	r24, 0x0F	; 15
    2b9a:	8b 8b       	std	Y+19, r24	; 0x13
                        data_buf[data_idx] = (u8_temp < 10)? u8_temp+'0':u8_temp-10+(*p=='x'?'a':'A');
    2b9c:	89 89       	ldd	r24, Y+17	; 0x11
    2b9e:	28 2f       	mov	r18, r24
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	39 a7       	std	Y+41, r19	; 0x29
    2ba4:	28 a7       	std	Y+40, r18	; 0x28
    2ba6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ba8:	8a 30       	cpi	r24, 0x0A	; 10
    2baa:	28 f4       	brcc	.+10     	; 0x2bb6 <uart_mini_printf+0x58a>
    2bac:	8b 89       	ldd	r24, Y+19	; 0x13
    2bae:	38 2f       	mov	r19, r24
    2bb0:	30 5d       	subi	r19, 0xD0	; 208
    2bb2:	3f a3       	std	Y+39, r19	; 0x27
    2bb4:	10 c0       	rjmp	.+32     	; 0x2bd6 <uart_mini_printf+0x5aa>
    2bb6:	ee 89       	ldd	r30, Y+22	; 0x16
    2bb8:	ff 89       	ldd	r31, Y+23	; 0x17
    2bba:	80 81       	ld	r24, Z
    2bbc:	88 37       	cpi	r24, 0x78	; 120
    2bbe:	19 f4       	brne	.+6      	; 0x2bc6 <uart_mini_printf+0x59a>
    2bc0:	81 e6       	ldi	r24, 0x61	; 97
    2bc2:	8e a3       	std	Y+38, r24	; 0x26
    2bc4:	02 c0       	rjmp	.+4      	; 0x2bca <uart_mini_printf+0x59e>
    2bc6:	91 e4       	ldi	r25, 0x41	; 65
    2bc8:	9e a3       	std	Y+38, r25	; 0x26
    2bca:	8b 89       	ldd	r24, Y+19	; 0x13
    2bcc:	2e a1       	ldd	r18, Y+38	; 0x26
    2bce:	82 0f       	add	r24, r18
    2bd0:	38 2f       	mov	r19, r24
    2bd2:	3a 50       	subi	r19, 0x0A	; 10
    2bd4:	3f a3       	std	Y+39, r19	; 0x27
    2bd6:	ce 01       	movw	r24, r28
    2bd8:	4a 96       	adiw	r24, 0x1a	; 26
    2bda:	e8 a5       	ldd	r30, Y+40	; 0x28
    2bdc:	f9 a5       	ldd	r31, Y+41	; 0x29
    2bde:	e8 0f       	add	r30, r24
    2be0:	f9 1f       	adc	r31, r25
    2be2:	8f a1       	ldd	r24, Y+39	; 0x27
    2be4:	80 83       	st	Z, r24
                        u16_val >>= 4;
    2be6:	8d 81       	ldd	r24, Y+5	; 0x05
    2be8:	9e 81       	ldd	r25, Y+6	; 0x06
    2bea:	92 95       	swap	r25
    2bec:	82 95       	swap	r24
    2bee:	8f 70       	andi	r24, 0x0F	; 15
    2bf0:	89 27       	eor	r24, r25
    2bf2:	9f 70       	andi	r25, 0x0F	; 15
    2bf4:	89 27       	eor	r24, r25
    2bf6:	9e 83       	std	Y+6, r25	; 0x06
    2bf8:	8d 83       	std	Y+5, r24	; 0x05
                        data_idx--;
    2bfa:	89 89       	ldd	r24, Y+17	; 0x11
    2bfc:	81 50       	subi	r24, 0x01	; 1
    2bfe:	89 8b       	std	Y+17, r24	; 0x11
                    }
                }
                else  // 16-bit
                {
                    u16_val = (U16)(va_arg(arg_ptr, int)); // u16_val = va_arg(arg_ptr, U16);
                    while (u16_val)
    2c00:	8d 81       	ldd	r24, Y+5	; 0x05
    2c02:	9e 81       	ldd	r25, Y+6	; 0x06
    2c04:	00 97       	sbiw	r24, 0x00	; 0
    2c06:	39 f6       	brne	.-114    	; 0x2b96 <uart_mini_printf+0x56a>
                        data_buf[data_idx] = (u8_temp < 10)? u8_temp+'0':u8_temp-10+(*p=='x'?'a':'A');
                        u16_val >>= 4;
                        data_idx--;
                    }
                }
                data_idx++;
    2c08:	89 89       	ldd	r24, Y+17	; 0x11
    2c0a:	8f 5f       	subi	r24, 0xFF	; 255
    2c0c:	89 8b       	std	Y+17, r24	; 0x11
                if (min_size < data_idx)
    2c0e:	98 89       	ldd	r25, Y+16	; 0x10
    2c10:	89 89       	ldd	r24, Y+17	; 0x11
    2c12:	98 17       	cp	r25, r24
    2c14:	10 f4       	brcc	.+4      	; 0x2c1a <uart_mini_printf+0x5ee>
                {
                    data_idx = min_size;
    2c16:	88 89       	ldd	r24, Y+16	; 0x10
    2c18:	89 8b       	std	Y+17, r24	; 0x11
                }
                uart_put_string (data_buf + data_idx);
    2c1a:	89 89       	ldd	r24, Y+17	; 0x11
    2c1c:	28 2f       	mov	r18, r24
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	ce 01       	movw	r24, r28
    2c22:	4a 96       	adiw	r24, 0x1a	; 26
    2c24:	82 0f       	add	r24, r18
    2c26:	93 1f       	adc	r25, r19
    2c28:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <uart_put_string>
                // Clean up
                min_size = DATA_BUF_LEN-1;
    2c2c:	8b e0       	ldi	r24, 0x0B	; 11
    2c2e:	88 8b       	std	Y+16, r24	; 0x10
                alt_p_c = FALSE;
    2c30:	1e 86       	std	Y+14, r1	; 0x0e
                long_flag = FALSE;
    2c32:	1f 86       	std	Y+15, r1	; 0x0f
    2c34:	82 c0       	rjmp	.+260    	; 0x2d3a <uart_mini_printf+0x70e>
                break;  // case 'x' & 'X'
                
            case '0':   // Max allowed "min_size" 2 decimal digit, truncated to DATA_BUF_LEN-1.
                min_size = DATA_BUF_LEN-1;
    2c36:	8b e0       	ldi	r24, 0x0B	; 11
    2c38:	88 8b       	std	Y+16, r24	; 0x10
                if (long_flag == TRUE)      // ERROR: 'l' before '0'
    2c3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c3c:	81 30       	cpi	r24, 0x01	; 1
    2c3e:	49 f4       	brne	.+18     	; 0x2c52 <uart_mini_printf+0x626>
                {
                    uart_putchar('l');
    2c40:	8c e6       	ldi	r24, 0x6C	; 108
    2c42:	0e 94 be 12 	call	0x257c	; 0x257c <uart_putchar>
                    uart_putchar('0');
    2c46:	80 e3       	ldi	r24, 0x30	; 48
    2c48:	0e 94 be 12 	call	0x257c	; 0x257c <uart_putchar>
                    // Clean up
                    alt_p_c = FALSE;
    2c4c:	1e 86       	std	Y+14, r1	; 0x0e
                    long_flag = FALSE;
    2c4e:	1f 86       	std	Y+15, r1	; 0x0f
    2c50:	74 c0       	rjmp	.+232    	; 0x2d3a <uart_mini_printf+0x70e>
                    break;
                }
                u8_temp = *++p;
    2c52:	8e 89       	ldd	r24, Y+22	; 0x16
    2c54:	9f 89       	ldd	r25, Y+23	; 0x17
    2c56:	01 96       	adiw	r24, 0x01	; 1
    2c58:	9f 8b       	std	Y+23, r25	; 0x17
    2c5a:	8e 8b       	std	Y+22, r24	; 0x16
    2c5c:	ee 89       	ldd	r30, Y+22	; 0x16
    2c5e:	ff 89       	ldd	r31, Y+23	; 0x17
    2c60:	80 81       	ld	r24, Z
    2c62:	8b 8b       	std	Y+19, r24	; 0x13
                if ((u8_temp >='0') && (u8_temp <='9'))
    2c64:	8b 89       	ldd	r24, Y+19	; 0x13
    2c66:	80 33       	cpi	r24, 0x30	; 48
    2c68:	08 f4       	brcc	.+2      	; 0x2c6c <uart_mini_printf+0x640>
    2c6a:	4d c0       	rjmp	.+154    	; 0x2d06 <uart_mini_printf+0x6da>
    2c6c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c6e:	8a 33       	cpi	r24, 0x3A	; 58
    2c70:	08 f0       	brcs	.+2      	; 0x2c74 <uart_mini_printf+0x648>
    2c72:	49 c0       	rjmp	.+146    	; 0x2d06 <uart_mini_printf+0x6da>
                {
                    min_size = u8_temp & 0x0F;
    2c74:	8b 89       	ldd	r24, Y+19	; 0x13
    2c76:	8f 70       	andi	r24, 0x0F	; 15
    2c78:	88 8b       	std	Y+16, r24	; 0x10
                    u8_temp = *++p;
    2c7a:	8e 89       	ldd	r24, Y+22	; 0x16
    2c7c:	9f 89       	ldd	r25, Y+23	; 0x17
    2c7e:	01 96       	adiw	r24, 0x01	; 1
    2c80:	9f 8b       	std	Y+23, r25	; 0x17
    2c82:	8e 8b       	std	Y+22, r24	; 0x16
    2c84:	ee 89       	ldd	r30, Y+22	; 0x16
    2c86:	ff 89       	ldd	r31, Y+23	; 0x17
    2c88:	80 81       	ld	r24, Z
    2c8a:	8b 8b       	std	Y+19, r24	; 0x13
                    if ((u8_temp >='0') && (u8_temp <='9'))
    2c8c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c8e:	80 33       	cpi	r24, 0x30	; 48
    2c90:	90 f0       	brcs	.+36     	; 0x2cb6 <uart_mini_printf+0x68a>
    2c92:	8b 89       	ldd	r24, Y+19	; 0x13
    2c94:	8a 33       	cpi	r24, 0x3A	; 58
    2c96:	78 f4       	brcc	.+30     	; 0x2cb6 <uart_mini_printf+0x68a>
                    {
                        min_size <<= 4;
    2c98:	88 89       	ldd	r24, Y+16	; 0x10
    2c9a:	82 95       	swap	r24
    2c9c:	80 7f       	andi	r24, 0xF0	; 240
    2c9e:	88 8b       	std	Y+16, r24	; 0x10
                        min_size |= (u8_temp & 0x0F);
    2ca0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ca2:	98 2f       	mov	r25, r24
    2ca4:	9f 70       	andi	r25, 0x0F	; 15
    2ca6:	88 89       	ldd	r24, Y+16	; 0x10
    2ca8:	89 2b       	or	r24, r25
    2caa:	88 8b       	std	Y+16, r24	; 0x10
                        p++;
    2cac:	8e 89       	ldd	r24, Y+22	; 0x16
    2cae:	9f 89       	ldd	r25, Y+23	; 0x17
    2cb0:	01 96       	adiw	r24, 0x01	; 1
    2cb2:	9f 8b       	std	Y+23, r25	; 0x17
    2cb4:	8e 8b       	std	Y+22, r24	; 0x16
                    }
                    min_size = ((min_size & 0x0F) + ((min_size >> 4) *10));  // Decimal to hexa
    2cb6:	88 89       	ldd	r24, Y+16	; 0x10
    2cb8:	48 2f       	mov	r20, r24
    2cba:	4f 70       	andi	r20, 0x0F	; 15
    2cbc:	88 89       	ldd	r24, Y+16	; 0x10
    2cbe:	82 95       	swap	r24
    2cc0:	8f 70       	andi	r24, 0x0F	; 15
    2cc2:	88 2f       	mov	r24, r24
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	9c 01       	movw	r18, r24
    2cc8:	22 0f       	add	r18, r18
    2cca:	33 1f       	adc	r19, r19
    2ccc:	c9 01       	movw	r24, r18
    2cce:	88 0f       	add	r24, r24
    2cd0:	99 1f       	adc	r25, r25
    2cd2:	88 0f       	add	r24, r24
    2cd4:	99 1f       	adc	r25, r25
    2cd6:	82 0f       	add	r24, r18
    2cd8:	93 1f       	adc	r25, r19
    2cda:	84 0f       	add	r24, r20
    2cdc:	88 8b       	std	Y+16, r24	; 0x10
                    if (min_size > (DATA_BUF_LEN-1))
    2cde:	88 89       	ldd	r24, Y+16	; 0x10
    2ce0:	8c 30       	cpi	r24, 0x0C	; 12
    2ce2:	10 f0       	brcs	.+4      	; 0x2ce8 <uart_mini_printf+0x6bc>
                    {
                        min_size = (DATA_BUF_LEN-1);
    2ce4:	8b e0       	ldi	r24, 0x0B	; 11
    2ce6:	88 8b       	std	Y+16, r24	; 0x10
                    }  // Truncation
                    min_size = DATA_BUF_LEN-1 - min_size;  // "min_size" formatted as "data_ix"
    2ce8:	9b e0       	ldi	r25, 0x0B	; 11
    2cea:	88 89       	ldd	r24, Y+16	; 0x10
    2cec:	29 2f       	mov	r18, r25
    2cee:	28 1b       	sub	r18, r24
    2cf0:	82 2f       	mov	r24, r18
    2cf2:	88 8b       	std	Y+16, r24	; 0x10
                    // Clean up
                    alt_p_c = FALSE;
                    long_flag = FALSE;
                    break;
                }
                p-=2;
    2cf4:	8e 89       	ldd	r24, Y+22	; 0x16
    2cf6:	9f 89       	ldd	r25, Y+23	; 0x17
    2cf8:	02 97       	sbiw	r24, 0x02	; 2
    2cfa:	9f 8b       	std	Y+23, r25	; 0x17
    2cfc:	8e 8b       	std	Y+22, r24	; 0x16
                alt_p_c = TRUE;
    2cfe:	81 e0       	ldi	r24, 0x01	; 1
    2d00:	8e 87       	std	Y+14, r24	; 0x0e
                // Clean up
                long_flag = FALSE;
    2d02:	1f 86       	std	Y+15, r1	; 0x0f
    2d04:	1a c0       	rjmp	.+52     	; 0x2d3a <uart_mini_printf+0x70e>
                    }  // Truncation
                    min_size = DATA_BUF_LEN-1 - min_size;  // "min_size" formatted as "data_ix"
                }
                else      // ERROR: any "char" after '0'
                {
                    uart_putchar('0');
    2d06:	80 e3       	ldi	r24, 0x30	; 48
    2d08:	0e 94 be 12 	call	0x257c	; 0x257c <uart_putchar>
                    uart_putchar(*p);
    2d0c:	ee 89       	ldd	r30, Y+22	; 0x16
    2d0e:	ff 89       	ldd	r31, Y+23	; 0x17
    2d10:	80 81       	ld	r24, Z
    2d12:	0e 94 be 12 	call	0x257c	; 0x257c <uart_putchar>
                    // Clean up
                    alt_p_c = FALSE;
    2d16:	1e 86       	std	Y+14, r1	; 0x0e
                    long_flag = FALSE;
    2d18:	1f 86       	std	Y+15, r1	; 0x0f
    2d1a:	0f c0       	rjmp	.+30     	; 0x2d3a <uart_mini_printf+0x70e>
                // Clean up
                long_flag = FALSE;
                break;  // case '0'
                
            default:
                if (long_flag == TRUE)
    2d1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d1e:	81 30       	cpi	r24, 0x01	; 1
    2d20:	19 f4       	brne	.+6      	; 0x2d28 <uart_mini_printf+0x6fc>
                {
                    uart_putchar('l');
    2d22:	8c e6       	ldi	r24, 0x6C	; 108
    2d24:	0e 94 be 12 	call	0x257c	; 0x257c <uart_putchar>
                }
                uart_putchar(*p);
    2d28:	ee 89       	ldd	r30, Y+22	; 0x16
    2d2a:	ff 89       	ldd	r31, Y+23	; 0x17
    2d2c:	80 81       	ld	r24, Z
    2d2e:	0e 94 be 12 	call	0x257c	; 0x257c <uart_putchar>
                // Clean up
                min_size = DATA_BUF_LEN-1;
    2d32:	8b e0       	ldi	r24, 0x0B	; 11
    2d34:	88 8b       	std	Y+16, r24	; 0x10
                alt_p_c = FALSE;
    2d36:	1e 86       	std	Y+14, r1	; 0x0e
                long_flag = FALSE;
    2d38:	1f 86       	std	Y+15, r1	; 0x0f
    long_flag = FALSE;
    alt_p_c = FALSE;
    min_size = DATA_BUF_LEN-1;

    va_start(arg_ptr, format);   // make arg_ptr point to the first unnamed arg
    for (p = (U8 *) format; *p; p++)
    2d3a:	8e 89       	ldd	r24, Y+22	; 0x16
    2d3c:	9f 89       	ldd	r25, Y+23	; 0x17
    2d3e:	01 96       	adiw	r24, 0x01	; 1
    2d40:	9f 8b       	std	Y+23, r25	; 0x17
    2d42:	8e 8b       	std	Y+22, r24	; 0x16
    2d44:	ee 89       	ldd	r30, Y+22	; 0x16
    2d46:	ff 89       	ldd	r31, Y+23	; 0x17
    2d48:	80 81       	ld	r24, Z
    2d4a:	88 23       	and	r24, r24
    2d4c:	09 f0       	breq	.+2      	; 0x2d50 <uart_mini_printf+0x724>
    2d4e:	87 cc       	rjmp	.-1778   	; 0x265e <uart_mini_printf+0x32>
        }   // switch (*p ...
        
    }   // for (p = ...
    
    va_end(arg_ptr);
    return 0;
    2d50:	80 e0       	ldi	r24, 0x00	; 0
}
    2d52:	af 96       	adiw	r28, 0x2f	; 47
    2d54:	0f b6       	in	r0, 0x3f	; 63
    2d56:	f8 94       	cli
    2d58:	de bf       	out	0x3e, r29	; 62
    2d5a:	0f be       	out	0x3f, r0	; 63
    2d5c:	cd bf       	out	0x3d, r28	; 61
    2d5e:	cf 91       	pop	r28
    2d60:	df 91       	pop	r29
    2d62:	1f 91       	pop	r17
    2d64:	0f 91       	pop	r16
    2d66:	08 95       	ret

00002d68 <__udivmodhi4>:
    2d68:	aa 1b       	sub	r26, r26
    2d6a:	bb 1b       	sub	r27, r27
    2d6c:	51 e1       	ldi	r21, 0x11	; 17
    2d6e:	07 c0       	rjmp	.+14     	; 0x2d7e <__udivmodhi4_ep>

00002d70 <__udivmodhi4_loop>:
    2d70:	aa 1f       	adc	r26, r26
    2d72:	bb 1f       	adc	r27, r27
    2d74:	a6 17       	cp	r26, r22
    2d76:	b7 07       	cpc	r27, r23
    2d78:	10 f0       	brcs	.+4      	; 0x2d7e <__udivmodhi4_ep>
    2d7a:	a6 1b       	sub	r26, r22
    2d7c:	b7 0b       	sbc	r27, r23

00002d7e <__udivmodhi4_ep>:
    2d7e:	88 1f       	adc	r24, r24
    2d80:	99 1f       	adc	r25, r25
    2d82:	5a 95       	dec	r21
    2d84:	a9 f7       	brne	.-22     	; 0x2d70 <__udivmodhi4_loop>
    2d86:	80 95       	com	r24
    2d88:	90 95       	com	r25
    2d8a:	bc 01       	movw	r22, r24
    2d8c:	cd 01       	movw	r24, r26
    2d8e:	08 95       	ret

00002d90 <__divmodhi4>:
    2d90:	97 fb       	bst	r25, 7
    2d92:	09 2e       	mov	r0, r25
    2d94:	07 26       	eor	r0, r23
    2d96:	0a d0       	rcall	.+20     	; 0x2dac <__divmodhi4_neg1>
    2d98:	77 fd       	sbrc	r23, 7
    2d9a:	04 d0       	rcall	.+8      	; 0x2da4 <__divmodhi4_neg2>
    2d9c:	e5 df       	rcall	.-54     	; 0x2d68 <__udivmodhi4>
    2d9e:	06 d0       	rcall	.+12     	; 0x2dac <__divmodhi4_neg1>
    2da0:	00 20       	and	r0, r0
    2da2:	1a f4       	brpl	.+6      	; 0x2daa <__divmodhi4_exit>

00002da4 <__divmodhi4_neg2>:
    2da4:	70 95       	com	r23
    2da6:	61 95       	neg	r22
    2da8:	7f 4f       	sbci	r23, 0xFF	; 255

00002daa <__divmodhi4_exit>:
    2daa:	08 95       	ret

00002dac <__divmodhi4_neg1>:
    2dac:	f6 f7       	brtc	.-4      	; 0x2daa <__divmodhi4_exit>
    2dae:	90 95       	com	r25
    2db0:	81 95       	neg	r24
    2db2:	9f 4f       	sbci	r25, 0xFF	; 255
    2db4:	08 95       	ret

00002db6 <__udivmodsi4>:
    2db6:	a1 e2       	ldi	r26, 0x21	; 33
    2db8:	1a 2e       	mov	r1, r26
    2dba:	aa 1b       	sub	r26, r26
    2dbc:	bb 1b       	sub	r27, r27
    2dbe:	fd 01       	movw	r30, r26
    2dc0:	0d c0       	rjmp	.+26     	; 0x2ddc <__udivmodsi4_ep>

00002dc2 <__udivmodsi4_loop>:
    2dc2:	aa 1f       	adc	r26, r26
    2dc4:	bb 1f       	adc	r27, r27
    2dc6:	ee 1f       	adc	r30, r30
    2dc8:	ff 1f       	adc	r31, r31
    2dca:	a2 17       	cp	r26, r18
    2dcc:	b3 07       	cpc	r27, r19
    2dce:	e4 07       	cpc	r30, r20
    2dd0:	f5 07       	cpc	r31, r21
    2dd2:	20 f0       	brcs	.+8      	; 0x2ddc <__udivmodsi4_ep>
    2dd4:	a2 1b       	sub	r26, r18
    2dd6:	b3 0b       	sbc	r27, r19
    2dd8:	e4 0b       	sbc	r30, r20
    2dda:	f5 0b       	sbc	r31, r21

00002ddc <__udivmodsi4_ep>:
    2ddc:	66 1f       	adc	r22, r22
    2dde:	77 1f       	adc	r23, r23
    2de0:	88 1f       	adc	r24, r24
    2de2:	99 1f       	adc	r25, r25
    2de4:	1a 94       	dec	r1
    2de6:	69 f7       	brne	.-38     	; 0x2dc2 <__udivmodsi4_loop>
    2de8:	60 95       	com	r22
    2dea:	70 95       	com	r23
    2dec:	80 95       	com	r24
    2dee:	90 95       	com	r25
    2df0:	9b 01       	movw	r18, r22
    2df2:	ac 01       	movw	r20, r24
    2df4:	bd 01       	movw	r22, r26
    2df6:	cf 01       	movw	r24, r30
    2df8:	08 95       	ret

00002dfa <__divmodsi4>:
    2dfa:	97 fb       	bst	r25, 7
    2dfc:	09 2e       	mov	r0, r25
    2dfe:	05 26       	eor	r0, r21
    2e00:	0e d0       	rcall	.+28     	; 0x2e1e <__divmodsi4_neg1>
    2e02:	57 fd       	sbrc	r21, 7
    2e04:	04 d0       	rcall	.+8      	; 0x2e0e <__divmodsi4_neg2>
    2e06:	d7 df       	rcall	.-82     	; 0x2db6 <__udivmodsi4>
    2e08:	0a d0       	rcall	.+20     	; 0x2e1e <__divmodsi4_neg1>
    2e0a:	00 1c       	adc	r0, r0
    2e0c:	38 f4       	brcc	.+14     	; 0x2e1c <__divmodsi4_exit>

00002e0e <__divmodsi4_neg2>:
    2e0e:	50 95       	com	r21
    2e10:	40 95       	com	r20
    2e12:	30 95       	com	r19
    2e14:	21 95       	neg	r18
    2e16:	3f 4f       	sbci	r19, 0xFF	; 255
    2e18:	4f 4f       	sbci	r20, 0xFF	; 255
    2e1a:	5f 4f       	sbci	r21, 0xFF	; 255

00002e1c <__divmodsi4_exit>:
    2e1c:	08 95       	ret

00002e1e <__divmodsi4_neg1>:
    2e1e:	f6 f7       	brtc	.-4      	; 0x2e1c <__divmodsi4_exit>
    2e20:	90 95       	com	r25
    2e22:	80 95       	com	r24
    2e24:	70 95       	com	r23
    2e26:	61 95       	neg	r22
    2e28:	7f 4f       	sbci	r23, 0xFF	; 255
    2e2a:	8f 4f       	sbci	r24, 0xFF	; 255
    2e2c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e2e:	08 95       	ret

00002e30 <_exit>:
    2e30:	f8 94       	cli

00002e32 <__stop_program>:
    2e32:	ff cf       	rjmp	.-2      	; 0x2e32 <__stop_program>
