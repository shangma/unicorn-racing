
node.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000025a  00800100  00002d94  00002e08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d94  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  0080035a  00002fee  00003062  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  00003064  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  000037b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00003808  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000311  00000000  00000000  000038e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000f74  00000000  00000000  00003bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000671  00000000  00000000  00004b6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000150c  00000000  00000000  000051de  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000230  00000000  00000000  000066ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000628  00000000  00000000  0000691c  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 5b 11 	jmp	0x22b6	; 0x22b6 <__vector_9>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      80:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	13 e0       	ldi	r17, 0x03	; 3
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e4 e9       	ldi	r30, 0x94	; 148
      a8:	fd e2       	ldi	r31, 0x2D	; 45
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	aa 35       	cpi	r26, 0x5A	; 90
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	13 e0       	ldi	r17, 0x03	; 3
      bc:	aa e5       	ldi	r26, 0x5A	; 90
      be:	b3 e0       	ldi	r27, 0x03	; 3
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a5 36       	cpi	r26, 0x65	; 101
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
      ce:	0c 94 c8 16 	jmp	0x2d90	; 0x2d90 <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

000000d6 <main>:
//! This program performs some remote frames (c.f. NB_TARGET).
//! The response must be a data frame that contents (in the order) the addressed
//! node temperature, luminosity and VCC values.
//------------------------------------------------------------------------------
int main (void)
{	
      d6:	df 93       	push	r29
      d8:	cf 93       	push	r28
      da:	00 d0       	rcall	.+0      	; 0xdc <main+0x6>
      dc:	cd b7       	in	r28, 0x3d	; 61
      de:	de b7       	in	r29, 0x3e	; 62
    U8 i,j;    
    CLKPR = 0x80;  CLKPR = 0x00;  // Clock prescaler Reset
      e0:	e1 e6       	ldi	r30, 0x61	; 97
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	80 e8       	ldi	r24, 0x80	; 128
      e6:	80 83       	st	Z, r24
      e8:	e1 e6       	ldi	r30, 0x61	; 97
      ea:	f0 e0       	ldi	r31, 0x00	; 0
      ec:	10 82       	st	Z, r1
   
	uart_init(CONF_8BIT_NOPAR_1STOP,UART_BAUDRATE);
      ee:	83 e0       	ldi	r24, 0x03	; 3
      f0:	40 e0       	ldi	r20, 0x00	; 0
      f2:	56 e9       	ldi	r21, 0x96	; 150
      f4:	60 e0       	ldi	r22, 0x00	; 0
      f6:	70 e0       	ldi	r23, 0x00	; 0
      f8:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <uart_init>
    
    can_init(0);
      fc:	80 e0       	ldi	r24, 0x00	; 0
      fe:	0e 94 58 05 	call	0xab0	; 0xab0 <can_init>

	DDRA = 0xFF; // LED'er output
     102:	e1 e2       	ldi	r30, 0x21	; 33
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	8f ef       	ldi	r24, 0xFF	; 255
     108:	80 83       	st	Z, r24
	PORTA = 0xFF; // LED'er t√¶ndt
     10a:	e2 e2       	ldi	r30, 0x22	; 34
     10c:	f0 e0       	ldi	r31, 0x00	; 0
     10e:	8f ef       	ldi	r24, 0xFF	; 255
     110:	80 83       	st	Z, r24

    DDRD = 0xFF;
     112:	ea e2       	ldi	r30, 0x2A	; 42
     114:	f0 e0       	ldi	r31, 0x00	; 0
     116:	8f ef       	ldi	r24, 0xFF	; 255
     118:	80 83       	st	Z, r24
    PORTD |= 0b1000000;
     11a:	ab e2       	ldi	r26, 0x2B	; 43
     11c:	b0 e0       	ldi	r27, 0x00	; 0
     11e:	eb e2       	ldi	r30, 0x2B	; 43
     120:	f0 e0       	ldi	r31, 0x00	; 0
     122:	80 81       	ld	r24, Z
     124:	80 64       	ori	r24, 0x40	; 64
     126:	8c 93       	st	X, r24


    // Interrupt
    
    
    sei();
     128:	78 94       	sei

    CANIE2 = 0xFF;
     12a:	ee ed       	ldi	r30, 0xDE	; 222
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	8f ef       	ldi	r24, 0xFF	; 255
     130:	80 83       	st	Z, r24
    CANIE1 = 0xFF;
     132:	ef ed       	ldi	r30, 0xDF	; 223
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	8f ef       	ldi	r24, 0xFF	; 255
     138:	80 83       	st	Z, r24

    //CANGIE |=(1<<ENRX);
    //CANGIE |=(1<<ENTX);

    CANGIE |=(1<<ENIT);
     13a:	ab ed       	ldi	r26, 0xDB	; 219
     13c:	b0 e0       	ldi	r27, 0x00	; 0
     13e:	eb ed       	ldi	r30, 0xDB	; 219
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	80 81       	ld	r24, Z
     144:	80 68       	ori	r24, 0x80	; 128
     146:	8c 93       	st	X, r24


    display_sensor_values();
     148:	0e 94 ad 00 	call	0x15a	; 0x15a <display_sensor_values>

    return 0;
     14c:	80 e0       	ldi	r24, 0x00	; 0
     14e:	90 e0       	ldi	r25, 0x00	; 0
}
     150:	0f 90       	pop	r0
     152:	0f 90       	pop	r0
     154:	cf 91       	pop	r28
     156:	df 91       	pop	r29
     158:	08 95       	ret

0000015a <display_sensor_values>:
//!     local temperature, the local luminosity and the VCC values.
//!     When the DVK90CAN1 receives an response, it formates the data and
//!     sends it to a terminal.
//------------------------------------------------------------------------------
void display_sensor_values(void)
{
     15a:	df 93       	push	r29
     15c:	cf 93       	push	r28
     15e:	cd b7       	in	r28, 0x3d	; 61
     160:	de b7       	in	r29, 0x3e	; 62
     162:	69 97       	sbiw	r28, 0x19	; 25
     164:	0f b6       	in	r0, 0x3f	; 63
     166:	f8 94       	cli
     168:	de bf       	out	0x3e, r29	; 62
     16a:	0f be       	out	0x3f, r0	; 63
     16c:	cd bf       	out	0x3d, r28	; 61
    U8 i, j=0;
     16e:	1a 82       	std	Y+2, r1	; 0x02
    U8 k = 0;
     170:	19 82       	std	Y+1, r1	; 0x01

    U8 response_buffer[9];
    st_cmd_t response_msg;

    // --- Init variables
    response_msg.pt_data = &response_buffer[0];
     172:	ce 01       	movw	r24, r28
     174:	04 96       	adiw	r24, 0x04	; 4
     176:	9e 8b       	std	Y+22, r25	; 0x16
     178:	8d 8b       	std	Y+21, r24	; 0x15
    response_msg.status = 0;
     17a:	1f 8a       	std	Y+23, r1	; 0x17

    // UART
    uart_mini_printf("GOGO");
     17c:	00 d0       	rcall	.+0      	; 0x17e <display_sensor_values+0x24>
     17e:	ed b7       	in	r30, 0x3d	; 61
     180:	fe b7       	in	r31, 0x3e	; 62
     182:	31 96       	adiw	r30, 0x01	; 1
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	91 e0       	ldi	r25, 0x01	; 1
     188:	91 83       	std	Z+1, r25	; 0x01
     18a:	80 83       	st	Z, r24
     18c:	0e 94 c6 12 	call	0x258c	; 0x258c <uart_mini_printf>
     190:	0f 90       	pop	r0
     192:	0f 90       	pop	r0

    while (1)
    {
        wait_for(100);  // x ms between refreshed screen
     194:	84 e6       	ldi	r24, 0x64	; 100
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <wait_for>
        for(j=0; j<NB_TARGET; j++)
     19c:	1a 82       	std	Y+2, r1	; 0x02
     19e:	0c c1       	rjmp	.+536    	; 0x3b8 <display_sensor_values+0x25e>
        {
            //CANGIE |=(1<<ENIT);
            // --- Init Rx Commands
      	    for(i=0; i<9; i++) response_buffer[i]=0; // Nulstiller buffer
     1a0:	1b 82       	std	Y+3, r1	; 0x03
     1a2:	0c c0       	rjmp	.+24     	; 0x1bc <display_sensor_values+0x62>
     1a4:	8b 81       	ldd	r24, Y+3	; 0x03
     1a6:	28 2f       	mov	r18, r24
     1a8:	30 e0       	ldi	r19, 0x00	; 0
     1aa:	ce 01       	movw	r24, r28
     1ac:	04 96       	adiw	r24, 0x04	; 4
     1ae:	fc 01       	movw	r30, r24
     1b0:	e2 0f       	add	r30, r18
     1b2:	f3 1f       	adc	r31, r19
     1b4:	10 82       	st	Z, r1
     1b6:	8b 81       	ldd	r24, Y+3	; 0x03
     1b8:	8f 5f       	subi	r24, 0xFF	; 255
     1ba:	8b 83       	std	Y+3, r24	; 0x03
     1bc:	8b 81       	ldd	r24, Y+3	; 0x03
     1be:	89 30       	cpi	r24, 0x09	; 9
     1c0:	88 f3       	brcs	.-30     	; 0x1a4 <display_sensor_values+0x4a>
            response_msg.id.std = ID_TAG_BASE + j;
     1c2:	8a 81       	ldd	r24, Y+2	; 0x02
     1c4:	88 2f       	mov	r24, r24
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	80 58       	subi	r24, 0x80	; 128
     1ca:	9f 4f       	sbci	r25, 0xFF	; 255
     1cc:	99 8b       	std	Y+17, r25	; 0x11
     1ce:	88 8b       	std	Y+16, r24	; 0x10
            response_msg.ctrl.ide = 0;
     1d0:	19 8e       	std	Y+25, r1	; 0x19
            response_msg.ctrl.rtr = 0;
     1d2:	18 8e       	std	Y+24, r1	; 0x18
            response_msg.dlc = 8;
     1d4:	88 e0       	ldi	r24, 0x08	; 8
     1d6:	8c 8b       	std	Y+20, r24	; 0x14
            response_msg.cmd = CMD_RX_DATA_MASKED;
     1d8:	88 e0       	ldi	r24, 0x08	; 8
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	9f 87       	std	Y+15, r25	; 0x0f
     1de:	8e 87       	std	Y+14, r24	; 0x0e
            // --- Rx Command
            while(can_cmd(&response_msg) != CAN_CMD_ACCEPTED);
     1e0:	ce 01       	movw	r24, r28
     1e2:	0d 96       	adiw	r24, 0x0d	; 13
     1e4:	0e 94 76 05 	call	0xaec	; 0xaec <can_cmd>
     1e8:	88 23       	and	r24, r24
     1ea:	d1 f7       	brne	.-12     	; 0x1e0 <display_sensor_values+0x86>

	    req_sensor_data(k,3);
     1ec:	89 81       	ldd	r24, Y+1	; 0x01
     1ee:	63 e0       	ldi	r22, 0x03	; 3
     1f0:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <req_sensor_data>
	    k += 1;
     1f4:	89 81       	ldd	r24, Y+1	; 0x01
     1f6:	8f 5f       	subi	r24, 0xFF	; 255
     1f8:	89 83       	std	Y+1, r24	; 0x01
	    if(k == 3)
     1fa:	89 81       	ldd	r24, Y+1	; 0x01
     1fc:	83 30       	cpi	r24, 0x03	; 3
     1fe:	09 f4       	brne	.+2      	; 0x202 <display_sensor_values+0xa8>
		k = 0;
     200:	19 82       	std	Y+1, r1	; 0x01
            wait_for(10); // Wait x ms for a response if exits
     202:	8a e0       	ldi	r24, 0x0A	; 10
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <wait_for>

            if (can_get_status(&response_msg) == CAN_STATUS_COMPLETED){
     20a:	ce 01       	movw	r24, r28
     20c:	0d 96       	adiw	r24, 0x0d	; 13
     20e:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <can_get_status>
     212:	88 23       	and	r24, r24
     214:	09 f0       	breq	.+2      	; 0x218 <display_sensor_values+0xbe>
     216:	c3 c0       	rjmp	.+390    	; 0x39e <display_sensor_values+0x244>
                // --- Node ID
		uart_mini_printf("Node: %d",response_msg.id.std-127);
     218:	88 89       	ldd	r24, Y+16	; 0x10
     21a:	99 89       	ldd	r25, Y+17	; 0x11
     21c:	9c 01       	movw	r18, r24
     21e:	2f 57       	subi	r18, 0x7F	; 127
     220:	30 40       	sbci	r19, 0x00	; 0
     222:	00 d0       	rcall	.+0      	; 0x224 <display_sensor_values+0xca>
     224:	00 d0       	rcall	.+0      	; 0x226 <display_sensor_values+0xcc>
     226:	ed b7       	in	r30, 0x3d	; 61
     228:	fe b7       	in	r31, 0x3e	; 62
     22a:	31 96       	adiw	r30, 0x01	; 1
     22c:	85 e0       	ldi	r24, 0x05	; 5
     22e:	91 e0       	ldi	r25, 0x01	; 1
     230:	91 83       	std	Z+1, r25	; 0x01
     232:	80 83       	st	Z, r24
     234:	33 83       	std	Z+3, r19	; 0x03
     236:	22 83       	std	Z+2, r18	; 0x02
     238:	0e 94 c6 12 	call	0x258c	; 0x258c <uart_mini_printf>
     23c:	0f 90       	pop	r0
     23e:	0f 90       	pop	r0
     240:	0f 90       	pop	r0
     242:	0f 90       	pop	r0
                
                // --- Data               
               	uart_mini_printf(", Data1: %03d", response_buffer[0]);
     244:	8c 81       	ldd	r24, Y+4	; 0x04
     246:	28 2f       	mov	r18, r24
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	00 d0       	rcall	.+0      	; 0x24c <display_sensor_values+0xf2>
     24c:	00 d0       	rcall	.+0      	; 0x24e <display_sensor_values+0xf4>
     24e:	ed b7       	in	r30, 0x3d	; 61
     250:	fe b7       	in	r31, 0x3e	; 62
     252:	31 96       	adiw	r30, 0x01	; 1
     254:	8e e0       	ldi	r24, 0x0E	; 14
     256:	91 e0       	ldi	r25, 0x01	; 1
     258:	91 83       	std	Z+1, r25	; 0x01
     25a:	80 83       	st	Z, r24
     25c:	33 83       	std	Z+3, r19	; 0x03
     25e:	22 83       	std	Z+2, r18	; 0x02
     260:	0e 94 c6 12 	call	0x258c	; 0x258c <uart_mini_printf>
     264:	0f 90       	pop	r0
     266:	0f 90       	pop	r0
     268:	0f 90       	pop	r0
     26a:	0f 90       	pop	r0

		uart_mini_printf(", Data2: %03d", response_buffer[1]);
     26c:	8d 81       	ldd	r24, Y+5	; 0x05
     26e:	28 2f       	mov	r18, r24
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	00 d0       	rcall	.+0      	; 0x274 <display_sensor_values+0x11a>
     274:	00 d0       	rcall	.+0      	; 0x276 <display_sensor_values+0x11c>
     276:	ed b7       	in	r30, 0x3d	; 61
     278:	fe b7       	in	r31, 0x3e	; 62
     27a:	31 96       	adiw	r30, 0x01	; 1
     27c:	8c e1       	ldi	r24, 0x1C	; 28
     27e:	91 e0       	ldi	r25, 0x01	; 1
     280:	91 83       	std	Z+1, r25	; 0x01
     282:	80 83       	st	Z, r24
     284:	33 83       	std	Z+3, r19	; 0x03
     286:	22 83       	std	Z+2, r18	; 0x02
     288:	0e 94 c6 12 	call	0x258c	; 0x258c <uart_mini_printf>
     28c:	0f 90       	pop	r0
     28e:	0f 90       	pop	r0
     290:	0f 90       	pop	r0
     292:	0f 90       	pop	r0
		uart_mini_printf(", Data3: %03d", response_buffer[2]);
     294:	8e 81       	ldd	r24, Y+6	; 0x06
     296:	28 2f       	mov	r18, r24
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	00 d0       	rcall	.+0      	; 0x29c <display_sensor_values+0x142>
     29c:	00 d0       	rcall	.+0      	; 0x29e <display_sensor_values+0x144>
     29e:	ed b7       	in	r30, 0x3d	; 61
     2a0:	fe b7       	in	r31, 0x3e	; 62
     2a2:	31 96       	adiw	r30, 0x01	; 1
     2a4:	8a e2       	ldi	r24, 0x2A	; 42
     2a6:	91 e0       	ldi	r25, 0x01	; 1
     2a8:	91 83       	std	Z+1, r25	; 0x01
     2aa:	80 83       	st	Z, r24
     2ac:	33 83       	std	Z+3, r19	; 0x03
     2ae:	22 83       	std	Z+2, r18	; 0x02
     2b0:	0e 94 c6 12 	call	0x258c	; 0x258c <uart_mini_printf>
     2b4:	0f 90       	pop	r0
     2b6:	0f 90       	pop	r0
     2b8:	0f 90       	pop	r0
     2ba:	0f 90       	pop	r0
		uart_mini_printf(", Data4: %03d", response_buffer[3]);
     2bc:	8f 81       	ldd	r24, Y+7	; 0x07
     2be:	28 2f       	mov	r18, r24
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	00 d0       	rcall	.+0      	; 0x2c4 <display_sensor_values+0x16a>
     2c4:	00 d0       	rcall	.+0      	; 0x2c6 <display_sensor_values+0x16c>
     2c6:	ed b7       	in	r30, 0x3d	; 61
     2c8:	fe b7       	in	r31, 0x3e	; 62
     2ca:	31 96       	adiw	r30, 0x01	; 1
     2cc:	88 e3       	ldi	r24, 0x38	; 56
     2ce:	91 e0       	ldi	r25, 0x01	; 1
     2d0:	91 83       	std	Z+1, r25	; 0x01
     2d2:	80 83       	st	Z, r24
     2d4:	33 83       	std	Z+3, r19	; 0x03
     2d6:	22 83       	std	Z+2, r18	; 0x02
     2d8:	0e 94 c6 12 	call	0x258c	; 0x258c <uart_mini_printf>
     2dc:	0f 90       	pop	r0
     2de:	0f 90       	pop	r0
     2e0:	0f 90       	pop	r0
     2e2:	0f 90       	pop	r0
		uart_mini_printf(", Data5: %03d", response_buffer[4]);
     2e4:	88 85       	ldd	r24, Y+8	; 0x08
     2e6:	28 2f       	mov	r18, r24
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	00 d0       	rcall	.+0      	; 0x2ec <display_sensor_values+0x192>
     2ec:	00 d0       	rcall	.+0      	; 0x2ee <display_sensor_values+0x194>
     2ee:	ed b7       	in	r30, 0x3d	; 61
     2f0:	fe b7       	in	r31, 0x3e	; 62
     2f2:	31 96       	adiw	r30, 0x01	; 1
     2f4:	86 e4       	ldi	r24, 0x46	; 70
     2f6:	91 e0       	ldi	r25, 0x01	; 1
     2f8:	91 83       	std	Z+1, r25	; 0x01
     2fa:	80 83       	st	Z, r24
     2fc:	33 83       	std	Z+3, r19	; 0x03
     2fe:	22 83       	std	Z+2, r18	; 0x02
     300:	0e 94 c6 12 	call	0x258c	; 0x258c <uart_mini_printf>
     304:	0f 90       	pop	r0
     306:	0f 90       	pop	r0
     308:	0f 90       	pop	r0
     30a:	0f 90       	pop	r0
		uart_mini_printf(", Data6: %03d", response_buffer[5]);
     30c:	89 85       	ldd	r24, Y+9	; 0x09
     30e:	28 2f       	mov	r18, r24
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	00 d0       	rcall	.+0      	; 0x314 <display_sensor_values+0x1ba>
     314:	00 d0       	rcall	.+0      	; 0x316 <display_sensor_values+0x1bc>
     316:	ed b7       	in	r30, 0x3d	; 61
     318:	fe b7       	in	r31, 0x3e	; 62
     31a:	31 96       	adiw	r30, 0x01	; 1
     31c:	84 e5       	ldi	r24, 0x54	; 84
     31e:	91 e0       	ldi	r25, 0x01	; 1
     320:	91 83       	std	Z+1, r25	; 0x01
     322:	80 83       	st	Z, r24
     324:	33 83       	std	Z+3, r19	; 0x03
     326:	22 83       	std	Z+2, r18	; 0x02
     328:	0e 94 c6 12 	call	0x258c	; 0x258c <uart_mini_printf>
     32c:	0f 90       	pop	r0
     32e:	0f 90       	pop	r0
     330:	0f 90       	pop	r0
     332:	0f 90       	pop	r0
		uart_mini_printf(", Data7: %03d", response_buffer[6]);                
     334:	8a 85       	ldd	r24, Y+10	; 0x0a
     336:	28 2f       	mov	r18, r24
     338:	30 e0       	ldi	r19, 0x00	; 0
     33a:	00 d0       	rcall	.+0      	; 0x33c <display_sensor_values+0x1e2>
     33c:	00 d0       	rcall	.+0      	; 0x33e <display_sensor_values+0x1e4>
     33e:	ed b7       	in	r30, 0x3d	; 61
     340:	fe b7       	in	r31, 0x3e	; 62
     342:	31 96       	adiw	r30, 0x01	; 1
     344:	82 e6       	ldi	r24, 0x62	; 98
     346:	91 e0       	ldi	r25, 0x01	; 1
     348:	91 83       	std	Z+1, r25	; 0x01
     34a:	80 83       	st	Z, r24
     34c:	33 83       	std	Z+3, r19	; 0x03
     34e:	22 83       	std	Z+2, r18	; 0x02
     350:	0e 94 c6 12 	call	0x258c	; 0x258c <uart_mini_printf>
     354:	0f 90       	pop	r0
     356:	0f 90       	pop	r0
     358:	0f 90       	pop	r0
     35a:	0f 90       	pop	r0
		uart_mini_printf(", Data8: %03d", response_buffer[7]);
     35c:	8b 85       	ldd	r24, Y+11	; 0x0b
     35e:	28 2f       	mov	r18, r24
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	00 d0       	rcall	.+0      	; 0x364 <display_sensor_values+0x20a>
     364:	00 d0       	rcall	.+0      	; 0x366 <display_sensor_values+0x20c>
     366:	ed b7       	in	r30, 0x3d	; 61
     368:	fe b7       	in	r31, 0x3e	; 62
     36a:	31 96       	adiw	r30, 0x01	; 1
     36c:	80 e7       	ldi	r24, 0x70	; 112
     36e:	91 e0       	ldi	r25, 0x01	; 1
     370:	91 83       	std	Z+1, r25	; 0x01
     372:	80 83       	st	Z, r24
     374:	33 83       	std	Z+3, r19	; 0x03
     376:	22 83       	std	Z+2, r18	; 0x02
     378:	0e 94 c6 12 	call	0x258c	; 0x258c <uart_mini_printf>
     37c:	0f 90       	pop	r0
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
		uart_mini_printf("\r\n");  
     384:	00 d0       	rcall	.+0      	; 0x386 <display_sensor_values+0x22c>
     386:	ed b7       	in	r30, 0x3d	; 61
     388:	fe b7       	in	r31, 0x3e	; 62
     38a:	31 96       	adiw	r30, 0x01	; 1
     38c:	8e e7       	ldi	r24, 0x7E	; 126
     38e:	91 e0       	ldi	r25, 0x01	; 1
     390:	91 83       	std	Z+1, r25	; 0x01
     392:	80 83       	st	Z, r24
     394:	0e 94 c6 12 	call	0x258c	; 0x258c <uart_mini_printf>
     398:	0f 90       	pop	r0
     39a:	0f 90       	pop	r0
     39c:	0a c0       	rjmp	.+20     	; 0x3b2 <display_sensor_values+0x258>
            }else{
                response_msg.cmd = CMD_ABORT;
     39e:	8c e0       	ldi	r24, 0x0C	; 12
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	9f 87       	std	Y+15, r25	; 0x0f
     3a4:	8e 87       	std	Y+14, r24	; 0x0e
          	    while (can_cmd(&response_msg) != CAN_CMD_ACCEPTED);
     3a6:	ce 01       	movw	r24, r28
     3a8:	0d 96       	adiw	r24, 0x0d	; 13
     3aa:	0e 94 76 05 	call	0xaec	; 0xaec <can_cmd>
     3ae:	88 23       	and	r24, r24
     3b0:	d1 f7       	brne	.-12     	; 0x3a6 <display_sensor_values+0x24c>
    uart_mini_printf("GOGO");

    while (1)
    {
        wait_for(100);  // x ms between refreshed screen
        for(j=0; j<NB_TARGET; j++)
     3b2:	8a 81       	ldd	r24, Y+2	; 0x02
     3b4:	8f 5f       	subi	r24, 0xFF	; 255
     3b6:	8a 83       	std	Y+2, r24	; 0x02
     3b8:	8a 81       	ldd	r24, Y+2	; 0x02
     3ba:	88 23       	and	r24, r24
     3bc:	09 f4       	brne	.+2      	; 0x3c0 <display_sensor_values+0x266>
     3be:	f0 ce       	rjmp	.-544    	; 0x1a0 <display_sensor_values+0x46>
     3c0:	e9 ce       	rjmp	.-558    	; 0x194 <display_sensor_values+0x3a>

000003c2 <req_sensor_data>:
        }
    }
}

void
req_sensor_data(U8 pakke, U8 node){
     3c2:	df 93       	push	r29
     3c4:	cf 93       	push	r28
     3c6:	cd b7       	in	r28, 0x3d	; 61
     3c8:	de b7       	in	r29, 0x3e	; 62
     3ca:	68 97       	sbiw	r28, 0x18	; 24
     3cc:	0f b6       	in	r0, 0x3f	; 63
     3ce:	f8 94       	cli
     3d0:	de bf       	out	0x3e, r29	; 62
     3d2:	0f be       	out	0x3f, r0	; 63
     3d4:	cd bf       	out	0x3d, r28	; 61
     3d6:	8f 8b       	std	Y+23, r24	; 0x17
     3d8:	68 8f       	std	Y+24, r22	; 0x18
	U8 tx_remote_buffer[9];
    	st_cmd_t tx_remote_msg;

	tx_remote_msg.pt_data = &tx_remote_buffer[0];
     3da:	ce 01       	movw	r24, r28
     3dc:	01 96       	adiw	r24, 0x01	; 1
     3de:	9b 8b       	std	Y+19, r25	; 0x13
     3e0:	8a 8b       	std	Y+18, r24	; 0x12
	tx_remote_msg.status = 0;
     3e2:	1c 8a       	std	Y+20, r1	; 0x14
	
	tx_remote_buffer[0]=pakke; // Nulstiller buffer
     3e4:	8f 89       	ldd	r24, Y+23	; 0x17
     3e6:	89 83       	std	Y+1, r24	; 0x01

        tx_remote_msg.id.std = ID_TAG_BASE+node;
     3e8:	88 8d       	ldd	r24, Y+24	; 0x18
     3ea:	88 2f       	mov	r24, r24
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	80 58       	subi	r24, 0x80	; 128
     3f0:	9f 4f       	sbci	r25, 0xFF	; 255
     3f2:	9e 87       	std	Y+14, r25	; 0x0e
     3f4:	8d 87       	std	Y+13, r24	; 0x0d
        tx_remote_msg.ctrl.ide = 0;
     3f6:	1e 8a       	std	Y+22, r1	; 0x16
        tx_remote_msg.ctrl.rtr = 1;
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	8d 8b       	std	Y+21, r24	; 0x15
        tx_remote_msg.dlc = 8; // Antal data bytes der skal modtages 
     3fc:	88 e0       	ldi	r24, 0x08	; 8
     3fe:	89 8b       	std	Y+17, r24	; 0x11
        tx_remote_msg.cmd = CMD_TX_DATA;
     400:	82 e0       	ldi	r24, 0x02	; 2
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	9c 87       	std	Y+12, r25	; 0x0c
     406:	8b 87       	std	Y+11, r24	; 0x0b
        // --- Tx Command
        while(can_cmd(&tx_remote_msg) != CAN_CMD_ACCEPTED);
     408:	ce 01       	movw	r24, r28
     40a:	0a 96       	adiw	r24, 0x0a	; 10
     40c:	0e 94 76 05 	call	0xaec	; 0xaec <can_cmd>
     410:	88 23       	and	r24, r24
     412:	d1 f7       	brne	.-12     	; 0x408 <req_sensor_data+0x46>

	// --- Wait for Tx remote completed
        while(can_get_status(&tx_remote_msg) == CAN_STATUS_NOT_COMPLETED);
     414:	ce 01       	movw	r24, r28
     416:	0a 96       	adiw	r24, 0x0a	; 10
     418:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <can_get_status>
     41c:	81 30       	cpi	r24, 0x01	; 1
     41e:	d1 f3       	breq	.-12     	; 0x414 <req_sensor_data+0x52>
}
     420:	68 96       	adiw	r28, 0x18	; 24
     422:	0f b6       	in	r0, 0x3f	; 63
     424:	f8 94       	cli
     426:	de bf       	out	0x3e, r29	; 62
     428:	0f be       	out	0x3f, r0	; 63
     42a:	cd bf       	out	0x3d, r28	; 61
     42c:	cf 91       	pop	r28
     42e:	df 91       	pop	r29
     430:	08 95       	ret

00000432 <can_clear_all_mob>:
//! @param none
//!
//! @return none
//------------------------------------------------------------------------------
void can_clear_all_mob(void)
{
     432:	df 93       	push	r29
     434:	cf 93       	push	r28
     436:	00 d0       	rcall	.+0      	; 0x438 <can_clear_all_mob+0x6>
     438:	0f 92       	push	r0
     43a:	cd b7       	in	r28, 0x3d	; 61
     43c:	de b7       	in	r29, 0x3e	; 62
U8  mob_number;
/*
    U8  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     43e:	1b 82       	std	Y+3, r1	; 0x03
     440:	1b c0       	rjmp	.+54     	; 0x478 <can_clear_all_mob+0x46>
    {
        CANPAGE = (mob_number << 4);    //! Page index
     442:	ed ee       	ldi	r30, 0xED	; 237
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	8b 81       	ldd	r24, Y+3	; 0x03
     448:	82 95       	swap	r24
     44a:	80 7f       	andi	r24, 0xF0	; 240
     44c:	80 83       	st	Z, r24
        Can_clear_mob();                //! All MOb Registers=0
     44e:	8e ee       	ldi	r24, 0xEE	; 238
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	9a 83       	std	Y+2, r25	; 0x02
     454:	89 83       	std	Y+1, r24	; 0x01
     456:	08 c0       	rjmp	.+16     	; 0x468 <can_clear_all_mob+0x36>
     458:	e9 81       	ldd	r30, Y+1	; 0x01
     45a:	fa 81       	ldd	r31, Y+2	; 0x02
     45c:	10 82       	st	Z, r1
     45e:	89 81       	ldd	r24, Y+1	; 0x01
     460:	9a 81       	ldd	r25, Y+2	; 0x02
     462:	01 96       	adiw	r24, 0x01	; 1
     464:	9a 83       	std	Y+2, r25	; 0x02
     466:	89 83       	std	Y+1, r24	; 0x01
     468:	89 81       	ldd	r24, Y+1	; 0x01
     46a:	9a 81       	ldd	r25, Y+2	; 0x02
     46c:	88 3f       	cpi	r24, 0xF8	; 248
     46e:	91 05       	cpc	r25, r1
     470:	98 f3       	brcs	.-26     	; 0x458 <can_clear_all_mob+0x26>
U8  mob_number;
/*
    U8  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     472:	8b 81       	ldd	r24, Y+3	; 0x03
     474:	8f 5f       	subi	r24, 0xFF	; 255
     476:	8b 83       	std	Y+3, r24	; 0x03
     478:	8b 81       	ldd	r24, Y+3	; 0x03
     47a:	8f 30       	cpi	r24, 0x0F	; 15
     47c:	10 f3       	brcs	.-60     	; 0x442 <can_clear_all_mob+0x10>
        {
            CANMSG = 0;                 //! MOb data FIFO
        }
*/
    }
}
     47e:	0f 90       	pop	r0
     480:	0f 90       	pop	r0
     482:	0f 90       	pop	r0
     484:	cf 91       	pop	r28
     486:	df 91       	pop	r29
     488:	08 95       	ret

0000048a <can_get_mob_free>:
//! @return Handle of MOb.
//!          - MOb[0] upto MOb[LAST_MOB_NB]
//!          - 0xFF if no MOb
//------------------------------------------------------------------------------
U8 can_get_mob_free(void)
{
     48a:	df 93       	push	r29
     48c:	cf 93       	push	r28
     48e:	00 d0       	rcall	.+0      	; 0x490 <can_get_mob_free+0x6>
     490:	0f 92       	push	r0
     492:	cd b7       	in	r28, 0x3d	; 61
     494:	de b7       	in	r29, 0x3e	; 62
    U8 mob_number, page_saved;

    page_saved = CANPAGE;
     496:	ed ee       	ldi	r30, 0xED	; 237
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	80 81       	ld	r24, Z
     49c:	89 83       	std	Y+1, r24	; 0x01
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     49e:	1a 82       	std	Y+2, r1	; 0x02
     4a0:	19 c0       	rjmp	.+50     	; 0x4d4 <can_get_mob_free+0x4a>
    {
        Can_set_mob(mob_number);
     4a2:	ed ee       	ldi	r30, 0xED	; 237
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	8a 81       	ldd	r24, Y+2	; 0x02
     4a8:	82 95       	swap	r24
     4aa:	80 7f       	andi	r24, 0xF0	; 240
     4ac:	80 83       	st	Z, r24
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
     4ae:	ef ee       	ldi	r30, 0xEF	; 239
     4b0:	f0 e0       	ldi	r31, 0x00	; 0
     4b2:	80 81       	ld	r24, Z
     4b4:	88 2f       	mov	r24, r24
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	80 7c       	andi	r24, 0xC0	; 192
     4ba:	90 70       	andi	r25, 0x00	; 0
     4bc:	00 97       	sbiw	r24, 0x00	; 0
     4be:	39 f4       	brne	.+14     	; 0x4ce <can_get_mob_free+0x44>
        {
            CANPAGE = page_saved;
     4c0:	ed ee       	ldi	r30, 0xED	; 237
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	89 81       	ldd	r24, Y+1	; 0x01
     4c6:	80 83       	st	Z, r24
            return (mob_number);
     4c8:	8a 81       	ldd	r24, Y+2	; 0x02
     4ca:	8b 83       	std	Y+3, r24	; 0x03
     4cc:	0c c0       	rjmp	.+24     	; 0x4e6 <can_get_mob_free+0x5c>
U8 can_get_mob_free(void)
{
    U8 mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     4ce:	8a 81       	ldd	r24, Y+2	; 0x02
     4d0:	8f 5f       	subi	r24, 0xFF	; 255
     4d2:	8a 83       	std	Y+2, r24	; 0x02
     4d4:	8a 81       	ldd	r24, Y+2	; 0x02
     4d6:	8f 30       	cpi	r24, 0x0F	; 15
     4d8:	20 f3       	brcs	.-56     	; 0x4a2 <can_get_mob_free+0x18>
        {
            CANPAGE = page_saved;
            return (mob_number);
        }
    }
    CANPAGE = page_saved;
     4da:	ed ee       	ldi	r30, 0xED	; 237
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	89 81       	ldd	r24, Y+1	; 0x01
     4e0:	80 83       	st	Z, r24
    return (NO_MOB);
     4e2:	8f ef       	ldi	r24, 0xFF	; 255
     4e4:	8b 83       	std	Y+3, r24	; 0x03
     4e6:	8b 81       	ldd	r24, Y+3	; 0x03
}
     4e8:	0f 90       	pop	r0
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	cf 91       	pop	r28
     4f0:	df 91       	pop	r29
     4f2:	08 95       	ret

000004f4 <can_get_mob_status>:
//!          -  MOB_CRC_ERROR
//!          -  MOB_STUFF_ERROR
//!          -  MOB_BIT_ERROR
//------------------------------------------------------------------------------
U8 can_get_mob_status(void)
{
     4f4:	df 93       	push	r29
     4f6:	cf 93       	push	r28
     4f8:	00 d0       	rcall	.+0      	; 0x4fa <can_get_mob_status+0x6>
     4fa:	0f 92       	push	r0
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
    U8 mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     500:	ef ee       	ldi	r30, 0xEF	; 239
     502:	f0 e0       	ldi	r31, 0x00	; 0
     504:	80 81       	ld	r24, Z
     506:	88 2f       	mov	r24, r24
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	80 7c       	andi	r24, 0xC0	; 192
     50c:	90 70       	andi	r25, 0x00	; 0
     50e:	00 97       	sbiw	r24, 0x00	; 0
     510:	19 f4       	brne	.+6      	; 0x518 <can_get_mob_status+0x24>
     512:	8f ef       	ldi	r24, 0xFF	; 255
     514:	8b 83       	std	Y+3, r24	; 0x03
     516:	1d c0       	rjmp	.+58     	; 0x552 <can_get_mob_status+0x5e>

    canstmob_copy = CANSTMOB; // Copy for test integrity
     518:	ee ee       	ldi	r30, 0xEE	; 238
     51a:	f0 e0       	ldi	r31, 0x00	; 0
     51c:	80 81       	ld	r24, Z
     51e:	89 83       	std	Y+1, r24	; 0x01

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
     520:	89 81       	ldd	r24, Y+1	; 0x01
     522:	80 7e       	andi	r24, 0xE0	; 224
     524:	8a 83       	std	Y+2, r24	; 0x02
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
     526:	8a 81       	ldd	r24, Y+2	; 0x02
     528:	80 32       	cpi	r24, 0x20	; 32
     52a:	31 f0       	breq	.+12     	; 0x538 <can_get_mob_status+0x44>
     52c:	8a 81       	ldd	r24, Y+2	; 0x02
     52e:	80 34       	cpi	r24, 0x40	; 64
     530:	19 f0       	breq	.+6      	; 0x538 <can_get_mob_status+0x44>
     532:	8a 81       	ldd	r24, Y+2	; 0x02
     534:	80 3a       	cpi	r24, 0xA0	; 160
     536:	19 f4       	brne	.+6      	; 0x53e <can_get_mob_status+0x4a>
         (mob_status==MOB_TX_COMPLETED) ||   \
         (mob_status==MOB_RX_COMPLETED_DLCW) ) { return(mob_status); }
     538:	8a 81       	ldd	r24, Y+2	; 0x02
     53a:	8b 83       	std	Y+3, r24	; 0x03
     53c:	0a c0       	rjmp	.+20     	; 0x552 <can_get_mob_status+0x5e>
    // - MOb Status bit_0 = MOB_ACK_ERROR
    // - MOb Status bit_1 = MOB_FORM_ERROR
    // - MOb Status bit_2 = MOB_CRC_ERROR
    // - MOb Status bit_3 = MOB_STUFF_ERROR
    // - MOb Status bit_4 = MOB_BIT_ERROR
    mob_status = canstmob_copy & ERR_MOB_MSK;
     53e:	89 81       	ldd	r24, Y+1	; 0x01
     540:	8f 71       	andi	r24, 0x1F	; 31
     542:	8a 83       	std	Y+2, r24	; 0x02
    if (mob_status != 0) { return(mob_status); }
     544:	8a 81       	ldd	r24, Y+2	; 0x02
     546:	88 23       	and	r24, r24
     548:	19 f0       	breq	.+6      	; 0x550 <can_get_mob_status+0x5c>
     54a:	8a 81       	ldd	r24, Y+2	; 0x02
     54c:	8b 83       	std	Y+3, r24	; 0x03
     54e:	01 c0       	rjmp	.+2      	; 0x552 <can_get_mob_status+0x5e>

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
     550:	1b 82       	std	Y+3, r1	; 0x03
     552:	8b 81       	ldd	r24, Y+3	; 0x03
}
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	0f 90       	pop	r0
     55a:	cf 91       	pop	r28
     55c:	df 91       	pop	r29
     55e:	08 95       	ret

00000560 <can_get_data>:
//! @param CAN message data address.
//!
//! @return none.
//------------------------------------------------------------------------------
void can_get_data(U8* p_can_message_data)
{
     560:	df 93       	push	r29
     562:	cf 93       	push	r28
     564:	00 d0       	rcall	.+0      	; 0x566 <can_get_data+0x6>
     566:	0f 92       	push	r0
     568:	cd b7       	in	r28, 0x3d	; 61
     56a:	de b7       	in	r29, 0x3e	; 62
     56c:	9b 83       	std	Y+3, r25	; 0x03
     56e:	8a 83       	std	Y+2, r24	; 0x02
    U8 data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
     570:	19 82       	std	Y+1, r1	; 0x01
     572:	0f c0       	rjmp	.+30     	; 0x592 <can_get_data+0x32>
    {
        *(p_can_message_data + data_index) = CANMSG;
     574:	89 81       	ldd	r24, Y+1	; 0x01
     576:	28 2f       	mov	r18, r24
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	8a 81       	ldd	r24, Y+2	; 0x02
     57c:	9b 81       	ldd	r25, Y+3	; 0x03
     57e:	dc 01       	movw	r26, r24
     580:	a2 0f       	add	r26, r18
     582:	b3 1f       	adc	r27, r19
     584:	ea ef       	ldi	r30, 0xFA	; 250
     586:	f0 e0       	ldi	r31, 0x00	; 0
     588:	80 81       	ld	r24, Z
     58a:	8c 93       	st	X, r24
//------------------------------------------------------------------------------
void can_get_data(U8* p_can_message_data)
{
    U8 data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
     58c:	89 81       	ldd	r24, Y+1	; 0x01
     58e:	8f 5f       	subi	r24, 0xFF	; 255
     590:	89 83       	std	Y+1, r24	; 0x01
     592:	89 81       	ldd	r24, Y+1	; 0x01
     594:	28 2f       	mov	r18, r24
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	ef ee       	ldi	r30, 0xEF	; 239
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	80 81       	ld	r24, Z
     59e:	88 2f       	mov	r24, r24
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	8f 70       	andi	r24, 0x0F	; 15
     5a4:	90 70       	andi	r25, 0x00	; 0
     5a6:	28 17       	cp	r18, r24
     5a8:	39 07       	cpc	r19, r25
     5aa:	24 f3       	brlt	.-56     	; 0x574 <can_get_data+0x14>
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
     5ac:	0f 90       	pop	r0
     5ae:	0f 90       	pop	r0
     5b0:	0f 90       	pop	r0
     5b2:	cf 91       	pop	r28
     5b4:	df 91       	pop	r29
     5b6:	08 95       	ret

000005b8 <can_auto_baudrate>:
//! @return Baudrate Status
//!         ==0: research of bit timing configuration failed
//!         ==1: baudrate performed
//------------------------------------------------------------------------------
U8 can_auto_baudrate (U8 mode)
{
     5b8:	df 93       	push	r29
     5ba:	cf 93       	push	r28
     5bc:	cd b7       	in	r28, 0x3d	; 61
     5be:	de b7       	in	r29, 0x3e	; 62
     5c0:	68 97       	sbiw	r28, 0x18	; 24
     5c2:	0f b6       	in	r0, 0x3f	; 63
     5c4:	f8 94       	cli
     5c6:	de bf       	out	0x3e, r29	; 62
     5c8:	0f be       	out	0x3f, r0	; 63
     5ca:	cd bf       	out	0x3d, r28	; 61
     5cc:	8a 8b       	std	Y+18, r24	; 0x12
    U8  u8_temp0;                               //! Temporary variable
    U8  brp, prs, ntq, phs1, phs2;              //! Bit timing segment variables
    U8  phs1_inc;                               //! Computing needed
    U8  bt_not_found, wait_for_rx, evaluate;    //! Keys for "while()" loops
    U8  try_conf;                               //! Key for configurate CAN
    U8  ovrtim_flag=0;                          //! Timer overflow count
     5ce:	1e 82       	std	Y+6, r1	; 0x06
    U16 conf_index;                             //! Count of bit timing configuration tried
    U8  bt_performed;                           //! Return flag

    //! --- Default setting
    phs1_inc = evaluate = 0;
     5d0:	18 86       	std	Y+8, r1	; 0x08
     5d2:	88 85       	ldd	r24, Y+8	; 0x08
     5d4:	8b 87       	std	Y+11, r24	; 0x0b
    bt_performed = 0;
     5d6:	1b 82       	std	Y+3, r1	; 0x03
    conf_index = 0;
     5d8:	1d 82       	std	Y+5, r1	; 0x05
     5da:	1c 82       	std	Y+4, r1	; 0x04
    bt_not_found = 1;
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	8a 87       	std	Y+10, r24	; 0x0a

    //! --- Init segment variables with MIN values if mode=0
    //!     or init segment variables with CANBTx if mode=1
    if (mode==0)
     5e0:	8a 89       	ldd	r24, Y+18	; 0x12
     5e2:	88 23       	and	r24, r24
     5e4:	a9 f4       	brne	.+42     	; 0x610 <can_auto_baudrate+0x58>
    {
        brp  = BRP_MIN;
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	88 8b       	std	Y+16, r24	; 0x10
        ntq  = NTQ_MIN;
     5ea:	88 e0       	ldi	r24, 0x08	; 8
     5ec:	8e 87       	std	Y+14, r24	; 0x0e
        phs1 = PHS1_MIN;
     5ee:	82 e0       	ldi	r24, 0x02	; 2
     5f0:	8d 87       	std	Y+13, r24	; 0x0d
        phs2 = PHS2_MIN;
     5f2:	82 e0       	ldi	r24, 0x02	; 2
     5f4:	8c 87       	std	Y+12, r24	; 0x0c
        prs  = ntq - ( phs1 + phs2 + 1 );
     5f6:	9d 85       	ldd	r25, Y+13	; 0x0d
     5f8:	8c 85       	ldd	r24, Y+12	; 0x0c
     5fa:	89 0f       	add	r24, r25
     5fc:	98 2f       	mov	r25, r24
     5fe:	90 95       	com	r25
     600:	8e 85       	ldd	r24, Y+14	; 0x0e
     602:	89 0f       	add	r24, r25
     604:	8f 87       	std	Y+15, r24	; 0x0f
        try_conf = 1;       //! Try this configuration
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	8f 83       	std	Y+7, r24	; 0x07
        wait_for_rx = 1;    //! Enable "while (wait_for_rx ..." loop
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	89 87       	std	Y+9, r24	; 0x09
     60e:	a5 c0       	rjmp	.+330    	; 0x75a <can_auto_baudrate+0x1a2>
    }
    else //! mode = 1
    {
        brp  = Max ((((CANBT1 &  BRP_MSK) >> 1) +1) , BRP_MIN );
     610:	e2 ee       	ldi	r30, 0xE2	; 226
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	80 81       	ld	r24, Z
     616:	88 2f       	mov	r24, r24
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	8e 77       	andi	r24, 0x7E	; 126
     61c:	90 70       	andi	r25, 0x00	; 0
     61e:	95 95       	asr	r25
     620:	87 95       	ror	r24
     622:	01 96       	adiw	r24, 0x01	; 1
     624:	82 30       	cpi	r24, 0x02	; 2
     626:	91 05       	cpc	r25, r1
     628:	6c f0       	brlt	.+26     	; 0x644 <can_auto_baudrate+0x8c>
     62a:	e2 ee       	ldi	r30, 0xE2	; 226
     62c:	f0 e0       	ldi	r31, 0x00	; 0
     62e:	80 81       	ld	r24, Z
     630:	88 2f       	mov	r24, r24
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	8e 77       	andi	r24, 0x7E	; 126
     636:	90 70       	andi	r25, 0x00	; 0
     638:	95 95       	asr	r25
     63a:	87 95       	ror	r24
     63c:	98 2f       	mov	r25, r24
     63e:	9f 5f       	subi	r25, 0xFF	; 255
     640:	98 8f       	std	Y+24, r25	; 0x18
     642:	02 c0       	rjmp	.+4      	; 0x648 <can_auto_baudrate+0x90>
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	88 8f       	std	Y+24, r24	; 0x18
     648:	98 8d       	ldd	r25, Y+24	; 0x18
     64a:	98 8b       	std	Y+16, r25	; 0x10
        prs  = Max ((((CANBT2 &  PRS_MSK) >> 1) +1) , PRS_MIN );
     64c:	e3 ee       	ldi	r30, 0xE3	; 227
     64e:	f0 e0       	ldi	r31, 0x00	; 0
     650:	80 81       	ld	r24, Z
     652:	88 2f       	mov	r24, r24
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	8e 70       	andi	r24, 0x0E	; 14
     658:	90 70       	andi	r25, 0x00	; 0
     65a:	95 95       	asr	r25
     65c:	87 95       	ror	r24
     65e:	01 96       	adiw	r24, 0x01	; 1
     660:	82 30       	cpi	r24, 0x02	; 2
     662:	91 05       	cpc	r25, r1
     664:	6c f0       	brlt	.+26     	; 0x680 <can_auto_baudrate+0xc8>
     666:	e3 ee       	ldi	r30, 0xE3	; 227
     668:	f0 e0       	ldi	r31, 0x00	; 0
     66a:	80 81       	ld	r24, Z
     66c:	88 2f       	mov	r24, r24
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	8e 70       	andi	r24, 0x0E	; 14
     672:	90 70       	andi	r25, 0x00	; 0
     674:	95 95       	asr	r25
     676:	87 95       	ror	r24
     678:	98 2f       	mov	r25, r24
     67a:	9f 5f       	subi	r25, 0xFF	; 255
     67c:	9f 8b       	std	Y+23, r25	; 0x17
     67e:	02 c0       	rjmp	.+4      	; 0x684 <can_auto_baudrate+0xcc>
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	8f 8b       	std	Y+23, r24	; 0x17
     684:	9f 89       	ldd	r25, Y+23	; 0x17
     686:	9f 87       	std	Y+15, r25	; 0x0f
        phs1 = Max ((((CANBT3 & PHS1_MSK) >> 1) +1) , PHS1_MIN);
     688:	e4 ee       	ldi	r30, 0xE4	; 228
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	80 81       	ld	r24, Z
     68e:	88 2f       	mov	r24, r24
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	8e 70       	andi	r24, 0x0E	; 14
     694:	90 70       	andi	r25, 0x00	; 0
     696:	95 95       	asr	r25
     698:	87 95       	ror	r24
     69a:	01 96       	adiw	r24, 0x01	; 1
     69c:	83 30       	cpi	r24, 0x03	; 3
     69e:	91 05       	cpc	r25, r1
     6a0:	6c f0       	brlt	.+26     	; 0x6bc <can_auto_baudrate+0x104>
     6a2:	e4 ee       	ldi	r30, 0xE4	; 228
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	80 81       	ld	r24, Z
     6a8:	88 2f       	mov	r24, r24
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	8e 70       	andi	r24, 0x0E	; 14
     6ae:	90 70       	andi	r25, 0x00	; 0
     6b0:	95 95       	asr	r25
     6b2:	87 95       	ror	r24
     6b4:	98 2f       	mov	r25, r24
     6b6:	9f 5f       	subi	r25, 0xFF	; 255
     6b8:	9e 8b       	std	Y+22, r25	; 0x16
     6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <can_auto_baudrate+0x108>
     6bc:	82 e0       	ldi	r24, 0x02	; 2
     6be:	8e 8b       	std	Y+22, r24	; 0x16
     6c0:	9e 89       	ldd	r25, Y+22	; 0x16
     6c2:	9d 87       	std	Y+13, r25	; 0x0d
        phs2 = Max ((((CANBT3 & PHS2_MSK) >> 4) +1) , PHS2_MIN);
     6c4:	e4 ee       	ldi	r30, 0xE4	; 228
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	80 81       	ld	r24, Z
     6ca:	88 2f       	mov	r24, r24
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	80 77       	andi	r24, 0x70	; 112
     6d0:	90 70       	andi	r25, 0x00	; 0
     6d2:	95 95       	asr	r25
     6d4:	87 95       	ror	r24
     6d6:	95 95       	asr	r25
     6d8:	87 95       	ror	r24
     6da:	95 95       	asr	r25
     6dc:	87 95       	ror	r24
     6de:	95 95       	asr	r25
     6e0:	87 95       	ror	r24
     6e2:	01 96       	adiw	r24, 0x01	; 1
     6e4:	83 30       	cpi	r24, 0x03	; 3
     6e6:	91 05       	cpc	r25, r1
     6e8:	9c f0       	brlt	.+38     	; 0x710 <can_auto_baudrate+0x158>
     6ea:	e4 ee       	ldi	r30, 0xE4	; 228
     6ec:	f0 e0       	ldi	r31, 0x00	; 0
     6ee:	80 81       	ld	r24, Z
     6f0:	88 2f       	mov	r24, r24
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	80 77       	andi	r24, 0x70	; 112
     6f6:	90 70       	andi	r25, 0x00	; 0
     6f8:	95 95       	asr	r25
     6fa:	87 95       	ror	r24
     6fc:	95 95       	asr	r25
     6fe:	87 95       	ror	r24
     700:	95 95       	asr	r25
     702:	87 95       	ror	r24
     704:	95 95       	asr	r25
     706:	87 95       	ror	r24
     708:	98 2f       	mov	r25, r24
     70a:	9f 5f       	subi	r25, 0xFF	; 255
     70c:	9d 8b       	std	Y+21, r25	; 0x15
     70e:	02 c0       	rjmp	.+4      	; 0x714 <can_auto_baudrate+0x15c>
     710:	82 e0       	ldi	r24, 0x02	; 2
     712:	8d 8b       	std	Y+21, r24	; 0x15
     714:	9d 89       	ldd	r25, Y+21	; 0x15
     716:	9c 87       	std	Y+12, r25	; 0x0c
        ntq  = Max ((prs + phs1 + phs2 + 1) , NTQ_MIN);
     718:	8f 85       	ldd	r24, Y+15	; 0x0f
     71a:	28 2f       	mov	r18, r24
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	8d 85       	ldd	r24, Y+13	; 0x0d
     720:	88 2f       	mov	r24, r24
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	28 0f       	add	r18, r24
     726:	39 1f       	adc	r19, r25
     728:	8c 85       	ldd	r24, Y+12	; 0x0c
     72a:	88 2f       	mov	r24, r24
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	82 0f       	add	r24, r18
     730:	93 1f       	adc	r25, r19
     732:	01 96       	adiw	r24, 0x01	; 1
     734:	9c 8b       	std	Y+20, r25	; 0x14
     736:	8b 8b       	std	Y+19, r24	; 0x13
     738:	8b 89       	ldd	r24, Y+19	; 0x13
     73a:	9c 89       	ldd	r25, Y+20	; 0x14
     73c:	88 30       	cpi	r24, 0x08	; 8
     73e:	91 05       	cpc	r25, r1
     740:	24 f4       	brge	.+8      	; 0x74a <can_auto_baudrate+0x192>
     742:	88 e0       	ldi	r24, 0x08	; 8
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	9c 8b       	std	Y+20, r25	; 0x14
     748:	8b 8b       	std	Y+19, r24	; 0x13
     74a:	9b 89       	ldd	r25, Y+19	; 0x13
     74c:	9e 87       	std	Y+14, r25	; 0x0e
        phs1_inc = evaluate = 1;   //! To enter in "while (evaluate ..." loop
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	88 87       	std	Y+8, r24	; 0x08
     752:	88 85       	ldd	r24, Y+8	; 0x08
     754:	8b 87       	std	Y+11, r24	; 0x0b
        try_conf = 0;       //! Look for the next configuration
     756:	1f 82       	std	Y+7, r1	; 0x07
        wait_for_rx = 0;    //! Skip "while (wait_for_rx ..." loop
     758:	19 86       	std	Y+9, r1	; 0x09
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
     75a:	19 8a       	std	Y+17, r1	; 0x11
     75c:	1b c0       	rjmp	.+54     	; 0x794 <can_auto_baudrate+0x1dc>
    {
        Can_set_mob(u8_temp0);  //! Page index
     75e:	ed ee       	ldi	r30, 0xED	; 237
     760:	f0 e0       	ldi	r31, 0x00	; 0
     762:	89 89       	ldd	r24, Y+17	; 0x11
     764:	82 95       	swap	r24
     766:	80 7f       	andi	r24, 0xF0	; 240
     768:	80 83       	st	Z, r24
        Can_clear_mob();        //! All MOb Registers = 0x00
     76a:	8e ee       	ldi	r24, 0xEE	; 238
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	9a 83       	std	Y+2, r25	; 0x02
     770:	89 83       	std	Y+1, r24	; 0x01
     772:	08 c0       	rjmp	.+16     	; 0x784 <can_auto_baudrate+0x1cc>
     774:	e9 81       	ldd	r30, Y+1	; 0x01
     776:	fa 81       	ldd	r31, Y+2	; 0x02
     778:	10 82       	st	Z, r1
     77a:	89 81       	ldd	r24, Y+1	; 0x01
     77c:	9a 81       	ldd	r25, Y+2	; 0x02
     77e:	01 96       	adiw	r24, 0x01	; 1
     780:	9a 83       	std	Y+2, r25	; 0x02
     782:	89 83       	std	Y+1, r24	; 0x01
     784:	89 81       	ldd	r24, Y+1	; 0x01
     786:	9a 81       	ldd	r25, Y+2	; 0x02
     788:	88 3f       	cpi	r24, 0xF8	; 248
     78a:	91 05       	cpc	r25, r1
     78c:	98 f3       	brcs	.-26     	; 0x774 <can_auto_baudrate+0x1bc>
        try_conf = 0;       //! Look for the next configuration
        wait_for_rx = 0;    //! Skip "while (wait_for_rx ..." loop
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
     78e:	89 89       	ldd	r24, Y+17	; 0x11
     790:	8f 5f       	subi	r24, 0xFF	; 255
     792:	89 8b       	std	Y+17, r24	; 0x11
     794:	89 89       	ldd	r24, Y+17	; 0x11
     796:	8f 30       	cpi	r24, 0x0F	; 15
     798:	10 f3       	brcs	.-60     	; 0x75e <can_auto_baudrate+0x1a6>
     79a:	61 c1       	rjmp	.+706    	; 0xa5e <can_auto_baudrate+0x4a6>
        Can_clear_mob();        //! All MOb Registers = 0x00
    }

    while (bt_not_found == 1)
    {
        if (try_conf == 1)
     79c:	8f 81       	ldd	r24, Y+7	; 0x07
     79e:	81 30       	cpi	r24, 0x01	; 1
     7a0:	09 f0       	breq	.+2      	; 0x7a4 <can_auto_baudrate+0x1ec>
     7a2:	c2 c0       	rjmp	.+388    	; 0x928 <can_auto_baudrate+0x370>
        {
            Can_reset();
     7a4:	e8 ed       	ldi	r30, 0xD8	; 216
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	80 83       	st	Z, r24
            conf_index++;
     7ac:	8c 81       	ldd	r24, Y+4	; 0x04
     7ae:	9d 81       	ldd	r25, Y+5	; 0x05
     7b0:	01 96       	adiw	r24, 0x01	; 1
     7b2:	9d 83       	std	Y+5, r25	; 0x05
     7b4:	8c 83       	std	Y+4, r24	; 0x04
            ovrtim_flag=0;
     7b6:	1e 82       	std	Y+6, r1	; 0x06

            //! --- CANBTx registers update (sjw = phs2/2, 3 sample points)
            CANBT1 = ((brp-1) << BRP);
     7b8:	e2 ee       	ldi	r30, 0xE2	; 226
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	88 89       	ldd	r24, Y+16	; 0x10
     7be:	81 50       	subi	r24, 0x01	; 1
     7c0:	88 0f       	add	r24, r24
     7c2:	80 83       	st	Z, r24
            CANBT2 = (((phs2 >> 1)-1) << SJW) |((prs-1) << PRS);
     7c4:	e3 ee       	ldi	r30, 0xE3	; 227
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	8c 85       	ldd	r24, Y+12	; 0x0c
     7ca:	86 95       	lsr	r24
     7cc:	88 2f       	mov	r24, r24
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	01 97       	sbiw	r24, 0x01	; 1
     7d2:	88 0f       	add	r24, r24
     7d4:	99 1f       	adc	r25, r25
     7d6:	82 95       	swap	r24
     7d8:	92 95       	swap	r25
     7da:	90 7f       	andi	r25, 0xF0	; 240
     7dc:	98 27       	eor	r25, r24
     7de:	80 7f       	andi	r24, 0xF0	; 240
     7e0:	98 27       	eor	r25, r24
     7e2:	28 2f       	mov	r18, r24
     7e4:	8f 85       	ldd	r24, Y+15	; 0x0f
     7e6:	88 2f       	mov	r24, r24
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	01 97       	sbiw	r24, 0x01	; 1
     7ec:	88 0f       	add	r24, r24
     7ee:	99 1f       	adc	r25, r25
     7f0:	82 2b       	or	r24, r18
     7f2:	80 83       	st	Z, r24
            CANBT3 = (((phs2-1) << PHS2) | ((phs1-1) << PHS1) | (1<<SMP));
     7f4:	e4 ee       	ldi	r30, 0xE4	; 228
     7f6:	f0 e0       	ldi	r31, 0x00	; 0
     7f8:	8c 85       	ldd	r24, Y+12	; 0x0c
     7fa:	88 2f       	mov	r24, r24
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	01 97       	sbiw	r24, 0x01	; 1
     800:	82 95       	swap	r24
     802:	92 95       	swap	r25
     804:	90 7f       	andi	r25, 0xF0	; 240
     806:	98 27       	eor	r25, r24
     808:	80 7f       	andi	r24, 0xF0	; 240
     80a:	98 27       	eor	r25, r24
     80c:	28 2f       	mov	r18, r24
     80e:	8d 85       	ldd	r24, Y+13	; 0x0d
     810:	88 2f       	mov	r24, r24
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	01 97       	sbiw	r24, 0x01	; 1
     816:	88 0f       	add	r24, r24
     818:	99 1f       	adc	r25, r25
     81a:	82 2b       	or	r24, r18
     81c:	81 60       	ori	r24, 0x01	; 1
     81e:	80 83       	st	Z, r24

            //! --- Set CAN-Timer - Used for time-out
            //!     There are 641 (0x281) possible evaluations. The first one provides the faster
            //!         the faster bit timing, the last one gives the slower. It is necessary to
            //!         modulate the time-out versus bit timing (0x281>>3=0x50, matching an U8).
            CANTCON = (U8)(conf_index >> 3);
     820:	e5 ee       	ldi	r30, 0xE5	; 229
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	8c 81       	ldd	r24, Y+4	; 0x04
     826:	9d 81       	ldd	r25, Y+5	; 0x05
     828:	96 95       	lsr	r25
     82a:	87 95       	ror	r24
     82c:	96 95       	lsr	r25
     82e:	87 95       	ror	r24
     830:	96 95       	lsr	r25
     832:	87 95       	ror	r24
     834:	80 83       	st	Z, r24

            //! --- MOb configuration
            Can_set_mob(MOB_0);                 //! Use MOb-0
     836:	ed ee       	ldi	r30, 0xED	; 237
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	10 82       	st	Z, r1
            CANSTMOB = 0;                       //! Reset MOb status (undone by "Can_reset()")
     83c:	ee ee       	ldi	r30, 0xEE	; 238
     83e:	f0 e0       	ldi	r31, 0x00	; 0
     840:	10 82       	st	Z, r1
            CANCDMOB = (MOB_Rx_ENA  << CONMOB); //! MOb 0 in receive mode
     842:	ef ee       	ldi	r30, 0xEF	; 239
     844:	f0 e0       	ldi	r31, 0x00	; 0
     846:	80 e8       	ldi	r24, 0x80	; 128
     848:	80 83       	st	Z, r24

            //! CAN controller configuration
            CANGCON = (1<<LISTEN) | (1<<ENASTB);//! Enable CAN controller in "listen" mode
     84a:	e8 ed       	ldi	r30, 0xD8	; 216
     84c:	f0 e0       	ldi	r31, 0x00	; 0
     84e:	8a e0       	ldi	r24, 0x0A	; 10
     850:	80 83       	st	Z, r24
            while ((CANGSTA & (1<<ENFG)) == 0); //! Wait for Enable OK
     852:	e9 ed       	ldi	r30, 0xD9	; 217
     854:	f0 e0       	ldi	r31, 0x00	; 0
     856:	80 81       	ld	r24, Z
     858:	88 2f       	mov	r24, r24
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	84 70       	andi	r24, 0x04	; 4
     85e:	90 70       	andi	r25, 0x00	; 0
     860:	00 97       	sbiw	r24, 0x00	; 0
     862:	b9 f3       	breq	.-18     	; 0x852 <can_auto_baudrate+0x29a>
            CANGIT = 0xFF;                      //! Reset General errors and OVRTIM flag
     864:	ea ed       	ldi	r30, 0xDA	; 218
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	8f ef       	ldi	r24, 0xFF	; 255
     86a:	80 83       	st	Z, r24
     86c:	5d c0       	rjmp	.+186    	; 0x928 <can_auto_baudrate+0x370>
        //!     Try to perform a CAN message reception in "LISTEN" mode without error and
        //!     before a time_out done by CAN-Timer.
        //!     Else gives the hand to "EVALUATE LOOP" to have a new set of bit timing.
        while (wait_for_rx == 1)
        {
            u8_temp0 = CANSTMOB;
     86e:	ee ee       	ldi	r30, 0xEE	; 238
     870:	f0 e0       	ldi	r31, 0x00	; 0
     872:	80 81       	ld	r24, Z
     874:	89 8b       	std	Y+17, r24	; 0x11
            //! --- RxOK received ?
            if ((u8_temp0 & (1<<RXOK)) != 0)
     876:	89 89       	ldd	r24, Y+17	; 0x11
     878:	88 2f       	mov	r24, r24
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	80 72       	andi	r24, 0x20	; 32
     87e:	90 70       	andi	r25, 0x00	; 0
     880:	00 97       	sbiw	r24, 0x00	; 0
     882:	c9 f0       	breq	.+50     	; 0x8b6 <can_auto_baudrate+0x2fe>
            {   //! --- It is the successful output of "can_auto_baudrate" function
                wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
     884:	19 86       	std	Y+9, r1	; 0x09
                evaluate = 0;       //! Will skip "while (evaluate ..." loop
     886:	18 86       	std	Y+8, r1	; 0x08
                bt_not_found = 0;   //! Out of "while (bt_not_found ..." loop
     888:	1a 86       	std	Y+10, r1	; 0x0a
                bt_performed = 1;   //! Return flag = TRUE
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	8b 83       	std	Y+3, r24	; 0x03
                DISABLE_MOB;        //! Disable MOb-0
     88e:	af ee       	ldi	r26, 0xEF	; 239
     890:	b0 e0       	ldi	r27, 0x00	; 0
     892:	ef ee       	ldi	r30, 0xEF	; 239
     894:	f0 e0       	ldi	r31, 0x00	; 0
     896:	80 81       	ld	r24, Z
     898:	8f 73       	andi	r24, 0x3F	; 63
     89a:	8c 93       	st	X, r24
                CANGCON = 0x00;     //! Disable CAN controller & reset "listen" mode
     89c:	e8 ed       	ldi	r30, 0xD8	; 216
     89e:	f0 e0       	ldi	r31, 0x00	; 0
     8a0:	10 82       	st	Z, r1
                while ((CANGSTA & (1<<ENFG)) != 0); //! Wait for Disable OK
     8a2:	e9 ed       	ldi	r30, 0xD9	; 217
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	80 81       	ld	r24, Z
     8a8:	88 2f       	mov	r24, r24
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	84 70       	andi	r24, 0x04	; 4
     8ae:	90 70       	andi	r25, 0x00	; 0
     8b0:	00 97       	sbiw	r24, 0x00	; 0
     8b2:	b9 f7       	brne	.-18     	; 0x8a2 <can_auto_baudrate+0x2ea>
     8b4:	39 c0       	rjmp	.+114    	; 0x928 <can_auto_baudrate+0x370>
            }
             //! --- Else stop if any errors
             else
            {
                //! --- MOb error ?
                if ((u8_temp0 & ((1<<BERR)|(1<<SERR)|(1<<CERR)|(1<<FERR)|(1<<AERR))) !=0)
     8b6:	89 89       	ldd	r24, Y+17	; 0x11
     8b8:	88 2f       	mov	r24, r24
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	8f 71       	andi	r24, 0x1F	; 31
     8be:	90 70       	andi	r25, 0x00	; 0
     8c0:	00 97       	sbiw	r24, 0x00	; 0
     8c2:	19 f0       	breq	.+6      	; 0x8ca <can_auto_baudrate+0x312>
                {
                    evaluate = 1;       //! Will enter in "while (evaluate ..." loop
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	88 87       	std	Y+8, r24	; 0x08
                    wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
     8c8:	19 86       	std	Y+9, r1	; 0x09
                }

                u8_temp0 = CANGIT;
     8ca:	ea ed       	ldi	r30, 0xDA	; 218
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	80 81       	ld	r24, Z
     8d0:	89 8b       	std	Y+17, r24	; 0x11

                //! --- Time_out reached ?
                if ((u8_temp0 & (1<<OVRTIM)) !=0 )
     8d2:	89 89       	ldd	r24, Y+17	; 0x11
     8d4:	88 2f       	mov	r24, r24
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	80 72       	andi	r24, 0x20	; 32
     8da:	90 70       	andi	r25, 0x00	; 0
     8dc:	00 97       	sbiw	r24, 0x00	; 0
     8de:	c1 f0       	breq	.+48     	; 0x910 <can_auto_baudrate+0x358>
                {
                    if (ovrtim_flag==0)
     8e0:	8e 81       	ldd	r24, Y+6	; 0x06
     8e2:	88 23       	and	r24, r24
     8e4:	59 f4       	brne	.+22     	; 0x8fc <can_auto_baudrate+0x344>
                    {
                        //! --- First Time_out
                        CANGIT |= (1<<OVRTIM);  // Reset OVRTIM
     8e6:	aa ed       	ldi	r26, 0xDA	; 218
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	ea ed       	ldi	r30, 0xDA	; 218
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	80 81       	ld	r24, Z
     8f0:	80 62       	ori	r24, 0x20	; 32
     8f2:	8c 93       	st	X, r24
                        ovrtim_flag++;
     8f4:	8e 81       	ldd	r24, Y+6	; 0x06
     8f6:	8f 5f       	subi	r24, 0xFF	; 255
     8f8:	8e 83       	std	Y+6, r24	; 0x06
     8fa:	0a c0       	rjmp	.+20     	; 0x910 <can_auto_baudrate+0x358>
                    }
                    else
                    {
                        //! --- Second Time_out
                        CANGIT |= (1<<OVRTIM);  // Reset OVRTIM
     8fc:	aa ed       	ldi	r26, 0xDA	; 218
     8fe:	b0 e0       	ldi	r27, 0x00	; 0
     900:	ea ed       	ldi	r30, 0xDA	; 218
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	80 81       	ld	r24, Z
     906:	80 62       	ori	r24, 0x20	; 32
     908:	8c 93       	st	X, r24
                        evaluate = 1;           //! Will enter in "while (evaluate ..." loop
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	88 87       	std	Y+8, r24	; 0x08
                        wait_for_rx = 0;        //! Out of "while (wait_for_rx ..." loop
     90e:	19 86       	std	Y+9, r1	; 0x09
                    }
                }

                //! --- General error ?
                if ((u8_temp0 & ((1<<SERG)|(1<<CERG)|(1<<FERG)|(1<<AERG))) !=0)
     910:	89 89       	ldd	r24, Y+17	; 0x11
     912:	88 2f       	mov	r24, r24
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	8f 70       	andi	r24, 0x0F	; 15
     918:	90 70       	andi	r25, 0x00	; 0
     91a:	00 97       	sbiw	r24, 0x00	; 0
     91c:	29 f0       	breq	.+10     	; 0x928 <can_auto_baudrate+0x370>
                {
                    evaluate = 1;       //! Will enter in "while (evaluate ..." loop
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	88 87       	std	Y+8, r24	; 0x08
                    wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
     922:	19 86       	std	Y+9, r1	; 0x09
                    try_conf = 1;       //! Try this configuration
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	8f 83       	std	Y+7, r24	; 0x07
        //! --- WAIT_FOR_RX LOOP:
        //!     ================
        //!     Try to perform a CAN message reception in "LISTEN" mode without error and
        //!     before a time_out done by CAN-Timer.
        //!     Else gives the hand to "EVALUATE LOOP" to have a new set of bit timing.
        while (wait_for_rx == 1)
     928:	89 85       	ldd	r24, Y+9	; 0x09
     92a:	81 30       	cpi	r24, 0x01	; 1
     92c:	09 f4       	brne	.+2      	; 0x930 <can_auto_baudrate+0x378>
     92e:	9f cf       	rjmp	.-194    	; 0x86e <can_auto_baudrate+0x2b6>
     930:	92 c0       	rjmp	.+292    	; 0xa56 <can_auto_baudrate+0x49e>
        //!     limit and after it is the Prescaler. During the computing high (80%)
        //!     and low (75%) limits of sampling point location are tested. SJW and
        //!     the number of sampling points are not calculated in this loop.
        while (evaluate == 1)
        {
            if (phs1_inc != 0) phs1++;
     932:	8b 85       	ldd	r24, Y+11	; 0x0b
     934:	88 23       	and	r24, r24
     936:	19 f0       	breq	.+6      	; 0x93e <can_auto_baudrate+0x386>
     938:	8d 85       	ldd	r24, Y+13	; 0x0d
     93a:	8f 5f       	subi	r24, 0xFF	; 255
     93c:	8d 87       	std	Y+13, r24	; 0x0d
            phs1_inc = 1;
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	8b 87       	std	Y+11, r24	; 0x0b

            // --- The following test takes into account the previous incrementation of phs1
            if ((phs1 > PHS1_MAX) && (phs2 >= PHS2_MAX))
     942:	8d 85       	ldd	r24, Y+13	; 0x0d
     944:	89 30       	cpi	r24, 0x09	; 9
     946:	78 f1       	brcs	.+94     	; 0x9a6 <can_auto_baudrate+0x3ee>
     948:	8c 85       	ldd	r24, Y+12	; 0x0c
     94a:	88 30       	cpi	r24, 0x08	; 8
     94c:	60 f1       	brcs	.+88     	; 0x9a6 <can_auto_baudrate+0x3ee>
            {
                phs1 = PHS1_MIN;
     94e:	82 e0       	ldi	r24, 0x02	; 2
     950:	8d 87       	std	Y+13, r24	; 0x0d
                phs2 = PHS2_MIN;
     952:	82 e0       	ldi	r24, 0x02	; 2
     954:	8c 87       	std	Y+12, r24	; 0x0c
                phs1_inc = 0;
     956:	1b 86       	std	Y+11, r1	; 0x0b
                if (ntq != NTQ_MAX) ntq++;
     958:	8e 85       	ldd	r24, Y+14	; 0x0e
     95a:	89 31       	cpi	r24, 0x19	; 25
     95c:	21 f0       	breq	.+8      	; 0x966 <can_auto_baudrate+0x3ae>
     95e:	8e 85       	ldd	r24, Y+14	; 0x0e
     960:	8f 5f       	subi	r24, 0xFF	; 255
     962:	8e 87       	std	Y+14, r24	; 0x0e
     964:	78 c0       	rjmp	.+240    	; 0xa56 <can_auto_baudrate+0x49e>
                else
                {
                    ntq = NTQ_MIN;
     966:	88 e0       	ldi	r24, 0x08	; 8
     968:	8e 87       	std	Y+14, r24	; 0x0e
                    if (brp != BRP_MAX) brp++;
     96a:	88 89       	ldd	r24, Y+16	; 0x10
     96c:	80 34       	cpi	r24, 0x40	; 64
     96e:	21 f0       	breq	.+8      	; 0x978 <can_auto_baudrate+0x3c0>
     970:	88 89       	ldd	r24, Y+16	; 0x10
     972:	8f 5f       	subi	r24, 0xFF	; 255
     974:	88 8b       	std	Y+16, r24	; 0x10
     976:	6f c0       	rjmp	.+222    	; 0xa56 <can_auto_baudrate+0x49e>
                    else
                    {
                        //! --- It is the failing of "can_auto_baudrate" function
                        evaluate = 0;       //! Out of "while (evaluate ..." loop
     978:	18 86       	std	Y+8, r1	; 0x08
                        bt_performed = 0;   //! Return flag = FALSE
     97a:	1b 82       	std	Y+3, r1	; 0x03
                        bt_not_found = 0;   //! Out of "while (bt_not_found ..." loop
     97c:	1a 86       	std	Y+10, r1	; 0x0a
                        DISABLE_MOB;        //! Disable MOb-0
     97e:	af ee       	ldi	r26, 0xEF	; 239
     980:	b0 e0       	ldi	r27, 0x00	; 0
     982:	ef ee       	ldi	r30, 0xEF	; 239
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	80 81       	ld	r24, Z
     988:	8f 73       	andi	r24, 0x3F	; 63
     98a:	8c 93       	st	X, r24
                        CANGCON = 0x00;     //! Disable CAN controller & reset "listen" mode
     98c:	e8 ed       	ldi	r30, 0xD8	; 216
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	10 82       	st	Z, r1
                        while ((CANGSTA & (1<<ENFG)) != 0); //! Wait for Disable OK
     992:	e9 ed       	ldi	r30, 0xD9	; 217
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	80 81       	ld	r24, Z
     998:	88 2f       	mov	r24, r24
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	84 70       	andi	r24, 0x04	; 4
     99e:	90 70       	andi	r25, 0x00	; 0
     9a0:	00 97       	sbiw	r24, 0x00	; 0
     9a2:	b9 f7       	brne	.-18     	; 0x992 <can_auto_baudrate+0x3da>
     9a4:	58 c0       	rjmp	.+176    	; 0xa56 <can_auto_baudrate+0x49e>
                }
            }
            else    // if (phs1 > PHS1_MAX ...
            {
                //! --- If psh1 > 5 then phs1 =phs2 or =phs2+1, else phs1=phs2
                if (phs1>5)
     9a6:	8d 85       	ldd	r24, Y+13	; 0x0d
     9a8:	86 30       	cpi	r24, 0x06	; 6
     9aa:	80 f0       	brcs	.+32     	; 0x9cc <can_auto_baudrate+0x414>
                {
                    if (phs1>(phs2+1)) phs1=(++phs2);
     9ac:	8d 85       	ldd	r24, Y+13	; 0x0d
     9ae:	28 2f       	mov	r18, r24
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	8c 85       	ldd	r24, Y+12	; 0x0c
     9b4:	88 2f       	mov	r24, r24
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	82 17       	cp	r24, r18
     9bc:	93 07       	cpc	r25, r19
     9be:	44 f4       	brge	.+16     	; 0x9d0 <can_auto_baudrate+0x418>
     9c0:	8c 85       	ldd	r24, Y+12	; 0x0c
     9c2:	8f 5f       	subi	r24, 0xFF	; 255
     9c4:	8c 87       	std	Y+12, r24	; 0x0c
     9c6:	8c 85       	ldd	r24, Y+12	; 0x0c
     9c8:	8d 87       	std	Y+13, r24	; 0x0d
     9ca:	02 c0       	rjmp	.+4      	; 0x9d0 <can_auto_baudrate+0x418>
                }
                else
                {
                phs2=phs1;
     9cc:	8d 85       	ldd	r24, Y+13	; 0x0d
     9ce:	8c 87       	std	Y+12, r24	; 0x0c
                }
                prs = ntq - ( phs1 + phs2 + 1 );
     9d0:	9d 85       	ldd	r25, Y+13	; 0x0d
     9d2:	8c 85       	ldd	r24, Y+12	; 0x0c
     9d4:	89 0f       	add	r24, r25
     9d6:	98 2f       	mov	r25, r24
     9d8:	90 95       	com	r25
     9da:	8e 85       	ldd	r24, Y+14	; 0x0e
     9dc:	89 0f       	add	r24, r25
     9de:	8f 87       	std	Y+15, r24	; 0x0f

                //! --- Test PRS limits
                if ((prs <= PRS_MAX) && (prs >= PRS_MIN))
     9e0:	8f 85       	ldd	r24, Y+15	; 0x0f
     9e2:	89 30       	cpi	r24, 0x09	; 9
     9e4:	c0 f5       	brcc	.+112    	; 0xa56 <can_auto_baudrate+0x49e>
     9e6:	8f 85       	ldd	r24, Y+15	; 0x0f
     9e8:	88 23       	and	r24, r24
     9ea:	a9 f1       	breq	.+106    	; 0xa56 <can_auto_baudrate+0x49e>
                {
                    //! --- Values  accepted if  80% >= sampling point >= 75%
                    if (((phs2<<2) >= (1+prs+phs1)) && ((phs2+phs2+phs2) <= (1+prs+phs1)))
     9ec:	8c 85       	ldd	r24, Y+12	; 0x0c
     9ee:	88 2f       	mov	r24, r24
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	ac 01       	movw	r20, r24
     9f4:	44 0f       	add	r20, r20
     9f6:	55 1f       	adc	r21, r21
     9f8:	44 0f       	add	r20, r20
     9fa:	55 1f       	adc	r21, r21
     9fc:	8f 85       	ldd	r24, Y+15	; 0x0f
     9fe:	88 2f       	mov	r24, r24
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	9c 01       	movw	r18, r24
     a04:	2f 5f       	subi	r18, 0xFF	; 255
     a06:	3f 4f       	sbci	r19, 0xFF	; 255
     a08:	8d 85       	ldd	r24, Y+13	; 0x0d
     a0a:	88 2f       	mov	r24, r24
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	82 0f       	add	r24, r18
     a10:	93 1f       	adc	r25, r19
     a12:	48 17       	cp	r20, r24
     a14:	59 07       	cpc	r21, r25
     a16:	fc f0       	brlt	.+62     	; 0xa56 <can_auto_baudrate+0x49e>
     a18:	8c 85       	ldd	r24, Y+12	; 0x0c
     a1a:	28 2f       	mov	r18, r24
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	8c 85       	ldd	r24, Y+12	; 0x0c
     a20:	88 2f       	mov	r24, r24
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	28 0f       	add	r18, r24
     a26:	39 1f       	adc	r19, r25
     a28:	8c 85       	ldd	r24, Y+12	; 0x0c
     a2a:	88 2f       	mov	r24, r24
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	a9 01       	movw	r20, r18
     a30:	48 0f       	add	r20, r24
     a32:	59 1f       	adc	r21, r25
     a34:	8f 85       	ldd	r24, Y+15	; 0x0f
     a36:	88 2f       	mov	r24, r24
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	9c 01       	movw	r18, r24
     a3c:	2f 5f       	subi	r18, 0xFF	; 255
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	8d 85       	ldd	r24, Y+13	; 0x0d
     a42:	88 2f       	mov	r24, r24
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	82 0f       	add	r24, r18
     a48:	93 1f       	adc	r25, r19
     a4a:	84 17       	cp	r24, r20
     a4c:	95 07       	cpc	r25, r21
     a4e:	1c f0       	brlt	.+6      	; 0xa56 <can_auto_baudrate+0x49e>
                    {
                        evaluate = 0;     //! Out of "while (evaluate ..." loop &
     a50:	18 86       	std	Y+8, r1	; 0x08
                        wait_for_rx = 1;  //!    new "while (bt_not_found ..." loop
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	89 87       	std	Y+9, r24	; 0x09
        //!     then Phase2=Phase1 and if Phase1>5, Phase1 can be equal to Phase2 or
        //!     Phase2+1. After this, the number of TQ is increased up to its high
        //!     limit and after it is the Prescaler. During the computing high (80%)
        //!     and low (75%) limits of sampling point location are tested. SJW and
        //!     the number of sampling points are not calculated in this loop.
        while (evaluate == 1)
     a56:	88 85       	ldd	r24, Y+8	; 0x08
     a58:	81 30       	cpi	r24, 0x01	; 1
     a5a:	09 f4       	brne	.+2      	; 0xa5e <can_auto_baudrate+0x4a6>
     a5c:	6a cf       	rjmp	.-300    	; 0x932 <can_auto_baudrate+0x37a>
    {
        Can_set_mob(u8_temp0);  //! Page index
        Can_clear_mob();        //! All MOb Registers = 0x00
    }

    while (bt_not_found == 1)
     a5e:	8a 85       	ldd	r24, Y+10	; 0x0a
     a60:	81 30       	cpi	r24, 0x01	; 1
     a62:	09 f4       	brne	.+2      	; 0xa66 <can_auto_baudrate+0x4ae>
     a64:	9b ce       	rjmp	.-714    	; 0x79c <can_auto_baudrate+0x1e4>
                }
            }
        } // while (evaluate ...
    } // while (bt_not_found ...

    return (bt_performed);
     a66:	8b 81       	ldd	r24, Y+3	; 0x03
}
     a68:	68 96       	adiw	r28, 0x18	; 24
     a6a:	0f b6       	in	r0, 0x3f	; 63
     a6c:	f8 94       	cli
     a6e:	de bf       	out	0x3e, r29	; 62
     a70:	0f be       	out	0x3f, r0	; 63
     a72:	cd bf       	out	0x3d, r28	; 61
     a74:	cf 91       	pop	r28
     a76:	df 91       	pop	r29
     a78:	08 95       	ret

00000a7a <can_fixed_baudrate>:
//!
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
U8 can_fixed_baudrate(U8 mode)
{
     a7a:	df 93       	push	r29
     a7c:	cf 93       	push	r28
     a7e:	0f 92       	push	r0
     a80:	cd b7       	in	r28, 0x3d	; 61
     a82:	de b7       	in	r29, 0x3e	; 62
     a84:	89 83       	std	Y+1, r24	; 0x01
    Can_reset();
     a86:	e8 ed       	ldi	r30, 0xD8	; 216
     a88:	f0 e0       	ldi	r31, 0x00	; 0
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	80 83       	st	Z, r24
    Can_conf_bt();
     a8e:	e2 ee       	ldi	r30, 0xE2	; 226
     a90:	f0 e0       	ldi	r31, 0x00	; 0
     a92:	84 e0       	ldi	r24, 0x04	; 4
     a94:	80 83       	st	Z, r24
     a96:	e3 ee       	ldi	r30, 0xE3	; 227
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	8c e0       	ldi	r24, 0x0C	; 12
     a9c:	80 83       	st	Z, r24
     a9e:	e4 ee       	ldi	r30, 0xE4	; 228
     aa0:	f0 e0       	ldi	r31, 0x00	; 0
     aa2:	87 e3       	ldi	r24, 0x37	; 55
     aa4:	80 83       	st	Z, r24
    return 1;
     aa6:	81 e0       	ldi	r24, 0x01	; 1
}
     aa8:	0f 90       	pop	r0
     aaa:	cf 91       	pop	r28
     aac:	df 91       	pop	r29
     aae:	08 95       	ret

00000ab0 <can_init>:
//!         ==0: research of bit timing configuration failed
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
U8 can_init(U8 mode)
{
     ab0:	df 93       	push	r29
     ab2:	cf 93       	push	r28
     ab4:	00 d0       	rcall	.+0      	; 0xab6 <can_init+0x6>
     ab6:	cd b7       	in	r28, 0x3d	; 61
     ab8:	de b7       	in	r29, 0x3e	; 62
     aba:	89 83       	std	Y+1, r24	; 0x01
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     abc:	89 81       	ldd	r24, Y+1	; 0x01
     abe:	0e 94 3d 05 	call	0xa7a	; 0xa7a <can_fixed_baudrate>
     ac2:	88 23       	and	r24, r24
     ac4:	11 f4       	brne	.+4      	; 0xaca <can_init+0x1a>
     ac6:	1a 82       	std	Y+2, r1	; 0x02
     ac8:	0b c0       	rjmp	.+22     	; 0xae0 <can_init+0x30>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     aca:	0e 94 19 02 	call	0x432	; 0x432 <can_clear_all_mob>
    Can_enable();                               // c.f. macro in "can_drv.h" 
     ace:	a8 ed       	ldi	r26, 0xD8	; 216
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	e8 ed       	ldi	r30, 0xD8	; 216
     ad4:	f0 e0       	ldi	r31, 0x00	; 0
     ad6:	80 81       	ld	r24, Z
     ad8:	82 60       	ori	r24, 0x02	; 2
     ada:	8c 93       	st	X, r24
    return (1);
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	8a 83       	std	Y+2, r24	; 0x02
     ae0:	8a 81       	ldd	r24, Y+2	; 0x02
}
     ae2:	0f 90       	pop	r0
     ae4:	0f 90       	pop	r0
     ae6:	cf 91       	pop	r28
     ae8:	df 91       	pop	r29
     aea:	08 95       	ret

00000aec <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
U8 can_cmd(st_cmd_t* cmd)
{
     aec:	df 93       	push	r29
     aee:	cf 93       	push	r28
     af0:	cd b7       	in	r28, 0x3d	; 61
     af2:	de b7       	in	r29, 0x3e	; 62
     af4:	2d 97       	sbiw	r28, 0x0d	; 13
     af6:	0f b6       	in	r0, 0x3f	; 63
     af8:	f8 94       	cli
     afa:	de bf       	out	0x3e, r29	; 62
     afc:	0f be       	out	0x3f, r0	; 63
     afe:	cd bf       	out	0x3d, r28	; 61
     b00:	9a 87       	std	Y+10, r25	; 0x0a
     b02:	89 87       	std	Y+9, r24	; 0x09
  U8 mob_handle, cpt;
  U32 u32_temp;
  
  if (cmd->cmd == CMD_ABORT)
     b04:	e9 85       	ldd	r30, Y+9	; 0x09
     b06:	fa 85       	ldd	r31, Y+10	; 0x0a
     b08:	81 81       	ldd	r24, Z+1	; 0x01
     b0a:	92 81       	ldd	r25, Z+2	; 0x02
     b0c:	8c 30       	cpi	r24, 0x0C	; 12
     b0e:	91 05       	cpc	r25, r1
     b10:	f9 f4       	brne	.+62     	; 0xb50 <can_cmd+0x64>
  {
    if (cmd->status == MOB_PENDING)
     b12:	e9 85       	ldd	r30, Y+9	; 0x09
     b14:	fa 85       	ldd	r31, Y+10	; 0x0a
     b16:	82 85       	ldd	r24, Z+10	; 0x0a
     b18:	80 36       	cpi	r24, 0x60	; 96
     b1a:	a9 f4       	brne	.+42     	; 0xb46 <can_cmd+0x5a>
    {
      // Rx or Tx not yet performed
      Can_set_mob(cmd->handle);
     b1c:	ad ee       	ldi	r26, 0xED	; 237
     b1e:	b0 e0       	ldi	r27, 0x00	; 0
     b20:	e9 85       	ldd	r30, Y+9	; 0x09
     b22:	fa 85       	ldd	r31, Y+10	; 0x0a
     b24:	80 81       	ld	r24, Z
     b26:	82 95       	swap	r24
     b28:	80 7f       	andi	r24, 0xF0	; 240
     b2a:	8c 93       	st	X, r24
      Can_mob_abort();
     b2c:	af ee       	ldi	r26, 0xEF	; 239
     b2e:	b0 e0       	ldi	r27, 0x00	; 0
     b30:	ef ee       	ldi	r30, 0xEF	; 239
     b32:	f0 e0       	ldi	r31, 0x00	; 0
     b34:	80 81       	ld	r24, Z
     b36:	8f 73       	andi	r24, 0x3F	; 63
     b38:	8c 93       	st	X, r24
      Can_clear_status_mob();       // To be sure !
     b3a:	ee ee       	ldi	r30, 0xEE	; 238
     b3c:	f0 e0       	ldi	r31, 0x00	; 0
     b3e:	10 82       	st	Z, r1
      cmd->handle = 0;
     b40:	e9 85       	ldd	r30, Y+9	; 0x09
     b42:	fa 85       	ldd	r31, Y+10	; 0x0a
     b44:	10 82       	st	Z, r1
    }
    cmd->status = STATUS_CLEARED; 
     b46:	e9 85       	ldd	r30, Y+9	; 0x09
     b48:	fa 85       	ldd	r31, Y+10	; 0x0a
     b4a:	12 86       	std	Z+10, r1	; 0x0a
     b4c:	0c 94 a8 0e 	jmp	0x1d50	; 0x1d50 <__stack+0xc51>
  }
  else
  {
    mob_handle = can_get_mob_free();
     b50:	0e 94 45 02 	call	0x48a	; 0x48a <can_get_mob_free>
     b54:	8c 83       	std	Y+4, r24	; 0x04
    if (mob_handle!= NO_MOB)
     b56:	8c 81       	ldd	r24, Y+4	; 0x04
     b58:	8f 3f       	cpi	r24, 0xFF	; 255
     b5a:	11 f4       	brne	.+4      	; 0xb60 <can_cmd+0x74>
     b5c:	0c 94 a1 0e 	jmp	0x1d42	; 0x1d42 <__stack+0xc43>
    {
      cmd->status = MOB_PENDING; 
     b60:	e9 85       	ldd	r30, Y+9	; 0x09
     b62:	fa 85       	ldd	r31, Y+10	; 0x0a
     b64:	80 e6       	ldi	r24, 0x60	; 96
     b66:	82 87       	std	Z+10, r24	; 0x0a
      cmd->handle = mob_handle;
     b68:	e9 85       	ldd	r30, Y+9	; 0x09
     b6a:	fa 85       	ldd	r31, Y+10	; 0x0a
     b6c:	8c 81       	ldd	r24, Y+4	; 0x04
     b6e:	80 83       	st	Z, r24
      Can_set_mob(mob_handle);
     b70:	ed ee       	ldi	r30, 0xED	; 237
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	82 95       	swap	r24
     b78:	80 7f       	andi	r24, 0xF0	; 240
     b7a:	80 83       	st	Z, r24
      Can_clear_mob();
     b7c:	8e ee       	ldi	r24, 0xEE	; 238
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	9a 83       	std	Y+2, r25	; 0x02
     b82:	89 83       	std	Y+1, r24	; 0x01
     b84:	08 c0       	rjmp	.+16     	; 0xb96 <can_cmd+0xaa>
     b86:	e9 81       	ldd	r30, Y+1	; 0x01
     b88:	fa 81       	ldd	r31, Y+2	; 0x02
     b8a:	10 82       	st	Z, r1
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	9a 81       	ldd	r25, Y+2	; 0x02
     b90:	01 96       	adiw	r24, 0x01	; 1
     b92:	9a 83       	std	Y+2, r25	; 0x02
     b94:	89 83       	std	Y+1, r24	; 0x01
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	9a 81       	ldd	r25, Y+2	; 0x02
     b9a:	88 3f       	cpi	r24, 0xF8	; 248
     b9c:	91 05       	cpc	r25, r1
     b9e:	98 f3       	brcs	.-26     	; 0xb86 <can_cmd+0x9a>
          
      switch (cmd->cmd)
     ba0:	e9 85       	ldd	r30, Y+9	; 0x09
     ba2:	fa 85       	ldd	r31, Y+10	; 0x0a
     ba4:	81 81       	ldd	r24, Z+1	; 0x01
     ba6:	92 81       	ldd	r25, Z+2	; 0x02
     ba8:	9d 87       	std	Y+13, r25	; 0x0d
     baa:	8c 87       	std	Y+12, r24	; 0x0c
     bac:	8c 85       	ldd	r24, Y+12	; 0x0c
     bae:	9d 85       	ldd	r25, Y+13	; 0x0d
     bb0:	86 30       	cpi	r24, 0x06	; 6
     bb2:	91 05       	cpc	r25, r1
     bb4:	09 f4       	brne	.+2      	; 0xbb8 <can_cmd+0xcc>
     bb6:	73 c3       	rjmp	.+1766   	; 0x129e <__stack+0x19f>
     bb8:	8c 85       	ldd	r24, Y+12	; 0x0c
     bba:	9d 85       	ldd	r25, Y+13	; 0x0d
     bbc:	87 30       	cpi	r24, 0x07	; 7
     bbe:	91 05       	cpc	r25, r1
     bc0:	30 f5       	brcc	.+76     	; 0xc0e <can_cmd+0x122>
     bc2:	8c 85       	ldd	r24, Y+12	; 0x0c
     bc4:	9d 85       	ldd	r25, Y+13	; 0x0d
     bc6:	83 30       	cpi	r24, 0x03	; 3
     bc8:	91 05       	cpc	r25, r1
     bca:	09 f4       	brne	.+2      	; 0xbce <can_cmd+0xe2>
     bcc:	d3 c1       	rjmp	.+934    	; 0xf74 <can_cmd+0x488>
     bce:	8c 85       	ldd	r24, Y+12	; 0x0c
     bd0:	9d 85       	ldd	r25, Y+13	; 0x0d
     bd2:	84 30       	cpi	r24, 0x04	; 4
     bd4:	91 05       	cpc	r25, r1
     bd6:	68 f4       	brcc	.+26     	; 0xbf2 <can_cmd+0x106>
     bd8:	8c 85       	ldd	r24, Y+12	; 0x0c
     bda:	9d 85       	ldd	r25, Y+13	; 0x0d
     bdc:	81 30       	cpi	r24, 0x01	; 1
     bde:	91 05       	cpc	r25, r1
     be0:	e9 f1       	breq	.+122    	; 0xc5c <can_cmd+0x170>
     be2:	8c 85       	ldd	r24, Y+12	; 0x0c
     be4:	9d 85       	ldd	r25, Y+13	; 0x0d
     be6:	82 30       	cpi	r24, 0x02	; 2
     be8:	91 05       	cpc	r25, r1
     bea:	09 f4       	brne	.+2      	; 0xbee <can_cmd+0x102>
     bec:	02 c1       	rjmp	.+516    	; 0xdf2 <can_cmd+0x306>
     bee:	0c 94 9d 0e 	jmp	0x1d3a	; 0x1d3a <__stack+0xc3b>
     bf2:	8c 85       	ldd	r24, Y+12	; 0x0c
     bf4:	9d 85       	ldd	r25, Y+13	; 0x0d
     bf6:	84 30       	cpi	r24, 0x04	; 4
     bf8:	91 05       	cpc	r25, r1
     bfa:	09 f4       	brne	.+2      	; 0xbfe <can_cmd+0x112>
     bfc:	64 c2       	rjmp	.+1224   	; 0x10c6 <can_cmd+0x5da>
     bfe:	8c 85       	ldd	r24, Y+12	; 0x0c
     c00:	9d 85       	ldd	r25, Y+13	; 0x0d
     c02:	85 30       	cpi	r24, 0x05	; 5
     c04:	91 05       	cpc	r25, r1
     c06:	09 f4       	brne	.+2      	; 0xc0a <can_cmd+0x11e>
     c08:	cf c2       	rjmp	.+1438   	; 0x11a8 <__stack+0xa9>
     c0a:	0c 94 9d 0e 	jmp	0x1d3a	; 0x1d3a <__stack+0xc3b>
     c0e:	8c 85       	ldd	r24, Y+12	; 0x0c
     c10:	9d 85       	ldd	r25, Y+13	; 0x0d
     c12:	89 30       	cpi	r24, 0x09	; 9
     c14:	91 05       	cpc	r25, r1
     c16:	09 f4       	brne	.+2      	; 0xc1a <can_cmd+0x12e>
     c18:	c3 c5       	rjmp	.+2950   	; 0x17a0 <__stack+0x6a1>
     c1a:	8c 85       	ldd	r24, Y+12	; 0x0c
     c1c:	9d 85       	ldd	r25, Y+13	; 0x0d
     c1e:	8a 30       	cpi	r24, 0x0A	; 10
     c20:	91 05       	cpc	r25, r1
     c22:	70 f4       	brcc	.+28     	; 0xc40 <can_cmd+0x154>
     c24:	8c 85       	ldd	r24, Y+12	; 0x0c
     c26:	9d 85       	ldd	r25, Y+13	; 0x0d
     c28:	87 30       	cpi	r24, 0x07	; 7
     c2a:	91 05       	cpc	r25, r1
     c2c:	09 f4       	brne	.+2      	; 0xc30 <can_cmd+0x144>
     c2e:	ba c3       	rjmp	.+1908   	; 0x13a4 <__stack+0x2a5>
     c30:	8c 85       	ldd	r24, Y+12	; 0x0c
     c32:	9d 85       	ldd	r25, Y+13	; 0x0d
     c34:	88 30       	cpi	r24, 0x08	; 8
     c36:	91 05       	cpc	r25, r1
     c38:	09 f4       	brne	.+2      	; 0xc3c <can_cmd+0x150>
     c3a:	ae c4       	rjmp	.+2396   	; 0x1598 <__stack+0x499>
     c3c:	0c 94 9d 0e 	jmp	0x1d3a	; 0x1d3a <__stack+0xc3b>
     c40:	8c 85       	ldd	r24, Y+12	; 0x0c
     c42:	9d 85       	ldd	r25, Y+13	; 0x0d
     c44:	8a 30       	cpi	r24, 0x0A	; 10
     c46:	91 05       	cpc	r25, r1
     c48:	09 f4       	brne	.+2      	; 0xc4c <can_cmd+0x160>
     c4a:	b6 c6       	rjmp	.+3436   	; 0x19b8 <__stack+0x8b9>
     c4c:	8c 85       	ldd	r24, Y+12	; 0x0c
     c4e:	9d 85       	ldd	r25, Y+13	; 0x0d
     c50:	8b 30       	cpi	r24, 0x0B	; 11
     c52:	91 05       	cpc	r25, r1
     c54:	09 f4       	brne	.+2      	; 0xc58 <can_cmd+0x16c>
     c56:	4c c7       	rjmp	.+3736   	; 0x1af0 <__stack+0x9f1>
     c58:	0c 94 9d 0e 	jmp	0x1d3a	; 0x1d3a <__stack+0xc3b>
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     c5c:	e9 85       	ldd	r30, Y+9	; 0x09
     c5e:	fa 85       	ldd	r31, Y+10	; 0x0a
     c60:	84 85       	ldd	r24, Z+12	; 0x0c
     c62:	88 23       	and	r24, r24
     c64:	09 f4       	brne	.+2      	; 0xc68 <can_cmd+0x17c>
     c66:	57 c0       	rjmp	.+174    	; 0xd16 <can_cmd+0x22a>
     c68:	a3 ef       	ldi	r26, 0xF3	; 243
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	89 85       	ldd	r24, Y+9	; 0x09
     c6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c70:	03 96       	adiw	r24, 0x03	; 3
     c72:	fc 01       	movw	r30, r24
     c74:	33 96       	adiw	r30, 0x03	; 3
     c76:	80 81       	ld	r24, Z
     c78:	28 2f       	mov	r18, r24
     c7a:	22 0f       	add	r18, r18
     c7c:	22 0f       	add	r18, r18
     c7e:	22 0f       	add	r18, r18
     c80:	89 85       	ldd	r24, Y+9	; 0x09
     c82:	9a 85       	ldd	r25, Y+10	; 0x0a
     c84:	03 96       	adiw	r24, 0x03	; 3
     c86:	fc 01       	movw	r30, r24
     c88:	32 96       	adiw	r30, 0x02	; 2
     c8a:	80 81       	ld	r24, Z
     c8c:	82 95       	swap	r24
     c8e:	86 95       	lsr	r24
     c90:	87 70       	andi	r24, 0x07	; 7
     c92:	82 0f       	add	r24, r18
     c94:	8c 93       	st	X, r24
     c96:	a2 ef       	ldi	r26, 0xF2	; 242
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	89 85       	ldd	r24, Y+9	; 0x09
     c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c9e:	03 96       	adiw	r24, 0x03	; 3
     ca0:	fc 01       	movw	r30, r24
     ca2:	32 96       	adiw	r30, 0x02	; 2
     ca4:	80 81       	ld	r24, Z
     ca6:	28 2f       	mov	r18, r24
     ca8:	22 0f       	add	r18, r18
     caa:	22 0f       	add	r18, r18
     cac:	22 0f       	add	r18, r18
     cae:	89 85       	ldd	r24, Y+9	; 0x09
     cb0:	9a 85       	ldd	r25, Y+10	; 0x0a
     cb2:	03 96       	adiw	r24, 0x03	; 3
     cb4:	fc 01       	movw	r30, r24
     cb6:	31 96       	adiw	r30, 0x01	; 1
     cb8:	80 81       	ld	r24, Z
     cba:	82 95       	swap	r24
     cbc:	86 95       	lsr	r24
     cbe:	87 70       	andi	r24, 0x07	; 7
     cc0:	82 0f       	add	r24, r18
     cc2:	8c 93       	st	X, r24
     cc4:	a1 ef       	ldi	r26, 0xF1	; 241
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	89 85       	ldd	r24, Y+9	; 0x09
     cca:	9a 85       	ldd	r25, Y+10	; 0x0a
     ccc:	03 96       	adiw	r24, 0x03	; 3
     cce:	fc 01       	movw	r30, r24
     cd0:	31 96       	adiw	r30, 0x01	; 1
     cd2:	80 81       	ld	r24, Z
     cd4:	28 2f       	mov	r18, r24
     cd6:	22 0f       	add	r18, r18
     cd8:	22 0f       	add	r18, r18
     cda:	22 0f       	add	r18, r18
     cdc:	89 85       	ldd	r24, Y+9	; 0x09
     cde:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce0:	03 96       	adiw	r24, 0x03	; 3
     ce2:	fc 01       	movw	r30, r24
     ce4:	80 81       	ld	r24, Z
     ce6:	82 95       	swap	r24
     ce8:	86 95       	lsr	r24
     cea:	87 70       	andi	r24, 0x07	; 7
     cec:	82 0f       	add	r24, r18
     cee:	8c 93       	st	X, r24
     cf0:	a0 ef       	ldi	r26, 0xF0	; 240
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	89 85       	ldd	r24, Y+9	; 0x09
     cf6:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf8:	03 96       	adiw	r24, 0x03	; 3
     cfa:	fc 01       	movw	r30, r24
     cfc:	80 81       	ld	r24, Z
     cfe:	88 0f       	add	r24, r24
     d00:	88 0f       	add	r24, r24
     d02:	88 0f       	add	r24, r24
     d04:	8c 93       	st	X, r24
     d06:	af ee       	ldi	r26, 0xEF	; 239
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	ef ee       	ldi	r30, 0xEF	; 239
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	80 61       	ori	r24, 0x10	; 16
     d12:	8c 93       	st	X, r24
     d14:	28 c0       	rjmp	.+80     	; 0xd66 <can_cmd+0x27a>
          else              { Can_set_std_id(cmd->id.std);}
     d16:	a3 ef       	ldi	r26, 0xF3	; 243
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	89 85       	ldd	r24, Y+9	; 0x09
     d1c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d1e:	03 96       	adiw	r24, 0x03	; 3
     d20:	fc 01       	movw	r30, r24
     d22:	31 96       	adiw	r30, 0x01	; 1
     d24:	80 81       	ld	r24, Z
     d26:	28 2f       	mov	r18, r24
     d28:	22 95       	swap	r18
     d2a:	22 0f       	add	r18, r18
     d2c:	20 7e       	andi	r18, 0xE0	; 224
     d2e:	89 85       	ldd	r24, Y+9	; 0x09
     d30:	9a 85       	ldd	r25, Y+10	; 0x0a
     d32:	03 96       	adiw	r24, 0x03	; 3
     d34:	fc 01       	movw	r30, r24
     d36:	80 81       	ld	r24, Z
     d38:	86 95       	lsr	r24
     d3a:	86 95       	lsr	r24
     d3c:	86 95       	lsr	r24
     d3e:	82 0f       	add	r24, r18
     d40:	8c 93       	st	X, r24
     d42:	a2 ef       	ldi	r26, 0xF2	; 242
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	89 85       	ldd	r24, Y+9	; 0x09
     d48:	9a 85       	ldd	r25, Y+10	; 0x0a
     d4a:	03 96       	adiw	r24, 0x03	; 3
     d4c:	fc 01       	movw	r30, r24
     d4e:	80 81       	ld	r24, Z
     d50:	82 95       	swap	r24
     d52:	88 0f       	add	r24, r24
     d54:	80 7e       	andi	r24, 0xE0	; 224
     d56:	8c 93       	st	X, r24
     d58:	af ee       	ldi	r26, 0xEF	; 239
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	ef ee       	ldi	r30, 0xEF	; 239
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	8f 7e       	andi	r24, 0xEF	; 239
     d64:	8c 93       	st	X, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     d66:	1b 82       	std	Y+3, r1	; 0x03
     d68:	11 c0       	rjmp	.+34     	; 0xd8c <can_cmd+0x2a0>
     d6a:	aa ef       	ldi	r26, 0xFA	; 250
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	e9 85       	ldd	r30, Y+9	; 0x09
     d70:	fa 85       	ldd	r31, Y+10	; 0x0a
     d72:	20 85       	ldd	r18, Z+8	; 0x08
     d74:	31 85       	ldd	r19, Z+9	; 0x09
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	88 2f       	mov	r24, r24
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	f9 01       	movw	r30, r18
     d7e:	e8 0f       	add	r30, r24
     d80:	f9 1f       	adc	r31, r25
     d82:	80 81       	ld	r24, Z
     d84:	8c 93       	st	X, r24
     d86:	8b 81       	ldd	r24, Y+3	; 0x03
     d88:	8f 5f       	subi	r24, 0xFF	; 255
     d8a:	8b 83       	std	Y+3, r24	; 0x03
     d8c:	e9 85       	ldd	r30, Y+9	; 0x09
     d8e:	fa 85       	ldd	r31, Y+10	; 0x0a
     d90:	97 81       	ldd	r25, Z+7	; 0x07
     d92:	8b 81       	ldd	r24, Y+3	; 0x03
     d94:	89 17       	cp	r24, r25
     d96:	48 f3       	brcs	.-46     	; 0xd6a <can_cmd+0x27e>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     d98:	e9 85       	ldd	r30, Y+9	; 0x09
     d9a:	fa 85       	ldd	r31, Y+10	; 0x0a
     d9c:	83 85       	ldd	r24, Z+11	; 0x0b
     d9e:	88 23       	and	r24, r24
     da0:	41 f0       	breq	.+16     	; 0xdb2 <can_cmd+0x2c6>
     da2:	a0 ef       	ldi	r26, 0xF0	; 240
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	e0 ef       	ldi	r30, 0xF0	; 240
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	84 60       	ori	r24, 0x04	; 4
     dae:	8c 93       	st	X, r24
     db0:	07 c0       	rjmp	.+14     	; 0xdc0 <can_cmd+0x2d4>
            else Can_clear_rtr();    
     db2:	a0 ef       	ldi	r26, 0xF0	; 240
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	e0 ef       	ldi	r30, 0xF0	; 240
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	8b 7f       	andi	r24, 0xFB	; 251
     dbe:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
     dc0:	af ee       	ldi	r26, 0xEF	; 239
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	ef ee       	ldi	r30, 0xEF	; 239
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	90 81       	ld	r25, Z
     dca:	e9 85       	ldd	r30, Y+9	; 0x09
     dcc:	fa 85       	ldd	r31, Y+10	; 0x0a
     dce:	87 81       	ldd	r24, Z+7	; 0x07
     dd0:	89 2b       	or	r24, r25
     dd2:	8c 93       	st	X, r24
          Can_config_tx();
     dd4:	af ee       	ldi	r26, 0xEF	; 239
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	ef ee       	ldi	r30, 0xEF	; 239
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	8f 73       	andi	r24, 0x3F	; 63
     de0:	8c 93       	st	X, r24
     de2:	af ee       	ldi	r26, 0xEF	; 239
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	ef ee       	ldi	r30, 0xEF	; 239
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	80 64       	ori	r24, 0x40	; 64
     dee:	8c 93       	st	X, r24
     df0:	af c7       	rjmp	.+3934   	; 0x1d50 <__stack+0xc51>
          break;
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     df2:	e9 85       	ldd	r30, Y+9	; 0x09
     df4:	fa 85       	ldd	r31, Y+10	; 0x0a
     df6:	84 85       	ldd	r24, Z+12	; 0x0c
     df8:	88 23       	and	r24, r24
     dfa:	09 f4       	brne	.+2      	; 0xdfe <can_cmd+0x312>
     dfc:	57 c0       	rjmp	.+174    	; 0xeac <can_cmd+0x3c0>
     dfe:	a3 ef       	ldi	r26, 0xF3	; 243
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	89 85       	ldd	r24, Y+9	; 0x09
     e04:	9a 85       	ldd	r25, Y+10	; 0x0a
     e06:	03 96       	adiw	r24, 0x03	; 3
     e08:	fc 01       	movw	r30, r24
     e0a:	33 96       	adiw	r30, 0x03	; 3
     e0c:	80 81       	ld	r24, Z
     e0e:	28 2f       	mov	r18, r24
     e10:	22 0f       	add	r18, r18
     e12:	22 0f       	add	r18, r18
     e14:	22 0f       	add	r18, r18
     e16:	89 85       	ldd	r24, Y+9	; 0x09
     e18:	9a 85       	ldd	r25, Y+10	; 0x0a
     e1a:	03 96       	adiw	r24, 0x03	; 3
     e1c:	fc 01       	movw	r30, r24
     e1e:	32 96       	adiw	r30, 0x02	; 2
     e20:	80 81       	ld	r24, Z
     e22:	82 95       	swap	r24
     e24:	86 95       	lsr	r24
     e26:	87 70       	andi	r24, 0x07	; 7
     e28:	82 0f       	add	r24, r18
     e2a:	8c 93       	st	X, r24
     e2c:	a2 ef       	ldi	r26, 0xF2	; 242
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	89 85       	ldd	r24, Y+9	; 0x09
     e32:	9a 85       	ldd	r25, Y+10	; 0x0a
     e34:	03 96       	adiw	r24, 0x03	; 3
     e36:	fc 01       	movw	r30, r24
     e38:	32 96       	adiw	r30, 0x02	; 2
     e3a:	80 81       	ld	r24, Z
     e3c:	28 2f       	mov	r18, r24
     e3e:	22 0f       	add	r18, r18
     e40:	22 0f       	add	r18, r18
     e42:	22 0f       	add	r18, r18
     e44:	89 85       	ldd	r24, Y+9	; 0x09
     e46:	9a 85       	ldd	r25, Y+10	; 0x0a
     e48:	03 96       	adiw	r24, 0x03	; 3
     e4a:	fc 01       	movw	r30, r24
     e4c:	31 96       	adiw	r30, 0x01	; 1
     e4e:	80 81       	ld	r24, Z
     e50:	82 95       	swap	r24
     e52:	86 95       	lsr	r24
     e54:	87 70       	andi	r24, 0x07	; 7
     e56:	82 0f       	add	r24, r18
     e58:	8c 93       	st	X, r24
     e5a:	a1 ef       	ldi	r26, 0xF1	; 241
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	89 85       	ldd	r24, Y+9	; 0x09
     e60:	9a 85       	ldd	r25, Y+10	; 0x0a
     e62:	03 96       	adiw	r24, 0x03	; 3
     e64:	fc 01       	movw	r30, r24
     e66:	31 96       	adiw	r30, 0x01	; 1
     e68:	80 81       	ld	r24, Z
     e6a:	28 2f       	mov	r18, r24
     e6c:	22 0f       	add	r18, r18
     e6e:	22 0f       	add	r18, r18
     e70:	22 0f       	add	r18, r18
     e72:	89 85       	ldd	r24, Y+9	; 0x09
     e74:	9a 85       	ldd	r25, Y+10	; 0x0a
     e76:	03 96       	adiw	r24, 0x03	; 3
     e78:	fc 01       	movw	r30, r24
     e7a:	80 81       	ld	r24, Z
     e7c:	82 95       	swap	r24
     e7e:	86 95       	lsr	r24
     e80:	87 70       	andi	r24, 0x07	; 7
     e82:	82 0f       	add	r24, r18
     e84:	8c 93       	st	X, r24
     e86:	a0 ef       	ldi	r26, 0xF0	; 240
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	89 85       	ldd	r24, Y+9	; 0x09
     e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e8e:	03 96       	adiw	r24, 0x03	; 3
     e90:	fc 01       	movw	r30, r24
     e92:	80 81       	ld	r24, Z
     e94:	88 0f       	add	r24, r24
     e96:	88 0f       	add	r24, r24
     e98:	88 0f       	add	r24, r24
     e9a:	8c 93       	st	X, r24
     e9c:	af ee       	ldi	r26, 0xEF	; 239
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	ef ee       	ldi	r30, 0xEF	; 239
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	80 61       	ori	r24, 0x10	; 16
     ea8:	8c 93       	st	X, r24
     eaa:	28 c0       	rjmp	.+80     	; 0xefc <can_cmd+0x410>
          else              { Can_set_std_id(cmd->id.std);}
     eac:	a3 ef       	ldi	r26, 0xF3	; 243
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	89 85       	ldd	r24, Y+9	; 0x09
     eb2:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb4:	03 96       	adiw	r24, 0x03	; 3
     eb6:	fc 01       	movw	r30, r24
     eb8:	31 96       	adiw	r30, 0x01	; 1
     eba:	80 81       	ld	r24, Z
     ebc:	28 2f       	mov	r18, r24
     ebe:	22 95       	swap	r18
     ec0:	22 0f       	add	r18, r18
     ec2:	20 7e       	andi	r18, 0xE0	; 224
     ec4:	89 85       	ldd	r24, Y+9	; 0x09
     ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec8:	03 96       	adiw	r24, 0x03	; 3
     eca:	fc 01       	movw	r30, r24
     ecc:	80 81       	ld	r24, Z
     ece:	86 95       	lsr	r24
     ed0:	86 95       	lsr	r24
     ed2:	86 95       	lsr	r24
     ed4:	82 0f       	add	r24, r18
     ed6:	8c 93       	st	X, r24
     ed8:	a2 ef       	ldi	r26, 0xF2	; 242
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	89 85       	ldd	r24, Y+9	; 0x09
     ede:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee0:	03 96       	adiw	r24, 0x03	; 3
     ee2:	fc 01       	movw	r30, r24
     ee4:	80 81       	ld	r24, Z
     ee6:	82 95       	swap	r24
     ee8:	88 0f       	add	r24, r24
     eea:	80 7e       	andi	r24, 0xE0	; 224
     eec:	8c 93       	st	X, r24
     eee:	af ee       	ldi	r26, 0xEF	; 239
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	ef ee       	ldi	r30, 0xEF	; 239
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	8f 7e       	andi	r24, 0xEF	; 239
     efa:	8c 93       	st	X, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     efc:	1b 82       	std	Y+3, r1	; 0x03
     efe:	11 c0       	rjmp	.+34     	; 0xf22 <can_cmd+0x436>
     f00:	aa ef       	ldi	r26, 0xFA	; 250
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e9 85       	ldd	r30, Y+9	; 0x09
     f06:	fa 85       	ldd	r31, Y+10	; 0x0a
     f08:	20 85       	ldd	r18, Z+8	; 0x08
     f0a:	31 85       	ldd	r19, Z+9	; 0x09
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	88 2f       	mov	r24, r24
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	f9 01       	movw	r30, r18
     f14:	e8 0f       	add	r30, r24
     f16:	f9 1f       	adc	r31, r25
     f18:	80 81       	ld	r24, Z
     f1a:	8c 93       	st	X, r24
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	8f 5f       	subi	r24, 0xFF	; 255
     f20:	8b 83       	std	Y+3, r24	; 0x03
     f22:	e9 85       	ldd	r30, Y+9	; 0x09
     f24:	fa 85       	ldd	r31, Y+10	; 0x0a
     f26:	97 81       	ldd	r25, Z+7	; 0x07
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	89 17       	cp	r24, r25
     f2c:	48 f3       	brcs	.-46     	; 0xf00 <can_cmd+0x414>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     f2e:	e9 85       	ldd	r30, Y+9	; 0x09
     f30:	fa 85       	ldd	r31, Y+10	; 0x0a
     f32:	13 86       	std	Z+11, r1	; 0x0b
     f34:	a0 ef       	ldi	r26, 0xF0	; 240
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e0 ef       	ldi	r30, 0xF0	; 240
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	8b 7f       	andi	r24, 0xFB	; 251
     f40:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
     f42:	af ee       	ldi	r26, 0xEF	; 239
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	ef ee       	ldi	r30, 0xEF	; 239
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	90 81       	ld	r25, Z
     f4c:	e9 85       	ldd	r30, Y+9	; 0x09
     f4e:	fa 85       	ldd	r31, Y+10	; 0x0a
     f50:	87 81       	ldd	r24, Z+7	; 0x07
     f52:	89 2b       	or	r24, r25
     f54:	8c 93       	st	X, r24
          Can_config_tx();
     f56:	af ee       	ldi	r26, 0xEF	; 239
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	ef ee       	ldi	r30, 0xEF	; 239
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	8f 73       	andi	r24, 0x3F	; 63
     f62:	8c 93       	st	X, r24
     f64:	af ee       	ldi	r26, 0xEF	; 239
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	ef ee       	ldi	r30, 0xEF	; 239
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	80 64       	ori	r24, 0x40	; 64
     f70:	8c 93       	st	X, r24
     f72:	ee c6       	rjmp	.+3548   	; 0x1d50 <__stack+0xc51>
          break;
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     f74:	e9 85       	ldd	r30, Y+9	; 0x09
     f76:	fa 85       	ldd	r31, Y+10	; 0x0a
     f78:	84 85       	ldd	r24, Z+12	; 0x0c
     f7a:	88 23       	and	r24, r24
     f7c:	09 f4       	brne	.+2      	; 0xf80 <can_cmd+0x494>
     f7e:	57 c0       	rjmp	.+174    	; 0x102e <can_cmd+0x542>
     f80:	a3 ef       	ldi	r26, 0xF3	; 243
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	89 85       	ldd	r24, Y+9	; 0x09
     f86:	9a 85       	ldd	r25, Y+10	; 0x0a
     f88:	03 96       	adiw	r24, 0x03	; 3
     f8a:	fc 01       	movw	r30, r24
     f8c:	33 96       	adiw	r30, 0x03	; 3
     f8e:	80 81       	ld	r24, Z
     f90:	28 2f       	mov	r18, r24
     f92:	22 0f       	add	r18, r18
     f94:	22 0f       	add	r18, r18
     f96:	22 0f       	add	r18, r18
     f98:	89 85       	ldd	r24, Y+9	; 0x09
     f9a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f9c:	03 96       	adiw	r24, 0x03	; 3
     f9e:	fc 01       	movw	r30, r24
     fa0:	32 96       	adiw	r30, 0x02	; 2
     fa2:	80 81       	ld	r24, Z
     fa4:	82 95       	swap	r24
     fa6:	86 95       	lsr	r24
     fa8:	87 70       	andi	r24, 0x07	; 7
     faa:	82 0f       	add	r24, r18
     fac:	8c 93       	st	X, r24
     fae:	a2 ef       	ldi	r26, 0xF2	; 242
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	89 85       	ldd	r24, Y+9	; 0x09
     fb4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb6:	03 96       	adiw	r24, 0x03	; 3
     fb8:	fc 01       	movw	r30, r24
     fba:	32 96       	adiw	r30, 0x02	; 2
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	22 0f       	add	r18, r18
     fc2:	22 0f       	add	r18, r18
     fc4:	22 0f       	add	r18, r18
     fc6:	89 85       	ldd	r24, Y+9	; 0x09
     fc8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fca:	03 96       	adiw	r24, 0x03	; 3
     fcc:	fc 01       	movw	r30, r24
     fce:	31 96       	adiw	r30, 0x01	; 1
     fd0:	80 81       	ld	r24, Z
     fd2:	82 95       	swap	r24
     fd4:	86 95       	lsr	r24
     fd6:	87 70       	andi	r24, 0x07	; 7
     fd8:	82 0f       	add	r24, r18
     fda:	8c 93       	st	X, r24
     fdc:	a1 ef       	ldi	r26, 0xF1	; 241
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	89 85       	ldd	r24, Y+9	; 0x09
     fe2:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe4:	03 96       	adiw	r24, 0x03	; 3
     fe6:	fc 01       	movw	r30, r24
     fe8:	31 96       	adiw	r30, 0x01	; 1
     fea:	80 81       	ld	r24, Z
     fec:	28 2f       	mov	r18, r24
     fee:	22 0f       	add	r18, r18
     ff0:	22 0f       	add	r18, r18
     ff2:	22 0f       	add	r18, r18
     ff4:	89 85       	ldd	r24, Y+9	; 0x09
     ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff8:	03 96       	adiw	r24, 0x03	; 3
     ffa:	fc 01       	movw	r30, r24
     ffc:	80 81       	ld	r24, Z
     ffe:	82 95       	swap	r24
    1000:	86 95       	lsr	r24
    1002:	87 70       	andi	r24, 0x07	; 7
    1004:	82 0f       	add	r24, r18
    1006:	8c 93       	st	X, r24
    1008:	a0 ef       	ldi	r26, 0xF0	; 240
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	89 85       	ldd	r24, Y+9	; 0x09
    100e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1010:	03 96       	adiw	r24, 0x03	; 3
    1012:	fc 01       	movw	r30, r24
    1014:	80 81       	ld	r24, Z
    1016:	88 0f       	add	r24, r24
    1018:	88 0f       	add	r24, r24
    101a:	88 0f       	add	r24, r24
    101c:	8c 93       	st	X, r24
    101e:	af ee       	ldi	r26, 0xEF	; 239
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	ef ee       	ldi	r30, 0xEF	; 239
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	80 61       	ori	r24, 0x10	; 16
    102a:	8c 93       	st	X, r24
    102c:	28 c0       	rjmp	.+80     	; 0x107e <can_cmd+0x592>
          else              { Can_set_std_id(cmd->id.std);}
    102e:	a3 ef       	ldi	r26, 0xF3	; 243
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	89 85       	ldd	r24, Y+9	; 0x09
    1034:	9a 85       	ldd	r25, Y+10	; 0x0a
    1036:	03 96       	adiw	r24, 0x03	; 3
    1038:	fc 01       	movw	r30, r24
    103a:	31 96       	adiw	r30, 0x01	; 1
    103c:	80 81       	ld	r24, Z
    103e:	28 2f       	mov	r18, r24
    1040:	22 95       	swap	r18
    1042:	22 0f       	add	r18, r18
    1044:	20 7e       	andi	r18, 0xE0	; 224
    1046:	89 85       	ldd	r24, Y+9	; 0x09
    1048:	9a 85       	ldd	r25, Y+10	; 0x0a
    104a:	03 96       	adiw	r24, 0x03	; 3
    104c:	fc 01       	movw	r30, r24
    104e:	80 81       	ld	r24, Z
    1050:	86 95       	lsr	r24
    1052:	86 95       	lsr	r24
    1054:	86 95       	lsr	r24
    1056:	82 0f       	add	r24, r18
    1058:	8c 93       	st	X, r24
    105a:	a2 ef       	ldi	r26, 0xF2	; 242
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	89 85       	ldd	r24, Y+9	; 0x09
    1060:	9a 85       	ldd	r25, Y+10	; 0x0a
    1062:	03 96       	adiw	r24, 0x03	; 3
    1064:	fc 01       	movw	r30, r24
    1066:	80 81       	ld	r24, Z
    1068:	82 95       	swap	r24
    106a:	88 0f       	add	r24, r24
    106c:	80 7e       	andi	r24, 0xE0	; 224
    106e:	8c 93       	st	X, r24
    1070:	af ee       	ldi	r26, 0xEF	; 239
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	ef ee       	ldi	r30, 0xEF	; 239
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	8f 7e       	andi	r24, 0xEF	; 239
    107c:	8c 93       	st	X, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
    107e:	e9 85       	ldd	r30, Y+9	; 0x09
    1080:	fa 85       	ldd	r31, Y+10	; 0x0a
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	83 87       	std	Z+11, r24	; 0x0b
    1086:	a0 ef       	ldi	r26, 0xF0	; 240
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e0 ef       	ldi	r30, 0xF0	; 240
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	84 60       	ori	r24, 0x04	; 4
    1092:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    1094:	af ee       	ldi	r26, 0xEF	; 239
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	ef ee       	ldi	r30, 0xEF	; 239
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	90 81       	ld	r25, Z
    109e:	e9 85       	ldd	r30, Y+9	; 0x09
    10a0:	fa 85       	ldd	r31, Y+10	; 0x0a
    10a2:	87 81       	ldd	r24, Z+7	; 0x07
    10a4:	89 2b       	or	r24, r25
    10a6:	8c 93       	st	X, r24
          Can_config_tx();
    10a8:	af ee       	ldi	r26, 0xEF	; 239
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	ef ee       	ldi	r30, 0xEF	; 239
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	8f 73       	andi	r24, 0x3F	; 63
    10b4:	8c 93       	st	X, r24
    10b6:	af ee       	ldi	r26, 0xEF	; 239
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	ef ee       	ldi	r30, 0xEF	; 239
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	80 64       	ori	r24, 0x40	; 64
    10c2:	8c 93       	st	X, r24
    10c4:	45 c6       	rjmp	.+3210   	; 0x1d50 <__stack+0xc51>
          break;
        //------------      
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    10c6:	1d 82       	std	Y+5, r1	; 0x05
    10c8:	1e 82       	std	Y+6, r1	; 0x06
    10ca:	1f 82       	std	Y+7, r1	; 0x07
    10cc:	18 86       	std	Y+8, r1	; 0x08
    10ce:	a7 ef       	ldi	r26, 0xF7	; 247
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	ce 01       	movw	r24, r28
    10d4:	05 96       	adiw	r24, 0x05	; 5
    10d6:	fc 01       	movw	r30, r24
    10d8:	33 96       	adiw	r30, 0x03	; 3
    10da:	80 81       	ld	r24, Z
    10dc:	28 2f       	mov	r18, r24
    10de:	22 0f       	add	r18, r18
    10e0:	22 0f       	add	r18, r18
    10e2:	22 0f       	add	r18, r18
    10e4:	ce 01       	movw	r24, r28
    10e6:	05 96       	adiw	r24, 0x05	; 5
    10e8:	fc 01       	movw	r30, r24
    10ea:	32 96       	adiw	r30, 0x02	; 2
    10ec:	80 81       	ld	r24, Z
    10ee:	82 95       	swap	r24
    10f0:	86 95       	lsr	r24
    10f2:	87 70       	andi	r24, 0x07	; 7
    10f4:	82 0f       	add	r24, r18
    10f6:	8c 93       	st	X, r24
    10f8:	a6 ef       	ldi	r26, 0xF6	; 246
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	ce 01       	movw	r24, r28
    10fe:	05 96       	adiw	r24, 0x05	; 5
    1100:	fc 01       	movw	r30, r24
    1102:	32 96       	adiw	r30, 0x02	; 2
    1104:	80 81       	ld	r24, Z
    1106:	28 2f       	mov	r18, r24
    1108:	22 0f       	add	r18, r18
    110a:	22 0f       	add	r18, r18
    110c:	22 0f       	add	r18, r18
    110e:	ce 01       	movw	r24, r28
    1110:	05 96       	adiw	r24, 0x05	; 5
    1112:	fc 01       	movw	r30, r24
    1114:	31 96       	adiw	r30, 0x01	; 1
    1116:	80 81       	ld	r24, Z
    1118:	82 95       	swap	r24
    111a:	86 95       	lsr	r24
    111c:	87 70       	andi	r24, 0x07	; 7
    111e:	82 0f       	add	r24, r18
    1120:	8c 93       	st	X, r24
    1122:	a5 ef       	ldi	r26, 0xF5	; 245
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	ce 01       	movw	r24, r28
    1128:	05 96       	adiw	r24, 0x05	; 5
    112a:	fc 01       	movw	r30, r24
    112c:	31 96       	adiw	r30, 0x01	; 1
    112e:	80 81       	ld	r24, Z
    1130:	98 2f       	mov	r25, r24
    1132:	99 0f       	add	r25, r25
    1134:	99 0f       	add	r25, r25
    1136:	99 0f       	add	r25, r25
    1138:	fe 01       	movw	r30, r28
    113a:	35 96       	adiw	r30, 0x05	; 5
    113c:	80 81       	ld	r24, Z
    113e:	82 95       	swap	r24
    1140:	86 95       	lsr	r24
    1142:	87 70       	andi	r24, 0x07	; 7
    1144:	89 0f       	add	r24, r25
    1146:	8c 93       	st	X, r24
    1148:	a4 ef       	ldi	r26, 0xF4	; 244
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	fe 01       	movw	r30, r28
    114e:	35 96       	adiw	r30, 0x05	; 5
    1150:	80 81       	ld	r24, Z
    1152:	88 0f       	add	r24, r24
    1154:	88 0f       	add	r24, r24
    1156:	88 0f       	add	r24, r24
    1158:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    115a:	af ee       	ldi	r26, 0xEF	; 239
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	ef ee       	ldi	r30, 0xEF	; 239
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	90 81       	ld	r25, Z
    1164:	e9 85       	ldd	r30, Y+9	; 0x09
    1166:	fa 85       	ldd	r31, Y+10	; 0x0a
    1168:	87 81       	ldd	r24, Z+7	; 0x07
    116a:	89 2b       	or	r24, r25
    116c:	8c 93       	st	X, r24
          Can_clear_rtrmsk();
    116e:	a4 ef       	ldi	r26, 0xF4	; 244
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	e4 ef       	ldi	r30, 0xF4	; 244
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	8b 7f       	andi	r24, 0xFB	; 251
    117a:	8c 93       	st	X, r24
          Can_clear_idemsk();
    117c:	a4 ef       	ldi	r26, 0xF4	; 244
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	e4 ef       	ldi	r30, 0xF4	; 244
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	8e 7f       	andi	r24, 0xFE	; 254
    1188:	8c 93       	st	X, r24
          Can_config_rx();       
    118a:	af ee       	ldi	r26, 0xEF	; 239
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	ef ee       	ldi	r30, 0xEF	; 239
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	8f 73       	andi	r24, 0x3F	; 63
    1196:	8c 93       	st	X, r24
    1198:	af ee       	ldi	r26, 0xEF	; 239
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	ef ee       	ldi	r30, 0xEF	; 239
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	80 68       	ori	r24, 0x80	; 128
    11a4:	8c 93       	st	X, r24
    11a6:	d4 c5       	rjmp	.+2984   	; 0x1d50 <__stack+0xc51>
          break;
        //------------      
        case CMD_RX_DATA:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    11a8:	1d 82       	std	Y+5, r1	; 0x05
    11aa:	1e 82       	std	Y+6, r1	; 0x06
    11ac:	1f 82       	std	Y+7, r1	; 0x07
    11ae:	18 86       	std	Y+8, r1	; 0x08
    11b0:	a7 ef       	ldi	r26, 0xF7	; 247
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	ce 01       	movw	r24, r28
    11b6:	05 96       	adiw	r24, 0x05	; 5
    11b8:	fc 01       	movw	r30, r24
    11ba:	33 96       	adiw	r30, 0x03	; 3
    11bc:	80 81       	ld	r24, Z
    11be:	28 2f       	mov	r18, r24
    11c0:	22 0f       	add	r18, r18
    11c2:	22 0f       	add	r18, r18
    11c4:	22 0f       	add	r18, r18
    11c6:	ce 01       	movw	r24, r28
    11c8:	05 96       	adiw	r24, 0x05	; 5
    11ca:	fc 01       	movw	r30, r24
    11cc:	32 96       	adiw	r30, 0x02	; 2
    11ce:	80 81       	ld	r24, Z
    11d0:	82 95       	swap	r24
    11d2:	86 95       	lsr	r24
    11d4:	87 70       	andi	r24, 0x07	; 7
    11d6:	82 0f       	add	r24, r18
    11d8:	8c 93       	st	X, r24
    11da:	a6 ef       	ldi	r26, 0xF6	; 246
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	ce 01       	movw	r24, r28
    11e0:	05 96       	adiw	r24, 0x05	; 5
    11e2:	fc 01       	movw	r30, r24
    11e4:	32 96       	adiw	r30, 0x02	; 2
    11e6:	80 81       	ld	r24, Z
    11e8:	28 2f       	mov	r18, r24
    11ea:	22 0f       	add	r18, r18
    11ec:	22 0f       	add	r18, r18
    11ee:	22 0f       	add	r18, r18
    11f0:	ce 01       	movw	r24, r28
    11f2:	05 96       	adiw	r24, 0x05	; 5
    11f4:	fc 01       	movw	r30, r24
    11f6:	31 96       	adiw	r30, 0x01	; 1
    11f8:	80 81       	ld	r24, Z
    11fa:	82 95       	swap	r24
    11fc:	86 95       	lsr	r24
    11fe:	87 70       	andi	r24, 0x07	; 7
    1200:	82 0f       	add	r24, r18
    1202:	8c 93       	st	X, r24
    1204:	a5 ef       	ldi	r26, 0xF5	; 245
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	ce 01       	movw	r24, r28
    120a:	05 96       	adiw	r24, 0x05	; 5
    120c:	fc 01       	movw	r30, r24
    120e:	31 96       	adiw	r30, 0x01	; 1
    1210:	80 81       	ld	r24, Z
    1212:	98 2f       	mov	r25, r24
    1214:	99 0f       	add	r25, r25
    1216:	99 0f       	add	r25, r25
    1218:	99 0f       	add	r25, r25
    121a:	fe 01       	movw	r30, r28
    121c:	35 96       	adiw	r30, 0x05	; 5
    121e:	80 81       	ld	r24, Z
    1220:	82 95       	swap	r24
    1222:	86 95       	lsr	r24
    1224:	87 70       	andi	r24, 0x07	; 7
    1226:	89 0f       	add	r24, r25
    1228:	8c 93       	st	X, r24
    122a:	a4 ef       	ldi	r26, 0xF4	; 244
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	fe 01       	movw	r30, r28
    1230:	35 96       	adiw	r30, 0x05	; 5
    1232:	80 81       	ld	r24, Z
    1234:	88 0f       	add	r24, r24
    1236:	88 0f       	add	r24, r24
    1238:	88 0f       	add	r24, r24
    123a:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    123c:	af ee       	ldi	r26, 0xEF	; 239
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	ef ee       	ldi	r30, 0xEF	; 239
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	90 81       	ld	r25, Z
    1246:	e9 85       	ldd	r30, Y+9	; 0x09
    1248:	fa 85       	ldd	r31, Y+10	; 0x0a
    124a:	87 81       	ldd	r24, Z+7	; 0x07
    124c:	89 2b       	or	r24, r25
    124e:	8c 93       	st	X, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    1250:	e9 85       	ldd	r30, Y+9	; 0x09
    1252:	fa 85       	ldd	r31, Y+10	; 0x0a
    1254:	13 86       	std	Z+11, r1	; 0x0b
    1256:	a4 ef       	ldi	r26, 0xF4	; 244
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	e4 ef       	ldi	r30, 0xF4	; 244
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	84 60       	ori	r24, 0x04	; 4
    1262:	8c 93       	st	X, r24
    1264:	a0 ef       	ldi	r26, 0xF0	; 240
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	e0 ef       	ldi	r30, 0xF0	; 240
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	8b 7f       	andi	r24, 0xFB	; 251
    1270:	8c 93       	st	X, r24
          Can_clear_idemsk();
    1272:	a4 ef       	ldi	r26, 0xF4	; 244
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e4 ef       	ldi	r30, 0xF4	; 244
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	8e 7f       	andi	r24, 0xFE	; 254
    127e:	8c 93       	st	X, r24
          Can_config_rx();       
    1280:	af ee       	ldi	r26, 0xEF	; 239
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	ef ee       	ldi	r30, 0xEF	; 239
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	8f 73       	andi	r24, 0x3F	; 63
    128c:	8c 93       	st	X, r24
    128e:	af ee       	ldi	r26, 0xEF	; 239
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	ef ee       	ldi	r30, 0xEF	; 239
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	80 68       	ori	r24, 0x80	; 128
    129a:	8c 93       	st	X, r24
    129c:	59 c5       	rjmp	.+2738   	; 0x1d50 <__stack+0xc51>
          break;
        //------------      
        case CMD_RX_REMOTE:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    129e:	1d 82       	std	Y+5, r1	; 0x05
    12a0:	1e 82       	std	Y+6, r1	; 0x06
    12a2:	1f 82       	std	Y+7, r1	; 0x07
    12a4:	18 86       	std	Y+8, r1	; 0x08
    12a6:	a7 ef       	ldi	r26, 0xF7	; 247
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	ce 01       	movw	r24, r28
    12ac:	05 96       	adiw	r24, 0x05	; 5
    12ae:	fc 01       	movw	r30, r24
    12b0:	33 96       	adiw	r30, 0x03	; 3
    12b2:	80 81       	ld	r24, Z
    12b4:	28 2f       	mov	r18, r24
    12b6:	22 0f       	add	r18, r18
    12b8:	22 0f       	add	r18, r18
    12ba:	22 0f       	add	r18, r18
    12bc:	ce 01       	movw	r24, r28
    12be:	05 96       	adiw	r24, 0x05	; 5
    12c0:	fc 01       	movw	r30, r24
    12c2:	32 96       	adiw	r30, 0x02	; 2
    12c4:	80 81       	ld	r24, Z
    12c6:	82 95       	swap	r24
    12c8:	86 95       	lsr	r24
    12ca:	87 70       	andi	r24, 0x07	; 7
    12cc:	82 0f       	add	r24, r18
    12ce:	8c 93       	st	X, r24
    12d0:	a6 ef       	ldi	r26, 0xF6	; 246
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	ce 01       	movw	r24, r28
    12d6:	05 96       	adiw	r24, 0x05	; 5
    12d8:	fc 01       	movw	r30, r24
    12da:	32 96       	adiw	r30, 0x02	; 2
    12dc:	80 81       	ld	r24, Z
    12de:	28 2f       	mov	r18, r24
    12e0:	22 0f       	add	r18, r18
    12e2:	22 0f       	add	r18, r18
    12e4:	22 0f       	add	r18, r18
    12e6:	ce 01       	movw	r24, r28
    12e8:	05 96       	adiw	r24, 0x05	; 5
    12ea:	fc 01       	movw	r30, r24
    12ec:	31 96       	adiw	r30, 0x01	; 1
    12ee:	80 81       	ld	r24, Z
    12f0:	82 95       	swap	r24
    12f2:	86 95       	lsr	r24
    12f4:	87 70       	andi	r24, 0x07	; 7
    12f6:	82 0f       	add	r24, r18
    12f8:	8c 93       	st	X, r24
    12fa:	a5 ef       	ldi	r26, 0xF5	; 245
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	ce 01       	movw	r24, r28
    1300:	05 96       	adiw	r24, 0x05	; 5
    1302:	fc 01       	movw	r30, r24
    1304:	31 96       	adiw	r30, 0x01	; 1
    1306:	80 81       	ld	r24, Z
    1308:	98 2f       	mov	r25, r24
    130a:	99 0f       	add	r25, r25
    130c:	99 0f       	add	r25, r25
    130e:	99 0f       	add	r25, r25
    1310:	fe 01       	movw	r30, r28
    1312:	35 96       	adiw	r30, 0x05	; 5
    1314:	80 81       	ld	r24, Z
    1316:	82 95       	swap	r24
    1318:	86 95       	lsr	r24
    131a:	87 70       	andi	r24, 0x07	; 7
    131c:	89 0f       	add	r24, r25
    131e:	8c 93       	st	X, r24
    1320:	a4 ef       	ldi	r26, 0xF4	; 244
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	fe 01       	movw	r30, r28
    1326:	35 96       	adiw	r30, 0x05	; 5
    1328:	80 81       	ld	r24, Z
    132a:	88 0f       	add	r24, r24
    132c:	88 0f       	add	r24, r24
    132e:	88 0f       	add	r24, r24
    1330:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    1332:	af ee       	ldi	r26, 0xEF	; 239
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	ef ee       	ldi	r30, 0xEF	; 239
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	90 81       	ld	r25, Z
    133c:	e9 85       	ldd	r30, Y+9	; 0x09
    133e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1340:	87 81       	ldd	r24, Z+7	; 0x07
    1342:	89 2b       	or	r24, r25
    1344:	8c 93       	st	X, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1346:	e9 85       	ldd	r30, Y+9	; 0x09
    1348:	fa 85       	ldd	r31, Y+10	; 0x0a
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	83 87       	std	Z+11, r24	; 0x0b
    134e:	a4 ef       	ldi	r26, 0xF4	; 244
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	e4 ef       	ldi	r30, 0xF4	; 244
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	84 60       	ori	r24, 0x04	; 4
    135a:	8c 93       	st	X, r24
    135c:	a0 ef       	ldi	r26, 0xF0	; 240
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e0 ef       	ldi	r30, 0xF0	; 240
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	84 60       	ori	r24, 0x04	; 4
    1368:	8c 93       	st	X, r24
          Can_clear_rplv();
    136a:	af ee       	ldi	r26, 0xEF	; 239
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	ef ee       	ldi	r30, 0xEF	; 239
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	8f 7d       	andi	r24, 0xDF	; 223
    1376:	8c 93       	st	X, r24
          Can_clear_idemsk();
    1378:	a4 ef       	ldi	r26, 0xF4	; 244
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e4 ef       	ldi	r30, 0xF4	; 244
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	8e 7f       	andi	r24, 0xFE	; 254
    1384:	8c 93       	st	X, r24
          Can_config_rx();       
    1386:	af ee       	ldi	r26, 0xEF	; 239
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	ef ee       	ldi	r30, 0xEF	; 239
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	8f 73       	andi	r24, 0x3F	; 63
    1392:	8c 93       	st	X, r24
    1394:	af ee       	ldi	r26, 0xEF	; 239
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	ef ee       	ldi	r30, 0xEF	; 239
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	80 68       	ori	r24, 0x80	; 128
    13a0:	8c 93       	st	X, r24
    13a2:	d6 c4       	rjmp	.+2476   	; 0x1d50 <__stack+0xc51>
          break;
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    13a4:	e9 85       	ldd	r30, Y+9	; 0x09
    13a6:	fa 85       	ldd	r31, Y+10	; 0x0a
    13a8:	84 85       	ldd	r24, Z+12	; 0x0c
    13aa:	88 23       	and	r24, r24
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <__stack+0x2b1>
    13ae:	57 c0       	rjmp	.+174    	; 0x145e <__stack+0x35f>
    13b0:	a3 ef       	ldi	r26, 0xF3	; 243
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	89 85       	ldd	r24, Y+9	; 0x09
    13b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b8:	03 96       	adiw	r24, 0x03	; 3
    13ba:	fc 01       	movw	r30, r24
    13bc:	33 96       	adiw	r30, 0x03	; 3
    13be:	80 81       	ld	r24, Z
    13c0:	28 2f       	mov	r18, r24
    13c2:	22 0f       	add	r18, r18
    13c4:	22 0f       	add	r18, r18
    13c6:	22 0f       	add	r18, r18
    13c8:	89 85       	ldd	r24, Y+9	; 0x09
    13ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    13cc:	03 96       	adiw	r24, 0x03	; 3
    13ce:	fc 01       	movw	r30, r24
    13d0:	32 96       	adiw	r30, 0x02	; 2
    13d2:	80 81       	ld	r24, Z
    13d4:	82 95       	swap	r24
    13d6:	86 95       	lsr	r24
    13d8:	87 70       	andi	r24, 0x07	; 7
    13da:	82 0f       	add	r24, r18
    13dc:	8c 93       	st	X, r24
    13de:	a2 ef       	ldi	r26, 0xF2	; 242
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	89 85       	ldd	r24, Y+9	; 0x09
    13e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e6:	03 96       	adiw	r24, 0x03	; 3
    13e8:	fc 01       	movw	r30, r24
    13ea:	32 96       	adiw	r30, 0x02	; 2
    13ec:	80 81       	ld	r24, Z
    13ee:	28 2f       	mov	r18, r24
    13f0:	22 0f       	add	r18, r18
    13f2:	22 0f       	add	r18, r18
    13f4:	22 0f       	add	r18, r18
    13f6:	89 85       	ldd	r24, Y+9	; 0x09
    13f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13fa:	03 96       	adiw	r24, 0x03	; 3
    13fc:	fc 01       	movw	r30, r24
    13fe:	31 96       	adiw	r30, 0x01	; 1
    1400:	80 81       	ld	r24, Z
    1402:	82 95       	swap	r24
    1404:	86 95       	lsr	r24
    1406:	87 70       	andi	r24, 0x07	; 7
    1408:	82 0f       	add	r24, r18
    140a:	8c 93       	st	X, r24
    140c:	a1 ef       	ldi	r26, 0xF1	; 241
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	89 85       	ldd	r24, Y+9	; 0x09
    1412:	9a 85       	ldd	r25, Y+10	; 0x0a
    1414:	03 96       	adiw	r24, 0x03	; 3
    1416:	fc 01       	movw	r30, r24
    1418:	31 96       	adiw	r30, 0x01	; 1
    141a:	80 81       	ld	r24, Z
    141c:	28 2f       	mov	r18, r24
    141e:	22 0f       	add	r18, r18
    1420:	22 0f       	add	r18, r18
    1422:	22 0f       	add	r18, r18
    1424:	89 85       	ldd	r24, Y+9	; 0x09
    1426:	9a 85       	ldd	r25, Y+10	; 0x0a
    1428:	03 96       	adiw	r24, 0x03	; 3
    142a:	fc 01       	movw	r30, r24
    142c:	80 81       	ld	r24, Z
    142e:	82 95       	swap	r24
    1430:	86 95       	lsr	r24
    1432:	87 70       	andi	r24, 0x07	; 7
    1434:	82 0f       	add	r24, r18
    1436:	8c 93       	st	X, r24
    1438:	a0 ef       	ldi	r26, 0xF0	; 240
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	89 85       	ldd	r24, Y+9	; 0x09
    143e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1440:	03 96       	adiw	r24, 0x03	; 3
    1442:	fc 01       	movw	r30, r24
    1444:	80 81       	ld	r24, Z
    1446:	88 0f       	add	r24, r24
    1448:	88 0f       	add	r24, r24
    144a:	88 0f       	add	r24, r24
    144c:	8c 93       	st	X, r24
    144e:	af ee       	ldi	r26, 0xEF	; 239
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	ef ee       	ldi	r30, 0xEF	; 239
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	80 61       	ori	r24, 0x10	; 16
    145a:	8c 93       	st	X, r24
    145c:	28 c0       	rjmp	.+80     	; 0x14ae <__stack+0x3af>
          else              { Can_set_std_id(cmd->id.std);}
    145e:	a3 ef       	ldi	r26, 0xF3	; 243
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	89 85       	ldd	r24, Y+9	; 0x09
    1464:	9a 85       	ldd	r25, Y+10	; 0x0a
    1466:	03 96       	adiw	r24, 0x03	; 3
    1468:	fc 01       	movw	r30, r24
    146a:	31 96       	adiw	r30, 0x01	; 1
    146c:	80 81       	ld	r24, Z
    146e:	28 2f       	mov	r18, r24
    1470:	22 95       	swap	r18
    1472:	22 0f       	add	r18, r18
    1474:	20 7e       	andi	r18, 0xE0	; 224
    1476:	89 85       	ldd	r24, Y+9	; 0x09
    1478:	9a 85       	ldd	r25, Y+10	; 0x0a
    147a:	03 96       	adiw	r24, 0x03	; 3
    147c:	fc 01       	movw	r30, r24
    147e:	80 81       	ld	r24, Z
    1480:	86 95       	lsr	r24
    1482:	86 95       	lsr	r24
    1484:	86 95       	lsr	r24
    1486:	82 0f       	add	r24, r18
    1488:	8c 93       	st	X, r24
    148a:	a2 ef       	ldi	r26, 0xF2	; 242
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	89 85       	ldd	r24, Y+9	; 0x09
    1490:	9a 85       	ldd	r25, Y+10	; 0x0a
    1492:	03 96       	adiw	r24, 0x03	; 3
    1494:	fc 01       	movw	r30, r24
    1496:	80 81       	ld	r24, Z
    1498:	82 95       	swap	r24
    149a:	88 0f       	add	r24, r24
    149c:	80 7e       	andi	r24, 0xE0	; 224
    149e:	8c 93       	st	X, r24
    14a0:	af ee       	ldi	r26, 0xEF	; 239
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	ef ee       	ldi	r30, 0xEF	; 239
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	8f 7e       	andi	r24, 0xEF	; 239
    14ac:	8c 93       	st	X, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    14ae:	8f ef       	ldi	r24, 0xFF	; 255
    14b0:	9f ef       	ldi	r25, 0xFF	; 255
    14b2:	af ef       	ldi	r26, 0xFF	; 255
    14b4:	bf ef       	ldi	r27, 0xFF	; 255
    14b6:	8d 83       	std	Y+5, r24	; 0x05
    14b8:	9e 83       	std	Y+6, r25	; 0x06
    14ba:	af 83       	std	Y+7, r26	; 0x07
    14bc:	b8 87       	std	Y+8, r27	; 0x08
    14be:	a7 ef       	ldi	r26, 0xF7	; 247
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	ce 01       	movw	r24, r28
    14c4:	05 96       	adiw	r24, 0x05	; 5
    14c6:	fc 01       	movw	r30, r24
    14c8:	33 96       	adiw	r30, 0x03	; 3
    14ca:	80 81       	ld	r24, Z
    14cc:	28 2f       	mov	r18, r24
    14ce:	22 0f       	add	r18, r18
    14d0:	22 0f       	add	r18, r18
    14d2:	22 0f       	add	r18, r18
    14d4:	ce 01       	movw	r24, r28
    14d6:	05 96       	adiw	r24, 0x05	; 5
    14d8:	fc 01       	movw	r30, r24
    14da:	32 96       	adiw	r30, 0x02	; 2
    14dc:	80 81       	ld	r24, Z
    14de:	82 95       	swap	r24
    14e0:	86 95       	lsr	r24
    14e2:	87 70       	andi	r24, 0x07	; 7
    14e4:	82 0f       	add	r24, r18
    14e6:	8c 93       	st	X, r24
    14e8:	a6 ef       	ldi	r26, 0xF6	; 246
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	ce 01       	movw	r24, r28
    14ee:	05 96       	adiw	r24, 0x05	; 5
    14f0:	fc 01       	movw	r30, r24
    14f2:	32 96       	adiw	r30, 0x02	; 2
    14f4:	80 81       	ld	r24, Z
    14f6:	28 2f       	mov	r18, r24
    14f8:	22 0f       	add	r18, r18
    14fa:	22 0f       	add	r18, r18
    14fc:	22 0f       	add	r18, r18
    14fe:	ce 01       	movw	r24, r28
    1500:	05 96       	adiw	r24, 0x05	; 5
    1502:	fc 01       	movw	r30, r24
    1504:	31 96       	adiw	r30, 0x01	; 1
    1506:	80 81       	ld	r24, Z
    1508:	82 95       	swap	r24
    150a:	86 95       	lsr	r24
    150c:	87 70       	andi	r24, 0x07	; 7
    150e:	82 0f       	add	r24, r18
    1510:	8c 93       	st	X, r24
    1512:	a5 ef       	ldi	r26, 0xF5	; 245
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	ce 01       	movw	r24, r28
    1518:	05 96       	adiw	r24, 0x05	; 5
    151a:	fc 01       	movw	r30, r24
    151c:	31 96       	adiw	r30, 0x01	; 1
    151e:	80 81       	ld	r24, Z
    1520:	98 2f       	mov	r25, r24
    1522:	99 0f       	add	r25, r25
    1524:	99 0f       	add	r25, r25
    1526:	99 0f       	add	r25, r25
    1528:	fe 01       	movw	r30, r28
    152a:	35 96       	adiw	r30, 0x05	; 5
    152c:	80 81       	ld	r24, Z
    152e:	82 95       	swap	r24
    1530:	86 95       	lsr	r24
    1532:	87 70       	andi	r24, 0x07	; 7
    1534:	89 0f       	add	r24, r25
    1536:	8c 93       	st	X, r24
    1538:	a4 ef       	ldi	r26, 0xF4	; 244
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	fe 01       	movw	r30, r28
    153e:	35 96       	adiw	r30, 0x05	; 5
    1540:	80 81       	ld	r24, Z
    1542:	88 0f       	add	r24, r24
    1544:	88 0f       	add	r24, r24
    1546:	88 0f       	add	r24, r24
    1548:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    154a:	af ee       	ldi	r26, 0xEF	; 239
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	ef ee       	ldi	r30, 0xEF	; 239
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	90 81       	ld	r25, Z
    1554:	e9 85       	ldd	r30, Y+9	; 0x09
    1556:	fa 85       	ldd	r31, Y+10	; 0x0a
    1558:	87 81       	ldd	r24, Z+7	; 0x07
    155a:	89 2b       	or	r24, r25
    155c:	8c 93       	st	X, r24
          Can_clear_rtrmsk();
    155e:	a4 ef       	ldi	r26, 0xF4	; 244
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	e4 ef       	ldi	r30, 0xF4	; 244
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	8b 7f       	andi	r24, 0xFB	; 251
    156a:	8c 93       	st	X, r24
          Can_set_idemsk();
    156c:	a4 ef       	ldi	r26, 0xF4	; 244
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	e4 ef       	ldi	r30, 0xF4	; 244
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	81 60       	ori	r24, 0x01	; 1
    1578:	8c 93       	st	X, r24
          Can_config_rx();       
    157a:	af ee       	ldi	r26, 0xEF	; 239
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	ef ee       	ldi	r30, 0xEF	; 239
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	8f 73       	andi	r24, 0x3F	; 63
    1586:	8c 93       	st	X, r24
    1588:	af ee       	ldi	r26, 0xEF	; 239
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	ef ee       	ldi	r30, 0xEF	; 239
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	80 68       	ori	r24, 0x80	; 128
    1594:	8c 93       	st	X, r24
    1596:	dc c3       	rjmp	.+1976   	; 0x1d50 <__stack+0xc51>
          break;
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1598:	e9 85       	ldd	r30, Y+9	; 0x09
    159a:	fa 85       	ldd	r31, Y+10	; 0x0a
    159c:	84 85       	ldd	r24, Z+12	; 0x0c
    159e:	88 23       	and	r24, r24
    15a0:	09 f4       	brne	.+2      	; 0x15a4 <__stack+0x4a5>
    15a2:	57 c0       	rjmp	.+174    	; 0x1652 <__stack+0x553>
    15a4:	a3 ef       	ldi	r26, 0xF3	; 243
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	89 85       	ldd	r24, Y+9	; 0x09
    15aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ac:	03 96       	adiw	r24, 0x03	; 3
    15ae:	fc 01       	movw	r30, r24
    15b0:	33 96       	adiw	r30, 0x03	; 3
    15b2:	80 81       	ld	r24, Z
    15b4:	28 2f       	mov	r18, r24
    15b6:	22 0f       	add	r18, r18
    15b8:	22 0f       	add	r18, r18
    15ba:	22 0f       	add	r18, r18
    15bc:	89 85       	ldd	r24, Y+9	; 0x09
    15be:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c0:	03 96       	adiw	r24, 0x03	; 3
    15c2:	fc 01       	movw	r30, r24
    15c4:	32 96       	adiw	r30, 0x02	; 2
    15c6:	80 81       	ld	r24, Z
    15c8:	82 95       	swap	r24
    15ca:	86 95       	lsr	r24
    15cc:	87 70       	andi	r24, 0x07	; 7
    15ce:	82 0f       	add	r24, r18
    15d0:	8c 93       	st	X, r24
    15d2:	a2 ef       	ldi	r26, 0xF2	; 242
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	89 85       	ldd	r24, Y+9	; 0x09
    15d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15da:	03 96       	adiw	r24, 0x03	; 3
    15dc:	fc 01       	movw	r30, r24
    15de:	32 96       	adiw	r30, 0x02	; 2
    15e0:	80 81       	ld	r24, Z
    15e2:	28 2f       	mov	r18, r24
    15e4:	22 0f       	add	r18, r18
    15e6:	22 0f       	add	r18, r18
    15e8:	22 0f       	add	r18, r18
    15ea:	89 85       	ldd	r24, Y+9	; 0x09
    15ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ee:	03 96       	adiw	r24, 0x03	; 3
    15f0:	fc 01       	movw	r30, r24
    15f2:	31 96       	adiw	r30, 0x01	; 1
    15f4:	80 81       	ld	r24, Z
    15f6:	82 95       	swap	r24
    15f8:	86 95       	lsr	r24
    15fa:	87 70       	andi	r24, 0x07	; 7
    15fc:	82 0f       	add	r24, r18
    15fe:	8c 93       	st	X, r24
    1600:	a1 ef       	ldi	r26, 0xF1	; 241
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	89 85       	ldd	r24, Y+9	; 0x09
    1606:	9a 85       	ldd	r25, Y+10	; 0x0a
    1608:	03 96       	adiw	r24, 0x03	; 3
    160a:	fc 01       	movw	r30, r24
    160c:	31 96       	adiw	r30, 0x01	; 1
    160e:	80 81       	ld	r24, Z
    1610:	28 2f       	mov	r18, r24
    1612:	22 0f       	add	r18, r18
    1614:	22 0f       	add	r18, r18
    1616:	22 0f       	add	r18, r18
    1618:	89 85       	ldd	r24, Y+9	; 0x09
    161a:	9a 85       	ldd	r25, Y+10	; 0x0a
    161c:	03 96       	adiw	r24, 0x03	; 3
    161e:	fc 01       	movw	r30, r24
    1620:	80 81       	ld	r24, Z
    1622:	82 95       	swap	r24
    1624:	86 95       	lsr	r24
    1626:	87 70       	andi	r24, 0x07	; 7
    1628:	82 0f       	add	r24, r18
    162a:	8c 93       	st	X, r24
    162c:	a0 ef       	ldi	r26, 0xF0	; 240
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	89 85       	ldd	r24, Y+9	; 0x09
    1632:	9a 85       	ldd	r25, Y+10	; 0x0a
    1634:	03 96       	adiw	r24, 0x03	; 3
    1636:	fc 01       	movw	r30, r24
    1638:	80 81       	ld	r24, Z
    163a:	88 0f       	add	r24, r24
    163c:	88 0f       	add	r24, r24
    163e:	88 0f       	add	r24, r24
    1640:	8c 93       	st	X, r24
    1642:	af ee       	ldi	r26, 0xEF	; 239
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	ef ee       	ldi	r30, 0xEF	; 239
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	80 61       	ori	r24, 0x10	; 16
    164e:	8c 93       	st	X, r24
    1650:	28 c0       	rjmp	.+80     	; 0x16a2 <__stack+0x5a3>
          else              { Can_set_std_id(cmd->id.std);}
    1652:	a3 ef       	ldi	r26, 0xF3	; 243
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	89 85       	ldd	r24, Y+9	; 0x09
    1658:	9a 85       	ldd	r25, Y+10	; 0x0a
    165a:	03 96       	adiw	r24, 0x03	; 3
    165c:	fc 01       	movw	r30, r24
    165e:	31 96       	adiw	r30, 0x01	; 1
    1660:	80 81       	ld	r24, Z
    1662:	28 2f       	mov	r18, r24
    1664:	22 95       	swap	r18
    1666:	22 0f       	add	r18, r18
    1668:	20 7e       	andi	r18, 0xE0	; 224
    166a:	89 85       	ldd	r24, Y+9	; 0x09
    166c:	9a 85       	ldd	r25, Y+10	; 0x0a
    166e:	03 96       	adiw	r24, 0x03	; 3
    1670:	fc 01       	movw	r30, r24
    1672:	80 81       	ld	r24, Z
    1674:	86 95       	lsr	r24
    1676:	86 95       	lsr	r24
    1678:	86 95       	lsr	r24
    167a:	82 0f       	add	r24, r18
    167c:	8c 93       	st	X, r24
    167e:	a2 ef       	ldi	r26, 0xF2	; 242
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	89 85       	ldd	r24, Y+9	; 0x09
    1684:	9a 85       	ldd	r25, Y+10	; 0x0a
    1686:	03 96       	adiw	r24, 0x03	; 3
    1688:	fc 01       	movw	r30, r24
    168a:	80 81       	ld	r24, Z
    168c:	82 95       	swap	r24
    168e:	88 0f       	add	r24, r24
    1690:	80 7e       	andi	r24, 0xE0	; 224
    1692:	8c 93       	st	X, r24
    1694:	af ee       	ldi	r26, 0xEF	; 239
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	ef ee       	ldi	r30, 0xEF	; 239
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	8f 7e       	andi	r24, 0xEF	; 239
    16a0:	8c 93       	st	X, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    16a2:	8f ef       	ldi	r24, 0xFF	; 255
    16a4:	9f ef       	ldi	r25, 0xFF	; 255
    16a6:	af ef       	ldi	r26, 0xFF	; 255
    16a8:	bf ef       	ldi	r27, 0xFF	; 255
    16aa:	8d 83       	std	Y+5, r24	; 0x05
    16ac:	9e 83       	std	Y+6, r25	; 0x06
    16ae:	af 83       	std	Y+7, r26	; 0x07
    16b0:	b8 87       	std	Y+8, r27	; 0x08
    16b2:	a7 ef       	ldi	r26, 0xF7	; 247
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	ce 01       	movw	r24, r28
    16b8:	05 96       	adiw	r24, 0x05	; 5
    16ba:	fc 01       	movw	r30, r24
    16bc:	33 96       	adiw	r30, 0x03	; 3
    16be:	80 81       	ld	r24, Z
    16c0:	28 2f       	mov	r18, r24
    16c2:	22 0f       	add	r18, r18
    16c4:	22 0f       	add	r18, r18
    16c6:	22 0f       	add	r18, r18
    16c8:	ce 01       	movw	r24, r28
    16ca:	05 96       	adiw	r24, 0x05	; 5
    16cc:	fc 01       	movw	r30, r24
    16ce:	32 96       	adiw	r30, 0x02	; 2
    16d0:	80 81       	ld	r24, Z
    16d2:	82 95       	swap	r24
    16d4:	86 95       	lsr	r24
    16d6:	87 70       	andi	r24, 0x07	; 7
    16d8:	82 0f       	add	r24, r18
    16da:	8c 93       	st	X, r24
    16dc:	a6 ef       	ldi	r26, 0xF6	; 246
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	ce 01       	movw	r24, r28
    16e2:	05 96       	adiw	r24, 0x05	; 5
    16e4:	fc 01       	movw	r30, r24
    16e6:	32 96       	adiw	r30, 0x02	; 2
    16e8:	80 81       	ld	r24, Z
    16ea:	28 2f       	mov	r18, r24
    16ec:	22 0f       	add	r18, r18
    16ee:	22 0f       	add	r18, r18
    16f0:	22 0f       	add	r18, r18
    16f2:	ce 01       	movw	r24, r28
    16f4:	05 96       	adiw	r24, 0x05	; 5
    16f6:	fc 01       	movw	r30, r24
    16f8:	31 96       	adiw	r30, 0x01	; 1
    16fa:	80 81       	ld	r24, Z
    16fc:	82 95       	swap	r24
    16fe:	86 95       	lsr	r24
    1700:	87 70       	andi	r24, 0x07	; 7
    1702:	82 0f       	add	r24, r18
    1704:	8c 93       	st	X, r24
    1706:	a5 ef       	ldi	r26, 0xF5	; 245
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	ce 01       	movw	r24, r28
    170c:	05 96       	adiw	r24, 0x05	; 5
    170e:	fc 01       	movw	r30, r24
    1710:	31 96       	adiw	r30, 0x01	; 1
    1712:	80 81       	ld	r24, Z
    1714:	98 2f       	mov	r25, r24
    1716:	99 0f       	add	r25, r25
    1718:	99 0f       	add	r25, r25
    171a:	99 0f       	add	r25, r25
    171c:	fe 01       	movw	r30, r28
    171e:	35 96       	adiw	r30, 0x05	; 5
    1720:	80 81       	ld	r24, Z
    1722:	82 95       	swap	r24
    1724:	86 95       	lsr	r24
    1726:	87 70       	andi	r24, 0x07	; 7
    1728:	89 0f       	add	r24, r25
    172a:	8c 93       	st	X, r24
    172c:	a4 ef       	ldi	r26, 0xF4	; 244
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	fe 01       	movw	r30, r28
    1732:	35 96       	adiw	r30, 0x05	; 5
    1734:	80 81       	ld	r24, Z
    1736:	88 0f       	add	r24, r24
    1738:	88 0f       	add	r24, r24
    173a:	88 0f       	add	r24, r24
    173c:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    173e:	af ee       	ldi	r26, 0xEF	; 239
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	ef ee       	ldi	r30, 0xEF	; 239
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	90 81       	ld	r25, Z
    1748:	e9 85       	ldd	r30, Y+9	; 0x09
    174a:	fa 85       	ldd	r31, Y+10	; 0x0a
    174c:	87 81       	ldd	r24, Z+7	; 0x07
    174e:	89 2b       	or	r24, r25
    1750:	8c 93       	st	X, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    1752:	e9 85       	ldd	r30, Y+9	; 0x09
    1754:	fa 85       	ldd	r31, Y+10	; 0x0a
    1756:	13 86       	std	Z+11, r1	; 0x0b
    1758:	a4 ef       	ldi	r26, 0xF4	; 244
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	e4 ef       	ldi	r30, 0xF4	; 244
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	84 60       	ori	r24, 0x04	; 4
    1764:	8c 93       	st	X, r24
    1766:	a0 ef       	ldi	r26, 0xF0	; 240
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	e0 ef       	ldi	r30, 0xF0	; 240
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	8b 7f       	andi	r24, 0xFB	; 251
    1772:	8c 93       	st	X, r24
          Can_set_idemsk();
    1774:	a4 ef       	ldi	r26, 0xF4	; 244
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	e4 ef       	ldi	r30, 0xF4	; 244
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	81 60       	ori	r24, 0x01	; 1
    1780:	8c 93       	st	X, r24
          Can_config_rx();       
    1782:	af ee       	ldi	r26, 0xEF	; 239
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	ef ee       	ldi	r30, 0xEF	; 239
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	8f 73       	andi	r24, 0x3F	; 63
    178e:	8c 93       	st	X, r24
    1790:	af ee       	ldi	r26, 0xEF	; 239
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	ef ee       	ldi	r30, 0xEF	; 239
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	80 68       	ori	r24, 0x80	; 128
    179c:	8c 93       	st	X, r24
    179e:	d8 c2       	rjmp	.+1456   	; 0x1d50 <__stack+0xc51>
          break;
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    17a0:	e9 85       	ldd	r30, Y+9	; 0x09
    17a2:	fa 85       	ldd	r31, Y+10	; 0x0a
    17a4:	84 85       	ldd	r24, Z+12	; 0x0c
    17a6:	88 23       	and	r24, r24
    17a8:	09 f4       	brne	.+2      	; 0x17ac <__stack+0x6ad>
    17aa:	57 c0       	rjmp	.+174    	; 0x185a <__stack+0x75b>
    17ac:	a3 ef       	ldi	r26, 0xF3	; 243
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	89 85       	ldd	r24, Y+9	; 0x09
    17b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b4:	03 96       	adiw	r24, 0x03	; 3
    17b6:	fc 01       	movw	r30, r24
    17b8:	33 96       	adiw	r30, 0x03	; 3
    17ba:	80 81       	ld	r24, Z
    17bc:	28 2f       	mov	r18, r24
    17be:	22 0f       	add	r18, r18
    17c0:	22 0f       	add	r18, r18
    17c2:	22 0f       	add	r18, r18
    17c4:	89 85       	ldd	r24, Y+9	; 0x09
    17c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c8:	03 96       	adiw	r24, 0x03	; 3
    17ca:	fc 01       	movw	r30, r24
    17cc:	32 96       	adiw	r30, 0x02	; 2
    17ce:	80 81       	ld	r24, Z
    17d0:	82 95       	swap	r24
    17d2:	86 95       	lsr	r24
    17d4:	87 70       	andi	r24, 0x07	; 7
    17d6:	82 0f       	add	r24, r18
    17d8:	8c 93       	st	X, r24
    17da:	a2 ef       	ldi	r26, 0xF2	; 242
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	89 85       	ldd	r24, Y+9	; 0x09
    17e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e2:	03 96       	adiw	r24, 0x03	; 3
    17e4:	fc 01       	movw	r30, r24
    17e6:	32 96       	adiw	r30, 0x02	; 2
    17e8:	80 81       	ld	r24, Z
    17ea:	28 2f       	mov	r18, r24
    17ec:	22 0f       	add	r18, r18
    17ee:	22 0f       	add	r18, r18
    17f0:	22 0f       	add	r18, r18
    17f2:	89 85       	ldd	r24, Y+9	; 0x09
    17f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f6:	03 96       	adiw	r24, 0x03	; 3
    17f8:	fc 01       	movw	r30, r24
    17fa:	31 96       	adiw	r30, 0x01	; 1
    17fc:	80 81       	ld	r24, Z
    17fe:	82 95       	swap	r24
    1800:	86 95       	lsr	r24
    1802:	87 70       	andi	r24, 0x07	; 7
    1804:	82 0f       	add	r24, r18
    1806:	8c 93       	st	X, r24
    1808:	a1 ef       	ldi	r26, 0xF1	; 241
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	89 85       	ldd	r24, Y+9	; 0x09
    180e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1810:	03 96       	adiw	r24, 0x03	; 3
    1812:	fc 01       	movw	r30, r24
    1814:	31 96       	adiw	r30, 0x01	; 1
    1816:	80 81       	ld	r24, Z
    1818:	28 2f       	mov	r18, r24
    181a:	22 0f       	add	r18, r18
    181c:	22 0f       	add	r18, r18
    181e:	22 0f       	add	r18, r18
    1820:	89 85       	ldd	r24, Y+9	; 0x09
    1822:	9a 85       	ldd	r25, Y+10	; 0x0a
    1824:	03 96       	adiw	r24, 0x03	; 3
    1826:	fc 01       	movw	r30, r24
    1828:	80 81       	ld	r24, Z
    182a:	82 95       	swap	r24
    182c:	86 95       	lsr	r24
    182e:	87 70       	andi	r24, 0x07	; 7
    1830:	82 0f       	add	r24, r18
    1832:	8c 93       	st	X, r24
    1834:	a0 ef       	ldi	r26, 0xF0	; 240
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	89 85       	ldd	r24, Y+9	; 0x09
    183a:	9a 85       	ldd	r25, Y+10	; 0x0a
    183c:	03 96       	adiw	r24, 0x03	; 3
    183e:	fc 01       	movw	r30, r24
    1840:	80 81       	ld	r24, Z
    1842:	88 0f       	add	r24, r24
    1844:	88 0f       	add	r24, r24
    1846:	88 0f       	add	r24, r24
    1848:	8c 93       	st	X, r24
    184a:	af ee       	ldi	r26, 0xEF	; 239
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	ef ee       	ldi	r30, 0xEF	; 239
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	80 61       	ori	r24, 0x10	; 16
    1856:	8c 93       	st	X, r24
    1858:	28 c0       	rjmp	.+80     	; 0x18aa <__stack+0x7ab>
          else              { Can_set_std_id(cmd->id.std);}
    185a:	a3 ef       	ldi	r26, 0xF3	; 243
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	89 85       	ldd	r24, Y+9	; 0x09
    1860:	9a 85       	ldd	r25, Y+10	; 0x0a
    1862:	03 96       	adiw	r24, 0x03	; 3
    1864:	fc 01       	movw	r30, r24
    1866:	31 96       	adiw	r30, 0x01	; 1
    1868:	80 81       	ld	r24, Z
    186a:	28 2f       	mov	r18, r24
    186c:	22 95       	swap	r18
    186e:	22 0f       	add	r18, r18
    1870:	20 7e       	andi	r18, 0xE0	; 224
    1872:	89 85       	ldd	r24, Y+9	; 0x09
    1874:	9a 85       	ldd	r25, Y+10	; 0x0a
    1876:	03 96       	adiw	r24, 0x03	; 3
    1878:	fc 01       	movw	r30, r24
    187a:	80 81       	ld	r24, Z
    187c:	86 95       	lsr	r24
    187e:	86 95       	lsr	r24
    1880:	86 95       	lsr	r24
    1882:	82 0f       	add	r24, r18
    1884:	8c 93       	st	X, r24
    1886:	a2 ef       	ldi	r26, 0xF2	; 242
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	89 85       	ldd	r24, Y+9	; 0x09
    188c:	9a 85       	ldd	r25, Y+10	; 0x0a
    188e:	03 96       	adiw	r24, 0x03	; 3
    1890:	fc 01       	movw	r30, r24
    1892:	80 81       	ld	r24, Z
    1894:	82 95       	swap	r24
    1896:	88 0f       	add	r24, r24
    1898:	80 7e       	andi	r24, 0xE0	; 224
    189a:	8c 93       	st	X, r24
    189c:	af ee       	ldi	r26, 0xEF	; 239
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	ef ee       	ldi	r30, 0xEF	; 239
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	8f 7e       	andi	r24, 0xEF	; 239
    18a8:	8c 93       	st	X, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    18aa:	8f ef       	ldi	r24, 0xFF	; 255
    18ac:	9f ef       	ldi	r25, 0xFF	; 255
    18ae:	af ef       	ldi	r26, 0xFF	; 255
    18b0:	bf ef       	ldi	r27, 0xFF	; 255
    18b2:	8d 83       	std	Y+5, r24	; 0x05
    18b4:	9e 83       	std	Y+6, r25	; 0x06
    18b6:	af 83       	std	Y+7, r26	; 0x07
    18b8:	b8 87       	std	Y+8, r27	; 0x08
    18ba:	a7 ef       	ldi	r26, 0xF7	; 247
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	ce 01       	movw	r24, r28
    18c0:	05 96       	adiw	r24, 0x05	; 5
    18c2:	fc 01       	movw	r30, r24
    18c4:	33 96       	adiw	r30, 0x03	; 3
    18c6:	80 81       	ld	r24, Z
    18c8:	28 2f       	mov	r18, r24
    18ca:	22 0f       	add	r18, r18
    18cc:	22 0f       	add	r18, r18
    18ce:	22 0f       	add	r18, r18
    18d0:	ce 01       	movw	r24, r28
    18d2:	05 96       	adiw	r24, 0x05	; 5
    18d4:	fc 01       	movw	r30, r24
    18d6:	32 96       	adiw	r30, 0x02	; 2
    18d8:	80 81       	ld	r24, Z
    18da:	82 95       	swap	r24
    18dc:	86 95       	lsr	r24
    18de:	87 70       	andi	r24, 0x07	; 7
    18e0:	82 0f       	add	r24, r18
    18e2:	8c 93       	st	X, r24
    18e4:	a6 ef       	ldi	r26, 0xF6	; 246
    18e6:	b0 e0       	ldi	r27, 0x00	; 0
    18e8:	ce 01       	movw	r24, r28
    18ea:	05 96       	adiw	r24, 0x05	; 5
    18ec:	fc 01       	movw	r30, r24
    18ee:	32 96       	adiw	r30, 0x02	; 2
    18f0:	80 81       	ld	r24, Z
    18f2:	28 2f       	mov	r18, r24
    18f4:	22 0f       	add	r18, r18
    18f6:	22 0f       	add	r18, r18
    18f8:	22 0f       	add	r18, r18
    18fa:	ce 01       	movw	r24, r28
    18fc:	05 96       	adiw	r24, 0x05	; 5
    18fe:	fc 01       	movw	r30, r24
    1900:	31 96       	adiw	r30, 0x01	; 1
    1902:	80 81       	ld	r24, Z
    1904:	82 95       	swap	r24
    1906:	86 95       	lsr	r24
    1908:	87 70       	andi	r24, 0x07	; 7
    190a:	82 0f       	add	r24, r18
    190c:	8c 93       	st	X, r24
    190e:	a5 ef       	ldi	r26, 0xF5	; 245
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	ce 01       	movw	r24, r28
    1914:	05 96       	adiw	r24, 0x05	; 5
    1916:	fc 01       	movw	r30, r24
    1918:	31 96       	adiw	r30, 0x01	; 1
    191a:	80 81       	ld	r24, Z
    191c:	98 2f       	mov	r25, r24
    191e:	99 0f       	add	r25, r25
    1920:	99 0f       	add	r25, r25
    1922:	99 0f       	add	r25, r25
    1924:	fe 01       	movw	r30, r28
    1926:	35 96       	adiw	r30, 0x05	; 5
    1928:	80 81       	ld	r24, Z
    192a:	82 95       	swap	r24
    192c:	86 95       	lsr	r24
    192e:	87 70       	andi	r24, 0x07	; 7
    1930:	89 0f       	add	r24, r25
    1932:	8c 93       	st	X, r24
    1934:	a4 ef       	ldi	r26, 0xF4	; 244
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	fe 01       	movw	r30, r28
    193a:	35 96       	adiw	r30, 0x05	; 5
    193c:	80 81       	ld	r24, Z
    193e:	88 0f       	add	r24, r24
    1940:	88 0f       	add	r24, r24
    1942:	88 0f       	add	r24, r24
    1944:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    1946:	af ee       	ldi	r26, 0xEF	; 239
    1948:	b0 e0       	ldi	r27, 0x00	; 0
    194a:	ef ee       	ldi	r30, 0xEF	; 239
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	90 81       	ld	r25, Z
    1950:	e9 85       	ldd	r30, Y+9	; 0x09
    1952:	fa 85       	ldd	r31, Y+10	; 0x0a
    1954:	87 81       	ldd	r24, Z+7	; 0x07
    1956:	89 2b       	or	r24, r25
    1958:	8c 93       	st	X, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    195a:	e9 85       	ldd	r30, Y+9	; 0x09
    195c:	fa 85       	ldd	r31, Y+10	; 0x0a
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	83 87       	std	Z+11, r24	; 0x0b
    1962:	a4 ef       	ldi	r26, 0xF4	; 244
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	e4 ef       	ldi	r30, 0xF4	; 244
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	84 60       	ori	r24, 0x04	; 4
    196e:	8c 93       	st	X, r24
    1970:	a0 ef       	ldi	r26, 0xF0	; 240
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	e0 ef       	ldi	r30, 0xF0	; 240
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	84 60       	ori	r24, 0x04	; 4
    197c:	8c 93       	st	X, r24
          Can_clear_rplv();
    197e:	af ee       	ldi	r26, 0xEF	; 239
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	ef ee       	ldi	r30, 0xEF	; 239
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	8f 7d       	andi	r24, 0xDF	; 223
    198a:	8c 93       	st	X, r24
          Can_set_idemsk();
    198c:	a4 ef       	ldi	r26, 0xF4	; 244
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e4 ef       	ldi	r30, 0xF4	; 244
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	81 60       	ori	r24, 0x01	; 1
    1998:	8c 93       	st	X, r24
          Can_config_rx();       
    199a:	af ee       	ldi	r26, 0xEF	; 239
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	ef ee       	ldi	r30, 0xEF	; 239
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	8f 73       	andi	r24, 0x3F	; 63
    19a6:	8c 93       	st	X, r24
    19a8:	af ee       	ldi	r26, 0xEF	; 239
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	ef ee       	ldi	r30, 0xEF	; 239
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	80 68       	ori	r24, 0x80	; 128
    19b4:	8c 93       	st	X, r24
    19b6:	cc c1       	rjmp	.+920    	; 0x1d50 <__stack+0xc51>
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    19b8:	1b 82       	std	Y+3, r1	; 0x03
    19ba:	11 c0       	rjmp	.+34     	; 0x19de <__stack+0x8df>
    19bc:	aa ef       	ldi	r26, 0xFA	; 250
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	e9 85       	ldd	r30, Y+9	; 0x09
    19c2:	fa 85       	ldd	r31, Y+10	; 0x0a
    19c4:	20 85       	ldd	r18, Z+8	; 0x08
    19c6:	31 85       	ldd	r19, Z+9	; 0x09
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	88 2f       	mov	r24, r24
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	f9 01       	movw	r30, r18
    19d0:	e8 0f       	add	r30, r24
    19d2:	f9 1f       	adc	r31, r25
    19d4:	80 81       	ld	r24, Z
    19d6:	8c 93       	st	X, r24
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
    19da:	8f 5f       	subi	r24, 0xFF	; 255
    19dc:	8b 83       	std	Y+3, r24	; 0x03
    19de:	e9 85       	ldd	r30, Y+9	; 0x09
    19e0:	fa 85       	ldd	r31, Y+10	; 0x0a
    19e2:	97 81       	ldd	r25, Z+7	; 0x07
    19e4:	8b 81       	ldd	r24, Y+3	; 0x03
    19e6:	89 17       	cp	r24, r25
    19e8:	48 f3       	brcs	.-46     	; 0x19bc <__stack+0x8bd>
          u32_temp=0; Can_set_ext_msk(u32_temp);
    19ea:	1d 82       	std	Y+5, r1	; 0x05
    19ec:	1e 82       	std	Y+6, r1	; 0x06
    19ee:	1f 82       	std	Y+7, r1	; 0x07
    19f0:	18 86       	std	Y+8, r1	; 0x08
    19f2:	a7 ef       	ldi	r26, 0xF7	; 247
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	ce 01       	movw	r24, r28
    19f8:	05 96       	adiw	r24, 0x05	; 5
    19fa:	fc 01       	movw	r30, r24
    19fc:	33 96       	adiw	r30, 0x03	; 3
    19fe:	80 81       	ld	r24, Z
    1a00:	28 2f       	mov	r18, r24
    1a02:	22 0f       	add	r18, r18
    1a04:	22 0f       	add	r18, r18
    1a06:	22 0f       	add	r18, r18
    1a08:	ce 01       	movw	r24, r28
    1a0a:	05 96       	adiw	r24, 0x05	; 5
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	32 96       	adiw	r30, 0x02	; 2
    1a10:	80 81       	ld	r24, Z
    1a12:	82 95       	swap	r24
    1a14:	86 95       	lsr	r24
    1a16:	87 70       	andi	r24, 0x07	; 7
    1a18:	82 0f       	add	r24, r18
    1a1a:	8c 93       	st	X, r24
    1a1c:	a6 ef       	ldi	r26, 0xF6	; 246
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	ce 01       	movw	r24, r28
    1a22:	05 96       	adiw	r24, 0x05	; 5
    1a24:	fc 01       	movw	r30, r24
    1a26:	32 96       	adiw	r30, 0x02	; 2
    1a28:	80 81       	ld	r24, Z
    1a2a:	28 2f       	mov	r18, r24
    1a2c:	22 0f       	add	r18, r18
    1a2e:	22 0f       	add	r18, r18
    1a30:	22 0f       	add	r18, r18
    1a32:	ce 01       	movw	r24, r28
    1a34:	05 96       	adiw	r24, 0x05	; 5
    1a36:	fc 01       	movw	r30, r24
    1a38:	31 96       	adiw	r30, 0x01	; 1
    1a3a:	80 81       	ld	r24, Z
    1a3c:	82 95       	swap	r24
    1a3e:	86 95       	lsr	r24
    1a40:	87 70       	andi	r24, 0x07	; 7
    1a42:	82 0f       	add	r24, r18
    1a44:	8c 93       	st	X, r24
    1a46:	a5 ef       	ldi	r26, 0xF5	; 245
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	05 96       	adiw	r24, 0x05	; 5
    1a4e:	fc 01       	movw	r30, r24
    1a50:	31 96       	adiw	r30, 0x01	; 1
    1a52:	80 81       	ld	r24, Z
    1a54:	98 2f       	mov	r25, r24
    1a56:	99 0f       	add	r25, r25
    1a58:	99 0f       	add	r25, r25
    1a5a:	99 0f       	add	r25, r25
    1a5c:	fe 01       	movw	r30, r28
    1a5e:	35 96       	adiw	r30, 0x05	; 5
    1a60:	80 81       	ld	r24, Z
    1a62:	82 95       	swap	r24
    1a64:	86 95       	lsr	r24
    1a66:	87 70       	andi	r24, 0x07	; 7
    1a68:	89 0f       	add	r24, r25
    1a6a:	8c 93       	st	X, r24
    1a6c:	a4 ef       	ldi	r26, 0xF4	; 244
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	fe 01       	movw	r30, r28
    1a72:	35 96       	adiw	r30, 0x05	; 5
    1a74:	80 81       	ld	r24, Z
    1a76:	88 0f       	add	r24, r24
    1a78:	88 0f       	add	r24, r24
    1a7a:	88 0f       	add	r24, r24
    1a7c:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    1a7e:	af ee       	ldi	r26, 0xEF	; 239
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	ef ee       	ldi	r30, 0xEF	; 239
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	90 81       	ld	r25, Z
    1a88:	e9 85       	ldd	r30, Y+9	; 0x09
    1a8a:	fa 85       	ldd	r31, Y+10	; 0x0a
    1a8c:	87 81       	ldd	r24, Z+7	; 0x07
    1a8e:	89 2b       	or	r24, r25
    1a90:	8c 93       	st	X, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1a92:	e9 85       	ldd	r30, Y+9	; 0x09
    1a94:	fa 85       	ldd	r31, Y+10	; 0x0a
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	83 87       	std	Z+11, r24	; 0x0b
    1a9a:	a4 ef       	ldi	r26, 0xF4	; 244
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	e4 ef       	ldi	r30, 0xF4	; 244
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	84 60       	ori	r24, 0x04	; 4
    1aa6:	8c 93       	st	X, r24
    1aa8:	a0 ef       	ldi	r26, 0xF0	; 240
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	e0 ef       	ldi	r30, 0xF0	; 240
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	84 60       	ori	r24, 0x04	; 4
    1ab4:	8c 93       	st	X, r24
          Can_set_rplv();
    1ab6:	af ee       	ldi	r26, 0xEF	; 239
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	ef ee       	ldi	r30, 0xEF	; 239
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	80 62       	ori	r24, 0x20	; 32
    1ac2:	8c 93       	st	X, r24
          Can_clear_idemsk();
    1ac4:	a4 ef       	ldi	r26, 0xF4	; 244
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	e4 ef       	ldi	r30, 0xF4	; 244
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	8e 7f       	andi	r24, 0xFE	; 254
    1ad0:	8c 93       	st	X, r24
          Can_config_rx();       
    1ad2:	af ee       	ldi	r26, 0xEF	; 239
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	ef ee       	ldi	r30, 0xEF	; 239
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	8f 73       	andi	r24, 0x3F	; 63
    1ade:	8c 93       	st	X, r24
    1ae0:	af ee       	ldi	r26, 0xEF	; 239
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	ef ee       	ldi	r30, 0xEF	; 239
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	80 68       	ori	r24, 0x80	; 128
    1aec:	8c 93       	st	X, r24
    1aee:	30 c1       	rjmp	.+608    	; 0x1d50 <__stack+0xc51>
          break;
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1af0:	e9 85       	ldd	r30, Y+9	; 0x09
    1af2:	fa 85       	ldd	r31, Y+10	; 0x0a
    1af4:	84 85       	ldd	r24, Z+12	; 0x0c
    1af6:	88 23       	and	r24, r24
    1af8:	09 f4       	brne	.+2      	; 0x1afc <__stack+0x9fd>
    1afa:	57 c0       	rjmp	.+174    	; 0x1baa <__stack+0xaab>
    1afc:	a3 ef       	ldi	r26, 0xF3	; 243
    1afe:	b0 e0       	ldi	r27, 0x00	; 0
    1b00:	89 85       	ldd	r24, Y+9	; 0x09
    1b02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b04:	03 96       	adiw	r24, 0x03	; 3
    1b06:	fc 01       	movw	r30, r24
    1b08:	33 96       	adiw	r30, 0x03	; 3
    1b0a:	80 81       	ld	r24, Z
    1b0c:	28 2f       	mov	r18, r24
    1b0e:	22 0f       	add	r18, r18
    1b10:	22 0f       	add	r18, r18
    1b12:	22 0f       	add	r18, r18
    1b14:	89 85       	ldd	r24, Y+9	; 0x09
    1b16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b18:	03 96       	adiw	r24, 0x03	; 3
    1b1a:	fc 01       	movw	r30, r24
    1b1c:	32 96       	adiw	r30, 0x02	; 2
    1b1e:	80 81       	ld	r24, Z
    1b20:	82 95       	swap	r24
    1b22:	86 95       	lsr	r24
    1b24:	87 70       	andi	r24, 0x07	; 7
    1b26:	82 0f       	add	r24, r18
    1b28:	8c 93       	st	X, r24
    1b2a:	a2 ef       	ldi	r26, 0xF2	; 242
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	89 85       	ldd	r24, Y+9	; 0x09
    1b30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b32:	03 96       	adiw	r24, 0x03	; 3
    1b34:	fc 01       	movw	r30, r24
    1b36:	32 96       	adiw	r30, 0x02	; 2
    1b38:	80 81       	ld	r24, Z
    1b3a:	28 2f       	mov	r18, r24
    1b3c:	22 0f       	add	r18, r18
    1b3e:	22 0f       	add	r18, r18
    1b40:	22 0f       	add	r18, r18
    1b42:	89 85       	ldd	r24, Y+9	; 0x09
    1b44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b46:	03 96       	adiw	r24, 0x03	; 3
    1b48:	fc 01       	movw	r30, r24
    1b4a:	31 96       	adiw	r30, 0x01	; 1
    1b4c:	80 81       	ld	r24, Z
    1b4e:	82 95       	swap	r24
    1b50:	86 95       	lsr	r24
    1b52:	87 70       	andi	r24, 0x07	; 7
    1b54:	82 0f       	add	r24, r18
    1b56:	8c 93       	st	X, r24
    1b58:	a1 ef       	ldi	r26, 0xF1	; 241
    1b5a:	b0 e0       	ldi	r27, 0x00	; 0
    1b5c:	89 85       	ldd	r24, Y+9	; 0x09
    1b5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b60:	03 96       	adiw	r24, 0x03	; 3
    1b62:	fc 01       	movw	r30, r24
    1b64:	31 96       	adiw	r30, 0x01	; 1
    1b66:	80 81       	ld	r24, Z
    1b68:	28 2f       	mov	r18, r24
    1b6a:	22 0f       	add	r18, r18
    1b6c:	22 0f       	add	r18, r18
    1b6e:	22 0f       	add	r18, r18
    1b70:	89 85       	ldd	r24, Y+9	; 0x09
    1b72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b74:	03 96       	adiw	r24, 0x03	; 3
    1b76:	fc 01       	movw	r30, r24
    1b78:	80 81       	ld	r24, Z
    1b7a:	82 95       	swap	r24
    1b7c:	86 95       	lsr	r24
    1b7e:	87 70       	andi	r24, 0x07	; 7
    1b80:	82 0f       	add	r24, r18
    1b82:	8c 93       	st	X, r24
    1b84:	a0 ef       	ldi	r26, 0xF0	; 240
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	89 85       	ldd	r24, Y+9	; 0x09
    1b8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b8c:	03 96       	adiw	r24, 0x03	; 3
    1b8e:	fc 01       	movw	r30, r24
    1b90:	80 81       	ld	r24, Z
    1b92:	88 0f       	add	r24, r24
    1b94:	88 0f       	add	r24, r24
    1b96:	88 0f       	add	r24, r24
    1b98:	8c 93       	st	X, r24
    1b9a:	af ee       	ldi	r26, 0xEF	; 239
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	ef ee       	ldi	r30, 0xEF	; 239
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	80 61       	ori	r24, 0x10	; 16
    1ba6:	8c 93       	st	X, r24
    1ba8:	28 c0       	rjmp	.+80     	; 0x1bfa <__stack+0xafb>
          else              { Can_set_std_id(cmd->id.std);}
    1baa:	a3 ef       	ldi	r26, 0xF3	; 243
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	89 85       	ldd	r24, Y+9	; 0x09
    1bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb2:	03 96       	adiw	r24, 0x03	; 3
    1bb4:	fc 01       	movw	r30, r24
    1bb6:	31 96       	adiw	r30, 0x01	; 1
    1bb8:	80 81       	ld	r24, Z
    1bba:	28 2f       	mov	r18, r24
    1bbc:	22 95       	swap	r18
    1bbe:	22 0f       	add	r18, r18
    1bc0:	20 7e       	andi	r18, 0xE0	; 224
    1bc2:	89 85       	ldd	r24, Y+9	; 0x09
    1bc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bc6:	03 96       	adiw	r24, 0x03	; 3
    1bc8:	fc 01       	movw	r30, r24
    1bca:	80 81       	ld	r24, Z
    1bcc:	86 95       	lsr	r24
    1bce:	86 95       	lsr	r24
    1bd0:	86 95       	lsr	r24
    1bd2:	82 0f       	add	r24, r18
    1bd4:	8c 93       	st	X, r24
    1bd6:	a2 ef       	ldi	r26, 0xF2	; 242
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	89 85       	ldd	r24, Y+9	; 0x09
    1bdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bde:	03 96       	adiw	r24, 0x03	; 3
    1be0:	fc 01       	movw	r30, r24
    1be2:	80 81       	ld	r24, Z
    1be4:	82 95       	swap	r24
    1be6:	88 0f       	add	r24, r24
    1be8:	80 7e       	andi	r24, 0xE0	; 224
    1bea:	8c 93       	st	X, r24
    1bec:	af ee       	ldi	r26, 0xEF	; 239
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	ef ee       	ldi	r30, 0xEF	; 239
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	8f 7e       	andi	r24, 0xEF	; 239
    1bf8:	8c 93       	st	X, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    1bfa:	1b 82       	std	Y+3, r1	; 0x03
    1bfc:	11 c0       	rjmp	.+34     	; 0x1c20 <__stack+0xb21>
    1bfe:	aa ef       	ldi	r26, 0xFA	; 250
    1c00:	b0 e0       	ldi	r27, 0x00	; 0
    1c02:	e9 85       	ldd	r30, Y+9	; 0x09
    1c04:	fa 85       	ldd	r31, Y+10	; 0x0a
    1c06:	20 85       	ldd	r18, Z+8	; 0x08
    1c08:	31 85       	ldd	r19, Z+9	; 0x09
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	88 2f       	mov	r24, r24
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	f9 01       	movw	r30, r18
    1c12:	e8 0f       	add	r30, r24
    1c14:	f9 1f       	adc	r31, r25
    1c16:	80 81       	ld	r24, Z
    1c18:	8c 93       	st	X, r24
    1c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1c:	8f 5f       	subi	r24, 0xFF	; 255
    1c1e:	8b 83       	std	Y+3, r24	; 0x03
    1c20:	e9 85       	ldd	r30, Y+9	; 0x09
    1c22:	fa 85       	ldd	r31, Y+10	; 0x0a
    1c24:	97 81       	ldd	r25, Z+7	; 0x07
    1c26:	8b 81       	ldd	r24, Y+3	; 0x03
    1c28:	89 17       	cp	r24, r25
    1c2a:	48 f3       	brcs	.-46     	; 0x1bfe <__stack+0xaff>
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    1c2c:	8f ef       	ldi	r24, 0xFF	; 255
    1c2e:	9f ef       	ldi	r25, 0xFF	; 255
    1c30:	af ef       	ldi	r26, 0xFF	; 255
    1c32:	bf ef       	ldi	r27, 0xFF	; 255
    1c34:	8d 83       	std	Y+5, r24	; 0x05
    1c36:	9e 83       	std	Y+6, r25	; 0x06
    1c38:	af 83       	std	Y+7, r26	; 0x07
    1c3a:	b8 87       	std	Y+8, r27	; 0x08
    1c3c:	a7 ef       	ldi	r26, 0xF7	; 247
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	ce 01       	movw	r24, r28
    1c42:	05 96       	adiw	r24, 0x05	; 5
    1c44:	fc 01       	movw	r30, r24
    1c46:	33 96       	adiw	r30, 0x03	; 3
    1c48:	80 81       	ld	r24, Z
    1c4a:	28 2f       	mov	r18, r24
    1c4c:	22 0f       	add	r18, r18
    1c4e:	22 0f       	add	r18, r18
    1c50:	22 0f       	add	r18, r18
    1c52:	ce 01       	movw	r24, r28
    1c54:	05 96       	adiw	r24, 0x05	; 5
    1c56:	fc 01       	movw	r30, r24
    1c58:	32 96       	adiw	r30, 0x02	; 2
    1c5a:	80 81       	ld	r24, Z
    1c5c:	82 95       	swap	r24
    1c5e:	86 95       	lsr	r24
    1c60:	87 70       	andi	r24, 0x07	; 7
    1c62:	82 0f       	add	r24, r18
    1c64:	8c 93       	st	X, r24
    1c66:	a6 ef       	ldi	r26, 0xF6	; 246
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	ce 01       	movw	r24, r28
    1c6c:	05 96       	adiw	r24, 0x05	; 5
    1c6e:	fc 01       	movw	r30, r24
    1c70:	32 96       	adiw	r30, 0x02	; 2
    1c72:	80 81       	ld	r24, Z
    1c74:	28 2f       	mov	r18, r24
    1c76:	22 0f       	add	r18, r18
    1c78:	22 0f       	add	r18, r18
    1c7a:	22 0f       	add	r18, r18
    1c7c:	ce 01       	movw	r24, r28
    1c7e:	05 96       	adiw	r24, 0x05	; 5
    1c80:	fc 01       	movw	r30, r24
    1c82:	31 96       	adiw	r30, 0x01	; 1
    1c84:	80 81       	ld	r24, Z
    1c86:	82 95       	swap	r24
    1c88:	86 95       	lsr	r24
    1c8a:	87 70       	andi	r24, 0x07	; 7
    1c8c:	82 0f       	add	r24, r18
    1c8e:	8c 93       	st	X, r24
    1c90:	a5 ef       	ldi	r26, 0xF5	; 245
    1c92:	b0 e0       	ldi	r27, 0x00	; 0
    1c94:	ce 01       	movw	r24, r28
    1c96:	05 96       	adiw	r24, 0x05	; 5
    1c98:	fc 01       	movw	r30, r24
    1c9a:	31 96       	adiw	r30, 0x01	; 1
    1c9c:	80 81       	ld	r24, Z
    1c9e:	98 2f       	mov	r25, r24
    1ca0:	99 0f       	add	r25, r25
    1ca2:	99 0f       	add	r25, r25
    1ca4:	99 0f       	add	r25, r25
    1ca6:	fe 01       	movw	r30, r28
    1ca8:	35 96       	adiw	r30, 0x05	; 5
    1caa:	80 81       	ld	r24, Z
    1cac:	82 95       	swap	r24
    1cae:	86 95       	lsr	r24
    1cb0:	87 70       	andi	r24, 0x07	; 7
    1cb2:	89 0f       	add	r24, r25
    1cb4:	8c 93       	st	X, r24
    1cb6:	a4 ef       	ldi	r26, 0xF4	; 244
    1cb8:	b0 e0       	ldi	r27, 0x00	; 0
    1cba:	fe 01       	movw	r30, r28
    1cbc:	35 96       	adiw	r30, 0x05	; 5
    1cbe:	80 81       	ld	r24, Z
    1cc0:	88 0f       	add	r24, r24
    1cc2:	88 0f       	add	r24, r24
    1cc4:	88 0f       	add	r24, r24
    1cc6:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    1cc8:	af ee       	ldi	r26, 0xEF	; 239
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	ef ee       	ldi	r30, 0xEF	; 239
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	90 81       	ld	r25, Z
    1cd2:	e9 85       	ldd	r30, Y+9	; 0x09
    1cd4:	fa 85       	ldd	r31, Y+10	; 0x0a
    1cd6:	87 81       	ldd	r24, Z+7	; 0x07
    1cd8:	89 2b       	or	r24, r25
    1cda:	8c 93       	st	X, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1cdc:	e9 85       	ldd	r30, Y+9	; 0x09
    1cde:	fa 85       	ldd	r31, Y+10	; 0x0a
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	83 87       	std	Z+11, r24	; 0x0b
    1ce4:	a4 ef       	ldi	r26, 0xF4	; 244
    1ce6:	b0 e0       	ldi	r27, 0x00	; 0
    1ce8:	e4 ef       	ldi	r30, 0xF4	; 244
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	80 81       	ld	r24, Z
    1cee:	84 60       	ori	r24, 0x04	; 4
    1cf0:	8c 93       	st	X, r24
    1cf2:	a0 ef       	ldi	r26, 0xF0	; 240
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	e0 ef       	ldi	r30, 0xF0	; 240
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	84 60       	ori	r24, 0x04	; 4
    1cfe:	8c 93       	st	X, r24
          Can_set_rplv();
    1d00:	af ee       	ldi	r26, 0xEF	; 239
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	ef ee       	ldi	r30, 0xEF	; 239
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	80 62       	ori	r24, 0x20	; 32
    1d0c:	8c 93       	st	X, r24
          Can_set_idemsk();
    1d0e:	a4 ef       	ldi	r26, 0xF4	; 244
    1d10:	b0 e0       	ldi	r27, 0x00	; 0
    1d12:	e4 ef       	ldi	r30, 0xF4	; 244
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	80 81       	ld	r24, Z
    1d18:	81 60       	ori	r24, 0x01	; 1
    1d1a:	8c 93       	st	X, r24
          Can_config_rx();       
    1d1c:	af ee       	ldi	r26, 0xEF	; 239
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	ef ee       	ldi	r30, 0xEF	; 239
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	8f 73       	andi	r24, 0x3F	; 63
    1d28:	8c 93       	st	X, r24
    1d2a:	af ee       	ldi	r26, 0xEF	; 239
    1d2c:	b0 e0       	ldi	r27, 0x00	; 0
    1d2e:	ef ee       	ldi	r30, 0xEF	; 239
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	80 68       	ori	r24, 0x80	; 128
    1d36:	8c 93       	st	X, r24
    1d38:	0b c0       	rjmp	.+22     	; 0x1d50 <__stack+0xc51>
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    1d3a:	e9 85       	ldd	r30, Y+9	; 0x09
    1d3c:	fa 85       	ldd	r31, Y+10	; 0x0a
    1d3e:	12 86       	std	Z+10, r1	; 0x0a
    1d40:	07 c0       	rjmp	.+14     	; 0x1d50 <__stack+0xc51>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    1d42:	e9 85       	ldd	r30, Y+9	; 0x09
    1d44:	fa 85       	ldd	r31, Y+10	; 0x0a
    1d46:	8f e1       	ldi	r24, 0x1F	; 31
    1d48:	82 87       	std	Z+10, r24	; 0x0a
      return CAN_CMD_REFUSED;
    1d4a:	9f ef       	ldi	r25, 0xFF	; 255
    1d4c:	9b 87       	std	Y+11, r25	; 0x0b
    1d4e:	01 c0       	rjmp	.+2      	; 0x1d52 <__stack+0xc53>
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1d50:	1b 86       	std	Y+11, r1	; 0x0b
    1d52:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    1d54:	2d 96       	adiw	r28, 0x0d	; 13
    1d56:	0f b6       	in	r0, 0x3f	; 63
    1d58:	f8 94       	cli
    1d5a:	de bf       	out	0x3e, r29	; 62
    1d5c:	0f be       	out	0x3f, r0	; 63
    1d5e:	cd bf       	out	0x3d, r28	; 61
    1d60:	cf 91       	pop	r28
    1d62:	df 91       	pop	r29
    1d64:	08 95       	ret

00001d66 <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
U8 can_get_status (st_cmd_t* cmd)
{
    1d66:	df 93       	push	r29
    1d68:	cf 93       	push	r28
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
    1d6e:	27 97       	sbiw	r28, 0x07	; 7
    1d70:	0f b6       	in	r0, 0x3f	; 63
    1d72:	f8 94       	cli
    1d74:	de bf       	out	0x3e, r29	; 62
    1d76:	0f be       	out	0x3f, r0	; 63
    1d78:	cd bf       	out	0x3d, r28	; 61
    1d7a:	9c 83       	std	Y+4, r25	; 0x04
    1d7c:	8b 83       	std	Y+3, r24	; 0x03
    U8 a_status, rtn_val;
     
    a_status = cmd->status;
    1d7e:	eb 81       	ldd	r30, Y+3	; 0x03
    1d80:	fc 81       	ldd	r31, Y+4	; 0x04
    1d82:	82 85       	ldd	r24, Z+10	; 0x0a
    1d84:	8a 83       	std	Y+2, r24	; 0x02
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	88 23       	and	r24, r24
    1d8a:	31 f0       	breq	.+12     	; 0x1d98 <can_get_status+0x32>
    1d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8e:	8f 31       	cpi	r24, 0x1F	; 31
    1d90:	19 f0       	breq	.+6      	; 0x1d98 <can_get_status+0x32>
    1d92:	8a 81       	ldd	r24, Y+2	; 0x02
    1d94:	8f 3f       	cpi	r24, 0xFF	; 255
    1d96:	19 f4       	brne	.+6      	; 0x1d9e <can_get_status+0x38>
    {
        return CAN_STATUS_ERROR;
    1d98:	22 e0       	ldi	r18, 0x02	; 2
    1d9a:	2f 83       	std	Y+7, r18	; 0x07
    1d9c:	fb c0       	rjmp	.+502    	; 0x1f94 <can_get_status+0x22e>
    }

    Can_set_mob(cmd->handle);
    1d9e:	ad ee       	ldi	r26, 0xED	; 237
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	eb 81       	ldd	r30, Y+3	; 0x03
    1da4:	fc 81       	ldd	r31, Y+4	; 0x04
    1da6:	80 81       	ld	r24, Z
    1da8:	82 95       	swap	r24
    1daa:	80 7f       	andi	r24, 0xF0	; 240
    1dac:	8c 93       	st	X, r24
    a_status = can_get_mob_status();
    1dae:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <can_get_mob_status>
    1db2:	8a 83       	std	Y+2, r24	; 0x02
    
    switch (a_status)
    1db4:	8a 81       	ldd	r24, Y+2	; 0x02
    1db6:	28 2f       	mov	r18, r24
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	3e 83       	std	Y+6, r19	; 0x06
    1dbc:	2d 83       	std	Y+5, r18	; 0x05
    1dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc2:	80 32       	cpi	r24, 0x20	; 32
    1dc4:	91 05       	cpc	r25, r1
    1dc6:	c9 f0       	breq	.+50     	; 0x1dfa <can_get_status+0x94>
    1dc8:	2d 81       	ldd	r18, Y+5	; 0x05
    1dca:	3e 81       	ldd	r19, Y+6	; 0x06
    1dcc:	21 32       	cpi	r18, 0x21	; 33
    1dce:	31 05       	cpc	r19, r1
    1dd0:	2c f4       	brge	.+10     	; 0x1ddc <can_get_status+0x76>
    1dd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd6:	00 97       	sbiw	r24, 0x00	; 0
    1dd8:	69 f0       	breq	.+26     	; 0x1df4 <can_get_status+0x8e>
    1dda:	ca c0       	rjmp	.+404    	; 0x1f70 <can_get_status+0x20a>
    1ddc:	2d 81       	ldd	r18, Y+5	; 0x05
    1dde:	3e 81       	ldd	r19, Y+6	; 0x06
    1de0:	20 34       	cpi	r18, 0x40	; 64
    1de2:	31 05       	cpc	r19, r1
    1de4:	09 f4       	brne	.+2      	; 0x1de8 <can_get_status+0x82>
    1de6:	b4 c0       	rjmp	.+360    	; 0x1f50 <can_get_status+0x1ea>
    1de8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dea:	9e 81       	ldd	r25, Y+6	; 0x06
    1dec:	80 3a       	cpi	r24, 0xA0	; 160
    1dee:	91 05       	cpc	r25, r1
    1df0:	21 f0       	breq	.+8      	; 0x1dfa <can_get_status+0x94>
    1df2:	be c0       	rjmp	.+380    	; 0x1f70 <can_get_status+0x20a>
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	89 83       	std	Y+1, r24	; 0x01
    1df8:	cb c0       	rjmp	.+406    	; 0x1f90 <can_get_status+0x22a>
            break;
        //---------------      
        case MOB_RX_COMPLETED:     
        case MOB_RX_COMPLETED_DLCW:
            cmd->dlc = Can_get_dlc();
    1dfa:	ef ee       	ldi	r30, 0xEF	; 239
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 81       	ld	r24, Z
    1e00:	8f 70       	andi	r24, 0x0F	; 15
    1e02:	eb 81       	ldd	r30, Y+3	; 0x03
    1e04:	fc 81       	ldd	r31, Y+4	; 0x04
    1e06:	87 83       	std	Z+7, r24	; 0x07
            can_get_data(cmd->pt_data);
    1e08:	eb 81       	ldd	r30, Y+3	; 0x03
    1e0a:	fc 81       	ldd	r31, Y+4	; 0x04
    1e0c:	80 85       	ldd	r24, Z+8	; 0x08
    1e0e:	91 85       	ldd	r25, Z+9	; 0x09
    1e10:	0e 94 b0 02 	call	0x560	; 0x560 <can_get_data>
            cmd->ctrl.rtr = Can_get_rtr();
    1e14:	e0 ef       	ldi	r30, 0xF0	; 240
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	88 2f       	mov	r24, r24
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	84 70       	andi	r24, 0x04	; 4
    1e20:	90 70       	andi	r25, 0x00	; 0
    1e22:	95 95       	asr	r25
    1e24:	87 95       	ror	r24
    1e26:	95 95       	asr	r25
    1e28:	87 95       	ror	r24
    1e2a:	eb 81       	ldd	r30, Y+3	; 0x03
    1e2c:	fc 81       	ldd	r31, Y+4	; 0x04
    1e2e:	83 87       	std	Z+11, r24	; 0x0b
            if (Can_get_ide()) // if extended frame
    1e30:	ef ee       	ldi	r30, 0xEF	; 239
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	88 2f       	mov	r24, r24
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	80 71       	andi	r24, 0x10	; 16
    1e3c:	90 70       	andi	r25, 0x00	; 0
    1e3e:	95 95       	asr	r25
    1e40:	87 95       	ror	r24
    1e42:	95 95       	asr	r25
    1e44:	87 95       	ror	r24
    1e46:	95 95       	asr	r25
    1e48:	87 95       	ror	r24
    1e4a:	95 95       	asr	r25
    1e4c:	87 95       	ror	r24
    1e4e:	00 97       	sbiw	r24, 0x00	; 0
    1e50:	09 f4       	brne	.+2      	; 0x1e54 <can_get_status+0xee>
    1e52:	4c c0       	rjmp	.+152    	; 0x1eec <can_get_status+0x186>
            {
                cmd->ctrl.ide = 1; // extended frame
    1e54:	eb 81       	ldd	r30, Y+3	; 0x03
    1e56:	fc 81       	ldd	r31, Y+4	; 0x04
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	84 87       	std	Z+12, r24	; 0x0c
                Can_get_ext_id(cmd->id.ext);
    1e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e60:	03 96       	adiw	r24, 0x03	; 3
    1e62:	dc 01       	movw	r26, r24
    1e64:	13 96       	adiw	r26, 0x03	; 3
    1e66:	e3 ef       	ldi	r30, 0xF3	; 243
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	86 95       	lsr	r24
    1e6e:	86 95       	lsr	r24
    1e70:	86 95       	lsr	r24
    1e72:	8c 93       	st	X, r24
    1e74:	8b 81       	ldd	r24, Y+3	; 0x03
    1e76:	9c 81       	ldd	r25, Y+4	; 0x04
    1e78:	03 96       	adiw	r24, 0x03	; 3
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	12 96       	adiw	r26, 0x02	; 2
    1e7e:	e2 ef       	ldi	r30, 0xF2	; 242
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	98 2f       	mov	r25, r24
    1e86:	96 95       	lsr	r25
    1e88:	96 95       	lsr	r25
    1e8a:	96 95       	lsr	r25
    1e8c:	e3 ef       	ldi	r30, 0xF3	; 243
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	80 81       	ld	r24, Z
    1e92:	82 95       	swap	r24
    1e94:	88 0f       	add	r24, r24
    1e96:	80 7e       	andi	r24, 0xE0	; 224
    1e98:	89 0f       	add	r24, r25
    1e9a:	8c 93       	st	X, r24
    1e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea0:	03 96       	adiw	r24, 0x03	; 3
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	11 96       	adiw	r26, 0x01	; 1
    1ea6:	e1 ef       	ldi	r30, 0xF1	; 241
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 81       	ld	r24, Z
    1eac:	98 2f       	mov	r25, r24
    1eae:	96 95       	lsr	r25
    1eb0:	96 95       	lsr	r25
    1eb2:	96 95       	lsr	r25
    1eb4:	e2 ef       	ldi	r30, 0xF2	; 242
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	82 95       	swap	r24
    1ebc:	88 0f       	add	r24, r24
    1ebe:	80 7e       	andi	r24, 0xE0	; 224
    1ec0:	89 0f       	add	r24, r25
    1ec2:	8c 93       	st	X, r24
    1ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec8:	03 96       	adiw	r24, 0x03	; 3
    1eca:	dc 01       	movw	r26, r24
    1ecc:	e0 ef       	ldi	r30, 0xF0	; 240
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	80 81       	ld	r24, Z
    1ed2:	98 2f       	mov	r25, r24
    1ed4:	96 95       	lsr	r25
    1ed6:	96 95       	lsr	r25
    1ed8:	96 95       	lsr	r25
    1eda:	e1 ef       	ldi	r30, 0xF1	; 241
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
    1ee0:	82 95       	swap	r24
    1ee2:	88 0f       	add	r24, r24
    1ee4:	80 7e       	andi	r24, 0xE0	; 224
    1ee6:	89 0f       	add	r24, r25
    1ee8:	8c 93       	st	X, r24
    1eea:	22 c0       	rjmp	.+68     	; 0x1f30 <can_get_status+0x1ca>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    1eec:	eb 81       	ldd	r30, Y+3	; 0x03
    1eee:	fc 81       	ldd	r31, Y+4	; 0x04
    1ef0:	14 86       	std	Z+12, r1	; 0x0c
                    Can_get_std_id(cmd->id.std);
    1ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef6:	03 96       	adiw	r24, 0x03	; 3
    1ef8:	dc 01       	movw	r26, r24
    1efa:	11 96       	adiw	r26, 0x01	; 1
    1efc:	e3 ef       	ldi	r30, 0xF3	; 243
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	80 81       	ld	r24, Z
    1f02:	82 95       	swap	r24
    1f04:	86 95       	lsr	r24
    1f06:	87 70       	andi	r24, 0x07	; 7
    1f08:	8c 93       	st	X, r24
    1f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f0e:	03 96       	adiw	r24, 0x03	; 3
    1f10:	dc 01       	movw	r26, r24
    1f12:	e2 ef       	ldi	r30, 0xF2	; 242
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	98 2f       	mov	r25, r24
    1f1a:	92 95       	swap	r25
    1f1c:	96 95       	lsr	r25
    1f1e:	97 70       	andi	r25, 0x07	; 7
    1f20:	e3 ef       	ldi	r30, 0xF3	; 243
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	80 81       	ld	r24, Z
    1f26:	88 0f       	add	r24, r24
    1f28:	88 0f       	add	r24, r24
    1f2a:	88 0f       	add	r24, r24
    1f2c:	89 0f       	add	r24, r25
    1f2e:	8c 93       	st	X, r24
                }
            // Status field of descriptor: 0x20 if Rx completed
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
    1f30:	eb 81       	ldd	r30, Y+3	; 0x03
    1f32:	fc 81       	ldd	r31, Y+4	; 0x04
    1f34:	8a 81       	ldd	r24, Y+2	; 0x02
    1f36:	82 87       	std	Z+10, r24	; 0x0a
            Can_mob_abort();        // Freed the MOB
    1f38:	af ee       	ldi	r26, 0xEF	; 239
    1f3a:	b0 e0       	ldi	r27, 0x00	; 0
    1f3c:	ef ee       	ldi	r30, 0xEF	; 239
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 81       	ld	r24, Z
    1f42:	8f 73       	andi	r24, 0x3F	; 63
    1f44:	8c 93       	st	X, r24
            Can_clear_status_mob(); //   and reset MOb status
    1f46:	ee ee       	ldi	r30, 0xEE	; 238
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_COMPLETED;
    1f4c:	19 82       	std	Y+1, r1	; 0x01
    1f4e:	20 c0       	rjmp	.+64     	; 0x1f90 <can_get_status+0x22a>
            break;
        //---------------      
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    1f50:	eb 81       	ldd	r30, Y+3	; 0x03
    1f52:	fc 81       	ldd	r31, Y+4	; 0x04
    1f54:	8a 81       	ldd	r24, Y+2	; 0x02
    1f56:	82 87       	std	Z+10, r24	; 0x0a
            Can_mob_abort();        // Freed the MOB
    1f58:	af ee       	ldi	r26, 0xEF	; 239
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	ef ee       	ldi	r30, 0xEF	; 239
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	8f 73       	andi	r24, 0x3F	; 63
    1f64:	8c 93       	st	X, r24
            Can_clear_status_mob(); //   and reset MOb status
    1f66:	ee ee       	ldi	r30, 0xEE	; 238
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_COMPLETED;
    1f6c:	19 82       	std	Y+1, r1	; 0x01
    1f6e:	10 c0       	rjmp	.+32     	; 0x1f90 <can_get_status+0x22a>
            break;
        //---------------      
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    1f70:	eb 81       	ldd	r30, Y+3	; 0x03
    1f72:	fc 81       	ldd	r31, Y+4	; 0x04
    1f74:	8a 81       	ldd	r24, Y+2	; 0x02
    1f76:	82 87       	std	Z+10, r24	; 0x0a
            Can_mob_abort();        // Freed the MOB
    1f78:	af ee       	ldi	r26, 0xEF	; 239
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	ef ee       	ldi	r30, 0xEF	; 239
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	8f 73       	andi	r24, 0x3F	; 63
    1f84:	8c 93       	st	X, r24
            Can_clear_status_mob(); //   and reset MOb status
    1f86:	ee ee       	ldi	r30, 0xEE	; 238
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_ERROR;
    1f8c:	82 e0       	ldi	r24, 0x02	; 2
    1f8e:	89 83       	std	Y+1, r24	; 0x01
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
    1f90:	99 81       	ldd	r25, Y+1	; 0x01
    1f92:	9f 83       	std	Y+7, r25	; 0x07
    1f94:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1f96:	27 96       	adiw	r28, 0x07	; 7
    1f98:	0f b6       	in	r0, 0x3f	; 63
    1f9a:	f8 94       	cli
    1f9c:	de bf       	out	0x3e, r29	; 62
    1f9e:	0f be       	out	0x3f, r0	; 63
    1fa0:	cd bf       	out	0x3d, r28	; 61
    1fa2:	cf 91       	pop	r28
    1fa4:	df 91       	pop	r29
    1fa6:	08 95       	ret

00001fa8 <led_init>:
//!
//! @return  none
//!
//------------------------------------------------------------------------------
void led_init(void)
{
    1fa8:	df 93       	push	r29
    1faa:	cf 93       	push	r28
    1fac:	cd b7       	in	r28, 0x3d	; 61
    1fae:	de b7       	in	r29, 0x3e	; 62
    //-- Set direction
    LED_PORT_DIR = 0xFF;
    1fb0:	e1 e2       	ldi	r30, 0x21	; 33
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	8f ef       	ldi	r24, 0xFF	; 255
    1fb6:	80 83       	st	Z, r24
    //-- Clear LEDs.
    LED_PORT_OUT = 0x00;    
    1fb8:	e2 e2       	ldi	r30, 0x22	; 34
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	10 82       	st	Z, r1
}
    1fbe:	cf 91       	pop	r28
    1fc0:	df 91       	pop	r29
    1fc2:	08 95       	ret

00001fc4 <write_led>:
//!
//! @return (none)
//!
//------------------------------------------------------------------------------
void write_led(U8 led_display)
{
    1fc4:	df 93       	push	r29
    1fc6:	cf 93       	push	r28
    1fc8:	0f 92       	push	r0
    1fca:	cd b7       	in	r28, 0x3d	; 61
    1fcc:	de b7       	in	r29, 0x3e	; 62
    1fce:	89 83       	std	Y+1, r24	; 0x01
    LED_PORT_OUT = led_display;
    1fd0:	e2 e2       	ldi	r30, 0x22	; 34
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	89 81       	ldd	r24, Y+1	; 0x01
    1fd6:	80 83       	st	Z, r24
}
    1fd8:	0f 90       	pop	r0
    1fda:	cf 91       	pop	r28
    1fdc:	df 91       	pop	r29
    1fde:	08 95       	ret

00001fe0 <swap_nibble_led>:
//!
//! @return  none
//!
//------------------------------------------------------------------------------
void swap_nibble_led(void)
{
    1fe0:	df 93       	push	r29
    1fe2:	cf 93       	push	r28
    1fe4:	cd b7       	in	r28, 0x3d	; 61
    1fe6:	de b7       	in	r29, 0x3e	; 62
    LED_PORT_OUT = (LED_PORT_IN << 4) | (LED_PORT_IN >> 4);
    1fe8:	a2 e2       	ldi	r26, 0x22	; 34
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	e0 e2       	ldi	r30, 0x20	; 32
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	88 2f       	mov	r24, r24
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	82 95       	swap	r24
    1ff8:	92 95       	swap	r25
    1ffa:	90 7f       	andi	r25, 0xF0	; 240
    1ffc:	98 27       	eor	r25, r24
    1ffe:	80 7f       	andi	r24, 0xF0	; 240
    2000:	98 27       	eor	r25, r24
    2002:	98 2f       	mov	r25, r24
    2004:	e0 e2       	ldi	r30, 0x20	; 32
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	82 95       	swap	r24
    200c:	8f 70       	andi	r24, 0x0F	; 15
    200e:	89 2b       	or	r24, r25
    2010:	8c 93       	st	X, r24
}
    2012:	cf 91       	pop	r28
    2014:	df 91       	pop	r29
    2016:	08 95       	ret

00002018 <toggle_led>:
//!
//! @return  none
//!
//------------------------------------------------------------------------------
void toggle_led(void)
{
    2018:	df 93       	push	r29
    201a:	cf 93       	push	r28
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
    LED_PORT_IN = 0xFF;
    2020:	e0 e2       	ldi	r30, 0x20	; 32
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	8f ef       	ldi	r24, 0xFF	; 255
    2026:	80 83       	st	Z, r24
}
    2028:	cf 91       	pop	r28
    202a:	df 91       	pop	r29
    202c:	08 95       	ret

0000202e <write_led_number>:
//!             FALSE: led_number >= 8 or led_level >=2,
//!             TRUE:  In range
//!
//------------------------------------------------------------------------------
U8 write_led_number(U8 led_number,Bool led_level)
{
    202e:	df 93       	push	r29
    2030:	cf 93       	push	r28
    2032:	00 d0       	rcall	.+0      	; 0x2034 <write_led_number+0x6>
    2034:	0f 92       	push	r0
    2036:	cd b7       	in	r28, 0x3d	; 61
    2038:	de b7       	in	r29, 0x3e	; 62
    203a:	8a 83       	std	Y+2, r24	; 0x02
    203c:	6b 83       	std	Y+3, r22	; 0x03
U8 range_error;
    
    range_error = FALSE;
    203e:	19 82       	std	Y+1, r1	; 0x01
    if (led_number < 8)
    2040:	8a 81       	ldd	r24, Y+2	; 0x02
    2042:	88 30       	cpi	r24, 0x08	; 8
    2044:	88 f5       	brcc	.+98     	; 0x20a8 <write_led_number+0x7a>
    {
        if (led_level==0)
    2046:	8b 81       	ldd	r24, Y+3	; 0x03
    2048:	88 23       	and	r24, r24
    204a:	b1 f4       	brne	.+44     	; 0x2078 <write_led_number+0x4a>
        {
            range_error = TRUE;
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	89 83       	std	Y+1, r24	; 0x01
            LED_PORT_OUT &= ~(1<<led_number);
    2050:	a2 e2       	ldi	r26, 0x22	; 34
    2052:	b0 e0       	ldi	r27, 0x00	; 0
    2054:	e2 e2       	ldi	r30, 0x22	; 34
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	48 2f       	mov	r20, r24
    205c:	8a 81       	ldd	r24, Y+2	; 0x02
    205e:	28 2f       	mov	r18, r24
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	02 2e       	mov	r0, r18
    2068:	02 c0       	rjmp	.+4      	; 0x206e <write_led_number+0x40>
    206a:	88 0f       	add	r24, r24
    206c:	99 1f       	adc	r25, r25
    206e:	0a 94       	dec	r0
    2070:	e2 f7       	brpl	.-8      	; 0x206a <write_led_number+0x3c>
    2072:	80 95       	com	r24
    2074:	84 23       	and	r24, r20
    2076:	8c 93       	st	X, r24
        }
        if (led_level==1)
    2078:	8b 81       	ldd	r24, Y+3	; 0x03
    207a:	81 30       	cpi	r24, 0x01	; 1
    207c:	a9 f4       	brne	.+42     	; 0x20a8 <write_led_number+0x7a>
        {
            range_error = TRUE;
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	89 83       	std	Y+1, r24	; 0x01
            LED_PORT_OUT |= (1<<led_number);
    2082:	a2 e2       	ldi	r26, 0x22	; 34
    2084:	b0 e0       	ldi	r27, 0x00	; 0
    2086:	e2 e2       	ldi	r30, 0x22	; 34
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	48 2f       	mov	r20, r24
    208e:	8a 81       	ldd	r24, Y+2	; 0x02
    2090:	28 2f       	mov	r18, r24
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	02 2e       	mov	r0, r18
    209a:	02 c0       	rjmp	.+4      	; 0x20a0 <write_led_number+0x72>
    209c:	88 0f       	add	r24, r24
    209e:	99 1f       	adc	r25, r25
    20a0:	0a 94       	dec	r0
    20a2:	e2 f7       	brpl	.-8      	; 0x209c <write_led_number+0x6e>
    20a4:	84 2b       	or	r24, r20
    20a6:	8c 93       	st	X, r24
        }
    }
    return range_error;
    20a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    20aa:	0f 90       	pop	r0
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	cf 91       	pop	r28
    20b2:	df 91       	pop	r29
    20b4:	08 95       	ret

000020b6 <wait_for>:
//!
//! @return  none 
//!
//------------------------------------------------------------------------------
void wait_for(U16 ms_count)
{
    20b6:	df 93       	push	r29
    20b8:	cf 93       	push	r28
    20ba:	cd b7       	in	r28, 0x3d	; 61
    20bc:	de b7       	in	r29, 0x3e	; 62
    20be:	2a 97       	sbiw	r28, 0x0a	; 10
    20c0:	0f b6       	in	r0, 0x3f	; 63
    20c2:	f8 94       	cli
    20c4:	de bf       	out	0x3e, r29	; 62
    20c6:	0f be       	out	0x3f, r0	; 63
    20c8:	cd bf       	out	0x3d, r28	; 61
    20ca:	9a 87       	std	Y+10, r25	; 0x0a
    20cc:	89 87       	std	Y+9, r24	; 0x09
U32 temp;
U16 i;
U8  j, k;

    if (rtc_running == ON)
    20ce:	80 91 5a 03 	lds	r24, 0x035A
    20d2:	81 30       	cpi	r24, 0x01	; 1
    20d4:	09 f0       	breq	.+2      	; 0x20d8 <wait_for+0x22>
    20d6:	45 c0       	rjmp	.+138    	; 0x2162 <wait_for+0xac>
    {
        Disable_interrupt(); temp = rtc_tics; Enable_interrupt();    //-- Get atomic U32 value
    20d8:	f8 94       	cli
    20da:	80 91 5f 03 	lds	r24, 0x035F
    20de:	90 91 60 03 	lds	r25, 0x0360
    20e2:	a0 91 61 03 	lds	r26, 0x0361
    20e6:	b0 91 62 03 	lds	r27, 0x0362
    20ea:	8d 83       	std	Y+5, r24	; 0x05
    20ec:	9e 83       	std	Y+6, r25	; 0x06
    20ee:	af 83       	std	Y+7, r26	; 0x07
    20f0:	b8 87       	std	Y+8, r27	; 0x08
    20f2:	78 94       	sei
        temp += ((U32)(ms_count));
    20f4:	89 85       	ldd	r24, Y+9	; 0x09
    20f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f8:	9c 01       	movw	r18, r24
    20fa:	40 e0       	ldi	r20, 0x00	; 0
    20fc:	50 e0       	ldi	r21, 0x00	; 0
    20fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2100:	9e 81       	ldd	r25, Y+6	; 0x06
    2102:	af 81       	ldd	r26, Y+7	; 0x07
    2104:	b8 85       	ldd	r27, Y+8	; 0x08
    2106:	82 0f       	add	r24, r18
    2108:	93 1f       	adc	r25, r19
    210a:	a4 1f       	adc	r26, r20
    210c:	b5 1f       	adc	r27, r21
    210e:	8d 83       	std	Y+5, r24	; 0x05
    2110:	9e 83       	std	Y+6, r25	; 0x06
    2112:	af 83       	std	Y+7, r26	; 0x07
    2114:	b8 87       	std	Y+8, r27	; 0x08
        while (1)
        {
            Disable_interrupt();    //-- Get atomic U32 values
    2116:	f8 94       	cli
            if (rtc_tics == temp) break;                //-- Standart EXIT
    2118:	20 91 5f 03 	lds	r18, 0x035F
    211c:	30 91 60 03 	lds	r19, 0x0360
    2120:	40 91 61 03 	lds	r20, 0x0361
    2124:	50 91 62 03 	lds	r21, 0x0362
    2128:	8d 81       	ldd	r24, Y+5	; 0x05
    212a:	9e 81       	ldd	r25, Y+6	; 0x06
    212c:	af 81       	ldd	r26, Y+7	; 0x07
    212e:	b8 85       	ldd	r27, Y+8	; 0x08
    2130:	28 17       	cp	r18, r24
    2132:	39 07       	cpc	r19, r25
    2134:	4a 07       	cpc	r20, r26
    2136:	5b 07       	cpc	r21, r27
    2138:	99 f1       	breq	.+102    	; 0x21a0 <wait_for+0xea>
            if (rtc_tics == ((U32)(ms_count)) ) break;  //-- EXIT if overflow (not right)
    213a:	89 85       	ldd	r24, Y+9	; 0x09
    213c:	9a 85       	ldd	r25, Y+10	; 0x0a
    213e:	9c 01       	movw	r18, r24
    2140:	40 e0       	ldi	r20, 0x00	; 0
    2142:	50 e0       	ldi	r21, 0x00	; 0
    2144:	80 91 5f 03 	lds	r24, 0x035F
    2148:	90 91 60 03 	lds	r25, 0x0360
    214c:	a0 91 61 03 	lds	r26, 0x0361
    2150:	b0 91 62 03 	lds	r27, 0x0362
    2154:	28 17       	cp	r18, r24
    2156:	39 07       	cpc	r19, r25
    2158:	4a 07       	cpc	r20, r26
    215a:	5b 07       	cpc	r21, r27
    215c:	09 f1       	breq	.+66     	; 0x21a0 <wait_for+0xea>
            Enable_interrupt();
    215e:	78 94       	sei
    2160:	da cf       	rjmp	.-76     	; 0x2116 <wait_for+0x60>
        }
    }
    else    //-- No RTC, enabling something almost equivalent but not right.
    {
        for (i=0;i<ms_count;i++)
    2162:	1c 82       	std	Y+4, r1	; 0x04
    2164:	1b 82       	std	Y+3, r1	; 0x03
    2166:	15 c0       	rjmp	.+42     	; 0x2192 <wait_for+0xdc>
        {
            for (j=0;j<(U8)(FOSC/1000);j++)
    2168:	1a 82       	std	Y+2, r1	; 0x02
    216a:	0b c0       	rjmp	.+22     	; 0x2182 <wait_for+0xcc>
            {
                for (k=0; k<90;k++);
    216c:	19 82       	std	Y+1, r1	; 0x01
    216e:	03 c0       	rjmp	.+6      	; 0x2176 <wait_for+0xc0>
    2170:	89 81       	ldd	r24, Y+1	; 0x01
    2172:	8f 5f       	subi	r24, 0xFF	; 255
    2174:	89 83       	std	Y+1, r24	; 0x01
    2176:	89 81       	ldd	r24, Y+1	; 0x01
    2178:	8a 35       	cpi	r24, 0x5A	; 90
    217a:	d0 f3       	brcs	.-12     	; 0x2170 <wait_for+0xba>
    }
    else    //-- No RTC, enabling something almost equivalent but not right.
    {
        for (i=0;i<ms_count;i++)
        {
            for (j=0;j<(U8)(FOSC/1000);j++)
    217c:	8a 81       	ldd	r24, Y+2	; 0x02
    217e:	8f 5f       	subi	r24, 0xFF	; 255
    2180:	8a 83       	std	Y+2, r24	; 0x02
    2182:	8a 81       	ldd	r24, Y+2	; 0x02
    2184:	8e 36       	cpi	r24, 0x6E	; 110
    2186:	90 f3       	brcs	.-28     	; 0x216c <wait_for+0xb6>
            Enable_interrupt();
        }
    }
    else    //-- No RTC, enabling something almost equivalent but not right.
    {
        for (i=0;i<ms_count;i++)
    2188:	8b 81       	ldd	r24, Y+3	; 0x03
    218a:	9c 81       	ldd	r25, Y+4	; 0x04
    218c:	01 96       	adiw	r24, 0x01	; 1
    218e:	9c 83       	std	Y+4, r25	; 0x04
    2190:	8b 83       	std	Y+3, r24	; 0x03
    2192:	2b 81       	ldd	r18, Y+3	; 0x03
    2194:	3c 81       	ldd	r19, Y+4	; 0x04
    2196:	89 85       	ldd	r24, Y+9	; 0x09
    2198:	9a 85       	ldd	r25, Y+10	; 0x0a
    219a:	28 17       	cp	r18, r24
    219c:	39 07       	cpc	r19, r25
    219e:	20 f3       	brcs	.-56     	; 0x2168 <wait_for+0xb2>
            {
                for (k=0; k<90;k++);
            }
        }
    }
}
    21a0:	2a 96       	adiw	r28, 0x0a	; 10
    21a2:	0f b6       	in	r0, 0x3f	; 63
    21a4:	f8 94       	cli
    21a6:	de bf       	out	0x3e, r29	; 62
    21a8:	0f be       	out	0x3f, r0	; 63
    21aa:	cd bf       	out	0x3d, r28	; 61
    21ac:	cf 91       	pop	r28
    21ae:	df 91       	pop	r29
    21b0:	08 95       	ret

000021b2 <rtc_int_init>:
//!
//------------------------------------------------------------------------------
#if (RTC_TIMER == 2)

void rtc_int_init(void)
{
    21b2:	df 93       	push	r29
    21b4:	cf 93       	push	r28
    21b6:	00 d0       	rcall	.+0      	; 0x21b8 <rtc_int_init+0x6>
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
U16 i;
    
    Disable_interrupt();
    21bc:	f8 94       	cli

    Timer8_clear();                 //-- Timer 2 cleared & initialized "OFF"
    21be:	e0 eb       	ldi	r30, 0xB0	; 176
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	10 82       	st	Z, r1
    21c4:	e2 eb       	ldi	r30, 0xB2	; 178
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	10 82       	st	Z, r1
    21ca:	e3 eb       	ldi	r30, 0xB3	; 179
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	10 82       	st	Z, r1
    for (i=0;i<0xFFFF;i++);         //-- Waiting to let the Xtal stabilize after a power-on
    21d0:	1a 82       	std	Y+2, r1	; 0x02
    21d2:	19 82       	std	Y+1, r1	; 0x01
    21d4:	05 c0       	rjmp	.+10     	; 0x21e0 <rtc_int_init+0x2e>
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
    21d8:	9a 81       	ldd	r25, Y+2	; 0x02
    21da:	01 96       	adiw	r24, 0x01	; 1
    21dc:	9a 83       	std	Y+2, r25	; 0x02
    21de:	89 83       	std	Y+1, r24	; 0x01
    21e0:	89 81       	ldd	r24, Y+1	; 0x01
    21e2:	9a 81       	ldd	r25, Y+2	; 0x02
    21e4:	2f ef       	ldi	r18, 0xFF	; 255
    21e6:	8f 3f       	cpi	r24, 0xFF	; 255
    21e8:	92 07       	cpc	r25, r18
    21ea:	a9 f7       	brne	.-22     	; 0x21d6 <rtc_int_init+0x24>
    Timer8_overflow_it_disable();   //-- Disable OCIE2A interrupt
    21ec:	a0 e7       	ldi	r26, 0x70	; 112
    21ee:	b0 e0       	ldi	r27, 0x00	; 0
    21f0:	e0 e7       	ldi	r30, 0x70	; 112
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	80 81       	ld	r24, Z
    21f6:	8e 7f       	andi	r24, 0xFE	; 254
    21f8:	8c 93       	st	X, r24
    Timer8_compare_a_it_disable();  //-- Disable TOIE2 interrupt
    21fa:	a0 e7       	ldi	r26, 0x70	; 112
    21fc:	b0 e0       	ldi	r27, 0x00	; 0
    21fe:	e0 e7       	ldi	r30, 0x70	; 112
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	80 81       	ld	r24, Z
    2204:	8d 7f       	andi	r24, 0xFD	; 253
    2206:	8c 93       	st	X, r24
    //-- Config: - CTC mode (mode 2, top=OCR2A)
    //--         - No output
    //--        (- Timer "OFF")
    Timer8_set_mode_output_a(TIMER8_COMP_MODE_NORMAL);
    2208:	a0 eb       	ldi	r26, 0xB0	; 176
    220a:	b0 e0       	ldi	r27, 0x00	; 0
    220c:	e0 eb       	ldi	r30, 0xB0	; 176
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	8f 7c       	andi	r24, 0xCF	; 207
    2214:	8c 93       	st	X, r24
    Timer8_set_waveform_mode(TIMER8_WGM_CTC_OCR);
    2216:	a0 eb       	ldi	r26, 0xB0	; 176
    2218:	b0 e0       	ldi	r27, 0x00	; 0
    221a:	e0 eb       	ldi	r30, 0xB0	; 176
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	87 7b       	andi	r24, 0xB7	; 183
    2222:	88 60       	ori	r24, 0x08	; 8
    2224:	8c 93       	st	X, r24

#   if (RTC_CLOCK == 32)
   
    //--- Asynchronous external clock 32,768 KHZ
        Timer8_2_external_osc();            //-- Init RTC clock
    2226:	a6 eb       	ldi	r26, 0xB6	; 182
    2228:	b0 e0       	ldi	r27, 0x00	; 0
    222a:	e6 eb       	ldi	r30, 0xB6	; 182
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	87 7e       	andi	r24, 0xE7	; 231
    2232:	88 60       	ori	r24, 0x08	; 8
    2234:	8c 93       	st	X, r24
        Timer8_set_compare_a(33-1);         //-- MAGIC_NUMBER !
    2236:	e3 eb       	ldi	r30, 0xB3	; 179
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	80 e2       	ldi	r24, 0x20	; 32
    223c:	80 83       	st	Z, r24
        //-- No prescaler & timer "ON"
        //-- Tic interval: ((1/32768)*MAGIC_NUMBER) sec = 1.00708008 msec
        Timer8_set_clock(TIMER8_CLKIO_BY_1);
    223e:	a0 eb       	ldi	r26, 0xB0	; 176
    2240:	b0 e0       	ldi	r27, 0x00	; 0
    2242:	e0 eb       	ldi	r30, 0xB0	; 176
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
    2248:	88 7f       	andi	r24, 0xF8	; 248
    224a:	81 60       	ori	r24, 0x01	; 1
    224c:	8c 93       	st	X, r24
#   else
#       error This RTC_CLOCK value is not available input for "rtc_drv.c" file

#   endif // (RTC_CLOCK ...
    
    while(Timer8_2_update_busy());    //-- Wait for TCN2UB, OCR2UB and TCR2UB to be cleared
    224e:	e6 eb       	ldi	r30, 0xB6	; 182
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	80 81       	ld	r24, Z
    2254:	88 2f       	mov	r24, r24
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	87 70       	andi	r24, 0x07	; 7
    225a:	90 70       	andi	r25, 0x00	; 0
    225c:	00 97       	sbiw	r24, 0x00	; 0
    225e:	b9 f7       	brne	.-18     	; 0x224e <rtc_int_init+0x9c>

    Timer8_clear_compare_a_it();      //-- Clear Output_Compare Interrupt-flags
    2260:	a7 e3       	ldi	r26, 0x37	; 55
    2262:	b0 e0       	ldi	r27, 0x00	; 0
    2264:	e7 e3       	ldi	r30, 0x37	; 55
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
    226a:	82 60       	ori	r24, 0x02	; 2
    226c:	8c 93       	st	X, r24
    Timer8_compare_a_it_enable();     //-- Enable Timer2 Output_Compare Interrupt
    226e:	a0 e7       	ldi	r26, 0x70	; 112
    2270:	b0 e0       	ldi	r27, 0x00	; 0
    2272:	e0 e7       	ldi	r30, 0x70	; 112
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	80 81       	ld	r24, Z
    2278:	82 60       	ori	r24, 0x02	; 2
    227a:	8c 93       	st	X, r24

    //-- Time setting
    rtc_tics         = 0;
    227c:	10 92 5f 03 	sts	0x035F, r1
    2280:	10 92 60 03 	sts	0x0360, r1
    2284:	10 92 61 03 	sts	0x0361, r1
    2288:	10 92 62 03 	sts	0x0362, r1
    rtc_milliseconds = 0;
    228c:	10 92 5e 03 	sts	0x035E, r1
    2290:	10 92 5d 03 	sts	0x035D, r1
    rtc_seconds      = 0;
    2294:	10 92 64 03 	sts	0x0364, r1
    rtc_minutes      = 0;
    2298:	10 92 5b 03 	sts	0x035B, r1
    rtc_hours        = 0;
    229c:	10 92 63 03 	sts	0x0363, r1
    rtc_days         = 0;
    22a0:	10 92 5c 03 	sts	0x035C, r1

    rtc_running = ON;
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	80 93 5a 03 	sts	0x035A, r24
    Enable_interrupt();
    22aa:	78 94       	sei
}
    22ac:	0f 90       	pop	r0
    22ae:	0f 90       	pop	r0
    22b0:	cf 91       	pop	r28
    22b2:	df 91       	pop	r29
    22b4:	08 95       	ret

000022b6 <__vector_9>:
//!
//------------------------------------------------------------------------------
#if (RTC_TIMER == 2)

ISR(TIMER2_COMP_vect)
{
    22b6:	1f 92       	push	r1
    22b8:	0f 92       	push	r0
    22ba:	0f b6       	in	r0, 0x3f	; 63
    22bc:	0f 92       	push	r0
    22be:	11 24       	eor	r1, r1
    22c0:	2f 93       	push	r18
    22c2:	8f 93       	push	r24
    22c4:	9f 93       	push	r25
    22c6:	af 93       	push	r26
    22c8:	bf 93       	push	r27
    22ca:	df 93       	push	r29
    22cc:	cf 93       	push	r28
    22ce:	cd b7       	in	r28, 0x3d	; 61
    22d0:	de b7       	in	r29, 0x3e	; 62
    rtc_tics++;                     //-- Increments tics
    22d2:	80 91 5f 03 	lds	r24, 0x035F
    22d6:	90 91 60 03 	lds	r25, 0x0360
    22da:	a0 91 61 03 	lds	r26, 0x0361
    22de:	b0 91 62 03 	lds	r27, 0x0362
    22e2:	01 96       	adiw	r24, 0x01	; 1
    22e4:	a1 1d       	adc	r26, r1
    22e6:	b1 1d       	adc	r27, r1
    22e8:	80 93 5f 03 	sts	0x035F, r24
    22ec:	90 93 60 03 	sts	0x0360, r25
    22f0:	a0 93 61 03 	sts	0x0361, r26
    22f4:	b0 93 62 03 	sts	0x0362, r27
    rtc_milliseconds++;             //-- Increments milli seconds
    22f8:	80 91 5d 03 	lds	r24, 0x035D
    22fc:	90 91 5e 03 	lds	r25, 0x035E
    2300:	01 96       	adiw	r24, 0x01	; 1
    2302:	90 93 5e 03 	sts	0x035E, r25
    2306:	80 93 5d 03 	sts	0x035D, r24
    
    if (rtc_milliseconds == 1000)
    230a:	80 91 5d 03 	lds	r24, 0x035D
    230e:	90 91 5e 03 	lds	r25, 0x035E
    2312:	23 e0       	ldi	r18, 0x03	; 3
    2314:	88 3e       	cpi	r24, 0xE8	; 232
    2316:	92 07       	cpc	r25, r18
    2318:	51 f5       	brne	.+84     	; 0x236e <__vector_9+0xb8>
    {
        rtc_milliseconds = 0;
    231a:	10 92 5e 03 	sts	0x035E, r1
    231e:	10 92 5d 03 	sts	0x035D, r1
        rtc_seconds++;              //-- Increments seconds
    2322:	80 91 64 03 	lds	r24, 0x0364
    2326:	8f 5f       	subi	r24, 0xFF	; 255
    2328:	80 93 64 03 	sts	0x0364, r24

        if (rtc_seconds == 60)
    232c:	80 91 64 03 	lds	r24, 0x0364
    2330:	8c 33       	cpi	r24, 0x3C	; 60
    2332:	e9 f4       	brne	.+58     	; 0x236e <__vector_9+0xb8>
        {
            rtc_seconds = 0;
    2334:	10 92 64 03 	sts	0x0364, r1
            rtc_minutes++;          //-- Increments minutes
    2338:	80 91 5b 03 	lds	r24, 0x035B
    233c:	8f 5f       	subi	r24, 0xFF	; 255
    233e:	80 93 5b 03 	sts	0x035B, r24
            
            if (rtc_minutes == 60)
    2342:	80 91 5b 03 	lds	r24, 0x035B
    2346:	8c 33       	cpi	r24, 0x3C	; 60
    2348:	91 f4       	brne	.+36     	; 0x236e <__vector_9+0xb8>
            {
                rtc_minutes = 0;
    234a:	10 92 5b 03 	sts	0x035B, r1
                rtc_hours++;        //-- Increments hours
    234e:	80 91 63 03 	lds	r24, 0x0363
    2352:	8f 5f       	subi	r24, 0xFF	; 255
    2354:	80 93 63 03 	sts	0x0363, r24
                        
                if (rtc_hours == 24)
    2358:	80 91 63 03 	lds	r24, 0x0363
    235c:	88 31       	cpi	r24, 0x18	; 24
    235e:	39 f4       	brne	.+14     	; 0x236e <__vector_9+0xb8>
                {
                    rtc_hours = 0;
    2360:	10 92 63 03 	sts	0x0363, r1
                    rtc_days++;     //-- Increments days
    2364:	80 91 5c 03 	lds	r24, 0x035C
    2368:	8f 5f       	subi	r24, 0xFF	; 255
    236a:	80 93 5c 03 	sts	0x035C, r24
                }
            }
        }
    }
}
    236e:	cf 91       	pop	r28
    2370:	df 91       	pop	r29
    2372:	bf 91       	pop	r27
    2374:	af 91       	pop	r26
    2376:	9f 91       	pop	r25
    2378:	8f 91       	pop	r24
    237a:	2f 91       	pop	r18
    237c:	0f 90       	pop	r0
    237e:	0f be       	out	0x3f, r0	; 63
    2380:	0f 90       	pop	r0
    2382:	1f 90       	pop	r1
    2384:	18 95       	reti

00002386 <uart_rx_get_3_data>:
//! @param  none
//!
//! @return UART pin value sampled 3 times
//------------------------------------------------------------------------------
Bool uart_rx_get_3_data (void)
{
    2386:	df 93       	push	r29
    2388:	cf 93       	push	r28
    238a:	0f 92       	push	r0
    238c:	cd b7       	in	r28, 0x3d	; 61
    238e:	de b7       	in	r29, 0x3e	; 62
U8 u8_temp = 0;
    2390:	19 82       	std	Y+1, r1	; 0x01

#if ((USE_UART == UART_0) || (USE_UART == UART_1))
    u8_temp = Uart_rx_get_3_data();
    2392:	ec e2       	ldi	r30, 0x2C	; 44
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	90 81       	ld	r25, Z
    2398:	ec e2       	ldi	r30, 0x2C	; 44
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	80 81       	ld	r24, Z
    239e:	98 23       	and	r25, r24
    23a0:	ec e2       	ldi	r30, 0x2C	; 44
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	80 81       	ld	r24, Z
    23a6:	89 23       	and	r24, r25
    23a8:	81 70       	andi	r24, 0x01	; 1
    23aa:	89 83       	std	Y+1, r24	; 0x01
    }
#   else
#       error USE_UART definition is not referenced in "uart_drv.h" file
#endif

    return u8_temp;
    23ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    23ae:	0f 90       	pop	r0
    23b0:	cf 91       	pop	r28
    23b2:	df 91       	pop	r29
    23b4:	08 95       	ret

000023b6 <uart_rx_get_data>:
//! @param  none
//!
//! @return UART pin value
//------------------------------------------------------------------------------
Bool uart_rx_get_data (void)
{
    23b6:	df 93       	push	r29
    23b8:	cf 93       	push	r28
    23ba:	0f 92       	push	r0
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62
U8 u8_temp = 0;
    23c0:	19 82       	std	Y+1, r1	; 0x01

#if ((USE_UART == UART_0) || (USE_UART == UART_1))
    u8_temp = Uart_rx_get_data();
    23c2:	ec e2       	ldi	r30, 0x2C	; 44
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	80 81       	ld	r24, Z
    23c8:	81 70       	andi	r24, 0x01	; 1
    23ca:	89 83       	std	Y+1, r24	; 0x01
    }
#   else
#       error USE_UART definition is not referenced in "uart_drv.h" file
#endif

    return u8_temp;
    23cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    23ce:	0f 90       	pop	r0
    23d0:	cf 91       	pop	r28
    23d2:	df 91       	pop	r29
    23d4:	08 95       	ret

000023d6 <uart_init>:
//!         ==0: research of timing failed
//!         ==1: baudrate performed
//!
//------------------------------------------------------------------------------
U8 uart_init (U8 mode, U32 baudrate)
{
    23d6:	df 93       	push	r29
    23d8:	cf 93       	push	r28
    23da:	00 d0       	rcall	.+0      	; 0x23dc <uart_init+0x6>
    23dc:	00 d0       	rcall	.+0      	; 0x23de <uart_init+0x8>
    23de:	00 d0       	rcall	.+0      	; 0x23e0 <uart_init+0xa>
    23e0:	cd b7       	in	r28, 0x3d	; 61
    23e2:	de b7       	in	r29, 0x3e	; 62
    23e4:	89 83       	std	Y+1, r24	; 0x01
    23e6:	4a 83       	std	Y+2, r20	; 0x02
    23e8:	5b 83       	std	Y+3, r21	; 0x03
    23ea:	6c 83       	std	Y+4, r22	; 0x04
    23ec:	7d 83       	std	Y+5, r23	; 0x05
    Uart_clear();       // Flush, Disable and Reset UART
    23ee:	e1 ec       	ldi	r30, 0xC1	; 193
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	10 82       	st	Z, r1
    23f4:	a2 ec       	ldi	r26, 0xC2	; 194
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	e6 ec       	ldi	r30, 0xC6	; 198
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	80 81       	ld	r24, Z
    23fe:	8c 93       	st	X, r24
    2400:	e0 ec       	ldi	r30, 0xC0	; 192
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	80 e4       	ldi	r24, 0x40	; 64
    2406:	80 83       	st	Z, r24
    2408:	e2 ec       	ldi	r30, 0xC2	; 194
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	86 e0       	ldi	r24, 0x06	; 6
    240e:	80 83       	st	Z, r24
    2410:	e5 ec       	ldi	r30, 0xC5	; 197
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	10 82       	st	Z, r1
    2416:	e4 ec       	ldi	r30, 0xC4	; 196
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	10 82       	st	Z, r1
    if (Uart_set_baudrate(baudrate) == 0) return 0;  //!<  c.f. macro in "uart_drv.h"
    241c:	e5 ec       	ldi	r30, 0xC5	; 197
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	80 83       	st	Z, r24
    2424:	e4 ec       	ldi	r30, 0xC4	; 196
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	87 e6       	ldi	r24, 0x67	; 103
    242a:	80 83       	st	Z, r24
    242c:	a0 ec       	ldi	r26, 0xC0	; 192
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	e0 ec       	ldi	r30, 0xC0	; 192
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	80 81       	ld	r24, Z
    2436:	82 60       	ori	r24, 0x02	; 2
    2438:	8c 93       	st	X, r24
    243a:	8c 91       	ld	r24, X
    243c:	88 23       	and	r24, r24
    243e:	11 f4       	brne	.+4      	; 0x2444 <uart_init+0x6e>
    2440:	1e 82       	std	Y+6, r1	; 0x06
    2442:	35 c0       	rjmp	.+106    	; 0x24ae <uart_init+0xd8>
    Uart_hw_init(mode);     //!<  c.f. macro in "uart_drv.h"
    2444:	a0 ec       	ldi	r26, 0xC0	; 192
    2446:	b0 e0       	ldi	r27, 0x00	; 0
    2448:	e0 ec       	ldi	r30, 0xC0	; 192
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	80 81       	ld	r24, Z
    244e:	80 62       	ori	r24, 0x20	; 32
    2450:	8c 93       	st	X, r24
    2452:	a1 ec       	ldi	r26, 0xC1	; 193
    2454:	b0 e0       	ldi	r27, 0x00	; 0
    2456:	e1 ec       	ldi	r30, 0xC1	; 193
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	80 81       	ld	r24, Z
    245c:	8b 7f       	andi	r24, 0xFB	; 251
    245e:	8c 93       	st	X, r24
    2460:	a1 ec       	ldi	r26, 0xC1	; 193
    2462:	b0 e0       	ldi	r27, 0x00	; 0
    2464:	e1 ec       	ldi	r30, 0xC1	; 193
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	80 81       	ld	r24, Z
    246a:	98 2f       	mov	r25, r24
    246c:	89 81       	ldd	r24, Y+1	; 0x01
    246e:	84 70       	andi	r24, 0x04	; 4
    2470:	89 2b       	or	r24, r25
    2472:	8c 93       	st	X, r24
    2474:	e2 ec       	ldi	r30, 0xC2	; 194
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	89 81       	ldd	r24, Y+1	; 0x01
    247a:	88 73       	andi	r24, 0x38	; 56
    247c:	80 83       	st	Z, r24
    247e:	a2 ec       	ldi	r26, 0xC2	; 194
    2480:	b0 e0       	ldi	r27, 0x00	; 0
    2482:	e2 ec       	ldi	r30, 0xC2	; 194
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	80 81       	ld	r24, Z
    2488:	28 2f       	mov	r18, r24
    248a:	89 81       	ldd	r24, Y+1	; 0x01
    248c:	88 2f       	mov	r24, r24
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	83 70       	andi	r24, 0x03	; 3
    2492:	90 70       	andi	r25, 0x00	; 0
    2494:	88 0f       	add	r24, r24
    2496:	99 1f       	adc	r25, r25
    2498:	82 2b       	or	r24, r18
    249a:	8c 93       	st	X, r24
    Uart_enable();          //!<  c.f. macro in "uart_drv.h"
    249c:	a1 ec       	ldi	r26, 0xC1	; 193
    249e:	b0 e0       	ldi	r27, 0x00	; 0
    24a0:	e1 ec       	ldi	r30, 0xC1	; 193
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	80 81       	ld	r24, Z
    24a6:	88 61       	ori	r24, 0x18	; 24
    24a8:	8c 93       	st	X, r24
    return (1);
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	8e 83       	std	Y+6, r24	; 0x06
    24ae:	8e 81       	ldd	r24, Y+6	; 0x06
}
    24b0:	26 96       	adiw	r28, 0x06	; 6
    24b2:	0f b6       	in	r0, 0x3f	; 63
    24b4:	f8 94       	cli
    24b6:	de bf       	out	0x3e, r29	; 62
    24b8:	0f be       	out	0x3f, r0	; 63
    24ba:	cd bf       	out	0x3d, r28	; 61
    24bc:	cf 91       	pop	r28
    24be:	df 91       	pop	r29
    24c0:	08 95       	ret

000024c2 <uart_test_hit>:
//!         ==0: Nothing has been received
//!         ==1: A character has been received
//!
//------------------------------------------------------------------------------
U8 uart_test_hit (void)
{
    24c2:	df 93       	push	r29
    24c4:	cf 93       	push	r28
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
    return (Uart_rx_ready());
    24ca:	e0 ec       	ldi	r30, 0xC0	; 192
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	80 81       	ld	r24, Z
    24d0:	88 1f       	adc	r24, r24
    24d2:	88 27       	eor	r24, r24
    24d4:	88 1f       	adc	r24, r24
}
    24d6:	cf 91       	pop	r28
    24d8:	df 91       	pop	r29
    24da:	08 95       	ret

000024dc <uart_putchar>:
//!
//! @return character sent
//!
//------------------------------------------------------------------------------
U8 uart_putchar (U8 ch)
{
    24dc:	df 93       	push	r29
    24de:	cf 93       	push	r28
    24e0:	0f 92       	push	r0
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
    24e6:	89 83       	std	Y+1, r24	; 0x01
    while(!Uart_tx_ready());
    24e8:	e0 ec       	ldi	r30, 0xC0	; 192
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	80 81       	ld	r24, Z
    24ee:	88 2f       	mov	r24, r24
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	80 72       	andi	r24, 0x20	; 32
    24f4:	90 70       	andi	r25, 0x00	; 0
    24f6:	95 95       	asr	r25
    24f8:	87 95       	ror	r24
    24fa:	95 95       	asr	r25
    24fc:	87 95       	ror	r24
    24fe:	95 95       	asr	r25
    2500:	87 95       	ror	r24
    2502:	95 95       	asr	r25
    2504:	87 95       	ror	r24
    2506:	95 95       	asr	r25
    2508:	87 95       	ror	r24
    250a:	00 97       	sbiw	r24, 0x00	; 0
    250c:	69 f3       	breq	.-38     	; 0x24e8 <uart_putchar+0xc>
    Uart_set_tx_busy();     // Set Busy flag before sending (always)
    Uart_send_byte(ch);
    250e:	e6 ec       	ldi	r30, 0xC6	; 198
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	89 81       	ldd	r24, Y+1	; 0x01
    2514:	80 83       	st	Z, r24
    return (ch);
    2516:	89 81       	ldd	r24, Y+1	; 0x01
}
    2518:	0f 90       	pop	r0
    251a:	cf 91       	pop	r28
    251c:	df 91       	pop	r29
    251e:	08 95       	ret

00002520 <uart_getchar>:
//!
//! @return read (received) character on the UART
//!
//------------------------------------------------------------------------------
U8 uart_getchar (void)
{
    2520:	df 93       	push	r29
    2522:	cf 93       	push	r28
    2524:	0f 92       	push	r0
    2526:	cd b7       	in	r28, 0x3d	; 61
    2528:	de b7       	in	r29, 0x3e	; 62
    U8 ch;

    while(!Uart_rx_ready());
    252a:	e0 ec       	ldi	r30, 0xC0	; 192
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	80 81       	ld	r24, Z
    2530:	88 1f       	adc	r24, r24
    2532:	88 27       	eor	r24, r24
    2534:	88 1f       	adc	r24, r24
    2536:	88 2f       	mov	r24, r24
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	90 70       	andi	r25, 0x00	; 0
    253c:	00 97       	sbiw	r24, 0x00	; 0
    253e:	a9 f3       	breq	.-22     	; 0x252a <uart_getchar+0xa>
    ch = Uart_get_byte();
    2540:	e6 ec       	ldi	r30, 0xC6	; 198
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	80 81       	ld	r24, Z
    2546:	89 83       	std	Y+1, r24	; 0x01
    Uart_ack_rx_byte();
    return ch;
    2548:	89 81       	ldd	r24, Y+1	; 0x01
}
    254a:	0f 90       	pop	r0
    254c:	cf 91       	pop	r28
    254e:	df 91       	pop	r29
    2550:	08 95       	ret

00002552 <uart_put_string>:
//! @return (none)
//!
//------------------------------------------------------------------------------
#ifndef REDUCED_UART_LIB
void uart_put_string (U8 *data_string)
    {
    2552:	df 93       	push	r29
    2554:	cf 93       	push	r28
    2556:	00 d0       	rcall	.+0      	; 0x2558 <uart_put_string+0x6>
    2558:	cd b7       	in	r28, 0x3d	; 61
    255a:	de b7       	in	r29, 0x3e	; 62
    255c:	9a 83       	std	Y+2, r25	; 0x02
    255e:	89 83       	std	Y+1, r24	; 0x01
    2560:	0b c0       	rjmp	.+22     	; 0x2578 <uart_put_string+0x26>
    while(*data_string) uart_putchar (*data_string++);
    2562:	e9 81       	ldd	r30, Y+1	; 0x01
    2564:	fa 81       	ldd	r31, Y+2	; 0x02
    2566:	20 81       	ld	r18, Z
    2568:	89 81       	ldd	r24, Y+1	; 0x01
    256a:	9a 81       	ldd	r25, Y+2	; 0x02
    256c:	01 96       	adiw	r24, 0x01	; 1
    256e:	9a 83       	std	Y+2, r25	; 0x02
    2570:	89 83       	std	Y+1, r24	; 0x01
    2572:	82 2f       	mov	r24, r18
    2574:	0e 94 6e 12 	call	0x24dc	; 0x24dc <uart_putchar>
    2578:	e9 81       	ldd	r30, Y+1	; 0x01
    257a:	fa 81       	ldd	r31, Y+2	; 0x02
    257c:	80 81       	ld	r24, Z
    257e:	88 23       	and	r24, r24
    2580:	81 f7       	brne	.-32     	; 0x2562 <uart_put_string+0x10>
    }
    2582:	0f 90       	pop	r0
    2584:	0f 90       	pop	r0
    2586:	cf 91       	pop	r28
    2588:	df 91       	pop	r29
    258a:	08 95       	ret

0000258c <uart_mini_printf>:
//! Return: 0 = O.K.
//!
//------------------------------------------------------------------------------
#ifndef REDUCED_UART_LIB
U8 uart_mini_printf(char *format, ...)
{
    258c:	0f 93       	push	r16
    258e:	1f 93       	push	r17
    2590:	df 93       	push	r29
    2592:	cf 93       	push	r28
    2594:	cd b7       	in	r28, 0x3d	; 61
    2596:	de b7       	in	r29, 0x3e	; 62
    2598:	af 97       	sbiw	r28, 0x2f	; 47
    259a:	0f b6       	in	r0, 0x3f	; 63
    259c:	f8 94       	cli
    259e:	de bf       	out	0x3e, r29	; 62
    25a0:	0f be       	out	0x3f, r0	; 63
    25a2:	cd bf       	out	0x3d, r28	; 61
    S16     s16_val;
    S32     s32_val;
    U16     u16_val;
    U32     u32_val;

    long_flag = FALSE;
    25a4:	1f 86       	std	Y+15, r1	; 0x0f
    alt_p_c = FALSE;
    25a6:	1e 86       	std	Y+14, r1	; 0x0e
    min_size = DATA_BUF_LEN-1;
    25a8:	8b e0       	ldi	r24, 0x0B	; 11
    25aa:	88 8b       	std	Y+16, r24	; 0x10

    va_start(arg_ptr, format);   // make arg_ptr point to the first unnamed arg
    25ac:	ce 01       	movw	r24, r28
    25ae:	c8 96       	adiw	r24, 0x38	; 56
    25b0:	99 8f       	std	Y+25, r25	; 0x19
    25b2:	88 8f       	std	Y+24, r24	; 0x18
    for (p = (U8 *) format; *p; p++)
    25b4:	8e a9       	ldd	r24, Y+54	; 0x36
    25b6:	9f a9       	ldd	r25, Y+55	; 0x37
    25b8:	9f 8b       	std	Y+23, r25	; 0x17
    25ba:	8e 8b       	std	Y+22, r24	; 0x16
    25bc:	73 c3       	rjmp	.+1766   	; 0x2ca4 <uart_mini_printf+0x718>
    {
        if ((*p == '%') || (alt_p_c == TRUE))
    25be:	ee 89       	ldd	r30, Y+22	; 0x16
    25c0:	ff 89       	ldd	r31, Y+23	; 0x17
    25c2:	80 81       	ld	r24, Z
    25c4:	85 32       	cpi	r24, 0x25	; 37
    25c6:	21 f0       	breq	.+8      	; 0x25d0 <uart_mini_printf+0x44>
    25c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    25ca:	81 30       	cpi	r24, 0x01	; 1
    25cc:	09 f0       	breq	.+2      	; 0x25d0 <uart_mini_printf+0x44>
    25ce:	47 c0       	rjmp	.+142    	; 0x265e <uart_mini_printf+0xd2>
        {
            p++;
    25d0:	8e 89       	ldd	r24, Y+22	; 0x16
    25d2:	9f 89       	ldd	r25, Y+23	; 0x17
    25d4:	01 96       	adiw	r24, 0x01	; 1
    25d6:	9f 8b       	std	Y+23, r25	; 0x17
    25d8:	8e 8b       	std	Y+22, r24	; 0x16
            uart_putchar(*p);
            alt_p_c = FALSE;
            long_flag = FALSE;
            continue;   // "switch (*p)" section skipped
        }
        switch (*p)
    25da:	ee 89       	ldd	r30, Y+22	; 0x16
    25dc:	ff 89       	ldd	r31, Y+23	; 0x17
    25de:	80 81       	ld	r24, Z
    25e0:	28 2f       	mov	r18, r24
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	3f a7       	std	Y+47, r19	; 0x2f
    25e6:	2e a7       	std	Y+46, r18	; 0x2e
    25e8:	8e a5       	ldd	r24, Y+46	; 0x2e
    25ea:	9f a5       	ldd	r25, Y+47	; 0x2f
    25ec:	84 36       	cpi	r24, 0x64	; 100
    25ee:	91 05       	cpc	r25, r1
    25f0:	09 f4       	brne	.+2      	; 0x25f4 <uart_mini_printf+0x68>
    25f2:	96 c0       	rjmp	.+300    	; 0x2720 <uart_mini_printf+0x194>
    25f4:	2e a5       	ldd	r18, Y+46	; 0x2e
    25f6:	3f a5       	ldd	r19, Y+47	; 0x2f
    25f8:	25 36       	cpi	r18, 0x65	; 101
    25fa:	31 05       	cpc	r19, r1
    25fc:	94 f4       	brge	.+36     	; 0x2622 <uart_mini_printf+0x96>
    25fe:	8e a5       	ldd	r24, Y+46	; 0x2e
    2600:	9f a5       	ldd	r25, Y+47	; 0x2f
    2602:	88 35       	cpi	r24, 0x58	; 88
    2604:	91 05       	cpc	r25, r1
    2606:	09 f4       	brne	.+2      	; 0x260a <uart_mini_printf+0x7e>
    2608:	fc c1       	rjmp	.+1016   	; 0x2a02 <uart_mini_printf+0x476>
    260a:	2e a5       	ldd	r18, Y+46	; 0x2e
    260c:	3f a5       	ldd	r19, Y+47	; 0x2f
    260e:	23 36       	cpi	r18, 0x63	; 99
    2610:	31 05       	cpc	r19, r1
    2612:	69 f1       	breq	.+90     	; 0x266e <uart_mini_printf+0xe2>
    2614:	8e a5       	ldd	r24, Y+46	; 0x2e
    2616:	9f a5       	ldd	r25, Y+47	; 0x2f
    2618:	80 33       	cpi	r24, 0x30	; 48
    261a:	91 05       	cpc	r25, r1
    261c:	09 f4       	brne	.+2      	; 0x2620 <uart_mini_printf+0x94>
    261e:	bb c2       	rjmp	.+1398   	; 0x2b96 <uart_mini_printf+0x60a>
    2620:	2d c3       	rjmp	.+1626   	; 0x2c7c <uart_mini_printf+0x6f0>
    2622:	2e a5       	ldd	r18, Y+46	; 0x2e
    2624:	3f a5       	ldd	r19, Y+47	; 0x2f
    2626:	23 37       	cpi	r18, 0x73	; 115
    2628:	31 05       	cpc	r19, r1
    262a:	e9 f1       	breq	.+122    	; 0x26a6 <uart_mini_printf+0x11a>
    262c:	8e a5       	ldd	r24, Y+46	; 0x2e
    262e:	9f a5       	ldd	r25, Y+47	; 0x2f
    2630:	84 37       	cpi	r24, 0x74	; 116
    2632:	91 05       	cpc	r25, r1
    2634:	3c f4       	brge	.+14     	; 0x2644 <uart_mini_printf+0xb8>
    2636:	2e a5       	ldd	r18, Y+46	; 0x2e
    2638:	3f a5       	ldd	r19, Y+47	; 0x2f
    263a:	2c 36       	cpi	r18, 0x6C	; 108
    263c:	31 05       	cpc	r19, r1
    263e:	09 f4       	brne	.+2      	; 0x2642 <uart_mini_printf+0xb6>
    2640:	5c c0       	rjmp	.+184    	; 0x26fa <uart_mini_printf+0x16e>
    2642:	1c c3       	rjmp	.+1592   	; 0x2c7c <uart_mini_printf+0x6f0>
    2644:	8e a5       	ldd	r24, Y+46	; 0x2e
    2646:	9f a5       	ldd	r25, Y+47	; 0x2f
    2648:	85 37       	cpi	r24, 0x75	; 117
    264a:	91 05       	cpc	r25, r1
    264c:	09 f4       	brne	.+2      	; 0x2650 <uart_mini_printf+0xc4>
    264e:	36 c1       	rjmp	.+620    	; 0x28bc <uart_mini_printf+0x330>
    2650:	2e a5       	ldd	r18, Y+46	; 0x2e
    2652:	3f a5       	ldd	r19, Y+47	; 0x2f
    2654:	28 37       	cpi	r18, 0x78	; 120
    2656:	31 05       	cpc	r19, r1
    2658:	09 f4       	brne	.+2      	; 0x265c <uart_mini_printf+0xd0>
    265a:	d3 c1       	rjmp	.+934    	; 0x2a02 <uart_mini_printf+0x476>
    265c:	0f c3       	rjmp	.+1566   	; 0x2c7c <uart_mini_printf+0x6f0>
        {
            p++;
        }
        else
        {
            uart_putchar(*p);
    265e:	ee 89       	ldd	r30, Y+22	; 0x16
    2660:	ff 89       	ldd	r31, Y+23	; 0x17
    2662:	80 81       	ld	r24, Z
    2664:	0e 94 6e 12 	call	0x24dc	; 0x24dc <uart_putchar>
            alt_p_c = FALSE;
    2668:	1e 86       	std	Y+14, r1	; 0x0e
            long_flag = FALSE;
    266a:	1f 86       	std	Y+15, r1	; 0x0f
    266c:	16 c3       	rjmp	.+1580   	; 0x2c9a <uart_mini_printf+0x70e>
            continue;   // "switch (*p)" section skipped
        }
        switch (*p)
        {
            case 'c':
                if (long_flag == TRUE)      // ERROR: 'l' before any 'c'
    266e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2670:	81 30       	cpi	r24, 0x01	; 1
    2672:	39 f4       	brne	.+14     	; 0x2682 <uart_mini_printf+0xf6>
                {
                    uart_putchar('l');
    2674:	8c e6       	ldi	r24, 0x6C	; 108
    2676:	0e 94 6e 12 	call	0x24dc	; 0x24dc <uart_putchar>
                    uart_putchar('c');
    267a:	83 e6       	ldi	r24, 0x63	; 99
    267c:	0e 94 6e 12 	call	0x24dc	; 0x24dc <uart_putchar>
    2680:	0d c0       	rjmp	.+26     	; 0x269c <uart_mini_printf+0x110>
                }
                else
                {
                    s8_val = (S8)(va_arg(arg_ptr, int));    // s8_val = (S8)(va_arg(arg_ptr, S16));
    2682:	28 8d       	ldd	r18, Y+24	; 0x18
    2684:	39 8d       	ldd	r19, Y+25	; 0x19
    2686:	c9 01       	movw	r24, r18
    2688:	02 96       	adiw	r24, 0x02	; 2
    268a:	99 8f       	std	Y+25, r25	; 0x19
    268c:	88 8f       	std	Y+24, r24	; 0x18
    268e:	f9 01       	movw	r30, r18
    2690:	80 81       	ld	r24, Z
    2692:	91 81       	ldd	r25, Z+1	; 0x01
    2694:	8d 87       	std	Y+13, r24	; 0x0d
                    uart_putchar((U8)(s8_val));
    2696:	8d 85       	ldd	r24, Y+13	; 0x0d
    2698:	0e 94 6e 12 	call	0x24dc	; 0x24dc <uart_putchar>
                }
                // Clean up
                min_size = DATA_BUF_LEN-1;
    269c:	8b e0       	ldi	r24, 0x0B	; 11
    269e:	88 8b       	std	Y+16, r24	; 0x10
                alt_p_c = FALSE;
    26a0:	1e 86       	std	Y+14, r1	; 0x0e
                long_flag = FALSE;
    26a2:	1f 86       	std	Y+15, r1	; 0x0f
    26a4:	fa c2       	rjmp	.+1524   	; 0x2c9a <uart_mini_printf+0x70e>
                break; // case 'c'
                
            case 's':
                if (long_flag == TRUE)      // ERROR: 'l' before any 's'
    26a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    26a8:	81 30       	cpi	r24, 0x01	; 1
    26aa:	39 f4       	brne	.+14     	; 0x26ba <uart_mini_printf+0x12e>
                {
                    uart_putchar('l');
    26ac:	8c e6       	ldi	r24, 0x6C	; 108
    26ae:	0e 94 6e 12 	call	0x24dc	; 0x24dc <uart_putchar>
                    uart_putchar('s');
    26b2:	83 e7       	ldi	r24, 0x73	; 115
    26b4:	0e 94 6e 12 	call	0x24dc	; 0x24dc <uart_putchar>
    26b8:	1b c0       	rjmp	.+54     	; 0x26f0 <uart_mini_printf+0x164>
                }
                else
                {
                    for (sval = va_arg(arg_ptr, U8 *); *sval; sval++)
    26ba:	28 8d       	ldd	r18, Y+24	; 0x18
    26bc:	39 8d       	ldd	r19, Y+25	; 0x19
    26be:	c9 01       	movw	r24, r18
    26c0:	02 96       	adiw	r24, 0x02	; 2
    26c2:	99 8f       	std	Y+25, r25	; 0x19
    26c4:	88 8f       	std	Y+24, r24	; 0x18
    26c6:	f9 01       	movw	r30, r18
    26c8:	80 81       	ld	r24, Z
    26ca:	91 81       	ldd	r25, Z+1	; 0x01
    26cc:	9d 8b       	std	Y+21, r25	; 0x15
    26ce:	8c 8b       	std	Y+20, r24	; 0x14
    26d0:	0a c0       	rjmp	.+20     	; 0x26e6 <uart_mini_printf+0x15a>
                    {
                        uart_putchar(*sval);
    26d2:	ec 89       	ldd	r30, Y+20	; 0x14
    26d4:	fd 89       	ldd	r31, Y+21	; 0x15
    26d6:	80 81       	ld	r24, Z
    26d8:	0e 94 6e 12 	call	0x24dc	; 0x24dc <uart_putchar>
                    uart_putchar('l');
                    uart_putchar('s');
                }
                else
                {
                    for (sval = va_arg(arg_ptr, U8 *); *sval; sval++)
    26dc:	8c 89       	ldd	r24, Y+20	; 0x14
    26de:	9d 89       	ldd	r25, Y+21	; 0x15
    26e0:	01 96       	adiw	r24, 0x01	; 1
    26e2:	9d 8b       	std	Y+21, r25	; 0x15
    26e4:	8c 8b       	std	Y+20, r24	; 0x14
    26e6:	ec 89       	ldd	r30, Y+20	; 0x14
    26e8:	fd 89       	ldd	r31, Y+21	; 0x15
    26ea:	80 81       	ld	r24, Z
    26ec:	88 23       	and	r24, r24
    26ee:	89 f7       	brne	.-30     	; 0x26d2 <uart_mini_printf+0x146>
                    {
                        uart_putchar(*sval);
                    }
                }
                // Clean up
                min_size = DATA_BUF_LEN-1;
    26f0:	8b e0       	ldi	r24, 0x0B	; 11
    26f2:	88 8b       	std	Y+16, r24	; 0x10
                alt_p_c = FALSE;
    26f4:	1e 86       	std	Y+14, r1	; 0x0e
                long_flag = FALSE;
    26f6:	1f 86       	std	Y+15, r1	; 0x0f
    26f8:	d0 c2       	rjmp	.+1440   	; 0x2c9a <uart_mini_printf+0x70e>
                break;  // case 's'
                
            case 'l':  // It is not the number "ONE" but the lower case of "L" character
                if (long_flag == TRUE)      // ERROR: two consecutive 'l'
    26fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    26fc:	81 30       	cpi	r24, 0x01	; 1
    26fe:	31 f4       	brne	.+12     	; 0x270c <uart_mini_printf+0x180>
                {
                    uart_putchar('l');
    2700:	8c e6       	ldi	r24, 0x6C	; 108
    2702:	0e 94 6e 12 	call	0x24dc	; 0x24dc <uart_putchar>
                    alt_p_c = FALSE;
    2706:	1e 86       	std	Y+14, r1	; 0x0e
                    long_flag = FALSE;
    2708:	1f 86       	std	Y+15, r1	; 0x0f
    270a:	04 c0       	rjmp	.+8      	; 0x2714 <uart_mini_printf+0x188>
                }
                else
                {
                    alt_p_c = TRUE;
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	8e 87       	std	Y+14, r24	; 0x0e
                    long_flag = TRUE;
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	8f 87       	std	Y+15, r24	; 0x0f
                }
                p--;
    2714:	8e 89       	ldd	r24, Y+22	; 0x16
    2716:	9f 89       	ldd	r25, Y+23	; 0x17
    2718:	01 97       	sbiw	r24, 0x01	; 1
    271a:	9f 8b       	std	Y+23, r25	; 0x17
    271c:	8e 8b       	std	Y+22, r24	; 0x16
    271e:	bd c2       	rjmp	.+1402   	; 0x2c9a <uart_mini_printf+0x70e>
                break;  // case 'l'
                
            case 'd':
                n_sign  = FALSE;               
    2720:	1a 8a       	std	Y+18, r1	; 0x12
                for(data_idx = 0; data_idx < (DATA_BUF_LEN-1); data_idx++)
    2722:	19 8a       	std	Y+17, r1	; 0x11
    2724:	0d c0       	rjmp	.+26     	; 0x2740 <uart_mini_printf+0x1b4>
                {
                    data_buf[data_idx] = '0';
    2726:	89 89       	ldd	r24, Y+17	; 0x11
    2728:	28 2f       	mov	r18, r24
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	ce 01       	movw	r24, r28
    272e:	4a 96       	adiw	r24, 0x1a	; 26
    2730:	fc 01       	movw	r30, r24
    2732:	e2 0f       	add	r30, r18
    2734:	f3 1f       	adc	r31, r19
    2736:	80 e3       	ldi	r24, 0x30	; 48
    2738:	80 83       	st	Z, r24
                p--;
                break;  // case 'l'
                
            case 'd':
                n_sign  = FALSE;               
                for(data_idx = 0; data_idx < (DATA_BUF_LEN-1); data_idx++)
    273a:	89 89       	ldd	r24, Y+17	; 0x11
    273c:	8f 5f       	subi	r24, 0xFF	; 255
    273e:	89 8b       	std	Y+17, r24	; 0x11
    2740:	89 89       	ldd	r24, Y+17	; 0x11
    2742:	8b 30       	cpi	r24, 0x0B	; 11
    2744:	80 f3       	brcs	.-32     	; 0x2726 <uart_mini_printf+0x19a>
                {
                    data_buf[data_idx] = '0';
                }
                data_buf[DATA_BUF_LEN-1] = 0;
    2746:	1d a2       	std	Y+37, r1	; 0x25
                data_idx = DATA_BUF_LEN - 2;
    2748:	8a e0       	ldi	r24, 0x0A	; 10
    274a:	89 8b       	std	Y+17, r24	; 0x11
                if (long_flag)  // 32-bit
    274c:	8f 85       	ldd	r24, Y+15	; 0x0f
    274e:	88 23       	and	r24, r24
    2750:	09 f4       	brne	.+2      	; 0x2754 <uart_mini_printf+0x1c8>
    2752:	5d c0       	rjmp	.+186    	; 0x280e <uart_mini_printf+0x282>
                {
                    s32_val = va_arg(arg_ptr, S32);
    2754:	28 8d       	ldd	r18, Y+24	; 0x18
    2756:	39 8d       	ldd	r19, Y+25	; 0x19
    2758:	c9 01       	movw	r24, r18
    275a:	04 96       	adiw	r24, 0x04	; 4
    275c:	99 8f       	std	Y+25, r25	; 0x19
    275e:	88 8f       	std	Y+24, r24	; 0x18
    2760:	f9 01       	movw	r30, r18
    2762:	80 81       	ld	r24, Z
    2764:	91 81       	ldd	r25, Z+1	; 0x01
    2766:	a2 81       	ldd	r26, Z+2	; 0x02
    2768:	b3 81       	ldd	r27, Z+3	; 0x03
    276a:	8f 83       	std	Y+7, r24	; 0x07
    276c:	98 87       	std	Y+8, r25	; 0x08
    276e:	a9 87       	std	Y+9, r26	; 0x09
    2770:	ba 87       	std	Y+10, r27	; 0x0a
                    if (s32_val < 0)
    2772:	8f 81       	ldd	r24, Y+7	; 0x07
    2774:	98 85       	ldd	r25, Y+8	; 0x08
    2776:	a9 85       	ldd	r26, Y+9	; 0x09
    2778:	ba 85       	ldd	r27, Y+10	; 0x0a
    277a:	bb 23       	and	r27, r27
    277c:	8c f4       	brge	.+34     	; 0x27a0 <uart_mini_printf+0x214>
                    {
                        n_sign = TRUE;
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	8a 8b       	std	Y+18, r24	; 0x12
                        s32_val  = -s32_val;
    2782:	8f 81       	ldd	r24, Y+7	; 0x07
    2784:	98 85       	ldd	r25, Y+8	; 0x08
    2786:	a9 85       	ldd	r26, Y+9	; 0x09
    2788:	ba 85       	ldd	r27, Y+10	; 0x0a
    278a:	b0 95       	com	r27
    278c:	a0 95       	com	r26
    278e:	90 95       	com	r25
    2790:	81 95       	neg	r24
    2792:	9f 4f       	sbci	r25, 0xFF	; 255
    2794:	af 4f       	sbci	r26, 0xFF	; 255
    2796:	bf 4f       	sbci	r27, 0xFF	; 255
    2798:	8f 83       	std	Y+7, r24	; 0x07
    279a:	98 87       	std	Y+8, r25	; 0x08
    279c:	a9 87       	std	Y+9, r26	; 0x09
    279e:	ba 87       	std	Y+10, r27	; 0x0a
                    }
                    while (1)
                    {
                        data_buf[data_idx] = s32_val % 10 + '0';
    27a0:	89 89       	ldd	r24, Y+17	; 0x11
    27a2:	08 2f       	mov	r16, r24
    27a4:	10 e0       	ldi	r17, 0x00	; 0
    27a6:	8f 81       	ldd	r24, Y+7	; 0x07
    27a8:	98 85       	ldd	r25, Y+8	; 0x08
    27aa:	a9 85       	ldd	r26, Y+9	; 0x09
    27ac:	ba 85       	ldd	r27, Y+10	; 0x0a
    27ae:	2a e0       	ldi	r18, 0x0A	; 10
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	40 e0       	ldi	r20, 0x00	; 0
    27b4:	50 e0       	ldi	r21, 0x00	; 0
    27b6:	bc 01       	movw	r22, r24
    27b8:	cd 01       	movw	r24, r26
    27ba:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <__divmodsi4>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	28 2f       	mov	r18, r24
    27c4:	20 5d       	subi	r18, 0xD0	; 208
    27c6:	ce 01       	movw	r24, r28
    27c8:	4a 96       	adiw	r24, 0x1a	; 26
    27ca:	fc 01       	movw	r30, r24
    27cc:	e0 0f       	add	r30, r16
    27ce:	f1 1f       	adc	r31, r17
    27d0:	20 83       	st	Z, r18
                        s32_val /= 10;
    27d2:	8f 81       	ldd	r24, Y+7	; 0x07
    27d4:	98 85       	ldd	r25, Y+8	; 0x08
    27d6:	a9 85       	ldd	r26, Y+9	; 0x09
    27d8:	ba 85       	ldd	r27, Y+10	; 0x0a
    27da:	2a e0       	ldi	r18, 0x0A	; 10
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	40 e0       	ldi	r20, 0x00	; 0
    27e0:	50 e0       	ldi	r21, 0x00	; 0
    27e2:	bc 01       	movw	r22, r24
    27e4:	cd 01       	movw	r24, r26
    27e6:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <__divmodsi4>
    27ea:	da 01       	movw	r26, r20
    27ec:	c9 01       	movw	r24, r18
    27ee:	8f 83       	std	Y+7, r24	; 0x07
    27f0:	98 87       	std	Y+8, r25	; 0x08
    27f2:	a9 87       	std	Y+9, r26	; 0x09
    27f4:	ba 87       	std	Y+10, r27	; 0x0a
                        data_idx--;
    27f6:	89 89       	ldd	r24, Y+17	; 0x11
    27f8:	81 50       	subi	r24, 0x01	; 1
    27fa:	89 8b       	std	Y+17, r24	; 0x11
						if (s32_val==0) break;
    27fc:	8f 81       	ldd	r24, Y+7	; 0x07
    27fe:	98 85       	ldd	r25, Y+8	; 0x08
    2800:	a9 85       	ldd	r26, Y+9	; 0x09
    2802:	ba 85       	ldd	r27, Y+10	; 0x0a
    2804:	00 97       	sbiw	r24, 0x00	; 0
    2806:	a1 05       	cpc	r26, r1
    2808:	b1 05       	cpc	r27, r1
    280a:	d9 f1       	breq	.+118    	; 0x2882 <uart_mini_printf+0x2f6>
    280c:	c9 cf       	rjmp	.-110    	; 0x27a0 <uart_mini_printf+0x214>
                   }
                }
                else  // 16-bit
                {
                    s16_val = (S16)(va_arg(arg_ptr, int)); // s16_val = va_arg(arg_ptr, S16);
    280e:	28 8d       	ldd	r18, Y+24	; 0x18
    2810:	39 8d       	ldd	r19, Y+25	; 0x19
    2812:	c9 01       	movw	r24, r18
    2814:	02 96       	adiw	r24, 0x02	; 2
    2816:	99 8f       	std	Y+25, r25	; 0x19
    2818:	88 8f       	std	Y+24, r24	; 0x18
    281a:	f9 01       	movw	r30, r18
    281c:	80 81       	ld	r24, Z
    281e:	91 81       	ldd	r25, Z+1	; 0x01
    2820:	9c 87       	std	Y+12, r25	; 0x0c
    2822:	8b 87       	std	Y+11, r24	; 0x0b
                    if (s16_val < 0)
    2824:	8b 85       	ldd	r24, Y+11	; 0x0b
    2826:	9c 85       	ldd	r25, Y+12	; 0x0c
    2828:	99 23       	and	r25, r25
    282a:	4c f4       	brge	.+18     	; 0x283e <uart_mini_printf+0x2b2>
                    {
                        n_sign = TRUE;
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	8a 8b       	std	Y+18, r24	; 0x12
                        s16_val  = -s16_val;
    2830:	8b 85       	ldd	r24, Y+11	; 0x0b
    2832:	9c 85       	ldd	r25, Y+12	; 0x0c
    2834:	90 95       	com	r25
    2836:	81 95       	neg	r24
    2838:	9f 4f       	sbci	r25, 0xFF	; 255
    283a:	9c 87       	std	Y+12, r25	; 0x0c
    283c:	8b 87       	std	Y+11, r24	; 0x0b
                    }
                    while (1)
                    {
                        data_buf[data_idx] = s16_val % 10 + '0';
    283e:	89 89       	ldd	r24, Y+17	; 0x11
    2840:	e8 2f       	mov	r30, r24
    2842:	f0 e0       	ldi	r31, 0x00	; 0
    2844:	8b 85       	ldd	r24, Y+11	; 0x0b
    2846:	9c 85       	ldd	r25, Y+12	; 0x0c
    2848:	2a e0       	ldi	r18, 0x0A	; 10
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	b9 01       	movw	r22, r18
    284e:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__divmodhi4>
    2852:	28 2f       	mov	r18, r24
    2854:	20 5d       	subi	r18, 0xD0	; 208
    2856:	ce 01       	movw	r24, r28
    2858:	4a 96       	adiw	r24, 0x1a	; 26
    285a:	e8 0f       	add	r30, r24
    285c:	f9 1f       	adc	r31, r25
    285e:	20 83       	st	Z, r18
                        s16_val /= 10;
    2860:	8b 85       	ldd	r24, Y+11	; 0x0b
    2862:	9c 85       	ldd	r25, Y+12	; 0x0c
    2864:	2a e0       	ldi	r18, 0x0A	; 10
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	b9 01       	movw	r22, r18
    286a:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__divmodhi4>
    286e:	cb 01       	movw	r24, r22
    2870:	9c 87       	std	Y+12, r25	; 0x0c
    2872:	8b 87       	std	Y+11, r24	; 0x0b
                        data_idx--;
    2874:	89 89       	ldd	r24, Y+17	; 0x11
    2876:	81 50       	subi	r24, 0x01	; 1
    2878:	89 8b       	std	Y+17, r24	; 0x11
						if (s16_val==0) break;
    287a:	8b 85       	ldd	r24, Y+11	; 0x0b
    287c:	9c 85       	ldd	r25, Y+12	; 0x0c
    287e:	00 97       	sbiw	r24, 0x00	; 0
    2880:	f1 f6       	brne	.-68     	; 0x283e <uart_mini_printf+0x2b2>
                    }
                }
                if (n_sign) { uart_putchar('-'); }
    2882:	8a 89       	ldd	r24, Y+18	; 0x12
    2884:	88 23       	and	r24, r24
    2886:	19 f0       	breq	.+6      	; 0x288e <uart_mini_printf+0x302>
    2888:	8d e2       	ldi	r24, 0x2D	; 45
    288a:	0e 94 6e 12 	call	0x24dc	; 0x24dc <uart_putchar>
                data_idx++;
    288e:	89 89       	ldd	r24, Y+17	; 0x11
    2890:	8f 5f       	subi	r24, 0xFF	; 255
    2892:	89 8b       	std	Y+17, r24	; 0x11
                if (min_size < data_idx)
    2894:	98 89       	ldd	r25, Y+16	; 0x10
    2896:	89 89       	ldd	r24, Y+17	; 0x11
    2898:	98 17       	cp	r25, r24
    289a:	10 f4       	brcc	.+4      	; 0x28a0 <uart_mini_printf+0x314>
                {
                    data_idx = min_size;
    289c:	88 89       	ldd	r24, Y+16	; 0x10
    289e:	89 8b       	std	Y+17, r24	; 0x11
                }
                uart_put_string (data_buf + data_idx);
    28a0:	89 89       	ldd	r24, Y+17	; 0x11
    28a2:	28 2f       	mov	r18, r24
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	ce 01       	movw	r24, r28
    28a8:	4a 96       	adiw	r24, 0x1a	; 26
    28aa:	82 0f       	add	r24, r18
    28ac:	93 1f       	adc	r25, r19
    28ae:	0e 94 a9 12 	call	0x2552	; 0x2552 <uart_put_string>
                // Clean up
                min_size = DATA_BUF_LEN-1;
    28b2:	8b e0       	ldi	r24, 0x0B	; 11
    28b4:	88 8b       	std	Y+16, r24	; 0x10
                alt_p_c = FALSE;
    28b6:	1e 86       	std	Y+14, r1	; 0x0e
                long_flag = FALSE;
    28b8:	1f 86       	std	Y+15, r1	; 0x0f
    28ba:	ef c1       	rjmp	.+990    	; 0x2c9a <uart_mini_printf+0x70e>
                break;  // case 'd'
                
            case 'u':
                for(data_idx = 0; data_idx < (DATA_BUF_LEN-1); data_idx++)
    28bc:	19 8a       	std	Y+17, r1	; 0x11
    28be:	0d c0       	rjmp	.+26     	; 0x28da <uart_mini_printf+0x34e>
                {
                    data_buf[data_idx] = '0';
    28c0:	89 89       	ldd	r24, Y+17	; 0x11
    28c2:	28 2f       	mov	r18, r24
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	ce 01       	movw	r24, r28
    28c8:	4a 96       	adiw	r24, 0x1a	; 26
    28ca:	fc 01       	movw	r30, r24
    28cc:	e2 0f       	add	r30, r18
    28ce:	f3 1f       	adc	r31, r19
    28d0:	80 e3       	ldi	r24, 0x30	; 48
    28d2:	80 83       	st	Z, r24
                alt_p_c = FALSE;
                long_flag = FALSE;
                break;  // case 'd'
                
            case 'u':
                for(data_idx = 0; data_idx < (DATA_BUF_LEN-1); data_idx++)
    28d4:	89 89       	ldd	r24, Y+17	; 0x11
    28d6:	8f 5f       	subi	r24, 0xFF	; 255
    28d8:	89 8b       	std	Y+17, r24	; 0x11
    28da:	89 89       	ldd	r24, Y+17	; 0x11
    28dc:	8b 30       	cpi	r24, 0x0B	; 11
    28de:	80 f3       	brcs	.-32     	; 0x28c0 <uart_mini_printf+0x334>
                {
                    data_buf[data_idx] = '0';
                }
                data_buf[DATA_BUF_LEN-1] = 0;
    28e0:	1d a2       	std	Y+37, r1	; 0x25
                data_idx = DATA_BUF_LEN - 2;
    28e2:	8a e0       	ldi	r24, 0x0A	; 10
    28e4:	89 8b       	std	Y+17, r24	; 0x11
                if (long_flag)  // 32-bit
    28e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    28e8:	88 23       	and	r24, r24
    28ea:	09 f4       	brne	.+2      	; 0x28ee <uart_mini_printf+0x362>
    28ec:	46 c0       	rjmp	.+140    	; 0x297a <uart_mini_printf+0x3ee>
                {
                    u32_val = va_arg(arg_ptr, U32);
    28ee:	28 8d       	ldd	r18, Y+24	; 0x18
    28f0:	39 8d       	ldd	r19, Y+25	; 0x19
    28f2:	c9 01       	movw	r24, r18
    28f4:	04 96       	adiw	r24, 0x04	; 4
    28f6:	99 8f       	std	Y+25, r25	; 0x19
    28f8:	88 8f       	std	Y+24, r24	; 0x18
    28fa:	f9 01       	movw	r30, r18
    28fc:	80 81       	ld	r24, Z
    28fe:	91 81       	ldd	r25, Z+1	; 0x01
    2900:	a2 81       	ldd	r26, Z+2	; 0x02
    2902:	b3 81       	ldd	r27, Z+3	; 0x03
    2904:	89 83       	std	Y+1, r24	; 0x01
    2906:	9a 83       	std	Y+2, r25	; 0x02
    2908:	ab 83       	std	Y+3, r26	; 0x03
    290a:	bc 83       	std	Y+4, r27	; 0x04
                    while (1)
                    {
                        data_buf[data_idx] = u32_val % 10 + '0';
    290c:	89 89       	ldd	r24, Y+17	; 0x11
    290e:	08 2f       	mov	r16, r24
    2910:	10 e0       	ldi	r17, 0x00	; 0
    2912:	89 81       	ldd	r24, Y+1	; 0x01
    2914:	9a 81       	ldd	r25, Y+2	; 0x02
    2916:	ab 81       	ldd	r26, Y+3	; 0x03
    2918:	bc 81       	ldd	r27, Y+4	; 0x04
    291a:	2a e0       	ldi	r18, 0x0A	; 10
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	40 e0       	ldi	r20, 0x00	; 0
    2920:	50 e0       	ldi	r21, 0x00	; 0
    2922:	bc 01       	movw	r22, r24
    2924:	cd 01       	movw	r24, r26
    2926:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <__udivmodsi4>
    292a:	dc 01       	movw	r26, r24
    292c:	cb 01       	movw	r24, r22
    292e:	28 2f       	mov	r18, r24
    2930:	20 5d       	subi	r18, 0xD0	; 208
    2932:	ce 01       	movw	r24, r28
    2934:	4a 96       	adiw	r24, 0x1a	; 26
    2936:	fc 01       	movw	r30, r24
    2938:	e0 0f       	add	r30, r16
    293a:	f1 1f       	adc	r31, r17
    293c:	20 83       	st	Z, r18
                        u32_val /= 10;
    293e:	89 81       	ldd	r24, Y+1	; 0x01
    2940:	9a 81       	ldd	r25, Y+2	; 0x02
    2942:	ab 81       	ldd	r26, Y+3	; 0x03
    2944:	bc 81       	ldd	r27, Y+4	; 0x04
    2946:	2a e0       	ldi	r18, 0x0A	; 10
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	40 e0       	ldi	r20, 0x00	; 0
    294c:	50 e0       	ldi	r21, 0x00	; 0
    294e:	bc 01       	movw	r22, r24
    2950:	cd 01       	movw	r24, r26
    2952:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <__udivmodsi4>
    2956:	da 01       	movw	r26, r20
    2958:	c9 01       	movw	r24, r18
    295a:	89 83       	std	Y+1, r24	; 0x01
    295c:	9a 83       	std	Y+2, r25	; 0x02
    295e:	ab 83       	std	Y+3, r26	; 0x03
    2960:	bc 83       	std	Y+4, r27	; 0x04
                        data_idx--;
    2962:	89 89       	ldd	r24, Y+17	; 0x11
    2964:	81 50       	subi	r24, 0x01	; 1
    2966:	89 8b       	std	Y+17, r24	; 0x11
						if (u32_val==0) break;
    2968:	89 81       	ldd	r24, Y+1	; 0x01
    296a:	9a 81       	ldd	r25, Y+2	; 0x02
    296c:	ab 81       	ldd	r26, Y+3	; 0x03
    296e:	bc 81       	ldd	r27, Y+4	; 0x04
    2970:	00 97       	sbiw	r24, 0x00	; 0
    2972:	a1 05       	cpc	r26, r1
    2974:	b1 05       	cpc	r27, r1
    2976:	71 f1       	breq	.+92     	; 0x29d4 <uart_mini_printf+0x448>
    2978:	c9 cf       	rjmp	.-110    	; 0x290c <uart_mini_printf+0x380>
                    }
                }
                else  // 16-bit
                {
                    u16_val = (U16)(va_arg(arg_ptr, int)); // u16_val = va_arg(arg_ptr, U16);
    297a:	28 8d       	ldd	r18, Y+24	; 0x18
    297c:	39 8d       	ldd	r19, Y+25	; 0x19
    297e:	c9 01       	movw	r24, r18
    2980:	02 96       	adiw	r24, 0x02	; 2
    2982:	99 8f       	std	Y+25, r25	; 0x19
    2984:	88 8f       	std	Y+24, r24	; 0x18
    2986:	f9 01       	movw	r30, r18
    2988:	80 81       	ld	r24, Z
    298a:	91 81       	ldd	r25, Z+1	; 0x01
    298c:	9e 83       	std	Y+6, r25	; 0x06
    298e:	8d 83       	std	Y+5, r24	; 0x05
                    while (1)
                    {
                        data_buf[data_idx] = u16_val % 10 + '0';
    2990:	89 89       	ldd	r24, Y+17	; 0x11
    2992:	e8 2f       	mov	r30, r24
    2994:	f0 e0       	ldi	r31, 0x00	; 0
    2996:	8d 81       	ldd	r24, Y+5	; 0x05
    2998:	9e 81       	ldd	r25, Y+6	; 0x06
    299a:	2a e0       	ldi	r18, 0x0A	; 10
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	b9 01       	movw	r22, r18
    29a0:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__udivmodhi4>
    29a4:	28 2f       	mov	r18, r24
    29a6:	20 5d       	subi	r18, 0xD0	; 208
    29a8:	ce 01       	movw	r24, r28
    29aa:	4a 96       	adiw	r24, 0x1a	; 26
    29ac:	e8 0f       	add	r30, r24
    29ae:	f9 1f       	adc	r31, r25
    29b0:	20 83       	st	Z, r18
                        data_idx--;
    29b2:	89 89       	ldd	r24, Y+17	; 0x11
    29b4:	81 50       	subi	r24, 0x01	; 1
    29b6:	89 8b       	std	Y+17, r24	; 0x11
                        u16_val /= 10;
    29b8:	8d 81       	ldd	r24, Y+5	; 0x05
    29ba:	9e 81       	ldd	r25, Y+6	; 0x06
    29bc:	2a e0       	ldi	r18, 0x0A	; 10
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	b9 01       	movw	r22, r18
    29c2:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__udivmodhi4>
    29c6:	cb 01       	movw	r24, r22
    29c8:	9e 83       	std	Y+6, r25	; 0x06
    29ca:	8d 83       	std	Y+5, r24	; 0x05
						if (u16_val==0) break;
    29cc:	8d 81       	ldd	r24, Y+5	; 0x05
    29ce:	9e 81       	ldd	r25, Y+6	; 0x06
    29d0:	00 97       	sbiw	r24, 0x00	; 0
    29d2:	f1 f6       	brne	.-68     	; 0x2990 <uart_mini_printf+0x404>
                    }
                }
                data_idx++;
    29d4:	89 89       	ldd	r24, Y+17	; 0x11
    29d6:	8f 5f       	subi	r24, 0xFF	; 255
    29d8:	89 8b       	std	Y+17, r24	; 0x11
                if (min_size < data_idx)
    29da:	98 89       	ldd	r25, Y+16	; 0x10
    29dc:	89 89       	ldd	r24, Y+17	; 0x11
    29de:	98 17       	cp	r25, r24
    29e0:	10 f4       	brcc	.+4      	; 0x29e6 <uart_mini_printf+0x45a>
                {
                    data_idx = min_size;
    29e2:	88 89       	ldd	r24, Y+16	; 0x10
    29e4:	89 8b       	std	Y+17, r24	; 0x11
                }
                uart_put_string (data_buf + data_idx);
    29e6:	89 89       	ldd	r24, Y+17	; 0x11
    29e8:	28 2f       	mov	r18, r24
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	ce 01       	movw	r24, r28
    29ee:	4a 96       	adiw	r24, 0x1a	; 26
    29f0:	82 0f       	add	r24, r18
    29f2:	93 1f       	adc	r25, r19
    29f4:	0e 94 a9 12 	call	0x2552	; 0x2552 <uart_put_string>
                // Clean up
                min_size = DATA_BUF_LEN-1;
    29f8:	8b e0       	ldi	r24, 0x0B	; 11
    29fa:	88 8b       	std	Y+16, r24	; 0x10
                alt_p_c = FALSE;
    29fc:	1e 86       	std	Y+14, r1	; 0x0e
                long_flag = FALSE;
    29fe:	1f 86       	std	Y+15, r1	; 0x0f
    2a00:	4c c1       	rjmp	.+664    	; 0x2c9a <uart_mini_printf+0x70e>
                break;  // case 'u':
                
            case 'x':
            case 'X':
                for(data_idx = 0; data_idx < (DATA_BUF_LEN-1); data_idx++)
    2a02:	19 8a       	std	Y+17, r1	; 0x11
    2a04:	0d c0       	rjmp	.+26     	; 0x2a20 <uart_mini_printf+0x494>
                {
                    data_buf[data_idx] = '0';
    2a06:	89 89       	ldd	r24, Y+17	; 0x11
    2a08:	28 2f       	mov	r18, r24
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	ce 01       	movw	r24, r28
    2a0e:	4a 96       	adiw	r24, 0x1a	; 26
    2a10:	fc 01       	movw	r30, r24
    2a12:	e2 0f       	add	r30, r18
    2a14:	f3 1f       	adc	r31, r19
    2a16:	80 e3       	ldi	r24, 0x30	; 48
    2a18:	80 83       	st	Z, r24
                long_flag = FALSE;
                break;  // case 'u':
                
            case 'x':
            case 'X':
                for(data_idx = 0; data_idx < (DATA_BUF_LEN-1); data_idx++)
    2a1a:	89 89       	ldd	r24, Y+17	; 0x11
    2a1c:	8f 5f       	subi	r24, 0xFF	; 255
    2a1e:	89 8b       	std	Y+17, r24	; 0x11
    2a20:	89 89       	ldd	r24, Y+17	; 0x11
    2a22:	8b 30       	cpi	r24, 0x0B	; 11
    2a24:	80 f3       	brcs	.-32     	; 0x2a06 <uart_mini_printf+0x47a>
                {
                    data_buf[data_idx] = '0';
                }
                data_buf[DATA_BUF_LEN-1] = 0;
    2a26:	1d a2       	std	Y+37, r1	; 0x25
                data_idx = DATA_BUF_LEN - 2;
    2a28:	8a e0       	ldi	r24, 0x0A	; 10
    2a2a:	89 8b       	std	Y+17, r24	; 0x11
                if (long_flag)  // 32-bit
    2a2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a2e:	88 23       	and	r24, r24
    2a30:	09 f4       	brne	.+2      	; 0x2a34 <uart_mini_printf+0x4a8>
    2a32:	55 c0       	rjmp	.+170    	; 0x2ade <uart_mini_printf+0x552>
                { 
                    u32_val = va_arg(arg_ptr, U32);
    2a34:	28 8d       	ldd	r18, Y+24	; 0x18
    2a36:	39 8d       	ldd	r19, Y+25	; 0x19
    2a38:	c9 01       	movw	r24, r18
    2a3a:	04 96       	adiw	r24, 0x04	; 4
    2a3c:	99 8f       	std	Y+25, r25	; 0x19
    2a3e:	88 8f       	std	Y+24, r24	; 0x18
    2a40:	f9 01       	movw	r30, r18
    2a42:	80 81       	ld	r24, Z
    2a44:	91 81       	ldd	r25, Z+1	; 0x01
    2a46:	a2 81       	ldd	r26, Z+2	; 0x02
    2a48:	b3 81       	ldd	r27, Z+3	; 0x03
    2a4a:	89 83       	std	Y+1, r24	; 0x01
    2a4c:	9a 83       	std	Y+2, r25	; 0x02
    2a4e:	ab 83       	std	Y+3, r26	; 0x03
    2a50:	bc 83       	std	Y+4, r27	; 0x04
    2a52:	3b c0       	rjmp	.+118    	; 0x2aca <uart_mini_printf+0x53e>
                    while (u32_val)
                    {
                        u8_temp = (U8)(u32_val & 0x0F);
    2a54:	89 81       	ldd	r24, Y+1	; 0x01
    2a56:	8f 70       	andi	r24, 0x0F	; 15
    2a58:	8b 8b       	std	Y+19, r24	; 0x13
                        data_buf[data_idx] = (u8_temp < 10)? u8_temp+'0':u8_temp-10+(*p=='x'?'a':'A');
    2a5a:	89 89       	ldd	r24, Y+17	; 0x11
    2a5c:	28 2f       	mov	r18, r24
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	3d a7       	std	Y+45, r19	; 0x2d
    2a62:	2c a7       	std	Y+44, r18	; 0x2c
    2a64:	8b 89       	ldd	r24, Y+19	; 0x13
    2a66:	8a 30       	cpi	r24, 0x0A	; 10
    2a68:	28 f4       	brcc	.+10     	; 0x2a74 <uart_mini_printf+0x4e8>
    2a6a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a6c:	38 2f       	mov	r19, r24
    2a6e:	30 5d       	subi	r19, 0xD0	; 208
    2a70:	3b a7       	std	Y+43, r19	; 0x2b
    2a72:	10 c0       	rjmp	.+32     	; 0x2a94 <uart_mini_printf+0x508>
    2a74:	ee 89       	ldd	r30, Y+22	; 0x16
    2a76:	ff 89       	ldd	r31, Y+23	; 0x17
    2a78:	80 81       	ld	r24, Z
    2a7a:	88 37       	cpi	r24, 0x78	; 120
    2a7c:	19 f4       	brne	.+6      	; 0x2a84 <uart_mini_printf+0x4f8>
    2a7e:	81 e6       	ldi	r24, 0x61	; 97
    2a80:	8a a7       	std	Y+42, r24	; 0x2a
    2a82:	02 c0       	rjmp	.+4      	; 0x2a88 <uart_mini_printf+0x4fc>
    2a84:	91 e4       	ldi	r25, 0x41	; 65
    2a86:	9a a7       	std	Y+42, r25	; 0x2a
    2a88:	8b 89       	ldd	r24, Y+19	; 0x13
    2a8a:	2a a5       	ldd	r18, Y+42	; 0x2a
    2a8c:	82 0f       	add	r24, r18
    2a8e:	38 2f       	mov	r19, r24
    2a90:	3a 50       	subi	r19, 0x0A	; 10
    2a92:	3b a7       	std	Y+43, r19	; 0x2b
    2a94:	ce 01       	movw	r24, r28
    2a96:	4a 96       	adiw	r24, 0x1a	; 26
    2a98:	ec a5       	ldd	r30, Y+44	; 0x2c
    2a9a:	fd a5       	ldd	r31, Y+45	; 0x2d
    2a9c:	e8 0f       	add	r30, r24
    2a9e:	f9 1f       	adc	r31, r25
    2aa0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2aa2:	80 83       	st	Z, r24
                        u32_val >>= 4;
    2aa4:	89 81       	ldd	r24, Y+1	; 0x01
    2aa6:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa8:	ab 81       	ldd	r26, Y+3	; 0x03
    2aaa:	bc 81       	ldd	r27, Y+4	; 0x04
    2aac:	68 94       	set
    2aae:	13 f8       	bld	r1, 3
    2ab0:	b6 95       	lsr	r27
    2ab2:	a7 95       	ror	r26
    2ab4:	97 95       	ror	r25
    2ab6:	87 95       	ror	r24
    2ab8:	16 94       	lsr	r1
    2aba:	d1 f7       	brne	.-12     	; 0x2ab0 <uart_mini_printf+0x524>
    2abc:	89 83       	std	Y+1, r24	; 0x01
    2abe:	9a 83       	std	Y+2, r25	; 0x02
    2ac0:	ab 83       	std	Y+3, r26	; 0x03
    2ac2:	bc 83       	std	Y+4, r27	; 0x04
                        data_idx--;
    2ac4:	89 89       	ldd	r24, Y+17	; 0x11
    2ac6:	81 50       	subi	r24, 0x01	; 1
    2ac8:	89 8b       	std	Y+17, r24	; 0x11
                data_buf[DATA_BUF_LEN-1] = 0;
                data_idx = DATA_BUF_LEN - 2;
                if (long_flag)  // 32-bit
                { 
                    u32_val = va_arg(arg_ptr, U32);
                    while (u32_val)
    2aca:	89 81       	ldd	r24, Y+1	; 0x01
    2acc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ace:	ab 81       	ldd	r26, Y+3	; 0x03
    2ad0:	bc 81       	ldd	r27, Y+4	; 0x04
    2ad2:	00 97       	sbiw	r24, 0x00	; 0
    2ad4:	a1 05       	cpc	r26, r1
    2ad6:	b1 05       	cpc	r27, r1
    2ad8:	09 f0       	breq	.+2      	; 0x2adc <uart_mini_printf+0x550>
    2ada:	bc cf       	rjmp	.-136    	; 0x2a54 <uart_mini_printf+0x4c8>
    2adc:	45 c0       	rjmp	.+138    	; 0x2b68 <uart_mini_printf+0x5dc>
                        data_idx--;
                    }
                }
                else  // 16-bit
                {
                    u16_val = (U16)(va_arg(arg_ptr, int)); // u16_val = va_arg(arg_ptr, U16);
    2ade:	28 8d       	ldd	r18, Y+24	; 0x18
    2ae0:	39 8d       	ldd	r19, Y+25	; 0x19
    2ae2:	c9 01       	movw	r24, r18
    2ae4:	02 96       	adiw	r24, 0x02	; 2
    2ae6:	99 8f       	std	Y+25, r25	; 0x19
    2ae8:	88 8f       	std	Y+24, r24	; 0x18
    2aea:	f9 01       	movw	r30, r18
    2aec:	80 81       	ld	r24, Z
    2aee:	91 81       	ldd	r25, Z+1	; 0x01
    2af0:	9e 83       	std	Y+6, r25	; 0x06
    2af2:	8d 83       	std	Y+5, r24	; 0x05
    2af4:	35 c0       	rjmp	.+106    	; 0x2b60 <uart_mini_printf+0x5d4>
                    while (u16_val)
                    {
                        u8_temp = (U8)(u16_val & 0x0F);
    2af6:	8d 81       	ldd	r24, Y+5	; 0x05
    2af8:	8f 70       	andi	r24, 0x0F	; 15
    2afa:	8b 8b       	std	Y+19, r24	; 0x13
                        data_buf[data_idx] = (u8_temp < 10)? u8_temp+'0':u8_temp-10+(*p=='x'?'a':'A');
    2afc:	89 89       	ldd	r24, Y+17	; 0x11
    2afe:	28 2f       	mov	r18, r24
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	39 a7       	std	Y+41, r19	; 0x29
    2b04:	28 a7       	std	Y+40, r18	; 0x28
    2b06:	8b 89       	ldd	r24, Y+19	; 0x13
    2b08:	8a 30       	cpi	r24, 0x0A	; 10
    2b0a:	28 f4       	brcc	.+10     	; 0x2b16 <uart_mini_printf+0x58a>
    2b0c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b0e:	38 2f       	mov	r19, r24
    2b10:	30 5d       	subi	r19, 0xD0	; 208
    2b12:	3f a3       	std	Y+39, r19	; 0x27
    2b14:	10 c0       	rjmp	.+32     	; 0x2b36 <uart_mini_printf+0x5aa>
    2b16:	ee 89       	ldd	r30, Y+22	; 0x16
    2b18:	ff 89       	ldd	r31, Y+23	; 0x17
    2b1a:	80 81       	ld	r24, Z
    2b1c:	88 37       	cpi	r24, 0x78	; 120
    2b1e:	19 f4       	brne	.+6      	; 0x2b26 <uart_mini_printf+0x59a>
    2b20:	81 e6       	ldi	r24, 0x61	; 97
    2b22:	8e a3       	std	Y+38, r24	; 0x26
    2b24:	02 c0       	rjmp	.+4      	; 0x2b2a <uart_mini_printf+0x59e>
    2b26:	91 e4       	ldi	r25, 0x41	; 65
    2b28:	9e a3       	std	Y+38, r25	; 0x26
    2b2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b2c:	2e a1       	ldd	r18, Y+38	; 0x26
    2b2e:	82 0f       	add	r24, r18
    2b30:	38 2f       	mov	r19, r24
    2b32:	3a 50       	subi	r19, 0x0A	; 10
    2b34:	3f a3       	std	Y+39, r19	; 0x27
    2b36:	ce 01       	movw	r24, r28
    2b38:	4a 96       	adiw	r24, 0x1a	; 26
    2b3a:	e8 a5       	ldd	r30, Y+40	; 0x28
    2b3c:	f9 a5       	ldd	r31, Y+41	; 0x29
    2b3e:	e8 0f       	add	r30, r24
    2b40:	f9 1f       	adc	r31, r25
    2b42:	8f a1       	ldd	r24, Y+39	; 0x27
    2b44:	80 83       	st	Z, r24
                        u16_val >>= 4;
    2b46:	8d 81       	ldd	r24, Y+5	; 0x05
    2b48:	9e 81       	ldd	r25, Y+6	; 0x06
    2b4a:	92 95       	swap	r25
    2b4c:	82 95       	swap	r24
    2b4e:	8f 70       	andi	r24, 0x0F	; 15
    2b50:	89 27       	eor	r24, r25
    2b52:	9f 70       	andi	r25, 0x0F	; 15
    2b54:	89 27       	eor	r24, r25
    2b56:	9e 83       	std	Y+6, r25	; 0x06
    2b58:	8d 83       	std	Y+5, r24	; 0x05
                        data_idx--;
    2b5a:	89 89       	ldd	r24, Y+17	; 0x11
    2b5c:	81 50       	subi	r24, 0x01	; 1
    2b5e:	89 8b       	std	Y+17, r24	; 0x11
                    }
                }
                else  // 16-bit
                {
                    u16_val = (U16)(va_arg(arg_ptr, int)); // u16_val = va_arg(arg_ptr, U16);
                    while (u16_val)
    2b60:	8d 81       	ldd	r24, Y+5	; 0x05
    2b62:	9e 81       	ldd	r25, Y+6	; 0x06
    2b64:	00 97       	sbiw	r24, 0x00	; 0
    2b66:	39 f6       	brne	.-114    	; 0x2af6 <uart_mini_printf+0x56a>
                        data_buf[data_idx] = (u8_temp < 10)? u8_temp+'0':u8_temp-10+(*p=='x'?'a':'A');
                        u16_val >>= 4;
                        data_idx--;
                    }
                }
                data_idx++;
    2b68:	89 89       	ldd	r24, Y+17	; 0x11
    2b6a:	8f 5f       	subi	r24, 0xFF	; 255
    2b6c:	89 8b       	std	Y+17, r24	; 0x11
                if (min_size < data_idx)
    2b6e:	98 89       	ldd	r25, Y+16	; 0x10
    2b70:	89 89       	ldd	r24, Y+17	; 0x11
    2b72:	98 17       	cp	r25, r24
    2b74:	10 f4       	brcc	.+4      	; 0x2b7a <uart_mini_printf+0x5ee>
                {
                    data_idx = min_size;
    2b76:	88 89       	ldd	r24, Y+16	; 0x10
    2b78:	89 8b       	std	Y+17, r24	; 0x11
                }
                uart_put_string (data_buf + data_idx);
    2b7a:	89 89       	ldd	r24, Y+17	; 0x11
    2b7c:	28 2f       	mov	r18, r24
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	ce 01       	movw	r24, r28
    2b82:	4a 96       	adiw	r24, 0x1a	; 26
    2b84:	82 0f       	add	r24, r18
    2b86:	93 1f       	adc	r25, r19
    2b88:	0e 94 a9 12 	call	0x2552	; 0x2552 <uart_put_string>
                // Clean up
                min_size = DATA_BUF_LEN-1;
    2b8c:	8b e0       	ldi	r24, 0x0B	; 11
    2b8e:	88 8b       	std	Y+16, r24	; 0x10
                alt_p_c = FALSE;
    2b90:	1e 86       	std	Y+14, r1	; 0x0e
                long_flag = FALSE;
    2b92:	1f 86       	std	Y+15, r1	; 0x0f
    2b94:	82 c0       	rjmp	.+260    	; 0x2c9a <uart_mini_printf+0x70e>
                break;  // case 'x' & 'X'
                
            case '0':   // Max allowed "min_size" 2 decimal digit, truncated to DATA_BUF_LEN-1.
                min_size = DATA_BUF_LEN-1;
    2b96:	8b e0       	ldi	r24, 0x0B	; 11
    2b98:	88 8b       	std	Y+16, r24	; 0x10
                if (long_flag == TRUE)      // ERROR: 'l' before '0'
    2b9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b9c:	81 30       	cpi	r24, 0x01	; 1
    2b9e:	49 f4       	brne	.+18     	; 0x2bb2 <uart_mini_printf+0x626>
                {
                    uart_putchar('l');
    2ba0:	8c e6       	ldi	r24, 0x6C	; 108
    2ba2:	0e 94 6e 12 	call	0x24dc	; 0x24dc <uart_putchar>
                    uart_putchar('0');
    2ba6:	80 e3       	ldi	r24, 0x30	; 48
    2ba8:	0e 94 6e 12 	call	0x24dc	; 0x24dc <uart_putchar>
                    // Clean up
                    alt_p_c = FALSE;
    2bac:	1e 86       	std	Y+14, r1	; 0x0e
                    long_flag = FALSE;
    2bae:	1f 86       	std	Y+15, r1	; 0x0f
    2bb0:	74 c0       	rjmp	.+232    	; 0x2c9a <uart_mini_printf+0x70e>
                    break;
                }
                u8_temp = *++p;
    2bb2:	8e 89       	ldd	r24, Y+22	; 0x16
    2bb4:	9f 89       	ldd	r25, Y+23	; 0x17
    2bb6:	01 96       	adiw	r24, 0x01	; 1
    2bb8:	9f 8b       	std	Y+23, r25	; 0x17
    2bba:	8e 8b       	std	Y+22, r24	; 0x16
    2bbc:	ee 89       	ldd	r30, Y+22	; 0x16
    2bbe:	ff 89       	ldd	r31, Y+23	; 0x17
    2bc0:	80 81       	ld	r24, Z
    2bc2:	8b 8b       	std	Y+19, r24	; 0x13
                if ((u8_temp >='0') && (u8_temp <='9'))
    2bc4:	8b 89       	ldd	r24, Y+19	; 0x13
    2bc6:	80 33       	cpi	r24, 0x30	; 48
    2bc8:	08 f4       	brcc	.+2      	; 0x2bcc <uart_mini_printf+0x640>
    2bca:	4d c0       	rjmp	.+154    	; 0x2c66 <uart_mini_printf+0x6da>
    2bcc:	8b 89       	ldd	r24, Y+19	; 0x13
    2bce:	8a 33       	cpi	r24, 0x3A	; 58
    2bd0:	08 f0       	brcs	.+2      	; 0x2bd4 <uart_mini_printf+0x648>
    2bd2:	49 c0       	rjmp	.+146    	; 0x2c66 <uart_mini_printf+0x6da>
                {
                    min_size = u8_temp & 0x0F;
    2bd4:	8b 89       	ldd	r24, Y+19	; 0x13
    2bd6:	8f 70       	andi	r24, 0x0F	; 15
    2bd8:	88 8b       	std	Y+16, r24	; 0x10
                    u8_temp = *++p;
    2bda:	8e 89       	ldd	r24, Y+22	; 0x16
    2bdc:	9f 89       	ldd	r25, Y+23	; 0x17
    2bde:	01 96       	adiw	r24, 0x01	; 1
    2be0:	9f 8b       	std	Y+23, r25	; 0x17
    2be2:	8e 8b       	std	Y+22, r24	; 0x16
    2be4:	ee 89       	ldd	r30, Y+22	; 0x16
    2be6:	ff 89       	ldd	r31, Y+23	; 0x17
    2be8:	80 81       	ld	r24, Z
    2bea:	8b 8b       	std	Y+19, r24	; 0x13
                    if ((u8_temp >='0') && (u8_temp <='9'))
    2bec:	8b 89       	ldd	r24, Y+19	; 0x13
    2bee:	80 33       	cpi	r24, 0x30	; 48
    2bf0:	90 f0       	brcs	.+36     	; 0x2c16 <uart_mini_printf+0x68a>
    2bf2:	8b 89       	ldd	r24, Y+19	; 0x13
    2bf4:	8a 33       	cpi	r24, 0x3A	; 58
    2bf6:	78 f4       	brcc	.+30     	; 0x2c16 <uart_mini_printf+0x68a>
                    {
                        min_size <<= 4;
    2bf8:	88 89       	ldd	r24, Y+16	; 0x10
    2bfa:	82 95       	swap	r24
    2bfc:	80 7f       	andi	r24, 0xF0	; 240
    2bfe:	88 8b       	std	Y+16, r24	; 0x10
                        min_size |= (u8_temp & 0x0F);
    2c00:	8b 89       	ldd	r24, Y+19	; 0x13
    2c02:	98 2f       	mov	r25, r24
    2c04:	9f 70       	andi	r25, 0x0F	; 15
    2c06:	88 89       	ldd	r24, Y+16	; 0x10
    2c08:	89 2b       	or	r24, r25
    2c0a:	88 8b       	std	Y+16, r24	; 0x10
                        p++;
    2c0c:	8e 89       	ldd	r24, Y+22	; 0x16
    2c0e:	9f 89       	ldd	r25, Y+23	; 0x17
    2c10:	01 96       	adiw	r24, 0x01	; 1
    2c12:	9f 8b       	std	Y+23, r25	; 0x17
    2c14:	8e 8b       	std	Y+22, r24	; 0x16
                    }
                    min_size = ((min_size & 0x0F) + ((min_size >> 4) *10));  // Decimal to hexa
    2c16:	88 89       	ldd	r24, Y+16	; 0x10
    2c18:	48 2f       	mov	r20, r24
    2c1a:	4f 70       	andi	r20, 0x0F	; 15
    2c1c:	88 89       	ldd	r24, Y+16	; 0x10
    2c1e:	82 95       	swap	r24
    2c20:	8f 70       	andi	r24, 0x0F	; 15
    2c22:	88 2f       	mov	r24, r24
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	9c 01       	movw	r18, r24
    2c28:	22 0f       	add	r18, r18
    2c2a:	33 1f       	adc	r19, r19
    2c2c:	c9 01       	movw	r24, r18
    2c2e:	88 0f       	add	r24, r24
    2c30:	99 1f       	adc	r25, r25
    2c32:	88 0f       	add	r24, r24
    2c34:	99 1f       	adc	r25, r25
    2c36:	82 0f       	add	r24, r18
    2c38:	93 1f       	adc	r25, r19
    2c3a:	84 0f       	add	r24, r20
    2c3c:	88 8b       	std	Y+16, r24	; 0x10
                    if (min_size > (DATA_BUF_LEN-1))
    2c3e:	88 89       	ldd	r24, Y+16	; 0x10
    2c40:	8c 30       	cpi	r24, 0x0C	; 12
    2c42:	10 f0       	brcs	.+4      	; 0x2c48 <uart_mini_printf+0x6bc>
                    {
                        min_size = (DATA_BUF_LEN-1);
    2c44:	8b e0       	ldi	r24, 0x0B	; 11
    2c46:	88 8b       	std	Y+16, r24	; 0x10
                    }  // Truncation
                    min_size = DATA_BUF_LEN-1 - min_size;  // "min_size" formatted as "data_ix"
    2c48:	9b e0       	ldi	r25, 0x0B	; 11
    2c4a:	88 89       	ldd	r24, Y+16	; 0x10
    2c4c:	29 2f       	mov	r18, r25
    2c4e:	28 1b       	sub	r18, r24
    2c50:	82 2f       	mov	r24, r18
    2c52:	88 8b       	std	Y+16, r24	; 0x10
                    // Clean up
                    alt_p_c = FALSE;
                    long_flag = FALSE;
                    break;
                }
                p-=2;
    2c54:	8e 89       	ldd	r24, Y+22	; 0x16
    2c56:	9f 89       	ldd	r25, Y+23	; 0x17
    2c58:	02 97       	sbiw	r24, 0x02	; 2
    2c5a:	9f 8b       	std	Y+23, r25	; 0x17
    2c5c:	8e 8b       	std	Y+22, r24	; 0x16
                alt_p_c = TRUE;
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	8e 87       	std	Y+14, r24	; 0x0e
                // Clean up
                long_flag = FALSE;
    2c62:	1f 86       	std	Y+15, r1	; 0x0f
    2c64:	1a c0       	rjmp	.+52     	; 0x2c9a <uart_mini_printf+0x70e>
                    }  // Truncation
                    min_size = DATA_BUF_LEN-1 - min_size;  // "min_size" formatted as "data_ix"
                }
                else      // ERROR: any "char" after '0'
                {
                    uart_putchar('0');
    2c66:	80 e3       	ldi	r24, 0x30	; 48
    2c68:	0e 94 6e 12 	call	0x24dc	; 0x24dc <uart_putchar>
                    uart_putchar(*p);
    2c6c:	ee 89       	ldd	r30, Y+22	; 0x16
    2c6e:	ff 89       	ldd	r31, Y+23	; 0x17
    2c70:	80 81       	ld	r24, Z
    2c72:	0e 94 6e 12 	call	0x24dc	; 0x24dc <uart_putchar>
                    // Clean up
                    alt_p_c = FALSE;
    2c76:	1e 86       	std	Y+14, r1	; 0x0e
                    long_flag = FALSE;
    2c78:	1f 86       	std	Y+15, r1	; 0x0f
    2c7a:	0f c0       	rjmp	.+30     	; 0x2c9a <uart_mini_printf+0x70e>
                // Clean up
                long_flag = FALSE;
                break;  // case '0'
                
            default:
                if (long_flag == TRUE)
    2c7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c7e:	81 30       	cpi	r24, 0x01	; 1
    2c80:	19 f4       	brne	.+6      	; 0x2c88 <uart_mini_printf+0x6fc>
                {
                    uart_putchar('l');
    2c82:	8c e6       	ldi	r24, 0x6C	; 108
    2c84:	0e 94 6e 12 	call	0x24dc	; 0x24dc <uart_putchar>
                }
                uart_putchar(*p);
    2c88:	ee 89       	ldd	r30, Y+22	; 0x16
    2c8a:	ff 89       	ldd	r31, Y+23	; 0x17
    2c8c:	80 81       	ld	r24, Z
    2c8e:	0e 94 6e 12 	call	0x24dc	; 0x24dc <uart_putchar>
                // Clean up
                min_size = DATA_BUF_LEN-1;
    2c92:	8b e0       	ldi	r24, 0x0B	; 11
    2c94:	88 8b       	std	Y+16, r24	; 0x10
                alt_p_c = FALSE;
    2c96:	1e 86       	std	Y+14, r1	; 0x0e
                long_flag = FALSE;
    2c98:	1f 86       	std	Y+15, r1	; 0x0f
    long_flag = FALSE;
    alt_p_c = FALSE;
    min_size = DATA_BUF_LEN-1;

    va_start(arg_ptr, format);   // make arg_ptr point to the first unnamed arg
    for (p = (U8 *) format; *p; p++)
    2c9a:	8e 89       	ldd	r24, Y+22	; 0x16
    2c9c:	9f 89       	ldd	r25, Y+23	; 0x17
    2c9e:	01 96       	adiw	r24, 0x01	; 1
    2ca0:	9f 8b       	std	Y+23, r25	; 0x17
    2ca2:	8e 8b       	std	Y+22, r24	; 0x16
    2ca4:	ee 89       	ldd	r30, Y+22	; 0x16
    2ca6:	ff 89       	ldd	r31, Y+23	; 0x17
    2ca8:	80 81       	ld	r24, Z
    2caa:	88 23       	and	r24, r24
    2cac:	09 f0       	breq	.+2      	; 0x2cb0 <uart_mini_printf+0x724>
    2cae:	87 cc       	rjmp	.-1778   	; 0x25be <uart_mini_printf+0x32>
        }   // switch (*p ...
        
    }   // for (p = ...
    
    va_end(arg_ptr);
    return 0;
    2cb0:	80 e0       	ldi	r24, 0x00	; 0
}
    2cb2:	af 96       	adiw	r28, 0x2f	; 47
    2cb4:	0f b6       	in	r0, 0x3f	; 63
    2cb6:	f8 94       	cli
    2cb8:	de bf       	out	0x3e, r29	; 62
    2cba:	0f be       	out	0x3f, r0	; 63
    2cbc:	cd bf       	out	0x3d, r28	; 61
    2cbe:	cf 91       	pop	r28
    2cc0:	df 91       	pop	r29
    2cc2:	1f 91       	pop	r17
    2cc4:	0f 91       	pop	r16
    2cc6:	08 95       	ret

00002cc8 <__udivmodhi4>:
    2cc8:	aa 1b       	sub	r26, r26
    2cca:	bb 1b       	sub	r27, r27
    2ccc:	51 e1       	ldi	r21, 0x11	; 17
    2cce:	07 c0       	rjmp	.+14     	; 0x2cde <__udivmodhi4_ep>

00002cd0 <__udivmodhi4_loop>:
    2cd0:	aa 1f       	adc	r26, r26
    2cd2:	bb 1f       	adc	r27, r27
    2cd4:	a6 17       	cp	r26, r22
    2cd6:	b7 07       	cpc	r27, r23
    2cd8:	10 f0       	brcs	.+4      	; 0x2cde <__udivmodhi4_ep>
    2cda:	a6 1b       	sub	r26, r22
    2cdc:	b7 0b       	sbc	r27, r23

00002cde <__udivmodhi4_ep>:
    2cde:	88 1f       	adc	r24, r24
    2ce0:	99 1f       	adc	r25, r25
    2ce2:	5a 95       	dec	r21
    2ce4:	a9 f7       	brne	.-22     	; 0x2cd0 <__udivmodhi4_loop>
    2ce6:	80 95       	com	r24
    2ce8:	90 95       	com	r25
    2cea:	bc 01       	movw	r22, r24
    2cec:	cd 01       	movw	r24, r26
    2cee:	08 95       	ret

00002cf0 <__divmodhi4>:
    2cf0:	97 fb       	bst	r25, 7
    2cf2:	09 2e       	mov	r0, r25
    2cf4:	07 26       	eor	r0, r23
    2cf6:	0a d0       	rcall	.+20     	; 0x2d0c <__divmodhi4_neg1>
    2cf8:	77 fd       	sbrc	r23, 7
    2cfa:	04 d0       	rcall	.+8      	; 0x2d04 <__divmodhi4_neg2>
    2cfc:	e5 df       	rcall	.-54     	; 0x2cc8 <__udivmodhi4>
    2cfe:	06 d0       	rcall	.+12     	; 0x2d0c <__divmodhi4_neg1>
    2d00:	00 20       	and	r0, r0
    2d02:	1a f4       	brpl	.+6      	; 0x2d0a <__divmodhi4_exit>

00002d04 <__divmodhi4_neg2>:
    2d04:	70 95       	com	r23
    2d06:	61 95       	neg	r22
    2d08:	7f 4f       	sbci	r23, 0xFF	; 255

00002d0a <__divmodhi4_exit>:
    2d0a:	08 95       	ret

00002d0c <__divmodhi4_neg1>:
    2d0c:	f6 f7       	brtc	.-4      	; 0x2d0a <__divmodhi4_exit>
    2d0e:	90 95       	com	r25
    2d10:	81 95       	neg	r24
    2d12:	9f 4f       	sbci	r25, 0xFF	; 255
    2d14:	08 95       	ret

00002d16 <__udivmodsi4>:
    2d16:	a1 e2       	ldi	r26, 0x21	; 33
    2d18:	1a 2e       	mov	r1, r26
    2d1a:	aa 1b       	sub	r26, r26
    2d1c:	bb 1b       	sub	r27, r27
    2d1e:	fd 01       	movw	r30, r26
    2d20:	0d c0       	rjmp	.+26     	; 0x2d3c <__udivmodsi4_ep>

00002d22 <__udivmodsi4_loop>:
    2d22:	aa 1f       	adc	r26, r26
    2d24:	bb 1f       	adc	r27, r27
    2d26:	ee 1f       	adc	r30, r30
    2d28:	ff 1f       	adc	r31, r31
    2d2a:	a2 17       	cp	r26, r18
    2d2c:	b3 07       	cpc	r27, r19
    2d2e:	e4 07       	cpc	r30, r20
    2d30:	f5 07       	cpc	r31, r21
    2d32:	20 f0       	brcs	.+8      	; 0x2d3c <__udivmodsi4_ep>
    2d34:	a2 1b       	sub	r26, r18
    2d36:	b3 0b       	sbc	r27, r19
    2d38:	e4 0b       	sbc	r30, r20
    2d3a:	f5 0b       	sbc	r31, r21

00002d3c <__udivmodsi4_ep>:
    2d3c:	66 1f       	adc	r22, r22
    2d3e:	77 1f       	adc	r23, r23
    2d40:	88 1f       	adc	r24, r24
    2d42:	99 1f       	adc	r25, r25
    2d44:	1a 94       	dec	r1
    2d46:	69 f7       	brne	.-38     	; 0x2d22 <__udivmodsi4_loop>
    2d48:	60 95       	com	r22
    2d4a:	70 95       	com	r23
    2d4c:	80 95       	com	r24
    2d4e:	90 95       	com	r25
    2d50:	9b 01       	movw	r18, r22
    2d52:	ac 01       	movw	r20, r24
    2d54:	bd 01       	movw	r22, r26
    2d56:	cf 01       	movw	r24, r30
    2d58:	08 95       	ret

00002d5a <__divmodsi4>:
    2d5a:	97 fb       	bst	r25, 7
    2d5c:	09 2e       	mov	r0, r25
    2d5e:	05 26       	eor	r0, r21
    2d60:	0e d0       	rcall	.+28     	; 0x2d7e <__divmodsi4_neg1>
    2d62:	57 fd       	sbrc	r21, 7
    2d64:	04 d0       	rcall	.+8      	; 0x2d6e <__divmodsi4_neg2>
    2d66:	d7 df       	rcall	.-82     	; 0x2d16 <__udivmodsi4>
    2d68:	0a d0       	rcall	.+20     	; 0x2d7e <__divmodsi4_neg1>
    2d6a:	00 1c       	adc	r0, r0
    2d6c:	38 f4       	brcc	.+14     	; 0x2d7c <__divmodsi4_exit>

00002d6e <__divmodsi4_neg2>:
    2d6e:	50 95       	com	r21
    2d70:	40 95       	com	r20
    2d72:	30 95       	com	r19
    2d74:	21 95       	neg	r18
    2d76:	3f 4f       	sbci	r19, 0xFF	; 255
    2d78:	4f 4f       	sbci	r20, 0xFF	; 255
    2d7a:	5f 4f       	sbci	r21, 0xFF	; 255

00002d7c <__divmodsi4_exit>:
    2d7c:	08 95       	ret

00002d7e <__divmodsi4_neg1>:
    2d7e:	f6 f7       	brtc	.-4      	; 0x2d7c <__divmodsi4_exit>
    2d80:	90 95       	com	r25
    2d82:	80 95       	com	r24
    2d84:	70 95       	com	r23
    2d86:	61 95       	neg	r22
    2d88:	7f 4f       	sbci	r23, 0xFF	; 255
    2d8a:	8f 4f       	sbci	r24, 0xFF	; 255
    2d8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d8e:	08 95       	ret

00002d90 <_exit>:
    2d90:	f8 94       	cli

00002d92 <__stop_program>:
    2d92:	ff cf       	rjmp	.-2      	; 0x2d92 <__stop_program>
