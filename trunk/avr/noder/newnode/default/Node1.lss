
Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  000014c2  00001556  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010b  00800144  00800144  0000159a  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  0000159a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002d1  00000000  00000000  0000161a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000edf  00000000  00000000  000018eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000060a  00000000  00000000  000027ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000128d  00000000  00000000  00002dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000240  00000000  00000000  00004064  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b7  00000000  00000000  000042a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000082c  00000000  00000000  0000465b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00004e87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d4 e0       	ldi	r29, 0x04	; 4
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 ec       	ldi	r30, 0xC2	; 194
      7c:	f4 e1       	ldi	r31, 0x14	; 20
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a4 34       	cpi	r26, 0x44	; 68
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	a4 e4       	ldi	r26, 0x44	; 68
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	af 34       	cpi	r26, 0x4F	; 79
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 ed 06 	call	0xdda	; 0xdda <main>
      9e:	0c 94 5f 0a 	jmp	0x14be	; 0x14be <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <enc28j60ReadOp>:
//
#define waitspi() while(!(SPSR&(1<<SPIF)))

uint8_t enc28j60ReadOp(uint8_t op, uint8_t address)
{
        CSACTIVE;
      a6:	2a 98       	cbi	0x05, 2	; 5
        // issue read command
        SPDR = op | (address & ADDR_MASK);
      a8:	96 2f       	mov	r25, r22
      aa:	9f 71       	andi	r25, 0x1F	; 31
      ac:	98 2b       	or	r25, r24
      ae:	9e bd       	out	0x2e, r25	; 46
        waitspi();
      b0:	0d b4       	in	r0, 0x2d	; 45
      b2:	07 fe       	sbrs	r0, 7
      b4:	fd cf       	rjmp	.-6      	; 0xb0 <enc28j60ReadOp+0xa>
        // read data
        SPDR = 0x00;
      b6:	1e bc       	out	0x2e, r1	; 46
        waitspi();
      b8:	0d b4       	in	r0, 0x2d	; 45
      ba:	07 fe       	sbrs	r0, 7
      bc:	fd cf       	rjmp	.-6      	; 0xb8 <enc28j60ReadOp+0x12>
        // do dummy read if needed (for mac and mii, see datasheet page 29)
        if(address & 0x80)
      be:	67 ff       	sbrs	r22, 7
      c0:	04 c0       	rjmp	.+8      	; 0xca <enc28j60ReadOp+0x24>
        {
                SPDR = 0x00;
      c2:	1e bc       	out	0x2e, r1	; 46
                waitspi();
      c4:	0d b4       	in	r0, 0x2d	; 45
      c6:	07 fe       	sbrs	r0, 7
      c8:	fd cf       	rjmp	.-6      	; 0xc4 <enc28j60ReadOp+0x1e>
        }
        // release CS
        CSPASSIVE;
      ca:	2a 9a       	sbi	0x05, 2	; 5
        return(SPDR);
      cc:	8e b5       	in	r24, 0x2e	; 46
}
      ce:	08 95       	ret

000000d0 <enc28j60WriteOp>:

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
      d0:	2a 98       	cbi	0x05, 2	; 5
        // issue write command
        SPDR = op | (address & ADDR_MASK);
      d2:	6f 71       	andi	r22, 0x1F	; 31
      d4:	68 2b       	or	r22, r24
      d6:	6e bd       	out	0x2e, r22	; 46
        waitspi();
      d8:	0d b4       	in	r0, 0x2d	; 45
      da:	07 fe       	sbrs	r0, 7
      dc:	fd cf       	rjmp	.-6      	; 0xd8 <enc28j60WriteOp+0x8>
        // write data
        SPDR = data;
      de:	4e bd       	out	0x2e, r20	; 46
        waitspi();
      e0:	0d b4       	in	r0, 0x2d	; 45
      e2:	07 fe       	sbrs	r0, 7
      e4:	fd cf       	rjmp	.-6      	; 0xe0 <enc28j60WriteOp+0x10>
        CSPASSIVE;
      e6:	2a 9a       	sbi	0x05, 2	; 5
}
      e8:	08 95       	ret

000000ea <enc28j60ReadBuffer>:

void enc28j60ReadBuffer(uint16_t len, uint8_t* data)
{
      ea:	ac 01       	movw	r20, r24
      ec:	fb 01       	movw	r30, r22
        CSACTIVE;
      ee:	2a 98       	cbi	0x05, 2	; 5
        // issue read command
        SPDR = ENC28J60_READ_BUF_MEM;
      f0:	8a e3       	ldi	r24, 0x3A	; 58
      f2:	8e bd       	out	0x2e, r24	; 46
        waitspi();
      f4:	0d b4       	in	r0, 0x2d	; 45
      f6:	07 fe       	sbrs	r0, 7
      f8:	fd cf       	rjmp	.-6      	; 0xf4 <enc28j60ReadBuffer+0xa>
      fa:	9a 01       	movw	r18, r20
      fc:	df 01       	movw	r26, r30
      fe:	08 c0       	rjmp	.+16     	; 0x110 <enc28j60ReadBuffer+0x26>
        while(len)
        {
                len--;
                // read data
                SPDR = 0x00;
     100:	1e bc       	out	0x2e, r1	; 46
                waitspi();
     102:	0d b4       	in	r0, 0x2d	; 45
     104:	07 fe       	sbrs	r0, 7
     106:	fd cf       	rjmp	.-6      	; 0x102 <enc28j60ReadBuffer+0x18>
        // issue read command
        SPDR = ENC28J60_READ_BUF_MEM;
        waitspi();
        while(len)
        {
                len--;
     108:	21 50       	subi	r18, 0x01	; 1
     10a:	30 40       	sbci	r19, 0x00	; 0
                // read data
                SPDR = 0x00;
                waitspi();
                *data = SPDR;
     10c:	8e b5       	in	r24, 0x2e	; 46
     10e:	8d 93       	st	X+, r24
{
        CSACTIVE;
        // issue read command
        SPDR = ENC28J60_READ_BUF_MEM;
        waitspi();
        while(len)
     110:	21 15       	cp	r18, r1
     112:	31 05       	cpc	r19, r1
     114:	a9 f7       	brne	.-22     	; 0x100 <enc28j60ReadBuffer+0x16>
                SPDR = 0x00;
                waitspi();
                *data = SPDR;
                data++;
        }
        *data='\0';
     116:	e4 0f       	add	r30, r20
     118:	f5 1f       	adc	r31, r21
     11a:	10 82       	st	Z, r1
        CSPASSIVE;
     11c:	2a 9a       	sbi	0x05, 2	; 5
}
     11e:	08 95       	ret

00000120 <enc28j60WriteBuffer>:

void enc28j60WriteBuffer(uint16_t len, uint8_t* data)
{
     120:	9c 01       	movw	r18, r24
     122:	fb 01       	movw	r30, r22
        CSACTIVE;
     124:	2a 98       	cbi	0x05, 2	; 5
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
     126:	8a e7       	ldi	r24, 0x7A	; 122
     128:	8e bd       	out	0x2e, r24	; 46
        waitspi();
     12a:	0d b4       	in	r0, 0x2d	; 45
     12c:	07 fe       	sbrs	r0, 7
     12e:	fd cf       	rjmp	.-6      	; 0x12a <enc28j60WriteBuffer+0xa>
     130:	08 c0       	rjmp	.+16     	; 0x142 <enc28j60WriteBuffer+0x22>
        while(len)
        {
                len--;
                // write data
                SPDR = *data;
     132:	80 81       	ld	r24, Z
     134:	8e bd       	out	0x2e, r24	; 46
                data++;
                waitspi();
     136:	0d b4       	in	r0, 0x2d	; 45
     138:	07 fe       	sbrs	r0, 7
     13a:	fd cf       	rjmp	.-6      	; 0x136 <enc28j60WriteBuffer+0x16>
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
        waitspi();
        while(len)
        {
                len--;
     13c:	21 50       	subi	r18, 0x01	; 1
     13e:	30 40       	sbci	r19, 0x00	; 0
                // write data
                SPDR = *data;
                data++;
     140:	31 96       	adiw	r30, 0x01	; 1
{
        CSACTIVE;
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
        waitspi();
        while(len)
     142:	21 15       	cp	r18, r1
     144:	31 05       	cpc	r19, r1
     146:	a9 f7       	brne	.-22     	; 0x132 <enc28j60WriteBuffer+0x12>
                // write data
                SPDR = *data;
                data++;
                waitspi();
        }
        CSPASSIVE;
     148:	2a 9a       	sbi	0x05, 2	; 5
}
     14a:	08 95       	ret

0000014c <enc28j60SetBank>:

void enc28j60SetBank(uint8_t address)
{
     14c:	48 2f       	mov	r20, r24
        // set the bank (if needed)
        if((address & BANK_MASK) != Enc28j60Bank)
     14e:	28 2f       	mov	r18, r24
     150:	30 e0       	ldi	r19, 0x00	; 0
     152:	20 76       	andi	r18, 0x60	; 96
     154:	30 70       	andi	r19, 0x00	; 0
     156:	80 91 44 01 	lds	r24, 0x0144
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	28 17       	cp	r18, r24
     15e:	39 07       	cpc	r19, r25
     160:	f9 f0       	breq	.+62     	; 0x1a0 <enc28j60SetBank+0x54>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     162:	2a 98       	cbi	0x05, 2	; 5
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     164:	8f eb       	ldi	r24, 0xBF	; 191
     166:	8e bd       	out	0x2e, r24	; 46
        waitspi();
     168:	0d b4       	in	r0, 0x2d	; 45
     16a:	07 fe       	sbrs	r0, 7
     16c:	fd cf       	rjmp	.-6      	; 0x168 <enc28j60SetBank+0x1c>
        // write data
        SPDR = data;
     16e:	83 e0       	ldi	r24, 0x03	; 3
     170:	8e bd       	out	0x2e, r24	; 46
        waitspi();
     172:	0d b4       	in	r0, 0x2d	; 45
     174:	07 fe       	sbrs	r0, 7
     176:	fd cf       	rjmp	.-6      	; 0x172 <enc28j60SetBank+0x26>
        CSPASSIVE;
     178:	2a 9a       	sbi	0x05, 2	; 5
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     17a:	2a 98       	cbi	0x05, 2	; 5
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     17c:	8f e9       	ldi	r24, 0x9F	; 159
     17e:	8e bd       	out	0x2e, r24	; 46
        waitspi();
     180:	0d b4       	in	r0, 0x2d	; 45
     182:	07 fe       	sbrs	r0, 7
     184:	fd cf       	rjmp	.-6      	; 0x180 <enc28j60SetBank+0x34>
        // set the bank (if needed)
        if((address & BANK_MASK) != Enc28j60Bank)
        {
                // set the bank
                enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, (ECON1_BSEL1|ECON1_BSEL0));
                enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK)>>5);
     186:	85 e0       	ldi	r24, 0x05	; 5
     188:	35 95       	asr	r19
     18a:	27 95       	ror	r18
     18c:	8a 95       	dec	r24
     18e:	e1 f7       	brne	.-8      	; 0x188 <enc28j60SetBank+0x3c>
        CSACTIVE;
        // issue write command
        SPDR = op | (address & ADDR_MASK);
        waitspi();
        // write data
        SPDR = data;
     190:	2e bd       	out	0x2e, r18	; 46
        waitspi();
     192:	0d b4       	in	r0, 0x2d	; 45
     194:	07 fe       	sbrs	r0, 7
     196:	fd cf       	rjmp	.-6      	; 0x192 <enc28j60SetBank+0x46>
        CSPASSIVE;
     198:	2a 9a       	sbi	0x05, 2	; 5
        if((address & BANK_MASK) != Enc28j60Bank)
        {
                // set the bank
                enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, (ECON1_BSEL1|ECON1_BSEL0));
                enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK)>>5);
                Enc28j60Bank = (address & BANK_MASK);
     19a:	40 76       	andi	r20, 0x60	; 96
     19c:	40 93 44 01 	sts	0x0144, r20
     1a0:	08 95       	ret

000001a2 <enc28j60Read>:
        }
}

uint8_t enc28j60Read(uint8_t address)
{
     1a2:	1f 93       	push	r17
     1a4:	18 2f       	mov	r17, r24
        // set the bank
        enc28j60SetBank(address);
     1a6:	0e 94 a6 00 	call	0x14c	; 0x14c <enc28j60SetBank>
        // do the read
        return enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
     1aa:	80 e0       	ldi	r24, 0x00	; 0
     1ac:	61 2f       	mov	r22, r17
     1ae:	0e 94 53 00 	call	0xa6	; 0xa6 <enc28j60ReadOp>
}
     1b2:	1f 91       	pop	r17
     1b4:	08 95       	ret

000001b6 <enc28j60Write>:

void enc28j60Write(uint8_t address, uint8_t data)
{
     1b6:	0f 93       	push	r16
     1b8:	1f 93       	push	r17
     1ba:	18 2f       	mov	r17, r24
     1bc:	06 2f       	mov	r16, r22
        // set the bank
        enc28j60SetBank(address);
     1be:	0e 94 a6 00 	call	0x14c	; 0x14c <enc28j60SetBank>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     1c2:	2a 98       	cbi	0x05, 2	; 5
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     1c4:	1f 71       	andi	r17, 0x1F	; 31
     1c6:	10 64       	ori	r17, 0x40	; 64
     1c8:	1e bd       	out	0x2e, r17	; 46
        waitspi();
     1ca:	0d b4       	in	r0, 0x2d	; 45
     1cc:	07 fe       	sbrs	r0, 7
     1ce:	fd cf       	rjmp	.-6      	; 0x1ca <enc28j60Write+0x14>
        // write data
        SPDR = data;
     1d0:	0e bd       	out	0x2e, r16	; 46
        waitspi();
     1d2:	0d b4       	in	r0, 0x2d	; 45
     1d4:	07 fe       	sbrs	r0, 7
     1d6:	fd cf       	rjmp	.-6      	; 0x1d2 <enc28j60Write+0x1c>
        CSPASSIVE;
     1d8:	2a 9a       	sbi	0x05, 2	; 5
{
        // set the bank
        enc28j60SetBank(address);
        // do the write
        enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
}
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	08 95       	ret

000001e0 <enc28j60PhyWrite>:

void enc28j60PhyWrite(uint8_t address, uint16_t data)
{
     1e0:	0f 93       	push	r16
     1e2:	1f 93       	push	r17
     1e4:	98 2f       	mov	r25, r24
     1e6:	16 2f       	mov	r17, r22
     1e8:	07 2f       	mov	r16, r23
        // set the PHY register address
        enc28j60Write(MIREGADR, address);
     1ea:	84 ed       	ldi	r24, 0xD4	; 212
     1ec:	69 2f       	mov	r22, r25
     1ee:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
        // write the PHY data
        enc28j60Write(MIWRL, data);
     1f2:	86 ed       	ldi	r24, 0xD6	; 214
     1f4:	61 2f       	mov	r22, r17
     1f6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
        enc28j60Write(MIWRH, data>>8);
     1fa:	87 ed       	ldi	r24, 0xD7	; 215
     1fc:	60 2f       	mov	r22, r16
     1fe:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     202:	18 e2       	ldi	r17, 0x28	; 40
     204:	03 c0       	rjmp	.+6      	; 0x20c <enc28j60PhyWrite+0x2c>
     206:	81 2f       	mov	r24, r17
     208:	8a 95       	dec	r24
     20a:	f1 f7       	brne	.-4      	; 0x208 <enc28j60PhyWrite+0x28>
        // wait until the PHY write completes
        while(enc28j60Read(MISTAT) & MISTAT_BUSY){
     20c:	8a ee       	ldi	r24, 0xEA	; 234
     20e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <enc28j60Read>
     212:	80 fd       	sbrc	r24, 0
     214:	f8 cf       	rjmp	.-16     	; 0x206 <enc28j60PhyWrite+0x26>
                _delay_us(15);
        }
}
     216:	1f 91       	pop	r17
     218:	0f 91       	pop	r16
     21a:	08 95       	ret

0000021c <enc28j60getrev>:
}

// read the revision of the chip:
uint8_t enc28j60getrev(void)
{
	return(enc28j60Read(EREVID));
     21c:	82 e7       	ldi	r24, 0x72	; 114
     21e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <enc28j60Read>
}
     222:	08 95       	ret

00000224 <enc28j60PacketSend>:

void enc28j60PacketSend(uint16_t len, uint8_t* packet)
{
     224:	0f 93       	push	r16
     226:	1f 93       	push	r17
     228:	cf 93       	push	r28
     22a:	df 93       	push	r29
     22c:	ec 01       	movw	r28, r24
     22e:	8b 01       	movw	r16, r22
	// Set the write pointer to start of transmit buffer area
	enc28j60Write(EWRPTL, TXSTART_INIT&0xFF);
     230:	82 e0       	ldi	r24, 0x02	; 2
     232:	6f ef       	ldi	r22, 0xFF	; 255
     234:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
	enc28j60Write(EWRPTH, TXSTART_INIT>>8);
     238:	83 e0       	ldi	r24, 0x03	; 3
     23a:	69 e1       	ldi	r22, 0x19	; 25
     23c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
	// Set the TXND pointer to correspond to the packet size given
	enc28j60Write(ETXNDL, (TXSTART_INIT+len)&0xFF);
     240:	ce 01       	movw	r24, r28
     242:	81 50       	subi	r24, 0x01	; 1
     244:	68 2f       	mov	r22, r24
     246:	86 e0       	ldi	r24, 0x06	; 6
     248:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
	enc28j60Write(ETXNDH, (TXSTART_INIT+len)>>8);
     24c:	9e 01       	movw	r18, r28
     24e:	21 50       	subi	r18, 0x01	; 1
     250:	36 4e       	sbci	r19, 0xE6	; 230
     252:	87 e0       	ldi	r24, 0x07	; 7
     254:	63 2f       	mov	r22, r19
     256:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     25a:	2a 98       	cbi	0x05, 2	; 5
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     25c:	8a e7       	ldi	r24, 0x7A	; 122
     25e:	8e bd       	out	0x2e, r24	; 46
        waitspi();
     260:	0d b4       	in	r0, 0x2d	; 45
     262:	07 fe       	sbrs	r0, 7
     264:	fd cf       	rjmp	.-6      	; 0x260 <enc28j60PacketSend+0x3c>
        // write data
        SPDR = data;
     266:	1e bc       	out	0x2e, r1	; 46
        waitspi();
     268:	0d b4       	in	r0, 0x2d	; 45
     26a:	07 fe       	sbrs	r0, 7
     26c:	fd cf       	rjmp	.-6      	; 0x268 <enc28j60PacketSend+0x44>
        CSPASSIVE;
     26e:	2a 9a       	sbi	0x05, 2	; 5
        CSPASSIVE;
}

void enc28j60WriteBuffer(uint16_t len, uint8_t* data)
{
        CSACTIVE;
     270:	2a 98       	cbi	0x05, 2	; 5
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
     272:	8a e7       	ldi	r24, 0x7A	; 122
     274:	8e bd       	out	0x2e, r24	; 46
        waitspi();
     276:	0d b4       	in	r0, 0x2d	; 45
     278:	07 fe       	sbrs	r0, 7
     27a:	fd cf       	rjmp	.-6      	; 0x276 <enc28j60PacketSend+0x52>
     27c:	09 c0       	rjmp	.+18     	; 0x290 <enc28j60PacketSend+0x6c>
        while(len)
        {
                len--;
                // write data
                SPDR = *data;
     27e:	f8 01       	movw	r30, r16
     280:	80 81       	ld	r24, Z
     282:	8e bd       	out	0x2e, r24	; 46
                data++;
                waitspi();
     284:	0d b4       	in	r0, 0x2d	; 45
     286:	07 fe       	sbrs	r0, 7
     288:	fd cf       	rjmp	.-6      	; 0x284 <enc28j60PacketSend+0x60>
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
        waitspi();
        while(len)
        {
                len--;
     28a:	21 97       	sbiw	r28, 0x01	; 1
                // write data
                SPDR = *data;
                data++;
     28c:	0f 5f       	subi	r16, 0xFF	; 255
     28e:	1f 4f       	sbci	r17, 0xFF	; 255
{
        CSACTIVE;
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
        waitspi();
        while(len)
     290:	20 97       	sbiw	r28, 0x00	; 0
     292:	a9 f7       	brne	.-22     	; 0x27e <enc28j60PacketSend+0x5a>
                // write data
                SPDR = *data;
                data++;
                waitspi();
        }
        CSPASSIVE;
     294:	2a 9a       	sbi	0x05, 2	; 5
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     296:	2a 98       	cbi	0x05, 2	; 5
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     298:	8f e9       	ldi	r24, 0x9F	; 159
     29a:	8e bd       	out	0x2e, r24	; 46
        waitspi();
     29c:	0d b4       	in	r0, 0x2d	; 45
     29e:	07 fe       	sbrs	r0, 7
     2a0:	fd cf       	rjmp	.-6      	; 0x29c <enc28j60PacketSend+0x78>
        // write data
        SPDR = data;
     2a2:	88 e0       	ldi	r24, 0x08	; 8
     2a4:	8e bd       	out	0x2e, r24	; 46
        waitspi();
     2a6:	0d b4       	in	r0, 0x2d	; 45
     2a8:	07 fe       	sbrs	r0, 7
     2aa:	fd cf       	rjmp	.-6      	; 0x2a6 <enc28j60PacketSend+0x82>
        CSPASSIVE;
     2ac:	2a 9a       	sbi	0x05, 2	; 5
	// copy the packet into the transmit buffer
	enc28j60WriteBuffer(len, packet);
	// send the contents of the transmit buffer onto the network
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
        // Reset the transmit logic problem. See Rev. B4 Silicon Errata point 12.
	if( (enc28j60Read(EIR) & EIR_TXERIF) ){
     2ae:	8c e1       	ldi	r24, 0x1C	; 28
     2b0:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <enc28j60Read>
     2b4:	81 ff       	sbrs	r24, 1
     2b6:	0c c0       	rjmp	.+24     	; 0x2d0 <enc28j60PacketSend+0xac>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     2b8:	2a 98       	cbi	0x05, 2	; 5
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     2ba:	8f eb       	ldi	r24, 0xBF	; 191
     2bc:	8e bd       	out	0x2e, r24	; 46
        waitspi();
     2be:	0d b4       	in	r0, 0x2d	; 45
     2c0:	07 fe       	sbrs	r0, 7
     2c2:	fd cf       	rjmp	.-6      	; 0x2be <enc28j60PacketSend+0x9a>
        // write data
        SPDR = data;
     2c4:	88 e0       	ldi	r24, 0x08	; 8
     2c6:	8e bd       	out	0x2e, r24	; 46
        waitspi();
     2c8:	0d b4       	in	r0, 0x2d	; 45
     2ca:	07 fe       	sbrs	r0, 7
     2cc:	fd cf       	rjmp	.-6      	; 0x2c8 <enc28j60PacketSend+0xa4>
        CSPASSIVE;
     2ce:	2a 9a       	sbi	0x05, 2	; 5
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
        // Reset the transmit logic problem. See Rev. B4 Silicon Errata point 12.
	if( (enc28j60Read(EIR) & EIR_TXERIF) ){
                enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
        }
}
     2d0:	df 91       	pop	r29
     2d2:	cf 91       	pop	r28
     2d4:	1f 91       	pop	r17
     2d6:	0f 91       	pop	r16
     2d8:	08 95       	ret

000002da <enc28j60PacketReceive>:
// The packet will by headed by an ethernet header.
//      maxlen  The maximum acceptable length of a retrieved packet.
//      packet  Pointer where packet data should be stored.
// Returns: Packet length in bytes if a packet was retrieved, zero otherwise.
uint16_t enc28j60PacketReceive(uint16_t maxlen, uint8_t* packet)
{
     2da:	af 92       	push	r10
     2dc:	bf 92       	push	r11
     2de:	cf 92       	push	r12
     2e0:	df 92       	push	r13
     2e2:	ef 92       	push	r14
     2e4:	ff 92       	push	r15
     2e6:	0f 93       	push	r16
     2e8:	1f 93       	push	r17
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
     2ee:	6c 01       	movw	r12, r24
     2f0:	5b 01       	movw	r10, r22
	uint16_t rxstat;
	uint16_t len;
	// check if a packet has been received and buffered
	//if( !(enc28j60Read(EIR) & EIR_PKTIF) ){
        // The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) ==0 ){
     2f2:	89 e3       	ldi	r24, 0x39	; 57
     2f4:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <enc28j60Read>
     2f8:	88 23       	and	r24, r24
     2fa:	19 f4       	brne	.+6      	; 0x302 <enc28j60PacketReceive+0x28>
     2fc:	00 e0       	ldi	r16, 0x00	; 0
     2fe:	10 e0       	ldi	r17, 0x00	; 0
     300:	61 c0       	rjmp	.+194    	; 0x3c4 <enc28j60PacketReceive+0xea>
		return(0);
        }

	// Set the read pointer to the start of the received packet
	enc28j60Write(ERDPTL, (NextPacketPtr));
     302:	60 91 45 01 	lds	r22, 0x0145
     306:	10 91 46 01 	lds	r17, 0x0146
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
	enc28j60Write(ERDPTH, (NextPacketPtr)>>8);
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	61 2f       	mov	r22, r17
     314:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
	// read the next packet pointer
	NextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     318:	8a e3       	ldi	r24, 0x3A	; 58
     31a:	60 e0       	ldi	r22, 0x00	; 0
     31c:	0e 94 53 00 	call	0xa6	; 0xa6 <enc28j60ReadOp>
     320:	18 2f       	mov	r17, r24
	NextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     322:	8a e3       	ldi	r24, 0x3A	; 58
     324:	60 e0       	ldi	r22, 0x00	; 0
     326:	0e 94 53 00 	call	0xa6	; 0xa6 <enc28j60ReadOp>
     32a:	38 2f       	mov	r19, r24
     32c:	20 e0       	ldi	r18, 0x00	; 0
     32e:	c1 2f       	mov	r28, r17
     330:	d0 e0       	ldi	r29, 0x00	; 0
     332:	c2 2b       	or	r28, r18
     334:	d3 2b       	or	r29, r19
     336:	d0 93 46 01 	sts	0x0146, r29
     33a:	c0 93 45 01 	sts	0x0145, r28
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     33e:	8a e3       	ldi	r24, 0x3A	; 58
     340:	60 e0       	ldi	r22, 0x00	; 0
     342:	0e 94 53 00 	call	0xa6	; 0xa6 <enc28j60ReadOp>
     346:	e8 2e       	mov	r14, r24
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     348:	8a e3       	ldi	r24, 0x3A	; 58
     34a:	60 e0       	ldi	r22, 0x00	; 0
     34c:	0e 94 53 00 	call	0xa6	; 0xa6 <enc28j60ReadOp>
     350:	f8 2e       	mov	r15, r24
        len-=4; //remove the CRC count
	// read the receive status (see datasheet page 43)
	rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     352:	8a e3       	ldi	r24, 0x3A	; 58
     354:	60 e0       	ldi	r22, 0x00	; 0
     356:	0e 94 53 00 	call	0xa6	; 0xa6 <enc28j60ReadOp>
     35a:	08 2f       	mov	r16, r24
     35c:	10 e0       	ldi	r17, 0x00	; 0
	rxstat |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     35e:	8a e3       	ldi	r24, 0x3A	; 58
     360:	60 e0       	ldi	r22, 0x00	; 0
     362:	0e 94 53 00 	call	0xa6	; 0xa6 <enc28j60ReadOp>
                len=maxlen-1;
        }
        // check CRC and symbol errors (see datasheet page 44, table 7-3):
        // The ERXFCON.CRCEN is set by default. Normally we should not
        // need to check this.
        if ((rxstat & 0x80)==0){
     366:	38 2f       	mov	r19, r24
     368:	20 e0       	ldi	r18, 0x00	; 0
     36a:	20 2b       	or	r18, r16
     36c:	31 2b       	or	r19, r17
     36e:	27 fd       	sbrc	r18, 7
     370:	03 c0       	rjmp	.+6      	; 0x378 <enc28j60PacketReceive+0x9e>
     372:	00 e0       	ldi	r16, 0x00	; 0
     374:	10 e0       	ldi	r17, 0x00	; 0
     376:	12 c0       	rjmp	.+36     	; 0x39c <enc28j60PacketReceive+0xc2>
	enc28j60Write(ERDPTH, (NextPacketPtr)>>8);
	// read the next packet pointer
	NextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	NextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     378:	0e 2d       	mov	r16, r14
     37a:	10 e0       	ldi	r17, 0x00	; 0
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     37c:	9f 2d       	mov	r25, r15
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	08 2b       	or	r16, r24
     382:	19 2b       	or	r17, r25
        len-=4; //remove the CRC count
     384:	c6 01       	movw	r24, r12
     386:	01 97       	sbiw	r24, 0x01	; 1
     388:	04 50       	subi	r16, 0x04	; 4
     38a:	10 40       	sbci	r17, 0x00	; 0
     38c:	80 17       	cp	r24, r16
     38e:	91 07       	cpc	r25, r17
     390:	08 f4       	brcc	.+2      	; 0x394 <enc28j60PacketReceive+0xba>
     392:	8c 01       	movw	r16, r24
        if ((rxstat & 0x80)==0){
                // invalid
                len=0;
        }else{
                // copy the packet from the receive buffer
                enc28j60ReadBuffer(len, packet);
     394:	c8 01       	movw	r24, r16
     396:	b5 01       	movw	r22, r10
     398:	0e 94 75 00 	call	0xea	; 0xea <enc28j60ReadBuffer>
        }
	// Move the RX read pointer to the start of the next received packet
	// This frees the memory we just read out
	enc28j60Write(ERXRDPTL, (NextPacketPtr));
     39c:	8c e0       	ldi	r24, 0x0C	; 12
     39e:	6c 2f       	mov	r22, r28
     3a0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
	enc28j60Write(ERXRDPTH, (NextPacketPtr)>>8);
     3a4:	8d e0       	ldi	r24, 0x0D	; 13
     3a6:	6d 2f       	mov	r22, r29
     3a8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     3ac:	2a 98       	cbi	0x05, 2	; 5
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     3ae:	8e e9       	ldi	r24, 0x9E	; 158
     3b0:	8e bd       	out	0x2e, r24	; 46
        waitspi();
     3b2:	0d b4       	in	r0, 0x2d	; 45
     3b4:	07 fe       	sbrs	r0, 7
     3b6:	fd cf       	rjmp	.-6      	; 0x3b2 <enc28j60PacketReceive+0xd8>
        // write data
        SPDR = data;
     3b8:	80 e4       	ldi	r24, 0x40	; 64
     3ba:	8e bd       	out	0x2e, r24	; 46
        waitspi();
     3bc:	0d b4       	in	r0, 0x2d	; 45
     3be:	07 fe       	sbrs	r0, 7
     3c0:	fd cf       	rjmp	.-6      	; 0x3bc <enc28j60PacketReceive+0xe2>
        CSPASSIVE;
     3c2:	2a 9a       	sbi	0x05, 2	; 5
	enc28j60Write(ERXRDPTL, (NextPacketPtr));
	enc28j60Write(ERXRDPTH, (NextPacketPtr)>>8);
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
	return(len);
}
     3c4:	c8 01       	movw	r24, r16
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	1f 91       	pop	r17
     3cc:	0f 91       	pop	r16
     3ce:	ff 90       	pop	r15
     3d0:	ef 90       	pop	r14
     3d2:	df 90       	pop	r13
     3d4:	cf 90       	pop	r12
     3d6:	bf 90       	pop	r11
     3d8:	af 90       	pop	r10
     3da:	08 95       	ret

000003dc <enc28j60Init>:
        }
}


void enc28j60Init(uint8_t* macaddr)
{
     3dc:	cf 93       	push	r28
     3de:	df 93       	push	r29
     3e0:	ec 01       	movw	r28, r24
	// initialize I/O
	ENC28J60_CONTROL_DDR |= 1<<ENC28J60_CONTROL_CS;
     3e2:	22 9a       	sbi	0x04, 2	; 4
	CSPASSIVE;
     3e4:	2a 9a       	sbi	0x05, 2	; 5
        //	
	DDRB  |= 1<<PB2 |1<<PB3 | 1<<PB5; // mosi, sck, ss output
     3e6:	84 b1       	in	r24, 0x04	; 4
     3e8:	8c 62       	ori	r24, 0x2C	; 44
     3ea:	84 b9       	out	0x04, r24	; 4
	cbi(DDRB,PINB4); // MISO is input
     3ec:	24 98       	cbi	0x04, 4	; 4
        //
	CSPASSIVE;
     3ee:	2a 9a       	sbi	0x05, 2	; 5
        cbi(PORTB,PB3); // MOSI low
     3f0:	2b 98       	cbi	0x05, 3	; 5
        cbi(PORTB,PB5); // SCK low
     3f2:	2d 98       	cbi	0x05, 5	; 5
	//
	// initialize SPI interface
	// master mode and Fosc/2 clock:
        SPCR = (1<<SPE)|(1<<MSTR);
     3f4:	80 e5       	ldi	r24, 0x50	; 80
     3f6:	8c bd       	out	0x2c, r24	; 44
        SPSR |= (1<<SPI2X);
     3f8:	8d b5       	in	r24, 0x2d	; 45
     3fa:	81 60       	ori	r24, 0x01	; 1
     3fc:	8d bd       	out	0x2d, r24	; 45
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     3fe:	2a 98       	cbi	0x05, 2	; 5
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     400:	8f ef       	ldi	r24, 0xFF	; 255
     402:	8e bd       	out	0x2e, r24	; 46
        waitspi();
     404:	0d b4       	in	r0, 0x2d	; 45
     406:	07 fe       	sbrs	r0, 7
     408:	fd cf       	rjmp	.-6      	; 0x404 <enc28j60Init+0x28>
        // write data
        SPDR = data;
     40a:	8f ef       	ldi	r24, 0xFF	; 255
     40c:	8e bd       	out	0x2e, r24	; 46
        waitspi();
     40e:	0d b4       	in	r0, 0x2d	; 45
     410:	07 fe       	sbrs	r0, 7
     412:	fd cf       	rjmp	.-6      	; 0x40e <enc28j60Init+0x32>
        CSPASSIVE;
     414:	2a 9a       	sbi	0x05, 2	; 5
	// master mode and Fosc/2 clock:
        SPCR = (1<<SPE)|(1<<MSTR);
        SPSR |= (1<<SPI2X);
	// perform system reset
	enc28j60WriteOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
	delay_ms(50);
     416:	82 e3       	ldi	r24, 0x32	; 50
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	0e 94 66 07 	call	0xecc	; 0xecc <delay_ms>
	//while(!(enc28j60Read(ESTAT) & ESTAT_CLKRDY));
	// do bank 0 stuff
	// initialize receive buffer
	// 16-bit transfers, must write low byte first
	// set receive buffer start address
	NextPacketPtr = RXSTART_INIT;
     41e:	10 92 46 01 	sts	0x0146, r1
     422:	10 92 45 01 	sts	0x0145, r1
        // Rx start
	enc28j60Write(ERXSTL, RXSTART_INIT&0xFF);
     426:	88 e0       	ldi	r24, 0x08	; 8
     428:	60 e0       	ldi	r22, 0x00	; 0
     42a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
	enc28j60Write(ERXSTH, RXSTART_INIT>>8);
     42e:	89 e0       	ldi	r24, 0x09	; 9
     430:	60 e0       	ldi	r22, 0x00	; 0
     432:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
	// set receive pointer address
	enc28j60Write(ERXRDPTL, RXSTART_INIT&0xFF);
     436:	8c e0       	ldi	r24, 0x0C	; 12
     438:	60 e0       	ldi	r22, 0x00	; 0
     43a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
	enc28j60Write(ERXRDPTH, RXSTART_INIT>>8);
     43e:	8d e0       	ldi	r24, 0x0D	; 13
     440:	60 e0       	ldi	r22, 0x00	; 0
     442:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
	// RX end
	enc28j60Write(ERXNDL, RXSTOP_INIT&0xFF);
     446:	8a e0       	ldi	r24, 0x0A	; 10
     448:	6e ef       	ldi	r22, 0xFE	; 254
     44a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
	enc28j60Write(ERXNDH, RXSTOP_INIT>>8);
     44e:	8b e0       	ldi	r24, 0x0B	; 11
     450:	69 e1       	ldi	r22, 0x19	; 25
     452:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
	// TX start
	enc28j60Write(ETXSTL, TXSTART_INIT&0xFF);
     456:	84 e0       	ldi	r24, 0x04	; 4
     458:	6f ef       	ldi	r22, 0xFF	; 255
     45a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
	enc28j60Write(ETXSTH, TXSTART_INIT>>8);
     45e:	85 e0       	ldi	r24, 0x05	; 5
     460:	69 e1       	ldi	r22, 0x19	; 25
     462:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
	// TX end
	enc28j60Write(ETXNDL, TXSTOP_INIT&0xFF);
     466:	86 e0       	ldi	r24, 0x06	; 6
     468:	6f ef       	ldi	r22, 0xFF	; 255
     46a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
	enc28j60Write(ETXNDH, TXSTOP_INIT>>8);
     46e:	87 e0       	ldi	r24, 0x07	; 7
     470:	6f e1       	ldi	r22, 0x1F	; 31
     472:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
        // Type     ETH.DST
        // ARP      BROADCAST
        // 06 08 -- ff ff ff ff ff ff -> ip checksum for theses bytes=f7f9
        // in binary these poitions are:11 0000 0011 1111
        // This is hex 303F->EPMM0=0x3f,EPMM1=0x30
	enc28j60Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN);
     476:	88 e3       	ldi	r24, 0x38	; 56
     478:	60 eb       	ldi	r22, 0xB0	; 176
     47a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
	enc28j60Write(EPMM0, 0x3f);
     47e:	88 e2       	ldi	r24, 0x28	; 40
     480:	6f e3       	ldi	r22, 0x3F	; 63
     482:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
	enc28j60Write(EPMM1, 0x30);
     486:	89 e2       	ldi	r24, 0x29	; 41
     488:	60 e3       	ldi	r22, 0x30	; 48
     48a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
	enc28j60Write(EPMCSL, 0xf9);
     48e:	80 e3       	ldi	r24, 0x30	; 48
     490:	69 ef       	ldi	r22, 0xF9	; 249
     492:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
	enc28j60Write(EPMCSH, 0xf7);
     496:	81 e3       	ldi	r24, 0x31	; 49
     498:	67 ef       	ldi	r22, 0xF7	; 247
     49a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
        //
        //
	// do bank 2 stuff
	// enable MAC receive
	enc28j60Write(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
     49e:	80 ec       	ldi	r24, 0xC0	; 192
     4a0:	6d e0       	ldi	r22, 0x0D	; 13
     4a2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
	// bring MAC out of reset
	enc28j60Write(MACON2, 0x00);
     4a6:	81 ec       	ldi	r24, 0xC1	; 193
     4a8:	60 e0       	ldi	r22, 0x00	; 0
     4aa:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     4ae:	2a 98       	cbi	0x05, 2	; 5
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     4b0:	82 e8       	ldi	r24, 0x82	; 130
     4b2:	8e bd       	out	0x2e, r24	; 46
        waitspi();
     4b4:	0d b4       	in	r0, 0x2d	; 45
     4b6:	07 fe       	sbrs	r0, 7
     4b8:	fd cf       	rjmp	.-6      	; 0x4b4 <enc28j60Init+0xd8>
        // write data
        SPDR = data;
     4ba:	82 e3       	ldi	r24, 0x32	; 50
     4bc:	8e bd       	out	0x2e, r24	; 46
        waitspi();
     4be:	0d b4       	in	r0, 0x2d	; 45
     4c0:	07 fe       	sbrs	r0, 7
     4c2:	fd cf       	rjmp	.-6      	; 0x4be <enc28j60Init+0xe2>
        CSPASSIVE;
     4c4:	2a 9a       	sbi	0x05, 2	; 5
	// bring MAC out of reset
	enc28j60Write(MACON2, 0x00);
	// enable automatic padding to 60bytes and CRC operations
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, MACON3, MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
	// set inter-frame gap (non-back-to-back)
	enc28j60Write(MAIPGL, 0x12);
     4c6:	86 ec       	ldi	r24, 0xC6	; 198
     4c8:	62 e1       	ldi	r22, 0x12	; 18
     4ca:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
	enc28j60Write(MAIPGH, 0x0C);
     4ce:	87 ec       	ldi	r24, 0xC7	; 199
     4d0:	6c e0       	ldi	r22, 0x0C	; 12
     4d2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
	// set inter-frame gap (back-to-back)
	enc28j60Write(MABBIPG, 0x12);
     4d6:	84 ec       	ldi	r24, 0xC4	; 196
     4d8:	62 e1       	ldi	r22, 0x12	; 18
     4da:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
	// Set the maximum packet size which the controller will accept
        // Do not send packets longer than MAX_FRAMELEN:
	enc28j60Write(MAMXFLL, MAX_FRAMELEN&0xFF);	
     4de:	8a ec       	ldi	r24, 0xCA	; 202
     4e0:	64 ef       	ldi	r22, 0xF4	; 244
     4e2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
	enc28j60Write(MAMXFLH, MAX_FRAMELEN>>8);
     4e6:	8b ec       	ldi	r24, 0xCB	; 203
     4e8:	61 e0       	ldi	r22, 0x01	; 1
     4ea:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
	// do bank 3 stuff
        // write MAC address
        // NOTE: MAC address in ENC28J60 is byte-backward
        enc28j60Write(MAADR5, macaddr[0]);
     4ee:	84 ee       	ldi	r24, 0xE4	; 228
     4f0:	68 81       	ld	r22, Y
     4f2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
        enc28j60Write(MAADR4, macaddr[1]);
     4f6:	85 ee       	ldi	r24, 0xE5	; 229
     4f8:	69 81       	ldd	r22, Y+1	; 0x01
     4fa:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
        enc28j60Write(MAADR3, macaddr[2]);
     4fe:	82 ee       	ldi	r24, 0xE2	; 226
     500:	6a 81       	ldd	r22, Y+2	; 0x02
     502:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
        enc28j60Write(MAADR2, macaddr[3]);
     506:	83 ee       	ldi	r24, 0xE3	; 227
     508:	6b 81       	ldd	r22, Y+3	; 0x03
     50a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
        enc28j60Write(MAADR1, macaddr[4]);
     50e:	80 ee       	ldi	r24, 0xE0	; 224
     510:	6c 81       	ldd	r22, Y+4	; 0x04
     512:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
        enc28j60Write(MAADR0, macaddr[5]);
     516:	81 ee       	ldi	r24, 0xE1	; 225
     518:	6d 81       	ldd	r22, Y+5	; 0x05
     51a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enc28j60Write>
	// no loopback of transmitted frames
	enc28j60PhyWrite(PHCON2, PHCON2_HDLDIS);
     51e:	80 e1       	ldi	r24, 0x10	; 16
     520:	60 e0       	ldi	r22, 0x00	; 0
     522:	71 e0       	ldi	r23, 0x01	; 1
     524:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <enc28j60PhyWrite>
	// switch to bank 0
	enc28j60SetBank(ECON1);
     528:	8f e1       	ldi	r24, 0x1F	; 31
     52a:	0e 94 a6 00 	call	0x14c	; 0x14c <enc28j60SetBank>
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     52e:	2a 98       	cbi	0x05, 2	; 5
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     530:	8b e9       	ldi	r24, 0x9B	; 155
     532:	8e bd       	out	0x2e, r24	; 46
        waitspi();
     534:	0d b4       	in	r0, 0x2d	; 45
     536:	07 fe       	sbrs	r0, 7
     538:	fd cf       	rjmp	.-6      	; 0x534 <__stack+0x35>
        // write data
        SPDR = data;
     53a:	80 ec       	ldi	r24, 0xC0	; 192
     53c:	8e bd       	out	0x2e, r24	; 46
        waitspi();
     53e:	0d b4       	in	r0, 0x2d	; 45
     540:	07 fe       	sbrs	r0, 7
     542:	fd cf       	rjmp	.-6      	; 0x53e <__stack+0x3f>
        CSPASSIVE;
     544:	2a 9a       	sbi	0x05, 2	; 5
        return(SPDR);
}

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     546:	2a 98       	cbi	0x05, 2	; 5
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     548:	8f e9       	ldi	r24, 0x9F	; 159
     54a:	8e bd       	out	0x2e, r24	; 46
        waitspi();
     54c:	0d b4       	in	r0, 0x2d	; 45
     54e:	07 fe       	sbrs	r0, 7
     550:	fd cf       	rjmp	.-6      	; 0x54c <__stack+0x4d>
        // write data
        SPDR = data;
     552:	84 e0       	ldi	r24, 0x04	; 4
     554:	8e bd       	out	0x2e, r24	; 46
        waitspi();
     556:	0d b4       	in	r0, 0x2d	; 45
     558:	07 fe       	sbrs	r0, 7
     55a:	fd cf       	rjmp	.-6      	; 0x556 <__stack+0x57>
        CSPASSIVE;
     55c:	2a 9a       	sbi	0x05, 2	; 5
	enc28j60SetBank(ECON1);
	// enable interrutps
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
	// enable packet reception
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
}
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	08 95       	ret

00000564 <checksum>:
//
// For more information on how this algorithm works see:
// http://www.netfor2.com/checksum.html
// http://www.msc.uky.edu/ken/cs471/notes/chap3.htm
// The RFC has also a C code example: http://www.faqs.org/rfcs/rfc1071.html
uint16_t checksum(uint8_t *buf, uint16_t len,uint8_t type){
     564:	ef 92       	push	r14
     566:	ff 92       	push	r15
     568:	0f 93       	push	r16
     56a:	1f 93       	push	r17
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	7c 01       	movw	r14, r24
        // type 0=ip 
        //      1=udp
        //      2=tcp
        uint32_t sum = 0;

        if(type==1){
     572:	41 30       	cpi	r20, 0x01	; 1
     574:	61 f4       	brne	.+24     	; 0x58e <checksum+0x2a>
                sum+=IP_PROTO_UDP_V; // protocol udp
                // the length here is the length of udp (data+header len)
                // =length - IP addr length
                sum+=len-8; // = real udp len
     576:	68 50       	subi	r22, 0x08	; 8
     578:	70 40       	sbci	r23, 0x00	; 0
     57a:	9b 01       	movw	r18, r22
     57c:	40 e0       	ldi	r20, 0x00	; 0
     57e:	50 e0       	ldi	r21, 0x00	; 0
     580:	68 5f       	subi	r22, 0xF8	; 248
     582:	7f 4f       	sbci	r23, 0xFF	; 255
     584:	2f 5e       	subi	r18, 0xEF	; 239
     586:	3f 4f       	sbci	r19, 0xFF	; 255
     588:	4f 4f       	sbci	r20, 0xFF	; 255
     58a:	5f 4f       	sbci	r21, 0xFF	; 255
     58c:	12 c0       	rjmp	.+36     	; 0x5b2 <checksum+0x4e>
        }
        if(type==2){
     58e:	42 30       	cpi	r20, 0x02	; 2
     590:	29 f0       	breq	.+10     	; 0x59c <checksum+0x38>
     592:	20 e0       	ldi	r18, 0x00	; 0
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	40 e0       	ldi	r20, 0x00	; 0
     598:	50 e0       	ldi	r21, 0x00	; 0
     59a:	0b c0       	rjmp	.+22     	; 0x5b2 <checksum+0x4e>
                sum+=IP_PROTO_TCP_V; 
                // the length here is the length of tcp (data+header len)
                // =length - IP addr length
                sum+=len-8; // = real tcp len
     59c:	68 50       	subi	r22, 0x08	; 8
     59e:	70 40       	sbci	r23, 0x00	; 0
     5a0:	9b 01       	movw	r18, r22
     5a2:	40 e0       	ldi	r20, 0x00	; 0
     5a4:	50 e0       	ldi	r21, 0x00	; 0
     5a6:	68 5f       	subi	r22, 0xF8	; 248
     5a8:	7f 4f       	sbci	r23, 0xFF	; 255
     5aa:	2a 5f       	subi	r18, 0xFA	; 250
     5ac:	3f 4f       	sbci	r19, 0xFF	; 255
     5ae:	4f 4f       	sbci	r20, 0xFF	; 255
     5b0:	5f 4f       	sbci	r21, 0xFF	; 255
     5b2:	e7 01       	movw	r28, r14
     5b4:	8b 01       	movw	r16, r22
     5b6:	0f c0       	rjmp	.+30     	; 0x5d6 <checksum+0x72>
        }
        // build the sum of 16bit words
        while(len >1){
                sum += 0xFFFF & (*buf<<8|*(buf+1));
     5b8:	f8 81       	ld	r31, Y
     5ba:	e0 e0       	ldi	r30, 0x00	; 0
     5bc:	89 81       	ldd	r24, Y+1	; 0x01
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	8e 2b       	or	r24, r30
     5c2:	9f 2b       	or	r25, r31
     5c4:	a0 e0       	ldi	r26, 0x00	; 0
     5c6:	b0 e0       	ldi	r27, 0x00	; 0
     5c8:	28 0f       	add	r18, r24
     5ca:	39 1f       	adc	r19, r25
     5cc:	4a 1f       	adc	r20, r26
     5ce:	5b 1f       	adc	r21, r27
                buf+=2;
     5d0:	22 96       	adiw	r28, 0x02	; 2
                len-=2;
     5d2:	02 50       	subi	r16, 0x02	; 2
     5d4:	10 40       	sbci	r17, 0x00	; 0
                // the length here is the length of tcp (data+header len)
                // =length - IP addr length
                sum+=len-8; // = real tcp len
        }
        // build the sum of 16bit words
        while(len >1){
     5d6:	02 30       	cpi	r16, 0x02	; 2
     5d8:	11 05       	cpc	r17, r1
     5da:	70 f7       	brcc	.-36     	; 0x5b8 <checksum+0x54>
     5dc:	fb 01       	movw	r30, r22
     5de:	ee 7f       	andi	r30, 0xFE	; 254
     5e0:	ee 0d       	add	r30, r14
     5e2:	ff 1d       	adc	r31, r15
                sum += 0xFFFF & (*buf<<8|*(buf+1));
                buf+=2;
                len-=2;
        }
        // if there is a byte left then add it (padded with zero)
        if (len){
     5e4:	60 ff       	sbrs	r22, 0
     5e6:	0d c0       	rjmp	.+26     	; 0x602 <checksum+0x9e>
                sum += (0xFF & *buf)<<8;
     5e8:	90 81       	ld	r25, Z
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	aa 27       	eor	r26, r26
     5ee:	97 fd       	sbrc	r25, 7
     5f0:	a0 95       	com	r26
     5f2:	ba 2f       	mov	r27, r26
     5f4:	02 c0       	rjmp	.+4      	; 0x5fa <checksum+0x96>
        }
        // now calculate the sum over the bytes in the sum
        // until the result is only 16bit long
        while (sum>>16){
                sum = (sum & 0xFFFF)+(sum >> 16);
     5f6:	40 70       	andi	r20, 0x00	; 0
     5f8:	50 70       	andi	r21, 0x00	; 0
     5fa:	28 0f       	add	r18, r24
     5fc:	39 1f       	adc	r19, r25
     5fe:	4a 1f       	adc	r20, r26
     600:	5b 1f       	adc	r21, r27
        if (len){
                sum += (0xFF & *buf)<<8;
        }
        // now calculate the sum over the bytes in the sum
        // until the result is only 16bit long
        while (sum>>16){
     602:	ca 01       	movw	r24, r20
     604:	aa 27       	eor	r26, r26
     606:	bb 27       	eor	r27, r27
     608:	00 97       	sbiw	r24, 0x00	; 0
     60a:	a1 05       	cpc	r26, r1
     60c:	b1 05       	cpc	r27, r1
     60e:	99 f7       	brne	.-26     	; 0x5f6 <checksum+0x92>
     610:	20 95       	com	r18
     612:	30 95       	com	r19
                sum = (sum & 0xFFFF)+(sum >> 16);
        }
        // build 1's complement:
        return( (uint16_t) sum ^ 0xFFFF);
}
     614:	c9 01       	movw	r24, r18
     616:	df 91       	pop	r29
     618:	cf 91       	pop	r28
     61a:	1f 91       	pop	r17
     61c:	0f 91       	pop	r16
     61e:	ff 90       	pop	r15
     620:	ef 90       	pop	r14
     622:	08 95       	ret

00000624 <init_ip_arp_udp>:

// you must call this function once before you use any of the other functions:
void init_ip_arp_udp(uint8_t *mymac,uint8_t *myip){
     624:	ac 01       	movw	r20, r24
     626:	20 e0       	ldi	r18, 0x00	; 0
     628:	30 e0       	ldi	r19, 0x00	; 0
        uint8_t i=0;
        while(i<4){
                ipaddr[i]=myip[i];
     62a:	f9 01       	movw	r30, r18
     62c:	e3 5b       	subi	r30, 0xB3	; 179
     62e:	fe 4f       	sbci	r31, 0xFE	; 254
     630:	db 01       	movw	r26, r22
     632:	a2 0f       	add	r26, r18
     634:	b3 1f       	adc	r27, r19
     636:	8c 91       	ld	r24, X
     638:	80 83       	st	Z, r24
     63a:	2f 5f       	subi	r18, 0xFF	; 255
     63c:	3f 4f       	sbci	r19, 0xFF	; 255
}

// you must call this function once before you use any of the other functions:
void init_ip_arp_udp(uint8_t *mymac,uint8_t *myip){
        uint8_t i=0;
        while(i<4){
     63e:	24 30       	cpi	r18, 0x04	; 4
     640:	31 05       	cpc	r19, r1
     642:	99 f7       	brne	.-26     	; 0x62a <init_ip_arp_udp+0x6>
     644:	20 e0       	ldi	r18, 0x00	; 0
     646:	30 e0       	ldi	r19, 0x00	; 0
                ipaddr[i]=myip[i];
                i++;
        }
        i=0;
        while(i<6){
                macaddr[i]=mymac[i];
     648:	f9 01       	movw	r30, r18
     64a:	e9 5b       	subi	r30, 0xB9	; 185
     64c:	fe 4f       	sbci	r31, 0xFE	; 254
     64e:	da 01       	movw	r26, r20
     650:	a2 0f       	add	r26, r18
     652:	b3 1f       	adc	r27, r19
     654:	8c 91       	ld	r24, X
     656:	80 83       	st	Z, r24
     658:	2f 5f       	subi	r18, 0xFF	; 255
     65a:	3f 4f       	sbci	r19, 0xFF	; 255
        while(i<4){
                ipaddr[i]=myip[i];
                i++;
        }
        i=0;
        while(i<6){
     65c:	26 30       	cpi	r18, 0x06	; 6
     65e:	31 05       	cpc	r19, r1
     660:	99 f7       	brne	.-26     	; 0x648 <init_ip_arp_udp+0x24>
                macaddr[i]=mymac[i];
                i++;
        }
}
     662:	08 95       	ret

00000664 <eth_type_is_arp_and_my_ip>:

uint8_t eth_type_is_arp_and_my_ip(uint8_t *buf,uint8_t len){
     664:	fc 01       	movw	r30, r24
        uint8_t i=0;
        //
        if (len<41){
     666:	69 32       	cpi	r22, 0x29	; 41
     668:	b0 f0       	brcs	.+44     	; 0x696 <eth_type_is_arp_and_my_ip+0x32>
                return(0);
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
     66a:	84 85       	ldd	r24, Z+12	; 0x0c
     66c:	88 30       	cpi	r24, 0x08	; 8
     66e:	99 f4       	brne	.+38     	; 0x696 <eth_type_is_arp_and_my_ip+0x32>
     670:	85 85       	ldd	r24, Z+13	; 0x0d
     672:	86 30       	cpi	r24, 0x06	; 6
     674:	81 f4       	brne	.+32     	; 0x696 <eth_type_is_arp_and_my_ip+0x32>
     676:	df 01       	movw	r26, r30
     678:	96 96       	adiw	r26, 0x26	; 38
     67a:	ed e4       	ldi	r30, 0x4D	; 77
     67c:	f1 e0       	ldi	r31, 0x01	; 1
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
                return(0);
        }
        while(i<4){
                if(buf[ETH_ARP_DST_IP_P+i] != ipaddr[i]){
     67e:	9c 91       	ld	r25, X
     680:	80 81       	ld	r24, Z
     682:	98 17       	cp	r25, r24
     684:	41 f4       	brne	.+16     	; 0x696 <eth_type_is_arp_and_my_ip+0x32>
     686:	11 96       	adiw	r26, 0x01	; 1
     688:	31 96       	adiw	r30, 0x01	; 1
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
                return(0);
        }
        while(i<4){
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	e1 35       	cpi	r30, 0x51	; 81
     68e:	f8 07       	cpc	r31, r24
     690:	b1 f7       	brne	.-20     	; 0x67e <eth_type_is_arp_and_my_ip+0x1a>
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	08 95       	ret
     696:	80 e0       	ldi	r24, 0x00	; 0
                        return(0);
                }
                i++;
        }
        return(1);
}
     698:	08 95       	ret

0000069a <eth_type_is_ip_and_my_ip>:

uint8_t eth_type_is_ip_and_my_ip(uint8_t *buf,uint8_t len){
     69a:	fc 01       	movw	r30, r24
        uint8_t i=0;
        //eth+ip+udp header is 42
        if (len<42){
     69c:	6a 32       	cpi	r22, 0x2A	; 42
     69e:	b8 f0       	brcs	.+46     	; 0x6ce <eth_type_is_ip_and_my_ip+0x34>
                return(0);
        }
        if(buf[ETH_TYPE_H_P]!=ETHTYPE_IP_H_V || 
     6a0:	84 85       	ldd	r24, Z+12	; 0x0c
     6a2:	88 30       	cpi	r24, 0x08	; 8
     6a4:	a1 f4       	brne	.+40     	; 0x6ce <eth_type_is_ip_and_my_ip+0x34>
     6a6:	85 85       	ldd	r24, Z+13	; 0x0d
     6a8:	88 23       	and	r24, r24
     6aa:	89 f4       	brne	.+34     	; 0x6ce <eth_type_is_ip_and_my_ip+0x34>
     6ac:	df 01       	movw	r26, r30
     6ae:	ed e4       	ldi	r30, 0x4D	; 77
     6b0:	f1 e0       	ldi	r31, 0x01	; 1
           buf[ETH_TYPE_L_P]!=ETHTYPE_IP_L_V){
                return(0);
        }
        while(i<4){
                if(buf[IP_DST_P+i]!=ipaddr[i]){
     6b2:	5e 96       	adiw	r26, 0x1e	; 30
     6b4:	9c 91       	ld	r25, X
     6b6:	5e 97       	sbiw	r26, 0x1e	; 30
     6b8:	80 81       	ld	r24, Z
     6ba:	98 17       	cp	r25, r24
     6bc:	41 f4       	brne	.+16     	; 0x6ce <eth_type_is_ip_and_my_ip+0x34>
     6be:	11 96       	adiw	r26, 0x01	; 1
     6c0:	31 96       	adiw	r30, 0x01	; 1
        }
        if(buf[ETH_TYPE_H_P]!=ETHTYPE_IP_H_V || 
           buf[ETH_TYPE_L_P]!=ETHTYPE_IP_L_V){
                return(0);
        }
        while(i<4){
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	e1 35       	cpi	r30, 0x51	; 81
     6c6:	f8 07       	cpc	r31, r24
     6c8:	a1 f7       	brne	.-24     	; 0x6b2 <eth_type_is_ip_and_my_ip+0x18>
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	08 95       	ret
     6ce:	80 e0       	ldi	r24, 0x00	; 0
                        return(0);
                }
                i++;
        }
        return(1);
}
     6d0:	08 95       	ret

000006d2 <make_eth>:
// make a return eth header from a received eth packet
void make_eth(uint8_t *buf)
{
     6d2:	fc 01       	movw	r30, r24
     6d4:	a7 e4       	ldi	r26, 0x47	; 71
     6d6:	b1 e0       	ldi	r27, 0x01	; 1
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     6d8:	86 81       	ldd	r24, Z+6	; 0x06
     6da:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     6dc:	8d 91       	ld	r24, X+
     6de:	86 83       	std	Z+6, r24	; 0x06
     6e0:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	ad 34       	cpi	r26, 0x4D	; 77
     6e6:	b8 07       	cpc	r27, r24
     6e8:	b9 f7       	brne	.-18     	; 0x6d8 <make_eth+0x6>
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
                buf[ETH_SRC_MAC +i]=macaddr[i];
                i++;
        }
}
     6ea:	08 95       	ret

000006ec <make_ip>:

// make a return ip header from a received ip packet
void make_ip(uint8_t *buf)
{
     6ec:	cf 93       	push	r28
     6ee:	df 93       	push	r29
     6f0:	ec 01       	movw	r28, r24
     6f2:	fc 01       	movw	r30, r24
     6f4:	ad e4       	ldi	r26, 0x4D	; 77
     6f6:	b1 e0       	ldi	r27, 0x01	; 1
        uint8_t i=0;
        uint16_t ck;
        while(i<4){
                buf[IP_DST_P+i]=buf[IP_SRC_P+i];
     6f8:	82 8d       	ldd	r24, Z+26	; 0x1a
     6fa:	86 8f       	std	Z+30, r24	; 0x1e
                buf[IP_SRC_P+i]=ipaddr[i];
     6fc:	8d 91       	ld	r24, X+
     6fe:	82 8f       	std	Z+26, r24	; 0x1a
     700:	31 96       	adiw	r30, 0x01	; 1
// make a return ip header from a received ip packet
void make_ip(uint8_t *buf)
{
        uint8_t i=0;
        uint16_t ck;
        while(i<4){
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	a1 35       	cpi	r26, 0x51	; 81
     706:	b8 07       	cpc	r27, r24
     708:	b9 f7       	brne	.-18     	; 0x6f8 <make_ip+0xc>
                buf[IP_DST_P+i]=buf[IP_SRC_P+i];
                buf[IP_SRC_P+i]=ipaddr[i];
                i++;
        }
        // clear the 2 byte checksum
        buf[IP_CHECKSUM_P]=0;
     70a:	18 8e       	std	Y+24, r1	; 0x18
        buf[IP_CHECKSUM_P+1]=0;
     70c:	19 8e       	std	Y+25, r1	; 0x19
        buf[IP_FLAGS_P]=0x40; // don't fragment
     70e:	80 e4       	ldi	r24, 0x40	; 64
     710:	8c 8b       	std	Y+20, r24	; 0x14
        buf[IP_FLAGS_P+1]=0;  // fragement offset
     712:	1d 8a       	std	Y+21, r1	; 0x15
        buf[IP_TTL_P]=64; // ttl
     714:	8e 8b       	std	Y+22, r24	; 0x16
        // calculate the checksum:
        ck=checksum(&buf[IP_P], IP_HEADER_LEN,0);
     716:	ce 01       	movw	r24, r28
     718:	0e 96       	adiw	r24, 0x0e	; 14
     71a:	64 e1       	ldi	r22, 0x14	; 20
     71c:	70 e0       	ldi	r23, 0x00	; 0
     71e:	40 e0       	ldi	r20, 0x00	; 0
     720:	0e 94 b2 02 	call	0x564	; 0x564 <checksum>
        buf[IP_CHECKSUM_P]=ck>>8;
     724:	98 8f       	std	Y+24, r25	; 0x18
        buf[IP_CHECKSUM_P+1]=ck& 0xff;
     726:	89 8f       	std	Y+25, r24	; 0x19
}
     728:	df 91       	pop	r29
     72a:	cf 91       	pop	r28
     72c:	08 95       	ret

0000072e <send_udp>:
        uint8_t tester[200] = {0x00, 0x13, 0xd4, 0x9e, 0x9f, 0xa0, 0x54, 0x55, 0x58, 0x10, 0x00, 0x24, 0x08, 0x00, 0x45, 0x00, 0x00, 0x1f, 0x12, 0x34, 0x40, 0x00, 0xff, 0x11, 0xe6, 0x3f, 0xc0, 0xa8, 0x01, 0x04, 0xc0, 0xa8, 0x01, 0x05, 0x04, 0xb0, 0x04, 0xb0, 0x00, 0x0b, 0x18, 0x32, 'H', 'e', 'j'};
        enc28j60PacketSend(46,tester);
}

void send_udp(uint8_t *buf,char *data,uint8_t datalen,uint16_t port, uint8_t *dstip, char *dstmac)
{
     72e:	af 92       	push	r10
     730:	bf 92       	push	r11
     732:	cf 92       	push	r12
     734:	df 92       	push	r13
     736:	ef 92       	push	r14
     738:	ff 92       	push	r15
     73a:	0f 93       	push	r16
     73c:	1f 93       	push	r17
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
     742:	ec 01       	movw	r28, r24
     744:	6b 01       	movw	r12, r22
     746:	59 01       	movw	r10, r18
     748:	d8 01       	movw	r26, r16
     74a:	f7 01       	movw	r30, r14
        buf[ETH_DST_MAC+2]= 0x37;
        buf[ETH_DST_MAC+3]= 0xd8;
        buf[ETH_DST_MAC+4]= 0x28;
        buf[ETH_DST_MAC+5]= 0x08;*/

        buf[ETH_DST_MAC]= dstmac[0];
     74c:	80 81       	ld	r24, Z
     74e:	88 83       	st	Y, r24
        buf[ETH_DST_MAC+1]= dstmac[1];
     750:	81 81       	ldd	r24, Z+1	; 0x01
     752:	89 83       	std	Y+1, r24	; 0x01
        buf[ETH_DST_MAC+2]= dstmac[2];
     754:	82 81       	ldd	r24, Z+2	; 0x02
     756:	8a 83       	std	Y+2, r24	; 0x02
        buf[ETH_DST_MAC+3]= dstmac[3];
     758:	83 81       	ldd	r24, Z+3	; 0x03
     75a:	8b 83       	std	Y+3, r24	; 0x03
        buf[ETH_DST_MAC+4]= dstmac[4];
     75c:	84 81       	ldd	r24, Z+4	; 0x04
     75e:	8c 83       	std	Y+4, r24	; 0x04
        buf[ETH_DST_MAC+5]= dstmac[5];
     760:	85 81       	ldd	r24, Z+5	; 0x05
     762:	8d 83       	std	Y+5, r24	; 0x05



        buf[ETH_SRC_MAC]='N';
     764:	8e e4       	ldi	r24, 0x4E	; 78
     766:	8e 83       	std	Y+6, r24	; 0x06
        buf[ETH_SRC_MAC+1]='o';
     768:	8f e6       	ldi	r24, 0x6F	; 111
     76a:	8f 83       	std	Y+7, r24	; 0x07
        buf[ETH_SRC_MAC+2]='d';
     76c:	84 e6       	ldi	r24, 0x64	; 100
     76e:	88 87       	std	Y+8, r24	; 0x08
        buf[ETH_SRC_MAC+3]='e';
     770:	85 e6       	ldi	r24, 0x65	; 101
     772:	89 87       	std	Y+9, r24	; 0x09
        buf[ETH_SRC_MAC+4]='0';
     774:	80 e3       	ldi	r24, 0x30	; 48
     776:	8a 87       	std	Y+10, r24	; 0x0a
        buf[ETH_SRC_MAC+5]='1';
     778:	81 e3       	ldi	r24, 0x31	; 49
     77a:	8b 87       	std	Y+11, r24	; 0x0b
     77c:	04 2f       	mov	r16, r20
     77e:	4d 3d       	cpi	r20, 0xDD	; 221
     780:	08 f0       	brcs	.+2      	; 0x784 <send_udp+0x56>
     782:	0c ed       	ldi	r16, 0xDC	; 220
        if (datalen>220){

                datalen=220;
        }

        buf[ETH_TYPE_H_P]=0x08;
     784:	88 e0       	ldi	r24, 0x08	; 8
     786:	8c 87       	std	Y+12, r24	; 0x0c
        buf[ETH_TYPE_L_P]=0x00;
     788:	1d 86       	std	Y+13, r1	; 0x0d
        buf[ETH_TYPE_L_P+1]=0x45;
     78a:	85 e4       	ldi	r24, 0x45	; 69
     78c:	8e 87       	std	Y+14, r24	; 0x0e
        buf[ETH_TYPE_L_P+2]=0x00;
     78e:	1f 86       	std	Y+15, r1	; 0x0f

        
        // total length field in the IP header must be set:
        buf[IP_TOTLEN_H_P]=0;
     790:	18 8a       	std	Y+16, r1	; 0x10
        buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
     792:	04 5e       	subi	r16, 0xE4	; 228
     794:	09 8b       	std	Y+17, r16	; 0x11

        buf[IP_DST_P] = dstip[0];
     796:	8c 91       	ld	r24, X
     798:	8e 8f       	std	Y+30, r24	; 0x1e
        buf[IP_DST_P+1] = dstip[1];
     79a:	11 96       	adiw	r26, 0x01	; 1
     79c:	8c 91       	ld	r24, X
     79e:	11 97       	sbiw	r26, 0x01	; 1
     7a0:	8f 8f       	std	Y+31, r24	; 0x1f
        buf[IP_DST_P+2] = dstip[2];
     7a2:	12 96       	adiw	r26, 0x02	; 2
     7a4:	8c 91       	ld	r24, X
     7a6:	12 97       	sbiw	r26, 0x02	; 2
     7a8:	88 a3       	std	Y+32, r24	; 0x20
        buf[IP_DST_P+3] = dstip[3];
     7aa:	13 96       	adiw	r26, 0x03	; 3
     7ac:	8c 91       	ld	r24, X
     7ae:	89 a3       	std	Y+33, r24	; 0x21
        
		buf[IP_SRC_P]=192;
     7b0:	9a e1       	ldi	r25, 0x1A	; 26
     7b2:	e9 2e       	mov	r14, r25
     7b4:	f1 2c       	mov	r15, r1
     7b6:	ec 0e       	add	r14, r28
     7b8:	fd 1e       	adc	r15, r29
     7ba:	80 ec       	ldi	r24, 0xC0	; 192
     7bc:	8a 8f       	std	Y+26, r24	; 0x1a
        buf[IP_SRC_P+1]=168;
     7be:	88 ea       	ldi	r24, 0xA8	; 168
     7c0:	8b 8f       	std	Y+27, r24	; 0x1b
        buf[IP_SRC_P+2]=1;
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	8c 8f       	std	Y+28, r24	; 0x1c
        buf[IP_SRC_P+3]=1;
     7c6:	8d 8f       	std	Y+29, r24	; 0x1d
 
        // clear the 2 byte checksum
        buf[IP_CHECKSUM_P]=0;
     7c8:	18 8e       	std	Y+24, r1	; 0x18
        buf[IP_CHECKSUM_P+1]=0;
     7ca:	19 8e       	std	Y+25, r1	; 0x19
        buf[IP_FLAGS_P]=0x40; // don't fragment
     7cc:	80 e4       	ldi	r24, 0x40	; 64
     7ce:	8c 8b       	std	Y+20, r24	; 0x14
        buf[IP_FLAGS_P+1]=0;  // fragement offset
     7d0:	1d 8a       	std	Y+21, r1	; 0x15
        buf[IP_TTL_P]=64; // ttl
     7d2:	8e 8b       	std	Y+22, r24	; 0x16
        buf[IP_TTL_P+1]=0x11; // ttl
     7d4:	81 e1       	ldi	r24, 0x11	; 17
     7d6:	8f 8b       	std	Y+23, r24	; 0x17


        // calculate the checksum:
        ck=checksum(&buf[IP_P], IP_HEADER_LEN,0);
     7d8:	ce 01       	movw	r24, r28
     7da:	0e 96       	adiw	r24, 0x0e	; 14
     7dc:	64 e1       	ldi	r22, 0x14	; 20
     7de:	70 e0       	ldi	r23, 0x00	; 0
     7e0:	40 e0       	ldi	r20, 0x00	; 0
     7e2:	0e 94 b2 02 	call	0x564	; 0x564 <checksum>
        buf[IP_CHECKSUM_P]=ck>>8;
     7e6:	98 8f       	std	Y+24, r25	; 0x18
        buf[IP_CHECKSUM_P+1]=ck& 0xff;
     7e8:	89 8f       	std	Y+25, r24	; 0x19

        // send to port:
        //buf[UDP_DST_PORT_H_P]=port>>8;
        //buf[UDP_DST_PORT_L_P]=port & 0xff;
        // sent to port of sender and use "port" as own source:
        buf[UDP_DST_PORT_H_P]=buf[UDP_SRC_PORT_H_P];
     7ea:	8a a1       	ldd	r24, Y+34	; 0x22
     7ec:	8c a3       	std	Y+36, r24	; 0x24
        buf[UDP_DST_PORT_L_P]= buf[UDP_SRC_PORT_L_P];
     7ee:	8b a1       	ldd	r24, Y+35	; 0x23
     7f0:	8d a3       	std	Y+37, r24	; 0x25
        buf[UDP_SRC_PORT_H_P]=port>>8;
     7f2:	ba a2       	std	Y+34, r11	; 0x22
        buf[UDP_SRC_PORT_L_P]=port & 0xff;
     7f4:	ab a2       	std	Y+35, r10	; 0x23
        // source port does not matter and is what the sender used.
        // calculte the udp length:
        buf[UDP_LEN_H_P]=0;
     7f6:	1e a2       	std	Y+38, r1	; 0x26
        buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
     7f8:	04 51       	subi	r16, 0x14	; 20
     7fa:	0f a3       	std	Y+39, r16	; 0x27
     7fc:	08 50       	subi	r16, 0x08	; 8
        // zero the checksum
        buf[UDP_CHECKSUM_H_P]=0;
     7fe:	18 a6       	std	Y+40, r1	; 0x28
        buf[UDP_CHECKSUM_L_P]=0;
     800:	19 a6       	std	Y+41, r1	; 0x29
     802:	de 01       	movw	r26, r28
     804:	9a 96       	adiw	r26, 0x2a	; 42
     806:	20 e0       	ldi	r18, 0x00	; 0
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	07 c0       	rjmp	.+14     	; 0x81a <send_udp+0xec>
        // copy the data:
        while(i<datalen){
                buf[UDP_DATA_P+i]=data[i];
     80c:	f6 01       	movw	r30, r12
     80e:	e2 0f       	add	r30, r18
     810:	f3 1f       	adc	r31, r19
     812:	80 81       	ld	r24, Z
     814:	8d 93       	st	X+, r24
     816:	2f 5f       	subi	r18, 0xFF	; 255
     818:	3f 4f       	sbci	r19, 0xFF	; 255
        buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
        // zero the checksum
        buf[UDP_CHECKSUM_H_P]=0;
        buf[UDP_CHECKSUM_L_P]=0;
        // copy the data:
        while(i<datalen){
     81a:	20 17       	cp	r18, r16
     81c:	b8 f3       	brcs	.-18     	; 0x80c <send_udp+0xde>
                buf[UDP_DATA_P+i]=data[i];
                i++;
        }
        ck=checksum(&buf[IP_SRC_P], 16 + datalen,1);
     81e:	10 e0       	ldi	r17, 0x00	; 0
     820:	00 5f       	subi	r16, 0xF0	; 240
     822:	1f 4f       	sbci	r17, 0xFF	; 255
     824:	c7 01       	movw	r24, r14
     826:	b8 01       	movw	r22, r16
     828:	41 e0       	ldi	r20, 0x01	; 1
     82a:	0e 94 b2 02 	call	0x564	; 0x564 <checksum>
        buf[UDP_CHECKSUM_H_P]=ck>>8;
     82e:	98 a7       	std	Y+40, r25	; 0x28
        buf[UDP_CHECKSUM_L_P]=ck& 0xff;
     830:	89 a7       	std	Y+41, r24	; 0x29
        enc28j60PacketSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen,buf);
     832:	c8 01       	movw	r24, r16
     834:	4a 96       	adiw	r24, 0x1a	; 26
     836:	be 01       	movw	r22, r28
     838:	0e 94 12 01 	call	0x224	; 0x224 <enc28j60PacketSend>
}
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
     840:	1f 91       	pop	r17
     842:	0f 91       	pop	r16
     844:	ff 90       	pop	r15
     846:	ef 90       	pop	r14
     848:	df 90       	pop	r13
     84a:	cf 90       	pop	r12
     84c:	bf 90       	pop	r11
     84e:	af 90       	pop	r10
     850:	08 95       	ret

00000852 <make_udp_reply_from_request>:
        enc28j60PacketSend(len,buf);
}

// you can send a max of 220 bytes of data
void make_udp_reply_from_request(uint8_t *buf,char *data,uint8_t datalen,uint16_t port)
{
     852:	df 92       	push	r13
     854:	ef 92       	push	r14
     856:	ff 92       	push	r15
     858:	0f 93       	push	r16
     85a:	1f 93       	push	r17
     85c:	cf 93       	push	r28
     85e:	df 93       	push	r29
     860:	ec 01       	movw	r28, r24
     862:	7b 01       	movw	r14, r22
     864:	d2 2e       	mov	r13, r18
     866:	13 2f       	mov	r17, r19
     868:	fc 01       	movw	r30, r24
     86a:	a7 e4       	ldi	r26, 0x47	; 71
     86c:	b1 e0       	ldi	r27, 0x01	; 1
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     86e:	86 81       	ldd	r24, Z+6	; 0x06
     870:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     872:	8d 91       	ld	r24, X+
     874:	86 83       	std	Z+6, r24	; 0x06
     876:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	ad 34       	cpi	r26, 0x4D	; 77
     87c:	b8 07       	cpc	r27, r24
     87e:	b9 f7       	brne	.-18     	; 0x86e <make_udp_reply_from_request+0x1c>
     880:	04 2f       	mov	r16, r20
     882:	4d 3d       	cpi	r20, 0xDD	; 221
     884:	08 f0       	brcs	.+2      	; 0x888 <make_udp_reply_from_request+0x36>
     886:	0c ed       	ldi	r16, 0xDC	; 220
        make_eth(buf);
        if (datalen>220){
                datalen=220;
        }
        // total length field in the IP header must be set:
        buf[IP_TOTLEN_H_P]=0;
     888:	18 8a       	std	Y+16, r1	; 0x10
        buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
     88a:	04 5e       	subi	r16, 0xE4	; 228
     88c:	09 8b       	std	Y+17, r16	; 0x11
        make_ip(buf);
     88e:	ce 01       	movw	r24, r28
     890:	0e 94 76 03 	call	0x6ec	; 0x6ec <make_ip>
        // send to port:
        //buf[UDP_DST_PORT_H_P]=port>>8;
        //buf[UDP_DST_PORT_L_P]=port & 0xff;
        // sent to port of sender and use "port" as own source:
        buf[UDP_DST_PORT_H_P]=buf[UDP_SRC_PORT_H_P];
     894:	8a a1       	ldd	r24, Y+34	; 0x22
     896:	8c a3       	std	Y+36, r24	; 0x24
        buf[UDP_DST_PORT_L_P]= buf[UDP_SRC_PORT_L_P];
     898:	8b a1       	ldd	r24, Y+35	; 0x23
     89a:	8d a3       	std	Y+37, r24	; 0x25
        buf[UDP_SRC_PORT_H_P]=port>>8;
     89c:	1a a3       	std	Y+34, r17	; 0x22
        buf[UDP_SRC_PORT_L_P]=port & 0xff;
     89e:	db a2       	std	Y+35, r13	; 0x23
        // source port does not matter and is what the sender used.
        // calculte the udp length:
        buf[UDP_LEN_H_P]=0;
     8a0:	1e a2       	std	Y+38, r1	; 0x26
        buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
     8a2:	04 51       	subi	r16, 0x14	; 20
     8a4:	0f a3       	std	Y+39, r16	; 0x27
     8a6:	08 50       	subi	r16, 0x08	; 8
        // zero the checksum
        buf[UDP_CHECKSUM_H_P]=0;
     8a8:	18 a6       	std	Y+40, r1	; 0x28
        buf[UDP_CHECKSUM_L_P]=0;
     8aa:	19 a6       	std	Y+41, r1	; 0x29
     8ac:	de 01       	movw	r26, r28
     8ae:	9a 96       	adiw	r26, 0x2a	; 42
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	07 c0       	rjmp	.+14     	; 0x8c4 <make_udp_reply_from_request+0x72>
        // copy the data:
        while(i<datalen){
                buf[UDP_DATA_P+i]=data[i];
     8b6:	f7 01       	movw	r30, r14
     8b8:	e2 0f       	add	r30, r18
     8ba:	f3 1f       	adc	r31, r19
     8bc:	80 81       	ld	r24, Z
     8be:	8d 93       	st	X+, r24
     8c0:	2f 5f       	subi	r18, 0xFF	; 255
     8c2:	3f 4f       	sbci	r19, 0xFF	; 255
        buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
        // zero the checksum
        buf[UDP_CHECKSUM_H_P]=0;
        buf[UDP_CHECKSUM_L_P]=0;
        // copy the data:
        while(i<datalen){
     8c4:	20 17       	cp	r18, r16
     8c6:	b8 f3       	brcs	.-18     	; 0x8b6 <make_udp_reply_from_request+0x64>
                buf[UDP_DATA_P+i]=data[i];
                i++;
        }
        ck=checksum(&buf[IP_SRC_P], 16 + datalen,1);
     8c8:	10 e0       	ldi	r17, 0x00	; 0
     8ca:	00 5f       	subi	r16, 0xF0	; 240
     8cc:	1f 4f       	sbci	r17, 0xFF	; 255
     8ce:	ce 01       	movw	r24, r28
     8d0:	4a 96       	adiw	r24, 0x1a	; 26
     8d2:	b8 01       	movw	r22, r16
     8d4:	41 e0       	ldi	r20, 0x01	; 1
     8d6:	0e 94 b2 02 	call	0x564	; 0x564 <checksum>
        buf[UDP_CHECKSUM_H_P]=ck>>8;
     8da:	98 a7       	std	Y+40, r25	; 0x28
        buf[UDP_CHECKSUM_L_P]=ck& 0xff;
     8dc:	89 a7       	std	Y+41, r24	; 0x29
        enc28j60PacketSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen,buf);
     8de:	c8 01       	movw	r24, r16
     8e0:	4a 96       	adiw	r24, 0x1a	; 26
     8e2:	be 01       	movw	r22, r28
     8e4:	0e 94 12 01 	call	0x224	; 0x224 <enc28j60PacketSend>
}
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	1f 91       	pop	r17
     8ee:	0f 91       	pop	r16
     8f0:	ff 90       	pop	r15
     8f2:	ef 90       	pop	r14
     8f4:	df 90       	pop	r13
     8f6:	08 95       	ret

000008f8 <make_echo_reply_from_request>:
        // eth+arp is 42 bytes:
        enc28j60PacketSend(42,buf); 
}

void make_echo_reply_from_request(uint8_t *buf,uint8_t len)
{
     8f8:	1f 93       	push	r17
     8fa:	cf 93       	push	r28
     8fc:	df 93       	push	r29
     8fe:	ec 01       	movw	r28, r24
     900:	16 2f       	mov	r17, r22
     902:	fc 01       	movw	r30, r24
     904:	a7 e4       	ldi	r26, 0x47	; 71
     906:	b1 e0       	ldi	r27, 0x01	; 1
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     908:	86 81       	ldd	r24, Z+6	; 0x06
     90a:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     90c:	8d 91       	ld	r24, X+
     90e:	86 83       	std	Z+6, r24	; 0x06
     910:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	ad 34       	cpi	r26, 0x4D	; 77
     916:	b8 07       	cpc	r27, r24
     918:	b9 f7       	brne	.-18     	; 0x908 <make_echo_reply_from_request+0x10>
}

void make_echo_reply_from_request(uint8_t *buf,uint8_t len)
{
        make_eth(buf);
        make_ip(buf);
     91a:	ce 01       	movw	r24, r28
     91c:	0e 94 76 03 	call	0x6ec	; 0x6ec <make_ip>
        buf[ICMP_TYPE_P]=ICMP_TYPE_ECHOREPLY_V;
     920:	1a a2       	std	Y+34, r1	; 0x22
        // we changed only the icmp.type field from request(=8) to reply(=0).
        // we can therefore easily correct the checksum:
        if (buf[ICMP_CHECKSUM_P] > (0xff-0x08)){
     922:	8c a1       	ldd	r24, Y+36	; 0x24
     924:	88 3f       	cpi	r24, 0xF8	; 248
     926:	18 f0       	brcs	.+6      	; 0x92e <make_echo_reply_from_request+0x36>
                buf[ICMP_CHECKSUM_P+1]++;
     928:	8d a1       	ldd	r24, Y+37	; 0x25
     92a:	8f 5f       	subi	r24, 0xFF	; 255
     92c:	8d a3       	std	Y+37, r24	; 0x25
        }
        buf[ICMP_CHECKSUM_P]+=0x08;
     92e:	8c a1       	ldd	r24, Y+36	; 0x24
     930:	88 5f       	subi	r24, 0xF8	; 248
     932:	8c a3       	std	Y+36, r24	; 0x24
        //
        enc28j60PacketSend(len,buf);
     934:	81 2f       	mov	r24, r17
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	be 01       	movw	r22, r28
     93a:	0e 94 12 01 	call	0x224	; 0x224 <enc28j60PacketSend>
}
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	1f 91       	pop	r17
     944:	08 95       	ret

00000946 <make_arp_answer_from_request>:
        buf[IP_CHECKSUM_P]=ck>>8;
        buf[IP_CHECKSUM_P+1]=ck& 0xff;
}

void make_arp_answer_from_request(uint8_t *buf,uint8_t len)
{
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	ac 01       	movw	r20, r24
     94c:	ec 01       	movw	r28, r24
     94e:	27 e4       	ldi	r18, 0x47	; 71
     950:	31 e0       	ldi	r19, 0x01	; 1
     952:	fc 01       	movw	r30, r24
     954:	d9 01       	movw	r26, r18
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     956:	86 81       	ldd	r24, Z+6	; 0x06
     958:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     95a:	8d 91       	ld	r24, X+
     95c:	86 83       	std	Z+6, r24	; 0x06
     95e:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	ad 34       	cpi	r26, 0x4D	; 77
     964:	b8 07       	cpc	r27, r24
     966:	b9 f7       	brne	.-18     	; 0x956 <make_arp_answer_from_request+0x10>
void make_arp_answer_from_request(uint8_t *buf,uint8_t len)
{
        uint8_t i=0;
        //
        make_eth(buf);
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
     968:	fa 01       	movw	r30, r20
     96a:	14 8a       	std	Z+20, r1	; 0x14
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	85 8b       	std	Z+21, r24	; 0x15
        // fill the mac addresses:
        while(i<6){
                buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
     970:	8e 89       	ldd	r24, Y+22	; 0x16
     972:	88 a3       	std	Y+32, r24	; 0x20
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
     974:	f9 01       	movw	r30, r18
     976:	81 91       	ld	r24, Z+
     978:	9f 01       	movw	r18, r30
     97a:	8e 8b       	std	Y+22, r24	; 0x16
     97c:	21 96       	adiw	r28, 0x01	; 1
        //
        make_eth(buf);
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
        // fill the mac addresses:
        while(i<6){
     97e:	f1 e0       	ldi	r31, 0x01	; 1
     980:	2d 34       	cpi	r18, 0x4D	; 77
     982:	3f 07       	cpc	r19, r31
     984:	a9 f7       	brne	.-22     	; 0x970 <make_arp_answer_from_request+0x2a>
     986:	fa 01       	movw	r30, r20
     988:	7c 96       	adiw	r30, 0x1c	; 28
     98a:	ad e4       	ldi	r26, 0x4D	; 77
     98c:	b1 e0       	ldi	r27, 0x01	; 1
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
                i++;
        }
        i=0;
        while(i<4){
                buf[ETH_ARP_DST_IP_P+i]=buf[ETH_ARP_SRC_IP_P+i];
     98e:	80 81       	ld	r24, Z
     990:	82 87       	std	Z+10, r24	; 0x0a
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
     992:	8d 91       	ld	r24, X+
     994:	81 93       	st	Z+, r24
                buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
                i++;
        }
        i=0;
        while(i<4){
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	a1 35       	cpi	r26, 0x51	; 81
     99a:	b8 07       	cpc	r27, r24
     99c:	c1 f7       	brne	.-16     	; 0x98e <make_arp_answer_from_request+0x48>
                buf[ETH_ARP_DST_IP_P+i]=buf[ETH_ARP_SRC_IP_P+i];
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
                i++;
        }
        // eth+arp is 42 bytes:
        enc28j60PacketSend(42,buf); 
     99e:	8a e2       	ldi	r24, 0x2A	; 42
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	ba 01       	movw	r22, r20
     9a4:	0e 94 12 01 	call	0x224	; 0x224 <enc28j60PacketSend>
}
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	08 95       	ret

000009ae <udp_test_sender>:
        buf[UDP_CHECKSUM_L_P]=ck& 0xff;
        enc28j60PacketSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen,buf);
}

void udp_test_sender(uint8_t *buf)
{
     9ae:	cf 92       	push	r12
     9b0:	df 92       	push	r13
     9b2:	ff 92       	push	r15
     9b4:	0f 93       	push	r16
     9b6:	1f 93       	push	r17
     9b8:	df 93       	push	r29
     9ba:	cf 93       	push	r28
     9bc:	cd b7       	in	r28, 0x3d	; 61
     9be:	de b7       	in	r29, 0x3e	; 62
     9c0:	c2 5d       	subi	r28, 0xD2	; 210
     9c2:	d0 40       	sbci	r29, 0x00	; 0
     9c4:	0f b6       	in	r0, 0x3f	; 63
     9c6:	f8 94       	cli
     9c8:	de bf       	out	0x3e, r29	; 62
     9ca:	0f be       	out	0x3f, r0	; 63
     9cc:	cd bf       	out	0x3d, r28	; 61
     9ce:	8c 01       	movw	r16, r24
        uint8_t i=0;
        uint16_t ck;
        uint8_t datalen;
        char voresdata[] = "testpakke";
     9d0:	de 01       	movw	r26, r28
     9d2:	11 96       	adiw	r26, 0x01	; 1
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f1 e0       	ldi	r31, 0x01	; 1
     9d8:	8a e0       	ldi	r24, 0x0A	; 10
     9da:	01 90       	ld	r0, Z+
     9dc:	0d 92       	st	X+, r0
     9de:	81 50       	subi	r24, 0x01	; 1
     9e0:	e1 f7       	brne	.-8      	; 0x9da <udp_test_sender+0x2c>
        datalen = strlen(voresdata);
     9e2:	fe 01       	movw	r30, r28
     9e4:	31 96       	adiw	r30, 0x01	; 1
     9e6:	df 01       	movw	r26, r30
     9e8:	0d 90       	ld	r0, X+
     9ea:	00 20       	and	r0, r0
     9ec:	e9 f7       	brne	.-6      	; 0x9e8 <udp_test_sender+0x3a>
     9ee:	9d 01       	movw	r18, r26
     9f0:	21 50       	subi	r18, 0x01	; 1
     9f2:	30 40       	sbci	r19, 0x00	; 0
     9f4:	2e 1b       	sub	r18, r30
     9f6:	3f 0b       	sbc	r19, r31

        buf[ETH_DST_MAC] = 0x00;
     9f8:	f8 01       	movw	r30, r16
     9fa:	10 82       	st	Z, r1
        buf[ETH_DST_MAC+1] = 0x13;
     9fc:	83 e1       	ldi	r24, 0x13	; 19
     9fe:	81 83       	std	Z+1, r24	; 0x01
        buf[ETH_DST_MAC+2] = 0xd4;
     a00:	84 ed       	ldi	r24, 0xD4	; 212
     a02:	82 83       	std	Z+2, r24	; 0x02
        buf[ETH_DST_MAC+3] = 0x9e;
     a04:	8e e9       	ldi	r24, 0x9E	; 158
     a06:	83 83       	std	Z+3, r24	; 0x03
        buf[ETH_DST_MAC+4] = 0x9f;
     a08:	8f e9       	ldi	r24, 0x9F	; 159
     a0a:	84 83       	std	Z+4, r24	; 0x04
        buf[ETH_DST_MAC+5] = 0xa0;
     a0c:	80 ea       	ldi	r24, 0xA0	; 160
     a0e:	85 83       	std	Z+5, r24	; 0x05
     a10:	a7 e4       	ldi	r26, 0x47	; 71
     a12:	b1 e0       	ldi	r27, 0x01	; 1
        while(i<6){
                buf[ETH_SRC_MAC +i]=macaddr[i];
     a14:	8d 91       	ld	r24, X+
     a16:	86 83       	std	Z+6, r24	; 0x06
     a18:	31 96       	adiw	r30, 0x01	; 1
        buf[ETH_DST_MAC+1] = 0x13;
        buf[ETH_DST_MAC+2] = 0xd4;
        buf[ETH_DST_MAC+3] = 0x9e;
        buf[ETH_DST_MAC+4] = 0x9f;
        buf[ETH_DST_MAC+5] = 0xa0;
        while(i<6){
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	ad 34       	cpi	r26, 0x4D	; 77
     a1e:	b8 07       	cpc	r27, r24
     a20:	c9 f7       	brne	.-14     	; 0xa14 <udp_test_sender+0x66>
{
        uint8_t i=0;
        uint16_t ck;
        uint8_t datalen;
        char voresdata[] = "testpakke";
        datalen = strlen(voresdata);
     a22:	f2 2e       	mov	r15, r18
     a24:	ac ed       	ldi	r26, 0xDC	; 220
     a26:	a2 17       	cp	r26, r18
     a28:	10 f4       	brcc	.+4      	; 0xa2e <udp_test_sender+0x80>
     a2a:	3c ed       	ldi	r19, 0xDC	; 220
     a2c:	f3 2e       	mov	r15, r19
        }
        if (datalen>220){
                datalen=220;
        }
        // total length field in the IP header must be set:
        buf[IP_TOTLEN_H_P]=0;
     a2e:	f8 01       	movw	r30, r16
     a30:	10 8a       	std	Z+16, r1	; 0x10
        buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
     a32:	fc e1       	ldi	r31, 0x1C	; 28
     a34:	ff 0e       	add	r15, r31
     a36:	d8 01       	movw	r26, r16
     a38:	51 96       	adiw	r26, 0x11	; 17
     a3a:	fc 92       	st	X, r15
     a3c:	51 97       	sbiw	r26, 0x11	; 17

        i = 0;
        while(i<4){

                buf[IP_SRC_P+i]=ipaddr[i];
     a3e:	2a e1       	ldi	r18, 0x1A	; 26
     a40:	c2 2e       	mov	r12, r18
     a42:	d1 2c       	mov	r13, r1
     a44:	c0 0e       	add	r12, r16
     a46:	d1 1e       	adc	r13, r17
     a48:	80 91 4d 01 	lds	r24, 0x014D
     a4c:	5a 96       	adiw	r26, 0x1a	; 26
     a4e:	8c 93       	st	X, r24
     a50:	5a 97       	sbiw	r26, 0x1a	; 26
     a52:	80 91 4e 01 	lds	r24, 0x014E
     a56:	5b 96       	adiw	r26, 0x1b	; 27
     a58:	8c 93       	st	X, r24
     a5a:	5b 97       	sbiw	r26, 0x1b	; 27
     a5c:	80 91 4f 01 	lds	r24, 0x014F
     a60:	5c 96       	adiw	r26, 0x1c	; 28
     a62:	8c 93       	st	X, r24
     a64:	5c 97       	sbiw	r26, 0x1c	; 28
     a66:	80 91 50 01 	lds	r24, 0x0150
     a6a:	5d 96       	adiw	r26, 0x1d	; 29
     a6c:	8c 93       	st	X, r24
     a6e:	5d 97       	sbiw	r26, 0x1d	; 29
                i++;
        }
        buf[IP_DST_P]=192;
     a70:	80 ec       	ldi	r24, 0xC0	; 192
     a72:	5e 96       	adiw	r26, 0x1e	; 30
     a74:	8c 93       	st	X, r24
     a76:	5e 97       	sbiw	r26, 0x1e	; 30
        buf[IP_DST_P+1]=168;
     a78:	88 ea       	ldi	r24, 0xA8	; 168
     a7a:	5f 96       	adiw	r26, 0x1f	; 31
     a7c:	8c 93       	st	X, r24
     a7e:	5f 97       	sbiw	r26, 0x1f	; 31
        buf[IP_DST_P+2]=1;
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	90 96       	adiw	r26, 0x20	; 32
     a84:	8c 93       	st	X, r24
     a86:	90 97       	sbiw	r26, 0x20	; 32
        buf[IP_DST_P+3]=5;
     a88:	85 e0       	ldi	r24, 0x05	; 5
     a8a:	91 96       	adiw	r26, 0x21	; 33
     a8c:	8c 93       	st	X, r24
     a8e:	91 97       	sbiw	r26, 0x21	; 33
        // clear the 2 byte checksum
        buf[IP_CHECKSUM_P]=0;
     a90:	58 96       	adiw	r26, 0x18	; 24
     a92:	1c 92       	st	X, r1
     a94:	58 97       	sbiw	r26, 0x18	; 24
        buf[IP_CHECKSUM_P+1]=0;
     a96:	59 96       	adiw	r26, 0x19	; 25
     a98:	1c 92       	st	X, r1
     a9a:	59 97       	sbiw	r26, 0x19	; 25
        buf[IP_FLAGS_P]=0x40; // don't fragment
     a9c:	80 e4       	ldi	r24, 0x40	; 64
     a9e:	54 96       	adiw	r26, 0x14	; 20
     aa0:	8c 93       	st	X, r24
     aa2:	54 97       	sbiw	r26, 0x14	; 20
        buf[IP_FLAGS_P+1]=0;  // fragement offset
     aa4:	55 96       	adiw	r26, 0x15	; 21
     aa6:	1c 92       	st	X, r1
     aa8:	55 97       	sbiw	r26, 0x15	; 21
        buf[IP_TTL_P]=64; // ttl
     aaa:	56 96       	adiw	r26, 0x16	; 22
     aac:	8c 93       	st	X, r24
        // calculate the checksum:
        ck=checksum(&buf[IP_P], IP_HEADER_LEN,0);
     aae:	c8 01       	movw	r24, r16
     ab0:	0e 96       	adiw	r24, 0x0e	; 14
     ab2:	64 e1       	ldi	r22, 0x14	; 20
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	40 e0       	ldi	r20, 0x00	; 0
     ab8:	0e 94 b2 02 	call	0x564	; 0x564 <checksum>
        buf[IP_CHECKSUM_P]=ck>>8;
     abc:	f8 01       	movw	r30, r16
     abe:	90 8f       	std	Z+24, r25	; 0x18
        buf[IP_CHECKSUM_P+1]=ck& 0xff;
     ac0:	81 8f       	std	Z+25, r24	; 0x19

        // send to port:
        //buf[UDP_DST_PORT_H_P]=port>>8;
        //buf[UDP_DST_PORT_L_P]=port & 0xff;
        // sent to port of sender and use "port" as own source:
        buf[UDP_DST_PORT_H_P]=0x04;
     ac2:	94 e0       	ldi	r25, 0x04	; 4
     ac4:	94 a3       	std	Z+36, r25	; 0x24
        buf[UDP_DST_PORT_L_P]=0xb0;
     ac6:	80 eb       	ldi	r24, 0xB0	; 176
     ac8:	85 a3       	std	Z+37, r24	; 0x25
        buf[UDP_SRC_PORT_H_P]=0x04;
     aca:	92 a3       	std	Z+34, r25	; 0x22
        buf[UDP_SRC_PORT_L_P]=0xb0;
     acc:	83 a3       	std	Z+35, r24	; 0x23
        // source port does not matter and is what the sender used.
        // calculte the udp length:
        buf[UDP_LEN_H_P]=0;
     ace:	16 a2       	std	Z+38, r1	; 0x26
        buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
     ad0:	fc ee       	ldi	r31, 0xEC	; 236
     ad2:	ff 0e       	add	r15, r31
     ad4:	d8 01       	movw	r26, r16
     ad6:	97 96       	adiw	r26, 0x27	; 39
     ad8:	fc 92       	st	X, r15
     ada:	b8 ef       	ldi	r27, 0xF8	; 248
     adc:	fb 0e       	add	r15, r27
        // zero the checksum
        buf[UDP_CHECKSUM_H_P]=0;
     ade:	f8 01       	movw	r30, r16
     ae0:	10 a6       	std	Z+40, r1	; 0x28
        buf[UDP_CHECKSUM_L_P]=0;
     ae2:	11 a6       	std	Z+41, r1	; 0x29
     ae4:	de 01       	movw	r26, r28
     ae6:	15 96       	adiw	r26, 0x05	; 5
     ae8:	be 96       	adiw	r30, 0x2e	; 46
     aea:	03 c0       	rjmp	.+6      	; 0xaf2 <udp_test_sender+0x144>
        // copy the data:
        while(i<datalen){
                buf[UDP_DATA_P+i]=voresdata[i];
     aec:	8d 91       	ld	r24, X+
     aee:	81 93       	st	Z+, r24
                i++;
     af0:	9f 5f       	subi	r25, 0xFF	; 255
        buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
        // zero the checksum
        buf[UDP_CHECKSUM_H_P]=0;
        buf[UDP_CHECKSUM_L_P]=0;
        // copy the data:
        while(i<datalen){
     af2:	9f 15       	cp	r25, r15
     af4:	d8 f3       	brcs	.-10     	; 0xaec <udp_test_sender+0x13e>
                buf[UDP_DATA_P+i]=voresdata[i];
                i++;
        }
        ck=checksum(&buf[IP_SRC_P], 16 + datalen,1);
     af6:	6f 2d       	mov	r22, r15
     af8:	70 e0       	ldi	r23, 0x00	; 0
     afa:	60 5f       	subi	r22, 0xF0	; 240
     afc:	7f 4f       	sbci	r23, 0xFF	; 255
     afe:	c6 01       	movw	r24, r12
     b00:	41 e0       	ldi	r20, 0x01	; 1
     b02:	0e 94 b2 02 	call	0x564	; 0x564 <checksum>
        buf[UDP_CHECKSUM_H_P]=ck>>8;
     b06:	d8 01       	movw	r26, r16
     b08:	98 96       	adiw	r26, 0x28	; 40
     b0a:	9c 93       	st	X, r25
     b0c:	98 97       	sbiw	r26, 0x28	; 40
        buf[UDP_CHECKSUM_L_P]=ck& 0xff;
     b0e:	99 96       	adiw	r26, 0x29	; 41
     b10:	8c 93       	st	X, r24
        uint8_t tester[200] = {0x00, 0x13, 0xd4, 0x9e, 0x9f, 0xa0, 0x54, 0x55, 0x58, 0x10, 0x00, 0x24, 0x08, 0x00, 0x45, 0x00, 0x00, 0x1f, 0x12, 0x34, 0x40, 0x00, 0xff, 0x11, 0xe6, 0x3f, 0xc0, 0xa8, 0x01, 0x04, 0xc0, 0xa8, 0x01, 0x05, 0x04, 0xb0, 0x04, 0xb0, 0x00, 0x0b, 0x18, 0x32, 'H', 'e', 'j'};
     b12:	fe 01       	movw	r30, r28
     b14:	3b 96       	adiw	r30, 0x0b	; 11
     b16:	88 ec       	ldi	r24, 0xC8	; 200
     b18:	df 01       	movw	r26, r30
     b1a:	1d 92       	st	X+, r1
     b1c:	8a 95       	dec	r24
     b1e:	e9 f7       	brne	.-6      	; 0xb1a <udp_test_sender+0x16c>
     b20:	83 e1       	ldi	r24, 0x13	; 19
     b22:	8c 87       	std	Y+12, r24	; 0x0c
     b24:	84 ed       	ldi	r24, 0xD4	; 212
     b26:	8d 87       	std	Y+13, r24	; 0x0d
     b28:	8e e9       	ldi	r24, 0x9E	; 158
     b2a:	8e 87       	std	Y+14, r24	; 0x0e
     b2c:	8f e9       	ldi	r24, 0x9F	; 159
     b2e:	8f 87       	std	Y+15, r24	; 0x0f
     b30:	80 ea       	ldi	r24, 0xA0	; 160
     b32:	88 8b       	std	Y+16, r24	; 0x10
     b34:	84 e5       	ldi	r24, 0x54	; 84
     b36:	89 8b       	std	Y+17, r24	; 0x11
     b38:	85 e5       	ldi	r24, 0x55	; 85
     b3a:	8a 8b       	std	Y+18, r24	; 0x12
     b3c:	88 e5       	ldi	r24, 0x58	; 88
     b3e:	8b 8b       	std	Y+19, r24	; 0x13
     b40:	80 e1       	ldi	r24, 0x10	; 16
     b42:	8c 8b       	std	Y+20, r24	; 0x14
     b44:	84 e2       	ldi	r24, 0x24	; 36
     b46:	8e 8b       	std	Y+22, r24	; 0x16
     b48:	88 e0       	ldi	r24, 0x08	; 8
     b4a:	8f 8b       	std	Y+23, r24	; 0x17
     b4c:	85 e4       	ldi	r24, 0x45	; 69
     b4e:	89 8f       	std	Y+25, r24	; 0x19
     b50:	8f e1       	ldi	r24, 0x1F	; 31
     b52:	8c 8f       	std	Y+28, r24	; 0x1c
     b54:	82 e1       	ldi	r24, 0x12	; 18
     b56:	8d 8f       	std	Y+29, r24	; 0x1d
     b58:	84 e3       	ldi	r24, 0x34	; 52
     b5a:	8e 8f       	std	Y+30, r24	; 0x1e
     b5c:	80 e4       	ldi	r24, 0x40	; 64
     b5e:	8f 8f       	std	Y+31, r24	; 0x1f
     b60:	8f ef       	ldi	r24, 0xFF	; 255
     b62:	89 a3       	std	Y+33, r24	; 0x21
     b64:	81 e1       	ldi	r24, 0x11	; 17
     b66:	8a a3       	std	Y+34, r24	; 0x22
     b68:	86 ee       	ldi	r24, 0xE6	; 230
     b6a:	8b a3       	std	Y+35, r24	; 0x23
     b6c:	8f e3       	ldi	r24, 0x3F	; 63
     b6e:	8c a3       	std	Y+36, r24	; 0x24
     b70:	30 ec       	ldi	r19, 0xC0	; 192
     b72:	3d a3       	std	Y+37, r19	; 0x25
     b74:	28 ea       	ldi	r18, 0xA8	; 168
     b76:	2e a3       	std	Y+38, r18	; 0x26
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	8f a3       	std	Y+39, r24	; 0x27
     b7c:	94 e0       	ldi	r25, 0x04	; 4
     b7e:	98 a7       	std	Y+40, r25	; 0x28
     b80:	39 a7       	std	Y+41, r19	; 0x29
     b82:	2a a7       	std	Y+42, r18	; 0x2a
     b84:	8b a7       	std	Y+43, r24	; 0x2b
     b86:	85 e0       	ldi	r24, 0x05	; 5
     b88:	8c a7       	std	Y+44, r24	; 0x2c
     b8a:	9d a7       	std	Y+45, r25	; 0x2d
     b8c:	80 eb       	ldi	r24, 0xB0	; 176
     b8e:	8e a7       	std	Y+46, r24	; 0x2e
     b90:	9f a7       	std	Y+47, r25	; 0x2f
     b92:	88 ab       	std	Y+48, r24	; 0x30
     b94:	8b e0       	ldi	r24, 0x0B	; 11
     b96:	8a ab       	std	Y+50, r24	; 0x32
     b98:	88 e1       	ldi	r24, 0x18	; 24
     b9a:	8b ab       	std	Y+51, r24	; 0x33
     b9c:	82 e3       	ldi	r24, 0x32	; 50
     b9e:	8c ab       	std	Y+52, r24	; 0x34
     ba0:	88 e4       	ldi	r24, 0x48	; 72
     ba2:	8d ab       	std	Y+53, r24	; 0x35
     ba4:	85 e6       	ldi	r24, 0x65	; 101
     ba6:	8e ab       	std	Y+54, r24	; 0x36
     ba8:	8a e6       	ldi	r24, 0x6A	; 106
     baa:	8f ab       	std	Y+55, r24	; 0x37
        enc28j60PacketSend(46,tester);
     bac:	8e e2       	ldi	r24, 0x2E	; 46
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	bf 01       	movw	r22, r30
     bb2:	0e 94 12 01 	call	0x224	; 0x224 <enc28j60PacketSend>
}
     bb6:	ce 52       	subi	r28, 0x2E	; 46
     bb8:	df 4f       	sbci	r29, 0xFF	; 255
     bba:	0f b6       	in	r0, 0x3f	; 63
     bbc:	f8 94       	cli
     bbe:	de bf       	out	0x3e, r29	; 62
     bc0:	0f be       	out	0x3f, r0	; 63
     bc2:	cd bf       	out	0x3d, r28	; 61
     bc4:	cf 91       	pop	r28
     bc6:	df 91       	pop	r29
     bc8:	1f 91       	pop	r17
     bca:	0f 91       	pop	r16
     bcc:	ff 90       	pop	r15
     bce:	df 90       	pop	r13
     bd0:	cf 90       	pop	r12
     bd2:	08 95       	ret

00000bd4 <adc>:

long adc(uint8_t adc_port)
{
	long adc_buf=0;
	
	ADMUX = adc_port;        // Choose which ADC-port to take the input from
     bd4:	80 93 7c 00 	sts	0x007C, r24
	
    ADCSRA |= (1 << ADEN);        // Analog-Digital enable bit
     bd8:	80 91 7a 00 	lds	r24, 0x007A
     bdc:	80 68       	ori	r24, 0x80	; 128
     bde:	80 93 7a 00 	sts	0x007A, r24
 
 
    ADCSRA |= (1 << ADSC);            // start single conversion
     be2:	80 91 7a 00 	lds	r24, 0x007A
     be6:	80 64       	ori	r24, 0x40	; 64
     be8:	03 c0       	rjmp	.+6      	; 0xbf0 <adc+0x1c>
        while (ADCSRA & (1 << ADSC))  // wait until conversion is done
 
    ADCSRA &= ~(1<<ADEN);             // shut down the ADC
     bea:	80 91 7a 00 	lds	r24, 0x007A
     bee:	8f 77       	andi	r24, 0x7F	; 127
     bf0:	80 93 7a 00 	sts	0x007A, r24
	
    ADCSRA |= (1 << ADEN);        // Analog-Digital enable bit
 
 
    ADCSRA |= (1 << ADSC);            // start single conversion
        while (ADCSRA & (1 << ADSC))  // wait until conversion is done
     bf4:	80 91 7a 00 	lds	r24, 0x007A
     bf8:	86 fd       	sbrc	r24, 6
     bfa:	f7 cf       	rjmp	.-18     	; 0xbea <adc+0x16>
 
    ADCSRA &= ~(1<<ADEN);             // shut down the ADC
    adc_buf=(ADCL|ADCH<<8);	
     bfc:	80 91 78 00 	lds	r24, 0x0078
     c00:	60 91 79 00 	lds	r22, 0x0079
     c04:	36 2f       	mov	r19, r22
     c06:	20 e0       	ldi	r18, 0x00	; 0
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	28 2b       	or	r18, r24
     c0c:	39 2b       	or	r19, r25
     c0e:	44 27       	eor	r20, r20
     c10:	37 fd       	sbrc	r19, 7
     c12:	40 95       	com	r20
     c14:	54 2f       	mov	r21, r20

	return adc_buf;
}
     c16:	b9 01       	movw	r22, r18
     c18:	ca 01       	movw	r24, r20
     c1a:	08 95       	ret

00000c1c <init_adc>:

void init_adc(void){
DDRD = 0xFF;                            // Set output direction on PORTB
     c1c:	8f ef       	ldi	r24, 0xFF	; 255
     c1e:	8a b9       	out	0x0a, r24	; 10
ADCSRA |= (1 << ADEN) |               // Analog-Digital enable bit
     c20:	ea e7       	ldi	r30, 0x7A	; 122
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	83 68       	ori	r24, 0x83	; 131
     c28:	80 83       	st	Z, r24
          (1 << ADPS1)|               // set prescaler to 8    (clock / 8)
          (1 << ADPS0);               // set prescaler to 8    (doc Atmega168 23.8.2 p.258)
 
ADMUX |=  (0 << REFS1) |
     c2a:	ec e7       	ldi	r30, 0x7C	; 124
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	80 83       	st	Z, r24
	  (0 << ADLAR) /*|
	  (1 << MUX0) |
	  (1 << MUX1) |
	  (0 << MUX2) |               // AD result store in (more significant bit in ADCH)
	  (0 << MUX3)*/;                // Choose AD input AD2 (PC2) 
}
     c32:	08 95       	ret

00000c34 <parsecom>:
{
	send_udp(buf,str,strlen(str),myport, dstip, dstmac);
}


uint8_t parsecom(char *result){
     c34:	0f 93       	push	r16
     c36:	1f 93       	push	r17
     c38:	18 2f       	mov	r17, r24
     c3a:	09 2f       	mov	r16, r25
// led----------
	uint8_t buf_pos=0;
	uint8_t payloadlen=0;

	if (ledstatus){
     c3c:	80 91 51 01 	lds	r24, 0x0151
     c40:	88 23       	and	r24, r24
     c42:	21 f0       	breq	.+8      	; 0xc4c <parsecom+0x18>
			/* set output to Vcc, LED off */
			PORTB|= (1<<PB1);
     c44:	29 9a       	sbi	0x05, 1	; 5
			ledstatus=0;
     c46:	10 92 51 01 	sts	0x0151, r1
     c4a:	04 c0       	rjmp	.+8      	; 0xc54 <parsecom+0x20>
	}else{
			/* set output to GND, LED on */
			PORTB &= ~(1<<PB1);
     c4c:	29 98       	cbi	0x05, 1	; 5
			ledstatus=1;
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	80 93 51 01 	sts	0x0151, r24
	}
			
	// arp is broadcast if unknown but a host may also
	// verify the mac address by sending it to 
	// a unicast address.
	if(eth_type_is_arp_and_my_ip(buf,plen)){
     c54:	82 e5       	ldi	r24, 0x52	; 82
     c56:	91 e0       	ldi	r25, 0x01	; 1
     c58:	60 91 4d 02 	lds	r22, 0x024D
     c5c:	0e 94 32 03 	call	0x664	; 0x664 <eth_type_is_arp_and_my_ip>
     c60:	88 23       	and	r24, r24
     c62:	39 f0       	breq	.+14     	; 0xc72 <parsecom+0x3e>
			make_arp_answer_from_request(buf,plen);
     c64:	82 e5       	ldi	r24, 0x52	; 82
     c66:	91 e0       	ldi	r25, 0x01	; 1
     c68:	60 91 4d 02 	lds	r22, 0x024D
     c6c:	0e 94 a3 04 	call	0x946	; 0x946 <make_arp_answer_from_request>
     c70:	16 c0       	rjmp	.+44     	; 0xc9e <parsecom+0x6a>
			return(2);
	}
	// check if ip packets (icmp or udp) are for us:
	if(eth_type_is_ip_and_my_ip(buf,plen)==0){
     c72:	82 e5       	ldi	r24, 0x52	; 82
     c74:	91 e0       	ldi	r25, 0x01	; 1
     c76:	60 91 4d 02 	lds	r22, 0x024D
     c7a:	0e 94 4d 03 	call	0x69a	; 0x69a <eth_type_is_ip_and_my_ip>
     c7e:	88 23       	and	r24, r24
     c80:	71 f0       	breq	.+28     	; 0xc9e <parsecom+0x6a>
			return(2);
	}
	
	if(buf[IP_PROTO_P]==IP_PROTO_ICMP_V && buf[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V){
     c82:	80 91 69 01 	lds	r24, 0x0169
     c86:	81 30       	cpi	r24, 0x01	; 1
     c88:	61 f4       	brne	.+24     	; 0xca2 <parsecom+0x6e>
     c8a:	80 91 74 01 	lds	r24, 0x0174
     c8e:	88 30       	cpi	r24, 0x08	; 8
     c90:	41 f5       	brne	.+80     	; 0xce2 <parsecom+0xae>
			// a ping packet, let's send pong
			make_echo_reply_from_request(buf,plen);
     c92:	82 e5       	ldi	r24, 0x52	; 82
     c94:	91 e0       	ldi	r25, 0x01	; 1
     c96:	60 91 4d 02 	lds	r22, 0x024D
     c9a:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <make_echo_reply_from_request>
     c9e:	82 e0       	ldi	r24, 0x02	; 2
     ca0:	21 c0       	rjmp	.+66     	; 0xce4 <parsecom+0xb0>
			return(2);
	}
	// we listen on port 1200=0x4B0
	if (buf[IP_PROTO_P]==IP_PROTO_UDP_V&&buf[UDP_DST_PORT_H_P]==4&&buf[UDP_DST_PORT_L_P]==0xb0){
     ca2:	81 31       	cpi	r24, 0x11	; 17
     ca4:	f1 f4       	brne	.+60     	; 0xce2 <parsecom+0xae>
     ca6:	80 91 76 01 	lds	r24, 0x0176
     caa:	84 30       	cpi	r24, 0x04	; 4
     cac:	d1 f4       	brne	.+52     	; 0xce2 <parsecom+0xae>
     cae:	80 91 77 01 	lds	r24, 0x0177
     cb2:	80 3b       	cpi	r24, 0xB0	; 176
     cb4:	b1 f4       	brne	.+44     	; 0xce2 <parsecom+0xae>
			payloadlen=buf[UDP_LEN_L_P]-UDP_HEADER_LEN;
     cb6:	40 91 79 01 	lds	r20, 0x0179
     cba:	48 50       	subi	r20, 0x08	; 8
     cbc:	81 2f       	mov	r24, r17
     cbe:	90 2f       	mov	r25, r16
     cc0:	9c 01       	movw	r18, r24
     cc2:	d9 01       	movw	r26, r18
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <parsecom+0x98>
							return(0);
					} */
					
					while(buf[UDP_DATA_P+buf_pos] != ' ' && buf_pos<payloadlen){
						//strcat(result,(char *)&buf[UDP_DATA_P+buf_pos]);
						result[buf_pos] = buf[UDP_DATA_P+buf_pos];
     cc8:	9d 93       	st	X+, r25
						buf_pos++;
     cca:	8f 5f       	subi	r24, 0xFF	; 255
					if (cmd_pos<2 || cmd_pos>payloadlen-3){
							strcpy(result,"e=no_cmd");
							return(0);
					} */
					
					while(buf[UDP_DATA_P+buf_pos] != ' ' && buf_pos<payloadlen){
     ccc:	e8 2f       	mov	r30, r24
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	ee 5a       	subi	r30, 0xAE	; 174
     cd2:	fe 4f       	sbci	r31, 0xFE	; 254
     cd4:	92 a5       	ldd	r25, Z+42	; 0x2a
     cd6:	90 32       	cpi	r25, 0x20	; 32
     cd8:	11 f0       	breq	.+4      	; 0xcde <parsecom+0xaa>
     cda:	84 17       	cp	r24, r20
     cdc:	a8 f3       	brcs	.-22     	; 0xcc8 <parsecom+0x94>
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	01 c0       	rjmp	.+2      	; 0xce4 <parsecom+0xb0>
     ce2:	80 e0       	ldi	r24, 0x00	; 0
			//strcpy(result,"e=invalid_pw=");
			//strcat(str,(char *)&(buf[UDP_DATA_P]));
	}
	return(0);

}
     ce4:	1f 91       	pop	r17
     ce6:	0f 91       	pop	r16
     ce8:	08 95       	ret

00000cea <putmsg>:
uint16_t plen;
uint8_t ledstatus=0;
// the password string (only the first 5 char checked):

void putmsg(char *str)
{
     cea:	ef 92       	push	r14
     cec:	ff 92       	push	r15
     cee:	0f 93       	push	r16
     cf0:	1f 93       	push	r17
     cf2:	bc 01       	movw	r22, r24
	send_udp(buf,str,strlen(str),myport, dstip, dstmac);
     cf4:	dc 01       	movw	r26, r24
     cf6:	0d 90       	ld	r0, X+
     cf8:	00 20       	and	r0, r0
     cfa:	e9 f7       	brne	.-6      	; 0xcf6 <putmsg+0xc>
     cfc:	11 97       	sbiw	r26, 0x01	; 1
     cfe:	a8 1b       	sub	r26, r24
     d00:	b9 0b       	sbc	r27, r25
     d02:	82 e5       	ldi	r24, 0x52	; 82
     d04:	91 e0       	ldi	r25, 0x01	; 1
     d06:	ad 01       	movw	r20, r26
     d08:	20 eb       	ldi	r18, 0xB0	; 176
     d0a:	34 e0       	ldi	r19, 0x04	; 4
     d0c:	03 e3       	ldi	r16, 0x33	; 51
     d0e:	11 e0       	ldi	r17, 0x01	; 1
     d10:	e7 e3       	ldi	r30, 0x37	; 55
     d12:	ee 2e       	mov	r14, r30
     d14:	e1 e0       	ldi	r30, 0x01	; 1
     d16:	fe 2e       	mov	r15, r30
     d18:	0e 94 97 03 	call	0x72e	; 0x72e <send_udp>
}
     d1c:	1f 91       	pop	r17
     d1e:	0f 91       	pop	r16
     d20:	ff 90       	pop	r15
     d22:	ef 90       	pop	r14
     d24:	08 95       	ret

00000d26 <goADC>:
	}      
	return (0);
}

void goADC(void)
{
     d26:	0f 93       	push	r16
     d28:	1f 93       	push	r17
     d2a:	df 93       	push	r29
     d2c:	cf 93       	push	r28
     d2e:	cd b7       	in	r28, 0x3d	; 61
     d30:	de b7       	in	r29, 0x3e	; 62
     d32:	e2 97       	sbiw	r28, 0x32	; 50
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	f8 94       	cli
     d38:	de bf       	out	0x3e, r29	; 62
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	cd bf       	out	0x3d, r28	; 61

long adc(uint8_t adc_port)
{
	long adc_buf=0;
	
	ADMUX = adc_port;        // Choose which ADC-port to take the input from
     d3e:	10 92 7c 00 	sts	0x007C, r1
	
    ADCSRA |= (1 << ADEN);        // Analog-Digital enable bit
     d42:	80 91 7a 00 	lds	r24, 0x007A
     d46:	80 68       	ori	r24, 0x80	; 128
     d48:	80 93 7a 00 	sts	0x007A, r24
 
 
    ADCSRA |= (1 << ADSC);            // start single conversion
     d4c:	80 91 7a 00 	lds	r24, 0x007A
     d50:	80 64       	ori	r24, 0x40	; 64
     d52:	03 c0       	rjmp	.+6      	; 0xd5a <goADC+0x34>
        while (ADCSRA & (1 << ADSC))  // wait until conversion is done
 
    ADCSRA &= ~(1<<ADEN);             // shut down the ADC
     d54:	80 91 7a 00 	lds	r24, 0x007A
     d58:	8f 77       	andi	r24, 0x7F	; 127
     d5a:	80 93 7a 00 	sts	0x007A, r24
	
    ADCSRA |= (1 << ADEN);        // Analog-Digital enable bit
 
 
    ADCSRA |= (1 << ADSC);            // start single conversion
        while (ADCSRA & (1 << ADSC))  // wait until conversion is done
     d5e:	80 91 7a 00 	lds	r24, 0x007A
     d62:	86 fd       	sbrc	r24, 6
     d64:	f7 cf       	rjmp	.-18     	; 0xd54 <goADC+0x2e>
 
    ADCSRA &= ~(1<<ADEN);             // shut down the ADC
    adc_buf=(ADCL|ADCH<<8);	
     d66:	80 91 78 00 	lds	r24, 0x0078
     d6a:	80 91 79 00 	lds	r24, 0x0079
	uint16_t adcl;
	char str[50];
	
	//putmsg("Trying ADC");
	adc(0);
	adcl=(ADCL | ADCH << 8);
     d6e:	20 91 78 00 	lds	r18, 0x0078
     d72:	40 91 79 00 	lds	r20, 0x0079
	
	sprintf(str,"ADC0%d",adcl);
     d76:	00 d0       	rcall	.+0      	; 0xd78 <goADC+0x52>
     d78:	00 d0       	rcall	.+0      	; 0xd7a <goADC+0x54>
     d7a:	00 d0       	rcall	.+0      	; 0xd7c <goADC+0x56>
     d7c:	ed b7       	in	r30, 0x3d	; 61
     d7e:	fe b7       	in	r31, 0x3e	; 62
     d80:	31 96       	adiw	r30, 0x01	; 1
     d82:	8e 01       	movw	r16, r28
     d84:	0f 5f       	subi	r16, 0xFF	; 255
     d86:	1f 4f       	sbci	r17, 0xFF	; 255
     d88:	ad b7       	in	r26, 0x3d	; 61
     d8a:	be b7       	in	r27, 0x3e	; 62
     d8c:	12 96       	adiw	r26, 0x02	; 2
     d8e:	1c 93       	st	X, r17
     d90:	0e 93       	st	-X, r16
     d92:	11 97       	sbiw	r26, 0x01	; 1
     d94:	8a e0       	ldi	r24, 0x0A	; 10
     d96:	91 e0       	ldi	r25, 0x01	; 1
     d98:	93 83       	std	Z+3, r25	; 0x03
     d9a:	82 83       	std	Z+2, r24	; 0x02
     d9c:	94 2f       	mov	r25, r20
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	82 2b       	or	r24, r18
     da4:	93 2b       	or	r25, r19
     da6:	95 83       	std	Z+5, r25	; 0x05
     da8:	84 83       	std	Z+4, r24	; 0x04
     daa:	0e 94 87 07 	call	0xf0e	; 0xf0e <sprintf>
	
	putmsg(str);
     dae:	8d b7       	in	r24, 0x3d	; 61
     db0:	9e b7       	in	r25, 0x3e	; 62
     db2:	06 96       	adiw	r24, 0x06	; 6
     db4:	0f b6       	in	r0, 0x3f	; 63
     db6:	f8 94       	cli
     db8:	9e bf       	out	0x3e, r25	; 62
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	8d bf       	out	0x3d, r24	; 61
     dbe:	c8 01       	movw	r24, r16
     dc0:	0e 94 75 06 	call	0xcea	; 0xcea <putmsg>
}
     dc4:	e2 96       	adiw	r28, 0x32	; 50
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	f8 94       	cli
     dca:	de bf       	out	0x3e, r29	; 62
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	cd bf       	out	0x3d, r28	; 61
     dd0:	cf 91       	pop	r28
     dd2:	df 91       	pop	r29
     dd4:	1f 91       	pop	r17
     dd6:	0f 91       	pop	r16
     dd8:	08 95       	ret

00000dda <main>:
	}
	return(0);

}

int main(void){
     dda:	ff 92       	push	r15
     ddc:	0f 93       	push	r16
     dde:	1f 93       	push	r17
     de0:	df 93       	push	r29
     de2:	cf 93       	push	r28
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
     de8:	6e 97       	sbiw	r28, 0x1e	; 30
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	f8 94       	cli
     dee:	de bf       	out	0x3e, r29	; 62
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	cd bf       	out	0x3d, r28	; 61
	uint8_t newip[4] = {192,168,0,201};
	
	// set the clock speed to 8MHz
	// set the clock prescaler. First write CLKPCE to enable setting of clock the
	// next four instructions.
	CLKPR=(1<<CLKPCE);
     df4:	80 e8       	ldi	r24, 0x80	; 128
     df6:	80 93 61 00 	sts	0x0061, r24
	CLKPR=0; // 8 MHZ
     dfa:	10 92 61 00 	sts	0x0061, r1

	return adc_buf;
}

void init_adc(void){
DDRD = 0xFF;                            // Set output direction on PORTB
     dfe:	8f ef       	ldi	r24, 0xFF	; 255
     e00:	8a b9       	out	0x0a, r24	; 10
ADCSRA |= (1 << ADEN) |               // Analog-Digital enable bit
     e02:	80 91 7a 00 	lds	r24, 0x007A
     e06:	83 68       	ori	r24, 0x83	; 131
     e08:	80 93 7a 00 	sts	0x007A, r24
          (1 << ADPS1)|               // set prescaler to 8    (clock / 8)
          (1 << ADPS0);               // set prescaler to 8    (doc Atmega168 23.8.2 p.258)
 
ADMUX |=  (0 << REFS1) |
     e0c:	80 91 7c 00 	lds	r24, 0x007C
     e10:	80 93 7c 00 	sts	0x007C, r24
	// set the clock prescaler. First write CLKPCE to enable setting of clock the
	// next four instructions.
	CLKPR=(1<<CLKPCE);
	CLKPR=0; // 8 MHZ
	init_adc();
	delay_ms(10);
     e14:	8a e0       	ldi	r24, 0x0A	; 10
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	0e 94 66 07 	call	0xecc	; 0xecc <delay_ms>
	
	/* enable PB0, reset as output */
	DDRB|= (1<<DDB0);
     e1c:	20 9a       	sbi	0x04, 0	; 4

	/* enable PD2/INT0, as input */
	DDRD&= ~(1<<DDD2);
     e1e:	52 98       	cbi	0x0a, 2	; 10

	/* set output to gnd, reset the ethernet chip */
	PORTB &= ~(1<<PB0);
     e20:	28 98       	cbi	0x05, 0	; 5
	delay_ms(10);
     e22:	8a e0       	ldi	r24, 0x0A	; 10
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	0e 94 66 07 	call	0xecc	; 0xecc <delay_ms>
	/* set output to Vcc, reset inactive */
	PORTB|= (1<<PB0);
     e2a:	28 9a       	sbi	0x05, 0	; 5
	delay_ms(200);
     e2c:	88 ec       	ldi	r24, 0xC8	; 200
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	0e 94 66 07 	call	0xecc	; 0xecc <delay_ms>
	
	/*initialize enc28j60*/
	enc28j60Init(mymac);
     e34:	8d e3       	ldi	r24, 0x3D	; 61
     e36:	91 e0       	ldi	r25, 0x01	; 1
     e38:	0e 94 ee 01 	call	0x3dc	; 0x3dc <enc28j60Init>
	delay_ms(20);
     e3c:	84 e1       	ldi	r24, 0x14	; 20
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	0e 94 66 07 	call	0xecc	; 0xecc <delay_ms>
	
	// LED
	/* enable PB1, LED as output */
	DDRB|= (1<<DDB1);
     e44:	21 9a       	sbi	0x04, 1	; 4

	/* set output to Vcc, LED off */
	PORTB|= (1<<PB1);
     e46:	29 9a       	sbi	0x05, 1	; 5

	// the transistor on PD7
	DDRD|= (1<<DDD7);
     e48:	57 9a       	sbi	0x0a, 7	; 10
	PORTD &= ~(1<<PD7);// transistor off
     e4a:	5f 98       	cbi	0x0b, 7	; 11
	/* Magjack leds configuration, see enc28j60 datasheet, page 11 */
	// LEDB=yellow LEDA=green
	//
	// 0x476 is PHLCON LEDA=links status, LEDB=receive/transmit
	// enc28j60PhyWrite(PHLCON,0b0000 0100 0111 01 10);
	enc28j60PhyWrite(PHLCON,0x476);
     e4c:	84 e1       	ldi	r24, 0x14	; 20
     e4e:	66 e7       	ldi	r22, 0x76	; 118
     e50:	74 e0       	ldi	r23, 0x04	; 4
     e52:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <enc28j60PhyWrite>
	delay_ms(20);
     e56:	84 e1       	ldi	r24, 0x14	; 20
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	0e 94 66 07 	call	0xecc	; 0xecc <delay_ms>
	
	/* set output to GND, red LED on */
	PORTB &= ~(1<<PB1);
     e5e:	29 98       	cbi	0x05, 1	; 5
	i=1;

	//init the ethernet/ip layer:
	init_ip_arp_udp(mymac,myip);
     e60:	8d e3       	ldi	r24, 0x3D	; 61
     e62:	91 e0       	ldi	r25, 0x01	; 1
     e64:	6f e2       	ldi	r22, 0x2F	; 47
     e66:	71 e0       	ldi	r23, 0x01	; 1
     e68:	0e 94 12 03 	call	0x624	; 0x624 <init_ip_arp_udp>
		plen = enc28j60PacketReceive(BUFFER_SIZE, buf);
		goADC();
		/*plen will ne unequal to zero if there is a valid 
		 * packet (without crc error) */
		if(plen!=0){
			memset(command,'\0', (int) sizeof(command));
     e6c:	fe e1       	ldi	r31, 0x1E	; 30
     e6e:	ff 2e       	mov	r15, r31
     e70:	8e 01       	movw	r16, r28
     e72:	0f 5f       	subi	r16, 0xFF	; 255
     e74:	1f 4f       	sbci	r17, 0xFF	; 255
	init_ip_arp_udp(mymac,myip);

	while(1){
		// get the next new packet:
		
		plen = enc28j60PacketReceive(BUFFER_SIZE, buf);
     e76:	8a ef       	ldi	r24, 0xFA	; 250
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	62 e5       	ldi	r22, 0x52	; 82
     e7c:	71 e0       	ldi	r23, 0x01	; 1
     e7e:	0e 94 6d 01 	call	0x2da	; 0x2da <enc28j60PacketReceive>
     e82:	90 93 4e 02 	sts	0x024E, r25
     e86:	80 93 4d 02 	sts	0x024D, r24
		goADC();
     e8a:	0e 94 93 06 	call	0xd26	; 0xd26 <goADC>
		/*plen will ne unequal to zero if there is a valid 
		 * packet (without crc error) */
		if(plen!=0){
     e8e:	80 91 4d 02 	lds	r24, 0x024D
     e92:	90 91 4e 02 	lds	r25, 0x024E
     e96:	89 2b       	or	r24, r25
     e98:	71 f3       	breq	.-36     	; 0xe76 <main+0x9c>
			memset(command,'\0', (int) sizeof(command));
     e9a:	f8 01       	movw	r30, r16
     e9c:	8f 2d       	mov	r24, r15
     e9e:	11 92       	st	Z+, r1
     ea0:	8a 95       	dec	r24
     ea2:	e9 f7       	brne	.-6      	; 0xe9e <main+0xc4>
			cmdresult = parsecom(command);
     ea4:	c8 01       	movw	r24, r16
     ea6:	0e 94 1a 06 	call	0xc34	; 0xc34 <parsecom>
			if (cmdresult == 1){
     eaa:	81 30       	cpi	r24, 0x01	; 1
     eac:	21 f7       	brne	.-56     	; 0xe76 <main+0x9c>
				//putmsg("jeghaderdederlange");
				//putmsg(command);
				
				if (strcmp(command,"chgip") == 0){
     eae:	c8 01       	movw	r24, r16
     eb0:	61 e1       	ldi	r22, 0x11	; 17
     eb2:	71 e0       	ldi	r23, 0x01	; 1
     eb4:	0e 94 7e 07 	call	0xefc	; 0xefc <strcmp>
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	19 f4       	brne	.+6      	; 0xec2 <main+0xe8>
					//putmsg("Changing IP");
					//putmsg("Changing IP2");
					goADC();
     ebc:	0e 94 93 06 	call	0xd26	; 0xd26 <goADC>
     ec0:	da cf       	rjmp	.-76     	; 0xe76 <main+0x9c>
					//init_ip_arp_udp(mymac,newip);
				}
				else{
					putmsg("Bad Command or filename");
     ec2:	87 e1       	ldi	r24, 0x17	; 23
     ec4:	91 e0       	ldi	r25, 0x01	; 1
     ec6:	0e 94 75 06 	call	0xcea	; 0xcea <putmsg>
     eca:	d5 cf       	rjmp	.-86     	; 0xe76 <main+0x9c>

00000ecc <delay_ms>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ecc:	20 e8       	ldi	r18, 0x80	; 128
     ece:	37 e0       	ldi	r19, 0x07	; 7
     ed0:	04 c0       	rjmp	.+8      	; 0xeda <delay_ms+0xe>
     ed2:	f9 01       	movw	r30, r18
     ed4:	31 97       	sbiw	r30, 0x01	; 1
     ed6:	f1 f7       	brne	.-4      	; 0xed4 <delay_ms+0x8>
        // we use a calibrated macro. This is more
        // accurate and not so much compiler dependent
        // as self made code.
        while(ms){
                _delay_ms(0.96);
                ms--;
     ed8:	01 97       	sbiw	r24, 0x01	; 1
/* delay for a minimum of <ms> */
{
        // we use a calibrated macro. This is more
        // accurate and not so much compiler dependent
        // as self made code.
        while(ms){
     eda:	00 97       	sbiw	r24, 0x00	; 0
     edc:	d1 f7       	brne	.-12     	; 0xed2 <delay_ms+0x6>
                _delay_ms(0.96);
                ms--;
        }
}
     ede:	08 95       	ret

00000ee0 <wd_init>:

void wd_init(void)
{
        // timeout the watchdog after 2 sec:
        wdt_enable(WDTO_2S);
     ee0:	2f e0       	ldi	r18, 0x0F	; 15
     ee2:	88 e1       	ldi	r24, 0x18	; 24
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	f8 94       	cli
     eea:	a8 95       	wdr
     eec:	80 93 60 00 	sts	0x0060, r24
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	20 93 60 00 	sts	0x0060, r18
}
     ef6:	08 95       	ret

00000ef8 <wd_kick>:

void wd_kick(void)
{
        wdt_reset();
     ef8:	a8 95       	wdr
}
     efa:	08 95       	ret

00000efc <strcmp>:
     efc:	fb 01       	movw	r30, r22
     efe:	dc 01       	movw	r26, r24
     f00:	8d 91       	ld	r24, X+
     f02:	01 90       	ld	r0, Z+
     f04:	80 19       	sub	r24, r0
     f06:	01 10       	cpse	r0, r1
     f08:	d9 f3       	breq	.-10     	; 0xf00 <strcmp+0x4>
     f0a:	99 0b       	sbc	r25, r25
     f0c:	08 95       	ret

00000f0e <sprintf>:
     f0e:	ae e0       	ldi	r26, 0x0E	; 14
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	ed e8       	ldi	r30, 0x8D	; 141
     f14:	f7 e0       	ldi	r31, 0x07	; 7
     f16:	0c 94 36 0a 	jmp	0x146c	; 0x146c <__prologue_saves__+0x1c>
     f1a:	0d 89       	ldd	r16, Y+21	; 0x15
     f1c:	1e 89       	ldd	r17, Y+22	; 0x16
     f1e:	86 e0       	ldi	r24, 0x06	; 6
     f20:	8c 83       	std	Y+4, r24	; 0x04
     f22:	1a 83       	std	Y+2, r17	; 0x02
     f24:	09 83       	std	Y+1, r16	; 0x01
     f26:	8f ef       	ldi	r24, 0xFF	; 255
     f28:	9f e7       	ldi	r25, 0x7F	; 127
     f2a:	9e 83       	std	Y+6, r25	; 0x06
     f2c:	8d 83       	std	Y+5, r24	; 0x05
     f2e:	9e 01       	movw	r18, r28
     f30:	27 5e       	subi	r18, 0xE7	; 231
     f32:	3f 4f       	sbci	r19, 0xFF	; 255
     f34:	ce 01       	movw	r24, r28
     f36:	01 96       	adiw	r24, 0x01	; 1
     f38:	6f 89       	ldd	r22, Y+23	; 0x17
     f3a:	78 8d       	ldd	r23, Y+24	; 0x18
     f3c:	a9 01       	movw	r20, r18
     f3e:	0e 94 ab 07 	call	0xf56	; 0xf56 <vfprintf>
     f42:	2f 81       	ldd	r18, Y+7	; 0x07
     f44:	38 85       	ldd	r19, Y+8	; 0x08
     f46:	02 0f       	add	r16, r18
     f48:	13 1f       	adc	r17, r19
     f4a:	f8 01       	movw	r30, r16
     f4c:	10 82       	st	Z, r1
     f4e:	2e 96       	adiw	r28, 0x0e	; 14
     f50:	e4 e0       	ldi	r30, 0x04	; 4
     f52:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__epilogue_restores__+0x1c>

00000f56 <vfprintf>:
     f56:	ab e0       	ldi	r26, 0x0B	; 11
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e1 eb       	ldi	r30, 0xB1	; 177
     f5c:	f7 e0       	ldi	r31, 0x07	; 7
     f5e:	0c 94 28 0a 	jmp	0x1450	; 0x1450 <__prologue_saves__>
     f62:	3c 01       	movw	r6, r24
     f64:	2b 01       	movw	r4, r22
     f66:	5a 01       	movw	r10, r20
     f68:	fc 01       	movw	r30, r24
     f6a:	17 82       	std	Z+7, r1	; 0x07
     f6c:	16 82       	std	Z+6, r1	; 0x06
     f6e:	83 81       	ldd	r24, Z+3	; 0x03
     f70:	81 fd       	sbrc	r24, 1
     f72:	03 c0       	rjmp	.+6      	; 0xf7a <vfprintf+0x24>
     f74:	6f ef       	ldi	r22, 0xFF	; 255
     f76:	7f ef       	ldi	r23, 0xFF	; 255
     f78:	c6 c1       	rjmp	.+908    	; 0x1306 <vfprintf+0x3b0>
     f7a:	9a e0       	ldi	r25, 0x0A	; 10
     f7c:	89 2e       	mov	r8, r25
     f7e:	1e 01       	movw	r2, r28
     f80:	08 94       	sec
     f82:	21 1c       	adc	r2, r1
     f84:	31 1c       	adc	r3, r1
     f86:	f3 01       	movw	r30, r6
     f88:	23 81       	ldd	r18, Z+3	; 0x03
     f8a:	f2 01       	movw	r30, r4
     f8c:	23 fd       	sbrc	r18, 3
     f8e:	85 91       	lpm	r24, Z+
     f90:	23 ff       	sbrs	r18, 3
     f92:	81 91       	ld	r24, Z+
     f94:	2f 01       	movw	r4, r30
     f96:	88 23       	and	r24, r24
     f98:	09 f4       	brne	.+2      	; 0xf9c <vfprintf+0x46>
     f9a:	b2 c1       	rjmp	.+868    	; 0x1300 <vfprintf+0x3aa>
     f9c:	85 32       	cpi	r24, 0x25	; 37
     f9e:	39 f4       	brne	.+14     	; 0xfae <vfprintf+0x58>
     fa0:	23 fd       	sbrc	r18, 3
     fa2:	85 91       	lpm	r24, Z+
     fa4:	23 ff       	sbrs	r18, 3
     fa6:	81 91       	ld	r24, Z+
     fa8:	2f 01       	movw	r4, r30
     faa:	85 32       	cpi	r24, 0x25	; 37
     fac:	29 f4       	brne	.+10     	; 0xfb8 <vfprintf+0x62>
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	b3 01       	movw	r22, r6
     fb2:	0e 94 9e 09 	call	0x133c	; 0x133c <fputc>
     fb6:	e7 cf       	rjmp	.-50     	; 0xf86 <vfprintf+0x30>
     fb8:	98 2f       	mov	r25, r24
     fba:	ff 24       	eor	r15, r15
     fbc:	ee 24       	eor	r14, r14
     fbe:	99 24       	eor	r9, r9
     fc0:	ff e1       	ldi	r31, 0x1F	; 31
     fc2:	ff 15       	cp	r31, r15
     fc4:	d0 f0       	brcs	.+52     	; 0xffa <vfprintf+0xa4>
     fc6:	9b 32       	cpi	r25, 0x2B	; 43
     fc8:	69 f0       	breq	.+26     	; 0xfe4 <vfprintf+0x8e>
     fca:	9c 32       	cpi	r25, 0x2C	; 44
     fcc:	28 f4       	brcc	.+10     	; 0xfd8 <vfprintf+0x82>
     fce:	90 32       	cpi	r25, 0x20	; 32
     fd0:	59 f0       	breq	.+22     	; 0xfe8 <vfprintf+0x92>
     fd2:	93 32       	cpi	r25, 0x23	; 35
     fd4:	91 f4       	brne	.+36     	; 0xffa <vfprintf+0xa4>
     fd6:	0e c0       	rjmp	.+28     	; 0xff4 <vfprintf+0x9e>
     fd8:	9d 32       	cpi	r25, 0x2D	; 45
     fda:	49 f0       	breq	.+18     	; 0xfee <vfprintf+0x98>
     fdc:	90 33       	cpi	r25, 0x30	; 48
     fde:	69 f4       	brne	.+26     	; 0xffa <vfprintf+0xa4>
     fe0:	41 e0       	ldi	r20, 0x01	; 1
     fe2:	24 c0       	rjmp	.+72     	; 0x102c <vfprintf+0xd6>
     fe4:	52 e0       	ldi	r21, 0x02	; 2
     fe6:	f5 2a       	or	r15, r21
     fe8:	84 e0       	ldi	r24, 0x04	; 4
     fea:	f8 2a       	or	r15, r24
     fec:	28 c0       	rjmp	.+80     	; 0x103e <vfprintf+0xe8>
     fee:	98 e0       	ldi	r25, 0x08	; 8
     ff0:	f9 2a       	or	r15, r25
     ff2:	25 c0       	rjmp	.+74     	; 0x103e <vfprintf+0xe8>
     ff4:	e0 e1       	ldi	r30, 0x10	; 16
     ff6:	fe 2a       	or	r15, r30
     ff8:	22 c0       	rjmp	.+68     	; 0x103e <vfprintf+0xe8>
     ffa:	f7 fc       	sbrc	r15, 7
     ffc:	29 c0       	rjmp	.+82     	; 0x1050 <vfprintf+0xfa>
     ffe:	89 2f       	mov	r24, r25
    1000:	80 53       	subi	r24, 0x30	; 48
    1002:	8a 30       	cpi	r24, 0x0A	; 10
    1004:	70 f4       	brcc	.+28     	; 0x1022 <vfprintf+0xcc>
    1006:	f6 fe       	sbrs	r15, 6
    1008:	05 c0       	rjmp	.+10     	; 0x1014 <vfprintf+0xbe>
    100a:	98 9c       	mul	r9, r8
    100c:	90 2c       	mov	r9, r0
    100e:	11 24       	eor	r1, r1
    1010:	98 0e       	add	r9, r24
    1012:	15 c0       	rjmp	.+42     	; 0x103e <vfprintf+0xe8>
    1014:	e8 9c       	mul	r14, r8
    1016:	e0 2c       	mov	r14, r0
    1018:	11 24       	eor	r1, r1
    101a:	e8 0e       	add	r14, r24
    101c:	f0 e2       	ldi	r31, 0x20	; 32
    101e:	ff 2a       	or	r15, r31
    1020:	0e c0       	rjmp	.+28     	; 0x103e <vfprintf+0xe8>
    1022:	9e 32       	cpi	r25, 0x2E	; 46
    1024:	29 f4       	brne	.+10     	; 0x1030 <vfprintf+0xda>
    1026:	f6 fc       	sbrc	r15, 6
    1028:	6b c1       	rjmp	.+726    	; 0x1300 <vfprintf+0x3aa>
    102a:	40 e4       	ldi	r20, 0x40	; 64
    102c:	f4 2a       	or	r15, r20
    102e:	07 c0       	rjmp	.+14     	; 0x103e <vfprintf+0xe8>
    1030:	9c 36       	cpi	r25, 0x6C	; 108
    1032:	19 f4       	brne	.+6      	; 0x103a <vfprintf+0xe4>
    1034:	50 e8       	ldi	r21, 0x80	; 128
    1036:	f5 2a       	or	r15, r21
    1038:	02 c0       	rjmp	.+4      	; 0x103e <vfprintf+0xe8>
    103a:	98 36       	cpi	r25, 0x68	; 104
    103c:	49 f4       	brne	.+18     	; 0x1050 <vfprintf+0xfa>
    103e:	f2 01       	movw	r30, r4
    1040:	23 fd       	sbrc	r18, 3
    1042:	95 91       	lpm	r25, Z+
    1044:	23 ff       	sbrs	r18, 3
    1046:	91 91       	ld	r25, Z+
    1048:	2f 01       	movw	r4, r30
    104a:	99 23       	and	r25, r25
    104c:	09 f0       	breq	.+2      	; 0x1050 <vfprintf+0xfa>
    104e:	b8 cf       	rjmp	.-144    	; 0xfc0 <vfprintf+0x6a>
    1050:	89 2f       	mov	r24, r25
    1052:	85 54       	subi	r24, 0x45	; 69
    1054:	83 30       	cpi	r24, 0x03	; 3
    1056:	18 f0       	brcs	.+6      	; 0x105e <vfprintf+0x108>
    1058:	80 52       	subi	r24, 0x20	; 32
    105a:	83 30       	cpi	r24, 0x03	; 3
    105c:	38 f4       	brcc	.+14     	; 0x106c <vfprintf+0x116>
    105e:	44 e0       	ldi	r20, 0x04	; 4
    1060:	50 e0       	ldi	r21, 0x00	; 0
    1062:	a4 0e       	add	r10, r20
    1064:	b5 1e       	adc	r11, r21
    1066:	5f e3       	ldi	r21, 0x3F	; 63
    1068:	59 83       	std	Y+1, r21	; 0x01
    106a:	0f c0       	rjmp	.+30     	; 0x108a <vfprintf+0x134>
    106c:	93 36       	cpi	r25, 0x63	; 99
    106e:	31 f0       	breq	.+12     	; 0x107c <vfprintf+0x126>
    1070:	93 37       	cpi	r25, 0x73	; 115
    1072:	79 f0       	breq	.+30     	; 0x1092 <vfprintf+0x13c>
    1074:	93 35       	cpi	r25, 0x53	; 83
    1076:	09 f0       	breq	.+2      	; 0x107a <vfprintf+0x124>
    1078:	56 c0       	rjmp	.+172    	; 0x1126 <vfprintf+0x1d0>
    107a:	20 c0       	rjmp	.+64     	; 0x10bc <vfprintf+0x166>
    107c:	f5 01       	movw	r30, r10
    107e:	80 81       	ld	r24, Z
    1080:	89 83       	std	Y+1, r24	; 0x01
    1082:	42 e0       	ldi	r20, 0x02	; 2
    1084:	50 e0       	ldi	r21, 0x00	; 0
    1086:	a4 0e       	add	r10, r20
    1088:	b5 1e       	adc	r11, r21
    108a:	61 01       	movw	r12, r2
    108c:	01 e0       	ldi	r16, 0x01	; 1
    108e:	10 e0       	ldi	r17, 0x00	; 0
    1090:	12 c0       	rjmp	.+36     	; 0x10b6 <vfprintf+0x160>
    1092:	f5 01       	movw	r30, r10
    1094:	c0 80       	ld	r12, Z
    1096:	d1 80       	ldd	r13, Z+1	; 0x01
    1098:	f6 fc       	sbrc	r15, 6
    109a:	03 c0       	rjmp	.+6      	; 0x10a2 <vfprintf+0x14c>
    109c:	6f ef       	ldi	r22, 0xFF	; 255
    109e:	7f ef       	ldi	r23, 0xFF	; 255
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <vfprintf+0x150>
    10a2:	69 2d       	mov	r22, r9
    10a4:	70 e0       	ldi	r23, 0x00	; 0
    10a6:	42 e0       	ldi	r20, 0x02	; 2
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	a4 0e       	add	r10, r20
    10ac:	b5 1e       	adc	r11, r21
    10ae:	c6 01       	movw	r24, r12
    10b0:	0e 94 93 09 	call	0x1326	; 0x1326 <strnlen>
    10b4:	8c 01       	movw	r16, r24
    10b6:	5f e7       	ldi	r21, 0x7F	; 127
    10b8:	f5 22       	and	r15, r21
    10ba:	14 c0       	rjmp	.+40     	; 0x10e4 <vfprintf+0x18e>
    10bc:	f5 01       	movw	r30, r10
    10be:	c0 80       	ld	r12, Z
    10c0:	d1 80       	ldd	r13, Z+1	; 0x01
    10c2:	f6 fc       	sbrc	r15, 6
    10c4:	03 c0       	rjmp	.+6      	; 0x10cc <vfprintf+0x176>
    10c6:	6f ef       	ldi	r22, 0xFF	; 255
    10c8:	7f ef       	ldi	r23, 0xFF	; 255
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <vfprintf+0x17a>
    10cc:	69 2d       	mov	r22, r9
    10ce:	70 e0       	ldi	r23, 0x00	; 0
    10d0:	42 e0       	ldi	r20, 0x02	; 2
    10d2:	50 e0       	ldi	r21, 0x00	; 0
    10d4:	a4 0e       	add	r10, r20
    10d6:	b5 1e       	adc	r11, r21
    10d8:	c6 01       	movw	r24, r12
    10da:	0e 94 88 09 	call	0x1310	; 0x1310 <strnlen_P>
    10de:	8c 01       	movw	r16, r24
    10e0:	50 e8       	ldi	r21, 0x80	; 128
    10e2:	f5 2a       	or	r15, r21
    10e4:	f3 fe       	sbrs	r15, 3
    10e6:	07 c0       	rjmp	.+14     	; 0x10f6 <vfprintf+0x1a0>
    10e8:	1a c0       	rjmp	.+52     	; 0x111e <vfprintf+0x1c8>
    10ea:	80 e2       	ldi	r24, 0x20	; 32
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	b3 01       	movw	r22, r6
    10f0:	0e 94 9e 09 	call	0x133c	; 0x133c <fputc>
    10f4:	ea 94       	dec	r14
    10f6:	8e 2d       	mov	r24, r14
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	08 17       	cp	r16, r24
    10fc:	19 07       	cpc	r17, r25
    10fe:	a8 f3       	brcs	.-22     	; 0x10ea <vfprintf+0x194>
    1100:	0e c0       	rjmp	.+28     	; 0x111e <vfprintf+0x1c8>
    1102:	f6 01       	movw	r30, r12
    1104:	f7 fc       	sbrc	r15, 7
    1106:	85 91       	lpm	r24, Z+
    1108:	f7 fe       	sbrs	r15, 7
    110a:	81 91       	ld	r24, Z+
    110c:	6f 01       	movw	r12, r30
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	b3 01       	movw	r22, r6
    1112:	0e 94 9e 09 	call	0x133c	; 0x133c <fputc>
    1116:	e1 10       	cpse	r14, r1
    1118:	ea 94       	dec	r14
    111a:	01 50       	subi	r16, 0x01	; 1
    111c:	10 40       	sbci	r17, 0x00	; 0
    111e:	01 15       	cp	r16, r1
    1120:	11 05       	cpc	r17, r1
    1122:	79 f7       	brne	.-34     	; 0x1102 <vfprintf+0x1ac>
    1124:	ea c0       	rjmp	.+468    	; 0x12fa <vfprintf+0x3a4>
    1126:	94 36       	cpi	r25, 0x64	; 100
    1128:	11 f0       	breq	.+4      	; 0x112e <vfprintf+0x1d8>
    112a:	99 36       	cpi	r25, 0x69	; 105
    112c:	69 f5       	brne	.+90     	; 0x1188 <vfprintf+0x232>
    112e:	f7 fe       	sbrs	r15, 7
    1130:	08 c0       	rjmp	.+16     	; 0x1142 <vfprintf+0x1ec>
    1132:	f5 01       	movw	r30, r10
    1134:	20 81       	ld	r18, Z
    1136:	31 81       	ldd	r19, Z+1	; 0x01
    1138:	42 81       	ldd	r20, Z+2	; 0x02
    113a:	53 81       	ldd	r21, Z+3	; 0x03
    113c:	84 e0       	ldi	r24, 0x04	; 4
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	0a c0       	rjmp	.+20     	; 0x1156 <vfprintf+0x200>
    1142:	f5 01       	movw	r30, r10
    1144:	80 81       	ld	r24, Z
    1146:	91 81       	ldd	r25, Z+1	; 0x01
    1148:	9c 01       	movw	r18, r24
    114a:	44 27       	eor	r20, r20
    114c:	37 fd       	sbrc	r19, 7
    114e:	40 95       	com	r20
    1150:	54 2f       	mov	r21, r20
    1152:	82 e0       	ldi	r24, 0x02	; 2
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	a8 0e       	add	r10, r24
    1158:	b9 1e       	adc	r11, r25
    115a:	9f e6       	ldi	r25, 0x6F	; 111
    115c:	f9 22       	and	r15, r25
    115e:	57 ff       	sbrs	r21, 7
    1160:	09 c0       	rjmp	.+18     	; 0x1174 <vfprintf+0x21e>
    1162:	50 95       	com	r21
    1164:	40 95       	com	r20
    1166:	30 95       	com	r19
    1168:	21 95       	neg	r18
    116a:	3f 4f       	sbci	r19, 0xFF	; 255
    116c:	4f 4f       	sbci	r20, 0xFF	; 255
    116e:	5f 4f       	sbci	r21, 0xFF	; 255
    1170:	e0 e8       	ldi	r30, 0x80	; 128
    1172:	fe 2a       	or	r15, r30
    1174:	ca 01       	movw	r24, r20
    1176:	b9 01       	movw	r22, r18
    1178:	a1 01       	movw	r20, r2
    117a:	2a e0       	ldi	r18, 0x0A	; 10
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	0e 94 ca 09 	call	0x1394	; 0x1394 <__ultoa_invert>
    1182:	d8 2e       	mov	r13, r24
    1184:	d2 18       	sub	r13, r2
    1186:	40 c0       	rjmp	.+128    	; 0x1208 <vfprintf+0x2b2>
    1188:	95 37       	cpi	r25, 0x75	; 117
    118a:	29 f4       	brne	.+10     	; 0x1196 <vfprintf+0x240>
    118c:	1f 2d       	mov	r17, r15
    118e:	1f 7e       	andi	r17, 0xEF	; 239
    1190:	2a e0       	ldi	r18, 0x0A	; 10
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	1d c0       	rjmp	.+58     	; 0x11d0 <vfprintf+0x27a>
    1196:	1f 2d       	mov	r17, r15
    1198:	19 7f       	andi	r17, 0xF9	; 249
    119a:	9f 36       	cpi	r25, 0x6F	; 111
    119c:	61 f0       	breq	.+24     	; 0x11b6 <vfprintf+0x260>
    119e:	90 37       	cpi	r25, 0x70	; 112
    11a0:	20 f4       	brcc	.+8      	; 0x11aa <vfprintf+0x254>
    11a2:	98 35       	cpi	r25, 0x58	; 88
    11a4:	09 f0       	breq	.+2      	; 0x11a8 <vfprintf+0x252>
    11a6:	ac c0       	rjmp	.+344    	; 0x1300 <vfprintf+0x3aa>
    11a8:	0f c0       	rjmp	.+30     	; 0x11c8 <vfprintf+0x272>
    11aa:	90 37       	cpi	r25, 0x70	; 112
    11ac:	39 f0       	breq	.+14     	; 0x11bc <vfprintf+0x266>
    11ae:	98 37       	cpi	r25, 0x78	; 120
    11b0:	09 f0       	breq	.+2      	; 0x11b4 <vfprintf+0x25e>
    11b2:	a6 c0       	rjmp	.+332    	; 0x1300 <vfprintf+0x3aa>
    11b4:	04 c0       	rjmp	.+8      	; 0x11be <vfprintf+0x268>
    11b6:	28 e0       	ldi	r18, 0x08	; 8
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	0a c0       	rjmp	.+20     	; 0x11d0 <vfprintf+0x27a>
    11bc:	10 61       	ori	r17, 0x10	; 16
    11be:	14 fd       	sbrc	r17, 4
    11c0:	14 60       	ori	r17, 0x04	; 4
    11c2:	20 e1       	ldi	r18, 0x10	; 16
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	04 c0       	rjmp	.+8      	; 0x11d0 <vfprintf+0x27a>
    11c8:	14 fd       	sbrc	r17, 4
    11ca:	16 60       	ori	r17, 0x06	; 6
    11cc:	20 e1       	ldi	r18, 0x10	; 16
    11ce:	32 e0       	ldi	r19, 0x02	; 2
    11d0:	17 ff       	sbrs	r17, 7
    11d2:	08 c0       	rjmp	.+16     	; 0x11e4 <vfprintf+0x28e>
    11d4:	f5 01       	movw	r30, r10
    11d6:	60 81       	ld	r22, Z
    11d8:	71 81       	ldd	r23, Z+1	; 0x01
    11da:	82 81       	ldd	r24, Z+2	; 0x02
    11dc:	93 81       	ldd	r25, Z+3	; 0x03
    11de:	44 e0       	ldi	r20, 0x04	; 4
    11e0:	50 e0       	ldi	r21, 0x00	; 0
    11e2:	08 c0       	rjmp	.+16     	; 0x11f4 <vfprintf+0x29e>
    11e4:	f5 01       	movw	r30, r10
    11e6:	80 81       	ld	r24, Z
    11e8:	91 81       	ldd	r25, Z+1	; 0x01
    11ea:	bc 01       	movw	r22, r24
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	42 e0       	ldi	r20, 0x02	; 2
    11f2:	50 e0       	ldi	r21, 0x00	; 0
    11f4:	a4 0e       	add	r10, r20
    11f6:	b5 1e       	adc	r11, r21
    11f8:	a1 01       	movw	r20, r2
    11fa:	0e 94 ca 09 	call	0x1394	; 0x1394 <__ultoa_invert>
    11fe:	d8 2e       	mov	r13, r24
    1200:	d2 18       	sub	r13, r2
    1202:	8f e7       	ldi	r24, 0x7F	; 127
    1204:	f8 2e       	mov	r15, r24
    1206:	f1 22       	and	r15, r17
    1208:	f6 fe       	sbrs	r15, 6
    120a:	0b c0       	rjmp	.+22     	; 0x1222 <vfprintf+0x2cc>
    120c:	5e ef       	ldi	r21, 0xFE	; 254
    120e:	f5 22       	and	r15, r21
    1210:	d9 14       	cp	r13, r9
    1212:	38 f4       	brcc	.+14     	; 0x1222 <vfprintf+0x2cc>
    1214:	f4 fe       	sbrs	r15, 4
    1216:	07 c0       	rjmp	.+14     	; 0x1226 <vfprintf+0x2d0>
    1218:	f2 fc       	sbrc	r15, 2
    121a:	05 c0       	rjmp	.+10     	; 0x1226 <vfprintf+0x2d0>
    121c:	8f ee       	ldi	r24, 0xEF	; 239
    121e:	f8 22       	and	r15, r24
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <vfprintf+0x2d0>
    1222:	1d 2d       	mov	r17, r13
    1224:	01 c0       	rjmp	.+2      	; 0x1228 <vfprintf+0x2d2>
    1226:	19 2d       	mov	r17, r9
    1228:	f4 fe       	sbrs	r15, 4
    122a:	0d c0       	rjmp	.+26     	; 0x1246 <vfprintf+0x2f0>
    122c:	fe 01       	movw	r30, r28
    122e:	ed 0d       	add	r30, r13
    1230:	f1 1d       	adc	r31, r1
    1232:	80 81       	ld	r24, Z
    1234:	80 33       	cpi	r24, 0x30	; 48
    1236:	19 f4       	brne	.+6      	; 0x123e <vfprintf+0x2e8>
    1238:	99 ee       	ldi	r25, 0xE9	; 233
    123a:	f9 22       	and	r15, r25
    123c:	08 c0       	rjmp	.+16     	; 0x124e <vfprintf+0x2f8>
    123e:	1f 5f       	subi	r17, 0xFF	; 255
    1240:	f2 fe       	sbrs	r15, 2
    1242:	05 c0       	rjmp	.+10     	; 0x124e <vfprintf+0x2f8>
    1244:	03 c0       	rjmp	.+6      	; 0x124c <vfprintf+0x2f6>
    1246:	8f 2d       	mov	r24, r15
    1248:	86 78       	andi	r24, 0x86	; 134
    124a:	09 f0       	breq	.+2      	; 0x124e <vfprintf+0x2f8>
    124c:	1f 5f       	subi	r17, 0xFF	; 255
    124e:	0f 2d       	mov	r16, r15
    1250:	f3 fc       	sbrc	r15, 3
    1252:	14 c0       	rjmp	.+40     	; 0x127c <vfprintf+0x326>
    1254:	f0 fe       	sbrs	r15, 0
    1256:	0f c0       	rjmp	.+30     	; 0x1276 <vfprintf+0x320>
    1258:	1e 15       	cp	r17, r14
    125a:	10 f0       	brcs	.+4      	; 0x1260 <vfprintf+0x30a>
    125c:	9d 2c       	mov	r9, r13
    125e:	0b c0       	rjmp	.+22     	; 0x1276 <vfprintf+0x320>
    1260:	9d 2c       	mov	r9, r13
    1262:	9e 0c       	add	r9, r14
    1264:	91 1a       	sub	r9, r17
    1266:	1e 2d       	mov	r17, r14
    1268:	06 c0       	rjmp	.+12     	; 0x1276 <vfprintf+0x320>
    126a:	80 e2       	ldi	r24, 0x20	; 32
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	b3 01       	movw	r22, r6
    1270:	0e 94 9e 09 	call	0x133c	; 0x133c <fputc>
    1274:	1f 5f       	subi	r17, 0xFF	; 255
    1276:	1e 15       	cp	r17, r14
    1278:	c0 f3       	brcs	.-16     	; 0x126a <vfprintf+0x314>
    127a:	04 c0       	rjmp	.+8      	; 0x1284 <vfprintf+0x32e>
    127c:	1e 15       	cp	r17, r14
    127e:	10 f4       	brcc	.+4      	; 0x1284 <vfprintf+0x32e>
    1280:	e1 1a       	sub	r14, r17
    1282:	01 c0       	rjmp	.+2      	; 0x1286 <vfprintf+0x330>
    1284:	ee 24       	eor	r14, r14
    1286:	04 ff       	sbrs	r16, 4
    1288:	0f c0       	rjmp	.+30     	; 0x12a8 <vfprintf+0x352>
    128a:	80 e3       	ldi	r24, 0x30	; 48
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	b3 01       	movw	r22, r6
    1290:	0e 94 9e 09 	call	0x133c	; 0x133c <fputc>
    1294:	02 ff       	sbrs	r16, 2
    1296:	1d c0       	rjmp	.+58     	; 0x12d2 <vfprintf+0x37c>
    1298:	01 fd       	sbrc	r16, 1
    129a:	03 c0       	rjmp	.+6      	; 0x12a2 <vfprintf+0x34c>
    129c:	88 e7       	ldi	r24, 0x78	; 120
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	0e c0       	rjmp	.+28     	; 0x12be <vfprintf+0x368>
    12a2:	88 e5       	ldi	r24, 0x58	; 88
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	0b c0       	rjmp	.+22     	; 0x12be <vfprintf+0x368>
    12a8:	80 2f       	mov	r24, r16
    12aa:	86 78       	andi	r24, 0x86	; 134
    12ac:	91 f0       	breq	.+36     	; 0x12d2 <vfprintf+0x37c>
    12ae:	01 ff       	sbrs	r16, 1
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <vfprintf+0x360>
    12b2:	8b e2       	ldi	r24, 0x2B	; 43
    12b4:	01 c0       	rjmp	.+2      	; 0x12b8 <vfprintf+0x362>
    12b6:	80 e2       	ldi	r24, 0x20	; 32
    12b8:	f7 fc       	sbrc	r15, 7
    12ba:	8d e2       	ldi	r24, 0x2D	; 45
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	b3 01       	movw	r22, r6
    12c0:	0e 94 9e 09 	call	0x133c	; 0x133c <fputc>
    12c4:	06 c0       	rjmp	.+12     	; 0x12d2 <vfprintf+0x37c>
    12c6:	80 e3       	ldi	r24, 0x30	; 48
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	b3 01       	movw	r22, r6
    12cc:	0e 94 9e 09 	call	0x133c	; 0x133c <fputc>
    12d0:	9a 94       	dec	r9
    12d2:	d9 14       	cp	r13, r9
    12d4:	c0 f3       	brcs	.-16     	; 0x12c6 <vfprintf+0x370>
    12d6:	da 94       	dec	r13
    12d8:	f1 01       	movw	r30, r2
    12da:	ed 0d       	add	r30, r13
    12dc:	f1 1d       	adc	r31, r1
    12de:	80 81       	ld	r24, Z
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	b3 01       	movw	r22, r6
    12e4:	0e 94 9e 09 	call	0x133c	; 0x133c <fputc>
    12e8:	dd 20       	and	r13, r13
    12ea:	a9 f7       	brne	.-22     	; 0x12d6 <vfprintf+0x380>
    12ec:	06 c0       	rjmp	.+12     	; 0x12fa <vfprintf+0x3a4>
    12ee:	80 e2       	ldi	r24, 0x20	; 32
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	b3 01       	movw	r22, r6
    12f4:	0e 94 9e 09 	call	0x133c	; 0x133c <fputc>
    12f8:	ea 94       	dec	r14
    12fa:	ee 20       	and	r14, r14
    12fc:	c1 f7       	brne	.-16     	; 0x12ee <vfprintf+0x398>
    12fe:	43 ce       	rjmp	.-890    	; 0xf86 <vfprintf+0x30>
    1300:	f3 01       	movw	r30, r6
    1302:	66 81       	ldd	r22, Z+6	; 0x06
    1304:	77 81       	ldd	r23, Z+7	; 0x07
    1306:	cb 01       	movw	r24, r22
    1308:	2b 96       	adiw	r28, 0x0b	; 11
    130a:	e2 e1       	ldi	r30, 0x12	; 18
    130c:	0c 94 44 0a 	jmp	0x1488	; 0x1488 <__epilogue_restores__>

00001310 <strnlen_P>:
    1310:	fc 01       	movw	r30, r24
    1312:	05 90       	lpm	r0, Z+
    1314:	61 50       	subi	r22, 0x01	; 1
    1316:	70 40       	sbci	r23, 0x00	; 0
    1318:	01 10       	cpse	r0, r1
    131a:	d8 f7       	brcc	.-10     	; 0x1312 <strnlen_P+0x2>
    131c:	80 95       	com	r24
    131e:	90 95       	com	r25
    1320:	8e 0f       	add	r24, r30
    1322:	9f 1f       	adc	r25, r31
    1324:	08 95       	ret

00001326 <strnlen>:
    1326:	fc 01       	movw	r30, r24
    1328:	61 50       	subi	r22, 0x01	; 1
    132a:	70 40       	sbci	r23, 0x00	; 0
    132c:	01 90       	ld	r0, Z+
    132e:	01 10       	cpse	r0, r1
    1330:	d8 f7       	brcc	.-10     	; 0x1328 <strnlen+0x2>
    1332:	80 95       	com	r24
    1334:	90 95       	com	r25
    1336:	8e 0f       	add	r24, r30
    1338:	9f 1f       	adc	r25, r31
    133a:	08 95       	ret

0000133c <fputc>:
    133c:	0f 93       	push	r16
    133e:	1f 93       	push	r17
    1340:	cf 93       	push	r28
    1342:	df 93       	push	r29
    1344:	8c 01       	movw	r16, r24
    1346:	eb 01       	movw	r28, r22
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	81 ff       	sbrs	r24, 1
    134c:	1b c0       	rjmp	.+54     	; 0x1384 <fputc+0x48>
    134e:	82 ff       	sbrs	r24, 2
    1350:	0d c0       	rjmp	.+26     	; 0x136c <fputc+0x30>
    1352:	2e 81       	ldd	r18, Y+6	; 0x06
    1354:	3f 81       	ldd	r19, Y+7	; 0x07
    1356:	8c 81       	ldd	r24, Y+4	; 0x04
    1358:	9d 81       	ldd	r25, Y+5	; 0x05
    135a:	28 17       	cp	r18, r24
    135c:	39 07       	cpc	r19, r25
    135e:	64 f4       	brge	.+24     	; 0x1378 <fputc+0x3c>
    1360:	e8 81       	ld	r30, Y
    1362:	f9 81       	ldd	r31, Y+1	; 0x01
    1364:	01 93       	st	Z+, r16
    1366:	f9 83       	std	Y+1, r31	; 0x01
    1368:	e8 83       	st	Y, r30
    136a:	06 c0       	rjmp	.+12     	; 0x1378 <fputc+0x3c>
    136c:	e8 85       	ldd	r30, Y+8	; 0x08
    136e:	f9 85       	ldd	r31, Y+9	; 0x09
    1370:	80 2f       	mov	r24, r16
    1372:	09 95       	icall
    1374:	89 2b       	or	r24, r25
    1376:	31 f4       	brne	.+12     	; 0x1384 <fputc+0x48>
    1378:	8e 81       	ldd	r24, Y+6	; 0x06
    137a:	9f 81       	ldd	r25, Y+7	; 0x07
    137c:	01 96       	adiw	r24, 0x01	; 1
    137e:	9f 83       	std	Y+7, r25	; 0x07
    1380:	8e 83       	std	Y+6, r24	; 0x06
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <fputc+0x4c>
    1384:	0f ef       	ldi	r16, 0xFF	; 255
    1386:	1f ef       	ldi	r17, 0xFF	; 255
    1388:	c8 01       	movw	r24, r16
    138a:	df 91       	pop	r29
    138c:	cf 91       	pop	r28
    138e:	1f 91       	pop	r17
    1390:	0f 91       	pop	r16
    1392:	08 95       	ret

00001394 <__ultoa_invert>:
    1394:	fa 01       	movw	r30, r20
    1396:	aa 27       	eor	r26, r26
    1398:	28 30       	cpi	r18, 0x08	; 8
    139a:	51 f1       	breq	.+84     	; 0x13f0 <__ultoa_invert+0x5c>
    139c:	20 31       	cpi	r18, 0x10	; 16
    139e:	81 f1       	breq	.+96     	; 0x1400 <__ultoa_invert+0x6c>
    13a0:	e8 94       	clt
    13a2:	6f 93       	push	r22
    13a4:	6e 7f       	andi	r22, 0xFE	; 254
    13a6:	6e 5f       	subi	r22, 0xFE	; 254
    13a8:	7f 4f       	sbci	r23, 0xFF	; 255
    13aa:	8f 4f       	sbci	r24, 0xFF	; 255
    13ac:	9f 4f       	sbci	r25, 0xFF	; 255
    13ae:	af 4f       	sbci	r26, 0xFF	; 255
    13b0:	b1 e0       	ldi	r27, 0x01	; 1
    13b2:	3e d0       	rcall	.+124    	; 0x1430 <__ultoa_invert+0x9c>
    13b4:	b4 e0       	ldi	r27, 0x04	; 4
    13b6:	3c d0       	rcall	.+120    	; 0x1430 <__ultoa_invert+0x9c>
    13b8:	67 0f       	add	r22, r23
    13ba:	78 1f       	adc	r23, r24
    13bc:	89 1f       	adc	r24, r25
    13be:	9a 1f       	adc	r25, r26
    13c0:	a1 1d       	adc	r26, r1
    13c2:	68 0f       	add	r22, r24
    13c4:	79 1f       	adc	r23, r25
    13c6:	8a 1f       	adc	r24, r26
    13c8:	91 1d       	adc	r25, r1
    13ca:	a1 1d       	adc	r26, r1
    13cc:	6a 0f       	add	r22, r26
    13ce:	71 1d       	adc	r23, r1
    13d0:	81 1d       	adc	r24, r1
    13d2:	91 1d       	adc	r25, r1
    13d4:	a1 1d       	adc	r26, r1
    13d6:	20 d0       	rcall	.+64     	; 0x1418 <__ultoa_invert+0x84>
    13d8:	09 f4       	brne	.+2      	; 0x13dc <__ultoa_invert+0x48>
    13da:	68 94       	set
    13dc:	3f 91       	pop	r19
    13de:	2a e0       	ldi	r18, 0x0A	; 10
    13e0:	26 9f       	mul	r18, r22
    13e2:	11 24       	eor	r1, r1
    13e4:	30 19       	sub	r19, r0
    13e6:	30 5d       	subi	r19, 0xD0	; 208
    13e8:	31 93       	st	Z+, r19
    13ea:	de f6       	brtc	.-74     	; 0x13a2 <__ultoa_invert+0xe>
    13ec:	cf 01       	movw	r24, r30
    13ee:	08 95       	ret
    13f0:	46 2f       	mov	r20, r22
    13f2:	47 70       	andi	r20, 0x07	; 7
    13f4:	40 5d       	subi	r20, 0xD0	; 208
    13f6:	41 93       	st	Z+, r20
    13f8:	b3 e0       	ldi	r27, 0x03	; 3
    13fa:	0f d0       	rcall	.+30     	; 0x141a <__ultoa_invert+0x86>
    13fc:	c9 f7       	brne	.-14     	; 0x13f0 <__ultoa_invert+0x5c>
    13fe:	f6 cf       	rjmp	.-20     	; 0x13ec <__ultoa_invert+0x58>
    1400:	46 2f       	mov	r20, r22
    1402:	4f 70       	andi	r20, 0x0F	; 15
    1404:	40 5d       	subi	r20, 0xD0	; 208
    1406:	4a 33       	cpi	r20, 0x3A	; 58
    1408:	18 f0       	brcs	.+6      	; 0x1410 <__ultoa_invert+0x7c>
    140a:	49 5d       	subi	r20, 0xD9	; 217
    140c:	31 fd       	sbrc	r19, 1
    140e:	40 52       	subi	r20, 0x20	; 32
    1410:	41 93       	st	Z+, r20
    1412:	02 d0       	rcall	.+4      	; 0x1418 <__ultoa_invert+0x84>
    1414:	a9 f7       	brne	.-22     	; 0x1400 <__ultoa_invert+0x6c>
    1416:	ea cf       	rjmp	.-44     	; 0x13ec <__ultoa_invert+0x58>
    1418:	b4 e0       	ldi	r27, 0x04	; 4
    141a:	a6 95       	lsr	r26
    141c:	97 95       	ror	r25
    141e:	87 95       	ror	r24
    1420:	77 95       	ror	r23
    1422:	67 95       	ror	r22
    1424:	ba 95       	dec	r27
    1426:	c9 f7       	brne	.-14     	; 0x141a <__ultoa_invert+0x86>
    1428:	00 97       	sbiw	r24, 0x00	; 0
    142a:	61 05       	cpc	r22, r1
    142c:	71 05       	cpc	r23, r1
    142e:	08 95       	ret
    1430:	9b 01       	movw	r18, r22
    1432:	ac 01       	movw	r20, r24
    1434:	0a 2e       	mov	r0, r26
    1436:	06 94       	lsr	r0
    1438:	57 95       	ror	r21
    143a:	47 95       	ror	r20
    143c:	37 95       	ror	r19
    143e:	27 95       	ror	r18
    1440:	ba 95       	dec	r27
    1442:	c9 f7       	brne	.-14     	; 0x1436 <__ultoa_invert+0xa2>
    1444:	62 0f       	add	r22, r18
    1446:	73 1f       	adc	r23, r19
    1448:	84 1f       	adc	r24, r20
    144a:	95 1f       	adc	r25, r21
    144c:	a0 1d       	adc	r26, r0
    144e:	08 95       	ret

00001450 <__prologue_saves__>:
    1450:	2f 92       	push	r2
    1452:	3f 92       	push	r3
    1454:	4f 92       	push	r4
    1456:	5f 92       	push	r5
    1458:	6f 92       	push	r6
    145a:	7f 92       	push	r7
    145c:	8f 92       	push	r8
    145e:	9f 92       	push	r9
    1460:	af 92       	push	r10
    1462:	bf 92       	push	r11
    1464:	cf 92       	push	r12
    1466:	df 92       	push	r13
    1468:	ef 92       	push	r14
    146a:	ff 92       	push	r15
    146c:	0f 93       	push	r16
    146e:	1f 93       	push	r17
    1470:	cf 93       	push	r28
    1472:	df 93       	push	r29
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62
    1478:	ca 1b       	sub	r28, r26
    147a:	db 0b       	sbc	r29, r27
    147c:	0f b6       	in	r0, 0x3f	; 63
    147e:	f8 94       	cli
    1480:	de bf       	out	0x3e, r29	; 62
    1482:	0f be       	out	0x3f, r0	; 63
    1484:	cd bf       	out	0x3d, r28	; 61
    1486:	09 94       	ijmp

00001488 <__epilogue_restores__>:
    1488:	2a 88       	ldd	r2, Y+18	; 0x12
    148a:	39 88       	ldd	r3, Y+17	; 0x11
    148c:	48 88       	ldd	r4, Y+16	; 0x10
    148e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1490:	6e 84       	ldd	r6, Y+14	; 0x0e
    1492:	7d 84       	ldd	r7, Y+13	; 0x0d
    1494:	8c 84       	ldd	r8, Y+12	; 0x0c
    1496:	9b 84       	ldd	r9, Y+11	; 0x0b
    1498:	aa 84       	ldd	r10, Y+10	; 0x0a
    149a:	b9 84       	ldd	r11, Y+9	; 0x09
    149c:	c8 84       	ldd	r12, Y+8	; 0x08
    149e:	df 80       	ldd	r13, Y+7	; 0x07
    14a0:	ee 80       	ldd	r14, Y+6	; 0x06
    14a2:	fd 80       	ldd	r15, Y+5	; 0x05
    14a4:	0c 81       	ldd	r16, Y+4	; 0x04
    14a6:	1b 81       	ldd	r17, Y+3	; 0x03
    14a8:	aa 81       	ldd	r26, Y+2	; 0x02
    14aa:	b9 81       	ldd	r27, Y+1	; 0x01
    14ac:	ce 0f       	add	r28, r30
    14ae:	d1 1d       	adc	r29, r1
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	f8 94       	cli
    14b4:	de bf       	out	0x3e, r29	; 62
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	cd bf       	out	0x3d, r28	; 61
    14ba:	ed 01       	movw	r28, r26
    14bc:	08 95       	ret

000014be <_exit>:
    14be:	f8 94       	cli

000014c0 <__stop_program>:
    14c0:	ff cf       	rjmp	.-2      	; 0x14c0 <__stop_program>
