
node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002ac  00800100  00005b34  00005bc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005b34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006ff  008003ac  008003ac  00005e74  2**0
                  ALLOC
  3 .stab         0000183c  00000000  00000000  00005e74  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000152  00000000  00000000  000076b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007802  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000683  00000000  00000000  000079a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004cb8  00000000  00000000  00008025  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000140f  00000000  00000000  0000ccdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003f1a  00000000  00000000  0000e0ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005f0  00000000  00000000  00012008  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000eda  00000000  00000000  000125f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003e11  00000000  00000000  000134d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000005f3  00000000  00000000  000172e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000001a0  00000000  00000000  000178d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c4 00 	jmp	0x188	; 0x188 <__ctors_end>
       4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
       8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
       c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      10:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      14:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      18:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      1c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      20:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      24:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__vector_9>
      28:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      2c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      30:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      34:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      38:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      3c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      40:	0c 94 fd 21 	jmp	0x43fa	; 0x43fa <__vector_16>
      44:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      48:	0c 94 21 25 	jmp	0x4a42	; 0x4a42 <__vector_18>
      4c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      50:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      54:	0c 94 6d 22 	jmp	0x44da	; 0x44da <__vector_21>
      58:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      5c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      60:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      64:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      68:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      6c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      70:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      74:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      78:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      7c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      80:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      84:	0c 94 75 23 	jmp	0x46ea	; 0x46ea <__vector_33>
      88:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      8c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      90:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      94:	8a 17       	cp	r24, r26
      96:	92 17       	cp	r25, r18
      98:	e7 17       	cp	r30, r23
      9a:	ed 17       	cp	r30, r29
      9c:	aa 18       	sub	r10, r10
      9e:	aa 18       	sub	r10, r10
      a0:	aa 18       	sub	r10, r10
      a2:	aa 18       	sub	r10, r10
      a4:	aa 18       	sub	r10, r10
      a6:	aa 18       	sub	r10, r10
      a8:	72 18       	sub	r7, r2
      aa:	77 18       	sub	r7, r7
      ac:	79 18       	sub	r7, r9
      ae:	85 18       	sub	r8, r5
      b0:	98 18       	sub	r9, r8
      b2:	49 1c       	adc	r4, r9
      b4:	c6 1c       	adc	r12, r6
      b6:	3e 1d       	adc	r19, r14
      b8:	a1 1d       	adc	r26, r1
      ba:	db 1d       	adc	r29, r11
      bc:	2c 1e       	adc	r2, r28
      be:	70 1e       	adc	r7, r16
      c0:	08 1f       	adc	r16, r24
      c2:	b9 1f       	adc	r27, r25
      c4:	47 1c       	adc	r4, r7
      c6:	b5 20       	and	r11, r5

000000c8 <__c.2143>:
      c8:	72 63 3d 25 64 0a 00                                rc=%d..

000000cf <__c.2141>:
      cf:	4f 70 65 6e 69 6e 67 20 66 69 6c 65 20 25 73 0a     Opening file %s.
	...

000000e0 <__c.2139>:
      e0:	46 72 65 65 20 6c 6f 67 20 6e 72 20 25 64 0a 00     Free log nr %d..

000000f0 <__c.2137>:
      f0:	72 63 3d 25 64 0a 00                                rc=%d..

000000f7 <__c.2135>:
      f7:	6f 70 65 6e 20 64 69 72 20 0a 00                    open dir ..

00000102 <__c.2133>:
     102:	72 63 3d 25 64 0a 00                                rc=%d..

00000109 <__c.2131>:
     109:	49 6e 69 74 69 61 6c 69 7a 65 20 6c 6f 67 69 63     Initialize logic
     119:	61 6c 20 64 72 69 63 65 20 30 0a 00                 al drice 0..

00000125 <__c.2129>:
     125:	72 63 3d 25 64 0a 00                                rc=%d..

0000012c <__c.2127>:
     12c:	74 65 73 74 32 20 25 64 20 25 64 20 25 64 20 25     test2 %d %d %d %
     13c:	64 0a 00                                            d..

0000013f <__c.2125>:
     13f:	74 65 73 74 20 25 64 20 25 64 20 25 64 20 25 64     test %d %d %d %d
     14f:	0a 00                                               ..

00000151 <__c.2123>:
     151:	49 6e 69 74 69 61 6c 69 7a 65 20 64 69 73 6b 20     Initialize disk 
     161:	30 0a 00                                            0..

00000164 <__c.2121>:
     164:	25 64 2d 25 64 2d 25 64 54 25 64 3a 25 64 3a 25     %d-%d-%dT%d:%d:%
     174:	64 0a 00                                            d..

00000177 <__c.2119>:
     177:	53 79 73 74 65 6d 20 73 74 61 72 74 65 74 0a 00     System startet..
	...

00000188 <__ctors_end>:
     188:	11 24       	eor	r1, r1
     18a:	1f be       	out	0x3f, r1	; 63
     18c:	cf ef       	ldi	r28, 0xFF	; 255
     18e:	d0 e1       	ldi	r29, 0x10	; 16
     190:	de bf       	out	0x3e, r29	; 62
     192:	cd bf       	out	0x3d, r28	; 61

00000194 <__do_copy_data>:
     194:	13 e0       	ldi	r17, 0x03	; 3
     196:	a0 e0       	ldi	r26, 0x00	; 0
     198:	b1 e0       	ldi	r27, 0x01	; 1
     19a:	e4 e3       	ldi	r30, 0x34	; 52
     19c:	fb e5       	ldi	r31, 0x5B	; 91
     19e:	00 e0       	ldi	r16, 0x00	; 0
     1a0:	0b bf       	out	0x3b, r16	; 59
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <__do_copy_data+0x14>
     1a4:	07 90       	elpm	r0, Z+
     1a6:	0d 92       	st	X+, r0
     1a8:	ac 3a       	cpi	r26, 0xAC	; 172
     1aa:	b1 07       	cpc	r27, r17
     1ac:	d9 f7       	brne	.-10     	; 0x1a4 <__do_copy_data+0x10>

000001ae <__do_clear_bss>:
     1ae:	1a e0       	ldi	r17, 0x0A	; 10
     1b0:	ac ea       	ldi	r26, 0xAC	; 172
     1b2:	b3 e0       	ldi	r27, 0x03	; 3
     1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <.do_clear_bss_start>

000001b6 <.do_clear_bss_loop>:
     1b6:	1d 92       	st	X+, r1

000001b8 <.do_clear_bss_start>:
     1b8:	ab 3a       	cpi	r26, 0xAB	; 171
     1ba:	b1 07       	cpc	r27, r17
     1bc:	e1 f7       	brne	.-8      	; 0x1b6 <.do_clear_bss_loop>
     1be:	0e 94 74 01 	call	0x2e8	; 0x2e8 <main>
     1c2:	0c 94 98 2d 	jmp	0x5b30	; 0x5b30 <_exit>

000001c6 <__bad_interrupt>:
     1c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ca <__vector_9>:
/*---------------------------------------------------------*/
/* 100Hz timer interrupt generated by OC2                  */
/*---------------------------------------------------------*/

ISR(TIMER2_COMP_vect)
{
     1ca:	1f 92       	push	r1
     1cc:	0f 92       	push	r0
     1ce:	0f b6       	in	r0, 0x3f	; 63
     1d0:	0f 92       	push	r0
     1d2:	0b b6       	in	r0, 0x3b	; 59
     1d4:	0f 92       	push	r0
     1d6:	11 24       	eor	r1, r1
     1d8:	2f 93       	push	r18
     1da:	3f 93       	push	r19
     1dc:	4f 93       	push	r20
     1de:	5f 93       	push	r21
     1e0:	6f 93       	push	r22
     1e2:	7f 93       	push	r23
     1e4:	8f 93       	push	r24
     1e6:	9f 93       	push	r25
     1e8:	af 93       	push	r26
     1ea:	bf 93       	push	r27
     1ec:	ef 93       	push	r30
     1ee:	ff 93       	push	r31
	Timer++;			/* Performance counter for this module */
     1f0:	80 91 0f 06 	lds	r24, 0x060F
     1f4:	90 91 10 06 	lds	r25, 0x0610
     1f8:	01 96       	adiw	r24, 0x01	; 1
     1fa:	90 93 10 06 	sts	0x0610, r25
     1fe:	80 93 0f 06 	sts	0x060F, r24
	disk_timerproc();	/* Drive timer procedure of low level disk I/O module */
     202:	0e 94 bf 18 	call	0x317e	; 0x317e <disk_timerproc>
}
     206:	ff 91       	pop	r31
     208:	ef 91       	pop	r30
     20a:	bf 91       	pop	r27
     20c:	af 91       	pop	r26
     20e:	9f 91       	pop	r25
     210:	8f 91       	pop	r24
     212:	7f 91       	pop	r23
     214:	6f 91       	pop	r22
     216:	5f 91       	pop	r21
     218:	4f 91       	pop	r20
     21a:	3f 91       	pop	r19
     21c:	2f 91       	pop	r18
     21e:	0f 90       	pop	r0
     220:	0b be       	out	0x3b, r0	; 59
     222:	0f 90       	pop	r0
     224:	0f be       	out	0x3f, r0	; 63
     226:	0f 90       	pop	r0
     228:	1f 90       	pop	r1
     22a:	18 95       	reti

0000022c <get_fattime>:
/* the system does not support a real time clock.          */
/* This is not required in read-only configuration.        */
/*---------------------------------------------------------*/

DWORD get_fattime ()
{
     22c:	a8 e0       	ldi	r26, 0x08	; 8
     22e:	b0 e0       	ldi	r27, 0x00	; 0
     230:	ec e1       	ldi	r30, 0x1C	; 28
     232:	f1 e0       	ldi	r31, 0x01	; 1
     234:	0c 94 14 2d 	jmp	0x5a28	; 0x5a28 <__prologue_saves__+0x20>
	RTC rtc;

	/* Get local time */
	rtc_gettime(&rtc);
     238:	ce 01       	movw	r24, r28
     23a:	01 96       	adiw	r24, 0x01	; 1
     23c:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <rtc_gettime>

	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)(rtc.year - 1980) << 25)
			| ((DWORD)rtc.month << 21)
			| ((DWORD)rtc.mday << 16)
     240:	2c 81       	ldd	r18, Y+4	; 0x04
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	a9 01       	movw	r20, r18
     24a:	33 27       	eor	r19, r19
     24c:	22 27       	eor	r18, r18
	/* Get local time */
	rtc_gettime(&rtc);

	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)(rtc.year - 1980) << 25)
			| ((DWORD)rtc.month << 21)
     24e:	8b 81       	ldd	r24, Y+3	; 0x03
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	a0 e0       	ldi	r26, 0x00	; 0
     254:	b0 e0       	ldi	r27, 0x00	; 0
     256:	f5 e1       	ldi	r31, 0x15	; 21
     258:	88 0f       	add	r24, r24
     25a:	99 1f       	adc	r25, r25
     25c:	aa 1f       	adc	r26, r26
     25e:	bb 1f       	adc	r27, r27
     260:	fa 95       	dec	r31
     262:	d1 f7       	brne	.-12     	; 0x258 <get_fattime+0x2c>
     264:	28 2b       	or	r18, r24
     266:	39 2b       	or	r19, r25
     268:	4a 2b       	or	r20, r26
     26a:	5b 2b       	or	r21, r27
			| ((DWORD)rtc.mday << 16)
			| ((DWORD)rtc.hour << 11)
     26c:	8e 81       	ldd	r24, Y+6	; 0x06
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	a0 e0       	ldi	r26, 0x00	; 0
     272:	b0 e0       	ldi	r27, 0x00	; 0
     274:	eb e0       	ldi	r30, 0x0B	; 11
     276:	88 0f       	add	r24, r24
     278:	99 1f       	adc	r25, r25
     27a:	aa 1f       	adc	r26, r26
     27c:	bb 1f       	adc	r27, r27
     27e:	ea 95       	dec	r30
     280:	d1 f7       	brne	.-12     	; 0x276 <get_fattime+0x4a>
	rtc_gettime(&rtc);

	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)(rtc.year - 1980) << 25)
			| ((DWORD)rtc.month << 21)
			| ((DWORD)rtc.mday << 16)
     282:	28 2b       	or	r18, r24
     284:	39 2b       	or	r19, r25
     286:	4a 2b       	or	r20, r26
     288:	5b 2b       	or	r21, r27
			| ((DWORD)rtc.hour << 11)
			| ((DWORD)rtc.min << 5)
     28a:	8f 81       	ldd	r24, Y+7	; 0x07
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	a0 e0       	ldi	r26, 0x00	; 0
     290:	b0 e0       	ldi	r27, 0x00	; 0
     292:	75 e0       	ldi	r23, 0x05	; 5
     294:	88 0f       	add	r24, r24
     296:	99 1f       	adc	r25, r25
     298:	aa 1f       	adc	r26, r26
     29a:	bb 1f       	adc	r27, r27
     29c:	7a 95       	dec	r23
     29e:	d1 f7       	brne	.-12     	; 0x294 <get_fattime+0x68>

	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)(rtc.year - 1980) << 25)
			| ((DWORD)rtc.month << 21)
			| ((DWORD)rtc.mday << 16)
			| ((DWORD)rtc.hour << 11)
     2a0:	28 2b       	or	r18, r24
     2a2:	39 2b       	or	r19, r25
     2a4:	4a 2b       	or	r20, r26
     2a6:	5b 2b       	or	r21, r27
			| ((DWORD)rtc.min << 5)
			| ((DWORD)rtc.sec >> 1);
     2a8:	88 85       	ldd	r24, Y+8	; 0x08
     2aa:	86 95       	lsr	r24
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	a0 e0       	ldi	r26, 0x00	; 0
     2b0:	b0 e0       	ldi	r27, 0x00	; 0
	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)(rtc.year - 1980) << 25)
			| ((DWORD)rtc.month << 21)
			| ((DWORD)rtc.mday << 16)
			| ((DWORD)rtc.hour << 11)
			| ((DWORD)rtc.min << 5)
     2b2:	28 2b       	or	r18, r24
     2b4:	39 2b       	or	r19, r25
     2b6:	4a 2b       	or	r20, r26
     2b8:	5b 2b       	or	r21, r27

	/* Get local time */
	rtc_gettime(&rtc);

	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)(rtc.year - 1980) << 25)
     2ba:	89 81       	ldd	r24, Y+1	; 0x01
     2bc:	9a 81       	ldd	r25, Y+2	; 0x02
     2be:	8c 5b       	subi	r24, 0xBC	; 188
     2c0:	97 40       	sbci	r25, 0x07	; 7
     2c2:	a0 e0       	ldi	r26, 0x00	; 0
     2c4:	b0 e0       	ldi	r27, 0x00	; 0
     2c6:	69 e1       	ldi	r22, 0x19	; 25
     2c8:	88 0f       	add	r24, r24
     2ca:	99 1f       	adc	r25, r25
     2cc:	aa 1f       	adc	r26, r26
     2ce:	bb 1f       	adc	r27, r27
     2d0:	6a 95       	dec	r22
     2d2:	d1 f7       	brne	.-12     	; 0x2c8 <get_fattime+0x9c>
     2d4:	28 2b       	or	r18, r24
     2d6:	39 2b       	or	r19, r25
     2d8:	4a 2b       	or	r20, r26
     2da:	5b 2b       	or	r21, r27
			| ((DWORD)rtc.month << 21)
			| ((DWORD)rtc.mday << 16)
			| ((DWORD)rtc.hour << 11)
			| ((DWORD)rtc.min << 5)
			| ((DWORD)rtc.sec >> 1);
}
     2dc:	b9 01       	movw	r22, r18
     2de:	ca 01       	movw	r24, r20
     2e0:	28 96       	adiw	r28, 0x08	; 8
     2e2:	e2 e0       	ldi	r30, 0x02	; 2
     2e4:	0c 94 30 2d 	jmp	0x5a60	; 0x5a60 <__epilogue_restores__+0x20>

000002e8 <main>:
}

/*-----------------------------------------------------------------------*/
/* Main                                                                  */
int main (void)
{
     2e8:	ae e5       	ldi	r26, 0x5E	; 94
     2ea:	b0 e0       	ldi	r27, 0x00	; 0
     2ec:	ea e7       	ldi	r30, 0x7A	; 122
     2ee:	f1 e0       	ldi	r31, 0x01	; 1
     2f0:	0c 94 10 2d 	jmp	0x5a20	; 0x5a20 <__prologue_saves__+0x18>
	int i;
	// Recieve buffer
	U8 rpm_response_buffer[8];
	st_cmd_t rpm_msg;
	
	TWI_init();	/* Init TWI interface */
     2f4:	0e 94 03 24 	call	0x4806	; 0x4806 <TWI_init>

static
void IoInit ()
{
	/* Timer2 used for filesystem functions */
	OCR2A = 90-1;      // Timer2: 100Hz interval (OC2)
     2f8:	89 e5       	ldi	r24, 0x59	; 89
     2fa:	80 93 b3 00 	sts	0x00B3, r24
	TCCR2A = 0b00001101;
     2fe:	8d e0       	ldi	r24, 0x0D	; 13
     300:	80 93 b0 00 	sts	0x00B0, r24
	TIMSK2 = 0b00000010;   // Enable TC2.oc interrupt
     304:	82 e0       	ldi	r24, 0x02	; 2
     306:	80 93 70 00 	sts	0x0070, r24

	/* Timer0 bruges til at sende data req til ECU */
	OCR0A = 100;			// Sæt start værdi
     30a:	84 e6       	ldi	r24, 0x64	; 100
     30c:	87 bd       	out	0x27, r24	; 39
	TCCR0A |= 1<<CS02 | 1<<CS00;    // prescaler til 1024
     30e:	84 b5       	in	r24, 0x24	; 36
     310:	85 60       	ori	r24, 0x05	; 5
     312:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= 1<<OCIE0A; 		// Slår timer compare match interrupt til
     314:	80 91 6e 00 	lds	r24, 0x006E
     318:	82 60       	ori	r24, 0x02	; 2
     31a:	80 93 6e 00 	sts	0x006E, r24

	rtc_init();         // Initialize RTC
     31e:	0e 94 38 1a 	call	0x3470	; 0x3470 <rtc_init>
	can_init(0);		/* Initialize can controllor */
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <can_init>
	uart_init();		/* Initialize uart 0 and 1 for ecu and xbee */
     328:	0e 94 9c 03 	call	0x738	; 0x738 <uart_init>
	
	TWI_init();	/* Init TWI interface */
	IoInit();

	/* Join xitoa module to uart module */
	xfunc_out = (void (*)(char))uart_put;		/* xprintf writes to uart connected to the xbee */
     32c:	85 ec       	ldi	r24, 0xC5	; 197
     32e:	93 e0       	ldi	r25, 0x03	; 3
     330:	90 93 c2 03 	sts	0x03C2, r25
     334:	80 93 c1 03 	sts	0x03C1, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     338:	8f ef       	ldi	r24, 0xFF	; 255
     33a:	9f ed       	ldi	r25, 0xDF	; 223
     33c:	a0 e1       	ldi	r26, 0x10	; 16
     33e:	81 50       	subi	r24, 0x01	; 1
     340:	90 40       	sbci	r25, 0x00	; 0
     342:	a0 40       	sbci	r26, 0x00	; 0
     344:	e1 f7       	brne	.-8      	; 0x33e <main+0x56>
     346:	00 c0       	rjmp	.+0      	; 0x348 <main+0x60>
     348:	00 00       	nop

	_delay_ms(500);
	xprintf(PSTR("System startet\n"));
     34a:	00 d0       	rcall	.+0      	; 0x34c <main+0x64>
     34c:	87 e7       	ldi	r24, 0x77	; 119
     34e:	91 e0       	ldi	r25, 0x01	; 1
     350:	ad b7       	in	r26, 0x3d	; 61
     352:	be b7       	in	r27, 0x3e	; 62
     354:	12 96       	adiw	r26, 0x02	; 2
     356:	9c 93       	st	X, r25
     358:	8e 93       	st	-X, r24
     35a:	11 97       	sbiw	r26, 0x01	; 1
     35c:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <xprintf>

	/* SD-card */
	res = rtc_gettime(&rtc);
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	ce 01       	movw	r24, r28
     366:	01 96       	adiw	r24, 0x01	; 1
     368:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <rtc_gettime>
	xprintf(PSTR("%d-%d-%dT%d:%d:%d\n"), rtc.year, rtc.month, rtc.mday, rtc.hour, rtc.min, rtc.sec);
     36c:	ed b7       	in	r30, 0x3d	; 61
     36e:	fe b7       	in	r31, 0x3e	; 62
     370:	3e 97       	sbiw	r30, 0x0e	; 14
     372:	0f b6       	in	r0, 0x3f	; 63
     374:	f8 94       	cli
     376:	fe bf       	out	0x3e, r31	; 62
     378:	0f be       	out	0x3f, r0	; 63
     37a:	ed bf       	out	0x3d, r30	; 61
     37c:	31 96       	adiw	r30, 0x01	; 1
     37e:	84 e6       	ldi	r24, 0x64	; 100
     380:	91 e0       	ldi	r25, 0x01	; 1
     382:	ad b7       	in	r26, 0x3d	; 61
     384:	be b7       	in	r27, 0x3e	; 62
     386:	12 96       	adiw	r26, 0x02	; 2
     388:	9c 93       	st	X, r25
     38a:	8e 93       	st	-X, r24
     38c:	11 97       	sbiw	r26, 0x01	; 1
     38e:	89 81       	ldd	r24, Y+1	; 0x01
     390:	9a 81       	ldd	r25, Y+2	; 0x02
     392:	93 83       	std	Z+3, r25	; 0x03
     394:	82 83       	std	Z+2, r24	; 0x02
     396:	8b 81       	ldd	r24, Y+3	; 0x03
     398:	84 83       	std	Z+4, r24	; 0x04
     39a:	15 82       	std	Z+5, r1	; 0x05
     39c:	8c 81       	ldd	r24, Y+4	; 0x04
     39e:	86 83       	std	Z+6, r24	; 0x06
     3a0:	17 82       	std	Z+7, r1	; 0x07
     3a2:	8e 81       	ldd	r24, Y+6	; 0x06
     3a4:	80 87       	std	Z+8, r24	; 0x08
     3a6:	11 86       	std	Z+9, r1	; 0x09
     3a8:	8f 81       	ldd	r24, Y+7	; 0x07
     3aa:	82 87       	std	Z+10, r24	; 0x0a
     3ac:	13 86       	std	Z+11, r1	; 0x0b
     3ae:	88 85       	ldd	r24, Y+8	; 0x08
     3b0:	84 87       	std	Z+12, r24	; 0x0c
     3b2:	15 86       	std	Z+13, r1	; 0x0d
     3b4:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <xprintf>

	xprintf(PSTR("Initialize disk 0\n"));
     3b8:	ed b7       	in	r30, 0x3d	; 61
     3ba:	fe b7       	in	r31, 0x3e	; 62
     3bc:	3c 96       	adiw	r30, 0x0c	; 12
     3be:	0f b6       	in	r0, 0x3f	; 63
     3c0:	f8 94       	cli
     3c2:	fe bf       	out	0x3e, r31	; 62
     3c4:	0f be       	out	0x3f, r0	; 63
     3c6:	ed bf       	out	0x3d, r30	; 61
     3c8:	81 e5       	ldi	r24, 0x51	; 81
     3ca:	91 e0       	ldi	r25, 0x01	; 1
     3cc:	92 83       	std	Z+2, r25	; 0x02
     3ce:	81 83       	std	Z+1, r24	; 0x01
     3d0:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <xprintf>
	xprintf(PSTR("test %d %d %d %d\n"), ECUObjects[0].length, ECUObjects[0].id, ECUObjects[1].length, ECUObjects[1].id);
     3d4:	8d b7       	in	r24, 0x3d	; 61
     3d6:	9e b7       	in	r25, 0x3e	; 62
     3d8:	08 97       	sbiw	r24, 0x08	; 8
     3da:	0f b6       	in	r0, 0x3f	; 63
     3dc:	f8 94       	cli
     3de:	9e bf       	out	0x3e, r25	; 62
     3e0:	0f be       	out	0x3f, r0	; 63
     3e2:	8d bf       	out	0x3d, r24	; 61
     3e4:	ed b7       	in	r30, 0x3d	; 61
     3e6:	fe b7       	in	r31, 0x3e	; 62
     3e8:	31 96       	adiw	r30, 0x01	; 1
     3ea:	8f e3       	ldi	r24, 0x3F	; 63
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	ad b7       	in	r26, 0x3d	; 61
     3f0:	be b7       	in	r27, 0x3e	; 62
     3f2:	12 96       	adiw	r26, 0x02	; 2
     3f4:	9c 93       	st	X, r25
     3f6:	8e 93       	st	-X, r24
     3f8:	11 97       	sbiw	r26, 0x01	; 1
     3fa:	82 e0       	ldi	r24, 0x02	; 2
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	93 83       	std	Z+3, r25	; 0x03
     400:	82 83       	std	Z+2, r24	; 0x02
     402:	21 e0       	ldi	r18, 0x01	; 1
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	35 83       	std	Z+5, r19	; 0x05
     408:	24 83       	std	Z+4, r18	; 0x04
     40a:	97 83       	std	Z+7, r25	; 0x07
     40c:	86 83       	std	Z+6, r24	; 0x06
     40e:	91 87       	std	Z+9, r25	; 0x09
     410:	80 87       	std	Z+8, r24	; 0x08
     412:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <xprintf>
	xprintf(PSTR("test2 %d %d %d %d\n"), valueObjects[ECUObjects[0].id].length, valueObjects[ECUObjects[0].id].action, valueObjects[ECUObjects[1].id].length, valueObjects[ECUObjects[1].id].action);
     416:	ed b7       	in	r30, 0x3d	; 61
     418:	fe b7       	in	r31, 0x3e	; 62
     41a:	31 96       	adiw	r30, 0x01	; 1
     41c:	8c e2       	ldi	r24, 0x2C	; 44
     41e:	91 e0       	ldi	r25, 0x01	; 1
     420:	ad b7       	in	r26, 0x3d	; 61
     422:	be b7       	in	r27, 0x3e	; 62
     424:	12 96       	adiw	r26, 0x02	; 2
     426:	9c 93       	st	X, r25
     428:	8e 93       	st	-X, r24
     42a:	11 97       	sbiw	r26, 0x01	; 1
     42c:	80 e1       	ldi	r24, 0x10	; 16
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	93 83       	std	Z+3, r25	; 0x03
     432:	82 83       	std	Z+2, r24	; 0x02
     434:	15 82       	std	Z+5, r1	; 0x05
     436:	14 82       	std	Z+4, r1	; 0x04
     438:	97 83       	std	Z+7, r25	; 0x07
     43a:	86 83       	std	Z+6, r24	; 0x06
     43c:	11 86       	std	Z+9, r1	; 0x09
     43e:	10 86       	std	Z+8, r1	; 0x08
     440:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <xprintf>
	xprintf(PSTR("rc=%d\n"), (WORD)disk_initialize(0));		/* initialize filesystem */
     444:	ed b7       	in	r30, 0x3d	; 61
     446:	fe b7       	in	r31, 0x3e	; 62
     448:	3a 96       	adiw	r30, 0x0a	; 10
     44a:	0f b6       	in	r0, 0x3f	; 63
     44c:	f8 94       	cli
     44e:	fe bf       	out	0x3e, r31	; 62
     450:	0f be       	out	0x3f, r0	; 63
     452:	ed bf       	out	0x3d, r30	; 61
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	0e 94 dd 15 	call	0x2bba	; 0x2bba <disk_initialize>
     45a:	00 d0       	rcall	.+0      	; 0x45c <main+0x174>
     45c:	00 d0       	rcall	.+0      	; 0x45e <main+0x176>
     45e:	ed b7       	in	r30, 0x3d	; 61
     460:	fe b7       	in	r31, 0x3e	; 62
     462:	31 96       	adiw	r30, 0x01	; 1
     464:	25 e2       	ldi	r18, 0x25	; 37
     466:	31 e0       	ldi	r19, 0x01	; 1
     468:	ad b7       	in	r26, 0x3d	; 61
     46a:	be b7       	in	r27, 0x3e	; 62
     46c:	12 96       	adiw	r26, 0x02	; 2
     46e:	3c 93       	st	X, r19
     470:	2e 93       	st	-X, r18
     472:	11 97       	sbiw	r26, 0x01	; 1
     474:	82 83       	std	Z+2, r24	; 0x02
     476:	13 82       	std	Z+3, r1	; 0x03
     478:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <xprintf>
	xprintf(PSTR("Initialize logical drice 0\n"));	
     47c:	0f 90       	pop	r0
     47e:	0f 90       	pop	r0
     480:	89 e0       	ldi	r24, 0x09	; 9
     482:	91 e0       	ldi	r25, 0x01	; 1
     484:	ed b7       	in	r30, 0x3d	; 61
     486:	fe b7       	in	r31, 0x3e	; 62
     488:	92 83       	std	Z+2, r25	; 0x02
     48a:	81 83       	std	Z+1, r24	; 0x01
     48c:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <xprintf>
	xprintf(PSTR("rc=%d\n"), (WORD)f_mount(0, &Fatfs[0]));		/* mount filesystem */
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	63 ec       	ldi	r22, 0xC3	; 195
     498:	73 e0       	ldi	r23, 0x03	; 3
     49a:	0e 94 25 0c 	call	0x184a	; 0x184a <f_mount>
     49e:	00 d0       	rcall	.+0      	; 0x4a0 <main+0x1b8>
     4a0:	00 d0       	rcall	.+0      	; 0x4a2 <main+0x1ba>
     4a2:	22 e0       	ldi	r18, 0x02	; 2
     4a4:	31 e0       	ldi	r19, 0x01	; 1
     4a6:	ad b7       	in	r26, 0x3d	; 61
     4a8:	be b7       	in	r27, 0x3e	; 62
     4aa:	12 96       	adiw	r26, 0x02	; 2
     4ac:	3c 93       	st	X, r19
     4ae:	2e 93       	st	-X, r18
     4b0:	11 97       	sbiw	r26, 0x01	; 1
     4b2:	14 96       	adiw	r26, 0x04	; 4
     4b4:	9c 93       	st	X, r25
     4b6:	8e 93       	st	-X, r24
     4b8:	13 97       	sbiw	r26, 0x03	; 3
     4ba:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <xprintf>
	xprintf(PSTR("open dir \n")); 
     4be:	0f 90       	pop	r0
     4c0:	0f 90       	pop	r0
     4c2:	87 ef       	ldi	r24, 0xF7	; 247
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	ed b7       	in	r30, 0x3d	; 61
     4c8:	fe b7       	in	r31, 0x3e	; 62
     4ca:	92 83       	std	Z+2, r25	; 0x02
     4cc:	81 83       	std	Z+1, r24	; 0x01
     4ce:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <xprintf>
	xprintf(PSTR("rc=%d\n"), f_opendir(&dir, "0:"));	/* open root dir on fs */
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
     4d6:	8e 01       	movw	r16, r28
     4d8:	07 5d       	subi	r16, 0xD7	; 215
     4da:	1f 4f       	sbci	r17, 0xFF	; 255
     4dc:	c8 01       	movw	r24, r16
     4de:	60 e0       	ldi	r22, 0x00	; 0
     4e0:	71 e0       	ldi	r23, 0x01	; 1
     4e2:	0e 94 a9 13 	call	0x2752	; 0x2752 <f_opendir>
     4e6:	00 d0       	rcall	.+0      	; 0x4e8 <main+0x200>
     4e8:	00 d0       	rcall	.+0      	; 0x4ea <main+0x202>
     4ea:	20 ef       	ldi	r18, 0xF0	; 240
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	ad b7       	in	r26, 0x3d	; 61
     4f0:	be b7       	in	r27, 0x3e	; 62
     4f2:	12 96       	adiw	r26, 0x02	; 2
     4f4:	3c 93       	st	X, r19
     4f6:	2e 93       	st	-X, r18
     4f8:	11 97       	sbiw	r26, 0x01	; 1
     4fa:	14 96       	adiw	r26, 0x04	; 4
     4fc:	9c 93       	st	X, r25
     4fe:	8e 93       	st	-X, r24
     500:	13 97       	sbiw	r26, 0x03	; 3
     502:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <xprintf>
	freelognumber = get_free_log_number(&dir);		/* Get lowest free log number */
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	c8 01       	movw	r24, r16
     510:	0e 94 42 24 	call	0x4884	; 0x4884 <get_free_log_number>
     514:	7c 01       	movw	r14, r24
	xprintf(PSTR("Free log nr %d\n"), freelognumber);
     516:	00 d0       	rcall	.+0      	; 0x518 <main+0x230>
     518:	00 d0       	rcall	.+0      	; 0x51a <main+0x232>
     51a:	80 ee       	ldi	r24, 0xE0	; 224
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	ed b7       	in	r30, 0x3d	; 61
     520:	fe b7       	in	r31, 0x3e	; 62
     522:	92 83       	std	Z+2, r25	; 0x02
     524:	81 83       	std	Z+1, r24	; 0x01
     526:	f4 82       	std	Z+4, r15	; 0x04
     528:	e3 82       	std	Z+3, r14	; 0x03
     52a:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <xprintf>
	itoa(freelognumber, filename, 10);			/* Convert to string for use in f_open() */
     52e:	0f 90       	pop	r0
     530:	0f 90       	pop	r0
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
     536:	8e 01       	movw	r16, r28
     538:	0f 5e       	subi	r16, 0xEF	; 239
     53a:	1f 4f       	sbci	r17, 0xFF	; 255
     53c:	c7 01       	movw	r24, r14
     53e:	b8 01       	movw	r22, r16
     540:	4a e0       	ldi	r20, 0x0A	; 10
     542:	50 e0       	ldi	r21, 0x00	; 0
     544:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <itoa>
	xprintf(PSTR("Opening file %s\n"), filename);
     548:	00 d0       	rcall	.+0      	; 0x54a <main+0x262>
     54a:	00 d0       	rcall	.+0      	; 0x54c <main+0x264>
     54c:	8f ec       	ldi	r24, 0xCF	; 207
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	ad b7       	in	r26, 0x3d	; 61
     552:	be b7       	in	r27, 0x3e	; 62
     554:	12 96       	adiw	r26, 0x02	; 2
     556:	9c 93       	st	X, r25
     558:	8e 93       	st	-X, r24
     55a:	11 97       	sbiw	r26, 0x01	; 1
     55c:	14 96       	adiw	r26, 0x04	; 4
     55e:	1c 93       	st	X, r17
     560:	0e 93       	st	-X, r16
     562:	13 97       	sbiw	r26, 0x03	; 3
     564:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <xprintf>
	xprintf(PSTR("rc=%d\n"), (WORD)f_open(&file1, filename, FA_CREATE_NEW | FA_WRITE));	/* Create new logfile for writing */
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	bf e3       	ldi	r27, 0x3F	; 63
     572:	eb 2e       	mov	r14, r27
     574:	f1 2c       	mov	r15, r1
     576:	ec 0e       	add	r14, r28
     578:	fd 1e       	adc	r15, r29
     57a:	c7 01       	movw	r24, r14
     57c:	b8 01       	movw	r22, r16
     57e:	46 e0       	ldi	r20, 0x06	; 6
     580:	0e 94 3e 0c 	call	0x187c	; 0x187c <f_open>
     584:	00 d0       	rcall	.+0      	; 0x586 <main+0x29e>
     586:	00 d0       	rcall	.+0      	; 0x588 <main+0x2a0>
     588:	28 ec       	ldi	r18, 0xC8	; 200
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	ed b7       	in	r30, 0x3d	; 61
     58e:	fe b7       	in	r31, 0x3e	; 62
     590:	32 83       	std	Z+2, r19	; 0x02
     592:	21 83       	std	Z+1, r18	; 0x01
     594:	94 83       	std	Z+4, r25	; 0x04
     596:	83 83       	std	Z+3, r24	; 0x03
     598:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <xprintf>
	f_sync(&file1);			/* Sync filesystem to write changes to disk */
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	c7 01       	movw	r24, r14
     5a6:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <f_sync>
     5aa:	8f ef       	ldi	r24, 0xFF	; 255
     5ac:	9f eb       	ldi	r25, 0xBF	; 191
     5ae:	a1 e2       	ldi	r26, 0x21	; 33
     5b0:	81 50       	subi	r24, 0x01	; 1
     5b2:	90 40       	sbci	r25, 0x00	; 0
     5b4:	a0 40       	sbci	r26, 0x00	; 0
     5b6:	e1 f7       	brne	.-8      	; 0x5b0 <main+0x2c8>
     5b8:	00 c0       	rjmp	.+0      	; 0x5ba <main+0x2d2>
     5ba:	00 00       	nop
	_delay_ms(1000);

	/*
	 *	Kode til hurtig test af can 
	 */
	rpm_msg.pt_data = rpm_response_buffer;
     5bc:	ce 01       	movw	r24, r28
     5be:	09 96       	adiw	r24, 0x09	; 9
     5c0:	9c a3       	std	Y+36, r25	; 0x24
     5c2:	8b a3       	std	Y+35, r24	; 0x23
	rpm_msg.status = 0;
     5c4:	1d a2       	std	Y+37, r1	; 0x25

	can_update_rx_msg(&rpm_msg, rpm_msgid, 8);
     5c6:	ce 01       	movw	r24, r28
     5c8:	4b 96       	adiw	r24, 0x1b	; 27
     5ca:	65 e8       	ldi	r22, 0x85	; 133
     5cc:	48 e0       	ldi	r20, 0x08	; 8
     5ce:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <can_update_rx_msg>

	QUEUE_INIT(xbee_q);
     5d2:	10 92 18 0a 	sts	0x0A18, r1
     5d6:	10 92 17 0a 	sts	0x0A17, r1
     5da:	e5 e1       	ldi	r30, 0x15	; 21
     5dc:	fa e0       	ldi	r31, 0x0A	; 10
     5de:	10 92 16 0a 	sts	0x0A16, r1
     5e2:	10 92 15 0a 	sts	0x0A15, r1
     5e6:	16 82       	std	Z+6, r1	; 0x06
     5e8:	89 e7       	ldi	r24, 0x79	; 121
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	95 83       	std	Z+5, r25	; 0x05
     5ee:	84 83       	std	Z+4, r24	; 0x04

	sei();			/* Enable interrupt */
     5f0:	78 94       	sei
	Can_sei();		/* Enable general can interrupt */
     5f2:	80 91 db 00 	lds	r24, 0x00DB
     5f6:	80 68       	ori	r24, 0x80	; 128
     5f8:	80 93 db 00 	sts	0x00DB, r24
	Can_set_tx_int();	/* Enable can tx interrupt */
     5fc:	80 91 db 00 	lds	r24, 0x00DB
     600:	80 61       	ori	r24, 0x10	; 16
     602:	80 93 db 00 	sts	0x00DB, r24
	Can_set_rx_int();	/* Enable can rx interrupt */
     606:	80 91 db 00 	lds	r24, 0x00DB
     60a:	80 62       	ori	r24, 0x20	; 32
     60c:	80 93 db 00 	sts	0x00DB, r24
     610:	8f ef       	ldi	r24, 0xFF	; 255
     612:	9f e5       	ldi	r25, 0x5F	; 95
     614:	a3 e0       	ldi	r26, 0x03	; 3
     616:	81 50       	subi	r24, 0x01	; 1
     618:	90 40       	sbci	r25, 0x00	; 0
     61a:	a0 40       	sbci	r26, 0x00	; 0
     61c:	e1 f7       	brne	.-8      	; 0x616 <main+0x32e>
     61e:	00 c0       	rjmp	.+0      	; 0x620 <main+0x338>
     620:	00 00       	nop


	while(1) {
		_delay_ms(100);
		if (QUEUE_GET_NUM_ELE(xbee_q) >= 20) {
     622:	80 91 1b 0a 	lds	r24, 0x0A1B
     626:	84 31       	cpi	r24, 0x14	; 20
     628:	98 f3       	brcs	.-26     	; 0x610 <main+0x328>
		
			//xprintf(PSTR("More than 20 elements\n"));
			xbee_send_trigger();
     62a:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <xbee_send_trigger>
     62e:	f0 cf       	rjmp	.-32     	; 0x610 <main+0x328>

00000630 <USART0_Transmit>:
#include "uart.h"

void USART0_Transmit( unsigned char txData )
{
   /* Wait for empty transmit buffer */
   while ( !( UCSR0A & (1<<UDRE0)) );
     630:	90 91 c0 00 	lds	r25, 0x00C0
     634:	95 ff       	sbrs	r25, 5
     636:	fc cf       	rjmp	.-8      	; 0x630 <USART0_Transmit>
   /* Put data into buffer, sends the data */
   UDR0 = txData;
     638:	80 93 c6 00 	sts	0x00C6, r24
}
     63c:	08 95       	ret

0000063e <USART1_Transmit>:

void USART1_Transmit( unsigned char txData )
{
   /* Wait for empty transmit buffer */
   while ( !( UCSR1A & (1<<UDRE1)) );
     63e:	90 91 c8 00 	lds	r25, 0x00C8
     642:	95 ff       	sbrs	r25, 5
     644:	fc cf       	rjmp	.-8      	; 0x63e <USART1_Transmit>
   /* Put data into buffer, sends the data */
   UDR1 = txData;
     646:	80 93 ce 00 	sts	0x00CE, r24
}
     64a:	08 95       	ret

0000064c <USART_set_baud_rate>:

void USART_set_baud_rate(double baudrate0, double baudrate1)
{
     64c:	6f 92       	push	r6
     64e:	7f 92       	push	r7
     650:	8f 92       	push	r8
     652:	9f 92       	push	r9
     654:	af 92       	push	r10
     656:	bf 92       	push	r11
     658:	cf 92       	push	r12
     65a:	df 92       	push	r13
     65c:	ef 92       	push	r14
     65e:	ff 92       	push	r15
     660:	0f 93       	push	r16
     662:	1f 93       	push	r17
     664:	7b 01       	movw	r14, r22
     666:	8c 01       	movw	r16, r24
     668:	59 01       	movw	r10, r18
     66a:	6a 01       	movw	r12, r20
   // calculate division factor for requested baud rate, and set it
   int bauddiv0 = ((F_CPU+(baudrate0*8L))/(baudrate0*16L)-1);
     66c:	20 e0       	ldi	r18, 0x00	; 0
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	40 e0       	ldi	r20, 0x00	; 0
     672:	51 e4       	ldi	r21, 0x41	; 65
     674:	0e 94 5f 29 	call	0x52be	; 0x52be <__mulsf3>
     678:	20 e0       	ldi	r18, 0x00	; 0
     67a:	30 ec       	ldi	r19, 0xC0	; 192
     67c:	48 e2       	ldi	r20, 0x28	; 40
     67e:	5b e4       	ldi	r21, 0x4B	; 75
     680:	0e 94 01 29 	call	0x5202	; 0x5202 <__addsf3>
     684:	3b 01       	movw	r6, r22
     686:	4c 01       	movw	r8, r24
     688:	c8 01       	movw	r24, r16
     68a:	b7 01       	movw	r22, r14
     68c:	20 e0       	ldi	r18, 0x00	; 0
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	40 e8       	ldi	r20, 0x80	; 128
     692:	51 e4       	ldi	r21, 0x41	; 65
     694:	0e 94 5f 29 	call	0x52be	; 0x52be <__mulsf3>
     698:	9b 01       	movw	r18, r22
     69a:	ac 01       	movw	r20, r24
     69c:	c4 01       	movw	r24, r8
     69e:	b3 01       	movw	r22, r6
     6a0:	0e 94 59 2a 	call	0x54b2	; 0x54b2 <__divsf3>
     6a4:	20 e0       	ldi	r18, 0x00	; 0
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	40 e8       	ldi	r20, 0x80	; 128
     6aa:	5f e3       	ldi	r21, 0x3F	; 63
     6ac:	0e 94 2e 29 	call	0x525c	; 0x525c <__subsf3>
     6b0:	0e 94 07 2b 	call	0x560e	; 0x560e <__fixsfsi>
     6b4:	7b 01       	movw	r14, r22
   int bauddiv1 = ((F_CPU+(baudrate1*8L))/(baudrate1*16L)-1);
     6b6:	c6 01       	movw	r24, r12
     6b8:	b5 01       	movw	r22, r10
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	40 e0       	ldi	r20, 0x00	; 0
     6c0:	51 e4       	ldi	r21, 0x41	; 65
     6c2:	0e 94 5f 29 	call	0x52be	; 0x52be <__mulsf3>
     6c6:	20 e0       	ldi	r18, 0x00	; 0
     6c8:	30 ec       	ldi	r19, 0xC0	; 192
     6ca:	48 e2       	ldi	r20, 0x28	; 40
     6cc:	5b e4       	ldi	r21, 0x4B	; 75
     6ce:	0e 94 01 29 	call	0x5202	; 0x5202 <__addsf3>
     6d2:	3b 01       	movw	r6, r22
     6d4:	4c 01       	movw	r8, r24
     6d6:	c6 01       	movw	r24, r12
     6d8:	b5 01       	movw	r22, r10
     6da:	20 e0       	ldi	r18, 0x00	; 0
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	40 e8       	ldi	r20, 0x80	; 128
     6e0:	51 e4       	ldi	r21, 0x41	; 65
     6e2:	0e 94 5f 29 	call	0x52be	; 0x52be <__mulsf3>
     6e6:	9b 01       	movw	r18, r22
     6e8:	ac 01       	movw	r20, r24
     6ea:	c4 01       	movw	r24, r8
     6ec:	b3 01       	movw	r22, r6
     6ee:	0e 94 59 2a 	call	0x54b2	; 0x54b2 <__divsf3>
     6f2:	20 e0       	ldi	r18, 0x00	; 0
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	40 e8       	ldi	r20, 0x80	; 128
     6f8:	5f e3       	ldi	r21, 0x3F	; 63
     6fa:	0e 94 2e 29 	call	0x525c	; 0x525c <__subsf3>
     6fe:	0e 94 07 2b 	call	0x560e	; 0x560e <__fixsfsi>
   UBRR0L= bauddiv0;
     702:	e0 92 c4 00 	sts	0x00C4, r14
#ifdef UBRR0H
   UBRR0H= (bauddiv0>>8);
     706:	ef 2c       	mov	r14, r15
     708:	ff 0c       	add	r15, r15
     70a:	ff 08       	sbc	r15, r15
     70c:	e0 92 c5 00 	sts	0x00C5, r14
#endif

   UBRR1L= bauddiv1;
     710:	60 93 cc 00 	sts	0x00CC, r22
#ifdef UBRR1H
   UBRR1H= (bauddiv1>>8);
     714:	67 2f       	mov	r22, r23
     716:	77 0f       	add	r23, r23
     718:	77 0b       	sbc	r23, r23
     71a:	60 93 cd 00 	sts	0x00CD, r22
#endif
}
     71e:	1f 91       	pop	r17
     720:	0f 91       	pop	r16
     722:	ff 90       	pop	r15
     724:	ef 90       	pop	r14
     726:	df 90       	pop	r13
     728:	cf 90       	pop	r12
     72a:	bf 90       	pop	r11
     72c:	af 90       	pop	r10
     72e:	9f 90       	pop	r9
     730:	8f 90       	pop	r8
     732:	7f 90       	pop	r7
     734:	6f 90       	pop	r6
     736:	08 95       	ret

00000738 <uart_init>:

/* Initialize UART */
void uart_init()
{
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);  // Turn on U(S)ART port og sæt rec interrupt
     738:	88 e9       	ldi	r24, 0x98	; 152
     73a:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);   // Set frame format: 8 data bits, 1 stop bit, no parity
     73e:	86 e0       	ldi	r24, 0x06	; 6
     740:	80 93 c2 00 	sts	0x00C2, r24

	UCSR1B = (1<<RXEN0)|(1<<TXEN0);      // Turn on U(S)ART port
     744:	98 e1       	ldi	r25, 0x18	; 24
     746:	90 93 c9 00 	sts	0x00C9, r25
	UCSR1C = (1<<UCSZ01)|(1<<UCSZ00);   // Set frame format: 8 data bits, 1 stop bit, no parity
     74a:	80 93 ca 00 	sts	0x00CA, r24
   
	USART_set_baud_rate(BAUD0, BAUD1); //Set baud rate
     74e:	60 e0       	ldi	r22, 0x00	; 0
     750:	70 e0       	ldi	r23, 0x00	; 0
     752:	86 e9       	ldi	r24, 0x96	; 150
     754:	96 e4       	ldi	r25, 0x46	; 70
     756:	20 e0       	ldi	r18, 0x00	; 0
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	41 ee       	ldi	r20, 0xE1	; 225
     75c:	57 e4       	ldi	r21, 0x47	; 71
     75e:	0e 94 26 03 	call	0x64c	; 0x64c <USART_set_baud_rate>
}
     762:	08 95       	ret

00000764 <uart_get>:

/* Get a received character */
uint8_t uart_get ()
{
   unsigned char d;
   while ((UCSR0A & (1 << RXC0)) == 0) {}; // Do nothing until data have been recieved and is ready to be read from UDR
     764:	80 91 c0 00 	lds	r24, 0x00C0
     768:	87 ff       	sbrs	r24, 7
     76a:	fc cf       	rjmp	.-8      	; 0x764 <uart_get>
   d=UDR0;
     76c:	80 91 c6 00 	lds	r24, 0x00C6
   return d;
}
     770:	08 95       	ret

00000772 <uart_put_test>:

/* Transmit a character */
void uart_put_test( uint8_t device, uint8_t d)
{
     772:	98 2f       	mov	r25, r24
     774:	86 2f       	mov	r24, r22
	switch (device) {
     776:	99 23       	and	r25, r25
     778:	29 f0       	breq	.+10     	; 0x784 <uart_put_test+0x12>
     77a:	91 30       	cpi	r25, 0x01	; 1
     77c:	29 f4       	brne	.+10     	; 0x788 <uart_put_test+0x16>
		case XBEE:
			USART1_Transmit( d );
     77e:	0e 94 1f 03 	call	0x63e	; 0x63e <USART1_Transmit>
			break;
     782:	08 95       	ret
		case ECU:
			USART0_Transmit( d);
     784:	0e 94 18 03 	call	0x630	; 0x630 <USART0_Transmit>
     788:	08 95       	ret

0000078a <uart_put>:
}

/* Transmit a character */
void uart_put(uint8_t d)
{
   USART1_Transmit( d );
     78a:	0e 94 1f 03 	call	0x63e	; 0x63e <USART1_Transmit>
}
     78e:	08 95       	ret

00000790 <uart_puts>:

/* Transmit a string */
void uart_puts(const char *s)
{
     790:	ef 92       	push	r14
     792:	ff 92       	push	r15
     794:	cf 93       	push	r28
     796:	df 93       	push	r29
     798:	e8 2e       	mov	r14, r24
     79a:	e7 01       	movw	r28, r14
     79c:	7e 01       	movw	r14, r28
     79e:	f9 2e       	mov	r15, r25
     7a0:	e7 01       	movw	r28, r14
   while (*s)
     7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <uart_puts+0x18>
      USART0_Transmit( *s++ );
     7a4:	0e 94 18 03 	call	0x630	; 0x630 <USART0_Transmit>
}

/* Transmit a string */
void uart_puts(const char *s)
{
   while (*s)
     7a8:	89 91       	ld	r24, Y+
     7aa:	88 23       	and	r24, r24
     7ac:	d9 f7       	brne	.-10     	; 0x7a4 <uart_puts+0x14>
      USART0_Transmit( *s++ );
}
     7ae:	df 91       	pop	r29
     7b0:	cf 91       	pop	r28
     7b2:	ff 90       	pop	r15
     7b4:	ef 90       	pop	r14
     7b6:	08 95       	ret

000007b8 <uart1_put>:

void uart1_put(uint8_t d)
{
        USART1_Transmit(d);
     7b8:	0e 94 1f 03 	call	0x63e	; 0x63e <USART1_Transmit>
}
     7bc:	08 95       	ret

000007be <uart1_puts>:

void uart1_puts(const char *s)
{
     7be:	ef 92       	push	r14
     7c0:	ff 92       	push	r15
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	e8 2e       	mov	r14, r24
     7c8:	e7 01       	movw	r28, r14
     7ca:	7e 01       	movw	r14, r28
     7cc:	f9 2e       	mov	r15, r25
     7ce:	e7 01       	movw	r28, r14
    while (*s)
     7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <uart1_puts+0x18>
            USART1_Transmit(*s++);
     7d2:	0e 94 1f 03 	call	0x63e	; 0x63e <USART1_Transmit>
        USART1_Transmit(d);
}

void uart1_puts(const char *s)
{
    while (*s)
     7d6:	89 91       	ld	r24, Y+
     7d8:	88 23       	and	r24, r24
     7da:	d9 f7       	brne	.-10     	; 0x7d2 <uart1_puts+0x14>
            USART1_Transmit(*s++);
}
     7dc:	df 91       	pop	r29
     7de:	cf 91       	pop	r28
     7e0:	ff 90       	pop	r15
     7e2:	ef 90       	pop	r14
     7e4:	08 95       	ret

000007e6 <mem_cpy>:
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
     7e6:	28 2f       	mov	r18, r24
     7e8:	39 2f       	mov	r19, r25
     7ea:	d9 01       	movw	r26, r18
     7ec:	86 2f       	mov	r24, r22
     7ee:	97 2f       	mov	r25, r23
     7f0:	fc 01       	movw	r30, r24
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
     7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <mem_cpy+0x12>
     7f4:	81 91       	ld	r24, Z+
     7f6:	8d 93       	st	X+, r24
     7f8:	41 50       	subi	r20, 0x01	; 1
     7fa:	50 40       	sbci	r21, 0x00	; 0
     7fc:	8f ef       	ldi	r24, 0xFF	; 255
     7fe:	4f 3f       	cpi	r20, 0xFF	; 255
     800:	58 07       	cpc	r21, r24
     802:	c1 f7       	brne	.-16     	; 0x7f4 <mem_cpy+0xe>
}
     804:	08 95       	ret

00000806 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
     806:	fc 01       	movw	r30, r24
	if (!fs || !fs->fs_type || fs->id != id)
     808:	00 97       	sbiw	r24, 0x00	; 0
     80a:	81 f0       	breq	.+32     	; 0x82c <validate+0x26>
     80c:	80 81       	ld	r24, Z
     80e:	88 23       	and	r24, r24
     810:	69 f0       	breq	.+26     	; 0x82c <validate+0x26>
     812:	86 81       	ldd	r24, Z+6	; 0x06
     814:	97 81       	ldd	r25, Z+7	; 0x07
     816:	86 17       	cp	r24, r22
     818:	97 07       	cpc	r25, r23
     81a:	41 f4       	brne	.+16     	; 0x82c <validate+0x26>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drive) & STA_NOINIT)
     81c:	81 81       	ldd	r24, Z+1	; 0x01
     81e:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <disk_status>
     822:	80 ff       	sbrs	r24, 0
     824:	06 c0       	rjmp	.+12     	; 0x832 <validate+0x2c>
		return FR_NOT_READY;
     826:	23 e0       	ldi	r18, 0x03	; 3
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	05 c0       	rjmp	.+10     	; 0x836 <validate+0x30>
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
		return FR_INVALID_OBJECT;
     82c:	29 e0       	ldi	r18, 0x09	; 9
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	02 c0       	rjmp	.+4      	; 0x836 <validate+0x30>
	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drive) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	30 e0       	ldi	r19, 0x00	; 0
}
     836:	c9 01       	movw	r24, r18
     838:	08 95       	ret

0000083a <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make apperance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
     83a:	a0 e0       	ldi	r26, 0x00	; 0
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 08 2d 	jmp	0x5a10	; 0x5a10 <__prologue_saves__+0x8>
     846:	ec 01       	movw	r28, r24
     848:	4a 01       	movw	r8, r20
     84a:	5b 01       	movw	r10, r22
	DWORD wsect;


	wsect = fs->winsect;
     84c:	ce a4       	ldd	r12, Y+46	; 0x2e
     84e:	df a4       	ldd	r13, Y+47	; 0x2f
     850:	e8 a8       	ldd	r14, Y+48	; 0x30
     852:	f9 a8       	ldd	r15, Y+49	; 0x31
	if (wsect != sector) {	/* Changed current window */
     854:	c4 16       	cp	r12, r20
     856:	d5 06       	cpc	r13, r21
     858:	e6 06       	cpc	r14, r22
     85a:	f7 06       	cpc	r15, r23
     85c:	09 f4       	brne	.+2      	; 0x860 <move_window+0x26>
     85e:	4b c0       	rjmp	.+150    	; 0x8f6 <move_window+0xbc>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
     860:	8c 81       	ldd	r24, Y+4	; 0x04
     862:	88 23       	and	r24, r24
     864:	a1 f1       	breq	.+104    	; 0x8ce <move_window+0x94>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
     866:	82 e3       	ldi	r24, 0x32	; 50
     868:	68 2e       	mov	r6, r24
     86a:	71 2c       	mov	r7, r1
     86c:	6c 0e       	add	r6, r28
     86e:	7d 1e       	adc	r7, r29
     870:	89 81       	ldd	r24, Y+1	; 0x01
     872:	b3 01       	movw	r22, r6
     874:	a7 01       	movw	r20, r14
     876:	96 01       	movw	r18, r12
     878:	01 e0       	ldi	r16, 0x01	; 1
     87a:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <disk_write>
     87e:	00 97       	sbiw	r24, 0x00	; 0
     880:	e9 f5       	brne	.+122    	; 0x8fc <move_window+0xc2>
				return FR_DISK_ERR;
			fs->wflag = 0;
     882:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
     884:	8a 8d       	ldd	r24, Y+26	; 0x1a
     886:	9b 8d       	ldd	r25, Y+27	; 0x1b
     888:	ac 8d       	ldd	r26, Y+28	; 0x1c
     88a:	bd 8d       	ldd	r27, Y+29	; 0x1d
     88c:	2a a1       	ldd	r18, Y+34	; 0x22
     88e:	3b a1       	ldd	r19, Y+35	; 0x23
     890:	4c a1       	ldd	r20, Y+36	; 0x24
     892:	5d a1       	ldd	r21, Y+37	; 0x25
     894:	82 0f       	add	r24, r18
     896:	93 1f       	adc	r25, r19
     898:	a4 1f       	adc	r26, r20
     89a:	b5 1f       	adc	r27, r21
     89c:	c8 16       	cp	r12, r24
     89e:	d9 06       	cpc	r13, r25
     8a0:	ea 06       	cpc	r14, r26
     8a2:	fb 06       	cpc	r15, r27
     8a4:	a0 f4       	brcc	.+40     	; 0x8ce <move_window+0x94>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
     8a6:	1b 81       	ldd	r17, Y+3	; 0x03
     8a8:	10 c0       	rjmp	.+32     	; 0x8ca <move_window+0x90>
					wsect += fs->sects_fat;
     8aa:	8a 8d       	ldd	r24, Y+26	; 0x1a
     8ac:	9b 8d       	ldd	r25, Y+27	; 0x1b
     8ae:	ac 8d       	ldd	r26, Y+28	; 0x1c
     8b0:	bd 8d       	ldd	r27, Y+29	; 0x1d
     8b2:	c8 0e       	add	r12, r24
     8b4:	d9 1e       	adc	r13, r25
     8b6:	ea 1e       	adc	r14, r26
     8b8:	fb 1e       	adc	r15, r27
					disk_write(fs->drive, fs->win, wsect, 1);
     8ba:	89 81       	ldd	r24, Y+1	; 0x01
     8bc:	b3 01       	movw	r22, r6
     8be:	a7 01       	movw	r20, r14
     8c0:	96 01       	movw	r18, r12
     8c2:	01 e0       	ldi	r16, 0x01	; 1
     8c4:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <disk_write>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
     8c8:	11 50       	subi	r17, 0x01	; 1
     8ca:	12 30       	cpi	r17, 0x02	; 2
     8cc:	70 f7       	brcc	.-36     	; 0x8aa <move_window+0x70>
					disk_write(fs->drive, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
     8ce:	81 14       	cp	r8, r1
     8d0:	91 04       	cpc	r9, r1
     8d2:	a1 04       	cpc	r10, r1
     8d4:	b1 04       	cpc	r11, r1
     8d6:	79 f0       	breq	.+30     	; 0x8f6 <move_window+0xbc>
			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
     8d8:	be 01       	movw	r22, r28
     8da:	6e 5c       	subi	r22, 0xCE	; 206
     8dc:	7f 4f       	sbci	r23, 0xFF	; 255
     8de:	89 81       	ldd	r24, Y+1	; 0x01
     8e0:	a5 01       	movw	r20, r10
     8e2:	94 01       	movw	r18, r8
     8e4:	01 e0       	ldi	r16, 0x01	; 1
     8e6:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <disk_read>
     8ea:	00 97       	sbiw	r24, 0x00	; 0
     8ec:	39 f4       	brne	.+14     	; 0x8fc <move_window+0xc2>
				return FR_DISK_ERR;
			fs->winsect = sector;
     8ee:	8e a6       	std	Y+46, r8	; 0x2e
     8f0:	9f a6       	std	Y+47, r9	; 0x2f
     8f2:	a8 aa       	std	Y+48, r10	; 0x30
     8f4:	b9 aa       	std	Y+49, r11	; 0x31
		}
	}

	return FR_OK;
     8f6:	20 e0       	ldi	r18, 0x00	; 0
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	02 c0       	rjmp	.+4      	; 0x900 <move_window+0xc6>
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
				return FR_DISK_ERR;
     8fc:	21 e0       	ldi	r18, 0x01	; 1
     8fe:	30 e0       	ldi	r19, 0x00	; 0
			fs->winsect = sector;
		}
	}

	return FR_OK;
}
     900:	c9 01       	movw	r24, r18
     902:	cd b7       	in	r28, 0x3d	; 61
     904:	de b7       	in	r29, 0x3e	; 62
     906:	ee e0       	ldi	r30, 0x0E	; 14
     908:	0c 94 24 2d 	jmp	0x5a48	; 0x5a48 <__epilogue_restores__+0x8>

0000090c <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
     90c:	ef 92       	push	r14
     90e:	ff 92       	push	r15
     910:	0f 93       	push	r16
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	ec 01       	movw	r28, r24
     918:	9a 01       	movw	r18, r20
     91a:	ab 01       	movw	r20, r22
	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
     91c:	92 e3       	ldi	r25, 0x32	; 50
     91e:	e9 2e       	mov	r14, r25
     920:	f1 2c       	mov	r15, r1
     922:	ec 0e       	add	r14, r28
     924:	fd 1e       	adc	r15, r29
     926:	89 81       	ldd	r24, Y+1	; 0x01
     928:	b7 01       	movw	r22, r14
     92a:	01 e0       	ldi	r16, 0x01	; 1
     92c:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <disk_read>
     930:	00 97       	sbiw	r24, 0x00	; 0
     932:	41 f5       	brne	.+80     	; 0x984 <check_fs+0x78>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
     934:	fe 01       	movw	r30, r28
     936:	e0 5d       	subi	r30, 0xD0	; 208
     938:	fd 4f       	sbci	r31, 0xFD	; 253
     93a:	80 81       	ld	r24, Z
     93c:	91 81       	ldd	r25, Z+1	; 0x01
     93e:	2a ea       	ldi	r18, 0xAA	; 170
     940:	85 35       	cpi	r24, 0x55	; 85
     942:	92 07       	cpc	r25, r18
     944:	09 f5       	brne	.+66     	; 0x988 <check_fs+0x7c>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
     946:	f7 01       	movw	r30, r14
     948:	86 a9       	ldd	r24, Z+54	; 0x36
     94a:	97 a9       	ldd	r25, Z+55	; 0x37
     94c:	a0 ad       	ldd	r26, Z+56	; 0x38
     94e:	b1 ad       	ldd	r27, Z+57	; 0x39
     950:	b0 70       	andi	r27, 0x00	; 0
     952:	86 34       	cpi	r24, 0x46	; 70
     954:	f1 e4       	ldi	r31, 0x41	; 65
     956:	9f 07       	cpc	r25, r31
     958:	f4 e5       	ldi	r31, 0x54	; 84
     95a:	af 07       	cpc	r26, r31
     95c:	f0 e0       	ldi	r31, 0x00	; 0
     95e:	bf 07       	cpc	r27, r31
     960:	a9 f0       	breq	.+42     	; 0x98c <check_fs+0x80>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
     962:	cc 57       	subi	r28, 0x7C	; 124
     964:	df 4f       	sbci	r29, 0xFF	; 255
     966:	28 81       	ld	r18, Y
     968:	39 81       	ldd	r19, Y+1	; 0x01
     96a:	4a 81       	ldd	r20, Y+2	; 0x02
     96c:	5b 81       	ldd	r21, Y+3	; 0x03
     96e:	50 70       	andi	r21, 0x00	; 0
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
		return 3;
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	26 34       	cpi	r18, 0x46	; 70
     974:	91 e4       	ldi	r25, 0x41	; 65
     976:	39 07       	cpc	r19, r25
     978:	94 e5       	ldi	r25, 0x54	; 84
     97a:	49 07       	cpc	r20, r25
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	59 07       	cpc	r21, r25
     980:	31 f4       	brne	.+12     	; 0x98e <check_fs+0x82>
     982:	04 c0       	rjmp	.+8      	; 0x98c <check_fs+0x80>
     984:	83 e0       	ldi	r24, 0x03	; 3
     986:	03 c0       	rjmp	.+6      	; 0x98e <check_fs+0x82>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
     988:	82 e0       	ldi	r24, 0x02	; 2
     98a:	01 c0       	rjmp	.+2      	; 0x98e <check_fs+0x82>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
		return 0;
     98c:	80 e0       	ldi	r24, 0x00	; 0
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	0f 91       	pop	r16
     994:	ff 90       	pop	r15
     996:	ef 90       	pop	r14
     998:	08 95       	ret

0000099a <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Interal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
     99a:	a0 e0       	ldi	r26, 0x00	; 0
     99c:	b0 e0       	ldi	r27, 0x00	; 0
     99e:	e3 ed       	ldi	r30, 0xD3	; 211
     9a0:	f4 e0       	ldi	r31, 0x04	; 4
     9a2:	0c 94 09 2d 	jmp	0x5a12	; 0x5a12 <__prologue_saves__+0xa>
     9a6:	ec 01       	movw	r28, r24
     9a8:	7a 01       	movw	r14, r20
     9aa:	8b 01       	movw	r16, r22
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
     9ac:	42 30       	cpi	r20, 0x02	; 2
     9ae:	51 05       	cpc	r21, r1
     9b0:	61 05       	cpc	r22, r1
     9b2:	71 05       	cpc	r23, r1
     9b4:	08 f4       	brcc	.+2      	; 0x9b8 <get_fat+0x1e>
     9b6:	97 c0       	rjmp	.+302    	; 0xae6 <get_fat+0x14c>
     9b8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     9ba:	9f 8d       	ldd	r25, Y+31	; 0x1f
     9bc:	a8 a1       	ldd	r26, Y+32	; 0x20
     9be:	b9 a1       	ldd	r27, Y+33	; 0x21
     9c0:	48 17       	cp	r20, r24
     9c2:	59 07       	cpc	r21, r25
     9c4:	6a 07       	cpc	r22, r26
     9c6:	7b 07       	cpc	r23, r27
     9c8:	08 f0       	brcs	.+2      	; 0x9cc <get_fat+0x32>
     9ca:	8d c0       	rjmp	.+282    	; 0xae6 <get_fat+0x14c>
		return 1;

	fsect = fs->fatbase;
     9cc:	8a a0       	ldd	r8, Y+34	; 0x22
     9ce:	9b a0       	ldd	r9, Y+35	; 0x23
     9d0:	ac a0       	ldd	r10, Y+36	; 0x24
     9d2:	bd a0       	ldd	r11, Y+37	; 0x25
	switch (fs->fs_type) {
     9d4:	88 81       	ld	r24, Y
     9d6:	82 30       	cpi	r24, 0x02	; 2
     9d8:	09 f4       	brne	.+2      	; 0x9dc <get_fat+0x42>
     9da:	4f c0       	rjmp	.+158    	; 0xa7a <get_fat+0xe0>
     9dc:	83 30       	cpi	r24, 0x03	; 3
     9de:	09 f4       	brne	.+2      	; 0x9e2 <get_fat+0x48>
     9e0:	64 c0       	rjmp	.+200    	; 0xaaa <get_fat+0x110>
     9e2:	81 30       	cpi	r24, 0x01	; 1
     9e4:	09 f0       	breq	.+2      	; 0x9e8 <get_fat+0x4e>
     9e6:	84 c0       	rjmp	.+264    	; 0xaf0 <get_fat+0x156>
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
     9e8:	6a 01       	movw	r12, r20
     9ea:	d6 94       	lsr	r13
     9ec:	c7 94       	ror	r12
     9ee:	c4 0e       	add	r12, r20
     9f0:	d5 1e       	adc	r13, r21
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
     9f2:	a6 01       	movw	r20, r12
     9f4:	45 2f       	mov	r20, r21
     9f6:	55 27       	eor	r21, r21
     9f8:	46 95       	lsr	r20
     9fa:	60 e0       	ldi	r22, 0x00	; 0
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	48 0d       	add	r20, r8
     a00:	59 1d       	adc	r21, r9
     a02:	6a 1d       	adc	r22, r10
     a04:	7b 1d       	adc	r23, r11
     a06:	ce 01       	movw	r24, r28
     a08:	0e 94 1d 04 	call	0x83a	; 0x83a <move_window>
     a0c:	00 97       	sbiw	r24, 0x00	; 0
     a0e:	09 f0       	breq	.+2      	; 0xa12 <get_fat+0x78>
     a10:	6f c0       	rjmp	.+222    	; 0xaf0 <get_fat+0x156>
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
     a12:	f6 01       	movw	r30, r12
     a14:	f1 70       	andi	r31, 0x01	; 1
     a16:	ec 0f       	add	r30, r28
     a18:	fd 1f       	adc	r31, r29
     a1a:	72 a8       	ldd	r7, Z+50	; 0x32
     a1c:	08 94       	sec
     a1e:	c1 1c       	adc	r12, r1
     a20:	d1 1c       	adc	r13, r1
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
     a22:	a6 01       	movw	r20, r12
     a24:	45 2f       	mov	r20, r21
     a26:	55 27       	eor	r21, r21
     a28:	46 95       	lsr	r20
     a2a:	60 e0       	ldi	r22, 0x00	; 0
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	48 0d       	add	r20, r8
     a30:	59 1d       	adc	r21, r9
     a32:	6a 1d       	adc	r22, r10
     a34:	7b 1d       	adc	r23, r11
     a36:	ce 01       	movw	r24, r28
     a38:	0e 94 1d 04 	call	0x83a	; 0x83a <move_window>
     a3c:	00 97       	sbiw	r24, 0x00	; 0
     a3e:	09 f0       	breq	.+2      	; 0xa42 <get_fat+0xa8>
     a40:	57 c0       	rjmp	.+174    	; 0xaf0 <get_fat+0x156>
	fsect = fs->fatbase;
	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
     a42:	27 2d       	mov	r18, r7
     a44:	30 e0       	ldi	r19, 0x00	; 0
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
     a46:	f6 01       	movw	r30, r12
     a48:	f1 70       	andi	r31, 0x01	; 1
     a4a:	ec 0f       	add	r30, r28
     a4c:	fd 1f       	adc	r31, r29
     a4e:	92 a9       	ldd	r25, Z+50	; 0x32
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	28 2b       	or	r18, r24
     a54:	39 2b       	or	r19, r25
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	e8 22       	and	r14, r24
     a5a:	ff 24       	eor	r15, r15
     a5c:	e1 14       	cp	r14, r1
     a5e:	f1 04       	cpc	r15, r1
     a60:	31 f0       	breq	.+12     	; 0xa6e <get_fat+0xd4>
     a62:	64 e0       	ldi	r22, 0x04	; 4
     a64:	36 95       	lsr	r19
     a66:	27 95       	ror	r18
     a68:	6a 95       	dec	r22
     a6a:	e1 f7       	brne	.-8      	; 0xa64 <get_fat+0xca>
     a6c:	1b c0       	rjmp	.+54     	; 0xaa4 <get_fat+0x10a>
     a6e:	40 e0       	ldi	r20, 0x00	; 0
     a70:	50 e0       	ldi	r21, 0x00	; 0
     a72:	3f 70       	andi	r19, 0x0F	; 15
     a74:	40 70       	andi	r20, 0x00	; 0
     a76:	50 70       	andi	r21, 0x00	; 0
     a78:	3e c0       	rjmp	.+124    	; 0xaf6 <get_fat+0x15c>

	case FS_FAT16 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
     a7a:	77 27       	eor	r23, r23
     a7c:	61 2f       	mov	r22, r17
     a7e:	50 2f       	mov	r21, r16
     a80:	4f 2d       	mov	r20, r15
     a82:	48 0d       	add	r20, r8
     a84:	59 1d       	adc	r21, r9
     a86:	6a 1d       	adc	r22, r10
     a88:	7b 1d       	adc	r23, r11
     a8a:	ce 01       	movw	r24, r28
     a8c:	0e 94 1d 04 	call	0x83a	; 0x83a <move_window>
     a90:	00 97       	sbiw	r24, 0x00	; 0
     a92:	71 f5       	brne	.+92     	; 0xaf0 <get_fat+0x156>
		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
     a94:	f7 01       	movw	r30, r14
     a96:	ee 0f       	add	r30, r30
     a98:	ff 1f       	adc	r31, r31
     a9a:	f1 70       	andi	r31, 0x01	; 1
     a9c:	ec 0f       	add	r30, r28
     a9e:	fd 1f       	adc	r31, r29
     aa0:	22 a9       	ldd	r18, Z+50	; 0x32
     aa2:	33 a9       	ldd	r19, Z+51	; 0x33
     aa4:	40 e0       	ldi	r20, 0x00	; 0
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	26 c0       	rjmp	.+76     	; 0xaf6 <get_fat+0x15c>

	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
     aaa:	37 e0       	ldi	r19, 0x07	; 7
     aac:	76 95       	lsr	r23
     aae:	67 95       	ror	r22
     ab0:	57 95       	ror	r21
     ab2:	47 95       	ror	r20
     ab4:	3a 95       	dec	r19
     ab6:	d1 f7       	brne	.-12     	; 0xaac <get_fat+0x112>
     ab8:	48 0d       	add	r20, r8
     aba:	59 1d       	adc	r21, r9
     abc:	6a 1d       	adc	r22, r10
     abe:	7b 1d       	adc	r23, r11
     ac0:	ce 01       	movw	r24, r28
     ac2:	0e 94 1d 04 	call	0x83a	; 0x83a <move_window>
     ac6:	00 97       	sbiw	r24, 0x00	; 0
     ac8:	99 f4       	brne	.+38     	; 0xaf0 <get_fat+0x156>
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
     aca:	f7 01       	movw	r30, r14
     acc:	ee 0f       	add	r30, r30
     ace:	ff 1f       	adc	r31, r31
     ad0:	ee 0f       	add	r30, r30
     ad2:	ff 1f       	adc	r31, r31
     ad4:	f1 70       	andi	r31, 0x01	; 1
     ad6:	ec 0f       	add	r30, r28
     ad8:	fd 1f       	adc	r31, r29
     ada:	22 a9       	ldd	r18, Z+50	; 0x32
     adc:	33 a9       	ldd	r19, Z+51	; 0x33
     ade:	44 a9       	ldd	r20, Z+52	; 0x34
     ae0:	55 a9       	ldd	r21, Z+53	; 0x35
     ae2:	5f 70       	andi	r21, 0x0F	; 15
     ae4:	08 c0       	rjmp	.+16     	; 0xaf6 <get_fat+0x15c>
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
		return 1;
     ae6:	21 e0       	ldi	r18, 0x01	; 1
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	40 e0       	ldi	r20, 0x00	; 0
     aec:	50 e0       	ldi	r21, 0x00	; 0
     aee:	03 c0       	rjmp	.+6      	; 0xaf6 <get_fat+0x15c>
	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
	}

	return 0xFFFFFFFF;	/* An error occured at the disk I/O layer */
     af0:	2f ef       	ldi	r18, 0xFF	; 255
     af2:	3f ef       	ldi	r19, 0xFF	; 255
     af4:	a9 01       	movw	r20, r18
}
     af6:	b9 01       	movw	r22, r18
     af8:	ca 01       	movw	r24, r20
     afa:	cd b7       	in	r28, 0x3d	; 61
     afc:	de b7       	in	r29, 0x3e	; 62
     afe:	ed e0       	ldi	r30, 0x0D	; 13
     b00:	0c 94 25 2d 	jmp	0x5a4a	; 0x5a4a <__epilogue_restores__+0xa>

00000b04 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->max_clust - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	e8 e8       	ldi	r30, 0x88	; 136
     b0a:	f5 e0       	ldi	r31, 0x05	; 5
     b0c:	0c 94 06 2d 	jmp	0x5a0c	; 0x5a0c <__prologue_saves__+0x4>
     b10:	ec 01       	movw	r28, r24
     b12:	6a 01       	movw	r12, r20
     b14:	7b 01       	movw	r14, r22
     b16:	28 01       	movw	r4, r16
     b18:	39 01       	movw	r6, r18
	BYTE *p;
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
     b1a:	42 30       	cpi	r20, 0x02	; 2
     b1c:	51 05       	cpc	r21, r1
     b1e:	61 05       	cpc	r22, r1
     b20:	71 05       	cpc	r23, r1
     b22:	08 f4       	brcc	.+2      	; 0xb26 <put_fat+0x22>
     b24:	ae c0       	rjmp	.+348    	; 0xc82 <put_fat+0x17e>
     b26:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b28:	9f 8d       	ldd	r25, Y+31	; 0x1f
     b2a:	a8 a1       	ldd	r26, Y+32	; 0x20
     b2c:	b9 a1       	ldd	r27, Y+33	; 0x21
     b2e:	48 17       	cp	r20, r24
     b30:	59 07       	cpc	r21, r25
     b32:	6a 07       	cpc	r22, r26
     b34:	7b 07       	cpc	r23, r27
     b36:	08 f0       	brcs	.+2      	; 0xb3a <put_fat+0x36>
     b38:	a4 c0       	rjmp	.+328    	; 0xc82 <put_fat+0x17e>
		res = FR_INT_ERR;

	} else {
		fsect = fs->fatbase;
     b3a:	8a a0       	ldd	r8, Y+34	; 0x22
     b3c:	9b a0       	ldd	r9, Y+35	; 0x23
     b3e:	ac a0       	ldd	r10, Y+36	; 0x24
     b40:	bd a0       	ldd	r11, Y+37	; 0x25
		switch (fs->fs_type) {
     b42:	88 81       	ld	r24, Y
     b44:	82 30       	cpi	r24, 0x02	; 2
     b46:	09 f4       	brne	.+2      	; 0xb4a <put_fat+0x46>
     b48:	62 c0       	rjmp	.+196    	; 0xc0e <put_fat+0x10a>
     b4a:	83 30       	cpi	r24, 0x03	; 3
     b4c:	09 f4       	brne	.+2      	; 0xb50 <put_fat+0x4c>
     b4e:	76 c0       	rjmp	.+236    	; 0xc3c <put_fat+0x138>
     b50:	81 30       	cpi	r24, 0x01	; 1
     b52:	09 f0       	breq	.+2      	; 0xb56 <put_fat+0x52>
     b54:	91 c0       	rjmp	.+290    	; 0xc78 <put_fat+0x174>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
     b56:	8a 01       	movw	r16, r20
     b58:	16 95       	lsr	r17
     b5a:	07 95       	ror	r16
     b5c:	04 0f       	add	r16, r20
     b5e:	15 1f       	adc	r17, r21
			res = move_window(fs, fsect + (bc / SS(fs)));
     b60:	a8 01       	movw	r20, r16
     b62:	45 2f       	mov	r20, r21
     b64:	55 27       	eor	r21, r21
     b66:	46 95       	lsr	r20
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	48 0d       	add	r20, r8
     b6e:	59 1d       	adc	r21, r9
     b70:	6a 1d       	adc	r22, r10
     b72:	7b 1d       	adc	r23, r11
     b74:	ce 01       	movw	r24, r28
     b76:	0e 94 1d 04 	call	0x83a	; 0x83a <move_window>
     b7a:	9c 01       	movw	r18, r24
			if (res != FR_OK) break;
     b7c:	00 97       	sbiw	r24, 0x00	; 0
     b7e:	09 f0       	breq	.+2      	; 0xb82 <put_fat+0x7e>
     b80:	7d c0       	rjmp	.+250    	; 0xc7c <put_fat+0x178>
			p = &fs->win[bc & (SS(fs) - 1)];
     b82:	c8 01       	movw	r24, r16
     b84:	91 70       	andi	r25, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
     b86:	e1 e0       	ldi	r30, 0x01	; 1
     b88:	ce 22       	and	r12, r30
     b8a:	dd 24       	eor	r13, r13
     b8c:	c1 14       	cp	r12, r1
     b8e:	d1 04       	cpc	r13, r1
     b90:	51 f0       	breq	.+20     	; 0xba6 <put_fat+0xa2>
     b92:	fe 01       	movw	r30, r28
     b94:	e8 0f       	add	r30, r24
     b96:	f9 1f       	adc	r31, r25
     b98:	32 a9       	ldd	r19, Z+50	; 0x32
     b9a:	3f 70       	andi	r19, 0x0F	; 15
     b9c:	24 2d       	mov	r18, r4
     b9e:	22 95       	swap	r18
     ba0:	20 7f       	andi	r18, 0xF0	; 240
     ba2:	23 2b       	or	r18, r19
     ba4:	01 c0       	rjmp	.+2      	; 0xba8 <put_fat+0xa4>
     ba6:	24 2d       	mov	r18, r4
     ba8:	8c 0f       	add	r24, r28
     baa:	9d 1f       	adc	r25, r29
     bac:	fc 01       	movw	r30, r24
     bae:	22 ab       	std	Z+50, r18	; 0x32
			bc++;
     bb0:	0f 5f       	subi	r16, 0xFF	; 255
     bb2:	1f 4f       	sbci	r17, 0xFF	; 255
			fs->wflag = 1;
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 83       	std	Y+4, r24	; 0x04
			res = move_window(fs, fsect + (bc / SS(fs)));
     bb8:	a8 01       	movw	r20, r16
     bba:	45 2f       	mov	r20, r21
     bbc:	55 27       	eor	r21, r21
     bbe:	46 95       	lsr	r20
     bc0:	60 e0       	ldi	r22, 0x00	; 0
     bc2:	70 e0       	ldi	r23, 0x00	; 0
     bc4:	48 0d       	add	r20, r8
     bc6:	59 1d       	adc	r21, r9
     bc8:	6a 1d       	adc	r22, r10
     bca:	7b 1d       	adc	r23, r11
     bcc:	ce 01       	movw	r24, r28
     bce:	0e 94 1d 04 	call	0x83a	; 0x83a <move_window>
     bd2:	9c 01       	movw	r18, r24
			if (res != FR_OK) break;
     bd4:	00 97       	sbiw	r24, 0x00	; 0
     bd6:	09 f0       	breq	.+2      	; 0xbda <put_fat+0xd6>
     bd8:	51 c0       	rjmp	.+162    	; 0xc7c <put_fat+0x178>
			p = &fs->win[bc & (SS(fs) - 1)];
     bda:	11 70       	andi	r17, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
     bdc:	c1 14       	cp	r12, r1
     bde:	d1 04       	cpc	r13, r1
     be0:	49 f0       	breq	.+18     	; 0xbf4 <put_fat+0xf0>
     be2:	44 e0       	ldi	r20, 0x04	; 4
     be4:	76 94       	lsr	r7
     be6:	67 94       	ror	r6
     be8:	57 94       	ror	r5
     bea:	47 94       	ror	r4
     bec:	4a 95       	dec	r20
     bee:	d1 f7       	brne	.-12     	; 0xbe4 <put_fat+0xe0>
     bf0:	84 2d       	mov	r24, r4
     bf2:	08 c0       	rjmp	.+16     	; 0xc04 <put_fat+0x100>
     bf4:	fe 01       	movw	r30, r28
     bf6:	e0 0f       	add	r30, r16
     bf8:	f1 1f       	adc	r31, r17
     bfa:	82 a9       	ldd	r24, Z+50	; 0x32
     bfc:	80 7f       	andi	r24, 0xF0	; 240
     bfe:	95 2d       	mov	r25, r5
     c00:	9f 70       	andi	r25, 0x0F	; 15
     c02:	89 2b       	or	r24, r25
     c04:	0c 0f       	add	r16, r28
     c06:	1d 1f       	adc	r17, r29
     c08:	f8 01       	movw	r30, r16
     c0a:	82 ab       	std	Z+50, r24	; 0x32
			break;
     c0c:	37 c0       	rjmp	.+110    	; 0xc7c <put_fat+0x178>

		case FS_FAT16 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
     c0e:	45 2f       	mov	r20, r21
     c10:	56 2f       	mov	r21, r22
     c12:	67 2f       	mov	r22, r23
     c14:	77 27       	eor	r23, r23
     c16:	48 0d       	add	r20, r8
     c18:	59 1d       	adc	r21, r9
     c1a:	6a 1d       	adc	r22, r10
     c1c:	7b 1d       	adc	r23, r11
     c1e:	ce 01       	movw	r24, r28
     c20:	0e 94 1d 04 	call	0x83a	; 0x83a <move_window>
     c24:	9c 01       	movw	r18, r24
			if (res != FR_OK) break;
     c26:	00 97       	sbiw	r24, 0x00	; 0
     c28:	49 f5       	brne	.+82     	; 0xc7c <put_fat+0x178>
			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
     c2a:	f6 01       	movw	r30, r12
     c2c:	ee 0f       	add	r30, r30
     c2e:	ff 1f       	adc	r31, r31
     c30:	f1 70       	andi	r31, 0x01	; 1
     c32:	ec 0f       	add	r30, r28
     c34:	fd 1f       	adc	r31, r29
     c36:	53 aa       	std	Z+51, r5	; 0x33
     c38:	42 aa       	std	Z+50, r4	; 0x32
			break;
     c3a:	20 c0       	rjmp	.+64     	; 0xc7c <put_fat+0x178>

		case FS_FAT32 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
     c3c:	b7 e0       	ldi	r27, 0x07	; 7
     c3e:	76 95       	lsr	r23
     c40:	67 95       	ror	r22
     c42:	57 95       	ror	r21
     c44:	47 95       	ror	r20
     c46:	ba 95       	dec	r27
     c48:	d1 f7       	brne	.-12     	; 0xc3e <put_fat+0x13a>
     c4a:	48 0d       	add	r20, r8
     c4c:	59 1d       	adc	r21, r9
     c4e:	6a 1d       	adc	r22, r10
     c50:	7b 1d       	adc	r23, r11
     c52:	ce 01       	movw	r24, r28
     c54:	0e 94 1d 04 	call	0x83a	; 0x83a <move_window>
     c58:	9c 01       	movw	r18, r24
			if (res != FR_OK) break;
     c5a:	00 97       	sbiw	r24, 0x00	; 0
     c5c:	79 f4       	brne	.+30     	; 0xc7c <put_fat+0x178>
			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
     c5e:	f6 01       	movw	r30, r12
     c60:	ee 0f       	add	r30, r30
     c62:	ff 1f       	adc	r31, r31
     c64:	ee 0f       	add	r30, r30
     c66:	ff 1f       	adc	r31, r31
     c68:	f1 70       	andi	r31, 0x01	; 1
     c6a:	ec 0f       	add	r30, r28
     c6c:	fd 1f       	adc	r31, r29
     c6e:	42 aa       	std	Z+50, r4	; 0x32
     c70:	53 aa       	std	Z+51, r5	; 0x33
     c72:	64 aa       	std	Z+52, r6	; 0x34
     c74:	75 aa       	std	Z+53, r7	; 0x35
			break;
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <put_fat+0x178>

		default :
			res = FR_INT_ERR;
     c78:	22 e0       	ldi	r18, 0x02	; 2
     c7a:	30 e0       	ldi	r19, 0x00	; 0
		}
		fs->wflag = 1;
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	8c 83       	std	Y+4, r24	; 0x04
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <put_fat+0x182>
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
		res = FR_INT_ERR;
     c82:	22 e0       	ldi	r18, 0x02	; 2
     c84:	30 e0       	ldi	r19, 0x00	; 0
		}
		fs->wflag = 1;
	}

	return res;
}
     c86:	c9 01       	movw	r24, r18
     c88:	cd b7       	in	r28, 0x3d	; 61
     c8a:	de b7       	in	r29, 0x3e	; 62
     c8c:	e0 e1       	ldi	r30, 0x10	; 16
     c8e:	0c 94 22 2d 	jmp	0x5a44	; 0x5a44 <__epilogue_restores__+0x4>

00000c92 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
     c92:	a4 e0       	ldi	r26, 0x04	; 4
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	ef e4       	ldi	r30, 0x4F	; 79
     c98:	f6 e0       	ldi	r31, 0x06	; 6
     c9a:	0c 94 04 2d 	jmp	0x5a08	; 0x5a08 <__prologue_saves__>
     c9e:	1c 01       	movw	r2, r24
     ca0:	2a 01       	movw	r4, r20
     ca2:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl, mcl;


	mcl = fs->max_clust;
     ca4:	dc 01       	movw	r26, r24
     ca6:	5e 96       	adiw	r26, 0x1e	; 30
     ca8:	8d 91       	ld	r24, X+
     caa:	9d 91       	ld	r25, X+
     cac:	0d 90       	ld	r0, X+
     cae:	bc 91       	ld	r27, X
     cb0:	a0 2d       	mov	r26, r0
     cb2:	89 83       	std	Y+1, r24	; 0x01
     cb4:	9a 83       	std	Y+2, r25	; 0x02
     cb6:	ab 83       	std	Y+3, r26	; 0x03
     cb8:	bc 83       	std	Y+4, r27	; 0x04
	if (clst == 0) {		/* Create new chain */
     cba:	41 15       	cp	r20, r1
     cbc:	51 05       	cpc	r21, r1
     cbe:	61 05       	cpc	r22, r1
     cc0:	71 05       	cpc	r23, r1
     cc2:	81 f4       	brne	.+32     	; 0xce4 <create_chain+0x52>
		scl = fs->last_clust;			/* Get suggested start point */
     cc4:	f1 01       	movw	r30, r2
     cc6:	82 84       	ldd	r8, Z+10	; 0x0a
     cc8:	93 84       	ldd	r9, Z+11	; 0x0b
     cca:	a4 84       	ldd	r10, Z+12	; 0x0c
     ccc:	b5 84       	ldd	r11, Z+13	; 0x0d
		if (scl == 0 || scl >= mcl) scl = 1;
     cce:	81 14       	cp	r8, r1
     cd0:	91 04       	cpc	r9, r1
     cd2:	a1 04       	cpc	r10, r1
     cd4:	b1 04       	cpc	r11, r1
     cd6:	f1 f0       	breq	.+60     	; 0xd14 <create_chain+0x82>
     cd8:	88 16       	cp	r8, r24
     cda:	99 06       	cpc	r9, r25
     cdc:	aa 06       	cpc	r10, r26
     cde:	bb 06       	cpc	r11, r27
     ce0:	c8 f4       	brcc	.+50     	; 0xd14 <create_chain+0x82>
     ce2:	1d c0       	rjmp	.+58     	; 0xd1e <create_chain+0x8c>
	}
	else {					/* Stretch existing chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
     ce4:	c1 01       	movw	r24, r2
     ce6:	0e 94 cd 04 	call	0x99a	; 0x99a <get_fat>
     cea:	9b 01       	movw	r18, r22
     cec:	ac 01       	movw	r20, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
     cee:	62 30       	cpi	r22, 0x02	; 2
     cf0:	71 05       	cpc	r23, r1
     cf2:	81 05       	cpc	r24, r1
     cf4:	91 05       	cpc	r25, r1
     cf6:	08 f4       	brcc	.+2      	; 0xcfa <create_chain+0x68>
     cf8:	88 c0       	rjmp	.+272    	; 0xe0a <create_chain+0x178>
		if (cs < mcl) return cs;		/* It is already followed by next cluster */
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	9a 81       	ldd	r25, Y+2	; 0x02
     cfe:	ab 81       	ldd	r26, Y+3	; 0x03
     d00:	bc 81       	ldd	r27, Y+4	; 0x04
     d02:	28 17       	cp	r18, r24
     d04:	39 07       	cpc	r19, r25
     d06:	4a 07       	cpc	r20, r26
     d08:	5b 07       	cpc	r21, r27
     d0a:	08 f4       	brcc	.+2      	; 0xd0e <create_chain+0x7c>
     d0c:	8d c0       	rjmp	.+282    	; 0xe28 <create_chain+0x196>
     d0e:	53 01       	movw	r10, r6
     d10:	42 01       	movw	r8, r4
     d12:	05 c0       	rjmp	.+10     	; 0xd1e <create_chain+0x8c>


	mcl = fs->max_clust;
	if (clst == 0) {		/* Create new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (scl == 0 || scl >= mcl) scl = 1;
     d14:	a1 e0       	ldi	r26, 0x01	; 1
     d16:	8a 2e       	mov	r8, r26
     d18:	91 2c       	mov	r9, r1
     d1a:	a1 2c       	mov	r10, r1
     d1c:	b1 2c       	mov	r11, r1
     d1e:	75 01       	movw	r14, r10
     d20:	64 01       	movw	r12, r8
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
     d22:	08 94       	sec
     d24:	c1 1c       	adc	r12, r1
     d26:	d1 1c       	adc	r13, r1
     d28:	e1 1c       	adc	r14, r1
     d2a:	f1 1c       	adc	r15, r1
		if (ncl >= mcl) {				/* Wrap around */
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	9a 81       	ldd	r25, Y+2	; 0x02
     d30:	ab 81       	ldd	r26, Y+3	; 0x03
     d32:	bc 81       	ldd	r27, Y+4	; 0x04
     d34:	c8 16       	cp	r12, r24
     d36:	d9 06       	cpc	r13, r25
     d38:	ea 06       	cpc	r14, r26
     d3a:	fb 06       	cpc	r15, r27
     d3c:	60 f0       	brcs	.+24     	; 0xd56 <create_chain+0xc4>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free custer */
     d3e:	92 e0       	ldi	r25, 0x02	; 2
     d40:	89 16       	cp	r8, r25
     d42:	91 04       	cpc	r9, r1
     d44:	a1 04       	cpc	r10, r1
     d46:	b1 04       	cpc	r11, r1
     d48:	08 f4       	brcc	.+2      	; 0xd4c <create_chain+0xba>
     d4a:	64 c0       	rjmp	.+200    	; 0xe14 <create_chain+0x182>

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= mcl) {				/* Wrap around */
			ncl = 2;
     d4c:	f2 e0       	ldi	r31, 0x02	; 2
     d4e:	cf 2e       	mov	r12, r31
     d50:	d1 2c       	mov	r13, r1
     d52:	e1 2c       	mov	r14, r1
     d54:	f1 2c       	mov	r15, r1
			if (ncl > scl) return 0;	/* No free custer */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
     d56:	c1 01       	movw	r24, r2
     d58:	b7 01       	movw	r22, r14
     d5a:	a6 01       	movw	r20, r12
     d5c:	0e 94 cd 04 	call	0x99a	; 0x99a <get_fat>
     d60:	9b 01       	movw	r18, r22
     d62:	ac 01       	movw	r20, r24
		if (cs == 0) break;				/* Found a free cluster */
     d64:	61 15       	cp	r22, r1
     d66:	71 05       	cpc	r23, r1
     d68:	81 05       	cpc	r24, r1
     d6a:	91 05       	cpc	r25, r1
     d6c:	a9 f0       	breq	.+42     	; 0xd98 <create_chain+0x106>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
     d6e:	6f 3f       	cpi	r22, 0xFF	; 255
     d70:	af ef       	ldi	r26, 0xFF	; 255
     d72:	7a 07       	cpc	r23, r26
     d74:	af ef       	ldi	r26, 0xFF	; 255
     d76:	8a 07       	cpc	r24, r26
     d78:	af ef       	ldi	r26, 0xFF	; 255
     d7a:	9a 07       	cpc	r25, r26
     d7c:	09 f4       	brne	.+2      	; 0xd80 <create_chain+0xee>
     d7e:	54 c0       	rjmp	.+168    	; 0xe28 <create_chain+0x196>
     d80:	61 30       	cpi	r22, 0x01	; 1
     d82:	71 05       	cpc	r23, r1
     d84:	81 05       	cpc	r24, r1
     d86:	91 05       	cpc	r25, r1
     d88:	09 f4       	brne	.+2      	; 0xd8c <create_chain+0xfa>
     d8a:	4e c0       	rjmp	.+156    	; 0xe28 <create_chain+0x196>
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
     d8c:	c8 14       	cp	r12, r8
     d8e:	d9 04       	cpc	r13, r9
     d90:	ea 04       	cpc	r14, r10
     d92:	fb 04       	cpc	r15, r11
     d94:	31 f6       	brne	.-116    	; 0xd22 <create_chain+0x90>
     d96:	3e c0       	rjmp	.+124    	; 0xe14 <create_chain+0x182>
		if (ncl >= mcl) {				/* Wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free custer */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
     d98:	8c 2c       	mov	r8, r12
     d9a:	bd 2c       	mov	r11, r13
     d9c:	ae 2c       	mov	r10, r14
     d9e:	9f 2c       	mov	r9, r15
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
     da0:	c1 01       	movw	r24, r2
     da2:	a6 01       	movw	r20, r12
     da4:	b7 01       	movw	r22, r14
     da6:	0f ef       	ldi	r16, 0xFF	; 255
     da8:	1f ef       	ldi	r17, 0xFF	; 255
     daa:	2f ef       	ldi	r18, 0xFF	; 255
     dac:	3f e0       	ldi	r19, 0x0F	; 15
     dae:	0e 94 82 05 	call	0xb04	; 0xb04 <put_fat>
     db2:	00 97       	sbiw	r24, 0x00	; 0
     db4:	99 f5       	brne	.+102    	; 0xe1c <create_chain+0x18a>
		return 0xFFFFFFFF;
	if (clst != 0) {					/* Link it to the previous one if needed */
     db6:	41 14       	cp	r4, r1
     db8:	51 04       	cpc	r5, r1
     dba:	61 04       	cpc	r6, r1
     dbc:	71 04       	cpc	r7, r1
     dbe:	49 f0       	breq	.+18     	; 0xdd2 <create_chain+0x140>
		if (put_fat(fs, clst, ncl))
     dc0:	c1 01       	movw	r24, r2
     dc2:	b3 01       	movw	r22, r6
     dc4:	a2 01       	movw	r20, r4
     dc6:	86 01       	movw	r16, r12
     dc8:	97 01       	movw	r18, r14
     dca:	0e 94 82 05 	call	0xb04	; 0xb04 <put_fat>
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	29 f5       	brne	.+74     	; 0xe1c <create_chain+0x18a>
			return 0xFFFFFFFF;
	}

	fs->last_clust = ncl;				/* Update FSINFO */
     dd2:	f1 01       	movw	r30, r2
     dd4:	82 86       	std	Z+10, r8	; 0x0a
     dd6:	b3 86       	std	Z+11, r11	; 0x0b
     dd8:	a4 86       	std	Z+12, r10	; 0x0c
     dda:	95 86       	std	Z+13, r9	; 0x0d
	if (fs->free_clust != 0xFFFFFFFF) {
     ddc:	86 85       	ldd	r24, Z+14	; 0x0e
     dde:	97 85       	ldd	r25, Z+15	; 0x0f
     de0:	a0 89       	ldd	r26, Z+16	; 0x10
     de2:	b1 89       	ldd	r27, Z+17	; 0x11
     de4:	8f 3f       	cpi	r24, 0xFF	; 255
     de6:	ff ef       	ldi	r31, 0xFF	; 255
     de8:	9f 07       	cpc	r25, r31
     dea:	ff ef       	ldi	r31, 0xFF	; 255
     dec:	af 07       	cpc	r26, r31
     dee:	ff ef       	ldi	r31, 0xFF	; 255
     df0:	bf 07       	cpc	r27, r31
     df2:	c1 f0       	breq	.+48     	; 0xe24 <create_chain+0x192>
		fs->free_clust--;
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	a1 09       	sbc	r26, r1
     df8:	b1 09       	sbc	r27, r1
     dfa:	f1 01       	movw	r30, r2
     dfc:	86 87       	std	Z+14, r24	; 0x0e
     dfe:	97 87       	std	Z+15, r25	; 0x0f
     e00:	a0 8b       	std	Z+16, r26	; 0x10
     e02:	b1 8b       	std	Z+17, r27	; 0x11
		fs->fsi_flag = 1;
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	85 83       	std	Z+5, r24	; 0x05
     e08:	0d c0       	rjmp	.+26     	; 0xe24 <create_chain+0x192>
		scl = fs->last_clust;			/* Get suggested start point */
		if (scl == 0 || scl >= mcl) scl = 1;
	}
	else {					/* Stretch existing chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
		if (cs < 2) return 1;			/* It is an invalid cluster */
     e0a:	21 e0       	ldi	r18, 0x01	; 1
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	40 e0       	ldi	r20, 0x00	; 0
     e10:	50 e0       	ldi	r21, 0x00	; 0
     e12:	0a c0       	rjmp	.+20     	; 0xe28 <create_chain+0x196>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	a9 01       	movw	r20, r18
     e1a:	06 c0       	rjmp	.+12     	; 0xe28 <create_chain+0x196>

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
		return 0xFFFFFFFF;
	if (clst != 0) {					/* Link it to the previous one if needed */
		if (put_fat(fs, clst, ncl))
			return 0xFFFFFFFF;
     e1c:	2f ef       	ldi	r18, 0xFF	; 255
     e1e:	3f ef       	ldi	r19, 0xFF	; 255
     e20:	a9 01       	movw	r20, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <create_chain+0x196>
	}

	fs->last_clust = ncl;				/* Update FSINFO */
	if (fs->free_clust != 0xFFFFFFFF) {
     e24:	a7 01       	movw	r20, r14
     e26:	96 01       	movw	r18, r12
		fs->free_clust--;
		fs->fsi_flag = 1;
	}

	return ncl;		/* Return new cluster number */
}
     e28:	b9 01       	movw	r22, r18
     e2a:	ca 01       	movw	r24, r20
     e2c:	24 96       	adiw	r28, 0x04	; 4
     e2e:	e2 e1       	ldi	r30, 0x12	; 18
     e30:	0c 94 20 2d 	jmp	0x5a40	; 0x5a40 <__epilogue_restores__>

00000e34 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
     e34:	cf 93       	push	r28
     e36:	df 93       	push	r29
     e38:	ec 01       	movw	r28, r24
     e3a:	cb 01       	movw	r24, r22
     e3c:	ba 01       	movw	r22, r20
	clst -= 2;
     e3e:	62 50       	subi	r22, 0x02	; 2
     e40:	70 40       	sbci	r23, 0x00	; 0
     e42:	80 40       	sbci	r24, 0x00	; 0
     e44:	90 40       	sbci	r25, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
     e46:	2e 8d       	ldd	r18, Y+30	; 0x1e
     e48:	3f 8d       	ldd	r19, Y+31	; 0x1f
     e4a:	48 a1       	ldd	r20, Y+32	; 0x20
     e4c:	59 a1       	ldd	r21, Y+33	; 0x21
     e4e:	22 50       	subi	r18, 0x02	; 2
     e50:	30 40       	sbci	r19, 0x00	; 0
     e52:	40 40       	sbci	r20, 0x00	; 0
     e54:	50 40       	sbci	r21, 0x00	; 0
     e56:	62 17       	cp	r22, r18
     e58:	73 07       	cpc	r23, r19
     e5a:	84 07       	cpc	r24, r20
     e5c:	95 07       	cpc	r25, r21
     e5e:	88 f4       	brcc	.+34     	; 0xe82 <clust2sect+0x4e>
	return clst * fs->csize + fs->database;
     e60:	2a 81       	ldd	r18, Y+2	; 0x02
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	40 e0       	ldi	r20, 0x00	; 0
     e66:	50 e0       	ldi	r21, 0x00	; 0
     e68:	0e 94 90 2c 	call	0x5920	; 0x5920 <__mulsi3>
     e6c:	9b 01       	movw	r18, r22
     e6e:	ac 01       	movw	r20, r24
     e70:	8a a5       	ldd	r24, Y+42	; 0x2a
     e72:	9b a5       	ldd	r25, Y+43	; 0x2b
     e74:	ac a5       	ldd	r26, Y+44	; 0x2c
     e76:	bd a5       	ldd	r27, Y+45	; 0x2d
     e78:	28 0f       	add	r18, r24
     e7a:	39 1f       	adc	r19, r25
     e7c:	4a 1f       	adc	r20, r26
     e7e:	5b 1f       	adc	r21, r27
     e80:	03 c0       	rjmp	.+6      	; 0xe88 <clust2sect+0x54>
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	a9 01       	movw	r20, r18
	return clst * fs->csize + fs->database;
}
     e88:	b9 01       	movw	r22, r18
     e8a:	ca 01       	movw	r24, r20
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	08 95       	ret

00000e92 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
	DIR *dj,		/* Pointer to directory object */
	BOOL streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
)
{
     e92:	a0 e0       	ldi	r26, 0x00	; 0
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	ef e4       	ldi	r30, 0x4F	; 79
     e98:	f7 e0       	ldi	r31, 0x07	; 7
     e9a:	0c 94 0a 2d 	jmp	0x5a14	; 0x5a14 <__prologue_saves__+0xc>
     e9e:	ec 01       	movw	r28, r24
     ea0:	5b 01       	movw	r10, r22
	DWORD clst;
	WORD i;


	i = dj->index + 1;
     ea2:	cc 80       	ldd	r12, Y+4	; 0x04
     ea4:	dd 80       	ldd	r13, Y+5	; 0x05
     ea6:	08 94       	sec
     ea8:	c1 1c       	adc	r12, r1
     eaa:	d1 1c       	adc	r13, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
     eac:	c1 14       	cp	r12, r1
     eae:	d1 04       	cpc	r13, r1
     eb0:	09 f4       	brne	.+2      	; 0xeb4 <dir_next+0x22>
     eb2:	ee c0       	rjmp	.+476    	; 0x1090 <dir_next+0x1fe>
     eb4:	8e 85       	ldd	r24, Y+14	; 0x0e
     eb6:	9f 85       	ldd	r25, Y+15	; 0x0f
     eb8:	a8 89       	ldd	r26, Y+16	; 0x10
     eba:	b9 89       	ldd	r27, Y+17	; 0x11
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	a1 05       	cpc	r26, r1
     ec0:	b1 05       	cpc	r27, r1
     ec2:	09 f4       	brne	.+2      	; 0xec6 <dir_next+0x34>
     ec4:	e5 c0       	rjmp	.+458    	; 0x1090 <dir_next+0x1fe>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
     ec6:	2f e0       	ldi	r18, 0x0F	; 15
     ec8:	82 2e       	mov	r8, r18
     eca:	91 2c       	mov	r9, r1
     ecc:	8c 20       	and	r8, r12
     ece:	9d 20       	and	r9, r13
     ed0:	81 14       	cp	r8, r1
     ed2:	91 04       	cpc	r9, r1
     ed4:	09 f0       	breq	.+2      	; 0xed8 <dir_next+0x46>
     ed6:	cb c0       	rjmp	.+406    	; 0x106e <dir_next+0x1dc>
		dj->sect++;					/* Next sector */
     ed8:	01 96       	adiw	r24, 0x01	; 1
     eda:	a1 1d       	adc	r26, r1
     edc:	b1 1d       	adc	r27, r1
     ede:	8e 87       	std	Y+14, r24	; 0x0e
     ee0:	9f 87       	std	Y+15, r25	; 0x0f
     ee2:	a8 8b       	std	Y+16, r26	; 0x10
     ee4:	b9 8b       	std	Y+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
     ee6:	4a 85       	ldd	r20, Y+10	; 0x0a
     ee8:	5b 85       	ldd	r21, Y+11	; 0x0b
     eea:	6c 85       	ldd	r22, Y+12	; 0x0c
     eec:	7d 85       	ldd	r23, Y+13	; 0x0d
     eee:	88 81       	ld	r24, Y
     ef0:	99 81       	ldd	r25, Y+1	; 0x01
     ef2:	41 15       	cp	r20, r1
     ef4:	51 05       	cpc	r21, r1
     ef6:	61 05       	cpc	r22, r1
     ef8:	71 05       	cpc	r23, r1
     efa:	41 f4       	brne	.+16     	; 0xf0c <dir_next+0x7a>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
     efc:	fc 01       	movw	r30, r24
     efe:	80 85       	ldd	r24, Z+8	; 0x08
     f00:	91 85       	ldd	r25, Z+9	; 0x09
     f02:	c8 16       	cp	r12, r24
     f04:	d9 06       	cpc	r13, r25
     f06:	08 f4       	brcc	.+2      	; 0xf0a <dir_next+0x78>
     f08:	b2 c0       	rjmp	.+356    	; 0x106e <dir_next+0x1dc>
     f0a:	c2 c0       	rjmp	.+388    	; 0x1090 <dir_next+0x1fe>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
     f0c:	fc 01       	movw	r30, r24
     f0e:	22 81       	ldd	r18, Z+2	; 0x02
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	21 50       	subi	r18, 0x01	; 1
     f14:	30 40       	sbci	r19, 0x00	; 0
     f16:	f6 01       	movw	r30, r12
     f18:	a4 e0       	ldi	r26, 0x04	; 4
     f1a:	f6 95       	lsr	r31
     f1c:	e7 95       	ror	r30
     f1e:	aa 95       	dec	r26
     f20:	e1 f7       	brne	.-8      	; 0xf1a <dir_next+0x88>
     f22:	2e 23       	and	r18, r30
     f24:	3f 23       	and	r19, r31
     f26:	21 15       	cp	r18, r1
     f28:	31 05       	cpc	r19, r1
     f2a:	09 f0       	breq	.+2      	; 0xf2e <dir_next+0x9c>
     f2c:	a0 c0       	rjmp	.+320    	; 0x106e <dir_next+0x1dc>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
     f2e:	0e 94 cd 04 	call	0x99a	; 0x99a <get_fat>
     f32:	7b 01       	movw	r14, r22
     f34:	8c 01       	movw	r16, r24
				if (clst <= 1) return FR_INT_ERR;
     f36:	62 30       	cpi	r22, 0x02	; 2
     f38:	71 05       	cpc	r23, r1
     f3a:	81 05       	cpc	r24, r1
     f3c:	91 05       	cpc	r25, r1
     f3e:	08 f4       	brcc	.+2      	; 0xf42 <dir_next+0xb0>
     f40:	ad c0       	rjmp	.+346    	; 0x109c <dir_next+0x20a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
     f42:	8f ef       	ldi	r24, 0xFF	; 255
     f44:	e8 16       	cp	r14, r24
     f46:	8f ef       	ldi	r24, 0xFF	; 255
     f48:	f8 06       	cpc	r15, r24
     f4a:	8f ef       	ldi	r24, 0xFF	; 255
     f4c:	08 07       	cpc	r16, r24
     f4e:	8f ef       	ldi	r24, 0xFF	; 255
     f50:	18 07       	cpc	r17, r24
     f52:	09 f4       	brne	.+2      	; 0xf56 <dir_next+0xc4>
     f54:	a6 c0       	rjmp	.+332    	; 0x10a2 <dir_next+0x210>
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
     f56:	88 81       	ld	r24, Y
     f58:	99 81       	ldd	r25, Y+1	; 0x01
     f5a:	fc 01       	movw	r30, r24
     f5c:	26 8d       	ldd	r18, Z+30	; 0x1e
     f5e:	37 8d       	ldd	r19, Z+31	; 0x1f
     f60:	40 a1       	ldd	r20, Z+32	; 0x20
     f62:	51 a1       	ldd	r21, Z+33	; 0x21
     f64:	e2 16       	cp	r14, r18
     f66:	f3 06       	cpc	r15, r19
     f68:	04 07       	cpc	r16, r20
     f6a:	15 07       	cpc	r17, r21
     f6c:	08 f4       	brcc	.+2      	; 0xf70 <dir_next+0xde>
     f6e:	71 c0       	rjmp	.+226    	; 0x1052 <dir_next+0x1c0>
#if !_FS_READONLY
					BYTE c;
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
     f70:	a1 14       	cp	r10, r1
     f72:	b1 04       	cpc	r11, r1
     f74:	09 f4       	brne	.+2      	; 0xf78 <dir_next+0xe6>
     f76:	8c c0       	rjmp	.+280    	; 0x1090 <dir_next+0x1fe>
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
     f78:	4a 85       	ldd	r20, Y+10	; 0x0a
     f7a:	5b 85       	ldd	r21, Y+11	; 0x0b
     f7c:	6c 85       	ldd	r22, Y+12	; 0x0c
     f7e:	7d 85       	ldd	r23, Y+13	; 0x0d
     f80:	0e 94 49 06 	call	0xc92	; 0xc92 <create_chain>
     f84:	7b 01       	movw	r14, r22
     f86:	8c 01       	movw	r16, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
     f88:	61 15       	cp	r22, r1
     f8a:	71 05       	cpc	r23, r1
     f8c:	81 05       	cpc	r24, r1
     f8e:	91 05       	cpc	r25, r1
     f90:	09 f4       	brne	.+2      	; 0xf94 <dir_next+0x102>
     f92:	81 c0       	rjmp	.+258    	; 0x1096 <dir_next+0x204>
					if (clst == 1) return FR_INT_ERR;
     f94:	61 30       	cpi	r22, 0x01	; 1
     f96:	71 05       	cpc	r23, r1
     f98:	81 05       	cpc	r24, r1
     f9a:	91 05       	cpc	r25, r1
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <dir_next+0x10e>
     f9e:	7e c0       	rjmp	.+252    	; 0x109c <dir_next+0x20a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
     fa0:	8f ef       	ldi	r24, 0xFF	; 255
     fa2:	e8 16       	cp	r14, r24
     fa4:	8f ef       	ldi	r24, 0xFF	; 255
     fa6:	f8 06       	cpc	r15, r24
     fa8:	8f ef       	ldi	r24, 0xFF	; 255
     faa:	08 07       	cpc	r16, r24
     fac:	8f ef       	ldi	r24, 0xFF	; 255
     fae:	18 07       	cpc	r17, r24
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <dir_next+0x122>
     fb2:	77 c0       	rjmp	.+238    	; 0x10a2 <dir_next+0x210>
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
     fb4:	88 81       	ld	r24, Y
     fb6:	99 81       	ldd	r25, Y+1	; 0x01
     fb8:	40 e0       	ldi	r20, 0x00	; 0
     fba:	50 e0       	ldi	r21, 0x00	; 0
     fbc:	ba 01       	movw	r22, r20
     fbe:	0e 94 1d 04 	call	0x83a	; 0x83a <move_window>
     fc2:	00 97       	sbiw	r24, 0x00	; 0
     fc4:	09 f0       	breq	.+2      	; 0xfc8 <dir_next+0x136>
     fc6:	6d c0       	rjmp	.+218    	; 0x10a2 <dir_next+0x210>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
     fc8:	88 81       	ld	r24, Y
     fca:	99 81       	ldd	r25, Y+1	; 0x01
     fcc:	fc 01       	movw	r30, r24
     fce:	f2 96       	adiw	r30, 0x32	; 50
/*-----------------------------------------------------------------------*/
/* Directory handling - Move directory index next                        */
/*-----------------------------------------------------------------------*/

static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
     fd0:	8e 5c       	subi	r24, 0xCE	; 206
     fd2:	9d 4f       	sbci	r25, 0xFD	; 253
     fd4:	01 c0       	rjmp	.+2      	; 0xfd8 <dir_next+0x146>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
     fd6:	11 92       	st	Z+, r1
     fd8:	e8 17       	cp	r30, r24
     fda:	f9 07       	cpc	r31, r25
     fdc:	e1 f7       	brne	.-8      	; 0xfd6 <dir_next+0x144>
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
     fde:	a8 80       	ld	r10, Y
     fe0:	b9 80       	ldd	r11, Y+1	; 0x01
     fe2:	c5 01       	movw	r24, r10
     fe4:	b8 01       	movw	r22, r16
     fe6:	a7 01       	movw	r20, r14
     fe8:	0e 94 1a 07 	call	0xe34	; 0xe34 <clust2sect>
     fec:	f5 01       	movw	r30, r10
     fee:	66 a7       	std	Z+46, r22	; 0x2e
     ff0:	77 a7       	std	Z+47, r23	; 0x2f
     ff2:	80 ab       	std	Z+48, r24	; 0x30
     ff4:	91 ab       	std	Z+49, r25	; 0x31
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
     ff6:	bb 24       	eor	r11, r11
						dj->fs->wflag = 1;
     ff8:	aa 24       	eor	r10, r10
     ffa:	a3 94       	inc	r10
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
     ffc:	19 c0       	rjmp	.+50     	; 0x1030 <dir_next+0x19e>
						dj->fs->wflag = 1;
     ffe:	a4 82       	std	Z+4, r10	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    1000:	88 81       	ld	r24, Y
    1002:	99 81       	ldd	r25, Y+1	; 0x01
    1004:	40 e0       	ldi	r20, 0x00	; 0
    1006:	50 e0       	ldi	r21, 0x00	; 0
    1008:	ba 01       	movw	r22, r20
    100a:	0e 94 1d 04 	call	0x83a	; 0x83a <move_window>
    100e:	00 97       	sbiw	r24, 0x00	; 0
    1010:	09 f0       	breq	.+2      	; 0x1014 <dir_next+0x182>
    1012:	47 c0       	rjmp	.+142    	; 0x10a2 <dir_next+0x210>
						dj->fs->winsect++;
    1014:	e8 81       	ld	r30, Y
    1016:	f9 81       	ldd	r31, Y+1	; 0x01
    1018:	86 a5       	ldd	r24, Z+46	; 0x2e
    101a:	97 a5       	ldd	r25, Z+47	; 0x2f
    101c:	a0 a9       	ldd	r26, Z+48	; 0x30
    101e:	b1 a9       	ldd	r27, Z+49	; 0x31
    1020:	01 96       	adiw	r24, 0x01	; 1
    1022:	a1 1d       	adc	r26, r1
    1024:	b1 1d       	adc	r27, r1
    1026:	86 a7       	std	Z+46, r24	; 0x2e
    1028:	97 a7       	std	Z+47, r25	; 0x2f
    102a:	a0 ab       	std	Z+48, r26	; 0x30
    102c:	b1 ab       	std	Z+49, r27	; 0x31
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    102e:	b3 94       	inc	r11
    1030:	e8 81       	ld	r30, Y
    1032:	f9 81       	ldd	r31, Y+1	; 0x01
    1034:	82 81       	ldd	r24, Z+2	; 0x02
    1036:	b8 16       	cp	r11, r24
    1038:	10 f3       	brcs	.-60     	; 0xffe <dir_next+0x16c>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    103a:	86 a5       	ldd	r24, Z+46	; 0x2e
    103c:	97 a5       	ldd	r25, Z+47	; 0x2f
    103e:	a0 a9       	ldd	r26, Z+48	; 0x30
    1040:	b1 a9       	ldd	r27, Z+49	; 0x31
    1042:	8b 19       	sub	r24, r11
    1044:	91 09       	sbc	r25, r1
    1046:	a1 09       	sbc	r26, r1
    1048:	b1 09       	sbc	r27, r1
    104a:	86 a7       	std	Z+46, r24	; 0x2e
    104c:	97 a7       	std	Z+47, r25	; 0x2f
    104e:	a0 ab       	std	Z+48, r26	; 0x30
    1050:	b1 ab       	std	Z+49, r27	; 0x31
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    1052:	ea 86       	std	Y+10, r14	; 0x0a
    1054:	fb 86       	std	Y+11, r15	; 0x0b
    1056:	0c 87       	std	Y+12, r16	; 0x0c
    1058:	1d 87       	std	Y+13, r17	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    105a:	88 81       	ld	r24, Y
    105c:	99 81       	ldd	r25, Y+1	; 0x01
    105e:	b8 01       	movw	r22, r16
    1060:	a7 01       	movw	r20, r14
    1062:	0e 94 1a 07 	call	0xe34	; 0xe34 <clust2sect>
    1066:	6e 87       	std	Y+14, r22	; 0x0e
    1068:	7f 87       	std	Y+15, r23	; 0x0f
    106a:	88 8b       	std	Y+16, r24	; 0x10
    106c:	99 8b       	std	Y+17, r25	; 0x11
			}
		}
	}

	dj->index = i;
    106e:	dd 82       	std	Y+5, r13	; 0x05
    1070:	cc 82       	std	Y+4, r12	; 0x04
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
    1072:	88 81       	ld	r24, Y
    1074:	99 81       	ldd	r25, Y+1	; 0x01
    1076:	c2 96       	adiw	r24, 0x32	; 50
    1078:	b5 e0       	ldi	r27, 0x05	; 5
    107a:	88 0c       	add	r8, r8
    107c:	99 1c       	adc	r9, r9
    107e:	ba 95       	dec	r27
    1080:	e1 f7       	brne	.-8      	; 0x107a <dir_next+0x1e8>
    1082:	88 0d       	add	r24, r8
    1084:	99 1d       	adc	r25, r9
    1086:	9b 8b       	std	Y+19, r25	; 0x13
    1088:	8a 8b       	std	Y+18, r24	; 0x12

	return FR_OK;
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	0b c0       	rjmp	.+22     	; 0x10a6 <dir_next+0x214>
				if (clst <= 1) return FR_INT_ERR;
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
#if !_FS_READONLY
					BYTE c;
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
    1090:	24 e0       	ldi	r18, 0x04	; 4
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	08 c0       	rjmp	.+16     	; 0x10a6 <dir_next+0x214>
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    1096:	27 e0       	ldi	r18, 0x07	; 7
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	05 c0       	rjmp	.+10     	; 0x10a6 <dir_next+0x214>
					if (clst == 1) return FR_INT_ERR;
    109c:	22 e0       	ldi	r18, 0x02	; 2
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <dir_next+0x214>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    10a2:	21 e0       	ldi	r18, 0x01	; 1
    10a4:	30 e0       	ldi	r19, 0x00	; 0

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;

	return FR_OK;
}
    10a6:	c9 01       	movw	r24, r18
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
    10ac:	ec e0       	ldi	r30, 0x0C	; 12
    10ae:	0c 94 26 2d 	jmp	0x5a4c	; 0x5a4c <__epilogue_restores__+0xc>

000010b2 <dir_seek.clone.1>:
/*-----------------------------------------------------------------------*/
/* Directory handling - Seek directory index                             */
/*-----------------------------------------------------------------------*/

static
FRESULT dir_seek (
    10b2:	0f 93       	push	r16
    10b4:	1f 93       	push	r17
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	ec 01       	movw	r28, r24
{
	DWORD clst;
	WORD ic;


	dj->index = idx;
    10bc:	1d 82       	std	Y+5, r1	; 0x05
    10be:	1c 82       	std	Y+4, r1	; 0x04
	clst = dj->sclust;
    10c0:	4e 81       	ldd	r20, Y+6	; 0x06
    10c2:	5f 81       	ldd	r21, Y+7	; 0x07
    10c4:	68 85       	ldd	r22, Y+8	; 0x08
    10c6:	79 85       	ldd	r23, Y+9	; 0x09
	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
    10c8:	41 30       	cpi	r20, 0x01	; 1
    10ca:	51 05       	cpc	r21, r1
    10cc:	61 05       	cpc	r22, r1
    10ce:	71 05       	cpc	r23, r1
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <dir_seek.clone.1+0x22>
    10d2:	69 c0       	rjmp	.+210    	; 0x11a6 <__stack+0xa7>
    10d4:	08 81       	ld	r16, Y
    10d6:	19 81       	ldd	r17, Y+1	; 0x01
    10d8:	f8 01       	movw	r30, r16
    10da:	86 8d       	ldd	r24, Z+30	; 0x1e
    10dc:	97 8d       	ldd	r25, Z+31	; 0x1f
    10de:	a0 a1       	ldd	r26, Z+32	; 0x20
    10e0:	b1 a1       	ldd	r27, Z+33	; 0x21
    10e2:	48 17       	cp	r20, r24
    10e4:	59 07       	cpc	r21, r25
    10e6:	6a 07       	cpc	r22, r26
    10e8:	7b 07       	cpc	r23, r27
    10ea:	08 f0       	brcs	.+2      	; 0x10ee <dir_seek.clone.1+0x3c>
    10ec:	5c c0       	rjmp	.+184    	; 0x11a6 <__stack+0xa7>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    10ee:	41 15       	cp	r20, r1
    10f0:	51 05       	cpc	r21, r1
    10f2:	61 05       	cpc	r22, r1
    10f4:	71 05       	cpc	r23, r1
    10f6:	f9 f4       	brne	.+62     	; 0x1136 <__stack+0x37>
    10f8:	80 81       	ld	r24, Z
    10fa:	83 30       	cpi	r24, 0x03	; 3
    10fc:	49 f4       	brne	.+18     	; 0x1110 <__stack+0x11>
		clst = dj->fs->dirbase;
    10fe:	46 a1       	ldd	r20, Z+38	; 0x26
    1100:	57 a1       	ldd	r21, Z+39	; 0x27
    1102:	60 a5       	ldd	r22, Z+40	; 0x28
    1104:	71 a5       	ldd	r23, Z+41	; 0x29

	if (clst == 0) {	/* Static table */
    1106:	41 15       	cp	r20, r1
    1108:	51 05       	cpc	r21, r1
    110a:	61 05       	cpc	r22, r1
    110c:	71 05       	cpc	r23, r1
    110e:	99 f4       	brne	.+38     	; 0x1136 <__stack+0x37>
		dj->clust = clst;
    1110:	1a 86       	std	Y+10, r1	; 0x0a
    1112:	1b 86       	std	Y+11, r1	; 0x0b
    1114:	1c 86       	std	Y+12, r1	; 0x0c
    1116:	1d 86       	std	Y+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    1118:	f8 01       	movw	r30, r16
    111a:	80 85       	ldd	r24, Z+8	; 0x08
    111c:	91 85       	ldd	r25, Z+9	; 0x09
    111e:	00 97       	sbiw	r24, 0x00	; 0
    1120:	09 f4       	brne	.+2      	; 0x1124 <__stack+0x25>
    1122:	41 c0       	rjmp	.+130    	; 0x11a6 <__stack+0xa7>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
    1124:	86 a1       	ldd	r24, Z+38	; 0x26
    1126:	97 a1       	ldd	r25, Z+39	; 0x27
    1128:	a0 a5       	ldd	r26, Z+40	; 0x28
    112a:	b1 a5       	ldd	r27, Z+41	; 0x29
    112c:	8e 87       	std	Y+14, r24	; 0x0e
    112e:	9f 87       	std	Y+15, r25	; 0x0f
    1130:	a8 8b       	std	Y+16, r26	; 0x10
    1132:	b9 8b       	std	Y+17, r27	; 0x11
    1134:	2e c0       	rjmp	.+92     	; 0x1192 <__stack+0x93>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
    1136:	f8 01       	movw	r30, r16
    1138:	82 81       	ldd	r24, Z+2	; 0x02
		while (idx >= ic) {	/* Follow cluster chain */
    113a:	88 23       	and	r24, r24
    113c:	f9 f4       	brne	.+62     	; 0x117c <__stack+0x7d>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    113e:	88 81       	ld	r24, Y
    1140:	99 81       	ldd	r25, Y+1	; 0x01
    1142:	0e 94 cd 04 	call	0x99a	; 0x99a <get_fat>
    1146:	ab 01       	movw	r20, r22
    1148:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    114a:	4f 3f       	cpi	r20, 0xFF	; 255
    114c:	ff ef       	ldi	r31, 0xFF	; 255
    114e:	5f 07       	cpc	r21, r31
    1150:	ff ef       	ldi	r31, 0xFF	; 255
    1152:	6f 07       	cpc	r22, r31
    1154:	ff ef       	ldi	r31, 0xFF	; 255
    1156:	7f 07       	cpc	r23, r31
    1158:	19 f1       	breq	.+70     	; 0x11a0 <__stack+0xa1>
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
    115a:	42 30       	cpi	r20, 0x02	; 2
    115c:	51 05       	cpc	r21, r1
    115e:	61 05       	cpc	r22, r1
    1160:	71 05       	cpc	r23, r1
    1162:	08 f1       	brcs	.+66     	; 0x11a6 <__stack+0xa7>
    1164:	e8 81       	ld	r30, Y
    1166:	f9 81       	ldd	r31, Y+1	; 0x01
    1168:	86 8d       	ldd	r24, Z+30	; 0x1e
    116a:	97 8d       	ldd	r25, Z+31	; 0x1f
    116c:	a0 a1       	ldd	r26, Z+32	; 0x20
    116e:	b1 a1       	ldd	r27, Z+33	; 0x21
    1170:	48 17       	cp	r20, r24
    1172:	59 07       	cpc	r21, r25
    1174:	6a 07       	cpc	r22, r26
    1176:	7b 07       	cpc	r23, r27
    1178:	10 f3       	brcs	.-60     	; 0x113e <__stack+0x3f>
    117a:	15 c0       	rjmp	.+42     	; 0x11a6 <__stack+0xa7>
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    117c:	4a 87       	std	Y+10, r20	; 0x0a
    117e:	5b 87       	std	Y+11, r21	; 0x0b
    1180:	6c 87       	std	Y+12, r22	; 0x0c
    1182:	7d 87       	std	Y+13, r23	; 0x0d
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
    1184:	c8 01       	movw	r24, r16
    1186:	0e 94 1a 07 	call	0xe34	; 0xe34 <clust2sect>
    118a:	6e 87       	std	Y+14, r22	; 0x0e
    118c:	7f 87       	std	Y+15, r23	; 0x0f
    118e:	88 8b       	std	Y+16, r24	; 0x10
    1190:	99 8b       	std	Y+17, r25	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
    1192:	0e 5c       	subi	r16, 0xCE	; 206
    1194:	1f 4f       	sbci	r17, 0xFF	; 255
    1196:	1b 8b       	std	Y+19, r17	; 0x13
    1198:	0a 8b       	std	Y+18, r16	; 0x12

	return FR_OK;	/* Seek succeeded */
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	05 c0       	rjmp	.+10     	; 0x11aa <__stack+0xab>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    11a0:	21 e0       	ldi	r18, 0x01	; 1
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <__stack+0xab>
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
    11a6:	22 e0       	ldi	r18, 0x02	; 2
    11a8:	30 e0       	ldi	r19, 0x00	; 0
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */

	return FR_OK;	/* Seek succeeded */
}
    11aa:	c9 01       	movw	r24, r18
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	1f 91       	pop	r17
    11b2:	0f 91       	pop	r16
    11b4:	08 95       	ret

000011b6 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const XCHAR *path	/* Full-path string to find a file or directory */
)
{
    11b6:	a0 e0       	ldi	r26, 0x00	; 0
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e1 ee       	ldi	r30, 0xE1	; 225
    11bc:	f8 e0       	ldi	r31, 0x08	; 8
    11be:	0c 94 0c 2d 	jmp	0x5a18	; 0x5a18 <__prologue_saves__+0x10>
    11c2:	ec 01       	movw	r28, r24
#endif
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    11c4:	86 2f       	mov	r24, r22
    11c6:	97 2f       	mov	r25, r23
{
	FRESULT res;
	BYTE *dir, last;


	while (!_USE_LFN && *path == ' ') path++;	/* Skip leading spaces */
    11c8:	8c 01       	movw	r16, r24
    11ca:	dc 01       	movw	r26, r24
    11cc:	2c 91       	ld	r18, X
    11ce:	01 96       	adiw	r24, 0x01	; 1
    11d0:	20 32       	cpi	r18, 0x20	; 32
    11d2:	d1 f3       	breq	.-12     	; 0x11c8 <follow_path+0x12>
#if _FS_RPATH
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
    11d4:	2f 32       	cpi	r18, 0x2F	; 47
    11d6:	11 f0       	breq	.+4      	; 0x11dc <follow_path+0x26>
    11d8:	2c 35       	cpi	r18, 0x5C	; 92
    11da:	39 f4       	brne	.+14     	; 0x11ea <follow_path+0x34>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
    11dc:	0f 5f       	subi	r16, 0xFF	; 255
    11de:	1f 4f       	sbci	r17, 0xFF	; 255
    11e0:	1e 82       	std	Y+6, r1	; 0x06
    11e2:	1f 82       	std	Y+7, r1	; 0x07
    11e4:	18 86       	std	Y+8, r1	; 0x08
    11e6:	19 86       	std	Y+9, r1	; 0x09
    11e8:	0a c0       	rjmp	.+20     	; 0x11fe <follow_path+0x48>
	} else {							/* No heading saparator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
    11ea:	e8 81       	ld	r30, Y
    11ec:	f9 81       	ldd	r31, Y+1	; 0x01
    11ee:	86 89       	ldd	r24, Z+22	; 0x16
    11f0:	97 89       	ldd	r25, Z+23	; 0x17
    11f2:	a0 8d       	ldd	r26, Z+24	; 0x18
    11f4:	b1 8d       	ldd	r27, Z+25	; 0x19
    11f6:	8e 83       	std	Y+6, r24	; 0x06
    11f8:	9f 83       	std	Y+7, r25	; 0x07
    11fa:	a8 87       	std	Y+8, r26	; 0x08
    11fc:	b9 87       	std	Y+9, r27	; 0x09
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
		path++;
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
    11fe:	f8 01       	movw	r30, r16
    1200:	80 81       	ld	r24, Z
    1202:	80 32       	cpi	r24, 0x20	; 32
    1204:	38 f4       	brcc	.+14     	; 0x1214 <follow_path+0x5e>
		res = dir_seek(dj, 0);
    1206:	ce 01       	movw	r24, r28
    1208:	0e 94 59 08 	call	0x10b2	; 0x10b2 <dir_seek.clone.1>
    120c:	9c 01       	movw	r18, r24
		dj->dir = NULL;
    120e:	1b 8a       	std	Y+19, r1	; 0x13
    1210:	1a 8a       	std	Y+18, r1	; 0x12
    1212:	20 c1       	rjmp	.+576    	; 0x1454 <follow_path+0x29e>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    1214:	50 e2       	ldi	r21, 0x20	; 32
    1216:	b5 2e       	mov	r11, r21
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    1218:	45 e0       	ldi	r20, 0x05	; 5
    121a:	a4 2e       	mov	r10, r20
			}
		}
	}

	LEAVE_FF(dj->fs, res);
}
    121c:	ec 89       	ldd	r30, Y+20	; 0x14
    121e:	fd 89       	ldd	r31, Y+21	; 0x15
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    1220:	df 01       	movw	r26, r30
/*-----------------------------------------------------------------------*/
/* Follow a file path                                                    */
/*-----------------------------------------------------------------------*/

static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
    1222:	cf 01       	movw	r24, r30
    1224:	0b 96       	adiw	r24, 0x0b	; 11
    1226:	01 c0       	rjmp	.+2      	; 0x122a <follow_path+0x74>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    1228:	bd 92       	st	X+, r11
    122a:	a8 17       	cp	r26, r24
    122c:	b9 07       	cpc	r27, r25
    122e:	e1 f7       	brne	.-8      	; 0x1228 <follow_path+0x72>
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
	p = *path;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
    1230:	d8 01       	movw	r26, r16
    1232:	8c 91       	ld	r24, X
    1234:	8e 32       	cpi	r24, 0x2E	; 46
    1236:	41 f0       	breq	.+16     	; 0x1248 <follow_path+0x92>
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	48 e0       	ldi	r20, 0x08	; 8
    1242:	50 e0       	ldi	r21, 0x00	; 0
    1244:	dd 24       	eor	r13, r13
    1246:	20 c0       	rjmp	.+64     	; 0x1288 <follow_path+0xd2>
		for (;;) {
			c = p[si++];
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
    1248:	80 83       	st	Z, r24
	si = i = b = 0; ni = 8;
	p = *path;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
		for (;;) {
			c = p[si++];
    124a:	d8 01       	movw	r26, r16
    124c:	11 96       	adiw	r26, 0x01	; 1
    124e:	2c 91       	ld	r18, X
    1250:	11 97       	sbiw	r26, 0x01	; 1
			if (c != '.' || si >= 3) break;
    1252:	2e 32       	cpi	r18, 0x2E	; 46
    1254:	39 f4       	brne	.+14     	; 0x1264 <follow_path+0xae>
			sfn[i++] = c;
    1256:	21 83       	std	Z+1, r18	; 0x01
	si = i = b = 0; ni = 8;
	p = *path;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
		for (;;) {
			c = p[si++];
    1258:	12 96       	adiw	r26, 0x02	; 2
    125a:	2c 91       	ld	r18, X
    125c:	12 97       	sbiw	r26, 0x02	; 2
    125e:	83 e0       	ldi	r24, 0x03	; 3
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <follow_path+0xb2>
    1264:	82 e0       	ldi	r24, 0x02	; 2
    1266:	90 e0       	ldi	r25, 0x00	; 0
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
    1268:	2f 32       	cpi	r18, 0x2F	; 47
    126a:	29 f0       	breq	.+10     	; 0x1276 <follow_path+0xc0>
    126c:	2c 35       	cpi	r18, 0x5C	; 92
    126e:	19 f0       	breq	.+6      	; 0x1276 <follow_path+0xc0>
    1270:	21 32       	cpi	r18, 0x21	; 33
    1272:	08 f0       	brcs	.+2      	; 0x1276 <follow_path+0xc0>
    1274:	ea c0       	rjmp	.+468    	; 0x144a <follow_path+0x294>
		*path = &p[si];									/* Rerurn pointer to the next segment */
    1276:	08 0f       	add	r16, r24
    1278:	19 1f       	adc	r17, r25
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    127a:	21 32       	cpi	r18, 0x21	; 33
    127c:	10 f4       	brcc	.+4      	; 0x1282 <follow_path+0xcc>
    127e:	84 e2       	ldi	r24, 0x24	; 36
    1280:	01 c0       	rjmp	.+2      	; 0x1284 <follow_path+0xce>
    1282:	80 e2       	ldi	r24, 0x20	; 32
    1284:	83 87       	std	Z+11, r24	; 0x0b
    1286:	ec c0       	rjmp	.+472    	; 0x1460 <follow_path+0x2aa>
		return FR_OK;
	}
#endif
	for (;;) {
		c = p[si++];
    1288:	d8 01       	movw	r26, r16
    128a:	a2 0f       	add	r26, r18
    128c:	b3 1f       	adc	r27, r19
    128e:	cc 90       	ld	r12, X
    1290:	2f 5f       	subi	r18, 0xFF	; 255
    1292:	3f 4f       	sbci	r19, 0xFF	; 255
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    1294:	bc 2d       	mov	r27, r12
    1296:	b1 32       	cpi	r27, 0x21	; 33
    1298:	08 f4       	brcc	.+2      	; 0x129c <follow_path+0xe6>
    129a:	67 c0       	rjmp	.+206    	; 0x136a <follow_path+0x1b4>
    129c:	bf 32       	cpi	r27, 0x2F	; 47
    129e:	09 f4       	brne	.+2      	; 0x12a2 <follow_path+0xec>
    12a0:	66 c0       	rjmp	.+204    	; 0x136e <follow_path+0x1b8>
    12a2:	bc 35       	cpi	r27, 0x5C	; 92
    12a4:	09 f4       	brne	.+2      	; 0x12a8 <follow_path+0xf2>
    12a6:	63 c0       	rjmp	.+198    	; 0x136e <follow_path+0x1b8>
		if (c == '.' || i >= ni) {
    12a8:	be 32       	cpi	r27, 0x2E	; 46
    12aa:	19 f0       	breq	.+6      	; 0x12b2 <follow_path+0xfc>
    12ac:	84 17       	cp	r24, r20
    12ae:	95 07       	cpc	r25, r21
    12b0:	7c f0       	brlt	.+30     	; 0x12d0 <follow_path+0x11a>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    12b2:	48 30       	cpi	r20, 0x08	; 8
    12b4:	51 05       	cpc	r21, r1
    12b6:	09 f0       	breq	.+2      	; 0x12ba <follow_path+0x104>
    12b8:	c8 c0       	rjmp	.+400    	; 0x144a <follow_path+0x294>
    12ba:	6c 2d       	mov	r22, r12
    12bc:	6e 32       	cpi	r22, 0x2E	; 46
    12be:	09 f0       	breq	.+2      	; 0x12c2 <follow_path+0x10c>
    12c0:	c4 c0       	rjmp	.+392    	; 0x144a <follow_path+0x294>
			i = 8; ni = 11;
			b <<= 2; continue;
    12c2:	dd 0c       	add	r13, r13
    12c4:	dd 0c       	add	r13, r13
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    12c6:	88 e0       	ldi	r24, 0x08	; 8
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	4b e0       	ldi	r20, 0x0B	; 11
    12cc:	50 e0       	ldi	r21, 0x00	; 0
    12ce:	dc cf       	rjmp	.-72     	; 0x1288 <follow_path+0xd2>
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended char */
    12d0:	c7 fe       	sbrs	r12, 7
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <follow_path+0x122>
#ifdef _EXCVT
			c = cvt[c - 0x80];			/* Convert extend char (SBCS) */
#else
			b |= 3;						/* Eliminate NT flag if ext char is exist */
    12d4:	a3 e0       	ldi	r26, 0x03	; 3
    12d6:	da 2a       	or	r13, r26
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
    12d8:	6c 2d       	mov	r22, r12
    12da:	61 58       	subi	r22, 0x81	; 129
    12dc:	6f 31       	cpi	r22, 0x1F	; 31
    12de:	18 f0       	brcs	.+6      	; 0x12e6 <follow_path+0x130>
    12e0:	6f 55       	subi	r22, 0x5F	; 95
    12e2:	6d 31       	cpi	r22, 0x1D	; 29
    12e4:	f8 f4       	brcc	.+62     	; 0x1324 <follow_path+0x16e>
			d = p[si++];				/* Get 2nd byte */
    12e6:	d8 01       	movw	r26, r16
    12e8:	a2 0f       	add	r26, r18
    12ea:	b3 1f       	adc	r27, r19
    12ec:	ec 90       	ld	r14, X
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    12ee:	6e 2d       	mov	r22, r14
    12f0:	60 54       	subi	r22, 0x40	; 64
    12f2:	6f 33       	cpi	r22, 0x3F	; 63
    12f4:	20 f0       	brcs	.+8      	; 0x12fe <follow_path+0x148>
    12f6:	60 54       	subi	r22, 0x40	; 64
    12f8:	6d 37       	cpi	r22, 0x7D	; 125
    12fa:	08 f0       	brcs	.+2      	; 0x12fe <follow_path+0x148>
    12fc:	a6 c0       	rjmp	.+332    	; 0x144a <follow_path+0x294>
    12fe:	ba 01       	movw	r22, r20
    1300:	61 50       	subi	r22, 0x01	; 1
    1302:	70 40       	sbci	r23, 0x00	; 0
    1304:	86 17       	cp	r24, r22
    1306:	97 07       	cpc	r25, r23
    1308:	0c f0       	brlt	.+2      	; 0x130c <follow_path+0x156>
    130a:	9f c0       	rjmp	.+318    	; 0x144a <follow_path+0x294>
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
    130c:	2f 5f       	subi	r18, 0xFF	; 255
    130e:	3f 4f       	sbci	r19, 0xFF	; 255
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
    1310:	df 01       	movw	r26, r30
    1312:	a8 0f       	add	r26, r24
    1314:	b9 1f       	adc	r27, r25
    1316:	cc 92       	st	X, r12
    1318:	01 96       	adiw	r24, 0x01	; 1
			sfn[i++] = d;
    131a:	df 01       	movw	r26, r30
    131c:	a8 0f       	add	r26, r24
    131e:	b9 1f       	adc	r27, r25
    1320:	ec 92       	st	X, r14
    1322:	21 c0       	rjmp	.+66     	; 0x1366 <follow_path+0x1b0>
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
    1324:	ec 2c       	mov	r14, r12
    1326:	ff 24       	eor	r15, r15
    1328:	a3 e0       	ldi	r26, 0x03	; 3
    132a:	b1 e0       	ldi	r27, 0x01	; 1
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    132c:	6d 91       	ld	r22, X+
    132e:	66 23       	and	r22, r22
    1330:	39 f0       	breq	.+14     	; 0x1340 <follow_path+0x18a>
    1332:	77 27       	eor	r23, r23
    1334:	67 fd       	sbrc	r22, 7
    1336:	70 95       	com	r23
    1338:	6e 15       	cp	r22, r14
    133a:	7f 05       	cpc	r23, r15
    133c:	b9 f7       	brne	.-18     	; 0x132c <follow_path+0x176>
    133e:	85 c0       	rjmp	.+266    	; 0x144a <follow_path+0x294>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    1340:	6c 2d       	mov	r22, r12
    1342:	61 54       	subi	r22, 0x41	; 65
    1344:	6a 31       	cpi	r22, 0x1A	; 26
    1346:	18 f4       	brcc	.+6      	; 0x134e <follow_path+0x198>
				b |= 2;
    1348:	b2 e0       	ldi	r27, 0x02	; 2
    134a:	db 2a       	or	r13, r27
    134c:	08 c0       	rjmp	.+16     	; 0x135e <follow_path+0x1a8>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    134e:	6c 2d       	mov	r22, r12
    1350:	61 56       	subi	r22, 0x61	; 97
    1352:	6a 31       	cpi	r22, 0x1A	; 26
    1354:	20 f4       	brcc	.+8      	; 0x135e <follow_path+0x1a8>
					b |= 1; c -= 0x20;
    1356:	61 e0       	ldi	r22, 0x01	; 1
    1358:	d6 2a       	or	r13, r22
    135a:	a0 ee       	ldi	r26, 0xE0	; 224
    135c:	ca 0e       	add	r12, r26
				}
			}
			sfn[i++] = c;
    135e:	df 01       	movw	r26, r30
    1360:	a8 0f       	add	r26, r24
    1362:	b9 1f       	adc	r27, r25
    1364:	cc 92       	st	X, r12
    1366:	01 96       	adiw	r24, 0x01	; 1
    1368:	8f cf       	rjmp	.-226    	; 0x1288 <follow_path+0xd2>
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    136a:	64 e0       	ldi	r22, 0x04	; 4
    136c:	01 c0       	rjmp	.+2      	; 0x1370 <follow_path+0x1ba>
    136e:	60 e0       	ldi	r22, 0x00	; 0

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
    1370:	00 97       	sbiw	r24, 0x00	; 0
    1372:	09 f4       	brne	.+2      	; 0x1376 <follow_path+0x1c0>
    1374:	6a c0       	rjmp	.+212    	; 0x144a <follow_path+0x294>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    1376:	80 81       	ld	r24, Z
    1378:	85 3e       	cpi	r24, 0xE5	; 229
    137a:	09 f4       	brne	.+2      	; 0x137e <follow_path+0x1c8>
    137c:	a0 82       	st	Z, r10

	if (ni == 8) b <<= 2;
    137e:	48 30       	cpi	r20, 0x08	; 8
    1380:	51 05       	cpc	r21, r1
    1382:	11 f4       	brne	.+4      	; 0x1388 <follow_path+0x1d2>
    1384:	dd 0c       	add	r13, r13
    1386:	dd 0c       	add	r13, r13
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
    1388:	8d 2d       	mov	r24, r13
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	ac 01       	movw	r20, r24
    138e:	43 70       	andi	r20, 0x03	; 3
    1390:	50 70       	andi	r21, 0x00	; 0
    1392:	41 30       	cpi	r20, 0x01	; 1
    1394:	51 05       	cpc	r21, r1
    1396:	09 f4       	brne	.+2      	; 0x139a <follow_path+0x1e4>
    1398:	60 61       	ori	r22, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
    139a:	8c 70       	andi	r24, 0x0C	; 12
    139c:	90 70       	andi	r25, 0x00	; 0
    139e:	84 30       	cpi	r24, 0x04	; 4
    13a0:	91 05       	cpc	r25, r1
    13a2:	09 f4       	brne	.+2      	; 0x13a6 <follow_path+0x1f0>
    13a4:	68 60       	ori	r22, 0x08	; 8
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    13a6:	02 0f       	add	r16, r18
    13a8:	13 1f       	adc	r17, r19

	if (ni == 8) b <<= 2;
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */

	sfn[NS] = c;		/* Store NT flag, File name is created */
    13aa:	63 87       	std	Z+11, r22	; 0x0b
    13ac:	59 c0       	rjmp	.+178    	; 0x1460 <follow_path+0x2aa>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    13ae:	4e 85       	ldd	r20, Y+14	; 0x0e
    13b0:	5f 85       	ldd	r21, Y+15	; 0x0f
    13b2:	68 89       	ldd	r22, Y+16	; 0x10
    13b4:	79 89       	ldd	r23, Y+17	; 0x11
    13b6:	88 81       	ld	r24, Y
    13b8:	99 81       	ldd	r25, Y+1	; 0x01
    13ba:	0e 94 1d 04 	call	0x83a	; 0x83a <move_window>
    13be:	9c 01       	movw	r18, r24
		if (res != FR_OK) break;
    13c0:	00 97       	sbiw	r24, 0x00	; 0
    13c2:	d9 f4       	brne	.+54     	; 0x13fa <follow_path+0x244>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    13c4:	ea 89       	ldd	r30, Y+18	; 0x12
    13c6:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    13c8:	80 81       	ld	r24, Z
    13ca:	88 23       	and	r24, r24
    13cc:	a1 f0       	breq	.+40     	; 0x13f6 <follow_path+0x240>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    13ce:	83 85       	ldd	r24, Z+11	; 0x0b
    13d0:	83 fd       	sbrc	r24, 3
    13d2:	0b c0       	rjmp	.+22     	; 0x13ea <follow_path+0x234>
    13d4:	ac 89       	ldd	r26, Y+20	; 0x14
    13d6:	bd 89       	ldd	r27, Y+21	; 0x15
/*-----------------------------------------------------------------------*/
/* Follow a file path                                                    */
/*-----------------------------------------------------------------------*/

static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
    13d8:	cf 01       	movw	r24, r30
    13da:	0b 96       	adiw	r24, 0x0b	; 11
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    13dc:	e8 17       	cp	r30, r24
    13de:	f9 07       	cpc	r31, r25
    13e0:	61 f0       	breq	.+24     	; 0x13fa <follow_path+0x244>
    13e2:	51 91       	ld	r21, Z+
    13e4:	4d 91       	ld	r20, X+
    13e6:	54 17       	cp	r21, r20
    13e8:	c9 f3       	breq	.-14     	; 0x13dc <follow_path+0x226>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, FALSE);		/* Next entry */
    13ea:	ce 01       	movw	r24, r28
    13ec:	60 e0       	ldi	r22, 0x00	; 0
    13ee:	70 e0       	ldi	r23, 0x00	; 0
    13f0:	0e 94 49 07 	call	0xe92	; 0xe92 <dir_next>
    13f4:	38 c0       	rjmp	.+112    	; 0x1466 <follow_path+0x2b0>
	do {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    13f6:	24 e0       	ldi	r18, 0x04	; 4
    13f8:	30 e0       	ldi	r19, 0x00	; 0
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			last = *(dj->fn+NS) & NS_LAST;
    13fa:	ec 89       	ldd	r30, Y+20	; 0x14
    13fc:	fd 89       	ldd	r31, Y+21	; 0x15
    13fe:	83 85       	ldd	r24, Z+11	; 0x0b
    1400:	84 70       	andi	r24, 0x04	; 4
			if (res != FR_OK) {				/* Could not find the object */
    1402:	21 15       	cp	r18, r1
    1404:	31 05       	cpc	r19, r1
    1406:	31 f0       	breq	.+12     	; 0x1414 <follow_path+0x25e>
				if (res == FR_NO_FILE && !last)
    1408:	24 30       	cpi	r18, 0x04	; 4
    140a:	31 05       	cpc	r19, r1
    140c:	19 f5       	brne	.+70     	; 0x1454 <follow_path+0x29e>
    140e:	88 23       	and	r24, r24
    1410:	f9 f0       	breq	.+62     	; 0x1450 <follow_path+0x29a>
    1412:	20 c0       	rjmp	.+64     	; 0x1454 <follow_path+0x29e>
					res = FR_NO_PATH;
				break;
			}
			if (last) break;				/* Last segment match. Function completed. */
    1414:	88 23       	and	r24, r24
    1416:	f1 f4       	brne	.+60     	; 0x1454 <follow_path+0x29e>
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
    1418:	ea 89       	ldd	r30, Y+18	; 0x12
    141a:	fb 89       	ldd	r31, Y+19	; 0x13
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    141c:	83 85       	ldd	r24, Z+11	; 0x0b
    141e:	84 ff       	sbrs	r24, 4
    1420:	17 c0       	rjmp	.+46     	; 0x1450 <follow_path+0x29a>
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    1422:	84 89       	ldd	r24, Z+20	; 0x14
    1424:	95 89       	ldd	r25, Z+21	; 0x15
    1426:	a0 e0       	ldi	r26, 0x00	; 0
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	dc 01       	movw	r26, r24
    142c:	99 27       	eor	r25, r25
    142e:	88 27       	eor	r24, r24
    1430:	22 8d       	ldd	r18, Z+26	; 0x1a
    1432:	33 8d       	ldd	r19, Z+27	; 0x1b
    1434:	40 e0       	ldi	r20, 0x00	; 0
    1436:	50 e0       	ldi	r21, 0x00	; 0
    1438:	82 2b       	or	r24, r18
    143a:	93 2b       	or	r25, r19
    143c:	a4 2b       	or	r26, r20
    143e:	b5 2b       	or	r27, r21
    1440:	8e 83       	std	Y+6, r24	; 0x06
    1442:	9f 83       	std	Y+7, r25	; 0x07
    1444:	a8 87       	std	Y+8, r26	; 0x08
    1446:	b9 87       	std	Y+9, r27	; 0x09
		}
    1448:	e9 ce       	rjmp	.-558    	; 0x121c <follow_path+0x66>
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
    144a:	26 e0       	ldi	r18, 0x06	; 6
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <follow_path+0x29e>
				break;
			}
			if (last) break;				/* Last segment match. Function completed. */
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
    1450:	25 e0       	ldi	r18, 0x05	; 5
    1452:	30 e0       	ldi	r19, 0x00	; 0
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
		}
	}

	return res;
}
    1454:	c9 01       	movw	r24, r18
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
    145a:	ea e0       	ldi	r30, 0x0A	; 10
    145c:	0c 94 28 2d 	jmp	0x5a50	; 0x5a50 <__epilogue_restores__+0x10>
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_seek(dj, 0);			/* Rewind directory object */
    1460:	ce 01       	movw	r24, r28
    1462:	0e 94 59 08 	call	0x10b2	; 0x10b2 <dir_seek.clone.1>
    1466:	9c 01       	movw	r18, r24
	if (res != FR_OK) return res;
    1468:	00 97       	sbiw	r24, 0x00	; 0
    146a:	09 f4       	brne	.+2      	; 0x146e <follow_path+0x2b8>
    146c:	a0 cf       	rjmp	.-192    	; 0x13ae <follow_path+0x1f8>
    146e:	c5 cf       	rjmp	.-118    	; 0x13fa <follow_path+0x244>

00001470 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occured */
	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    1470:	a6 e0       	ldi	r26, 0x06	; 6
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	ee e3       	ldi	r30, 0x3E	; 62
    1476:	fa e0       	ldi	r31, 0x0A	; 10
    1478:	0c 94 04 2d 	jmp	0x5a08	; 0x5a08 <__prologue_saves__>
    147c:	fc 01       	movw	r30, r24
    147e:	14 2f       	mov	r17, r20
	BYTE fmt, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fsize, tsect, mclst;
	const XCHAR *p = *path;
    1480:	a0 81       	ld	r26, Z
    1482:	b1 81       	ldd	r27, Z+1	; 0x01
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';				/* Is there a drive number? */
    1484:	8c 91       	ld	r24, X
    1486:	99 27       	eor	r25, r25
    1488:	87 fd       	sbrc	r24, 7
    148a:	90 95       	com	r25
    148c:	c0 97       	sbiw	r24, 0x30	; 48
	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
    148e:	8a 30       	cpi	r24, 0x0A	; 10
    1490:	91 05       	cpc	r25, r1
    1492:	48 f4       	brcc	.+18     	; 0x14a6 <chk_mounted+0x36>
    1494:	11 96       	adiw	r26, 0x01	; 1
    1496:	2c 91       	ld	r18, X
    1498:	11 97       	sbiw	r26, 0x01	; 1
    149a:	2a 33       	cpi	r18, 0x3A	; 58
    149c:	21 f4       	brne	.+8      	; 0x14a6 <chk_mounted+0x36>
		p += 2; *path = p;			/* Return pointer to the path name */
    149e:	12 96       	adiw	r26, 0x02	; 2
    14a0:	b1 83       	std	Z+1, r27	; 0x01
    14a2:	a0 83       	st	Z, r26
    14a4:	03 c0       	rjmp	.+6      	; 0x14ac <chk_mounted+0x3c>
	} else {						/* No drive number is given */
#if _FS_RPATH
		vol = Drive;				/* Use current drive */
    14a6:	80 91 ac 03 	lds	r24, 0x03AC
    14aa:	90 e0       	ldi	r25, 0x00	; 0
		vol = 0;					/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
    14ac:	00 97       	sbiw	r24, 0x00	; 0
    14ae:	09 f0       	breq	.+2      	; 0x14b2 <chk_mounted+0x42>
    14b0:	a6 c1       	rjmp	.+844    	; 0x17fe <chk_mounted+0x38e>
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
    14b2:	20 91 ad 03 	lds	r18, 0x03AD
    14b6:	30 91 ae 03 	lds	r19, 0x03AE
    14ba:	3e 83       	std	Y+6, r19	; 0x06
    14bc:	2d 83       	std	Y+5, r18	; 0x05
    14be:	db 01       	movw	r26, r22
    14c0:	11 96       	adiw	r26, 0x01	; 1
    14c2:	3c 93       	st	X, r19
    14c4:	2e 93       	st	-X, r18
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
    14c6:	21 15       	cp	r18, r1
    14c8:	31 05       	cpc	r19, r1
    14ca:	09 f4       	brne	.+2      	; 0x14ce <chk_mounted+0x5e>
    14cc:	9b c1       	rjmp	.+822    	; 0x1804 <chk_mounted+0x394>

	ENTER_FF(fs);					/* Lock file system */

	if (fs->fs_type) {				/* If the logical drive has been mounted */
    14ce:	f9 01       	movw	r30, r18
    14d0:	80 81       	ld	r24, Z
    14d2:	88 23       	and	r24, r24
    14d4:	59 f0       	breq	.+22     	; 0x14ec <chk_mounted+0x7c>
		stat = disk_status(fs->drive);
    14d6:	81 81       	ldd	r24, Z+1	; 0x01
    14d8:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <disk_status>
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
    14dc:	80 fd       	sbrc	r24, 0
    14de:	06 c0       	rjmp	.+12     	; 0x14ec <chk_mounted+0x7c>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    14e0:	11 23       	and	r17, r17
    14e2:	09 f4       	brne	.+2      	; 0x14e6 <chk_mounted+0x76>
    14e4:	92 c1       	rjmp	.+804    	; 0x180a <chk_mounted+0x39a>
    14e6:	82 ff       	sbrs	r24, 2
    14e8:	90 c1       	rjmp	.+800    	; 0x180a <chk_mounted+0x39a>
    14ea:	95 c1       	rjmp	.+810    	; 0x1816 <chk_mounted+0x3a6>
		}
	}

	/* The logical drive must be mounted. Following code attempts to mount the volume */

	fs->fs_type = 0;					/* Clear the file system object */
    14ec:	ad 81       	ldd	r26, Y+5	; 0x05
    14ee:	be 81       	ldd	r27, Y+6	; 0x06
    14f0:	1c 92       	st	X, r1
	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
    14f2:	11 96       	adiw	r26, 0x01	; 1
    14f4:	1c 92       	st	X, r1
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
    14f6:	80 e0       	ldi	r24, 0x00	; 0
    14f8:	0e 94 dd 15 	call	0x2bba	; 0x2bba <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
    14fc:	80 fd       	sbrc	r24, 0
    14fe:	88 c1       	rjmp	.+784    	; 0x1810 <chk_mounted+0x3a0>
#if _MAX_SS != 512						/* Get disk sector size if needed */
	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    1500:	11 23       	and	r17, r17
    1502:	11 f0       	breq	.+4      	; 0x1508 <chk_mounted+0x98>
    1504:	82 fd       	sbrc	r24, 2
    1506:	87 c1       	rjmp	.+782    	; 0x1816 <chk_mounted+0x3a6>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
    1508:	8d 81       	ldd	r24, Y+5	; 0x05
    150a:	9e 81       	ldd	r25, Y+6	; 0x06
    150c:	40 e0       	ldi	r20, 0x00	; 0
    150e:	50 e0       	ldi	r21, 0x00	; 0
    1510:	ba 01       	movw	r22, r20
    1512:	0e 94 86 04 	call	0x90c	; 0x90c <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
    1516:	81 30       	cpi	r24, 0x01	; 1
    1518:	b9 f4       	brne	.+46     	; 0x1548 <chk_mounted+0xd8>
		/* Check a partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
		if (tbl[4]) {									/* Is the partition existing? */
    151a:	ed 81       	ldd	r30, Y+5	; 0x05
    151c:	fe 81       	ldd	r31, Y+6	; 0x06
    151e:	ec 50       	subi	r30, 0x0C	; 12
    1520:	fe 4f       	sbci	r31, 0xFE	; 254
    1522:	80 81       	ld	r24, Z
    1524:	88 23       	and	r24, r24
    1526:	09 f4       	brne	.+2      	; 0x152a <chk_mounted+0xba>
    1528:	7c c1       	rjmp	.+760    	; 0x1822 <chk_mounted+0x3b2>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
    152a:	ed 81       	ldd	r30, Y+5	; 0x05
    152c:	fe 81       	ldd	r31, Y+6	; 0x06
    152e:	e8 50       	subi	r30, 0x08	; 8
    1530:	fe 4f       	sbci	r31, 0xFE	; 254
    1532:	60 80       	ld	r6, Z
    1534:	71 80       	ldd	r7, Z+1	; 0x01
    1536:	82 80       	ldd	r8, Z+2	; 0x02
    1538:	93 80       	ldd	r9, Z+3	; 0x03
			fmt = check_fs(fs, bsect);					/* Check the partition */
    153a:	8d 81       	ldd	r24, Y+5	; 0x05
    153c:	9e 81       	ldd	r25, Y+6	; 0x06
    153e:	b4 01       	movw	r22, r8
    1540:	a3 01       	movw	r20, r6
    1542:	0e 94 86 04 	call	0x90c	; 0x90c <check_fs>
    1546:	03 c0       	rjmp	.+6      	; 0x154e <chk_mounted+0xde>
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
    1548:	66 24       	eor	r6, r6
    154a:	77 24       	eor	r7, r7
    154c:	43 01       	movw	r8, r6
		if (tbl[4]) {									/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);					/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    154e:	83 30       	cpi	r24, 0x03	; 3
    1550:	09 f4       	brne	.+2      	; 0x1554 <chk_mounted+0xe4>
    1552:	64 c1       	rjmp	.+712    	; 0x181c <chk_mounted+0x3ac>
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
    1554:	88 23       	and	r24, r24
    1556:	09 f0       	breq	.+2      	; 0x155a <chk_mounted+0xea>
    1558:	64 c1       	rjmp	.+712    	; 0x1822 <chk_mounted+0x3b2>
    155a:	a2 e3       	ldi	r26, 0x32	; 50
    155c:	ea 2e       	mov	r14, r26
    155e:	f1 2c       	mov	r15, r1
    1560:	ed 81       	ldd	r30, Y+5	; 0x05
    1562:	fe 81       	ldd	r31, Y+6	; 0x06
    1564:	ee 0e       	add	r14, r30
    1566:	ff 1e       	adc	r15, r31
    1568:	d7 01       	movw	r26, r14
    156a:	1b 96       	adiw	r26, 0x0b	; 11
    156c:	8d 91       	ld	r24, X+
    156e:	9c 91       	ld	r25, X
    1570:	1c 97       	sbiw	r26, 0x0c	; 12
    1572:	b2 e0       	ldi	r27, 0x02	; 2
    1574:	80 30       	cpi	r24, 0x00	; 0
    1576:	9b 07       	cpc	r25, r27
    1578:	09 f0       	breq	.+2      	; 0x157c <chk_mounted+0x10c>
    157a:	53 c1       	rjmp	.+678    	; 0x1822 <chk_mounted+0x3b2>
		return FR_NO_FILESYSTEM;

	/* Initialize the file system object */
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    157c:	f7 01       	movw	r30, r14
    157e:	66 89       	ldd	r22, Z+22	; 0x16
    1580:	77 89       	ldd	r23, Z+23	; 0x17
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	90 e0       	ldi	r25, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
    1586:	61 15       	cp	r22, r1
    1588:	71 05       	cpc	r23, r1
    158a:	81 05       	cpc	r24, r1
    158c:	91 05       	cpc	r25, r1
    158e:	21 f4       	brne	.+8      	; 0x1598 <chk_mounted+0x128>
    1590:	64 a1       	ldd	r22, Z+36	; 0x24
    1592:	75 a1       	ldd	r23, Z+37	; 0x25
    1594:	86 a1       	ldd	r24, Z+38	; 0x26
    1596:	97 a1       	ldd	r25, Z+39	; 0x27
	fs->sects_fat = fsize;
    1598:	ad 81       	ldd	r26, Y+5	; 0x05
    159a:	be 81       	ldd	r27, Y+6	; 0x06
    159c:	5a 96       	adiw	r26, 0x1a	; 26
    159e:	6d 93       	st	X+, r22
    15a0:	7d 93       	st	X+, r23
    15a2:	8d 93       	st	X+, r24
    15a4:	9c 93       	st	X, r25
    15a6:	5d 97       	sbiw	r26, 0x1d	; 29
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
    15a8:	fd 01       	movw	r30, r26
    15aa:	ee 5b       	subi	r30, 0xBE	; 190
    15ac:	ff 4f       	sbci	r31, 0xFF	; 255
    15ae:	20 81       	ld	r18, Z
    15b0:	13 96       	adiw	r26, 0x03	; 3
    15b2:	2c 93       	st	X, r18
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	40 e0       	ldi	r20, 0x00	; 0
    15b8:	50 e0       	ldi	r21, 0x00	; 0
    15ba:	0e 94 90 2c 	call	0x5920	; 0x5920 <__mulsi3>
    15be:	1b 01       	movw	r2, r22
    15c0:	2c 01       	movw	r4, r24
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
    15c2:	f7 01       	movw	r30, r14
    15c4:	a6 84       	ldd	r10, Z+14	; 0x0e
    15c6:	b7 84       	ldd	r11, Z+15	; 0x0f
    15c8:	cc 24       	eor	r12, r12
    15ca:	dd 24       	eor	r13, r13
    15cc:	a6 0c       	add	r10, r6
    15ce:	b7 1c       	adc	r11, r7
    15d0:	c8 1c       	adc	r12, r8
    15d2:	d9 1c       	adc	r13, r9
    15d4:	ad 81       	ldd	r26, Y+5	; 0x05
    15d6:	be 81       	ldd	r27, Y+6	; 0x06
    15d8:	92 96       	adiw	r26, 0x22	; 34
    15da:	ad 92       	st	X+, r10
    15dc:	bd 92       	st	X+, r11
    15de:	cd 92       	st	X+, r12
    15e0:	dc 92       	st	X, r13
    15e2:	95 97       	sbiw	r26, 0x25	; 37
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
    15e4:	df 96       	adiw	r26, 0x3f	; 63
    15e6:	ec 91       	ld	r30, X
    15e8:	df 97       	sbiw	r26, 0x3f	; 63
    15ea:	12 96       	adiw	r26, 0x02	; 2
    15ec:	ec 93       	st	X, r30
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
    15ee:	d7 01       	movw	r26, r14
    15f0:	51 96       	adiw	r26, 0x11	; 17
    15f2:	4d 91       	ld	r20, X+
    15f4:	5c 91       	ld	r21, X
    15f6:	52 97       	sbiw	r26, 0x12	; 18
    15f8:	ad 81       	ldd	r26, Y+5	; 0x05
    15fa:	be 81       	ldd	r27, Y+6	; 0x06
    15fc:	19 96       	adiw	r26, 0x09	; 9
    15fe:	5c 93       	st	X, r21
    1600:	4e 93       	st	-X, r20
    1602:	18 97       	sbiw	r26, 0x08	; 8
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    1604:	d7 01       	movw	r26, r14
    1606:	53 96       	adiw	r26, 0x13	; 19
    1608:	6d 91       	ld	r22, X+
    160a:	7c 91       	ld	r23, X
    160c:	54 97       	sbiw	r26, 0x14	; 20
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	90 e0       	ldi	r25, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    1612:	61 15       	cp	r22, r1
    1614:	71 05       	cpc	r23, r1
    1616:	81 05       	cpc	r24, r1
    1618:	91 05       	cpc	r25, r1
    161a:	31 f4       	brne	.+12     	; 0x1628 <chk_mounted+0x1b8>
    161c:	90 96       	adiw	r26, 0x20	; 32
    161e:	6d 91       	ld	r22, X+
    1620:	7d 91       	ld	r23, X+
    1622:	8d 91       	ld	r24, X+
    1624:	9c 91       	ld	r25, X
    1626:	93 97       	sbiw	r26, 0x23	; 35
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
    1628:	f4 e0       	ldi	r31, 0x04	; 4
    162a:	56 95       	lsr	r21
    162c:	47 95       	ror	r20
    162e:	fa 95       	dec	r31
    1630:	e1 f7       	brne	.-8      	; 0x162a <chk_mounted+0x1ba>
    1632:	8a 01       	movw	r16, r20
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	09 83       	std	Y+1, r16	; 0x01
    163a:	1a 83       	std	Y+2, r17	; 0x02
    163c:	2b 83       	std	Y+3, r18	; 0x03
    163e:	3c 83       	std	Y+4, r19	; 0x04
    1640:	d7 01       	movw	r26, r14
    1642:	1e 96       	adiw	r26, 0x0e	; 14
    1644:	0d 91       	ld	r16, X+
    1646:	1c 91       	ld	r17, X
    1648:	1f 97       	sbiw	r26, 0x0f	; 15
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	60 1b       	sub	r22, r16
    1650:	71 0b       	sbc	r23, r17
    1652:	82 0b       	sbc	r24, r18
    1654:	93 0b       	sbc	r25, r19
    1656:	62 19       	sub	r22, r2
    1658:	73 09       	sbc	r23, r3
    165a:	84 09       	sbc	r24, r4
    165c:	95 09       	sbc	r25, r5
    165e:	09 81       	ldd	r16, Y+1	; 0x01
    1660:	1a 81       	ldd	r17, Y+2	; 0x02
    1662:	2b 81       	ldd	r18, Y+3	; 0x03
    1664:	3c 81       	ldd	r19, Y+4	; 0x04
    1666:	60 1b       	sub	r22, r16
    1668:	71 0b       	sbc	r23, r17
    166a:	82 0b       	sbc	r24, r18
    166c:	93 0b       	sbc	r25, r19
		) / fs->csize + 2;
    166e:	2e 2f       	mov	r18, r30
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	40 e0       	ldi	r20, 0x00	; 0
    1674:	50 e0       	ldi	r21, 0x00	; 0
    1676:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <__udivmodsi4>
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
    167a:	2e 5f       	subi	r18, 0xFE	; 254
    167c:	3f 4f       	sbci	r19, 0xFF	; 255
    167e:	4f 4f       	sbci	r20, 0xFF	; 255
    1680:	5f 4f       	sbci	r21, 0xFF	; 255
    1682:	ad 81       	ldd	r26, Y+5	; 0x05
    1684:	be 81       	ldd	r27, Y+6	; 0x06
    1686:	5e 96       	adiw	r26, 0x1e	; 30
    1688:	2d 93       	st	X+, r18
    168a:	3d 93       	st	X+, r19
    168c:	4d 93       	st	X+, r20
    168e:	5c 93       	st	X, r21
    1690:	91 97       	sbiw	r26, 0x21	; 33
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
    1692:	27 3f       	cpi	r18, 0xF7	; 247
    1694:	bf e0       	ldi	r27, 0x0F	; 15
    1696:	3b 07       	cpc	r19, r27
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	4b 07       	cpc	r20, r27
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	5b 07       	cpc	r21, r27
    16a0:	58 f0       	brcs	.+22     	; 0x16b8 <chk_mounted+0x248>
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
    16a2:	27 3f       	cpi	r18, 0xF7	; 247
    16a4:	ef ef       	ldi	r30, 0xFF	; 255
    16a6:	3e 07       	cpc	r19, r30
    16a8:	e0 e0       	ldi	r30, 0x00	; 0
    16aa:	4e 07       	cpc	r20, r30
    16ac:	e0 e0       	ldi	r30, 0x00	; 0
    16ae:	5e 07       	cpc	r21, r30
    16b0:	08 f0       	brcs	.+2      	; 0x16b4 <chk_mounted+0x244>
    16b2:	be c0       	rjmp	.+380    	; 0x1830 <chk_mounted+0x3c0>
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
    16b4:	12 e0       	ldi	r17, 0x02	; 2
    16b6:	01 c0       	rjmp	.+2      	; 0x16ba <chk_mounted+0x24a>
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
    16b8:	11 e0       	ldi	r17, 0x01	; 1
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    16ba:	d2 01       	movw	r26, r4
    16bc:	c1 01       	movw	r24, r2
    16be:	8a 0d       	add	r24, r10
    16c0:	9b 1d       	adc	r25, r11
    16c2:	ac 1d       	adc	r26, r12
    16c4:	bd 1d       	adc	r27, r13
    16c6:	ed 81       	ldd	r30, Y+5	; 0x05
    16c8:	fe 81       	ldd	r31, Y+6	; 0x06
    16ca:	86 a3       	std	Z+38, r24	; 0x26
    16cc:	97 a3       	std	Z+39, r25	; 0x27
    16ce:	a0 a7       	std	Z+40, r26	; 0x28
    16d0:	b1 a7       	std	Z+41, r27	; 0x29
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
    16d2:	29 81       	ldd	r18, Y+1	; 0x01
    16d4:	3a 81       	ldd	r19, Y+2	; 0x02
    16d6:	4b 81       	ldd	r20, Y+3	; 0x03
    16d8:	5c 81       	ldd	r21, Y+4	; 0x04
    16da:	a2 0e       	add	r10, r18
    16dc:	b3 1e       	adc	r11, r19
    16de:	c4 1e       	adc	r12, r20
    16e0:	d5 1e       	adc	r13, r21
    16e2:	a2 0c       	add	r10, r2
    16e4:	b3 1c       	adc	r11, r3
    16e6:	c4 1c       	adc	r12, r4
    16e8:	d5 1c       	adc	r13, r5
    16ea:	ad 81       	ldd	r26, Y+5	; 0x05
    16ec:	be 81       	ldd	r27, Y+6	; 0x06
    16ee:	9a 96       	adiw	r26, 0x2a	; 42
    16f0:	ad 92       	st	X+, r10
    16f2:	bd 92       	st	X+, r11
    16f4:	cd 92       	st	X+, r12
    16f6:	dc 92       	st	X, r13
    16f8:	9d 97       	sbiw	r26, 0x2d	; 45

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
    16fa:	8f ef       	ldi	r24, 0xFF	; 255
    16fc:	9f ef       	ldi	r25, 0xFF	; 255
    16fe:	dc 01       	movw	r26, r24
    1700:	ed 81       	ldd	r30, Y+5	; 0x05
    1702:	fe 81       	ldd	r31, Y+6	; 0x06
    1704:	86 87       	std	Z+14, r24	; 0x0e
    1706:	97 87       	std	Z+15, r25	; 0x0f
    1708:	a0 8b       	std	Z+16, r26	; 0x10
    170a:	b1 8b       	std	Z+17, r27	; 0x11
	fs->wflag = 0;
    170c:	14 82       	std	Z+4, r1	; 0x04
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
    170e:	13 30       	cpi	r17, 0x03	; 3
    1710:	09 f0       	breq	.+2      	; 0x1714 <chk_mounted+0x2a4>
    1712:	5c c0       	rjmp	.+184    	; 0x17cc <chk_mounted+0x35c>
	 	fs->fsi_flag = 0;
    1714:	15 82       	std	Z+5, r1	; 0x05
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    1716:	d7 01       	movw	r26, r14
    1718:	d0 96       	adiw	r26, 0x30	; 48
    171a:	2d 91       	ld	r18, X+
    171c:	3c 91       	ld	r19, X
    171e:	d1 97       	sbiw	r26, 0x31	; 49
    1720:	40 e0       	ldi	r20, 0x00	; 0
    1722:	50 e0       	ldi	r21, 0x00	; 0
    1724:	26 0d       	add	r18, r6
    1726:	37 1d       	adc	r19, r7
    1728:	48 1d       	adc	r20, r8
    172a:	59 1d       	adc	r21, r9
    172c:	ed 81       	ldd	r30, Y+5	; 0x05
    172e:	fe 81       	ldd	r31, Y+6	; 0x06
    1730:	22 8b       	std	Z+18, r18	; 0x12
    1732:	33 8b       	std	Z+19, r19	; 0x13
    1734:	44 8b       	std	Z+20, r20	; 0x14
    1736:	55 8b       	std	Z+21, r21	; 0x15
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
    1738:	bf 01       	movw	r22, r30
    173a:	6e 5c       	subi	r22, 0xCE	; 206
    173c:	7f 4f       	sbci	r23, 0xFF	; 255
    173e:	81 81       	ldd	r24, Z+1	; 0x01
    1740:	01 e0       	ldi	r16, 0x01	; 1
    1742:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <disk_read>
    1746:	00 97       	sbiw	r24, 0x00	; 0
    1748:	09 f0       	breq	.+2      	; 0x174c <chk_mounted+0x2dc>
    174a:	40 c0       	rjmp	.+128    	; 0x17cc <chk_mounted+0x35c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    174c:	f7 01       	movw	r30, r14
    174e:	e2 50       	subi	r30, 0x02	; 2
    1750:	fe 4f       	sbci	r31, 0xFE	; 254
	fs->wflag = 0;
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
    1752:	80 81       	ld	r24, Z
    1754:	91 81       	ldd	r25, Z+1	; 0x01
    1756:	fa ea       	ldi	r31, 0xAA	; 170
    1758:	85 35       	cpi	r24, 0x55	; 85
    175a:	9f 07       	cpc	r25, r31
    175c:	b9 f5       	brne	.+110    	; 0x17cc <chk_mounted+0x35c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    175e:	ed 81       	ldd	r30, Y+5	; 0x05
    1760:	fe 81       	ldd	r31, Y+6	; 0x06
    1762:	82 a9       	ldd	r24, Z+50	; 0x32
    1764:	93 a9       	ldd	r25, Z+51	; 0x33
    1766:	a4 a9       	ldd	r26, Z+52	; 0x34
    1768:	b5 a9       	ldd	r27, Z+53	; 0x35
    176a:	82 35       	cpi	r24, 0x52	; 82
    176c:	f2 e5       	ldi	r31, 0x52	; 82
    176e:	9f 07       	cpc	r25, r31
    1770:	f1 e6       	ldi	r31, 0x61	; 97
    1772:	af 07       	cpc	r26, r31
    1774:	f1 e4       	ldi	r31, 0x41	; 65
    1776:	bf 07       	cpc	r27, r31
    1778:	49 f5       	brne	.+82     	; 0x17cc <chk_mounted+0x35c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    177a:	f7 01       	movw	r30, r14
    177c:	ec 51       	subi	r30, 0x1C	; 28
    177e:	fe 4f       	sbci	r31, 0xFE	; 254
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    1780:	80 81       	ld	r24, Z
    1782:	91 81       	ldd	r25, Z+1	; 0x01
    1784:	a2 81       	ldd	r26, Z+2	; 0x02
    1786:	b3 81       	ldd	r27, Z+3	; 0x03
    1788:	82 37       	cpi	r24, 0x72	; 114
    178a:	02 e7       	ldi	r16, 0x72	; 114
    178c:	90 07       	cpc	r25, r16
    178e:	01 e4       	ldi	r16, 0x41	; 65
    1790:	a0 07       	cpc	r26, r16
    1792:	01 e6       	ldi	r16, 0x61	; 97
    1794:	b0 07       	cpc	r27, r16
    1796:	d1 f4       	brne	.+52     	; 0x17cc <chk_mounted+0x35c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    1798:	f7 01       	movw	r30, r14
    179a:	e4 51       	subi	r30, 0x14	; 20
    179c:	fe 4f       	sbci	r31, 0xFE	; 254
    179e:	80 81       	ld	r24, Z
    17a0:	91 81       	ldd	r25, Z+1	; 0x01
    17a2:	a2 81       	ldd	r26, Z+2	; 0x02
    17a4:	b3 81       	ldd	r27, Z+3	; 0x03
    17a6:	ed 81       	ldd	r30, Y+5	; 0x05
    17a8:	fe 81       	ldd	r31, Y+6	; 0x06
    17aa:	82 87       	std	Z+10, r24	; 0x0a
    17ac:	93 87       	std	Z+11, r25	; 0x0b
    17ae:	a4 87       	std	Z+12, r26	; 0x0c
    17b0:	b5 87       	std	Z+13, r27	; 0x0d
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    17b2:	f7 01       	movw	r30, r14
    17b4:	e8 51       	subi	r30, 0x18	; 24
    17b6:	fe 4f       	sbci	r31, 0xFE	; 254
    17b8:	80 81       	ld	r24, Z
    17ba:	91 81       	ldd	r25, Z+1	; 0x01
    17bc:	a2 81       	ldd	r26, Z+2	; 0x02
    17be:	b3 81       	ldd	r27, Z+3	; 0x03
    17c0:	ed 81       	ldd	r30, Y+5	; 0x05
    17c2:	fe 81       	ldd	r31, Y+6	; 0x06
    17c4:	86 87       	std	Z+14, r24	; 0x0e
    17c6:	97 87       	std	Z+15, r25	; 0x0f
    17c8:	a0 8b       	std	Z+16, r26	; 0x10
    17ca:	b1 8b       	std	Z+17, r27	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    17cc:	ad 81       	ldd	r26, Y+5	; 0x05
    17ce:	be 81       	ldd	r27, Y+6	; 0x06
    17d0:	1c 93       	st	X, r17
	fs->winsect = 0;		/* Invalidate sector cache */
    17d2:	ed 81       	ldd	r30, Y+5	; 0x05
    17d4:	fe 81       	ldd	r31, Y+6	; 0x06
    17d6:	16 a6       	std	Z+46, r1	; 0x2e
    17d8:	17 a6       	std	Z+47, r1	; 0x2f
    17da:	10 aa       	std	Z+48, r1	; 0x30
    17dc:	11 aa       	std	Z+49, r1	; 0x31
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
    17de:	16 8a       	std	Z+22, r1	; 0x16
    17e0:	17 8a       	std	Z+23, r1	; 0x17
    17e2:	10 8e       	std	Z+24, r1	; 0x18
    17e4:	11 8e       	std	Z+25, r1	; 0x19
#endif
	fs->id = ++Fsid;		/* File system mount ID */
    17e6:	80 91 af 03 	lds	r24, 0x03AF
    17ea:	90 91 b0 03 	lds	r25, 0x03B0
    17ee:	01 96       	adiw	r24, 0x01	; 1
    17f0:	90 93 b0 03 	sts	0x03B0, r25
    17f4:	80 93 af 03 	sts	0x03AF, r24
    17f8:	97 83       	std	Z+7, r25	; 0x07
    17fa:	86 83       	std	Z+6, r24	; 0x06
    17fc:	06 c0       	rjmp	.+12     	; 0x180a <chk_mounted+0x39a>
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
    17fe:	2b e0       	ldi	r18, 0x0B	; 11
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	11 c0       	rjmp	.+34     	; 0x1826 <chk_mounted+0x3b6>
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
    1804:	2c e0       	ldi	r18, 0x0C	; 12
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	0e c0       	rjmp	.+28     	; 0x1826 <chk_mounted+0x3b6>
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
#endif
			return FR_OK;			/* The file system object is valid */
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	0b c0       	rjmp	.+22     	; 0x1826 <chk_mounted+0x3b6>

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
		return FR_NOT_READY;
    1810:	23 e0       	ldi	r18, 0x03	; 3
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	08 c0       	rjmp	.+16     	; 0x1826 <chk_mounted+0x3b6>
	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
    1816:	2a e0       	ldi	r18, 0x0A	; 10
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	05 c0       	rjmp	.+10     	; 0x1826 <chk_mounted+0x3b6>
		if (tbl[4]) {									/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);					/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    181c:	21 e0       	ldi	r18, 0x01	; 1
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <chk_mounted+0x3b6>
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
		return FR_NO_FILESYSTEM;
    1822:	2d e0       	ldi	r18, 0x0D	; 13
    1824:	30 e0       	ldi	r19, 0x00	; 0
	fs->cdir = 0;			/* Current directory (root dir) */
#endif
	fs->id = ++Fsid;		/* File system mount ID */

	return FR_OK;
}
    1826:	c9 01       	movw	r24, r18
    1828:	26 96       	adiw	r28, 0x06	; 6
    182a:	e2 e1       	ldi	r30, 0x12	; 18
    182c:	0c 94 20 2d 	jmp	0x5a40	; 0x5a40 <__epilogue_restores__>
	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    1830:	f7 01       	movw	r30, r14
    1832:	84 a5       	ldd	r24, Z+44	; 0x2c
    1834:	95 a5       	ldd	r25, Z+45	; 0x2d
    1836:	a6 a5       	ldd	r26, Z+46	; 0x2e
    1838:	b7 a5       	ldd	r27, Z+47	; 0x2f
    183a:	ed 81       	ldd	r30, Y+5	; 0x05
    183c:	fe 81       	ldd	r31, Y+6	; 0x06
    183e:	86 a3       	std	Z+38, r24	; 0x26
    1840:	97 a3       	std	Z+39, r25	; 0x27
    1842:	a0 a7       	std	Z+40, r26	; 0x28
    1844:	b1 a7       	std	Z+41, r27	; 0x29
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
    1846:	13 e0       	ldi	r17, 0x03	; 3
    1848:	44 cf       	rjmp	.-376    	; 0x16d2 <chk_mounted+0x262>

0000184a <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
    184a:	88 23       	and	r24, r24
    184c:	99 f4       	brne	.+38     	; 0x1874 <f_mount+0x2a>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
    184e:	e0 91 ad 03 	lds	r30, 0x03AD
    1852:	f0 91 ae 03 	lds	r31, 0x03AE

	if (rfs) {
    1856:	30 97       	sbiw	r30, 0x00	; 0
    1858:	09 f0       	breq	.+2      	; 0x185c <f_mount+0x12>
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
    185a:	10 82       	st	Z, r1
	}

	if (fs) {
    185c:	61 15       	cp	r22, r1
    185e:	71 05       	cpc	r23, r1
    1860:	11 f0       	breq	.+4      	; 0x1866 <f_mount+0x1c>
		fs->fs_type = 0;			/* Clear new fs object */
    1862:	fb 01       	movw	r30, r22
    1864:	10 82       	st	Z, r1
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
    1866:	70 93 ae 03 	sts	0x03AE, r23
    186a:	60 93 ad 03 	sts	0x03AD, r22

	return FR_OK;
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <f_mount+0x2e>
{
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    1874:	2b e0       	ldi	r18, 0x0B	; 11
    1876:	30 e0       	ldi	r19, 0x00	; 0
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */

	return FR_OK;
}
    1878:	c9 01       	movw	r24, r18
    187a:	08 95       	ret

0000187c <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const XCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    187c:	ad e2       	ldi	r26, 0x2D	; 45
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	e4 e4       	ldi	r30, 0x44	; 68
    1882:	fc e0       	ldi	r31, 0x0C	; 12
    1884:	0c 94 04 2d 	jmp	0x5a08	; 0x5a08 <__prologue_saves__>
    1888:	6c 01       	movw	r12, r24
    188a:	7c a3       	std	Y+36, r23	; 0x24
    188c:	6b a3       	std	Y+35, r22	; 0x23
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	fp->fs = NULL;		/* Clear file object */
    188e:	dc 01       	movw	r26, r24
    1890:	1d 92       	st	X+, r1
    1892:	1c 92       	st	X, r1
#if !_FS_READONLY
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
    1894:	b4 2f       	mov	r27, r20
    1896:	bf 71       	andi	r27, 0x1F	; 31
    1898:	bd a3       	std	Y+37, r27	; 0x25
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
    189a:	8e 01       	movw	r16, r28
    189c:	03 5f       	subi	r16, 0xF3	; 243
    189e:	1f 4f       	sbci	r17, 0xFF	; 255
    18a0:	4e 71       	andi	r20, 0x1E	; 30
    18a2:	ce 01       	movw	r24, r28
    18a4:	83 96       	adiw	r24, 0x23	; 35
    18a6:	b8 01       	movw	r22, r16
    18a8:	0e 94 38 0a 	call	0x1470	; 0x1470 <chk_mounted>
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    18ac:	00 97       	sbiw	r24, 0x00	; 0
    18ae:	09 f0       	breq	.+2      	; 0x18b2 <f_open+0x36>
    18b0:	96 c1       	rjmp	.+812    	; 0x1bde <f_open+0x362>
	INITBUF(dj, sfn, lfn);
    18b2:	ce 01       	movw	r24, r28
    18b4:	01 96       	adiw	r24, 0x01	; 1
    18b6:	9a a3       	std	Y+34, r25	; 0x22
    18b8:	89 a3       	std	Y+33, r24	; 0x21
	res = follow_path(&dj, path);	/* Follow the file path */
    18ba:	6b a1       	ldd	r22, Y+35	; 0x23
    18bc:	7c a1       	ldd	r23, Y+36	; 0x24
    18be:	c8 01       	movw	r24, r16
    18c0:	0e 94 db 08 	call	0x11b6	; 0x11b6 <follow_path>
    18c4:	9c 01       	movw	r18, r24

#if !_FS_READONLY
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    18c6:	ed a1       	ldd	r30, Y+37	; 0x25
    18c8:	8e 2f       	mov	r24, r30
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	ac 01       	movw	r20, r24
    18ce:	4c 71       	andi	r20, 0x1C	; 28
    18d0:	50 70       	andi	r21, 0x00	; 0
    18d2:	41 15       	cp	r20, r1
    18d4:	51 05       	cpc	r21, r1
    18d6:	09 f4       	brne	.+2      	; 0x18da <f_open+0x5e>
    18d8:	1b c1       	rjmp	.+566    	; 0x1b10 <f_open+0x294>
		DWORD ps, cl;

		if (res != FR_OK) {			/* No file, create new */
    18da:	21 15       	cp	r18, r1
    18dc:	31 05       	cpc	r19, r1
    18de:	09 f4       	brne	.+2      	; 0x18e2 <f_open+0x66>
    18e0:	4e c0       	rjmp	.+156    	; 0x197e <f_open+0x102>
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
    18e2:	24 30       	cpi	r18, 0x04	; 4
    18e4:	31 05       	cpc	r19, r1
    18e6:	09 f0       	breq	.+2      	; 0x18ea <f_open+0x6e>
    18e8:	84 c1       	rjmp	.+776    	; 0x1bf2 <f_open+0x376>
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_seek(dj, 0);
    18ea:	c8 01       	movw	r24, r16
    18ec:	0e 94 59 08 	call	0x10b2	; 0x10b2 <dir_seek.clone.1>
    18f0:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    18f2:	00 97       	sbiw	r24, 0x00	; 0
    18f4:	09 f0       	breq	.+2      	; 0x18f8 <f_open+0x7c>
    18f6:	7d c1       	rjmp	.+762    	; 0x1bf2 <f_open+0x376>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
		DWORD ps, cl;

		if (res != FR_OK) {			/* No file, create new */
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
				res = dir_register(&dj);
    18f8:	e0 2e       	mov	r14, r16
    18fa:	01 2f       	mov	r16, r17

#else	/* Non LFN configuration */
	res = dir_seek(dj, 0);
	if (res == FR_OK) {
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    18fc:	4b 8d       	ldd	r20, Y+27	; 0x1b
    18fe:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1900:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1902:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1904:	8d 85       	ldd	r24, Y+13	; 0x0d
    1906:	9e 85       	ldd	r25, Y+14	; 0x0e
    1908:	0e 94 1d 04 	call	0x83a	; 0x83a <move_window>
    190c:	9c 01       	movw	r18, r24
			if (res != FR_OK) break;
    190e:	00 97       	sbiw	r24, 0x00	; 0
    1910:	09 f0       	breq	.+2      	; 0x1914 <f_open+0x98>
    1912:	6f c1       	rjmp	.+734    	; 0x1bf2 <f_open+0x376>
			c = *dj->dir;
    1914:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1916:	f8 a1       	ldd	r31, Y+32	; 0x20
    1918:	80 81       	ld	r24, Z
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
    191a:	85 3e       	cpi	r24, 0xE5	; 229
    191c:	09 f4       	brne	.+2      	; 0x1920 <f_open+0xa4>
    191e:	6e c1       	rjmp	.+732    	; 0x1bfc <f_open+0x380>
    1920:	88 23       	and	r24, r24
    1922:	09 f4       	brne	.+2      	; 0x1926 <f_open+0xaa>
    1924:	6b c1       	rjmp	.+726    	; 0x1bfc <f_open+0x380>
			res = dir_next(dj, TRUE);		/* Next entry with table streach */
    1926:	8e 2d       	mov	r24, r14
    1928:	90 2f       	mov	r25, r16
    192a:	61 e0       	ldi	r22, 0x01	; 1
    192c:	70 e0       	ldi	r23, 0x00	; 0
    192e:	0e 94 49 07 	call	0xe92	; 0xe92 <dir_next>
    1932:	9c 01       	movw	r18, r24
		} while (res == FR_OK);
    1934:	00 97       	sbiw	r24, 0x00	; 0
    1936:	11 f3       	breq	.-60     	; 0x18fc <f_open+0x80>
    1938:	5c c1       	rjmp	.+696    	; 0x1bf2 <f_open+0x376>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    193a:	0f 8d       	ldd	r16, Y+31	; 0x1f
    193c:	18 a1       	ldd	r17, Y+32	; 0x20
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    193e:	f8 01       	movw	r30, r16

/*-----------------------------------------------------------------------*/
/* Open or Create a File                                                 */
/*-----------------------------------------------------------------------*/

FRESULT f_open (
    1940:	c8 01       	movw	r24, r16
    1942:	80 96       	adiw	r24, 0x20	; 32
    1944:	01 c0       	rjmp	.+2      	; 0x1948 <f_open+0xcc>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    1946:	11 92       	st	Z+, r1
    1948:	e8 17       	cp	r30, r24
    194a:	f9 07       	cpc	r31, r25
    194c:	e1 f7       	brne	.-8      	; 0x1946 <f_open+0xca>
	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    194e:	69 a1       	ldd	r22, Y+33	; 0x21
    1950:	7a a1       	ldd	r23, Y+34	; 0x22
    1952:	c8 01       	movw	r24, r16
    1954:	4b e0       	ldi	r20, 0x0B	; 11
    1956:	50 e0       	ldi	r21, 0x00	; 0
    1958:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <mem_cpy>
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    195c:	e9 a1       	ldd	r30, Y+33	; 0x21
    195e:	fa a1       	ldd	r31, Y+34	; 0x22
    1960:	83 85       	ldd	r24, Z+11	; 0x0b
    1962:	88 71       	andi	r24, 0x18	; 24
    1964:	d8 01       	movw	r26, r16
    1966:	1c 96       	adiw	r26, 0x0c	; 12
    1968:	8c 93       	st	X, r24
			dj->fs->wflag = 1;
    196a:	ed 85       	ldd	r30, Y+13	; 0x0d
    196c:	fe 85       	ldd	r31, Y+14	; 0x0e
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	84 83       	std	Z+4, r24	; 0x04

		if (res != FR_OK) {			/* No file, create new */
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
				res = dir_register(&dj);
			if (res != FR_OK) LEAVE_FF(dj.fs, res);
			mode |= FA_CREATE_ALWAYS;
    1972:	bd a1       	ldd	r27, Y+37	; 0x25
    1974:	b8 60       	ori	r27, 0x08	; 8
    1976:	bd a3       	std	Y+37, r27	; 0x25
			dir = dj.dir;			/* Created entry (SFN entry) */
    1978:	ef 8c       	ldd	r14, Y+31	; 0x1f
    197a:	f8 a0       	ldd	r15, Y+32	; 0x20
    197c:	b4 c0       	rjmp	.+360    	; 0x1ae6 <f_open+0x26a>
		}
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
    197e:	e2 fd       	sbrc	r30, 2
    1980:	30 c1       	rjmp	.+608    	; 0x1be2 <f_open+0x366>
				LEAVE_FF(dj.fs, FR_EXIST);
			dir = dj.dir;
    1982:	ef 8c       	ldd	r14, Y+31	; 0x1f
    1984:	f8 a0       	ldd	r15, Y+32	; 0x20
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
    1986:	e1 14       	cp	r14, r1
    1988:	f1 04       	cpc	r15, r1
    198a:	09 f4       	brne	.+2      	; 0x198e <f_open+0x112>
    198c:	30 c1       	rjmp	.+608    	; 0x1bee <f_open+0x372>
    198e:	f7 01       	movw	r30, r14
    1990:	23 85       	ldd	r18, Z+11	; 0x0b
    1992:	21 71       	andi	r18, 0x11	; 17
    1994:	09 f0       	breq	.+2      	; 0x1998 <f_open+0x11c>
    1996:	2b c1       	rjmp	.+598    	; 0x1bee <f_open+0x372>
				LEAVE_FF(dj.fs, FR_DENIED);
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
    1998:	83 ff       	sbrs	r24, 3
    199a:	a5 c0       	rjmp	.+330    	; 0x1ae6 <f_open+0x26a>
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
    199c:	24 88       	ldd	r2, Z+20	; 0x14
    199e:	35 88       	ldd	r3, Z+21	; 0x15
    19a0:	44 24       	eor	r4, r4
    19a2:	55 24       	eor	r5, r5
    19a4:	21 01       	movw	r4, r2
    19a6:	33 24       	eor	r3, r3
    19a8:	22 24       	eor	r2, r2
    19aa:	82 8d       	ldd	r24, Z+26	; 0x1a
    19ac:	93 8d       	ldd	r25, Z+27	; 0x1b
    19ae:	a0 e0       	ldi	r26, 0x00	; 0
    19b0:	b0 e0       	ldi	r27, 0x00	; 0
    19b2:	28 2a       	or	r2, r24
    19b4:	39 2a       	or	r3, r25
    19b6:	4a 2a       	or	r4, r26
    19b8:	5b 2a       	or	r5, r27
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
    19ba:	15 8a       	std	Z+21, r1	; 0x15
    19bc:	14 8a       	std	Z+20, r1	; 0x14
				ST_WORD(dir+DIR_FstClusLO, 0);
    19be:	13 8e       	std	Z+27, r1	; 0x1b
    19c0:	12 8e       	std	Z+26, r1	; 0x1a
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
    19c2:	d7 01       	movw	r26, r14
    19c4:	5c 96       	adiw	r26, 0x1c	; 28
    19c6:	1d 92       	st	X+, r1
    19c8:	1d 92       	st	X+, r1
    19ca:	1d 92       	st	X+, r1
    19cc:	1c 92       	st	X, r1
    19ce:	5f 97       	sbiw	r26, 0x1f	; 31
				dj.fs->wflag = 1;
    19d0:	ad 84       	ldd	r10, Y+13	; 0x0d
    19d2:	be 84       	ldd	r11, Y+14	; 0x0e
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	f5 01       	movw	r30, r10
    19d8:	84 83       	std	Z+4, r24	; 0x04
				ps = dj.fs->winsect;			/* Remove the cluster chain */
    19da:	d5 01       	movw	r26, r10
    19dc:	9e 96       	adiw	r26, 0x2e	; 46
    19de:	8d 91       	ld	r24, X+
    19e0:	9d 91       	ld	r25, X+
    19e2:	0d 90       	ld	r0, X+
    19e4:	bc 91       	ld	r27, X
    19e6:	a0 2d       	mov	r26, r0
    19e8:	8a a7       	std	Y+42, r24	; 0x2a
    19ea:	9b a7       	std	Y+43, r25	; 0x2b
    19ec:	ac a7       	std	Y+44, r26	; 0x2c
    19ee:	bd a7       	std	Y+45, r27	; 0x2d
				if (cl) {
    19f0:	21 14       	cp	r2, r1
    19f2:	31 04       	cpc	r3, r1
    19f4:	41 04       	cpc	r4, r1
    19f6:	51 04       	cpc	r5, r1
    19f8:	09 f4       	brne	.+2      	; 0x19fc <f_open+0x180>
    19fa:	69 c0       	rjmp	.+210    	; 0x1ace <f_open+0x252>
{
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
    19fc:	b1 e0       	ldi	r27, 0x01	; 1
    19fe:	2b 16       	cp	r2, r27
    1a00:	31 04       	cpc	r3, r1
    1a02:	41 04       	cpc	r4, r1
    1a04:	51 04       	cpc	r5, r1
    1a06:	09 f4       	brne	.+2      	; 0x1a0a <f_open+0x18e>
    1a08:	5c c0       	rjmp	.+184    	; 0x1ac2 <f_open+0x246>
    1a0a:	86 8d       	ldd	r24, Z+30	; 0x1e
    1a0c:	97 8d       	ldd	r25, Z+31	; 0x1f
    1a0e:	a0 a1       	ldd	r26, Z+32	; 0x20
    1a10:	b1 a1       	ldd	r27, Z+33	; 0x21
    1a12:	28 16       	cp	r2, r24
    1a14:	39 06       	cpc	r3, r25
    1a16:	4a 06       	cpc	r4, r26
    1a18:	5b 06       	cpc	r5, r27
    1a1a:	08 f0       	brcs	.+2      	; 0x1a1e <f_open+0x1a2>
    1a1c:	52 c0       	rjmp	.+164    	; 0x1ac2 <f_open+0x246>
    1a1e:	42 01       	movw	r8, r4
    1a20:	31 01       	movw	r6, r2
    1a22:	43 c0       	rjmp	.+134    	; 0x1aaa <f_open+0x22e>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    1a24:	c5 01       	movw	r24, r10
    1a26:	b4 01       	movw	r22, r8
    1a28:	a3 01       	movw	r20, r6
    1a2a:	0e 94 cd 04 	call	0x99a	; 0x99a <get_fat>
    1a2e:	6e a3       	std	Y+38, r22	; 0x26
    1a30:	7f a3       	std	Y+39, r23	; 0x27
    1a32:	88 a7       	std	Y+40, r24	; 0x28
    1a34:	99 a7       	std	Y+41, r25	; 0x29
			if (nxt == 0) break;				/* Empty cluster? */
    1a36:	61 15       	cp	r22, r1
    1a38:	71 05       	cpc	r23, r1
    1a3a:	81 05       	cpc	r24, r1
    1a3c:	91 05       	cpc	r25, r1
    1a3e:	09 f4       	brne	.+2      	; 0x1a42 <f_open+0x1c6>
    1a40:	ea c0       	rjmp	.+468    	; 0x1c16 <f_open+0x39a>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    1a42:	61 30       	cpi	r22, 0x01	; 1
    1a44:	71 05       	cpc	r23, r1
    1a46:	81 05       	cpc	r24, r1
    1a48:	91 05       	cpc	r25, r1
    1a4a:	d9 f1       	breq	.+118    	; 0x1ac2 <f_open+0x246>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    1a4c:	6f 3f       	cpi	r22, 0xFF	; 255
    1a4e:	ff ef       	ldi	r31, 0xFF	; 255
    1a50:	7f 07       	cpc	r23, r31
    1a52:	ff ef       	ldi	r31, 0xFF	; 255
    1a54:	8f 07       	cpc	r24, r31
    1a56:	ff ef       	ldi	r31, 0xFF	; 255
    1a58:	9f 07       	cpc	r25, r31
    1a5a:	b1 f1       	breq	.+108    	; 0x1ac8 <f_open+0x24c>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    1a5c:	c5 01       	movw	r24, r10
    1a5e:	b4 01       	movw	r22, r8
    1a60:	a3 01       	movw	r20, r6
    1a62:	00 e0       	ldi	r16, 0x00	; 0
    1a64:	10 e0       	ldi	r17, 0x00	; 0
    1a66:	98 01       	movw	r18, r16
    1a68:	0e 94 82 05 	call	0xb04	; 0xb04 <put_fat>
    1a6c:	9c 01       	movw	r18, r24
			if (res != FR_OK) break;
    1a6e:	00 97       	sbiw	r24, 0x00	; 0
    1a70:	09 f0       	breq	.+2      	; 0x1a74 <f_open+0x1f8>
    1a72:	bf c0       	rjmp	.+382    	; 0x1bf2 <f_open+0x376>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    1a74:	f5 01       	movw	r30, r10
    1a76:	86 85       	ldd	r24, Z+14	; 0x0e
    1a78:	97 85       	ldd	r25, Z+15	; 0x0f
    1a7a:	a0 89       	ldd	r26, Z+16	; 0x10
    1a7c:	b1 89       	ldd	r27, Z+17	; 0x11
    1a7e:	8f 3f       	cpi	r24, 0xFF	; 255
    1a80:	ff ef       	ldi	r31, 0xFF	; 255
    1a82:	9f 07       	cpc	r25, r31
    1a84:	ff ef       	ldi	r31, 0xFF	; 255
    1a86:	af 07       	cpc	r26, r31
    1a88:	ff ef       	ldi	r31, 0xFF	; 255
    1a8a:	bf 07       	cpc	r27, r31
    1a8c:	51 f0       	breq	.+20     	; 0x1aa2 <f_open+0x226>
				fs->free_clust++;
    1a8e:	01 96       	adiw	r24, 0x01	; 1
    1a90:	a1 1d       	adc	r26, r1
    1a92:	b1 1d       	adc	r27, r1
    1a94:	f5 01       	movw	r30, r10
    1a96:	86 87       	std	Z+14, r24	; 0x0e
    1a98:	97 87       	std	Z+15, r25	; 0x0f
    1a9a:	a0 8b       	std	Z+16, r26	; 0x10
    1a9c:	b1 8b       	std	Z+17, r27	; 0x11
				fs->fsi_flag = 1;
    1a9e:	21 e0       	ldi	r18, 0x01	; 1
    1aa0:	25 83       	std	Z+5, r18	; 0x05
{
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
    1aa2:	6e a0       	ldd	r6, Y+38	; 0x26
    1aa4:	7f a0       	ldd	r7, Y+39	; 0x27
    1aa6:	88 a4       	ldd	r8, Y+40	; 0x28
    1aa8:	99 a4       	ldd	r9, Y+41	; 0x29
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
    1aaa:	f5 01       	movw	r30, r10
    1aac:	86 8d       	ldd	r24, Z+30	; 0x1e
    1aae:	97 8d       	ldd	r25, Z+31	; 0x1f
    1ab0:	a0 a1       	ldd	r26, Z+32	; 0x20
    1ab2:	b1 a1       	ldd	r27, Z+33	; 0x21
    1ab4:	68 16       	cp	r6, r24
    1ab6:	79 06       	cpc	r7, r25
    1ab8:	8a 06       	cpc	r8, r26
    1aba:	9b 06       	cpc	r9, r27
    1abc:	08 f4       	brcc	.+2      	; 0x1ac0 <f_open+0x244>
    1abe:	b2 cf       	rjmp	.-156    	; 0x1a24 <f_open+0x1a8>
    1ac0:	aa c0       	rjmp	.+340    	; 0x1c16 <f_open+0x39a>
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    1ac2:	22 e0       	ldi	r18, 0x02	; 2
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	95 c0       	rjmp	.+298    	; 0x1bf2 <f_open+0x376>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    1ac8:	21 e0       	ldi	r18, 0x01	; 1
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	92 c0       	rjmp	.+292    	; 0x1bf2 <f_open+0x376>
				if (cl) {
					res = remove_chain(dj.fs, cl);
					if (res) LEAVE_FF(dj.fs, res);
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
				}
				res = move_window(dj.fs, ps);
    1ace:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ad2:	4a a5       	ldd	r20, Y+42	; 0x2a
    1ad4:	5b a5       	ldd	r21, Y+43	; 0x2b
    1ad6:	6c a5       	ldd	r22, Y+44	; 0x2c
    1ad8:	7d a5       	ldd	r23, Y+45	; 0x2d
    1ada:	0e 94 1d 04 	call	0x83a	; 0x83a <move_window>
    1ade:	9c 01       	movw	r18, r24
				if (res != FR_OK) LEAVE_FF(dj.fs, res);
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	09 f0       	breq	.+2      	; 0x1ae6 <f_open+0x26a>
    1ae4:	86 c0       	rjmp	.+268    	; 0x1bf2 <f_open+0x376>
			}
		}
		if (mode & FA_CREATE_ALWAYS) {
    1ae6:	fd a1       	ldd	r31, Y+37	; 0x25
    1ae8:	f3 ff       	sbrs	r31, 3
    1aea:	26 c0       	rjmp	.+76     	; 0x1b38 <f_open+0x2bc>
			dir[DIR_Attr] = 0;					/* Reset attribute */
    1aec:	d7 01       	movw	r26, r14
    1aee:	1b 96       	adiw	r26, 0x0b	; 11
    1af0:	1c 92       	st	X, r1
			ps = get_fattime();
    1af2:	0e 94 16 01 	call	0x22c	; 0x22c <get_fattime>
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
    1af6:	f7 01       	movw	r30, r14
    1af8:	66 87       	std	Z+14, r22	; 0x0e
    1afa:	77 87       	std	Z+15, r23	; 0x0f
    1afc:	80 8b       	std	Z+16, r24	; 0x10
    1afe:	91 8b       	std	Z+17, r25	; 0x11
			dj.fs->wflag = 1;
    1b00:	ed 85       	ldd	r30, Y+13	; 0x0d
    1b02:	fe 85       	ldd	r31, Y+14	; 0x0e
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	84 83       	std	Z+4, r24	; 0x04
			mode |= FA__WRITTEN;				/* Set file changed flag */
    1b08:	fd a1       	ldd	r31, Y+37	; 0x25
    1b0a:	f0 62       	ori	r31, 0x20	; 32
    1b0c:	fd a3       	std	Y+37, r31	; 0x25
    1b0e:	14 c0       	rjmp	.+40     	; 0x1b38 <f_open+0x2bc>
		}
	}
	/* Open an existing file */
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
    1b10:	21 15       	cp	r18, r1
    1b12:	31 05       	cpc	r19, r1
    1b14:	09 f0       	breq	.+2      	; 0x1b18 <f_open+0x29c>
    1b16:	6d c0       	rjmp	.+218    	; 0x1bf2 <f_open+0x376>
		dir = dj.dir;
    1b18:	ef 8c       	ldd	r14, Y+31	; 0x1f
    1b1a:	f8 a0       	ldd	r15, Y+32	; 0x20
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    1b1c:	e1 14       	cp	r14, r1
    1b1e:	f1 04       	cpc	r15, r1
    1b20:	09 f4       	brne	.+2      	; 0x1b24 <f_open+0x2a8>
    1b22:	62 c0       	rjmp	.+196    	; 0x1be8 <f_open+0x36c>
    1b24:	d7 01       	movw	r26, r14
    1b26:	1b 96       	adiw	r26, 0x0b	; 11
    1b28:	2c 91       	ld	r18, X
    1b2a:	1b 97       	sbiw	r26, 0x0b	; 11
    1b2c:	24 fd       	sbrc	r18, 4
    1b2e:	5c c0       	rjmp	.+184    	; 0x1be8 <f_open+0x36c>
			LEAVE_FF(dj.fs, FR_NO_FILE);
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    1b30:	e1 ff       	sbrs	r30, 1
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <f_open+0x2bc>
    1b34:	20 fd       	sbrc	r18, 0
    1b36:	5b c0       	rjmp	.+182    	; 0x1bee <f_open+0x372>
			LEAVE_FF(dj.fs, FR_DENIED);
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    1b38:	6d 85       	ldd	r22, Y+13	; 0x0d
    1b3a:	7e 85       	ldd	r23, Y+14	; 0x0e
    1b3c:	fb 01       	movw	r30, r22
    1b3e:	26 a5       	ldd	r18, Z+46	; 0x2e
    1b40:	37 a5       	ldd	r19, Z+47	; 0x2f
    1b42:	40 a9       	ldd	r20, Z+48	; 0x30
    1b44:	51 a9       	ldd	r21, Z+49	; 0x31
    1b46:	d6 01       	movw	r26, r12
    1b48:	5a 96       	adiw	r26, 0x1a	; 26
    1b4a:	2d 93       	st	X+, r18
    1b4c:	3d 93       	st	X+, r19
    1b4e:	4d 93       	st	X+, r20
    1b50:	5c 93       	st	X, r21
    1b52:	5d 97       	sbiw	r26, 0x1d	; 29
	fp->dir_ptr = dj.dir;
    1b54:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b56:	98 a1       	ldd	r25, Y+32	; 0x20
    1b58:	5f 96       	adiw	r26, 0x1f	; 31
    1b5a:	9c 93       	st	X, r25
    1b5c:	8e 93       	st	-X, r24
    1b5e:	5e 97       	sbiw	r26, 0x1e	; 30
#endif
	fp->flag = mode;					/* File access mode */
    1b60:	ed a1       	ldd	r30, Y+37	; 0x25
    1b62:	14 96       	adiw	r26, 0x04	; 4
    1b64:	ec 93       	st	X, r30
	fp->org_clust =						/* File start cluster */
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    1b66:	d7 01       	movw	r26, r14
    1b68:	54 96       	adiw	r26, 0x14	; 20
    1b6a:	8d 91       	ld	r24, X+
    1b6c:	9c 91       	ld	r25, X
    1b6e:	55 97       	sbiw	r26, 0x15	; 21
    1b70:	a0 e0       	ldi	r26, 0x00	; 0
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	dc 01       	movw	r26, r24
    1b76:	99 27       	eor	r25, r25
    1b78:	88 27       	eor	r24, r24
    1b7a:	f7 01       	movw	r30, r14
    1b7c:	22 8d       	ldd	r18, Z+26	; 0x1a
    1b7e:	33 8d       	ldd	r19, Z+27	; 0x1b
    1b80:	40 e0       	ldi	r20, 0x00	; 0
    1b82:	50 e0       	ldi	r21, 0x00	; 0
    1b84:	82 2b       	or	r24, r18
    1b86:	93 2b       	or	r25, r19
    1b88:	a4 2b       	or	r26, r20
    1b8a:	b5 2b       	or	r27, r21
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
	fp->dir_ptr = dj.dir;
#endif
	fp->flag = mode;					/* File access mode */
	fp->org_clust =						/* File start cluster */
    1b8c:	f6 01       	movw	r30, r12
    1b8e:	86 87       	std	Z+14, r24	; 0x0e
    1b90:	97 87       	std	Z+15, r25	; 0x0f
    1b92:	a0 8b       	std	Z+16, r26	; 0x10
    1b94:	b1 8b       	std	Z+17, r27	; 0x11
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    1b96:	f7 01       	movw	r30, r14
    1b98:	84 8d       	ldd	r24, Z+28	; 0x1c
    1b9a:	95 8d       	ldd	r25, Z+29	; 0x1d
    1b9c:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1b9e:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1ba0:	f6 01       	movw	r30, r12
    1ba2:	82 87       	std	Z+10, r24	; 0x0a
    1ba4:	93 87       	std	Z+11, r25	; 0x0b
    1ba6:	a4 87       	std	Z+12, r26	; 0x0c
    1ba8:	b5 87       	std	Z+13, r27	; 0x0d
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
    1baa:	d6 01       	movw	r26, r12
    1bac:	16 96       	adiw	r26, 0x06	; 6
    1bae:	1d 92       	st	X+, r1
    1bb0:	1d 92       	st	X+, r1
    1bb2:	1d 92       	st	X+, r1
    1bb4:	1c 92       	st	X, r1
    1bb6:	19 97       	sbiw	r26, 0x09	; 9
    1bb8:	8f ef       	ldi	r24, 0xFF	; 255
    1bba:	15 96       	adiw	r26, 0x05	; 5
    1bbc:	8c 93       	st	X, r24
	fp->dsect = 0;
    1bbe:	16 8a       	std	Z+22, r1	; 0x16
    1bc0:	17 8a       	std	Z+23, r1	; 0x17
    1bc2:	10 8e       	std	Z+24, r1	; 0x18
    1bc4:	11 8e       	std	Z+25, r1	; 0x19
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
    1bc6:	71 83       	std	Z+1, r23	; 0x01
    1bc8:	60 83       	st	Z, r22
    1bca:	db 01       	movw	r26, r22
    1bcc:	16 96       	adiw	r26, 0x06	; 6
    1bce:	8d 91       	ld	r24, X+
    1bd0:	9c 91       	ld	r25, X
    1bd2:	17 97       	sbiw	r26, 0x07	; 7
    1bd4:	93 83       	std	Z+3, r25	; 0x03
    1bd6:	82 83       	std	Z+2, r24	; 0x02

	LEAVE_FF(dj.fs, FR_OK);
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	0a c0       	rjmp	.+20     	; 0x1bf2 <f_open+0x376>
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    1bde:	9c 01       	movw	r18, r24
    1be0:	08 c0       	rjmp	.+16     	; 0x1bf2 <f_open+0x376>
			mode |= FA_CREATE_ALWAYS;
			dir = dj.dir;			/* Created entry (SFN entry) */
		}
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
				LEAVE_FF(dj.fs, FR_EXIST);
    1be2:	28 e0       	ldi	r18, 0x08	; 8
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	05 c0       	rjmp	.+10     	; 0x1bf2 <f_open+0x376>
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
		dir = dj.dir;
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
			LEAVE_FF(dj.fs, FR_NO_FILE);
    1be8:	24 e0       	ldi	r18, 0x04	; 4
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	02 c0       	rjmp	.+4      	; 0x1bf2 <f_open+0x376>
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
			LEAVE_FF(dj.fs, FR_DENIED);
    1bee:	27 e0       	ldi	r18, 0x07	; 7
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
	fp->dsect = 0;
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */

	LEAVE_FF(dj.fs, FR_OK);
}
    1bf2:	c9 01       	movw	r24, r18
    1bf4:	ad 96       	adiw	r28, 0x2d	; 45
    1bf6:	e2 e1       	ldi	r30, 0x12	; 18
    1bf8:	0c 94 20 2d 	jmp	0x5a40	; 0x5a40 <__epilogue_restores__>
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    1bfc:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1bfe:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1c00:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1c02:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1c04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c08:	0e 94 1d 04 	call	0x83a	; 0x83a <move_window>
    1c0c:	9c 01       	movw	r18, r24
		if (res == FR_OK) {
    1c0e:	00 97       	sbiw	r24, 0x00	; 0
    1c10:	09 f4       	brne	.+2      	; 0x1c14 <f_open+0x398>
    1c12:	93 ce       	rjmp	.-730    	; 0x193a <f_open+0xbe>
    1c14:	ee cf       	rjmp	.-36     	; 0x1bf2 <f_open+0x376>
				dj.fs->wflag = 1;
				ps = dj.fs->winsect;			/* Remove the cluster chain */
				if (cl) {
					res = remove_chain(dj.fs, cl);
					if (res) LEAVE_FF(dj.fs, res);
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    1c16:	ed 85       	ldd	r30, Y+13	; 0x0d
    1c18:	fe 85       	ldd	r31, Y+14	; 0x0e
    1c1a:	08 94       	sec
    1c1c:	21 08       	sbc	r2, r1
    1c1e:	31 08       	sbc	r3, r1
    1c20:	41 08       	sbc	r4, r1
    1c22:	51 08       	sbc	r5, r1
    1c24:	22 86       	std	Z+10, r2	; 0x0a
    1c26:	33 86       	std	Z+11, r3	; 0x0b
    1c28:	44 86       	std	Z+12, r4	; 0x0c
    1c2a:	55 86       	std	Z+13, r5	; 0x0d
    1c2c:	50 cf       	rjmp	.-352    	; 0x1ace <f_open+0x252>

00001c2e <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    1c2e:	a0 e0       	ldi	r26, 0x00	; 0
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	ed e1       	ldi	r30, 0x1D	; 29
    1c34:	fe e0       	ldi	r31, 0x0E	; 14
    1c36:	0c 94 04 2d 	jmp	0x5a08	; 0x5a08 <__prologue_saves__>
    1c3a:	ec 01       	movw	r28, r24
    1c3c:	06 2f       	mov	r16, r22
    1c3e:	c7 2e       	mov	r12, r23
    1c40:	3a 01       	movw	r6, r20
    1c42:	19 01       	movw	r2, r18
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;


	*br = 0;	/* Initialize bytes read */
    1c44:	f9 01       	movw	r30, r18
    1c46:	11 82       	std	Z+1, r1	; 0x01
    1c48:	10 82       	st	Z, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    1c4a:	6a 81       	ldd	r22, Y+2	; 0x02
    1c4c:	7b 81       	ldd	r23, Y+3	; 0x03
    1c4e:	88 81       	ld	r24, Y
    1c50:	99 81       	ldd	r25, Y+1	; 0x01
    1c52:	0e 94 03 04 	call	0x806	; 0x806 <validate>
    1c56:	7c 01       	movw	r14, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    1c58:	00 97       	sbiw	r24, 0x00	; 0
    1c5a:	09 f0       	breq	.+2      	; 0x1c5e <f_read+0x30>
    1c5c:	10 c1       	rjmp	.+544    	; 0x1e7e <f_read+0x250>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    1c5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c60:	87 fd       	sbrc	r24, 7
    1c62:	06 c1       	rjmp	.+524    	; 0x1e70 <f_read+0x242>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
    1c64:	80 ff       	sbrs	r24, 0
    1c66:	08 c1       	rjmp	.+528    	; 0x1e78 <f_read+0x24a>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    1c68:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c6a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c6c:	ac 85       	ldd	r26, Y+12	; 0x0c
    1c6e:	bd 85       	ldd	r27, Y+13	; 0x0d
    1c70:	2e 81       	ldd	r18, Y+6	; 0x06
    1c72:	3f 81       	ldd	r19, Y+7	; 0x07
    1c74:	48 85       	ldd	r20, Y+8	; 0x08
    1c76:	59 85       	ldd	r21, Y+9	; 0x09
    1c78:	82 1b       	sub	r24, r18
    1c7a:	93 0b       	sbc	r25, r19
    1c7c:	a4 0b       	sbc	r26, r20
    1c7e:	b5 0b       	sbc	r27, r21
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
    1c80:	93 01       	movw	r18, r6
    1c82:	40 e0       	ldi	r20, 0x00	; 0
    1c84:	50 e0       	ldi	r21, 0x00	; 0
    1c86:	82 17       	cp	r24, r18
    1c88:	93 07       	cpc	r25, r19
    1c8a:	a4 07       	cpc	r26, r20
    1c8c:	b5 07       	cpc	r27, r21
    1c8e:	08 f4       	brcc	.+2      	; 0x1c92 <f_read+0x64>
    1c90:	3c 01       	movw	r6, r24
)
{
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;
    1c92:	40 2e       	mov	r4, r16
    1c94:	5c 2c       	mov	r5, r12
    1c96:	e7 c0       	rjmp	.+462    	; 0x1e66 <f_read+0x238>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    1c98:	2e 81       	ldd	r18, Y+6	; 0x06
    1c9a:	3f 81       	ldd	r19, Y+7	; 0x07
    1c9c:	48 85       	ldd	r20, Y+8	; 0x08
    1c9e:	59 85       	ldd	r21, Y+9	; 0x09
    1ca0:	da 01       	movw	r26, r20
    1ca2:	c9 01       	movw	r24, r18
    1ca4:	91 70       	andi	r25, 0x01	; 1
    1ca6:	a0 70       	andi	r26, 0x00	; 0
    1ca8:	b0 70       	andi	r27, 0x00	; 0
    1caa:	00 97       	sbiw	r24, 0x00	; 0
    1cac:	a1 05       	cpc	r26, r1
    1cae:	b1 05       	cpc	r27, r1
    1cb0:	09 f0       	breq	.+2      	; 0x1cb4 <f_read+0x86>
    1cb2:	92 c0       	rjmp	.+292    	; 0x1dd8 <f_read+0x1aa>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    1cb4:	88 81       	ld	r24, Y
    1cb6:	99 81       	ldd	r25, Y+1	; 0x01
    1cb8:	7d 81       	ldd	r23, Y+5	; 0x05
    1cba:	fc 01       	movw	r30, r24
    1cbc:	62 81       	ldd	r22, Z+2	; 0x02
    1cbe:	76 17       	cp	r23, r22
    1cc0:	18 f1       	brcs	.+70     	; 0x1d08 <f_read+0xda>
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
    1cc2:	21 15       	cp	r18, r1
    1cc4:	31 05       	cpc	r19, r1
    1cc6:	41 05       	cpc	r20, r1
    1cc8:	51 05       	cpc	r21, r1
    1cca:	29 f4       	brne	.+10     	; 0x1cd6 <f_read+0xa8>
    1ccc:	6e 85       	ldd	r22, Y+14	; 0x0e
    1cce:	7f 85       	ldd	r23, Y+15	; 0x0f
    1cd0:	88 89       	ldd	r24, Y+16	; 0x10
    1cd2:	99 89       	ldd	r25, Y+17	; 0x11
    1cd4:	06 c0       	rjmp	.+12     	; 0x1ce2 <f_read+0xb4>
    1cd6:	4a 89       	ldd	r20, Y+18	; 0x12
    1cd8:	5b 89       	ldd	r21, Y+19	; 0x13
    1cda:	6c 89       	ldd	r22, Y+20	; 0x14
    1cdc:	7d 89       	ldd	r23, Y+21	; 0x15
    1cde:	0e 94 cd 04 	call	0x99a	; 0x99a <get_fat>
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
    1ce2:	62 30       	cpi	r22, 0x02	; 2
    1ce4:	71 05       	cpc	r23, r1
    1ce6:	81 05       	cpc	r24, r1
    1ce8:	91 05       	cpc	r25, r1
    1cea:	e0 f0       	brcs	.+56     	; 0x1d24 <f_read+0xf6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    1cec:	6f 3f       	cpi	r22, 0xFF	; 255
    1cee:	ff ef       	ldi	r31, 0xFF	; 255
    1cf0:	7f 07       	cpc	r23, r31
    1cf2:	ff ef       	ldi	r31, 0xFF	; 255
    1cf4:	8f 07       	cpc	r24, r31
    1cf6:	ff ef       	ldi	r31, 0xFF	; 255
    1cf8:	9f 07       	cpc	r25, r31
    1cfa:	09 f4       	brne	.+2      	; 0x1cfe <f_read+0xd0>
    1cfc:	7b c0       	rjmp	.+246    	; 0x1df4 <f_read+0x1c6>
				fp->curr_clust = clst;				/* Update current cluster */
    1cfe:	6a 8b       	std	Y+18, r22	; 0x12
    1d00:	7b 8b       	std	Y+19, r23	; 0x13
    1d02:	8c 8b       	std	Y+20, r24	; 0x14
    1d04:	9d 8b       	std	Y+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector offset in the cluster */
    1d06:	1d 82       	std	Y+5, r1	; 0x05
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    1d08:	08 81       	ld	r16, Y
    1d0a:	19 81       	ldd	r17, Y+1	; 0x01
    1d0c:	4a 89       	ldd	r20, Y+18	; 0x12
    1d0e:	5b 89       	ldd	r21, Y+19	; 0x13
    1d10:	6c 89       	ldd	r22, Y+20	; 0x14
    1d12:	7d 89       	ldd	r23, Y+21	; 0x15
    1d14:	c8 01       	movw	r24, r16
    1d16:	0e 94 1a 07 	call	0xe34	; 0xe34 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    1d1a:	61 15       	cp	r22, r1
    1d1c:	71 05       	cpc	r23, r1
    1d1e:	81 05       	cpc	r24, r1
    1d20:	91 05       	cpc	r25, r1
    1d22:	21 f4       	brne	.+8      	; 0x1d2c <f_read+0xfe>
    1d24:	8c 81       	ldd	r24, Y+4	; 0x04
    1d26:	80 68       	ori	r24, 0x80	; 128
    1d28:	8c 83       	std	Y+4, r24	; 0x04
    1d2a:	a2 c0       	rjmp	.+324    	; 0x1e70 <f_read+0x242>
			sect += fp->csect;
    1d2c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d2e:	4b 01       	movw	r8, r22
    1d30:	5c 01       	movw	r10, r24
    1d32:	83 0e       	add	r8, r19
    1d34:	91 1c       	adc	r9, r1
    1d36:	a1 1c       	adc	r10, r1
    1d38:	b1 1c       	adc	r11, r1
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
    1d3a:	63 01       	movw	r12, r6
    1d3c:	cd 2c       	mov	r12, r13
    1d3e:	dd 24       	eor	r13, r13
    1d40:	c6 94       	lsr	r12
			if (cc) {								/* Read maximum contiguous sectors directly */
    1d42:	c1 14       	cp	r12, r1
    1d44:	d1 04       	cpc	r13, r1
    1d46:	09 f4       	brne	.+2      	; 0x1d4a <f_read+0x11c>
    1d48:	41 c0       	rjmp	.+130    	; 0x1dcc <f_read+0x19e>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    1d4a:	f8 01       	movw	r30, r16
    1d4c:	22 81       	ldd	r18, Z+2	; 0x02
    1d4e:	83 2f       	mov	r24, r19
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	a6 01       	movw	r20, r12
    1d54:	48 0f       	add	r20, r24
    1d56:	59 1f       	adc	r21, r25
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	24 17       	cp	r18, r20
    1d5c:	35 07       	cpc	r19, r21
    1d5e:	18 f4       	brcc	.+6      	; 0x1d66 <f_read+0x138>
					cc = fp->fs->csize - fp->csect;
    1d60:	69 01       	movw	r12, r18
    1d62:	c8 1a       	sub	r12, r24
    1d64:	d9 0a       	sbc	r13, r25
				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
    1d66:	f8 01       	movw	r30, r16
    1d68:	81 81       	ldd	r24, Z+1	; 0x01
    1d6a:	b2 01       	movw	r22, r4
    1d6c:	a5 01       	movw	r20, r10
    1d6e:	94 01       	movw	r18, r8
    1d70:	0c 2d       	mov	r16, r12
    1d72:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <disk_read>
    1d76:	00 97       	sbiw	r24, 0x00	; 0
    1d78:	e9 f5       	brne	.+122    	; 0x1df4 <f_read+0x1c6>
					ABORT(fp->fs, FR_DISK_ERR);
#if !_FS_READONLY && _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)		/* Replace one of the read sectors with cached data if it contains a dirty sector */
    1d7a:	e8 81       	ld	r30, Y
    1d7c:	f9 81       	ldd	r31, Y+1	; 0x01
    1d7e:	84 81       	ldd	r24, Z+4	; 0x04
    1d80:	88 23       	and	r24, r24
    1d82:	e1 f0       	breq	.+56     	; 0x1dbc <f_read+0x18e>
    1d84:	86 a5       	ldd	r24, Z+46	; 0x2e
    1d86:	97 a5       	ldd	r25, Z+47	; 0x2f
    1d88:	a0 a9       	ldd	r26, Z+48	; 0x30
    1d8a:	b1 a9       	ldd	r27, Z+49	; 0x31
    1d8c:	88 19       	sub	r24, r8
    1d8e:	99 09       	sbc	r25, r9
    1d90:	aa 09       	sbc	r26, r10
    1d92:	bb 09       	sbc	r27, r11
    1d94:	96 01       	movw	r18, r12
    1d96:	40 e0       	ldi	r20, 0x00	; 0
    1d98:	50 e0       	ldi	r21, 0x00	; 0
    1d9a:	82 17       	cp	r24, r18
    1d9c:	93 07       	cpc	r25, r19
    1d9e:	a4 07       	cpc	r26, r20
    1da0:	b5 07       	cpc	r27, r21
    1da2:	60 f4       	brcc	.+24     	; 0x1dbc <f_read+0x18e>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
    1da4:	98 2f       	mov	r25, r24
    1da6:	88 27       	eor	r24, r24
    1da8:	99 0f       	add	r25, r25
    1daa:	bf 01       	movw	r22, r30
    1dac:	6e 5c       	subi	r22, 0xCE	; 206
    1dae:	7f 4f       	sbci	r23, 0xFF	; 255
    1db0:	84 0d       	add	r24, r4
    1db2:	95 1d       	adc	r25, r5
    1db4:	40 e0       	ldi	r20, 0x00	; 0
    1db6:	52 e0       	ldi	r21, 0x02	; 2
    1db8:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <mem_cpy>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    1dbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dbe:	8c 0d       	add	r24, r12
    1dc0:	8d 83       	std	Y+5, r24	; 0x05
				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    1dc2:	86 01       	movw	r16, r12
    1dc4:	10 2f       	mov	r17, r16
    1dc6:	00 27       	eor	r16, r16
    1dc8:	11 0f       	add	r17, r17
				continue;
    1dca:	33 c0       	rjmp	.+102    	; 0x1e32 <f_read+0x204>
			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    1dcc:	8e 8a       	std	Y+22, r8	; 0x16
    1dce:	9f 8a       	std	Y+23, r9	; 0x17
    1dd0:	a8 8e       	std	Y+24, r10	; 0x18
    1dd2:	b9 8e       	std	Y+25, r11	; 0x19
			fp->csect++;							/* Next sector address in the cluster */
    1dd4:	3f 5f       	subi	r19, 0xFF	; 255
    1dd6:	3d 83       	std	Y+5, r19	; 0x05
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    1dd8:	8e 80       	ldd	r8, Y+6	; 0x06
    1dda:	9f 80       	ldd	r9, Y+7	; 0x07
    1ddc:	a8 84       	ldd	r10, Y+8	; 0x08
    1dde:	b9 84       	ldd	r11, Y+9	; 0x09
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
    1de0:	4e 89       	ldd	r20, Y+22	; 0x16
    1de2:	5f 89       	ldd	r21, Y+23	; 0x17
    1de4:	68 8d       	ldd	r22, Y+24	; 0x18
    1de6:	79 8d       	ldd	r23, Y+25	; 0x19
    1de8:	88 81       	ld	r24, Y
    1dea:	99 81       	ldd	r25, Y+1	; 0x01
    1dec:	0e 94 1d 04 	call	0x83a	; 0x83a <move_window>
    1df0:	00 97       	sbiw	r24, 0x00	; 0
    1df2:	39 f0       	breq	.+14     	; 0x1e02 <f_read+0x1d4>
			ABORT(fp->fs, FR_DISK_ERR);
    1df4:	8c 81       	ldd	r24, Y+4	; 0x04
    1df6:	80 68       	ori	r24, 0x80	; 128
    1df8:	8c 83       	std	Y+4, r24	; 0x04
    1dfa:	61 e0       	ldi	r22, 0x01	; 1
    1dfc:	e6 2e       	mov	r14, r22
    1dfe:	f1 2c       	mov	r15, r1
    1e00:	3e c0       	rjmp	.+124    	; 0x1e7e <f_read+0x250>
			}
#endif
			fp->dsect = sect;
			fp->csect++;							/* Next sector address in the cluster */
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    1e02:	c4 01       	movw	r24, r8
    1e04:	91 70       	andi	r25, 0x01	; 1
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	32 e0       	ldi	r19, 0x02	; 2
    1e0a:	28 1b       	sub	r18, r24
    1e0c:	39 0b       	sbc	r19, r25
    1e0e:	83 01       	movw	r16, r6
    1e10:	26 15       	cp	r18, r6
    1e12:	37 05       	cpc	r19, r7
    1e14:	08 f4       	brcc	.+2      	; 0x1e18 <f_read+0x1ea>
    1e16:	89 01       	movw	r16, r18
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    1e18:	68 81       	ld	r22, Y
    1e1a:	79 81       	ldd	r23, Y+1	; 0x01
    1e1c:	6e 5c       	subi	r22, 0xCE	; 206
    1e1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e20:	8e 81       	ldd	r24, Y+6	; 0x06
    1e22:	9f 81       	ldd	r25, Y+7	; 0x07
    1e24:	91 70       	andi	r25, 0x01	; 1
    1e26:	68 0f       	add	r22, r24
    1e28:	79 1f       	adc	r23, r25
    1e2a:	c2 01       	movw	r24, r4
    1e2c:	a8 01       	movw	r20, r16
    1e2e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <mem_cpy>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    1e32:	40 0e       	add	r4, r16
    1e34:	51 1e       	adc	r5, r17
    1e36:	98 01       	movw	r18, r16
    1e38:	40 e0       	ldi	r20, 0x00	; 0
    1e3a:	50 e0       	ldi	r21, 0x00	; 0
    1e3c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e3e:	9f 81       	ldd	r25, Y+7	; 0x07
    1e40:	a8 85       	ldd	r26, Y+8	; 0x08
    1e42:	b9 85       	ldd	r27, Y+9	; 0x09
    1e44:	82 0f       	add	r24, r18
    1e46:	93 1f       	adc	r25, r19
    1e48:	a4 1f       	adc	r26, r20
    1e4a:	b5 1f       	adc	r27, r21
    1e4c:	8e 83       	std	Y+6, r24	; 0x06
    1e4e:	9f 83       	std	Y+7, r25	; 0x07
    1e50:	a8 87       	std	Y+8, r26	; 0x08
    1e52:	b9 87       	std	Y+9, r27	; 0x09
    1e54:	f1 01       	movw	r30, r2
    1e56:	80 81       	ld	r24, Z
    1e58:	91 81       	ldd	r25, Z+1	; 0x01
    1e5a:	80 0f       	add	r24, r16
    1e5c:	91 1f       	adc	r25, r17
    1e5e:	91 83       	std	Z+1, r25	; 0x01
    1e60:	80 83       	st	Z, r24
    1e62:	60 1a       	sub	r6, r16
    1e64:	71 0a       	sbc	r7, r17
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
    1e66:	61 14       	cp	r6, r1
    1e68:	71 04       	cpc	r7, r1
    1e6a:	09 f0       	breq	.+2      	; 0x1e6e <f_read+0x240>
    1e6c:	15 cf       	rjmp	.-470    	; 0x1c98 <f_read+0x6a>
    1e6e:	07 c0       	rjmp	.+14     	; 0x1e7e <f_read+0x250>
	*br = 0;	/* Initialize bytes read */

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)						/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    1e70:	52 e0       	ldi	r21, 0x02	; 2
    1e72:	e5 2e       	mov	r14, r21
    1e74:	f1 2c       	mov	r15, r1
    1e76:	03 c0       	rjmp	.+6      	; 0x1e7e <f_read+0x250>
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    1e78:	47 e0       	ldi	r20, 0x07	; 7
    1e7a:	e4 2e       	mov	r14, r20
    1e7c:	f1 2c       	mov	r15, r1
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    1e7e:	c7 01       	movw	r24, r14
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
    1e84:	e2 e1       	ldi	r30, 0x12	; 18
    1e86:	0c 94 20 2d 	jmp	0x5a40	; 0x5a40 <__epilogue_restores__>

00001e8a <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    1e8a:	a0 e0       	ldi	r26, 0x00	; 0
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	eb e4       	ldi	r30, 0x4B	; 75
    1e90:	ff e0       	ldi	r31, 0x0F	; 15
    1e92:	0c 94 04 2d 	jmp	0x5a08	; 0x5a08 <__prologue_saves__>
    1e96:	ec 01       	movw	r28, r24
    1e98:	06 2f       	mov	r16, r22
    1e9a:	c7 2e       	mov	r12, r23
    1e9c:	3a 01       	movw	r6, r20
    1e9e:	19 01       	movw	r2, r18
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;


	*bw = 0;	/* Initialize bytes written */
    1ea0:	f9 01       	movw	r30, r18
    1ea2:	11 82       	std	Z+1, r1	; 0x01
    1ea4:	10 82       	st	Z, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    1ea6:	6a 81       	ldd	r22, Y+2	; 0x02
    1ea8:	7b 81       	ldd	r23, Y+3	; 0x03
    1eaa:	88 81       	ld	r24, Y
    1eac:	99 81       	ldd	r25, Y+1	; 0x01
    1eae:	0e 94 03 04 	call	0x806	; 0x806 <validate>
    1eb2:	7c 01       	movw	r14, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    1eb4:	00 97       	sbiw	r24, 0x00	; 0
    1eb6:	09 f0       	breq	.+2      	; 0x1eba <f_write+0x30>
    1eb8:	71 c1       	rjmp	.+738    	; 0x219c <f_write+0x312>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    1eba:	8c 81       	ldd	r24, Y+4	; 0x04
    1ebc:	87 fd       	sbrc	r24, 7
    1ebe:	67 c1       	rjmp	.+718    	; 0x218e <f_write+0x304>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
    1ec0:	81 ff       	sbrs	r24, 1
    1ec2:	69 c1       	rjmp	.+722    	; 0x2196 <f_write+0x30c>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
    1ec4:	2a 85       	ldd	r18, Y+10	; 0x0a
    1ec6:	3b 85       	ldd	r19, Y+11	; 0x0b
    1ec8:	4c 85       	ldd	r20, Y+12	; 0x0c
    1eca:	5d 85       	ldd	r21, Y+13	; 0x0d
    1ecc:	c3 01       	movw	r24, r6
    1ece:	a0 e0       	ldi	r26, 0x00	; 0
    1ed0:	b0 e0       	ldi	r27, 0x00	; 0
    1ed2:	82 0f       	add	r24, r18
    1ed4:	93 1f       	adc	r25, r19
    1ed6:	a4 1f       	adc	r26, r20
    1ed8:	b5 1f       	adc	r27, r21
    1eda:	82 17       	cp	r24, r18
    1edc:	93 07       	cpc	r25, r19
    1ede:	a4 07       	cpc	r26, r20
    1ee0:	b5 07       	cpc	r27, r21
    1ee2:	10 f4       	brcc	.+4      	; 0x1ee8 <f_write+0x5e>
    1ee4:	66 24       	eor	r6, r6
    1ee6:	77 24       	eor	r7, r7
)
{
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    1ee8:	40 2e       	mov	r4, r16
    1eea:	5c 2c       	mov	r5, r12
    1eec:	37 c1       	rjmp	.+622    	; 0x215c <f_write+0x2d2>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    1eee:	2e 81       	ldd	r18, Y+6	; 0x06
    1ef0:	3f 81       	ldd	r19, Y+7	; 0x07
    1ef2:	48 85       	ldd	r20, Y+8	; 0x08
    1ef4:	59 85       	ldd	r21, Y+9	; 0x09
    1ef6:	da 01       	movw	r26, r20
    1ef8:	c9 01       	movw	r24, r18
    1efa:	91 70       	andi	r25, 0x01	; 1
    1efc:	a0 70       	andi	r26, 0x00	; 0
    1efe:	b0 70       	andi	r27, 0x00	; 0
    1f00:	00 97       	sbiw	r24, 0x00	; 0
    1f02:	a1 05       	cpc	r26, r1
    1f04:	b1 05       	cpc	r27, r1
    1f06:	09 f0       	breq	.+2      	; 0x1f0a <f_write+0x80>
    1f08:	de c0       	rjmp	.+444    	; 0x20c6 <f_write+0x23c>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    1f0a:	88 81       	ld	r24, Y
    1f0c:	99 81       	ldd	r25, Y+1	; 0x01
    1f0e:	7d 81       	ldd	r23, Y+5	; 0x05
    1f10:	fc 01       	movw	r30, r24
    1f12:	62 81       	ldd	r22, Z+2	; 0x02
    1f14:	76 17       	cp	r23, r22
    1f16:	d8 f1       	brcs	.+118    	; 0x1f8e <f_write+0x104>
				if (fp->fptr == 0) {				/* On the top of the file? */
    1f18:	21 15       	cp	r18, r1
    1f1a:	31 05       	cpc	r19, r1
    1f1c:	41 05       	cpc	r20, r1
    1f1e:	51 05       	cpc	r21, r1
    1f20:	a9 f4       	brne	.+42     	; 0x1f4c <f_write+0xc2>
					clst = fp->org_clust;			/* Follow from the origin */
    1f22:	2e 85       	ldd	r18, Y+14	; 0x0e
    1f24:	3f 85       	ldd	r19, Y+15	; 0x0f
    1f26:	48 89       	ldd	r20, Y+16	; 0x10
    1f28:	59 89       	ldd	r21, Y+17	; 0x11
					if (clst == 0)					/* When there is no cluster chain, */
    1f2a:	21 15       	cp	r18, r1
    1f2c:	31 05       	cpc	r19, r1
    1f2e:	41 05       	cpc	r20, r1
    1f30:	51 05       	cpc	r21, r1
    1f32:	d1 f4       	brne	.+52     	; 0x1f68 <f_write+0xde>
						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    1f34:	40 e0       	ldi	r20, 0x00	; 0
    1f36:	50 e0       	ldi	r21, 0x00	; 0
    1f38:	ba 01       	movw	r22, r20
    1f3a:	0e 94 49 06 	call	0xc92	; 0xc92 <create_chain>
    1f3e:	9b 01       	movw	r18, r22
    1f40:	ac 01       	movw	r20, r24
    1f42:	6e 87       	std	Y+14, r22	; 0x0e
    1f44:	7f 87       	std	Y+15, r23	; 0x0f
    1f46:	88 8b       	std	Y+16, r24	; 0x10
    1f48:	99 8b       	std	Y+17, r25	; 0x11
    1f4a:	08 c0       	rjmp	.+16     	; 0x1f5c <f_write+0xd2>
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
    1f4c:	4a 89       	ldd	r20, Y+18	; 0x12
    1f4e:	5b 89       	ldd	r21, Y+19	; 0x13
    1f50:	6c 89       	ldd	r22, Y+20	; 0x14
    1f52:	7d 89       	ldd	r23, Y+21	; 0x15
    1f54:	0e 94 49 06 	call	0xc92	; 0xc92 <create_chain>
    1f58:	9b 01       	movw	r18, r22
    1f5a:	ac 01       	movw	r20, r24
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
    1f5c:	21 15       	cp	r18, r1
    1f5e:	31 05       	cpc	r19, r1
    1f60:	41 05       	cpc	r20, r1
    1f62:	51 05       	cpc	r21, r1
    1f64:	09 f4       	brne	.+2      	; 0x1f68 <f_write+0xde>
    1f66:	fe c0       	rjmp	.+508    	; 0x2164 <f_write+0x2da>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    1f68:	21 30       	cpi	r18, 0x01	; 1
    1f6a:	31 05       	cpc	r19, r1
    1f6c:	41 05       	cpc	r20, r1
    1f6e:	51 05       	cpc	r21, r1
    1f70:	a1 f1       	breq	.+104    	; 0x1fda <f_write+0x150>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    1f72:	2f 3f       	cpi	r18, 0xFF	; 255
    1f74:	ff ef       	ldi	r31, 0xFF	; 255
    1f76:	3f 07       	cpc	r19, r31
    1f78:	ff ef       	ldi	r31, 0xFF	; 255
    1f7a:	4f 07       	cpc	r20, r31
    1f7c:	ff ef       	ldi	r31, 0xFF	; 255
    1f7e:	5f 07       	cpc	r21, r31
    1f80:	09 f4       	brne	.+2      	; 0x1f84 <f_write+0xfa>
    1f82:	af c0       	rjmp	.+350    	; 0x20e2 <f_write+0x258>
				fp->curr_clust = clst;				/* Update current cluster */
    1f84:	2a 8b       	std	Y+18, r18	; 0x12
    1f86:	3b 8b       	std	Y+19, r19	; 0x13
    1f88:	4c 8b       	std	Y+20, r20	; 0x14
    1f8a:	5d 8b       	std	Y+21, r21	; 0x15
				fp->csect = 0;						/* Reset sector address in the cluster */
    1f8c:	1d 82       	std	Y+5, r1	; 0x05
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
    1f8e:	e8 81       	ld	r30, Y
    1f90:	f9 81       	ldd	r31, Y+1	; 0x01
    1f92:	66 a5       	ldd	r22, Z+46	; 0x2e
    1f94:	77 a5       	ldd	r23, Z+47	; 0x2f
    1f96:	80 a9       	ldd	r24, Z+48	; 0x30
    1f98:	91 a9       	ldd	r25, Z+49	; 0x31
    1f9a:	2e 89       	ldd	r18, Y+22	; 0x16
    1f9c:	3f 89       	ldd	r19, Y+23	; 0x17
    1f9e:	48 8d       	ldd	r20, Y+24	; 0x18
    1fa0:	59 8d       	ldd	r21, Y+25	; 0x19
    1fa2:	62 17       	cp	r22, r18
    1fa4:	73 07       	cpc	r23, r19
    1fa6:	84 07       	cpc	r24, r20
    1fa8:	95 07       	cpc	r25, r21
    1faa:	49 f4       	brne	.+18     	; 0x1fbe <f_write+0x134>
    1fac:	cf 01       	movw	r24, r30
    1fae:	40 e0       	ldi	r20, 0x00	; 0
    1fb0:	50 e0       	ldi	r21, 0x00	; 0
    1fb2:	ba 01       	movw	r22, r20
    1fb4:	0e 94 1d 04 	call	0x83a	; 0x83a <move_window>
    1fb8:	00 97       	sbiw	r24, 0x00	; 0
    1fba:	09 f0       	breq	.+2      	; 0x1fbe <f_write+0x134>
    1fbc:	92 c0       	rjmp	.+292    	; 0x20e2 <f_write+0x258>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    1fbe:	08 81       	ld	r16, Y
    1fc0:	19 81       	ldd	r17, Y+1	; 0x01
    1fc2:	4a 89       	ldd	r20, Y+18	; 0x12
    1fc4:	5b 89       	ldd	r21, Y+19	; 0x13
    1fc6:	6c 89       	ldd	r22, Y+20	; 0x14
    1fc8:	7d 89       	ldd	r23, Y+21	; 0x15
    1fca:	c8 01       	movw	r24, r16
    1fcc:	0e 94 1a 07 	call	0xe34	; 0xe34 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    1fd0:	61 15       	cp	r22, r1
    1fd2:	71 05       	cpc	r23, r1
    1fd4:	81 05       	cpc	r24, r1
    1fd6:	91 05       	cpc	r25, r1
    1fd8:	21 f4       	brne	.+8      	; 0x1fe2 <f_write+0x158>
    1fda:	8c 81       	ldd	r24, Y+4	; 0x04
    1fdc:	80 68       	ori	r24, 0x80	; 128
    1fde:	8c 83       	std	Y+4, r24	; 0x04
    1fe0:	d6 c0       	rjmp	.+428    	; 0x218e <f_write+0x304>
			sect += fp->csect;
    1fe2:	3d 81       	ldd	r19, Y+5	; 0x05
    1fe4:	4b 01       	movw	r8, r22
    1fe6:	5c 01       	movw	r10, r24
    1fe8:	83 0e       	add	r8, r19
    1fea:	91 1c       	adc	r9, r1
    1fec:	a1 1c       	adc	r10, r1
    1fee:	b1 1c       	adc	r11, r1
			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
    1ff0:	63 01       	movw	r12, r6
    1ff2:	cd 2c       	mov	r12, r13
    1ff4:	dd 24       	eor	r13, r13
    1ff6:	c6 94       	lsr	r12
			if (cc) {								/* Write maximum contiguous sectors directly */
    1ff8:	c1 14       	cp	r12, r1
    1ffa:	d1 04       	cpc	r13, r1
    1ffc:	09 f4       	brne	.+2      	; 0x2000 <f_write+0x176>
    1ffe:	41 c0       	rjmp	.+130    	; 0x2082 <f_write+0x1f8>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    2000:	f8 01       	movw	r30, r16
    2002:	22 81       	ldd	r18, Z+2	; 0x02
    2004:	83 2f       	mov	r24, r19
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	a6 01       	movw	r20, r12
    200a:	48 0f       	add	r20, r24
    200c:	59 1f       	adc	r21, r25
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	24 17       	cp	r18, r20
    2012:	35 07       	cpc	r19, r21
    2014:	18 f4       	brcc	.+6      	; 0x201c <f_write+0x192>
					cc = fp->fs->csize - fp->csect;
    2016:	69 01       	movw	r12, r18
    2018:	c8 1a       	sub	r12, r24
    201a:	d9 0a       	sbc	r13, r25
				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
    201c:	f8 01       	movw	r30, r16
    201e:	81 81       	ldd	r24, Z+1	; 0x01
    2020:	b2 01       	movw	r22, r4
    2022:	a5 01       	movw	r20, r10
    2024:	94 01       	movw	r18, r8
    2026:	0c 2d       	mov	r16, r12
    2028:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <disk_write>
    202c:	00 97       	sbiw	r24, 0x00	; 0
    202e:	09 f0       	breq	.+2      	; 0x2032 <f_write+0x1a8>
    2030:	58 c0       	rjmp	.+176    	; 0x20e2 <f_write+0x258>
					ABORT(fp->fs, FR_DISK_ERR);
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
    2032:	e8 81       	ld	r30, Y
    2034:	f9 81       	ldd	r31, Y+1	; 0x01
    2036:	66 a5       	ldd	r22, Z+46	; 0x2e
    2038:	77 a5       	ldd	r23, Z+47	; 0x2f
    203a:	80 a9       	ldd	r24, Z+48	; 0x30
    203c:	91 a9       	ldd	r25, Z+49	; 0x31
    203e:	68 19       	sub	r22, r8
    2040:	79 09       	sbc	r23, r9
    2042:	8a 09       	sbc	r24, r10
    2044:	9b 09       	sbc	r25, r11
    2046:	96 01       	movw	r18, r12
    2048:	40 e0       	ldi	r20, 0x00	; 0
    204a:	50 e0       	ldi	r21, 0x00	; 0
    204c:	62 17       	cp	r22, r18
    204e:	73 07       	cpc	r23, r19
    2050:	84 07       	cpc	r24, r20
    2052:	95 07       	cpc	r25, r21
    2054:	70 f4       	brcc	.+28     	; 0x2072 <f_write+0x1e8>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    2056:	76 2f       	mov	r23, r22
    2058:	66 27       	eor	r22, r22
    205a:	77 0f       	add	r23, r23
    205c:	64 0d       	add	r22, r4
    205e:	75 1d       	adc	r23, r5
    2060:	cf 01       	movw	r24, r30
    2062:	c2 96       	adiw	r24, 0x32	; 50
    2064:	40 e0       	ldi	r20, 0x00	; 0
    2066:	52 e0       	ldi	r21, 0x02	; 2
    2068:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <mem_cpy>
					fp->fs->wflag = 0;
    206c:	e8 81       	ld	r30, Y
    206e:	f9 81       	ldd	r31, Y+1	; 0x01
    2070:	14 82       	std	Z+4, r1	; 0x04
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    2072:	8d 81       	ldd	r24, Y+5	; 0x05
    2074:	8c 0d       	add	r24, r12
    2076:	8d 83       	std	Y+5, r24	; 0x05
				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    2078:	86 01       	movw	r16, r12
    207a:	10 2f       	mov	r17, r16
    207c:	00 27       	eor	r16, r16
    207e:	11 0f       	add	r17, r17
				continue;
    2080:	53 c0       	rjmp	.+166    	; 0x2128 <f_write+0x29e>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
    2082:	2e 81       	ldd	r18, Y+6	; 0x06
    2084:	3f 81       	ldd	r19, Y+7	; 0x07
    2086:	48 85       	ldd	r20, Y+8	; 0x08
    2088:	59 85       	ldd	r21, Y+9	; 0x09
    208a:	8a 85       	ldd	r24, Y+10	; 0x0a
    208c:	9b 85       	ldd	r25, Y+11	; 0x0b
    208e:	ac 85       	ldd	r26, Y+12	; 0x0c
    2090:	bd 85       	ldd	r27, Y+13	; 0x0d
    2092:	28 17       	cp	r18, r24
    2094:	39 07       	cpc	r19, r25
    2096:	4a 07       	cpc	r20, r26
    2098:	5b 07       	cpc	r21, r27
    209a:	70 f0       	brcs	.+28     	; 0x20b8 <f_write+0x22e>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    209c:	c8 01       	movw	r24, r16
    209e:	40 e0       	ldi	r20, 0x00	; 0
    20a0:	50 e0       	ldi	r21, 0x00	; 0
    20a2:	ba 01       	movw	r22, r20
    20a4:	0e 94 1d 04 	call	0x83a	; 0x83a <move_window>
    20a8:	00 97       	sbiw	r24, 0x00	; 0
    20aa:	d9 f4       	brne	.+54     	; 0x20e2 <f_write+0x258>
				fp->fs->winsect = sect;
    20ac:	e8 81       	ld	r30, Y
    20ae:	f9 81       	ldd	r31, Y+1	; 0x01
    20b0:	86 a6       	std	Z+46, r8	; 0x2e
    20b2:	97 a6       	std	Z+47, r9	; 0x2f
    20b4:	a0 aa       	std	Z+48, r10	; 0x30
    20b6:	b1 aa       	std	Z+49, r11	; 0x31
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    20b8:	8e 8a       	std	Y+22, r8	; 0x16
    20ba:	9f 8a       	std	Y+23, r9	; 0x17
    20bc:	a8 8e       	std	Y+24, r10	; 0x18
    20be:	b9 8e       	std	Y+25, r11	; 0x19
			fp->csect++;							/* Next sector address in the cluster */
    20c0:	8d 81       	ldd	r24, Y+5	; 0x05
    20c2:	8f 5f       	subi	r24, 0xFF	; 255
    20c4:	8d 83       	std	Y+5, r24	; 0x05
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    20c6:	8e 80       	ldd	r8, Y+6	; 0x06
    20c8:	9f 80       	ldd	r9, Y+7	; 0x07
    20ca:	a8 84       	ldd	r10, Y+8	; 0x08
    20cc:	b9 84       	ldd	r11, Y+9	; 0x09
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
    20ce:	4e 89       	ldd	r20, Y+22	; 0x16
    20d0:	5f 89       	ldd	r21, Y+23	; 0x17
    20d2:	68 8d       	ldd	r22, Y+24	; 0x18
    20d4:	79 8d       	ldd	r23, Y+25	; 0x19
    20d6:	88 81       	ld	r24, Y
    20d8:	99 81       	ldd	r25, Y+1	; 0x01
    20da:	0e 94 1d 04 	call	0x83a	; 0x83a <move_window>
    20de:	00 97       	sbiw	r24, 0x00	; 0
    20e0:	39 f0       	breq	.+14     	; 0x20f0 <f_write+0x266>
			ABORT(fp->fs, FR_DISK_ERR);
    20e2:	8c 81       	ldd	r24, Y+4	; 0x04
    20e4:	80 68       	ori	r24, 0x80	; 128
    20e6:	8c 83       	std	Y+4, r24	; 0x04
    20e8:	21 e0       	ldi	r18, 0x01	; 1
    20ea:	e2 2e       	mov	r14, r18
    20ec:	f1 2c       	mov	r15, r1
    20ee:	56 c0       	rjmp	.+172    	; 0x219c <f_write+0x312>
			}
#endif
			fp->dsect = sect;
			fp->csect++;							/* Next sector address in the cluster */
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    20f0:	c4 01       	movw	r24, r8
    20f2:	91 70       	andi	r25, 0x01	; 1
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	32 e0       	ldi	r19, 0x02	; 2
    20f8:	28 1b       	sub	r18, r24
    20fa:	39 0b       	sbc	r19, r25
    20fc:	83 01       	movw	r16, r6
    20fe:	26 15       	cp	r18, r6
    2100:	37 05       	cpc	r19, r7
    2102:	08 f4       	brcc	.+2      	; 0x2106 <f_write+0x27c>
    2104:	89 01       	movw	r16, r18
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    2106:	28 81       	ld	r18, Y
    2108:	39 81       	ldd	r19, Y+1	; 0x01
    210a:	2e 5c       	subi	r18, 0xCE	; 206
    210c:	3f 4f       	sbci	r19, 0xFF	; 255
    210e:	8e 81       	ldd	r24, Y+6	; 0x06
    2110:	9f 81       	ldd	r25, Y+7	; 0x07
    2112:	91 70       	andi	r25, 0x01	; 1
    2114:	82 0f       	add	r24, r18
    2116:	93 1f       	adc	r25, r19
    2118:	b2 01       	movw	r22, r4
    211a:	a8 01       	movw	r20, r16
    211c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <mem_cpy>
		fp->fs->wflag = 1;
    2120:	e8 81       	ld	r30, Y
    2122:	f9 81       	ldd	r31, Y+1	; 0x01
    2124:	31 e0       	ldi	r19, 0x01	; 1
    2126:	34 83       	std	Z+4, r19	; 0x04
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    2128:	40 0e       	add	r4, r16
    212a:	51 1e       	adc	r5, r17
    212c:	98 01       	movw	r18, r16
    212e:	40 e0       	ldi	r20, 0x00	; 0
    2130:	50 e0       	ldi	r21, 0x00	; 0
    2132:	8e 81       	ldd	r24, Y+6	; 0x06
    2134:	9f 81       	ldd	r25, Y+7	; 0x07
    2136:	a8 85       	ldd	r26, Y+8	; 0x08
    2138:	b9 85       	ldd	r27, Y+9	; 0x09
    213a:	82 0f       	add	r24, r18
    213c:	93 1f       	adc	r25, r19
    213e:	a4 1f       	adc	r26, r20
    2140:	b5 1f       	adc	r27, r21
    2142:	8e 83       	std	Y+6, r24	; 0x06
    2144:	9f 83       	std	Y+7, r25	; 0x07
    2146:	a8 87       	std	Y+8, r26	; 0x08
    2148:	b9 87       	std	Y+9, r27	; 0x09
    214a:	f1 01       	movw	r30, r2
    214c:	80 81       	ld	r24, Z
    214e:	91 81       	ldd	r25, Z+1	; 0x01
    2150:	80 0f       	add	r24, r16
    2152:	91 1f       	adc	r25, r17
    2154:	91 83       	std	Z+1, r25	; 0x01
    2156:	80 83       	st	Z, r24
    2158:	60 1a       	sub	r6, r16
    215a:	71 0a       	sbc	r7, r17
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
    215c:	61 14       	cp	r6, r1
    215e:	71 04       	cpc	r7, r1
    2160:	09 f0       	breq	.+2      	; 0x2164 <f_write+0x2da>
    2162:	c5 ce       	rjmp	.-630    	; 0x1eee <f_write+0x64>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    2164:	8e 81       	ldd	r24, Y+6	; 0x06
    2166:	9f 81       	ldd	r25, Y+7	; 0x07
    2168:	a8 85       	ldd	r26, Y+8	; 0x08
    216a:	b9 85       	ldd	r27, Y+9	; 0x09
    216c:	2a 85       	ldd	r18, Y+10	; 0x0a
    216e:	3b 85       	ldd	r19, Y+11	; 0x0b
    2170:	4c 85       	ldd	r20, Y+12	; 0x0c
    2172:	5d 85       	ldd	r21, Y+13	; 0x0d
    2174:	28 17       	cp	r18, r24
    2176:	39 07       	cpc	r19, r25
    2178:	4a 07       	cpc	r20, r26
    217a:	5b 07       	cpc	r21, r27
    217c:	20 f4       	brcc	.+8      	; 0x2186 <f_write+0x2fc>
    217e:	8a 87       	std	Y+10, r24	; 0x0a
    2180:	9b 87       	std	Y+11, r25	; 0x0b
    2182:	ac 87       	std	Y+12, r26	; 0x0c
    2184:	bd 87       	std	Y+13, r27	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
    2186:	8c 81       	ldd	r24, Y+4	; 0x04
    2188:	80 62       	ori	r24, 0x20	; 32
    218a:	8c 83       	std	Y+4, r24	; 0x04

	LEAVE_FF(fp->fs, FR_OK);
    218c:	07 c0       	rjmp	.+14     	; 0x219c <f_write+0x312>
	*bw = 0;	/* Initialize bytes written */

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)						/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    218e:	92 e0       	ldi	r25, 0x02	; 2
    2190:	e9 2e       	mov	r14, r25
    2192:	f1 2c       	mov	r15, r1
    2194:	03 c0       	rjmp	.+6      	; 0x219c <f_write+0x312>
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    2196:	87 e0       	ldi	r24, 0x07	; 7
    2198:	e8 2e       	mov	r14, r24
    219a:	f1 2c       	mov	r15, r1

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    219c:	c7 01       	movw	r24, r14
    219e:	cd b7       	in	r28, 0x3d	; 61
    21a0:	de b7       	in	r29, 0x3e	; 62
    21a2:	e2 e1       	ldi	r30, 0x12	; 18
    21a4:	0c 94 20 2d 	jmp	0x5a40	; 0x5a40 <__epilogue_restores__>

000021a8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    21a8:	0f 93       	push	r16
    21aa:	1f 93       	push	r17
    21ac:	cf 93       	push	r28
    21ae:	df 93       	push	r29
    21b0:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    21b2:	6a 81       	ldd	r22, Y+2	; 0x02
    21b4:	7b 81       	ldd	r23, Y+3	; 0x03
    21b6:	88 81       	ld	r24, Y
    21b8:	99 81       	ldd	r25, Y+1	; 0x01
    21ba:	0e 94 03 04 	call	0x806	; 0x806 <validate>
    21be:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    21c0:	00 97       	sbiw	r24, 0x00	; 0
    21c2:	09 f0       	breq	.+2      	; 0x21c6 <f_sync+0x1e>
    21c4:	a0 c0       	rjmp	.+320    	; 0x2306 <f_sync+0x15e>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    21c6:	8c 81       	ldd	r24, Y+4	; 0x04
    21c8:	85 ff       	sbrs	r24, 5
    21ca:	9d c0       	rjmp	.+314    	; 0x2306 <f_sync+0x15e>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    21cc:	4a 8d       	ldd	r20, Y+26	; 0x1a
    21ce:	5b 8d       	ldd	r21, Y+27	; 0x1b
    21d0:	6c 8d       	ldd	r22, Y+28	; 0x1c
    21d2:	7d 8d       	ldd	r23, Y+29	; 0x1d
    21d4:	88 81       	ld	r24, Y
    21d6:	99 81       	ldd	r25, Y+1	; 0x01
    21d8:	0e 94 1d 04 	call	0x83a	; 0x83a <move_window>
    21dc:	9c 01       	movw	r18, r24
			if (res == FR_OK) {
    21de:	00 97       	sbiw	r24, 0x00	; 0
    21e0:	09 f0       	breq	.+2      	; 0x21e4 <f_sync+0x3c>
    21e2:	91 c0       	rjmp	.+290    	; 0x2306 <f_sync+0x15e>
				dir = fp->dir_ptr;
    21e4:	0e 8d       	ldd	r16, Y+30	; 0x1e
    21e6:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    21e8:	f8 01       	movw	r30, r16
    21ea:	83 85       	ldd	r24, Z+11	; 0x0b
    21ec:	80 62       	ori	r24, 0x20	; 32
    21ee:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    21f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    21f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    21f4:	ac 85       	ldd	r26, Y+12	; 0x0c
    21f6:	bd 85       	ldd	r27, Y+13	; 0x0d
    21f8:	84 8f       	std	Z+28, r24	; 0x1c
    21fa:	95 8f       	std	Z+29, r25	; 0x1d
    21fc:	a6 8f       	std	Z+30, r26	; 0x1e
    21fe:	b7 8f       	std	Z+31, r27	; 0x1f
				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
    2200:	8e 85       	ldd	r24, Y+14	; 0x0e
    2202:	9f 85       	ldd	r25, Y+15	; 0x0f
    2204:	a8 89       	ldd	r26, Y+16	; 0x10
    2206:	b9 89       	ldd	r27, Y+17	; 0x11
    2208:	93 8f       	std	Z+27, r25	; 0x1b
    220a:	82 8f       	std	Z+26, r24	; 0x1a
				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
    220c:	b5 8b       	std	Z+21, r27	; 0x15
    220e:	a4 8b       	std	Z+20, r26	; 0x14
				tim = get_fattime();			/* Updated time */
    2210:	0e 94 16 01 	call	0x22c	; 0x22c <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
    2214:	f8 01       	movw	r30, r16
    2216:	66 8b       	std	Z+22, r22	; 0x16
    2218:	77 8b       	std	Z+23, r23	; 0x17
    221a:	80 8f       	std	Z+24, r24	; 0x18
    221c:	91 8f       	std	Z+25, r25	; 0x19
				fp->flag &= ~FA__WRITTEN;
    221e:	8c 81       	ldd	r24, Y+4	; 0x04
    2220:	8f 7d       	andi	r24, 0xDF	; 223
    2222:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    2224:	e8 81       	ld	r30, Y
    2226:	f9 81       	ldd	r31, Y+1	; 0x01
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    222c:	09 90       	ld	r0, Y+
    222e:	d8 81       	ld	r29, Y
    2230:	c0 2d       	mov	r28, r0
)
{
	FRESULT res;


	res = move_window(fs, 0);
    2232:	ce 01       	movw	r24, r28
    2234:	40 e0       	ldi	r20, 0x00	; 0
    2236:	50 e0       	ldi	r21, 0x00	; 0
    2238:	ba 01       	movw	r22, r20
    223a:	0e 94 1d 04 	call	0x83a	; 0x83a <move_window>
    223e:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    2240:	00 97       	sbiw	r24, 0x00	; 0
    2242:	09 f0       	breq	.+2      	; 0x2246 <f_sync+0x9e>
    2244:	60 c0       	rjmp	.+192    	; 0x2306 <f_sync+0x15e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    2246:	88 81       	ld	r24, Y
    2248:	83 30       	cpi	r24, 0x03	; 3
    224a:	09 f0       	breq	.+2      	; 0x224e <f_sync+0xa6>
    224c:	50 c0       	rjmp	.+160    	; 0x22ee <f_sync+0x146>
    224e:	8d 81       	ldd	r24, Y+5	; 0x05
    2250:	88 23       	and	r24, r24
    2252:	09 f4       	brne	.+2      	; 0x2256 <f_sync+0xae>
    2254:	4c c0       	rjmp	.+152    	; 0x22ee <f_sync+0x146>
			fs->winsect = 0;
    2256:	1e a6       	std	Y+46, r1	; 0x2e
    2258:	1f a6       	std	Y+47, r1	; 0x2f
    225a:	18 aa       	std	Y+48, r1	; 0x30
    225c:	19 aa       	std	Y+49, r1	; 0x31
			mem_set(fs->win, 0, 512);
    225e:	9e 01       	movw	r18, r28
    2260:	2e 5c       	subi	r18, 0xCE	; 206
    2262:	3f 4f       	sbci	r19, 0xFF	; 255
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    2264:	f9 01       	movw	r30, r18

/*-----------------------------------------------------------------------*/
/* Synchronize the File Object                                           */
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
    2266:	ce 01       	movw	r24, r28
    2268:	8e 5c       	subi	r24, 0xCE	; 206
    226a:	9d 4f       	sbci	r25, 0xFD	; 253
    226c:	01 c0       	rjmp	.+2      	; 0x2270 <f_sync+0xc8>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    226e:	11 92       	st	Z+, r1
    2270:	e8 17       	cp	r30, r24
    2272:	f9 07       	cpc	r31, r25
    2274:	e1 f7       	brne	.-8      	; 0x226e <f_sync+0xc6>
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    2276:	f9 01       	movw	r30, r18
    2278:	e2 50       	subi	r30, 0x02	; 2
    227a:	fe 4f       	sbci	r31, 0xFE	; 254
    227c:	85 e5       	ldi	r24, 0x55	; 85
    227e:	9a ea       	ldi	r25, 0xAA	; 170
    2280:	91 83       	std	Z+1, r25	; 0x01
    2282:	80 83       	st	Z, r24
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    2284:	82 e5       	ldi	r24, 0x52	; 82
    2286:	92 e5       	ldi	r25, 0x52	; 82
    2288:	a1 e6       	ldi	r26, 0x61	; 97
    228a:	b1 e4       	ldi	r27, 0x41	; 65
    228c:	8a ab       	std	Y+50, r24	; 0x32
    228e:	9b ab       	std	Y+51, r25	; 0x33
    2290:	ac ab       	std	Y+52, r26	; 0x34
    2292:	bd ab       	std	Y+53, r27	; 0x35
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    2294:	f9 01       	movw	r30, r18
    2296:	ec 51       	subi	r30, 0x1C	; 28
    2298:	fe 4f       	sbci	r31, 0xFE	; 254
    229a:	82 e7       	ldi	r24, 0x72	; 114
    229c:	92 e7       	ldi	r25, 0x72	; 114
    229e:	a1 e4       	ldi	r26, 0x41	; 65
    22a0:	b1 e6       	ldi	r27, 0x61	; 97
    22a2:	80 83       	st	Z, r24
    22a4:	91 83       	std	Z+1, r25	; 0x01
    22a6:	a2 83       	std	Z+2, r26	; 0x02
    22a8:	b3 83       	std	Z+3, r27	; 0x03
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    22aa:	f9 01       	movw	r30, r18
    22ac:	e8 51       	subi	r30, 0x18	; 24
    22ae:	fe 4f       	sbci	r31, 0xFE	; 254
    22b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    22b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    22b4:	a8 89       	ldd	r26, Y+16	; 0x10
    22b6:	b9 89       	ldd	r27, Y+17	; 0x11
    22b8:	80 83       	st	Z, r24
    22ba:	91 83       	std	Z+1, r25	; 0x01
    22bc:	a2 83       	std	Z+2, r26	; 0x02
    22be:	b3 83       	std	Z+3, r27	; 0x03
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    22c0:	24 51       	subi	r18, 0x14	; 20
    22c2:	3e 4f       	sbci	r19, 0xFE	; 254
    22c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    22c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    22c8:	ac 85       	ldd	r26, Y+12	; 0x0c
    22ca:	bd 85       	ldd	r27, Y+13	; 0x0d
    22cc:	f9 01       	movw	r30, r18
    22ce:	80 83       	st	Z, r24
    22d0:	91 83       	std	Z+1, r25	; 0x01
    22d2:	a2 83       	std	Z+2, r26	; 0x02
    22d4:	b3 83       	std	Z+3, r27	; 0x03
			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
    22d6:	be 01       	movw	r22, r28
    22d8:	6e 5c       	subi	r22, 0xCE	; 206
    22da:	7f 4f       	sbci	r23, 0xFF	; 255
    22dc:	2a 89       	ldd	r18, Y+18	; 0x12
    22de:	3b 89       	ldd	r19, Y+19	; 0x13
    22e0:	4c 89       	ldd	r20, Y+20	; 0x14
    22e2:	5d 89       	ldd	r21, Y+21	; 0x15
    22e4:	89 81       	ldd	r24, Y+1	; 0x01
    22e6:	01 e0       	ldi	r16, 0x01	; 1
    22e8:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <disk_write>
			fs->fsi_flag = 0;
    22ec:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drive, CTRL_SYNC, (void*)NULL) != RES_OK)
    22ee:	89 81       	ldd	r24, Y+1	; 0x01
    22f0:	60 e0       	ldi	r22, 0x00	; 0
    22f2:	40 e0       	ldi	r20, 0x00	; 0
    22f4:	50 e0       	ldi	r21, 0x00	; 0
    22f6:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <disk_ioctl>
    22fa:	21 e0       	ldi	r18, 0x01	; 1
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	00 97       	sbiw	r24, 0x00	; 0
    2300:	11 f4       	brne	.+4      	; 0x2306 <f_sync+0x15e>
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    2306:	c9 01       	movw	r24, r18
    2308:	df 91       	pop	r29
    230a:	cf 91       	pop	r28
    230c:	1f 91       	pop	r17
    230e:	0f 91       	pop	r16
    2310:	08 95       	ret

00002312 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    2312:	cf 93       	push	r28
    2314:	df 93       	push	r29
    2316:	ec 01       	movw	r28, r24
#if _FS_READONLY
	res = validate(fp->fs, fp->id);
	if (res == FR_OK) fp->fs = NULL;
	LEAVE_FF(fp->fs, res);
#else
	res = f_sync(fp);
    2318:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <f_sync>
    231c:	9c 01       	movw	r18, r24
	if (res == FR_OK) fp->fs = NULL;
    231e:	00 97       	sbiw	r24, 0x00	; 0
    2320:	11 f4       	brne	.+4      	; 0x2326 <f_close+0x14>
    2322:	19 82       	std	Y+1, r1	; 0x01
    2324:	18 82       	st	Y, r1
	return res;
#endif
}
    2326:	c9 01       	movw	r24, r18
    2328:	df 91       	pop	r29
    232a:	cf 91       	pop	r28
    232c:	08 95       	ret

0000232e <f_chdrive>:

FRESULT f_chdrive (
	BYTE drv		/* Drive number */
)
{
	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
    232e:	88 23       	and	r24, r24
    2330:	29 f4       	brne	.+10     	; 0x233c <f_chdrive+0xe>

	Drive = drv;
    2332:	10 92 ac 03 	sts	0x03AC, r1

	return FR_OK;
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	02 c0       	rjmp	.+4      	; 0x2340 <f_chdrive+0x12>

FRESULT f_chdrive (
	BYTE drv		/* Drive number */
)
{
	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
    233c:	2b e0       	ldi	r18, 0x0B	; 11
    233e:	30 e0       	ldi	r19, 0x00	; 0

	Drive = drv;

	return FR_OK;
}
    2340:	c9 01       	movw	r24, r18
    2342:	08 95       	ret

00002344 <f_chdir>:


FRESULT f_chdir (
	const XCHAR *path	/* Pointer to the directory path */
)
{
    2344:	a4 e2       	ldi	r26, 0x24	; 36
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	e8 ea       	ldi	r30, 0xA8	; 168
    234a:	f1 e1       	ldi	r31, 0x11	; 17
    234c:	0c 94 12 2d 	jmp	0x5a24	; 0x5a24 <__prologue_saves__+0x1c>
    2350:	9c a3       	std	Y+36, r25	; 0x24
    2352:	8b a3       	std	Y+35, r24	; 0x23
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj.fs, 0);
    2354:	8e 01       	movw	r16, r28
    2356:	03 5f       	subi	r16, 0xF3	; 243
    2358:	1f 4f       	sbci	r17, 0xFF	; 255
    235a:	ce 01       	movw	r24, r28
    235c:	83 96       	adiw	r24, 0x23	; 35
    235e:	b8 01       	movw	r22, r16
    2360:	40 e0       	ldi	r20, 0x00	; 0
    2362:	0e 94 38 0a 	call	0x1470	; 0x1470 <chk_mounted>
    2366:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    2368:	00 97       	sbiw	r24, 0x00	; 0
    236a:	e9 f5       	brne	.+122    	; 0x23e6 <f_chdir+0xa2>
		INITBUF(dj, sfn, lfn);
    236c:	ce 01       	movw	r24, r28
    236e:	01 96       	adiw	r24, 0x01	; 1
    2370:	9a a3       	std	Y+34, r25	; 0x22
    2372:	89 a3       	std	Y+33, r24	; 0x21
		res = follow_path(&dj, path);		/* Follow the file path */
    2374:	6b a1       	ldd	r22, Y+35	; 0x23
    2376:	7c a1       	ldd	r23, Y+36	; 0x24
    2378:	c8 01       	movw	r24, r16
    237a:	0e 94 db 08 	call	0x11b6	; 0x11b6 <follow_path>
    237e:	9c 01       	movw	r18, r24
		if (res == FR_OK) {					/* Follow completed */
    2380:	00 97       	sbiw	r24, 0x00	; 0
    2382:	61 f5       	brne	.+88     	; 0x23dc <f_chdir+0x98>
			dir = dj.dir;					/* Pointer to the entry */
    2384:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2386:	58 a1       	ldd	r21, Y+32	; 0x20
			if (!dir) {
    2388:	41 15       	cp	r20, r1
    238a:	51 05       	cpc	r21, r1
    238c:	39 f4       	brne	.+14     	; 0x239c <f_chdir+0x58>
				dj.fs->cdir = 0;			/* No entry (root dir) */
    238e:	ed 85       	ldd	r30, Y+13	; 0x0d
    2390:	fe 85       	ldd	r31, Y+14	; 0x0e
    2392:	16 8a       	std	Z+22, r1	; 0x16
    2394:	17 8a       	std	Z+23, r1	; 0x17
    2396:	10 8e       	std	Z+24, r1	; 0x18
    2398:	11 8e       	std	Z+25, r1	; 0x19
    239a:	25 c0       	rjmp	.+74     	; 0x23e6 <f_chdir+0xa2>
			} else {
				if (dir[DIR_Attr] & AM_DIR)	/* Reached to the dir */
    239c:	da 01       	movw	r26, r20
    239e:	1b 96       	adiw	r26, 0x0b	; 11
    23a0:	8c 91       	ld	r24, X
    23a2:	1b 97       	sbiw	r26, 0x0b	; 11
    23a4:	84 ff       	sbrs	r24, 4
    23a6:	1d c0       	rjmp	.+58     	; 0x23e2 <f_chdir+0x9e>
					dj.fs->cdir = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    23a8:	0d 85       	ldd	r16, Y+13	; 0x0d
    23aa:	1e 85       	ldd	r17, Y+14	; 0x0e
    23ac:	54 96       	adiw	r26, 0x14	; 20
    23ae:	8d 91       	ld	r24, X+
    23b0:	9c 91       	ld	r25, X
    23b2:	55 97       	sbiw	r26, 0x15	; 21
    23b4:	a0 e0       	ldi	r26, 0x00	; 0
    23b6:	b0 e0       	ldi	r27, 0x00	; 0
    23b8:	dc 01       	movw	r26, r24
    23ba:	99 27       	eor	r25, r25
    23bc:	88 27       	eor	r24, r24
    23be:	fa 01       	movw	r30, r20
    23c0:	42 8d       	ldd	r20, Z+26	; 0x1a
    23c2:	53 8d       	ldd	r21, Z+27	; 0x1b
    23c4:	60 e0       	ldi	r22, 0x00	; 0
    23c6:	70 e0       	ldi	r23, 0x00	; 0
    23c8:	84 2b       	or	r24, r20
    23ca:	95 2b       	or	r25, r21
    23cc:	a6 2b       	or	r26, r22
    23ce:	b7 2b       	or	r27, r23
    23d0:	f8 01       	movw	r30, r16
    23d2:	86 8b       	std	Z+22, r24	; 0x16
    23d4:	97 8b       	std	Z+23, r25	; 0x17
    23d6:	a0 8f       	std	Z+24, r26	; 0x18
    23d8:	b1 8f       	std	Z+25, r27	; 0x19
    23da:	05 c0       	rjmp	.+10     	; 0x23e6 <f_chdir+0xa2>
				else
					res = FR_NO_PATH;		/* Could not reach the dir (it is a file) */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    23dc:	84 30       	cpi	r24, 0x04	; 4
    23de:	91 05       	cpc	r25, r1
    23e0:	11 f4       	brne	.+4      	; 0x23e6 <f_chdir+0xa2>
    23e2:	25 e0       	ldi	r18, 0x05	; 5
    23e4:	30 e0       	ldi	r19, 0x00	; 0
	}

	LEAVE_FF(dj.fs, res);
}
    23e6:	c9 01       	movw	r24, r18
    23e8:	a4 96       	adiw	r28, 0x24	; 36
    23ea:	e4 e0       	ldi	r30, 0x04	; 4
    23ec:	0c 94 2e 2d 	jmp	0x5a5c	; 0x5a5c <__epilogue_restores__+0x1c>

000023f0 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    23f0:	a6 e0       	ldi	r26, 0x06	; 6
    23f2:	b0 e0       	ldi	r27, 0x00	; 0
    23f4:	ee ef       	ldi	r30, 0xFE	; 254
    23f6:	f1 e1       	ldi	r31, 0x11	; 17
    23f8:	0c 94 04 2d 	jmp	0x5a08	; 0x5a08 <__prologue_saves__>
    23fc:	9e 83       	std	Y+6, r25	; 0x06
    23fe:	8d 83       	std	Y+5, r24	; 0x05
    2400:	7a 01       	movw	r14, r20
    2402:	8b 01       	movw	r16, r22
	FRESULT res;
	DWORD clst, bcs, nsect, ifptr;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    2404:	dc 01       	movw	r26, r24
    2406:	12 96       	adiw	r26, 0x02	; 2
    2408:	6d 91       	ld	r22, X+
    240a:	7c 91       	ld	r23, X
    240c:	13 97       	sbiw	r26, 0x03	; 3
    240e:	8d 91       	ld	r24, X+
    2410:	9c 91       	ld	r25, X
    2412:	0e 94 03 04 	call	0x806	; 0x806 <validate>
    2416:	4c 01       	movw	r8, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2418:	00 97       	sbiw	r24, 0x00	; 0
    241a:	09 f0       	breq	.+2      	; 0x241e <f_lseek+0x2e>
    241c:	95 c1       	rjmp	.+810    	; 0x2748 <f_lseek+0x358>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    241e:	ed 81       	ldd	r30, Y+5	; 0x05
    2420:	fe 81       	ldd	r31, Y+6	; 0x06
    2422:	24 81       	ldd	r18, Z+4	; 0x04
    2424:	27 fd       	sbrc	r18, 7
    2426:	8d c1       	rjmp	.+794    	; 0x2742 <f_lseek+0x352>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    2428:	82 85       	ldd	r24, Z+10	; 0x0a
    242a:	93 85       	ldd	r25, Z+11	; 0x0b
    242c:	a4 85       	ldd	r26, Z+12	; 0x0c
    242e:	b5 85       	ldd	r27, Z+13	; 0x0d
    2430:	8e 15       	cp	r24, r14
    2432:	9f 05       	cpc	r25, r15
    2434:	a0 07       	cpc	r26, r16
    2436:	b1 07       	cpc	r27, r17
    2438:	20 f4       	brcc	.+8      	; 0x2442 <f_lseek+0x52>
#if !_FS_READONLY
		 && !(fp->flag & FA_WRITE)
    243a:	21 fd       	sbrc	r18, 1
    243c:	02 c0       	rjmp	.+4      	; 0x2442 <f_lseek+0x52>
    243e:	7c 01       	movw	r14, r24
    2440:	8d 01       	movw	r16, r26
#endif
		) ofs = fp->fsize;

	ifptr = fp->fptr;
    2442:	ed 81       	ldd	r30, Y+5	; 0x05
    2444:	fe 81       	ldd	r31, Y+6	; 0x06
    2446:	86 81       	ldd	r24, Z+6	; 0x06
    2448:	97 81       	ldd	r25, Z+7	; 0x07
    244a:	a0 85       	ldd	r26, Z+8	; 0x08
    244c:	b1 85       	ldd	r27, Z+9	; 0x09
	fp->fptr = nsect = 0; fp->csect = 255;
    244e:	16 82       	std	Z+6, r1	; 0x06
    2450:	17 82       	std	Z+7, r1	; 0x07
    2452:	10 86       	std	Z+8, r1	; 0x08
    2454:	11 86       	std	Z+9, r1	; 0x09
    2456:	2f ef       	ldi	r18, 0xFF	; 255
    2458:	25 83       	std	Z+5, r18	; 0x05
	if (ofs > 0) {
    245a:	e1 14       	cp	r14, r1
    245c:	f1 04       	cpc	r15, r1
    245e:	01 05       	cpc	r16, r1
    2460:	11 05       	cpc	r17, r1
    2462:	09 f4       	brne	.+2      	; 0x2466 <f_lseek+0x76>
    2464:	36 c1       	rjmp	.+620    	; 0x26d2 <f_lseek+0x2e2>
		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    2466:	20 80       	ld	r2, Z
    2468:	31 80       	ldd	r3, Z+1	; 0x01
    246a:	f1 01       	movw	r30, r2
    246c:	a2 80       	ldd	r10, Z+2	; 0x02
    246e:	bb 24       	eor	r11, r11
    2470:	cc 24       	eor	r12, r12
    2472:	dd 24       	eor	r13, r13
    2474:	49 e0       	ldi	r20, 0x09	; 9
    2476:	aa 0c       	add	r10, r10
    2478:	bb 1c       	adc	r11, r11
    247a:	cc 1c       	adc	r12, r12
    247c:	dd 1c       	adc	r13, r13
    247e:	4a 95       	dec	r20
    2480:	d1 f7       	brne	.-12     	; 0x2476 <f_lseek+0x86>
		if (ifptr > 0 &&
    2482:	00 97       	sbiw	r24, 0x00	; 0
    2484:	a1 05       	cpc	r26, r1
    2486:	b1 05       	cpc	r27, r1
    2488:	f1 f1       	breq	.+124    	; 0x2506 <f_lseek+0x116>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    248a:	2c 01       	movw	r4, r24
    248c:	3d 01       	movw	r6, r26
    248e:	08 94       	sec
    2490:	41 08       	sbc	r4, r1
    2492:	51 08       	sbc	r5, r1
    2494:	61 08       	sbc	r6, r1
    2496:	71 08       	sbc	r7, r1
    2498:	c8 01       	movw	r24, r16
    249a:	b7 01       	movw	r22, r14
    249c:	61 50       	subi	r22, 0x01	; 1
    249e:	70 40       	sbci	r23, 0x00	; 0
    24a0:	80 40       	sbci	r24, 0x00	; 0
    24a2:	90 40       	sbci	r25, 0x00	; 0
    24a4:	a6 01       	movw	r20, r12
    24a6:	95 01       	movw	r18, r10
    24a8:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <__udivmodsi4>
    24ac:	29 83       	std	Y+1, r18	; 0x01
    24ae:	3a 83       	std	Y+2, r19	; 0x02
    24b0:	4b 83       	std	Y+3, r20	; 0x03
    24b2:	5c 83       	std	Y+4, r21	; 0x04
    24b4:	c3 01       	movw	r24, r6
    24b6:	b2 01       	movw	r22, r4
    24b8:	a6 01       	movw	r20, r12
    24ba:	95 01       	movw	r18, r10
    24bc:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <__udivmodsi4>

	ifptr = fp->fptr;
	fp->fptr = nsect = 0; fp->csect = 255;
	if (ofs > 0) {
		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
		if (ifptr > 0 &&
    24c0:	89 81       	ldd	r24, Y+1	; 0x01
    24c2:	9a 81       	ldd	r25, Y+2	; 0x02
    24c4:	ab 81       	ldd	r26, Y+3	; 0x03
    24c6:	bc 81       	ldd	r27, Y+4	; 0x04
    24c8:	82 17       	cp	r24, r18
    24ca:	93 07       	cpc	r25, r19
    24cc:	a4 07       	cpc	r26, r20
    24ce:	b5 07       	cpc	r27, r21
    24d0:	d0 f0       	brcs	.+52     	; 0x2506 <f_lseek+0x116>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    24d2:	88 27       	eor	r24, r24
    24d4:	99 27       	eor	r25, r25
    24d6:	dc 01       	movw	r26, r24
    24d8:	8a 19       	sub	r24, r10
    24da:	9b 09       	sbc	r25, r11
    24dc:	ac 09       	sbc	r26, r12
    24de:	bd 09       	sbc	r27, r13
    24e0:	84 21       	and	r24, r4
    24e2:	95 21       	and	r25, r5
    24e4:	a6 21       	and	r26, r6
    24e6:	b7 21       	and	r27, r7
    24e8:	ed 81       	ldd	r30, Y+5	; 0x05
    24ea:	fe 81       	ldd	r31, Y+6	; 0x06
    24ec:	86 83       	std	Z+6, r24	; 0x06
    24ee:	97 83       	std	Z+7, r25	; 0x07
    24f0:	a0 87       	std	Z+8, r26	; 0x08
    24f2:	b1 87       	std	Z+9, r27	; 0x09
			ofs -= fp->fptr;
    24f4:	e8 1a       	sub	r14, r24
    24f6:	f9 0a       	sbc	r15, r25
    24f8:	0a 0b       	sbc	r16, r26
    24fa:	1b 0b       	sbc	r17, r27
			clst = fp->curr_clust;
    24fc:	42 89       	ldd	r20, Z+18	; 0x12
    24fe:	53 89       	ldd	r21, Z+19	; 0x13
    2500:	64 89       	ldd	r22, Z+20	; 0x14
    2502:	75 89       	ldd	r23, Z+21	; 0x15
    2504:	36 c0       	rjmp	.+108    	; 0x2572 <f_lseek+0x182>
		} else {									/* When seek to back cluster, */
			clst = fp->org_clust;					/* start from the first cluster */
    2506:	ad 81       	ldd	r26, Y+5	; 0x05
    2508:	be 81       	ldd	r27, Y+6	; 0x06
    250a:	1e 96       	adiw	r26, 0x0e	; 14
    250c:	4d 91       	ld	r20, X+
    250e:	5d 91       	ld	r21, X+
    2510:	6d 91       	ld	r22, X+
    2512:	7c 91       	ld	r23, X
    2514:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
			if (clst == 0) {						/* If no cluster chain, create a new chain */
    2516:	41 15       	cp	r20, r1
    2518:	51 05       	cpc	r21, r1
    251a:	61 05       	cpc	r22, r1
    251c:	71 05       	cpc	r23, r1
    251e:	09 f5       	brne	.+66     	; 0x2562 <f_lseek+0x172>
				clst = create_chain(fp->fs, 0);
    2520:	c1 01       	movw	r24, r2
    2522:	40 e0       	ldi	r20, 0x00	; 0
    2524:	50 e0       	ldi	r21, 0x00	; 0
    2526:	ba 01       	movw	r22, r20
    2528:	0e 94 49 06 	call	0xc92	; 0xc92 <create_chain>
    252c:	ab 01       	movw	r20, r22
    252e:	bc 01       	movw	r22, r24
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    2530:	41 30       	cpi	r20, 0x01	; 1
    2532:	51 05       	cpc	r21, r1
    2534:	61 05       	cpc	r22, r1
    2536:	71 05       	cpc	r23, r1
    2538:	19 f4       	brne	.+6      	; 0x2540 <f_lseek+0x150>
    253a:	ed 81       	ldd	r30, Y+5	; 0x05
    253c:	fe 81       	ldd	r31, Y+6	; 0x06
    253e:	60 c0       	rjmp	.+192    	; 0x2600 <f_lseek+0x210>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2540:	4f 3f       	cpi	r20, 0xFF	; 255
    2542:	ff ef       	ldi	r31, 0xFF	; 255
    2544:	5f 07       	cpc	r21, r31
    2546:	ff ef       	ldi	r31, 0xFF	; 255
    2548:	6f 07       	cpc	r22, r31
    254a:	ff ef       	ldi	r31, 0xFF	; 255
    254c:	7f 07       	cpc	r23, r31
    254e:	19 f4       	brne	.+6      	; 0x2556 <f_lseek+0x166>
    2550:	ad 81       	ldd	r26, Y+5	; 0x05
    2552:	be 81       	ldd	r27, Y+6	; 0x06
    2554:	36 c0       	rjmp	.+108    	; 0x25c2 <f_lseek+0x1d2>
				fp->org_clust = clst;
    2556:	ed 81       	ldd	r30, Y+5	; 0x05
    2558:	fe 81       	ldd	r31, Y+6	; 0x06
    255a:	46 87       	std	Z+14, r20	; 0x0e
    255c:	57 87       	std	Z+15, r21	; 0x0f
    255e:	60 8b       	std	Z+16, r22	; 0x10
    2560:	71 8b       	std	Z+17, r23	; 0x11
			}
#endif
			fp->curr_clust = clst;
    2562:	ad 81       	ldd	r26, Y+5	; 0x05
    2564:	be 81       	ldd	r27, Y+6	; 0x06
    2566:	52 96       	adiw	r26, 0x12	; 18
    2568:	4d 93       	st	X+, r20
    256a:	5d 93       	st	X+, r21
    256c:	6d 93       	st	X+, r22
    256e:	7c 93       	st	X, r23
    2570:	55 97       	sbiw	r26, 0x15	; 21
		}
		if (clst != 0) {
    2572:	41 15       	cp	r20, r1
    2574:	51 05       	cpc	r21, r1
    2576:	61 05       	cpc	r22, r1
    2578:	71 05       	cpc	r23, r1
    257a:	09 f4       	brne	.+2      	; 0x257e <f_lseek+0x18e>
    257c:	aa c0       	rjmp	.+340    	; 0x26d2 <f_lseek+0x2e2>
    257e:	4d 80       	ldd	r4, Y+5	; 0x05
    2580:	5e 80       	ldd	r5, Y+6	; 0x06
    2582:	5c c0       	rjmp	.+184    	; 0x263c <f_lseek+0x24c>
			while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    2584:	f2 01       	movw	r30, r4
    2586:	24 81       	ldd	r18, Z+4	; 0x04
    2588:	80 81       	ld	r24, Z
    258a:	91 81       	ldd	r25, Z+1	; 0x01
    258c:	21 ff       	sbrs	r18, 1
    258e:	0a c0       	rjmp	.+20     	; 0x25a4 <f_lseek+0x1b4>
					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
    2590:	0e 94 49 06 	call	0xc92	; 0xc92 <create_chain>
    2594:	ab 01       	movw	r20, r22
    2596:	bc 01       	movw	r22, r24
					if (clst == 0) {				/* When disk gets full, clip file size */
    2598:	41 15       	cp	r20, r1
    259a:	51 05       	cpc	r21, r1
    259c:	61 05       	cpc	r22, r1
    259e:	71 05       	cpc	r23, r1
    25a0:	29 f4       	brne	.+10     	; 0x25ac <f_lseek+0x1bc>
    25a2:	55 c0       	rjmp	.+170    	; 0x264e <f_lseek+0x25e>
						ofs = bcs; break;
					}
				} else
#endif
					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    25a4:	0e 94 cd 04 	call	0x99a	; 0x99a <get_fat>
    25a8:	ab 01       	movw	r20, r22
    25aa:	bc 01       	movw	r22, r24
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    25ac:	4f 3f       	cpi	r20, 0xFF	; 255
    25ae:	ff ef       	ldi	r31, 0xFF	; 255
    25b0:	5f 07       	cpc	r21, r31
    25b2:	ff ef       	ldi	r31, 0xFF	; 255
    25b4:	6f 07       	cpc	r22, r31
    25b6:	ff ef       	ldi	r31, 0xFF	; 255
    25b8:	7f 07       	cpc	r23, r31
    25ba:	71 f4       	brne	.+28     	; 0x25d8 <f_lseek+0x1e8>
    25bc:	5e 82       	std	Y+6, r5	; 0x06
    25be:	4d 82       	std	Y+5, r4	; 0x05
    25c0:	d2 01       	movw	r26, r4
    25c2:	14 96       	adiw	r26, 0x04	; 4
    25c4:	8c 91       	ld	r24, X
    25c6:	14 97       	sbiw	r26, 0x04	; 4
    25c8:	80 68       	ori	r24, 0x80	; 128
    25ca:	14 96       	adiw	r26, 0x04	; 4
    25cc:	8c 93       	st	X, r24
    25ce:	14 97       	sbiw	r26, 0x04	; 4
    25d0:	31 e0       	ldi	r19, 0x01	; 1
    25d2:	83 2e       	mov	r8, r19
    25d4:	91 2c       	mov	r9, r1
    25d6:	b8 c0       	rjmp	.+368    	; 0x2748 <f_lseek+0x358>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
    25d8:	42 30       	cpi	r20, 0x02	; 2
    25da:	51 05       	cpc	r21, r1
    25dc:	61 05       	cpc	r22, r1
    25de:	71 05       	cpc	r23, r1
    25e0:	60 f0       	brcs	.+24     	; 0x25fa <f_lseek+0x20a>
    25e2:	d2 01       	movw	r26, r4
    25e4:	ed 91       	ld	r30, X+
    25e6:	fc 91       	ld	r31, X
    25e8:	86 8d       	ldd	r24, Z+30	; 0x1e
    25ea:	97 8d       	ldd	r25, Z+31	; 0x1f
    25ec:	a0 a1       	ldd	r26, Z+32	; 0x20
    25ee:	b1 a1       	ldd	r27, Z+33	; 0x21
    25f0:	48 17       	cp	r20, r24
    25f2:	59 07       	cpc	r21, r25
    25f4:	6a 07       	cpc	r22, r26
    25f6:	7b 07       	cpc	r23, r27
    25f8:	38 f0       	brcs	.+14     	; 0x2608 <f_lseek+0x218>
    25fa:	5e 82       	std	Y+6, r5	; 0x06
    25fc:	4d 82       	std	Y+5, r4	; 0x05
    25fe:	f2 01       	movw	r30, r4
    2600:	84 81       	ldd	r24, Z+4	; 0x04
    2602:	80 68       	ori	r24, 0x80	; 128
    2604:	84 83       	std	Z+4, r24	; 0x04
    2606:	9d c0       	rjmp	.+314    	; 0x2742 <f_lseek+0x352>
				fp->curr_clust = clst;
    2608:	d2 01       	movw	r26, r4
    260a:	52 96       	adiw	r26, 0x12	; 18
    260c:	4d 93       	st	X+, r20
    260e:	5d 93       	st	X+, r21
    2610:	6d 93       	st	X+, r22
    2612:	7c 93       	st	X, r23
    2614:	55 97       	sbiw	r26, 0x15	; 21
				fp->fptr += bcs;
    2616:	16 96       	adiw	r26, 0x06	; 6
    2618:	8d 91       	ld	r24, X+
    261a:	9d 91       	ld	r25, X+
    261c:	0d 90       	ld	r0, X+
    261e:	bc 91       	ld	r27, X
    2620:	a0 2d       	mov	r26, r0
    2622:	8a 0d       	add	r24, r10
    2624:	9b 1d       	adc	r25, r11
    2626:	ac 1d       	adc	r26, r12
    2628:	bd 1d       	adc	r27, r13
    262a:	f2 01       	movw	r30, r4
    262c:	86 83       	std	Z+6, r24	; 0x06
    262e:	97 83       	std	Z+7, r25	; 0x07
    2630:	a0 87       	std	Z+8, r26	; 0x08
    2632:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= bcs;
    2634:	ea 18       	sub	r14, r10
    2636:	fb 08       	sbc	r15, r11
    2638:	0c 09       	sbc	r16, r12
    263a:	1d 09       	sbc	r17, r13
			}
#endif
			fp->curr_clust = clst;
		}
		if (clst != 0) {
			while (ofs > bcs) {						/* Cluster following loop */
    263c:	ae 14       	cp	r10, r14
    263e:	bf 04       	cpc	r11, r15
    2640:	c0 06       	cpc	r12, r16
    2642:	d1 06       	cpc	r13, r17
    2644:	08 f4       	brcc	.+2      	; 0x2648 <f_lseek+0x258>
    2646:	9e cf       	rjmp	.-196    	; 0x2584 <f_lseek+0x194>
    2648:	5e 82       	std	Y+6, r5	; 0x06
    264a:	4d 82       	std	Y+5, r4	; 0x05
    264c:	04 c0       	rjmp	.+8      	; 0x2656 <f_lseek+0x266>
    264e:	5e 82       	std	Y+6, r5	; 0x06
    2650:	4d 82       	std	Y+5, r4	; 0x05
#if !_FS_READONLY
				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
					if (clst == 0) {				/* When disk gets full, clip file size */
    2652:	86 01       	movw	r16, r12
    2654:	75 01       	movw	r14, r10
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
				fp->curr_clust = clst;
				fp->fptr += bcs;
				ofs -= bcs;
			}
			fp->fptr += ofs;
    2656:	ed 81       	ldd	r30, Y+5	; 0x05
    2658:	fe 81       	ldd	r31, Y+6	; 0x06
    265a:	86 81       	ldd	r24, Z+6	; 0x06
    265c:	97 81       	ldd	r25, Z+7	; 0x07
    265e:	a0 85       	ldd	r26, Z+8	; 0x08
    2660:	b1 85       	ldd	r27, Z+9	; 0x09
    2662:	8e 0d       	add	r24, r14
    2664:	9f 1d       	adc	r25, r15
    2666:	a0 1f       	adc	r26, r16
    2668:	b1 1f       	adc	r27, r17
    266a:	86 83       	std	Z+6, r24	; 0x06
    266c:	97 83       	std	Z+7, r25	; 0x07
    266e:	a0 87       	std	Z+8, r26	; 0x08
    2670:	b1 87       	std	Z+9, r27	; 0x09
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
    2672:	d8 01       	movw	r26, r16
    2674:	c7 01       	movw	r24, r14
    2676:	29 e0       	ldi	r18, 0x09	; 9
    2678:	b6 95       	lsr	r27
    267a:	a7 95       	ror	r26
    267c:	97 95       	ror	r25
    267e:	87 95       	ror	r24
    2680:	2a 95       	dec	r18
    2682:	d1 f7       	brne	.-12     	; 0x2678 <f_lseek+0x288>
    2684:	a8 2e       	mov	r10, r24
    2686:	85 83       	std	Z+5, r24	; 0x05
			if (ofs % SS(fp->fs)) {
    2688:	d8 01       	movw	r26, r16
    268a:	c7 01       	movw	r24, r14
    268c:	91 70       	andi	r25, 0x01	; 1
    268e:	a0 70       	andi	r26, 0x00	; 0
    2690:	b0 70       	andi	r27, 0x00	; 0
    2692:	00 97       	sbiw	r24, 0x00	; 0
    2694:	a1 05       	cpc	r26, r1
    2696:	b1 05       	cpc	r27, r1
    2698:	e1 f0       	breq	.+56     	; 0x26d2 <f_lseek+0x2e2>
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
    269a:	80 81       	ld	r24, Z
    269c:	91 81       	ldd	r25, Z+1	; 0x01
    269e:	0e 94 1a 07 	call	0xe34	; 0xe34 <clust2sect>
				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    26a2:	61 15       	cp	r22, r1
    26a4:	71 05       	cpc	r23, r1
    26a6:	81 05       	cpc	r24, r1
    26a8:	91 05       	cpc	r25, r1
    26aa:	51 f4       	brne	.+20     	; 0x26c0 <f_lseek+0x2d0>
    26ac:	ad 81       	ldd	r26, Y+5	; 0x05
    26ae:	be 81       	ldd	r27, Y+6	; 0x06
    26b0:	14 96       	adiw	r26, 0x04	; 4
    26b2:	8c 91       	ld	r24, X
    26b4:	14 97       	sbiw	r26, 0x04	; 4
    26b6:	80 68       	ori	r24, 0x80	; 128
    26b8:	14 96       	adiw	r26, 0x04	; 4
    26ba:	8c 93       	st	X, r24
    26bc:	14 97       	sbiw	r26, 0x04	; 4
    26be:	41 c0       	rjmp	.+130    	; 0x2742 <f_lseek+0x352>
				nsect += fp->csect;
    26c0:	6a 0d       	add	r22, r10
    26c2:	71 1d       	adc	r23, r1
    26c4:	81 1d       	adc	r24, r1
    26c6:	91 1d       	adc	r25, r1
				fp->csect++;
    26c8:	a3 94       	inc	r10
    26ca:	ed 81       	ldd	r30, Y+5	; 0x05
    26cc:	fe 81       	ldd	r31, Y+6	; 0x06
    26ce:	a5 82       	std	Z+5, r10	; 0x05
    26d0:	03 c0       	rjmp	.+6      	; 0x26d8 <f_lseek+0x2e8>
		 && !(fp->flag & FA_WRITE)
#endif
		) ofs = fp->fsize;

	ifptr = fp->fptr;
	fp->fptr = nsect = 0; fp->csect = 255;
    26d2:	60 e0       	ldi	r22, 0x00	; 0
    26d4:	70 e0       	ldi	r23, 0x00	; 0
    26d6:	cb 01       	movw	r24, r22
				nsect += fp->csect;
				fp->csect++;
			}
		}
	}
	if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
    26d8:	ad 81       	ldd	r26, Y+5	; 0x05
    26da:	be 81       	ldd	r27, Y+6	; 0x06
    26dc:	16 96       	adiw	r26, 0x06	; 6
    26de:	ed 90       	ld	r14, X+
    26e0:	fd 90       	ld	r15, X+
    26e2:	0d 91       	ld	r16, X+
    26e4:	1c 91       	ld	r17, X
    26e6:	19 97       	sbiw	r26, 0x09	; 9
    26e8:	a8 01       	movw	r20, r16
    26ea:	97 01       	movw	r18, r14
    26ec:	31 70       	andi	r19, 0x01	; 1
    26ee:	40 70       	andi	r20, 0x00	; 0
    26f0:	50 70       	andi	r21, 0x00	; 0
    26f2:	21 15       	cp	r18, r1
    26f4:	31 05       	cpc	r19, r1
    26f6:	41 05       	cpc	r20, r1
    26f8:	51 05       	cpc	r21, r1
    26fa:	81 f0       	breq	.+32     	; 0x271c <f_lseek+0x32c>
    26fc:	56 96       	adiw	r26, 0x16	; 22
    26fe:	2d 91       	ld	r18, X+
    2700:	3d 91       	ld	r19, X+
    2702:	4d 91       	ld	r20, X+
    2704:	5c 91       	ld	r21, X
    2706:	59 97       	sbiw	r26, 0x19	; 25
    2708:	62 17       	cp	r22, r18
    270a:	73 07       	cpc	r23, r19
    270c:	84 07       	cpc	r24, r20
    270e:	95 07       	cpc	r25, r21
    2710:	29 f0       	breq	.+10     	; 0x271c <f_lseek+0x32c>
		}
#endif
		if (disk_read(fp->fs->drive, fp->buf, nsect, 1) != RES_OK)
			ABORT(fp->fs, FR_DISK_ERR);
#endif
		fp->dsect = nsect;
    2712:	fd 01       	movw	r30, r26
    2714:	66 8b       	std	Z+22, r22	; 0x16
    2716:	77 8b       	std	Z+23, r23	; 0x17
    2718:	80 8f       	std	Z+24, r24	; 0x18
    271a:	91 8f       	std	Z+25, r25	; 0x19
	}
#if !_FS_READONLY
	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
    271c:	ed 81       	ldd	r30, Y+5	; 0x05
    271e:	fe 81       	ldd	r31, Y+6	; 0x06
    2720:	82 85       	ldd	r24, Z+10	; 0x0a
    2722:	93 85       	ldd	r25, Z+11	; 0x0b
    2724:	a4 85       	ldd	r26, Z+12	; 0x0c
    2726:	b5 85       	ldd	r27, Z+13	; 0x0d
    2728:	8e 15       	cp	r24, r14
    272a:	9f 05       	cpc	r25, r15
    272c:	a0 07       	cpc	r26, r16
    272e:	b1 07       	cpc	r27, r17
    2730:	58 f4       	brcc	.+22     	; 0x2748 <f_lseek+0x358>
		fp->fsize = fp->fptr;
    2732:	e2 86       	std	Z+10, r14	; 0x0a
    2734:	f3 86       	std	Z+11, r15	; 0x0b
    2736:	04 87       	std	Z+12, r16	; 0x0c
    2738:	15 87       	std	Z+13, r17	; 0x0d
		fp->flag |= FA__WRITTEN;
    273a:	84 81       	ldd	r24, Z+4	; 0x04
    273c:	80 62       	ori	r24, 0x20	; 32
    273e:	84 83       	std	Z+4, r24	; 0x04
    2740:	03 c0       	rjmp	.+6      	; 0x2748 <f_lseek+0x358>


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)			/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    2742:	72 e0       	ldi	r23, 0x02	; 2
    2744:	87 2e       	mov	r8, r23
    2746:	91 2c       	mov	r9, r1
		fp->flag |= FA__WRITTEN;
	}
#endif

	LEAVE_FF(fp->fs, res);
}
    2748:	c4 01       	movw	r24, r8
    274a:	26 96       	adiw	r28, 0x06	; 6
    274c:	e2 e1       	ldi	r30, 0x12	; 18
    274e:	0c 94 20 2d 	jmp	0x5a40	; 0x5a40 <__epilogue_restores__>

00002752 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const XCHAR *path	/* Pointer to the directory path */
)
{
    2752:	ae e0       	ldi	r26, 0x0E	; 14
    2754:	b0 e0       	ldi	r27, 0x00	; 0
    2756:	ef ea       	ldi	r30, 0xAF	; 175
    2758:	f3 e1       	ldi	r31, 0x13	; 19
    275a:	0c 94 12 2d 	jmp	0x5a24	; 0x5a24 <__prologue_saves__+0x1c>
    275e:	8c 01       	movw	r16, r24
    2760:	7e 87       	std	Y+14, r23	; 0x0e
    2762:	6d 87       	std	Y+13, r22	; 0x0d
	FRESULT res;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj->fs, 0);
    2764:	ce 01       	movw	r24, r28
    2766:	0d 96       	adiw	r24, 0x0d	; 13
    2768:	b8 01       	movw	r22, r16
    276a:	40 e0       	ldi	r20, 0x00	; 0
    276c:	0e 94 38 0a 	call	0x1470	; 0x1470 <chk_mounted>
    2770:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    2772:	00 97       	sbiw	r24, 0x00	; 0
    2774:	09 f0       	breq	.+2      	; 0x2778 <f_opendir+0x26>
    2776:	40 c0       	rjmp	.+128    	; 0x27f8 <f_opendir+0xa6>
		INITBUF((*dj), sfn, lfn);
    2778:	ce 01       	movw	r24, r28
    277a:	01 96       	adiw	r24, 0x01	; 1
    277c:	d8 01       	movw	r26, r16
    277e:	55 96       	adiw	r26, 0x15	; 21
    2780:	9c 93       	st	X, r25
    2782:	8e 93       	st	-X, r24
    2784:	54 97       	sbiw	r26, 0x14	; 20
		res = follow_path(dj, path);			/* Follow the path to the directory */
    2786:	6d 85       	ldd	r22, Y+13	; 0x0d
    2788:	7e 85       	ldd	r23, Y+14	; 0x0e
    278a:	c8 01       	movw	r24, r16
    278c:	0e 94 db 08 	call	0x11b6	; 0x11b6 <follow_path>
    2790:	9c 01       	movw	r18, r24
		if (res == FR_OK) {						/* Follow completed */
    2792:	00 97       	sbiw	r24, 0x00	; 0
    2794:	61 f5       	brne	.+88     	; 0x27ee <f_opendir+0x9c>
			dir = dj->dir;
    2796:	d8 01       	movw	r26, r16
    2798:	52 96       	adiw	r26, 0x12	; 18
    279a:	ed 91       	ld	r30, X+
    279c:	fc 91       	ld	r31, X
    279e:	53 97       	sbiw	r26, 0x13	; 19
			if (dir) {							/* It is not the root dir */
    27a0:	30 97       	sbiw	r30, 0x00	; 0
    27a2:	b9 f0       	breq	.+46     	; 0x27d2 <f_opendir+0x80>
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    27a4:	83 85       	ldd	r24, Z+11	; 0x0b
    27a6:	84 ff       	sbrs	r24, 4
    27a8:	25 c0       	rjmp	.+74     	; 0x27f4 <f_opendir+0xa2>
					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    27aa:	84 89       	ldd	r24, Z+20	; 0x14
    27ac:	95 89       	ldd	r25, Z+21	; 0x15
    27ae:	a0 e0       	ldi	r26, 0x00	; 0
    27b0:	b0 e0       	ldi	r27, 0x00	; 0
    27b2:	dc 01       	movw	r26, r24
    27b4:	99 27       	eor	r25, r25
    27b6:	88 27       	eor	r24, r24
    27b8:	22 8d       	ldd	r18, Z+26	; 0x1a
    27ba:	33 8d       	ldd	r19, Z+27	; 0x1b
    27bc:	40 e0       	ldi	r20, 0x00	; 0
    27be:	50 e0       	ldi	r21, 0x00	; 0
    27c0:	82 2b       	or	r24, r18
    27c2:	93 2b       	or	r25, r19
    27c4:	a4 2b       	or	r26, r20
    27c6:	b5 2b       	or	r27, r21
    27c8:	f8 01       	movw	r30, r16
    27ca:	86 83       	std	Z+6, r24	; 0x06
    27cc:	97 83       	std	Z+7, r25	; 0x07
    27ce:	a0 87       	std	Z+8, r26	; 0x08
    27d0:	b1 87       	std	Z+9, r27	; 0x09
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
    27d2:	d8 01       	movw	r26, r16
    27d4:	ed 91       	ld	r30, X+
    27d6:	fc 91       	ld	r31, X
    27d8:	11 97       	sbiw	r26, 0x01	; 1
    27da:	86 81       	ldd	r24, Z+6	; 0x06
    27dc:	97 81       	ldd	r25, Z+7	; 0x07
    27de:	13 96       	adiw	r26, 0x03	; 3
    27e0:	9c 93       	st	X, r25
    27e2:	8e 93       	st	-X, r24
    27e4:	12 97       	sbiw	r26, 0x02	; 2
				res = dir_seek(dj, 0);			/* Rewind dir */
    27e6:	c8 01       	movw	r24, r16
    27e8:	0e 94 59 08 	call	0x10b2	; 0x10b2 <dir_seek.clone.1>
    27ec:	9c 01       	movw	r18, r24
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    27ee:	24 30       	cpi	r18, 0x04	; 4
    27f0:	31 05       	cpc	r19, r1
    27f2:	11 f4       	brne	.+4      	; 0x27f8 <f_opendir+0xa6>
    27f4:	25 e0       	ldi	r18, 0x05	; 5
    27f6:	30 e0       	ldi	r19, 0x00	; 0
	}

	LEAVE_FF(dj->fs, res);
}
    27f8:	c9 01       	movw	r24, r18
    27fa:	2e 96       	adiw	r28, 0x0e	; 14
    27fc:	e4 e0       	ldi	r30, 0x04	; 4
    27fe:	0c 94 2e 2d 	jmp	0x5a5c	; 0x5a5c <__epilogue_restores__+0x1c>

00002802 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    2802:	ac e0       	ldi	r26, 0x0C	; 12
    2804:	b0 e0       	ldi	r27, 0x00	; 0
    2806:	e7 e0       	ldi	r30, 0x07	; 7
    2808:	f4 e1       	ldi	r31, 0x14	; 20
    280a:	0c 94 0c 2d 	jmp	0x5a18	; 0x5a18 <__prologue_saves__+0x10>
    280e:	8c 01       	movw	r16, r24
    2810:	7b 01       	movw	r14, r22
	FRESULT res;
	NAMEBUF(sfn, lfn);


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    2812:	dc 01       	movw	r26, r24
    2814:	12 96       	adiw	r26, 0x02	; 2
    2816:	6d 91       	ld	r22, X+
    2818:	7c 91       	ld	r23, X
    281a:	13 97       	sbiw	r26, 0x03	; 3
    281c:	8d 91       	ld	r24, X+
    281e:	9c 91       	ld	r25, X
    2820:	0e 94 03 04 	call	0x806	; 0x806 <validate>
    2824:	6c 01       	movw	r12, r24
	if (res == FR_OK) {
    2826:	00 97       	sbiw	r24, 0x00	; 0
    2828:	09 f0       	breq	.+2      	; 0x282c <f_readdir+0x2a>
    282a:	ab c0       	rjmp	.+342    	; 0x2982 <f_readdir+0x180>
		INITBUF((*dj), sfn, lfn);
    282c:	ce 01       	movw	r24, r28
    282e:	01 96       	adiw	r24, 0x01	; 1
    2830:	f8 01       	movw	r30, r16
    2832:	95 8b       	std	Z+21, r25	; 0x15
    2834:	84 8b       	std	Z+20, r24	; 0x14
		if (!fno) {
    2836:	e1 14       	cp	r14, r1
    2838:	f1 04       	cpc	r15, r1
    283a:	09 f5       	brne	.+66     	; 0x287e <f_readdir+0x7c>
			res = dir_seek(dj, 0);
    283c:	c8 01       	movw	r24, r16
    283e:	0e 94 59 08 	call	0x10b2	; 0x10b2 <dir_seek.clone.1>
    2842:	9e c0       	rjmp	.+316    	; 0x2980 <f_readdir+0x17e>
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
    2844:	d8 01       	movw	r26, r16
    2846:	8d 91       	ld	r24, X+
    2848:	9c 91       	ld	r25, X
    284a:	0e 94 1d 04 	call	0x83a	; 0x83a <move_window>
		if (res != FR_OK) break;
    284e:	00 97       	sbiw	r24, 0x00	; 0
    2850:	21 f5       	brne	.+72     	; 0x289a <f_readdir+0x98>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    2852:	d8 01       	movw	r26, r16
    2854:	52 96       	adiw	r26, 0x12	; 18
    2856:	ed 91       	ld	r30, X+
    2858:	fc 91       	ld	r31, X
    285a:	53 97       	sbiw	r26, 0x13	; 19
		c = dir[DIR_Name];
    285c:	80 81       	ld	r24, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    285e:	88 23       	and	r24, r24
    2860:	09 f4       	brne	.+2      	; 0x2864 <f_readdir+0x62>
    2862:	94 c0       	rjmp	.+296    	; 0x298c <f_readdir+0x18a>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    2864:	85 3e       	cpi	r24, 0xE5	; 229
    2866:	19 f0       	breq	.+6      	; 0x286e <f_readdir+0x6c>
    2868:	83 85       	ldd	r24, Z+11	; 0x0b
    286a:	83 ff       	sbrs	r24, 3
    286c:	21 c0       	rjmp	.+66     	; 0x28b0 <f_readdir+0xae>
			break;
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
    286e:	c8 01       	movw	r24, r16
    2870:	60 e0       	ldi	r22, 0x00	; 0
    2872:	70 e0       	ldi	r23, 0x00	; 0
    2874:	0e 94 49 07 	call	0xe92	; 0xe92 <dir_next>
		if (res != FR_OK) break;
    2878:	00 97       	sbiw	r24, 0x00	; 0
    287a:	19 f0       	breq	.+6      	; 0x2882 <f_readdir+0x80>
    287c:	0e c0       	rjmp	.+28     	; 0x289a <f_readdir+0x98>


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
	if (res == FR_OK) {
		INITBUF((*dj), sfn, lfn);
		if (!fno) {
    287e:	84 e0       	ldi	r24, 0x04	; 4
    2880:	90 e0       	ldi	r25, 0x00	; 0
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
    2882:	f8 01       	movw	r30, r16
    2884:	46 85       	ldd	r20, Z+14	; 0x0e
    2886:	57 85       	ldd	r21, Z+15	; 0x0f
    2888:	60 89       	ldd	r22, Z+16	; 0x10
    288a:	71 89       	ldd	r23, Z+17	; 0x11
    288c:	41 15       	cp	r20, r1
    288e:	51 05       	cpc	r21, r1
    2890:	61 05       	cpc	r22, r1
    2892:	71 05       	cpc	r23, r1
    2894:	b9 f6       	brne	.-82     	; 0x2844 <f_readdir+0x42>
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    2896:	00 97       	sbiw	r24, 0x00	; 0
    2898:	59 f0       	breq	.+22     	; 0x28b0 <f_readdir+0xae>
    289a:	d8 01       	movw	r26, r16
    289c:	1e 96       	adiw	r26, 0x0e	; 14
    289e:	1d 92       	st	X+, r1
    28a0:	1d 92       	st	X+, r1
    28a2:	1d 92       	st	X+, r1
    28a4:	1c 92       	st	X, r1
    28a6:	51 97       	sbiw	r26, 0x11	; 17
		INITBUF((*dj), sfn, lfn);
		if (!fno) {
			res = dir_seek(dj, 0);
		} else {
			res = dir_read(dj);
			if (res == FR_NO_FILE) {
    28a8:	84 30       	cpi	r24, 0x04	; 4
    28aa:	91 05       	cpc	r25, r1
    28ac:	09 f0       	breq	.+2      	; 0x28b0 <f_readdir+0xae>
    28ae:	68 c0       	rjmp	.+208    	; 0x2980 <f_readdir+0x17e>
	int i;
	BYTE c, nt, *dir;
	char *p;


	p = fno->fname;
    28b0:	97 01       	movw	r18, r14
    28b2:	27 5f       	subi	r18, 0xF7	; 247
    28b4:	3f 4f       	sbci	r19, 0xFF	; 255
	if (dj->sect) {
    28b6:	f8 01       	movw	r30, r16
    28b8:	86 85       	ldd	r24, Z+14	; 0x0e
    28ba:	97 85       	ldd	r25, Z+15	; 0x0f
    28bc:	a0 89       	ldd	r26, Z+16	; 0x10
    28be:	b1 89       	ldd	r27, Z+17	; 0x11
    28c0:	00 97       	sbiw	r24, 0x00	; 0
    28c2:	a1 05       	cpc	r26, r1
    28c4:	b1 05       	cpc	r27, r1
    28c6:	09 f4       	brne	.+2      	; 0x28ca <f_readdir+0xc8>
    28c8:	49 c0       	rjmp	.+146    	; 0x295c <f_readdir+0x15a>
		dir = dj->dir;
    28ca:	a2 88       	ldd	r10, Z+18	; 0x12
    28cc:	b3 88       	ldd	r11, Z+19	; 0x13
    28ce:	f5 01       	movw	r30, r10
    28d0:	c9 01       	movw	r24, r18
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
    28d2:	40 e0       	ldi	r20, 0x00	; 0
    28d4:	50 e0       	ldi	r21, 0x00	; 0
	char *p;


	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
    28d6:	9c 01       	movw	r18, r24
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
    28d8:	61 91       	ld	r22, Z+
			if (c == ' ') break;
    28da:	60 32       	cpi	r22, 0x20	; 32
    28dc:	61 f0       	breq	.+24     	; 0x28f6 <f_readdir+0xf4>
			if (c == 0x05) c = 0xE5;
    28de:	65 30       	cpi	r22, 0x05	; 5
    28e0:	09 f4       	brne	.+2      	; 0x28e4 <f_readdir+0xe2>
    28e2:	65 ee       	ldi	r22, 0xE5	; 229
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
    28e4:	dc 01       	movw	r26, r24
    28e6:	6d 93       	st	X+, r22
    28e8:	cd 01       	movw	r24, r26
    28ea:	9d 01       	movw	r18, r26

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
    28ec:	4f 5f       	subi	r20, 0xFF	; 255
    28ee:	5f 4f       	sbci	r21, 0xFF	; 255
    28f0:	48 30       	cpi	r20, 0x08	; 8
    28f2:	51 05       	cpc	r21, r1
    28f4:	81 f7       	brne	.-32     	; 0x28d6 <f_readdir+0xd4>
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
    28f6:	a5 01       	movw	r20, r10
    28f8:	48 5f       	subi	r20, 0xF8	; 248
    28fa:	5f 4f       	sbci	r21, 0xFF	; 255
    28fc:	f5 01       	movw	r30, r10
    28fe:	60 85       	ldd	r22, Z+8	; 0x08
    2900:	60 32       	cpi	r22, 0x20	; 32
    2902:	79 f0       	breq	.+30     	; 0x2922 <f_readdir+0x120>
			*p++ = '.';
    2904:	dc 01       	movw	r26, r24
    2906:	2e e2       	ldi	r18, 0x2E	; 46
    2908:	2d 93       	st	X+, r18

/*-----------------------------------------------------------------------*/
/* Read Directory Entry in Sequense                                      */
/*-----------------------------------------------------------------------*/

FRESULT f_readdir (
    290a:	04 96       	adiw	r24, 0x04	; 4
    290c:	9d 01       	movw	r18, r26
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
    290e:	fa 01       	movw	r30, r20
    2910:	61 91       	ld	r22, Z+
    2912:	af 01       	movw	r20, r30
				if (c == ' ') break;
    2914:	60 32       	cpi	r22, 0x20	; 32
    2916:	29 f0       	breq	.+10     	; 0x2922 <f_readdir+0x120>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
    2918:	6d 93       	st	X+, r22
    291a:	9d 01       	movw	r18, r26
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    291c:	a8 17       	cp	r26, r24
    291e:	b9 07       	cpc	r27, r25
    2920:	a9 f7       	brne	.-22     	; 0x290c <f_readdir+0x10a>
				if (c == ' ') break;
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    2922:	d5 01       	movw	r26, r10
    2924:	1b 96       	adiw	r26, 0x0b	; 11
    2926:	8c 91       	ld	r24, X
    2928:	1b 97       	sbiw	r26, 0x0b	; 11
    292a:	f7 01       	movw	r30, r14
    292c:	80 87       	std	Z+8, r24	; 0x08
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    292e:	5c 96       	adiw	r26, 0x1c	; 28
    2930:	8d 91       	ld	r24, X+
    2932:	9d 91       	ld	r25, X+
    2934:	0d 90       	ld	r0, X+
    2936:	bc 91       	ld	r27, X
    2938:	a0 2d       	mov	r26, r0
    293a:	80 83       	st	Z, r24
    293c:	91 83       	std	Z+1, r25	; 0x01
    293e:	a2 83       	std	Z+2, r26	; 0x02
    2940:	b3 83       	std	Z+3, r27	; 0x03
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    2942:	d5 01       	movw	r26, r10
    2944:	58 96       	adiw	r26, 0x18	; 24
    2946:	8d 91       	ld	r24, X+
    2948:	9c 91       	ld	r25, X
    294a:	59 97       	sbiw	r26, 0x19	; 25
    294c:	95 83       	std	Z+5, r25	; 0x05
    294e:	84 83       	std	Z+4, r24	; 0x04
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    2950:	56 96       	adiw	r26, 0x16	; 22
    2952:	8d 91       	ld	r24, X+
    2954:	9c 91       	ld	r25, X
    2956:	57 97       	sbiw	r26, 0x17	; 23
    2958:	97 83       	std	Z+7, r25	; 0x07
    295a:	86 83       	std	Z+6, r24	; 0x06
	}
	*p = 0;
    295c:	f9 01       	movw	r30, r18
    295e:	10 82       	st	Z, r1
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj, FALSE);	/* Increment index for next */
    2960:	c8 01       	movw	r24, r16
    2962:	60 e0       	ldi	r22, 0x00	; 0
    2964:	70 e0       	ldi	r23, 0x00	; 0
    2966:	0e 94 49 07 	call	0xe92	; 0xe92 <dir_next>
				if (res == FR_NO_FILE) {
    296a:	84 30       	cpi	r24, 0x04	; 4
    296c:	91 05       	cpc	r25, r1
    296e:	41 f4       	brne	.+16     	; 0x2980 <f_readdir+0x17e>
					dj->sect = 0;
    2970:	d8 01       	movw	r26, r16
    2972:	1e 96       	adiw	r26, 0x0e	; 14
    2974:	1d 92       	st	X+, r1
    2976:	1d 92       	st	X+, r1
    2978:	1d 92       	st	X+, r1
    297a:	1c 92       	st	X, r1
    297c:	51 97       	sbiw	r26, 0x11	; 17
    297e:	01 c0       	rjmp	.+2      	; 0x2982 <f_readdir+0x180>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj, FALSE);	/* Increment index for next */
				if (res == FR_NO_FILE) {
    2980:	6c 01       	movw	r12, r24
			}
		}
	}

	LEAVE_FF(dj->fs, res);
}
    2982:	c6 01       	movw	r24, r12
    2984:	2c 96       	adiw	r28, 0x0c	; 12
    2986:	ea e0       	ldi	r30, 0x0A	; 10
    2988:	0c 94 28 2d 	jmp	0x5a50	; 0x5a50 <__epilogue_restores__+0x10>
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    298c:	84 e0       	ldi	r24, 0x04	; 4
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	84 cf       	rjmp	.-248    	; 0x289a <f_readdir+0x98>

00002992 <rcvr_spi>:
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    2992:	8f ef       	ldi	r24, 0xFF	; 255
    2994:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2996:	0d b4       	in	r0, 0x2d	; 45
    2998:	07 fe       	sbrs	r0, 7
    299a:	fd cf       	rjmp	.-6      	; 0x2996 <rcvr_spi+0x4>
	return SPDR;
    299c:	8e b5       	in	r24, 0x2e	; 46
}
    299e:	08 95       	ret

000029a0 <wait_ready>:
BYTE wait_ready (void)
{
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
    29a0:	82 e3       	ldi	r24, 0x32	; 50
    29a2:	80 93 b2 03 	sts	0x03B2, r24
	rcvr_spi();
    29a6:	0e 94 c9 14 	call	0x2992	; 0x2992 <rcvr_spi>
	do
		res = rcvr_spi();
    29aa:	0e 94 c9 14 	call	0x2992	; 0x2992 <rcvr_spi>
	while ((res != 0xFF) && Timer2);
    29ae:	8f 3f       	cpi	r24, 0xFF	; 255
    29b0:	21 f0       	breq	.+8      	; 0x29ba <wait_ready+0x1a>
    29b2:	90 91 b2 03 	lds	r25, 0x03B2
    29b6:	99 23       	and	r25, r25
    29b8:	c1 f7       	brne	.-16     	; 0x29aa <wait_ready+0xa>

	return res;
}
    29ba:	08 95       	ret

000029bc <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    29bc:	28 9a       	sbi	0x05, 0	; 5
	rcvr_spi();
    29be:	0e 94 c9 14 	call	0x2992	; 0x2992 <rcvr_spi>
}
    29c2:	08 95       	ret

000029c4 <select>:
/*-----------------------------------------------------------------------*/

static
BOOL select (void)	/* TRUE:Successful, FALSE:Timeout */
{
	CS_LOW();
    29c4:	28 98       	cbi	0x05, 0	; 5
	if (wait_ready() != 0xFF) {
    29c6:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <wait_ready>
    29ca:	8f 3f       	cpi	r24, 0xFF	; 255
    29cc:	29 f0       	breq	.+10     	; 0x29d8 <select+0x14>
		deselect();
    29ce:	0e 94 de 14 	call	0x29bc	; 0x29bc <deselect>
		return FALSE;
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	02 c0       	rjmp	.+4      	; 0x29dc <select+0x18>
	}
	return TRUE;
    29d8:	21 e0       	ldi	r18, 0x01	; 1
    29da:	30 e0       	ldi	r19, 0x00	; 0
}
    29dc:	c9 01       	movw	r24, r18
    29de:	08 95       	ret

000029e0 <power_on>:
#if (defined SD_PWR_PIN | defined SD_PWR_PORT)
   DDRC|=(1<<SD_PWR_PIN);          // Turns on PWR pin as output
   SD_PWR_PORT|=(1<<SD_PWR_PIN);   // Drives PWR pin high
#endif

   DDRC|=(1<<SD_CS_PIN);          // Turns on CS pin as output
    29e0:	38 9a       	sbi	0x07, 0	; 7
   DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)| (1<<DD_SS);
    29e2:	87 e0       	ldi	r24, 0x07	; 7
    29e4:	84 b9       	out	0x04, r24	; 4
   SPCR = (1<<SPE)|(1<<MSTR); /* Initialize SPI port (Mode 0) */ 
    29e6:	80 e5       	ldi	r24, 0x50	; 80
    29e8:	8c bd       	out	0x2c, r24	; 44
}
    29ea:	08 95       	ret

000029ec <power_off>:

static
void power_off (void)
{
   CS_LOW();            /* Wait for card ready */
    29ec:	28 98       	cbi	0x05, 0	; 5
   wait_ready();
    29ee:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <wait_ready>
   SPCR = 0;
    29f2:	1c bc       	out	0x2c, r1	; 44
   Stat |= STA_NOINIT;      /* Set STA_NOINIT */
    29f4:	80 91 0e 01 	lds	r24, 0x010E
    29f8:	81 60       	ori	r24, 0x01	; 1
    29fa:	80 93 0e 01 	sts	0x010E, r24
}
    29fe:	08 95       	ret

00002a00 <rcvr_datablock>:
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    2a00:	0f 93       	push	r16
    2a02:	1f 93       	push	r17
    2a04:	cf 93       	push	r28
    2a06:	df 93       	push	r29
    2a08:	ec 01       	movw	r28, r24
    2a0a:	8b 01       	movw	r16, r22
	BYTE token;


	Timer1 = 20;
    2a0c:	84 e1       	ldi	r24, 0x14	; 20
    2a0e:	80 93 b1 03 	sts	0x03B1, r24
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
    2a12:	0e 94 c9 14 	call	0x2992	; 0x2992 <rcvr_spi>
	} while ((token == 0xFF) && Timer1);
    2a16:	8f 3f       	cpi	r24, 0xFF	; 255
    2a18:	29 f4       	brne	.+10     	; 0x2a24 <rcvr_datablock+0x24>
    2a1a:	80 91 b1 03 	lds	r24, 0x03B1
    2a1e:	88 23       	and	r24, r24
    2a20:	c1 f7       	brne	.-16     	; 0x2a12 <rcvr_datablock+0x12>
    2a22:	27 c0       	rjmp	.+78     	; 0x2a72 <rcvr_datablock+0x72>
	if(token != 0xFE) return FALSE;	/* If not valid data token, retutn with error */
    2a24:	8e 3f       	cpi	r24, 0xFE	; 254
    2a26:	29 f5       	brne	.+74     	; 0x2a72 <rcvr_datablock+0x72>

	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
    2a28:	8f ef       	ldi	r24, 0xFF	; 255
    2a2a:	8e bd       	out	0x2e, r24	; 46
    2a2c:	0d b4       	in	r0, 0x2d	; 45
    2a2e:	07 fe       	sbrs	r0, 7
    2a30:	fd cf       	rjmp	.-6      	; 0x2a2c <rcvr_datablock+0x2c>
    2a32:	9e b5       	in	r25, 0x2e	; 46
    2a34:	98 83       	st	Y, r25
		rcvr_spi_m(buff++);
    2a36:	8e bd       	out	0x2e, r24	; 46
    2a38:	0d b4       	in	r0, 0x2d	; 45
    2a3a:	07 fe       	sbrs	r0, 7
    2a3c:	fd cf       	rjmp	.-6      	; 0x2a38 <rcvr_datablock+0x38>
    2a3e:	9e b5       	in	r25, 0x2e	; 46
    2a40:	99 83       	std	Y+1, r25	; 0x01
		rcvr_spi_m(buff++);
    2a42:	8e bd       	out	0x2e, r24	; 46
    2a44:	0d b4       	in	r0, 0x2d	; 45
    2a46:	07 fe       	sbrs	r0, 7
    2a48:	fd cf       	rjmp	.-6      	; 0x2a44 <rcvr_datablock+0x44>
    2a4a:	9e b5       	in	r25, 0x2e	; 46
    2a4c:	9a 83       	std	Y+2, r25	; 0x02
		rcvr_spi_m(buff++);
    2a4e:	8e bd       	out	0x2e, r24	; 46
    2a50:	0d b4       	in	r0, 0x2d	; 45
    2a52:	07 fe       	sbrs	r0, 7
    2a54:	fd cf       	rjmp	.-6      	; 0x2a50 <rcvr_datablock+0x50>
    2a56:	9e b5       	in	r25, 0x2e	; 46
    2a58:	9b 83       	std	Y+3, r25	; 0x03
	} while (btr -= 4);
    2a5a:	04 50       	subi	r16, 0x04	; 4
    2a5c:	10 40       	sbci	r17, 0x00	; 0
    2a5e:	11 f0       	breq	.+4      	; 0x2a64 <rcvr_datablock+0x64>
/*-----------------------------------------------------------------------*/
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static
BOOL rcvr_datablock (
    2a60:	24 96       	adiw	r28, 0x04	; 4
    2a62:	e3 cf       	rjmp	.-58     	; 0x2a2a <rcvr_datablock+0x2a>
		rcvr_spi_m(buff++);
		rcvr_spi_m(buff++);
		rcvr_spi_m(buff++);
		rcvr_spi_m(buff++);
	} while (btr -= 4);
	rcvr_spi();						/* Discard CRC */
    2a64:	0e 94 c9 14 	call	0x2992	; 0x2992 <rcvr_spi>
	rcvr_spi();
    2a68:	0e 94 c9 14 	call	0x2992	; 0x2992 <rcvr_spi>

	return TRUE;					/* Return with success */
    2a6c:	21 e0       	ldi	r18, 0x01	; 1
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	02 c0       	rjmp	.+4      	; 0x2a76 <rcvr_datablock+0x76>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
	if(token != 0xFE) return FALSE;	/* If not valid data token, retutn with error */
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	30 e0       	ldi	r19, 0x00	; 0
	} while (btr -= 4);
	rcvr_spi();						/* Discard CRC */
	rcvr_spi();

	return TRUE;					/* Return with success */
}
    2a76:	c9 01       	movw	r24, r18
    2a78:	df 91       	pop	r29
    2a7a:	cf 91       	pop	r28
    2a7c:	1f 91       	pop	r17
    2a7e:	0f 91       	pop	r16
    2a80:	08 95       	ret

00002a82 <xmit_datablock>:
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    2a82:	a1 e0       	ldi	r26, 0x01	; 1
    2a84:	b0 e0       	ldi	r27, 0x00	; 0
    2a86:	e7 e4       	ldi	r30, 0x47	; 71
    2a88:	f5 e1       	ldi	r31, 0x15	; 21
    2a8a:	0c 94 12 2d 	jmp	0x5a24	; 0x5a24 <__prologue_saves__+0x1c>
    2a8e:	8c 01       	movw	r16, r24
	BYTE resp, wc;


	if (wait_ready() != 0xFF) return FALSE;
    2a90:	69 83       	std	Y+1, r22	; 0x01
    2a92:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <wait_ready>
    2a96:	69 81       	ldd	r22, Y+1	; 0x01
    2a98:	8f 3f       	cpi	r24, 0xFF	; 255
    2a9a:	49 f5       	brne	.+82     	; 0x2aee <xmit_datablock+0x6c>

	xmit_spi(token);					/* Xmit data token */
    2a9c:	6e bd       	out	0x2e, r22	; 46
    2a9e:	0d b4       	in	r0, 0x2d	; 45
    2aa0:	07 fe       	sbrs	r0, 7
    2aa2:	fd cf       	rjmp	.-6      	; 0x2a9e <xmit_datablock+0x1c>
	if (token != 0xFD) {	/* Is data token */
    2aa4:	6d 3f       	cpi	r22, 0xFD	; 253
    2aa6:	31 f1       	breq	.+76     	; 0x2af4 <xmit_datablock+0x72>
    2aa8:	80 e0       	ldi	r24, 0x00	; 0
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
    2aaa:	f8 01       	movw	r30, r16
    2aac:	90 81       	ld	r25, Z
    2aae:	9e bd       	out	0x2e, r25	; 46
    2ab0:	0d b4       	in	r0, 0x2d	; 45
    2ab2:	07 fe       	sbrs	r0, 7
    2ab4:	fd cf       	rjmp	.-6      	; 0x2ab0 <xmit_datablock+0x2e>
			xmit_spi(*buff++);
    2ab6:	f8 01       	movw	r30, r16
    2ab8:	91 81       	ldd	r25, Z+1	; 0x01
    2aba:	9e bd       	out	0x2e, r25	; 46
    2abc:	0d b4       	in	r0, 0x2d	; 45
    2abe:	07 fe       	sbrs	r0, 7
    2ac0:	fd cf       	rjmp	.-6      	; 0x2abc <xmit_datablock+0x3a>
		} while (--wc);
    2ac2:	81 50       	subi	r24, 0x01	; 1
    2ac4:	19 f0       	breq	.+6      	; 0x2acc <xmit_datablock+0x4a>
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static
BOOL xmit_datablock (
    2ac6:	0e 5f       	subi	r16, 0xFE	; 254
    2ac8:	1f 4f       	sbci	r17, 0xFF	; 255
    2aca:	ef cf       	rjmp	.-34     	; 0x2aaa <xmit_datablock+0x28>
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
			xmit_spi(*buff++);
		} while (--wc);
		xmit_spi(0xFF);					/* CRC (Dummy) */
    2acc:	8f ef       	ldi	r24, 0xFF	; 255
    2ace:	8e bd       	out	0x2e, r24	; 46
    2ad0:	0d b4       	in	r0, 0x2d	; 45
    2ad2:	07 fe       	sbrs	r0, 7
    2ad4:	fd cf       	rjmp	.-6      	; 0x2ad0 <xmit_datablock+0x4e>
		xmit_spi(0xFF);
    2ad6:	8f ef       	ldi	r24, 0xFF	; 255
    2ad8:	8e bd       	out	0x2e, r24	; 46
    2ada:	0d b4       	in	r0, 0x2d	; 45
    2adc:	07 fe       	sbrs	r0, 7
    2ade:	fd cf       	rjmp	.-6      	; 0x2ada <xmit_datablock+0x58>
		resp = rcvr_spi();				/* Reveive data response */
    2ae0:	0e 94 c9 14 	call	0x2992	; 0x2992 <rcvr_spi>
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
    2ae4:	8f 71       	andi	r24, 0x1F	; 31
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static
BOOL xmit_datablock (
    2ae6:	21 e0       	ldi	r18, 0x01	; 1
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	85 30       	cpi	r24, 0x05	; 5
    2aec:	29 f0       	breq	.+10     	; 0x2af8 <xmit_datablock+0x76>
)
{
	BYTE resp, wc;


	if (wait_ready() != 0xFF) return FALSE;
    2aee:	20 e0       	ldi	r18, 0x00	; 0
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	02 c0       	rjmp	.+4      	; 0x2af8 <xmit_datablock+0x76>
		resp = rcvr_spi();				/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return FALSE;
	}

	return TRUE;
    2af4:	21 e0       	ldi	r18, 0x01	; 1
    2af6:	30 e0       	ldi	r19, 0x00	; 0
}
    2af8:	c9 01       	movw	r24, r18
    2afa:	21 96       	adiw	r28, 0x01	; 1
    2afc:	e4 e0       	ldi	r30, 0x04	; 4
    2afe:	0c 94 2e 2d 	jmp	0x5a5c	; 0x5a5c <__epilogue_restores__+0x1c>

00002b02 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    2b02:	a1 e0       	ldi	r26, 0x01	; 1
    2b04:	b0 e0       	ldi	r27, 0x00	; 0
    2b06:	e7 e8       	ldi	r30, 0x87	; 135
    2b08:	f5 e1       	ldi	r31, 0x15	; 21
    2b0a:	0c 94 10 2d 	jmp	0x5a20	; 0x5a20 <__prologue_saves__+0x18>
    2b0e:	28 2f       	mov	r18, r24
    2b10:	7a 01       	movw	r14, r20
    2b12:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    2b14:	87 ff       	sbrs	r24, 7
    2b16:	0c c0       	rjmp	.+24     	; 0x2b30 <send_cmd+0x2e>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    2b18:	87 e7       	ldi	r24, 0x77	; 119
    2b1a:	40 e0       	ldi	r20, 0x00	; 0
    2b1c:	50 e0       	ldi	r21, 0x00	; 0
    2b1e:	ba 01       	movw	r22, r20
    2b20:	29 83       	std	Y+1, r18	; 0x01
    2b22:	0e 94 81 15 	call	0x2b02	; 0x2b02 <send_cmd>
		if (res > 1) return res;
    2b26:	29 81       	ldd	r18, Y+1	; 0x01
    2b28:	82 30       	cpi	r24, 0x02	; 2
    2b2a:	08 f0       	brcs	.+2      	; 0x2b2e <send_cmd+0x2c>
    2b2c:	42 c0       	rjmp	.+132    	; 0x2bb2 <send_cmd+0xb0>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    2b2e:	2f 77       	andi	r18, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
    2b30:	29 83       	std	Y+1, r18	; 0x01
    2b32:	0e 94 de 14 	call	0x29bc	; 0x29bc <deselect>
	if (!select()) return 0xFF;
    2b36:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <select>
    2b3a:	29 81       	ldd	r18, Y+1	; 0x01
    2b3c:	00 97       	sbiw	r24, 0x00	; 0
    2b3e:	c1 f1       	breq	.+112    	; 0x2bb0 <send_cmd+0xae>

	/* Send command packet */
	xmit_spi(cmd);						/* Start + Command index */
    2b40:	2e bd       	out	0x2e, r18	; 46
    2b42:	0d b4       	in	r0, 0x2d	; 45
    2b44:	07 fe       	sbrs	r0, 7
    2b46:	fd cf       	rjmp	.-6      	; 0x2b42 <send_cmd+0x40>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    2b48:	81 2f       	mov	r24, r17
    2b4a:	99 27       	eor	r25, r25
    2b4c:	aa 27       	eor	r26, r26
    2b4e:	bb 27       	eor	r27, r27
    2b50:	8e bd       	out	0x2e, r24	; 46
    2b52:	0d b4       	in	r0, 0x2d	; 45
    2b54:	07 fe       	sbrs	r0, 7
    2b56:	fd cf       	rjmp	.-6      	; 0x2b52 <send_cmd+0x50>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    2b58:	c8 01       	movw	r24, r16
    2b5a:	aa 27       	eor	r26, r26
    2b5c:	bb 27       	eor	r27, r27
    2b5e:	8e bd       	out	0x2e, r24	; 46
    2b60:	0d b4       	in	r0, 0x2d	; 45
    2b62:	07 fe       	sbrs	r0, 7
    2b64:	fd cf       	rjmp	.-6      	; 0x2b60 <send_cmd+0x5e>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    2b66:	bb 27       	eor	r27, r27
    2b68:	a1 2f       	mov	r26, r17
    2b6a:	90 2f       	mov	r25, r16
    2b6c:	8f 2d       	mov	r24, r15
    2b6e:	8e bd       	out	0x2e, r24	; 46
    2b70:	0d b4       	in	r0, 0x2d	; 45
    2b72:	07 fe       	sbrs	r0, 7
    2b74:	fd cf       	rjmp	.-6      	; 0x2b70 <send_cmd+0x6e>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
    2b76:	ee bc       	out	0x2e, r14	; 46
    2b78:	0d b4       	in	r0, 0x2d	; 45
    2b7a:	07 fe       	sbrs	r0, 7
    2b7c:	fd cf       	rjmp	.-6      	; 0x2b78 <send_cmd+0x76>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    2b7e:	20 34       	cpi	r18, 0x40	; 64
    2b80:	21 f0       	breq	.+8      	; 0x2b8a <send_cmd+0x88>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    2b82:	28 34       	cpi	r18, 0x48	; 72
    2b84:	21 f0       	breq	.+8      	; 0x2b8e <send_cmd+0x8c>
	xmit_spi(cmd);						/* Start + Command index */
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
    2b86:	81 e0       	ldi	r24, 0x01	; 1
    2b88:	03 c0       	rjmp	.+6      	; 0x2b90 <send_cmd+0x8e>
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    2b8a:	85 e9       	ldi	r24, 0x95	; 149
    2b8c:	01 c0       	rjmp	.+2      	; 0x2b90 <send_cmd+0x8e>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    2b8e:	87 e8       	ldi	r24, 0x87	; 135
	xmit_spi(n);
    2b90:	8e bd       	out	0x2e, r24	; 46
    2b92:	0d b4       	in	r0, 0x2d	; 45
    2b94:	07 fe       	sbrs	r0, 7
    2b96:	fd cf       	rjmp	.-6      	; 0x2b92 <send_cmd+0x90>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
    2b98:	2c 34       	cpi	r18, 0x4C	; 76
    2b9a:	11 f4       	brne	.+4      	; 0x2ba0 <send_cmd+0x9e>
    2b9c:	0e 94 c9 14 	call	0x2992	; 0x2992 <rcvr_spi>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    2ba0:	1a e0       	ldi	r17, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = rcvr_spi();
    2ba2:	0e 94 c9 14 	call	0x2992	; 0x2992 <rcvr_spi>
	while ((res & 0x80) && --n);
    2ba6:	87 ff       	sbrs	r24, 7
    2ba8:	04 c0       	rjmp	.+8      	; 0x2bb2 <send_cmd+0xb0>
    2baa:	11 50       	subi	r17, 0x01	; 1
    2bac:	d1 f7       	brne	.-12     	; 0x2ba2 <send_cmd+0xa0>
    2bae:	01 c0       	rjmp	.+2      	; 0x2bb2 <send_cmd+0xb0>
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
	if (!select()) return 0xFF;
    2bb0:	8f ef       	ldi	r24, 0xFF	; 255
	do
		res = rcvr_spi();
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
    2bb2:	21 96       	adiw	r28, 0x01	; 1
    2bb4:	e6 e0       	ldi	r30, 0x06	; 6
    2bb6:	0c 94 2c 2d 	jmp	0x5a58	; 0x5a58 <__epilogue_restores__+0x18>

00002bba <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
    2bba:	a4 e0       	ldi	r26, 0x04	; 4
    2bbc:	b0 e0       	ldi	r27, 0x00	; 0
    2bbe:	e3 ee       	ldi	r30, 0xE3	; 227
    2bc0:	f5 e1       	ldi	r31, 0x15	; 21
    2bc2:	0c 94 0e 2d 	jmp	0x5a1c	; 0x5a1c <__prologue_saves__+0x14>
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
    2bc6:	88 23       	and	r24, r24
    2bc8:	09 f0       	breq	.+2      	; 0x2bcc <disk_initialize+0x12>
    2bca:	9b c0       	rjmp	.+310    	; 0x2d02 <disk_initialize+0x148>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    2bcc:	80 91 0e 01 	lds	r24, 0x010E
    2bd0:	81 fd       	sbrc	r24, 1
    2bd2:	94 c0       	rjmp	.+296    	; 0x2cfc <disk_initialize+0x142>

	power_on();							/* Force socket power on */
    2bd4:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <power_on>
    2bd8:	1a e0       	ldi	r17, 0x0A	; 10
	FCLK_SLOW();
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
    2bda:	0e 94 c9 14 	call	0x2992	; 0x2992 <rcvr_spi>
    2bde:	11 50       	subi	r17, 0x01	; 1
    2be0:	e1 f7       	brne	.-8      	; 0x2bda <disk_initialize+0x20>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    2be2:	80 e4       	ldi	r24, 0x40	; 64
    2be4:	40 e0       	ldi	r20, 0x00	; 0
    2be6:	50 e0       	ldi	r21, 0x00	; 0
    2be8:	ba 01       	movw	r22, r20
    2bea:	0e 94 81 15 	call	0x2b02	; 0x2b02 <send_cmd>
    2bee:	81 30       	cpi	r24, 0x01	; 1
    2bf0:	09 f0       	breq	.+2      	; 0x2bf4 <disk_initialize+0x3a>
    2bf2:	75 c0       	rjmp	.+234    	; 0x2cde <disk_initialize+0x124>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    2bf4:	84 e6       	ldi	r24, 0x64	; 100
    2bf6:	80 93 b1 03 	sts	0x03B1, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
    2bfa:	88 e4       	ldi	r24, 0x48	; 72
    2bfc:	4a ea       	ldi	r20, 0xAA	; 170
    2bfe:	51 e0       	ldi	r21, 0x01	; 1
    2c00:	60 e0       	ldi	r22, 0x00	; 0
    2c02:	70 e0       	ldi	r23, 0x00	; 0
    2c04:	0e 94 81 15 	call	0x2b02	; 0x2b02 <send_cmd>
    2c08:	81 30       	cpi	r24, 0x01	; 1
    2c0a:	09 f0       	breq	.+2      	; 0x2c0e <disk_initialize+0x54>
    2c0c:	3f c0       	rjmp	.+126    	; 0x2c8c <disk_initialize+0xd2>
    2c0e:	8e 01       	movw	r16, r28
    2c10:	0f 5f       	subi	r16, 0xFF	; 255
    2c12:	1f 4f       	sbci	r17, 0xFF	; 255

/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
    2c14:	45 e0       	ldi	r20, 0x05	; 5
    2c16:	e4 2e       	mov	r14, r20
    2c18:	f1 2c       	mov	r15, r1
    2c1a:	ec 0e       	add	r14, r28
    2c1c:	fd 1e       	adc	r15, r29
    2c1e:	68 01       	movw	r12, r16

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
    2c20:	0e 94 c9 14 	call	0x2992	; 0x2992 <rcvr_spi>
    2c24:	f6 01       	movw	r30, r12
    2c26:	81 93       	st	Z+, r24
    2c28:	6f 01       	movw	r12, r30
    2c2a:	ee 15       	cp	r30, r14
    2c2c:	ff 05       	cpc	r31, r15
    2c2e:	c1 f7       	brne	.-16     	; 0x2c20 <disk_initialize+0x66>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    2c30:	8b 81       	ldd	r24, Y+3	; 0x03
    2c32:	81 30       	cpi	r24, 0x01	; 1
    2c34:	09 f0       	breq	.+2      	; 0x2c38 <disk_initialize+0x7e>
    2c36:	53 c0       	rjmp	.+166    	; 0x2cde <disk_initialize+0x124>
    2c38:	8c 81       	ldd	r24, Y+4	; 0x04
    2c3a:	8a 3a       	cpi	r24, 0xAA	; 170
    2c3c:	09 f0       	breq	.+2      	; 0x2c40 <disk_initialize+0x86>
    2c3e:	4f c0       	rjmp	.+158    	; 0x2cde <disk_initialize+0x124>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    2c40:	80 91 b1 03 	lds	r24, 0x03B1
    2c44:	88 23       	and	r24, r24
    2c46:	49 f0       	breq	.+18     	; 0x2c5a <disk_initialize+0xa0>
    2c48:	89 ee       	ldi	r24, 0xE9	; 233
    2c4a:	40 e0       	ldi	r20, 0x00	; 0
    2c4c:	50 e0       	ldi	r21, 0x00	; 0
    2c4e:	60 e0       	ldi	r22, 0x00	; 0
    2c50:	70 e4       	ldi	r23, 0x40	; 64
    2c52:	0e 94 81 15 	call	0x2b02	; 0x2b02 <send_cmd>
    2c56:	88 23       	and	r24, r24
    2c58:	99 f7       	brne	.-26     	; 0x2c40 <disk_initialize+0x86>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    2c5a:	80 91 b1 03 	lds	r24, 0x03B1
    2c5e:	88 23       	and	r24, r24
    2c60:	f1 f1       	breq	.+124    	; 0x2cde <disk_initialize+0x124>
    2c62:	8a e7       	ldi	r24, 0x7A	; 122
    2c64:	40 e0       	ldi	r20, 0x00	; 0
    2c66:	50 e0       	ldi	r21, 0x00	; 0
    2c68:	ba 01       	movw	r22, r20
    2c6a:	0e 94 81 15 	call	0x2b02	; 0x2b02 <send_cmd>
    2c6e:	88 23       	and	r24, r24
    2c70:	b1 f5       	brne	.+108    	; 0x2cde <disk_initialize+0x124>
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
    2c72:	0e 94 c9 14 	call	0x2992	; 0x2992 <rcvr_spi>
    2c76:	f8 01       	movw	r30, r16
    2c78:	81 93       	st	Z+, r24
    2c7a:	8f 01       	movw	r16, r30
    2c7c:	ee 15       	cp	r30, r14
    2c7e:	ff 05       	cpc	r31, r15
    2c80:	c1 f7       	brne	.-16     	; 0x2c72 <disk_initialize+0xb8>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    2c82:	89 81       	ldd	r24, Y+1	; 0x01
    2c84:	86 ff       	sbrs	r24, 6
    2c86:	29 c0       	rjmp	.+82     	; 0x2cda <disk_initialize+0x120>
    2c88:	0c e0       	ldi	r16, 0x0C	; 12
    2c8a:	2a c0       	rjmp	.+84     	; 0x2ce0 <disk_initialize+0x126>
				}
			}
		} else {							/* SDSC or MMC */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    2c8c:	89 ee       	ldi	r24, 0xE9	; 233
    2c8e:	40 e0       	ldi	r20, 0x00	; 0
    2c90:	50 e0       	ldi	r21, 0x00	; 0
    2c92:	ba 01       	movw	r22, r20
    2c94:	0e 94 81 15 	call	0x2b02	; 0x2b02 <send_cmd>
    2c98:	82 30       	cpi	r24, 0x02	; 2
    2c9a:	18 f4       	brcc	.+6      	; 0x2ca2 <disk_initialize+0xe8>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    2c9c:	02 e0       	ldi	r16, 0x02	; 2
    2c9e:	19 ee       	ldi	r17, 0xE9	; 233
    2ca0:	02 c0       	rjmp	.+4      	; 0x2ca6 <disk_initialize+0xec>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    2ca2:	01 e0       	ldi	r16, 0x01	; 1
    2ca4:	11 e4       	ldi	r17, 0x41	; 65
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    2ca6:	80 91 b1 03 	lds	r24, 0x03B1
    2caa:	88 23       	and	r24, r24
    2cac:	41 f0       	breq	.+16     	; 0x2cbe <disk_initialize+0x104>
    2cae:	81 2f       	mov	r24, r17
    2cb0:	40 e0       	ldi	r20, 0x00	; 0
    2cb2:	50 e0       	ldi	r21, 0x00	; 0
    2cb4:	ba 01       	movw	r22, r20
    2cb6:	0e 94 81 15 	call	0x2b02	; 0x2b02 <send_cmd>
    2cba:	88 23       	and	r24, r24
    2cbc:	a1 f7       	brne	.-24     	; 0x2ca6 <disk_initialize+0xec>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    2cbe:	80 91 b1 03 	lds	r24, 0x03B1
    2cc2:	88 23       	and	r24, r24
    2cc4:	61 f0       	breq	.+24     	; 0x2cde <disk_initialize+0x124>
    2cc6:	80 e5       	ldi	r24, 0x50	; 80
    2cc8:	40 e0       	ldi	r20, 0x00	; 0
    2cca:	52 e0       	ldi	r21, 0x02	; 2
    2ccc:	60 e0       	ldi	r22, 0x00	; 0
    2cce:	70 e0       	ldi	r23, 0x00	; 0
    2cd0:	0e 94 81 15 	call	0x2b02	; 0x2b02 <send_cmd>
    2cd4:	88 23       	and	r24, r24
    2cd6:	19 f4       	brne	.+6      	; 0x2cde <disk_initialize+0x124>
    2cd8:	03 c0       	rjmp	.+6      	; 0x2ce0 <disk_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    2cda:	04 e0       	ldi	r16, 0x04	; 4
    2cdc:	01 c0       	rjmp	.+2      	; 0x2ce0 <disk_initialize+0x126>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
    2cde:	00 e0       	ldi	r16, 0x00	; 0
		}
	}
	CardType = ty;
    2ce0:	00 93 b3 03 	sts	0x03B3, r16
	deselect();
    2ce4:	0e 94 de 14 	call	0x29bc	; 0x29bc <deselect>

	if (ty) {			/* Initialization succeded */
    2ce8:	00 23       	and	r16, r16
    2cea:	31 f0       	breq	.+12     	; 0x2cf8 <disk_initialize+0x13e>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    2cec:	80 91 0e 01 	lds	r24, 0x010E
    2cf0:	8e 7f       	andi	r24, 0xFE	; 254
    2cf2:	80 93 0e 01 	sts	0x010E, r24
    2cf6:	02 c0       	rjmp	.+4      	; 0x2cfc <disk_initialize+0x142>
		FCLK_FAST();
	} else {			/* Initialization failed */
		power_off();
    2cf8:	0e 94 f6 14 	call	0x29ec	; 0x29ec <power_off>
	}

	return Stat;
    2cfc:	80 91 0e 01 	lds	r24, 0x010E
    2d00:	01 c0       	rjmp	.+2      	; 0x2d04 <disk_initialize+0x14a>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
    2d02:	81 e0       	ldi	r24, 0x01	; 1
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
    2d04:	24 96       	adiw	r28, 0x04	; 4
    2d06:	e8 e0       	ldi	r30, 0x08	; 8
    2d08:	0c 94 2a 2d 	jmp	0x5a54	; 0x5a54 <__epilogue_restores__+0x14>

00002d0c <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    2d0c:	88 23       	and	r24, r24
    2d0e:	19 f4       	brne	.+6      	; 0x2d16 <disk_status+0xa>
	return Stat;
    2d10:	80 91 0e 01 	lds	r24, 0x010E
    2d14:	08 95       	ret

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    2d16:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
    2d18:	08 95       	ret

00002d1a <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
    2d1a:	0f 93       	push	r16
    2d1c:	cf 93       	push	r28
    2d1e:	df 93       	push	r29
    2d20:	eb 01       	movw	r28, r22
    2d22:	ba 01       	movw	r22, r20
    2d24:	a9 01       	movw	r20, r18
	if (drv || !count) return RES_PARERR;
    2d26:	88 23       	and	r24, r24
    2d28:	09 f0       	breq	.+2      	; 0x2d2c <disk_read+0x12>
    2d2a:	43 c0       	rjmp	.+134    	; 0x2db2 <disk_read+0x98>
    2d2c:	00 23       	and	r16, r16
    2d2e:	09 f4       	brne	.+2      	; 0x2d32 <disk_read+0x18>
    2d30:	40 c0       	rjmp	.+128    	; 0x2db2 <disk_read+0x98>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    2d32:	80 91 0e 01 	lds	r24, 0x010E
    2d36:	80 fd       	sbrc	r24, 0
    2d38:	3f c0       	rjmp	.+126    	; 0x2db8 <disk_read+0x9e>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    2d3a:	80 91 b3 03 	lds	r24, 0x03B3
    2d3e:	83 fd       	sbrc	r24, 3
    2d40:	07 c0       	rjmp	.+14     	; 0x2d50 <disk_read+0x36>
    2d42:	e9 e0       	ldi	r30, 0x09	; 9
    2d44:	44 0f       	add	r20, r20
    2d46:	55 1f       	adc	r21, r21
    2d48:	66 1f       	adc	r22, r22
    2d4a:	77 1f       	adc	r23, r23
    2d4c:	ea 95       	dec	r30
    2d4e:	d1 f7       	brne	.-12     	; 0x2d44 <disk_read+0x2a>

	if (count == 1) {	/* Single block read */
    2d50:	01 30       	cpi	r16, 0x01	; 1
    2d52:	69 f4       	brne	.+26     	; 0x2d6e <disk_read+0x54>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
    2d54:	81 e5       	ldi	r24, 0x51	; 81
    2d56:	0e 94 81 15 	call	0x2b02	; 0x2b02 <send_cmd>
    2d5a:	88 23       	and	r24, r24
    2d5c:	09 f5       	brne	.+66     	; 0x2da0 <disk_read+0x86>
			&& rcvr_datablock(buff, 512))
    2d5e:	ce 01       	movw	r24, r28
    2d60:	60 e0       	ldi	r22, 0x00	; 0
    2d62:	72 e0       	ldi	r23, 0x02	; 2
    2d64:	0e 94 00 15 	call	0x2a00	; 0x2a00 <rcvr_datablock>
    2d68:	00 97       	sbiw	r24, 0x00	; 0
    2d6a:	c9 f4       	brne	.+50     	; 0x2d9e <disk_read+0x84>
    2d6c:	19 c0       	rjmp	.+50     	; 0x2da0 <disk_read+0x86>
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
    2d6e:	82 e5       	ldi	r24, 0x52	; 82
    2d70:	0e 94 81 15 	call	0x2b02	; 0x2b02 <send_cmd>
    2d74:	88 23       	and	r24, r24
    2d76:	a1 f4       	brne	.+40     	; 0x2da0 <disk_read+0x86>
			do {
				if (!rcvr_datablock(buff, 512)) break;
    2d78:	ce 01       	movw	r24, r28
    2d7a:	60 e0       	ldi	r22, 0x00	; 0
    2d7c:	72 e0       	ldi	r23, 0x02	; 2
    2d7e:	0e 94 00 15 	call	0x2a00	; 0x2a00 <rcvr_datablock>
    2d82:	00 97       	sbiw	r24, 0x00	; 0
    2d84:	29 f0       	breq	.+10     	; 0x2d90 <disk_read+0x76>
				buff += 512;
			} while (--count);
    2d86:	01 50       	subi	r16, 0x01	; 1
    2d88:	19 f0       	breq	.+6      	; 0x2d90 <disk_read+0x76>
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
			do {
				if (!rcvr_datablock(buff, 512)) break;
				buff += 512;
    2d8a:	c0 50       	subi	r28, 0x00	; 0
    2d8c:	de 4f       	sbci	r29, 0xFE	; 254
    2d8e:	f4 cf       	rjmp	.-24     	; 0x2d78 <disk_read+0x5e>
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
    2d90:	8c e4       	ldi	r24, 0x4C	; 76
    2d92:	40 e0       	ldi	r20, 0x00	; 0
    2d94:	50 e0       	ldi	r21, 0x00	; 0
    2d96:	ba 01       	movw	r22, r20
    2d98:	0e 94 81 15 	call	0x2b02	; 0x2b02 <send_cmd>
    2d9c:	01 c0       	rjmp	.+2      	; 0x2da0 <disk_read+0x86>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block read */
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
			&& rcvr_datablock(buff, 512))
			count = 0;
    2d9e:	00 e0       	ldi	r16, 0x00	; 0
				buff += 512;
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();
    2da0:	0e 94 de 14 	call	0x29bc	; 0x29bc <deselect>

	return count ? RES_ERROR : RES_OK;
    2da4:	21 e0       	ldi	r18, 0x01	; 1
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	00 23       	and	r16, r16
    2daa:	41 f4       	brne	.+16     	; 0x2dbc <disk_read+0xa2>
    2dac:	20 e0       	ldi	r18, 0x00	; 0
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	05 c0       	rjmp	.+10     	; 0x2dbc <disk_read+0xa2>
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
    2db2:	24 e0       	ldi	r18, 0x04	; 4
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	02 c0       	rjmp	.+4      	; 0x2dbc <disk_read+0xa2>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    2db8:	23 e0       	ldi	r18, 0x03	; 3
    2dba:	30 e0       	ldi	r19, 0x00	; 0
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    2dbc:	c9 01       	movw	r24, r18
    2dbe:	df 91       	pop	r29
    2dc0:	cf 91       	pop	r28
    2dc2:	0f 91       	pop	r16
    2dc4:	08 95       	ret

00002dc6 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
    2dc6:	cf 92       	push	r12
    2dc8:	df 92       	push	r13
    2dca:	ef 92       	push	r14
    2dcc:	ff 92       	push	r15
    2dce:	0f 93       	push	r16
    2dd0:	cf 93       	push	r28
    2dd2:	df 93       	push	r29
    2dd4:	eb 01       	movw	r28, r22
    2dd6:	69 01       	movw	r12, r18
    2dd8:	7a 01       	movw	r14, r20
	if (drv || !count) return RES_PARERR;
    2dda:	88 23       	and	r24, r24
    2ddc:	09 f0       	breq	.+2      	; 0x2de0 <disk_write+0x1a>
    2dde:	58 c0       	rjmp	.+176    	; 0x2e90 <disk_write+0xca>
    2de0:	00 23       	and	r16, r16
    2de2:	09 f4       	brne	.+2      	; 0x2de6 <disk_write+0x20>
    2de4:	55 c0       	rjmp	.+170    	; 0x2e90 <disk_write+0xca>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    2de6:	80 91 0e 01 	lds	r24, 0x010E
    2dea:	80 fd       	sbrc	r24, 0
    2dec:	54 c0       	rjmp	.+168    	; 0x2e96 <disk_write+0xd0>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    2dee:	80 91 0e 01 	lds	r24, 0x010E
    2df2:	82 fd       	sbrc	r24, 2
    2df4:	53 c0       	rjmp	.+166    	; 0x2e9c <disk_write+0xd6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    2df6:	80 91 b3 03 	lds	r24, 0x03B3
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	83 fd       	sbrc	r24, 3
    2dfe:	07 c0       	rjmp	.+14     	; 0x2e0e <disk_write+0x48>
    2e00:	f9 e0       	ldi	r31, 0x09	; 9
    2e02:	cc 0c       	add	r12, r12
    2e04:	dd 1c       	adc	r13, r13
    2e06:	ee 1c       	adc	r14, r14
    2e08:	ff 1c       	adc	r15, r15
    2e0a:	fa 95       	dec	r31
    2e0c:	d1 f7       	brne	.-12     	; 0x2e02 <disk_write+0x3c>

	if (count == 1) {	/* Single block write */
    2e0e:	01 30       	cpi	r16, 0x01	; 1
    2e10:	71 f4       	brne	.+28     	; 0x2e2e <disk_write+0x68>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    2e12:	88 e5       	ldi	r24, 0x58	; 88
    2e14:	b7 01       	movw	r22, r14
    2e16:	a6 01       	movw	r20, r12
    2e18:	0e 94 81 15 	call	0x2b02	; 0x2b02 <send_cmd>
    2e1c:	88 23       	and	r24, r24
    2e1e:	79 f5       	brne	.+94     	; 0x2e7e <disk_write+0xb8>
			&& xmit_datablock(buff, 0xFE))
    2e20:	ce 01       	movw	r24, r28
    2e22:	6e ef       	ldi	r22, 0xFE	; 254
    2e24:	0e 94 41 15 	call	0x2a82	; 0x2a82 <xmit_datablock>
    2e28:	00 97       	sbiw	r24, 0x00	; 0
    2e2a:	31 f5       	brne	.+76     	; 0x2e78 <disk_write+0xb2>
    2e2c:	28 c0       	rjmp	.+80     	; 0x2e7e <disk_write+0xb8>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    2e2e:	86 70       	andi	r24, 0x06	; 6
    2e30:	90 70       	andi	r25, 0x00	; 0
    2e32:	00 97       	sbiw	r24, 0x00	; 0
    2e34:	39 f0       	breq	.+14     	; 0x2e44 <disk_write+0x7e>
    2e36:	40 2f       	mov	r20, r16
    2e38:	50 e0       	ldi	r21, 0x00	; 0
    2e3a:	60 e0       	ldi	r22, 0x00	; 0
    2e3c:	70 e0       	ldi	r23, 0x00	; 0
    2e3e:	87 ed       	ldi	r24, 0xD7	; 215
    2e40:	0e 94 81 15 	call	0x2b02	; 0x2b02 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    2e44:	89 e5       	ldi	r24, 0x59	; 89
    2e46:	b7 01       	movw	r22, r14
    2e48:	a6 01       	movw	r20, r12
    2e4a:	0e 94 81 15 	call	0x2b02	; 0x2b02 <send_cmd>
    2e4e:	88 23       	and	r24, r24
    2e50:	b1 f4       	brne	.+44     	; 0x2e7e <disk_write+0xb8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    2e52:	ce 01       	movw	r24, r28
    2e54:	6c ef       	ldi	r22, 0xFC	; 252
    2e56:	0e 94 41 15 	call	0x2a82	; 0x2a82 <xmit_datablock>
    2e5a:	00 97       	sbiw	r24, 0x00	; 0
    2e5c:	29 f0       	breq	.+10     	; 0x2e68 <disk_write+0xa2>
				buff += 512;
			} while (--count);
    2e5e:	01 50       	subi	r16, 0x01	; 1
    2e60:	19 f0       	breq	.+6      	; 0x2e68 <disk_write+0xa2>
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
    2e62:	c0 50       	subi	r28, 0x00	; 0
    2e64:	de 4f       	sbci	r29, 0xFE	; 254
    2e66:	f5 cf       	rjmp	.-22     	; 0x2e52 <disk_write+0x8c>
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    2e68:	80 e0       	ldi	r24, 0x00	; 0
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	6d ef       	ldi	r22, 0xFD	; 253
    2e6e:	0e 94 41 15 	call	0x2a82	; 0x2a82 <xmit_datablock>
    2e72:	00 97       	sbiw	r24, 0x00	; 0
    2e74:	19 f0       	breq	.+6      	; 0x2e7c <disk_write+0xb6>
    2e76:	03 c0       	rjmp	.+6      	; 0x2e7e <disk_write+0xb8>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block write */
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
			&& xmit_datablock(buff, 0xFE))
			count = 0;
    2e78:	00 e0       	ldi	r16, 0x00	; 0
    2e7a:	01 c0       	rjmp	.+2      	; 0x2e7e <disk_write+0xb8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
				count = 1;
    2e7c:	01 e0       	ldi	r16, 0x01	; 1
		}
	}
	deselect();
    2e7e:	0e 94 de 14 	call	0x29bc	; 0x29bc <deselect>

	return count ? RES_ERROR : RES_OK;
    2e82:	21 e0       	ldi	r18, 0x01	; 1
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	00 23       	and	r16, r16
    2e88:	59 f4       	brne	.+22     	; 0x2ea0 <disk_write+0xda>
    2e8a:	20 e0       	ldi	r18, 0x00	; 0
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	08 c0       	rjmp	.+16     	; 0x2ea0 <disk_write+0xda>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
    2e90:	24 e0       	ldi	r18, 0x04	; 4
    2e92:	30 e0       	ldi	r19, 0x00	; 0
    2e94:	05 c0       	rjmp	.+10     	; 0x2ea0 <disk_write+0xda>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    2e96:	23 e0       	ldi	r18, 0x03	; 3
    2e98:	30 e0       	ldi	r19, 0x00	; 0
    2e9a:	02 c0       	rjmp	.+4      	; 0x2ea0 <disk_write+0xda>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    2e9c:	22 e0       	ldi	r18, 0x02	; 2
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    2ea0:	c9 01       	movw	r24, r18
    2ea2:	df 91       	pop	r29
    2ea4:	cf 91       	pop	r28
    2ea6:	0f 91       	pop	r16
    2ea8:	ff 90       	pop	r15
    2eaa:	ef 90       	pop	r14
    2eac:	df 90       	pop	r13
    2eae:	cf 90       	pop	r12
    2eb0:	08 95       	ret

00002eb2 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    2eb2:	a0 e1       	ldi	r26, 0x10	; 16
    2eb4:	b0 e0       	ldi	r27, 0x00	; 0
    2eb6:	ef e5       	ldi	r30, 0x5F	; 95
    2eb8:	f7 e1       	ldi	r31, 0x17	; 23
    2eba:	0c 94 10 2d 	jmp	0x5a20	; 0x5a20 <__prologue_saves__+0x18>
    2ebe:	8a 01       	movw	r16, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
    2ec0:	88 23       	and	r24, r24
    2ec2:	09 f0       	breq	.+2      	; 0x2ec6 <disk_ioctl+0x14>
    2ec4:	52 c1       	rjmp	.+676    	; 0x316a <disk_ioctl+0x2b8>
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
    2ec6:	7a 01       	movw	r14, r20

	if (drv) return RES_PARERR;

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
    2ec8:	64 30       	cpi	r22, 0x04	; 4
    2eca:	b1 f4       	brne	.+44     	; 0x2ef8 <disk_ioctl+0x46>
		switch (*ptr) {
    2ecc:	fa 01       	movw	r30, r20
    2ece:	80 81       	ld	r24, Z
    2ed0:	81 30       	cpi	r24, 0x01	; 1
    2ed2:	49 f0       	breq	.+18     	; 0x2ee6 <disk_ioctl+0x34>
    2ed4:	81 30       	cpi	r24, 0x01	; 1
    2ed6:	20 f0       	brcs	.+8      	; 0x2ee0 <disk_ioctl+0x2e>
    2ed8:	82 30       	cpi	r24, 0x02	; 2
    2eda:	09 f0       	breq	.+2      	; 0x2ede <disk_ioctl+0x2c>
    2edc:	46 c1       	rjmp	.+652    	; 0x316a <disk_ioctl+0x2b8>
    2ede:	06 c0       	rjmp	.+12     	; 0x2eec <disk_ioctl+0x3a>
		case 0:		/* Sub control code == 0 (POWER_OFF) */
			if (chk_power())
				power_off();		/* Power off */
    2ee0:	0e 94 f6 14 	call	0x29ec	; 0x29ec <power_off>
    2ee4:	06 c0       	rjmp	.+12     	; 0x2ef2 <disk_ioctl+0x40>
			res = RES_OK;
			break;
		case 1:		/* Sub control code == 1 (POWER_ON) */
			power_on();				/* Power on */
    2ee6:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <power_on>
    2eea:	03 c0       	rjmp	.+6      	; 0x2ef2 <disk_ioctl+0x40>
			res = RES_OK;
			break;
		case 2:		/* Sub control code == 2 (POWER_GET) */
			*(ptr+1) = (BYTE)chk_power();
    2eec:	81 e0       	ldi	r24, 0x01	; 1
    2eee:	fa 01       	movw	r30, r20
    2ef0:	81 83       	std	Z+1, r24	; 0x01
			res = RES_OK;
    2ef2:	00 e0       	ldi	r16, 0x00	; 0
    2ef4:	10 e0       	ldi	r17, 0x00	; 0
			break;
    2ef6:	3e c1       	rjmp	.+636    	; 0x3174 <disk_ioctl+0x2c2>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
    2ef8:	80 91 0e 01 	lds	r24, 0x010E
    2efc:	80 fd       	sbrc	r24, 0
    2efe:	38 c1       	rjmp	.+624    	; 0x3170 <disk_ioctl+0x2be>

		switch (ctrl) {
    2f00:	e6 2f       	mov	r30, r22
    2f02:	f0 e0       	ldi	r31, 0x00	; 0
    2f04:	ef 30       	cpi	r30, 0x0F	; 15
    2f06:	f1 05       	cpc	r31, r1
    2f08:	08 f0       	brcs	.+2      	; 0x2f0c <disk_ioctl+0x5a>
    2f0a:	24 c1       	rjmp	.+584    	; 0x3154 <disk_ioctl+0x2a2>
    2f0c:	e6 5b       	subi	r30, 0xB6	; 182
    2f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f10:	0c 94 3b 2d 	jmp	0x5a76	; 0x5a76 <__tablejump2__>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
    2f14:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <select>
    2f18:	00 97       	sbiw	r24, 0x00	; 0
    2f1a:	09 f4       	brne	.+2      	; 0x2f1e <disk_ioctl+0x6c>
    2f1c:	1e c1       	rjmp	.+572    	; 0x315a <disk_ioctl+0x2a8>
				res = RES_OK;
				deselect();
    2f1e:	0e 94 de 14 	call	0x29bc	; 0x29bc <deselect>
    2f22:	1e c1       	rjmp	.+572    	; 0x3160 <disk_ioctl+0x2ae>
			}
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    2f24:	89 e4       	ldi	r24, 0x49	; 73
    2f26:	40 e0       	ldi	r20, 0x00	; 0
    2f28:	50 e0       	ldi	r21, 0x00	; 0
    2f2a:	ba 01       	movw	r22, r20
    2f2c:	0e 94 81 15 	call	0x2b02	; 0x2b02 <send_cmd>
    2f30:	88 23       	and	r24, r24
    2f32:	09 f0       	breq	.+2      	; 0x2f36 <disk_ioctl+0x84>
    2f34:	12 c1       	rjmp	.+548    	; 0x315a <disk_ioctl+0x2a8>
    2f36:	ce 01       	movw	r24, r28
    2f38:	01 96       	adiw	r24, 0x01	; 1
    2f3a:	60 e1       	ldi	r22, 0x10	; 16
    2f3c:	70 e0       	ldi	r23, 0x00	; 0
    2f3e:	0e 94 00 15 	call	0x2a00	; 0x2a00 <rcvr_datablock>
    2f42:	00 97       	sbiw	r24, 0x00	; 0
    2f44:	09 f4       	brne	.+2      	; 0x2f48 <disk_ioctl+0x96>
    2f46:	09 c1       	rjmp	.+530    	; 0x315a <disk_ioctl+0x2a8>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    2f48:	99 81       	ldd	r25, Y+1	; 0x01
    2f4a:	92 95       	swap	r25
    2f4c:	96 95       	lsr	r25
    2f4e:	96 95       	lsr	r25
    2f50:	93 70       	andi	r25, 0x03	; 3
    2f52:	5a 85       	ldd	r21, Y+10	; 0x0a
    2f54:	49 85       	ldd	r20, Y+9	; 0x09
    2f56:	91 30       	cpi	r25, 0x01	; 1
    2f58:	89 f4       	brne	.+34     	; 0x2f7c <disk_ioctl+0xca>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
    2f5a:	85 2f       	mov	r24, r21
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	01 96       	adiw	r24, 0x01	; 1
    2f60:	34 2f       	mov	r19, r20
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	82 0f       	add	r24, r18
    2f66:	93 1f       	adc	r25, r19
					*(DWORD*)buff = (DWORD)csize << 10;
    2f68:	a0 e0       	ldi	r26, 0x00	; 0
    2f6a:	b0 e0       	ldi	r27, 0x00	; 0
    2f6c:	7a e0       	ldi	r23, 0x0A	; 10
    2f6e:	88 0f       	add	r24, r24
    2f70:	99 1f       	adc	r25, r25
    2f72:	aa 1f       	adc	r26, r26
    2f74:	bb 1f       	adc	r27, r27
    2f76:	7a 95       	dec	r23
    2f78:	d1 f7       	brne	.-12     	; 0x2f6e <disk_ioctl+0xbc>
    2f7a:	ae c0       	rjmp	.+348    	; 0x30d8 <disk_ioctl+0x226>
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    2f7c:	42 95       	swap	r20
    2f7e:	46 95       	lsr	r20
    2f80:	46 95       	lsr	r20
    2f82:	43 70       	andi	r20, 0x03	; 3
    2f84:	88 85       	ldd	r24, Y+8	; 0x08
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	88 0f       	add	r24, r24
    2f8a:	99 1f       	adc	r25, r25
    2f8c:	88 0f       	add	r24, r24
    2f8e:	99 1f       	adc	r25, r25
    2f90:	84 0f       	add	r24, r20
    2f92:	91 1d       	adc	r25, r1
    2f94:	01 96       	adiw	r24, 0x01	; 1
    2f96:	2f 81       	ldd	r18, Y+7	; 0x07
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	23 70       	andi	r18, 0x03	; 3
    2f9c:	30 70       	andi	r19, 0x00	; 0
    2f9e:	32 2f       	mov	r19, r18
    2fa0:	22 27       	eor	r18, r18
    2fa2:	33 0f       	add	r19, r19
    2fa4:	33 0f       	add	r19, r19
    2fa6:	82 0f       	add	r24, r18
    2fa8:	93 1f       	adc	r25, r19
					*(DWORD*)buff = (DWORD)csize << (n - 9);
    2faa:	a0 e0       	ldi	r26, 0x00	; 0
    2fac:	b0 e0       	ldi	r27, 0x00	; 0
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    2fae:	2e 81       	ldd	r18, Y+6	; 0x06
    2fb0:	2f 70       	andi	r18, 0x0F	; 15
    2fb2:	4b 85       	ldd	r20, Y+11	; 0x0b
    2fb4:	44 1f       	adc	r20, r20
    2fb6:	44 27       	eor	r20, r20
    2fb8:	44 1f       	adc	r20, r20
    2fba:	24 0f       	add	r18, r20
    2fbc:	2e 5f       	subi	r18, 0xFE	; 254
    2fbe:	35 2f       	mov	r19, r21
    2fc0:	33 70       	andi	r19, 0x03	; 3
    2fc2:	33 0f       	add	r19, r19
    2fc4:	23 0f       	add	r18, r19
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	29 50       	subi	r18, 0x09	; 9
    2fca:	30 40       	sbci	r19, 0x00	; 0
    2fcc:	2b c0       	rjmp	.+86     	; 0x3024 <disk_ioctl+0x172>
				res = RES_OK;
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
    2fce:	80 e0       	ldi	r24, 0x00	; 0
    2fd0:	92 e0       	ldi	r25, 0x02	; 2
    2fd2:	fa 01       	movw	r30, r20
    2fd4:	91 83       	std	Z+1, r25	; 0x01
    2fd6:	80 83       	st	Z, r24
    2fd8:	c3 c0       	rjmp	.+390    	; 0x3160 <disk_ioctl+0x2ae>
			res = RES_OK;
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
    2fda:	e0 90 b3 03 	lds	r14, 0x03B3
    2fde:	e2 fe       	sbrs	r14, 2
    2fe0:	29 c0       	rjmp	.+82     	; 0x3034 <disk_ioctl+0x182>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    2fe2:	8d ec       	ldi	r24, 0xCD	; 205
    2fe4:	40 e0       	ldi	r20, 0x00	; 0
    2fe6:	50 e0       	ldi	r21, 0x00	; 0
    2fe8:	ba 01       	movw	r22, r20
    2fea:	0e 94 81 15 	call	0x2b02	; 0x2b02 <send_cmd>
    2fee:	88 23       	and	r24, r24
    2ff0:	09 f0       	breq	.+2      	; 0x2ff4 <disk_ioctl+0x142>
    2ff2:	b3 c0       	rjmp	.+358    	; 0x315a <disk_ioctl+0x2a8>
					rcvr_spi();
    2ff4:	0e 94 c9 14 	call	0x2992	; 0x2992 <rcvr_spi>
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    2ff8:	ce 01       	movw	r24, r28
    2ffa:	01 96       	adiw	r24, 0x01	; 1
    2ffc:	60 e1       	ldi	r22, 0x10	; 16
    2ffe:	70 e0       	ldi	r23, 0x00	; 0
    3000:	0e 94 00 15 	call	0x2a00	; 0x2a00 <rcvr_datablock>
    3004:	00 97       	sbiw	r24, 0x00	; 0
    3006:	09 f4       	brne	.+2      	; 0x300a <disk_ioctl+0x158>
    3008:	a8 c0       	rjmp	.+336    	; 0x315a <disk_ioctl+0x2a8>
    300a:	30 e3       	ldi	r19, 0x30	; 48
    300c:	e3 2e       	mov	r14, r19
						for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
    300e:	0e 94 c9 14 	call	0x2992	; 0x2992 <rcvr_spi>
    3012:	ea 94       	dec	r14
    3014:	e1 f7       	brne	.-8      	; 0x300e <disk_ioctl+0x15c>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
    3016:	2b 85       	ldd	r18, Y+11	; 0x0b
    3018:	22 95       	swap	r18
    301a:	2f 70       	andi	r18, 0x0F	; 15
    301c:	80 e1       	ldi	r24, 0x10	; 16
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	a0 e0       	ldi	r26, 0x00	; 0
    3022:	b0 e0       	ldi	r27, 0x00	; 0
    3024:	04 c0       	rjmp	.+8      	; 0x302e <disk_ioctl+0x17c>
    3026:	88 0f       	add	r24, r24
    3028:	99 1f       	adc	r25, r25
    302a:	aa 1f       	adc	r26, r26
    302c:	bb 1f       	adc	r27, r27
    302e:	2a 95       	dec	r18
    3030:	d2 f7       	brpl	.-12     	; 0x3026 <disk_ioctl+0x174>
    3032:	52 c0       	rjmp	.+164    	; 0x30d8 <disk_ioctl+0x226>
						res = RES_OK;
					}
				}
			} else {					/* SDC ver 1.XX or MMC */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    3034:	89 e4       	ldi	r24, 0x49	; 73
    3036:	40 e0       	ldi	r20, 0x00	; 0
    3038:	50 e0       	ldi	r21, 0x00	; 0
    303a:	ba 01       	movw	r22, r20
    303c:	0e 94 81 15 	call	0x2b02	; 0x2b02 <send_cmd>
    3040:	88 23       	and	r24, r24
    3042:	09 f0       	breq	.+2      	; 0x3046 <disk_ioctl+0x194>
    3044:	8a c0       	rjmp	.+276    	; 0x315a <disk_ioctl+0x2a8>
    3046:	ce 01       	movw	r24, r28
    3048:	01 96       	adiw	r24, 0x01	; 1
    304a:	60 e1       	ldi	r22, 0x10	; 16
    304c:	70 e0       	ldi	r23, 0x00	; 0
    304e:	0e 94 00 15 	call	0x2a00	; 0x2a00 <rcvr_datablock>
    3052:	00 97       	sbiw	r24, 0x00	; 0
    3054:	09 f4       	brne	.+2      	; 0x3058 <disk_ioctl+0x1a6>
    3056:	81 c0       	rjmp	.+258    	; 0x315a <disk_ioctl+0x2a8>
    3058:	4b 85       	ldd	r20, Y+11	; 0x0b
    305a:	8c 85       	ldd	r24, Y+12	; 0x0c
					if (CardType & CT_SD1) {	/* SDC ver 1.XX */
    305c:	e1 fe       	sbrs	r14, 1
    305e:	1a c0       	rjmp	.+52     	; 0x3094 <disk_ioctl+0x1e2>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    3060:	88 1f       	adc	r24, r24
    3062:	88 27       	eor	r24, r24
    3064:	88 1f       	adc	r24, r24
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	01 96       	adiw	r24, 0x01	; 1
    306a:	50 e0       	ldi	r21, 0x00	; 0
    306c:	4f 73       	andi	r20, 0x3F	; 63
    306e:	50 70       	andi	r21, 0x00	; 0
    3070:	44 0f       	add	r20, r20
    3072:	55 1f       	adc	r21, r21
    3074:	84 0f       	add	r24, r20
    3076:	95 1f       	adc	r25, r21
    3078:	2e 85       	ldd	r18, Y+14	; 0x0e
    307a:	22 95       	swap	r18
    307c:	26 95       	lsr	r18
    307e:	26 95       	lsr	r18
    3080:	23 70       	andi	r18, 0x03	; 3
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	21 50       	subi	r18, 0x01	; 1
    3086:	30 40       	sbci	r19, 0x00	; 0
    3088:	02 c0       	rjmp	.+4      	; 0x308e <disk_ioctl+0x1dc>
    308a:	88 0f       	add	r24, r24
    308c:	99 1f       	adc	r25, r25
    308e:	2a 95       	dec	r18
    3090:	e2 f7       	brpl	.-8      	; 0x308a <disk_ioctl+0x1d8>
    3092:	20 c0       	rjmp	.+64     	; 0x30d4 <disk_ioctl+0x222>
					} else {					/* MMC */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    3094:	28 2f       	mov	r18, r24
    3096:	30 e0       	ldi	r19, 0x00	; 0
    3098:	23 70       	andi	r18, 0x03	; 3
    309a:	30 70       	andi	r19, 0x00	; 0
    309c:	b3 e0       	ldi	r27, 0x03	; 3
    309e:	22 0f       	add	r18, r18
    30a0:	33 1f       	adc	r19, r19
    30a2:	ba 95       	dec	r27
    30a4:	e1 f7       	brne	.-8      	; 0x309e <disk_ioctl+0x1ec>
    30a6:	82 95       	swap	r24
    30a8:	86 95       	lsr	r24
    30aa:	87 70       	andi	r24, 0x07	; 7
    30ac:	28 0f       	add	r18, r24
    30ae:	31 1d       	adc	r19, r1
    30b0:	2f 5f       	subi	r18, 0xFF	; 255
    30b2:	3f 4f       	sbci	r19, 0xFF	; 255
    30b4:	50 e0       	ldi	r21, 0x00	; 0
    30b6:	4c 77       	andi	r20, 0x7C	; 124
    30b8:	50 70       	andi	r21, 0x00	; 0
    30ba:	55 95       	asr	r21
    30bc:	47 95       	ror	r20
    30be:	55 95       	asr	r21
    30c0:	47 95       	ror	r20
    30c2:	4f 5f       	subi	r20, 0xFF	; 255
    30c4:	5f 4f       	sbci	r21, 0xFF	; 255
    30c6:	24 9f       	mul	r18, r20
    30c8:	c0 01       	movw	r24, r0
    30ca:	25 9f       	mul	r18, r21
    30cc:	90 0d       	add	r25, r0
    30ce:	34 9f       	mul	r19, r20
    30d0:	90 0d       	add	r25, r0
    30d2:	11 24       	eor	r1, r1
    30d4:	a0 e0       	ldi	r26, 0x00	; 0
    30d6:	b0 e0       	ldi	r27, 0x00	; 0
    30d8:	f8 01       	movw	r30, r16
    30da:	80 83       	st	Z, r24
    30dc:	91 83       	std	Z+1, r25	; 0x01
    30de:	a2 83       	std	Z+2, r26	; 0x02
    30e0:	b3 83       	std	Z+3, r27	; 0x03
    30e2:	3e c0       	rjmp	.+124    	; 0x3160 <disk_ioctl+0x2ae>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
    30e4:	80 91 b3 03 	lds	r24, 0x03B3
    30e8:	fa 01       	movw	r30, r20
    30ea:	80 83       	st	Z, r24
    30ec:	39 c0       	rjmp	.+114    	; 0x3160 <disk_ioctl+0x2ae>
			res = RES_OK;
			break;

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    30ee:	89 e4       	ldi	r24, 0x49	; 73
    30f0:	01 c0       	rjmp	.+2      	; 0x30f4 <disk_ioctl+0x242>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    30f2:	8a e4       	ldi	r24, 0x4A	; 74
    30f4:	40 e0       	ldi	r20, 0x00	; 0
    30f6:	50 e0       	ldi	r21, 0x00	; 0
    30f8:	ba 01       	movw	r22, r20
    30fa:	0e 94 81 15 	call	0x2b02	; 0x2b02 <send_cmd>
    30fe:	88 23       	and	r24, r24
    3100:	61 f5       	brne	.+88     	; 0x315a <disk_ioctl+0x2a8>
				&& rcvr_datablock(ptr, 16))
    3102:	c8 01       	movw	r24, r16
    3104:	60 e1       	ldi	r22, 0x10	; 16
    3106:	70 e0       	ldi	r23, 0x00	; 0
    3108:	20 c0       	rjmp	.+64     	; 0x314a <disk_ioctl+0x298>
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    310a:	8a e7       	ldi	r24, 0x7A	; 122
    310c:	40 e0       	ldi	r20, 0x00	; 0
    310e:	50 e0       	ldi	r21, 0x00	; 0
    3110:	ba 01       	movw	r22, r20
    3112:	0e 94 81 15 	call	0x2b02	; 0x2b02 <send_cmd>
    3116:	88 23       	and	r24, r24
    3118:	01 f5       	brne	.+64     	; 0x315a <disk_ioctl+0x2a8>
/*-----------------------------------------------------------------------*/
/* Miscellaneous Functions                                               */
/*-----------------------------------------------------------------------*/

#if _USE_IOCTL != 0
DRESULT disk_ioctl (
    311a:	0c 5f       	subi	r16, 0xFC	; 252
    311c:	1f 4f       	sbci	r17, 0xFF	; 255
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    311e:	0e 94 c9 14 	call	0x2992	; 0x2992 <rcvr_spi>
    3122:	f7 01       	movw	r30, r14
    3124:	81 93       	st	Z+, r24
    3126:	7f 01       	movw	r14, r30
    3128:	e0 17       	cp	r30, r16
    312a:	f1 07       	cpc	r31, r17
    312c:	c1 f7       	brne	.-16     	; 0x311e <disk_ioctl+0x26c>
    312e:	18 c0       	rjmp	.+48     	; 0x3160 <disk_ioctl+0x2ae>
				res = RES_OK;
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    3130:	8d ec       	ldi	r24, 0xCD	; 205
    3132:	40 e0       	ldi	r20, 0x00	; 0
    3134:	50 e0       	ldi	r21, 0x00	; 0
    3136:	ba 01       	movw	r22, r20
    3138:	0e 94 81 15 	call	0x2b02	; 0x2b02 <send_cmd>
    313c:	88 23       	and	r24, r24
    313e:	69 f4       	brne	.+26     	; 0x315a <disk_ioctl+0x2a8>
				rcvr_spi();
    3140:	0e 94 c9 14 	call	0x2992	; 0x2992 <rcvr_spi>
				if (rcvr_datablock(ptr, 64))
    3144:	c8 01       	movw	r24, r16
    3146:	60 e4       	ldi	r22, 0x40	; 64
    3148:	70 e0       	ldi	r23, 0x00	; 0
    314a:	0e 94 00 15 	call	0x2a00	; 0x2a00 <rcvr_datablock>
    314e:	00 97       	sbiw	r24, 0x00	; 0
    3150:	39 f4       	brne	.+14     	; 0x3160 <disk_ioctl+0x2ae>
    3152:	03 c0       	rjmp	.+6      	; 0x315a <disk_ioctl+0x2a8>
					res = RES_OK;
			}
			break;

		default:
			res = RES_PARERR;
    3154:	04 e0       	ldi	r16, 0x04	; 4
    3156:	10 e0       	ldi	r17, 0x00	; 0
    3158:	05 c0       	rjmp	.+10     	; 0x3164 <disk_ioctl+0x2b2>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
    315a:	01 e0       	ldi	r16, 0x01	; 1
    315c:	10 e0       	ldi	r17, 0x00	; 0
    315e:	02 c0       	rjmp	.+4      	; 0x3164 <disk_ioctl+0x2b2>

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
				rcvr_spi();
				if (rcvr_datablock(ptr, 64))
					res = RES_OK;
    3160:	00 e0       	ldi	r16, 0x00	; 0
    3162:	10 e0       	ldi	r17, 0x00	; 0

		default:
			res = RES_PARERR;
		}

		deselect();
    3164:	0e 94 de 14 	call	0x29bc	; 0x29bc <deselect>
    3168:	05 c0       	rjmp	.+10     	; 0x3174 <disk_ioctl+0x2c2>
		case 2:		/* Sub control code == 2 (POWER_GET) */
			*(ptr+1) = (BYTE)chk_power();
			res = RES_OK;
			break;
		default :
			res = RES_PARERR;
    316a:	04 e0       	ldi	r16, 0x04	; 4
    316c:	10 e0       	ldi	r17, 0x00	; 0
    316e:	02 c0       	rjmp	.+4      	; 0x3174 <disk_ioctl+0x2c2>
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
    3170:	03 e0       	ldi	r16, 0x03	; 3
    3172:	10 e0       	ldi	r17, 0x00	; 0

		deselect();
	}

	return res;
}
    3174:	c8 01       	movw	r24, r16
    3176:	60 96       	adiw	r28, 0x10	; 16
    3178:	e6 e0       	ldi	r30, 0x06	; 6
    317a:	0c 94 2c 2d 	jmp	0x5a58	; 0x5a58 <__epilogue_restores__+0x18>

0000317e <disk_timerproc>:

void disk_timerproc (void)
{
   BYTE n;

   n=Timer1;                  /* 100Hz decrement timer */
    317e:	80 91 b1 03 	lds	r24, 0x03B1
   if(n)
    3182:	88 23       	and	r24, r24
    3184:	19 f0       	breq	.+6      	; 0x318c <disk_timerproc+0xe>
      Timer1 = --n;
    3186:	81 50       	subi	r24, 0x01	; 1
    3188:	80 93 b1 03 	sts	0x03B1, r24
   n=Timer2;
    318c:	80 91 b2 03 	lds	r24, 0x03B2
   if(n)
    3190:	88 23       	and	r24, r24
    3192:	19 f0       	breq	.+6      	; 0x319a <disk_timerproc+0x1c>
      Timer2 = --n; 
    3194:	81 50       	subi	r24, 0x01	; 1
    3196:	80 93 b2 03 	sts	0x03B2, r24
    319a:	08 95       	ret

0000319c <RTC_write>:
	char dev,		/* Device address */
	uint8_t adr,		/* Write start address */
	uint8_t cnt,		/* Write byte count */
	uint8_t *buff		/* Write data buffer */
)
{
    319c:	a0 e0       	ldi	r26, 0x00	; 0
    319e:	b0 e0       	ldi	r27, 0x00	; 0
    31a0:	e4 ed       	ldi	r30, 0xD4	; 212
    31a2:	f8 e1       	ldi	r31, 0x18	; 24
    31a4:	0c 94 0e 2d 	jmp	0x5a1c	; 0x5a1c <__prologue_saves__+0x14>
    31a8:	18 2f       	mov	r17, r24
    31aa:	06 2f       	mov	r16, r22
    31ac:	f4 2e       	mov	r15, r20
    31ae:	e2 2e       	mov	r14, r18
    31b0:	d3 2e       	mov	r13, r19
	uint8_t *wbuff = buff;
	
	if (!cnt) return FALSE;	
    31b2:	44 23       	and	r20, r20
    31b4:	49 f1       	breq	.+82     	; 0x3208 <RTC_write+0x6c>
	/*
	 * Start in master write mode to transmit data to slave 
	 */
	if (!(TWI_start())) return FALSE;	/* send start condition */	
    31b6:	0e 94 0c 24 	call	0x4818	; 0x4818 <TWI_start>
    31ba:	00 97       	sbiw	r24, 0x00	; 0
    31bc:	29 f1       	breq	.+74     	; 0x3208 <RTC_write+0x6c>

	TWI_send(dev | TW_WRITE);		/* Select device dev */
    31be:	81 2f       	mov	r24, r17
    31c0:	0e 94 26 24 	call	0x484c	; 0x484c <TWI_send>
	if (!(TW_STATUS == TW_MT_SLA_ACK)) return FALSE;	/* Device could not be selected */
    31c4:	80 91 b9 00 	lds	r24, 0x00B9
    31c8:	88 7f       	andi	r24, 0xF8	; 248
    31ca:	88 31       	cpi	r24, 0x18	; 24
    31cc:	e9 f4       	brne	.+58     	; 0x3208 <RTC_write+0x6c>

	/* Send address for writing start position to slave device */	
	TWI_send(adr);
    31ce:	80 2f       	mov	r24, r16
    31d0:	0e 94 26 24 	call	0x484c	; 0x484c <TWI_send>
	if (!(TW_STATUS == TW_MT_DATA_ACK)) return FALSE;	/* No ACK from device return */
    31d4:	80 91 b9 00 	lds	r24, 0x00B9
    31d8:	88 7f       	andi	r24, 0xF8	; 248
    31da:	88 32       	cpi	r24, 0x28	; 40
    31dc:	a9 f4       	brne	.+42     	; 0x3208 <RTC_write+0x6c>
    31de:	8d 2d       	mov	r24, r13
    31e0:	ce 2c       	mov	r12, r14
    31e2:	e6 01       	movw	r28, r12
    31e4:	6e 01       	movw	r12, r28
    31e6:	d8 2e       	mov	r13, r24
    31e8:	e6 01       	movw	r28, r12

	/* send data */
	do {
		TWI_send(*wbuff++);
    31ea:	89 91       	ld	r24, Y+
    31ec:	0e 94 26 24 	call	0x484c	; 0x484c <TWI_send>
		if (!(TW_STATUS == TW_MT_DATA_ACK)) return FALSE;	/* No ACK from device return */
    31f0:	80 91 b9 00 	lds	r24, 0x00B9
    31f4:	88 7f       	andi	r24, 0xF8	; 248
    31f6:	88 32       	cpi	r24, 0x28	; 40
    31f8:	39 f4       	brne	.+14     	; 0x3208 <RTC_write+0x6c>
	} while(--cnt);
    31fa:	fa 94       	dec	r15
    31fc:	b1 f7       	brne	.-20     	; 0x31ea <RTC_write+0x4e>

	/* send stop */
	TWI_stop();
    31fe:	0e 94 3e 24 	call	0x487c	; 0x487c <TWI_stop>

	return TRUE;
    3202:	21 e0       	ldi	r18, 0x01	; 1
    3204:	30 e0       	ldi	r19, 0x00	; 0
    3206:	02 c0       	rjmp	.+4      	; 0x320c <RTC_write+0x70>
	if (!(TW_STATUS == TW_MT_DATA_ACK)) return FALSE;	/* No ACK from device return */

	/* send data */
	do {
		TWI_send(*wbuff++);
		if (!(TW_STATUS == TW_MT_DATA_ACK)) return FALSE;	/* No ACK from device return */
    3208:	20 e0       	ldi	r18, 0x00	; 0
    320a:	30 e0       	ldi	r19, 0x00	; 0

	/* send stop */
	TWI_stop();

	return TRUE;
}
    320c:	c9 01       	movw	r24, r18
    320e:	cd b7       	in	r28, 0x3d	; 61
    3210:	de b7       	in	r29, 0x3e	; 62
    3212:	e8 e0       	ldi	r30, 0x08	; 8
    3214:	0c 94 2a 2d 	jmp	0x5a54	; 0x5a54 <__epilogue_restores__+0x14>

00003218 <rtc_clearHaltBit>:
#include <string.h>
#include "rtc.h"
#include "../twi/twi.h"

BOOL rtc_clearHaltBit(void)
{
    3218:	a1 e0       	ldi	r26, 0x01	; 1
    321a:	b0 e0       	ldi	r27, 0x00	; 0
    321c:	e2 e1       	ldi	r30, 0x12	; 18
    321e:	f9 e1       	ldi	r31, 0x19	; 25
    3220:	0c 94 14 2d 	jmp	0x5a28	; 0x5a28 <__prologue_saves__+0x20>
	uint8_t buf[1];
	buf[0] = 63;
    3224:	8f e3       	ldi	r24, 0x3F	; 63
    3226:	89 83       	std	Y+1, r24	; 0x01
	return RTC_write(0b11010000, 0x0C, 1, buf);
    3228:	80 ed       	ldi	r24, 0xD0	; 208
    322a:	6c e0       	ldi	r22, 0x0C	; 12
    322c:	41 e0       	ldi	r20, 0x01	; 1
    322e:	9e 01       	movw	r18, r28
    3230:	2f 5f       	subi	r18, 0xFF	; 255
    3232:	3f 4f       	sbci	r19, 0xFF	; 255
    3234:	0e 94 ce 18 	call	0x319c	; 0x319c <RTC_write>
}
    3238:	21 96       	adiw	r28, 0x01	; 1
    323a:	e2 e0       	ldi	r30, 0x02	; 2
    323c:	0c 94 30 2d 	jmp	0x5a60	; 0x5a60 <__epilogue_restores__+0x20>

00003240 <RTC_read>:
	char dev,		/* Device address */
	uint8_t adr,		/* Read start address */
	uint8_t cnt,		/* Read byte count */
	uint8_t *buff		/* Read data buffer */
)
{
    3240:	a0 e0       	ldi	r26, 0x00	; 0
    3242:	b0 e0       	ldi	r27, 0x00	; 0
    3244:	e6 e2       	ldi	r30, 0x26	; 38
    3246:	f9 e1       	ldi	r31, 0x19	; 25
    3248:	0c 94 0e 2d 	jmp	0x5a1c	; 0x5a1c <__prologue_saves__+0x14>
    324c:	18 2f       	mov	r17, r24
    324e:	06 2f       	mov	r16, r22
    3250:	f4 2e       	mov	r15, r20
    3252:	e2 2e       	mov	r14, r18
    3254:	d3 2e       	mov	r13, r19
	uint8_t *rbuff = buff;
	uint8_t n;
	BOOL start = FALSE;
	uint8_t data;

	if (!cnt) return FALSE;
    3256:	44 23       	and	r20, r20
    3258:	09 f4       	brne	.+2      	; 0x325c <RTC_read+0x1c>
    325a:	46 c0       	rjmp	.+140    	; 0x32e8 <RTC_read+0xa8>
	/*
	 * Start in master write mode to transmit read start address to slave
	 */
	if (!(TWI_start())) return FALSE;	/* send start condition */				
    325c:	0e 94 0c 24 	call	0x4818	; 0x4818 <TWI_start>
    3260:	00 97       	sbiw	r24, 0x00	; 0
    3262:	09 f4       	brne	.+2      	; 0x3266 <RTC_read+0x26>
    3264:	41 c0       	rjmp	.+130    	; 0x32e8 <RTC_read+0xa8>

	TWI_send(dev | TW_WRITE);		/* Select device dev */
    3266:	81 2f       	mov	r24, r17
    3268:	0e 94 26 24 	call	0x484c	; 0x484c <TWI_send>
	if (!(TW_STATUS == TW_MT_SLA_ACK)) return FALSE;	/* Device could not be selected */
    326c:	80 91 b9 00 	lds	r24, 0x00B9
    3270:	88 7f       	andi	r24, 0xF8	; 248
    3272:	88 31       	cpi	r24, 0x18	; 24
    3274:	c9 f5       	brne	.+114    	; 0x32e8 <RTC_read+0xa8>

	/* Send address for reading start position to slave device */	
	TWI_send(adr);
    3276:	80 2f       	mov	r24, r16
    3278:	0e 94 26 24 	call	0x484c	; 0x484c <TWI_send>
	if (!(TW_STATUS == TW_MT_DATA_ACK)) return FALSE;	/* No ACK from device return */
    327c:	80 91 b9 00 	lds	r24, 0x00B9
    3280:	88 7f       	andi	r24, 0xF8	; 248
    3282:	88 32       	cpi	r24, 0x28	; 40
    3284:	89 f5       	brne	.+98     	; 0x32e8 <RTC_read+0xa8>

	/*
	 * Switch to master read mode to recive data from slave 
	 */	
	if (!(TWI_start())) return FALSE;	/* send start condition */
    3286:	0e 94 0c 24 	call	0x4818	; 0x4818 <TWI_start>
    328a:	00 97       	sbiw	r24, 0x00	; 0
    328c:	69 f1       	breq	.+90     	; 0x32e8 <RTC_read+0xa8>

	TWI_send(dev | TW_READ);		/* Select device dev */
    328e:	81 2f       	mov	r24, r17
    3290:	81 60       	ori	r24, 0x01	; 1
    3292:	0e 94 26 24 	call	0x484c	; 0x484c <TWI_send>
	if (!(TW_STATUS == TW_MR_SLA_ACK)) return FALSE;	/* Device could not be selected */
    3296:	80 91 b9 00 	lds	r24, 0x00B9
    329a:	88 7f       	andi	r24, 0xF8	; 248
    329c:	80 34       	cpi	r24, 0x40	; 64
    329e:	21 f5       	brne	.+72     	; 0x32e8 <RTC_read+0xa8>
    32a0:	8d 2d       	mov	r24, r13
    32a2:	ce 2c       	mov	r12, r14
    32a4:	e6 01       	movw	r28, r12
    32a6:	6e 01       	movw	r12, r28
    32a8:	d8 2e       	mov	r13, r24
    32aa:	e6 01       	movw	r28, r12

	/* Device should start sending now and first stop when do not recive a ACK after data transmition */
	do {					/* Receive data */
		cnt--;
    32ac:	fa 94       	dec	r15
		if (cnt > 0) {
    32ae:	59 f0       	breq	.+22     	; 0x32c6 <RTC_read+0x86>
			data = TWI_rcvr(TRUE);		/* Send ACK after reviced data */
    32b0:	81 e0       	ldi	r24, 0x01	; 1
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	0e 94 30 24 	call	0x4860	; 0x4860 <TWI_rcvr>
			if (!(TW_STATUS == TW_MR_DATA_ACK)) return FALSE; /* Return if an ACK not where send after data recived */
    32b8:	90 91 b9 00 	lds	r25, 0x00B9
    32bc:	98 7f       	andi	r25, 0xF8	; 248
    32be:	90 35       	cpi	r25, 0x50	; 80
    32c0:	99 f4       	brne	.+38     	; 0x32e8 <RTC_read+0xa8>
			*rbuff++ = data;
    32c2:	89 93       	st	Y+, r24
    32c4:	f3 cf       	rjmp	.-26     	; 0x32ac <RTC_read+0x6c>
		} else {
			data = TWI_rcvr(FALSE);		/* Send NACK after reviced data */
    32c6:	80 e0       	ldi	r24, 0x00	; 0
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	0e 94 30 24 	call	0x4860	; 0x4860 <TWI_rcvr>
			if (!(TW_STATUS == TW_MR_DATA_NACK)) return FALSE; /* Return if an NACK not where send after data recived */
    32ce:	80 91 b9 00 	lds	r24, 0x00B9
    32d2:	88 7f       	andi	r24, 0xF8	; 248
    32d4:	88 35       	cpi	r24, 0x58	; 88
    32d6:	41 f4       	brne	.+16     	; 0x32e8 <RTC_read+0xa8>
			*rbuff++ = TWDR;
    32d8:	80 91 bb 00 	lds	r24, 0x00BB
    32dc:	88 83       	st	Y, r24
		}
	} while (cnt);
	
	TWI_stop(); /* send stop condition */
    32de:	0e 94 3e 24 	call	0x487c	; 0x487c <TWI_stop>
	return TRUE;
    32e2:	21 e0       	ldi	r18, 0x01	; 1
    32e4:	30 e0       	ldi	r19, 0x00	; 0
    32e6:	02 c0       	rjmp	.+4      	; 0x32ec <RTC_read+0xac>
			data = TWI_rcvr(TRUE);		/* Send ACK after reviced data */
			if (!(TW_STATUS == TW_MR_DATA_ACK)) return FALSE; /* Return if an ACK not where send after data recived */
			*rbuff++ = data;
		} else {
			data = TWI_rcvr(FALSE);		/* Send NACK after reviced data */
			if (!(TW_STATUS == TW_MR_DATA_NACK)) return FALSE; /* Return if an NACK not where send after data recived */
    32e8:	20 e0       	ldi	r18, 0x00	; 0
    32ea:	30 e0       	ldi	r19, 0x00	; 0
		}
	} while (cnt);
	
	TWI_stop(); /* send stop condition */
	return TRUE;
}
    32ec:	c9 01       	movw	r24, r18
    32ee:	cd b7       	in	r28, 0x3d	; 61
    32f0:	de b7       	in	r29, 0x3e	; 62
    32f2:	e8 e0       	ldi	r30, 0x08	; 8
    32f4:	0c 94 2a 2d 	jmp	0x5a54	; 0x5a54 <__epilogue_restores__+0x14>

000032f8 <rtc_gettime>:

BOOL rtc_gettime (RTC *rtc)
{
    32f8:	a7 e0       	ldi	r26, 0x07	; 7
    32fa:	b0 e0       	ldi	r27, 0x00	; 0
    32fc:	e2 e8       	ldi	r30, 0x82	; 130
    32fe:	f9 e1       	ldi	r31, 0x19	; 25
    3300:	0c 94 12 2d 	jmp	0x5a24	; 0x5a24 <__prologue_saves__+0x1c>
    3304:	8c 01       	movw	r16, r24

	uint8_t buf[7];

	if (!RTC_read(0b11010000, 0x01, 7, buf)) return FALSE;
    3306:	80 ed       	ldi	r24, 0xD0	; 208
    3308:	61 e0       	ldi	r22, 0x01	; 1
    330a:	47 e0       	ldi	r20, 0x07	; 7
    330c:	9e 01       	movw	r18, r28
    330e:	2f 5f       	subi	r18, 0xFF	; 255
    3310:	3f 4f       	sbci	r19, 0xFF	; 255
    3312:	0e 94 20 19 	call	0x3240	; 0x3240 <RTC_read>
    3316:	00 97       	sbiw	r24, 0x00	; 0
    3318:	09 f4       	brne	.+2      	; 0x331c <rtc_gettime+0x24>
    331a:	57 c0       	rjmp	.+174    	; 0x33ca <rtc_gettime+0xd2>

	rtc->sec = (buf[0] & 0x0F) + ((buf[0] >> 4) & 7) * 10;
    331c:	29 81       	ldd	r18, Y+1	; 0x01
    331e:	92 2f       	mov	r25, r18
    3320:	96 95       	lsr	r25
    3322:	96 95       	lsr	r25
    3324:	96 95       	lsr	r25
    3326:	9e 70       	andi	r25, 0x0E	; 14
    3328:	89 2f       	mov	r24, r25
    332a:	88 0f       	add	r24, r24
    332c:	88 0f       	add	r24, r24
    332e:	89 0f       	add	r24, r25
    3330:	2f 70       	andi	r18, 0x0F	; 15
    3332:	82 0f       	add	r24, r18
    3334:	f8 01       	movw	r30, r16
    3336:	87 83       	std	Z+7, r24	; 0x07
	rtc->min = (buf[1] & 0x0F) + (buf[1] >> 4) * 10;
    3338:	2a 81       	ldd	r18, Y+2	; 0x02
    333a:	92 2f       	mov	r25, r18
    333c:	92 95       	swap	r25
    333e:	9f 70       	andi	r25, 0x0F	; 15
    3340:	99 0f       	add	r25, r25
    3342:	89 2f       	mov	r24, r25
    3344:	88 0f       	add	r24, r24
    3346:	88 0f       	add	r24, r24
    3348:	89 0f       	add	r24, r25
    334a:	2f 70       	andi	r18, 0x0F	; 15
    334c:	82 0f       	add	r24, r18
    334e:	86 83       	std	Z+6, r24	; 0x06
	rtc->hour = (buf[2] & 0x0F) + ((buf[2] >> 4) & 3) * 10;
    3350:	2b 81       	ldd	r18, Y+3	; 0x03
    3352:	92 2f       	mov	r25, r18
    3354:	96 95       	lsr	r25
    3356:	96 95       	lsr	r25
    3358:	96 95       	lsr	r25
    335a:	96 70       	andi	r25, 0x06	; 6
    335c:	89 2f       	mov	r24, r25
    335e:	88 0f       	add	r24, r24
    3360:	88 0f       	add	r24, r24
    3362:	89 0f       	add	r24, r25
    3364:	2f 70       	andi	r18, 0x0F	; 15
    3366:	82 0f       	add	r24, r18
    3368:	85 83       	std	Z+5, r24	; 0x05
	rtc->wday = (buf[3] & 0x07);
    336a:	8c 81       	ldd	r24, Y+4	; 0x04
    336c:	87 70       	andi	r24, 0x07	; 7
    336e:	84 83       	std	Z+4, r24	; 0x04
	rtc->mday = (buf[4] & 0x0F) + ((buf[4] >> 4) & 3) * 10;
    3370:	2d 81       	ldd	r18, Y+5	; 0x05
    3372:	92 2f       	mov	r25, r18
    3374:	96 95       	lsr	r25
    3376:	96 95       	lsr	r25
    3378:	96 95       	lsr	r25
    337a:	96 70       	andi	r25, 0x06	; 6
    337c:	89 2f       	mov	r24, r25
    337e:	88 0f       	add	r24, r24
    3380:	88 0f       	add	r24, r24
    3382:	89 0f       	add	r24, r25
    3384:	2f 70       	andi	r18, 0x0F	; 15
    3386:	82 0f       	add	r24, r18
    3388:	83 83       	std	Z+3, r24	; 0x03
	rtc->month = (buf[5] & 0x0F) + (buf[5] >> 4) * 10;
    338a:	2e 81       	ldd	r18, Y+6	; 0x06
    338c:	92 2f       	mov	r25, r18
    338e:	92 95       	swap	r25
    3390:	9f 70       	andi	r25, 0x0F	; 15
    3392:	99 0f       	add	r25, r25
    3394:	89 2f       	mov	r24, r25
    3396:	88 0f       	add	r24, r24
    3398:	88 0f       	add	r24, r24
    339a:	89 0f       	add	r24, r25
    339c:	2f 70       	andi	r18, 0x0F	; 15
    339e:	82 0f       	add	r24, r18
    33a0:	82 83       	std	Z+2, r24	; 0x02
	rtc->year = 2000 + (buf[6] & 0x0F) + (buf[6] >> 4) * 10;
    33a2:	2f 81       	ldd	r18, Y+7	; 0x07
    33a4:	82 2f       	mov	r24, r18
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	8f 70       	andi	r24, 0x0F	; 15
    33aa:	90 70       	andi	r25, 0x00	; 0
    33ac:	80 53       	subi	r24, 0x30	; 48
    33ae:	98 4f       	sbci	r25, 0xF8	; 248
    33b0:	22 95       	swap	r18
    33b2:	2f 70       	andi	r18, 0x0F	; 15
    33b4:	3a e0       	ldi	r19, 0x0A	; 10
    33b6:	23 9f       	mul	r18, r19
    33b8:	90 01       	movw	r18, r0
    33ba:	11 24       	eor	r1, r1
    33bc:	82 0f       	add	r24, r18
    33be:	93 1f       	adc	r25, r19
    33c0:	91 83       	std	Z+1, r25	; 0x01
    33c2:	80 83       	st	Z, r24

	return TRUE;
    33c4:	21 e0       	ldi	r18, 0x01	; 1
    33c6:	30 e0       	ldi	r19, 0x00	; 0
    33c8:	02 c0       	rjmp	.+4      	; 0x33ce <rtc_gettime+0xd6>
BOOL rtc_gettime (RTC *rtc)
{

	uint8_t buf[7];

	if (!RTC_read(0b11010000, 0x01, 7, buf)) return FALSE;
    33ca:	20 e0       	ldi	r18, 0x00	; 0
    33cc:	30 e0       	ldi	r19, 0x00	; 0
/*   rtc->month = 5;*/
/*   rtc->year = 2006;*/


   return TRUE;
}
    33ce:	c9 01       	movw	r24, r18
    33d0:	27 96       	adiw	r28, 0x07	; 7
    33d2:	e4 e0       	ldi	r30, 0x04	; 4
    33d4:	0c 94 2e 2d 	jmp	0x5a5c	; 0x5a5c <__epilogue_restores__+0x1c>

000033d8 <rtc_settime>:

BOOL rtc_settime (const RTC *rtc)
{
    33d8:	a7 e0       	ldi	r26, 0x07	; 7
    33da:	b0 e0       	ldi	r27, 0x00	; 0
    33dc:	e2 ef       	ldi	r30, 0xF2	; 242
    33de:	f9 e1       	ldi	r31, 0x19	; 25
    33e0:	0c 94 14 2d 	jmp	0x5a28	; 0x5a28 <__prologue_saves__+0x20>
    33e4:	fc 01       	movw	r30, r24
	uint8_t buf[7];

	buf[0] = ((rtc->sec / 10) * 16 + rtc->sec % 10) & 0x7F;
    33e6:	87 81       	ldd	r24, Z+7	; 0x07
    33e8:	2a e0       	ldi	r18, 0x0A	; 10
    33ea:	62 2f       	mov	r22, r18
    33ec:	0e 94 af 2c 	call	0x595e	; 0x595e <__udivmodqi4>
    33f0:	82 95       	swap	r24
    33f2:	80 7f       	andi	r24, 0xF0	; 240
    33f4:	89 0f       	add	r24, r25
    33f6:	8f 77       	andi	r24, 0x7F	; 127
    33f8:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = ((rtc->min / 10) * 16 + rtc->min % 10) & 0xF7;
    33fa:	86 81       	ldd	r24, Z+6	; 0x06
    33fc:	0e 94 af 2c 	call	0x595e	; 0x595e <__udivmodqi4>
    3400:	82 95       	swap	r24
    3402:	80 7f       	andi	r24, 0xF0	; 240
    3404:	89 0f       	add	r24, r25
    3406:	87 7f       	andi	r24, 0xF7	; 247
    3408:	8a 83       	std	Y+2, r24	; 0x02
	buf[2] = ((rtc->hour / 10) * 16 + rtc->hour % 10) & 0x3F;
    340a:	85 81       	ldd	r24, Z+5	; 0x05
    340c:	0e 94 af 2c 	call	0x595e	; 0x595e <__udivmodqi4>
    3410:	82 95       	swap	r24
    3412:	80 7f       	andi	r24, 0xF0	; 240
    3414:	89 0f       	add	r24, r25
    3416:	8f 73       	andi	r24, 0x3F	; 63
    3418:	8b 83       	std	Y+3, r24	; 0x03
	buf[3] = rtc->wday & 7;
    341a:	84 81       	ldd	r24, Z+4	; 0x04
    341c:	87 70       	andi	r24, 0x07	; 7
    341e:	8c 83       	std	Y+4, r24	; 0x04
	buf[4] = ((rtc->mday / 10) * 16 + rtc->mday % 10) & 0x3F;
    3420:	83 81       	ldd	r24, Z+3	; 0x03
    3422:	0e 94 af 2c 	call	0x595e	; 0x595e <__udivmodqi4>
    3426:	82 95       	swap	r24
    3428:	80 7f       	andi	r24, 0xF0	; 240
    342a:	89 0f       	add	r24, r25
    342c:	8f 73       	andi	r24, 0x3F	; 63
    342e:	8d 83       	std	Y+5, r24	; 0x05
	buf[5] = ((rtc->month / 10) * 16 + rtc->month % 10) & 0x1F;
    3430:	82 81       	ldd	r24, Z+2	; 0x02
    3432:	0e 94 af 2c 	call	0x595e	; 0x595e <__udivmodqi4>
    3436:	82 95       	swap	r24
    3438:	80 7f       	andi	r24, 0xF0	; 240
    343a:	89 0f       	add	r24, r25
    343c:	8f 71       	andi	r24, 0x1F	; 31
    343e:	8e 83       	std	Y+6, r24	; 0x06
	buf[6] = ((rtc->year - 2000) / 10) * 16 + (rtc->year - 2000) % 10;
    3440:	80 81       	ld	r24, Z
    3442:	91 81       	ldd	r25, Z+1	; 0x01
    3444:	80 5d       	subi	r24, 0xD0	; 208
    3446:	97 40       	sbci	r25, 0x07	; 7
    3448:	6a e0       	ldi	r22, 0x0A	; 10
    344a:	70 e0       	ldi	r23, 0x00	; 0
    344c:	0e 94 bb 2c 	call	0x5976	; 0x5976 <__udivmodhi4>
    3450:	62 95       	swap	r22
    3452:	60 7f       	andi	r22, 0xF0	; 240
    3454:	68 0f       	add	r22, r24
    3456:	6f 83       	std	Y+7, r22	; 0x07

	return RTC_write(0b11010000, 0x01, 7, buf);
    3458:	80 ed       	ldi	r24, 0xD0	; 208
    345a:	61 e0       	ldi	r22, 0x01	; 1
    345c:	47 e0       	ldi	r20, 0x07	; 7
    345e:	9e 01       	movw	r18, r28
    3460:	2f 5f       	subi	r18, 0xFF	; 255
    3462:	3f 4f       	sbci	r19, 0xFF	; 255
    3464:	0e 94 ce 18 	call	0x319c	; 0x319c <RTC_write>
}
    3468:	27 96       	adiw	r28, 0x07	; 7
    346a:	e2 e0       	ldi	r30, 0x02	; 2
    346c:	0c 94 30 2d 	jmp	0x5a60	; 0x5a60 <__epilogue_restores__+0x20>

00003470 <rtc_init>:

BOOL rtc_init (void)
{
	/* This function should also test the RTC to ensure a valid clock is returned but this is work for the future */
	rtc_clearHaltBit();	/* Before this is cleared time read from RTC is time of last system power down */
    3470:	0e 94 0c 19 	call	0x3218	; 0x3218 <rtc_clearHaltBit>

	return TRUE;
} 
    3474:	81 e0       	ldi	r24, 0x01	; 1
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	08 95       	ret

0000347a <can_clear_all_mob>:
U8  mob_number;
/*
    U8  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    347a:	80 e0       	ldi	r24, 0x00	; 0
    {
        CANPAGE = (mob_number << 4);    //! Page index
    347c:	98 2f       	mov	r25, r24
    347e:	92 95       	swap	r25
    3480:	90 7f       	andi	r25, 0xF0	; 240
    3482:	90 93 ed 00 	sts	0x00ED, r25
        Can_clear_mob();                //! All MOb Registers=0
    3486:	ee ee       	ldi	r30, 0xEE	; 238
    3488:	f0 e0       	ldi	r31, 0x00	; 0
    348a:	11 92       	st	Z+, r1
    348c:	e8 3f       	cpi	r30, 0xF8	; 248
    348e:	f1 05       	cpc	r31, r1
    3490:	e1 f7       	brne	.-8      	; 0x348a <can_clear_all_mob+0x10>
U8  mob_number;
/*
    U8  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    3492:	8f 5f       	subi	r24, 0xFF	; 255
    3494:	8f 30       	cpi	r24, 0x0F	; 15
    3496:	91 f7       	brne	.-28     	; 0x347c <can_clear_all_mob+0x2>
        {
            CANMSG = 0;                 //! MOb data FIFO
        }
*/
    }
}
    3498:	08 95       	ret

0000349a <can_get_mob_free>:
//------------------------------------------------------------------------------
U8 can_get_mob_free(void)
{
    U8 mob_number, page_saved;

    page_saved = CANPAGE;
    349a:	20 91 ed 00 	lds	r18, 0x00ED
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    349e:	80 e0       	ldi	r24, 0x00	; 0
    {
        Can_set_mob(mob_number);
    34a0:	98 2f       	mov	r25, r24
    34a2:	92 95       	swap	r25
    34a4:	90 7f       	andi	r25, 0xF0	; 240
    34a6:	90 93 ed 00 	sts	0x00ED, r25
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
    34aa:	90 91 ef 00 	lds	r25, 0x00EF
    34ae:	90 7c       	andi	r25, 0xC0	; 192
    34b0:	19 f4       	brne	.+6      	; 0x34b8 <can_get_mob_free+0x1e>
        {
            CANPAGE = page_saved;
    34b2:	20 93 ed 00 	sts	0x00ED, r18
            return (mob_number);
    34b6:	08 95       	ret
U8 can_get_mob_free(void)
{
    U8 mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    34b8:	8f 5f       	subi	r24, 0xFF	; 255
    34ba:	8f 30       	cpi	r24, 0x0F	; 15
    34bc:	89 f7       	brne	.-30     	; 0x34a0 <can_get_mob_free+0x6>
        {
            CANPAGE = page_saved;
            return (mob_number);
        }
    }
    CANPAGE = page_saved;
    34be:	20 93 ed 00 	sts	0x00ED, r18
    return (NO_MOB);
    34c2:	8f ef       	ldi	r24, 0xFF	; 255
}
    34c4:	08 95       	ret

000034c6 <can_get_mob_status>:
U8 can_get_mob_status(void)
{
    U8 mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
    34c6:	80 91 ef 00 	lds	r24, 0x00EF
    34ca:	80 7c       	andi	r24, 0xC0	; 192
    34cc:	69 f0       	breq	.+26     	; 0x34e8 <can_get_mob_status+0x22>

    canstmob_copy = CANSTMOB; // Copy for test integrity
    34ce:	90 91 ee 00 	lds	r25, 0x00EE

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
    34d2:	89 2f       	mov	r24, r25
    34d4:	80 7e       	andi	r24, 0xE0	; 224
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
    34d6:	80 32       	cpi	r24, 0x20	; 32
    34d8:	41 f0       	breq	.+16     	; 0x34ea <can_get_mob_status+0x24>
    34da:	80 34       	cpi	r24, 0x40	; 64
    34dc:	31 f0       	breq	.+12     	; 0x34ea <can_get_mob_status+0x24>
         (mob_status==MOB_TX_COMPLETED) ||   \
    34de:	80 3a       	cpi	r24, 0xA0	; 160
    34e0:	21 f0       	breq	.+8      	; 0x34ea <can_get_mob_status+0x24>
    // - MOb Status bit_0 = MOB_ACK_ERROR
    // - MOb Status bit_1 = MOB_FORM_ERROR
    // - MOb Status bit_2 = MOB_CRC_ERROR
    // - MOb Status bit_3 = MOB_STUFF_ERROR
    // - MOb Status bit_4 = MOB_BIT_ERROR
    mob_status = canstmob_copy & ERR_MOB_MSK;
    34e2:	89 2f       	mov	r24, r25
    34e4:	8f 71       	andi	r24, 0x1F	; 31
    34e6:	08 95       	ret
U8 can_get_mob_status(void)
{
    U8 mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
    34e8:	8f ef       	ldi	r24, 0xFF	; 255
    mob_status = canstmob_copy & ERR_MOB_MSK;
    if (mob_status != 0) { return(mob_status); }

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
}
    34ea:	08 95       	ret

000034ec <can_get_data>:
//------------------------------------------------------------------------------
void can_get_data(U8* p_can_message_data)
{
    U8 data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
    34ec:	60 e0       	ldi	r22, 0x00	; 0
    34ee:	07 c0       	rjmp	.+14     	; 0x34fe <can_get_data+0x12>
    {
        *(p_can_message_data + data_index) = CANMSG;
    34f0:	20 91 fa 00 	lds	r18, 0x00FA
    34f4:	48 0f       	add	r20, r24
    34f6:	59 1f       	adc	r21, r25
    34f8:	fa 01       	movw	r30, r20
    34fa:	20 83       	st	Z, r18
//------------------------------------------------------------------------------
void can_get_data(U8* p_can_message_data)
{
    U8 data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
    34fc:	6f 5f       	subi	r22, 0xFF	; 255
    34fe:	20 91 ef 00 	lds	r18, 0x00EF
    3502:	46 2f       	mov	r20, r22
    3504:	50 e0       	ldi	r21, 0x00	; 0
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	2f 70       	andi	r18, 0x0F	; 15
    350a:	30 70       	andi	r19, 0x00	; 0
    350c:	42 17       	cp	r20, r18
    350e:	53 07       	cpc	r21, r19
    3510:	7c f3       	brlt	.-34     	; 0x34f0 <can_get_data+0x4>
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
    3512:	08 95       	ret

00003514 <can_auto_baudrate>:
//! @return Baudrate Status
//!         ==0: research of bit timing configuration failed
//!         ==1: baudrate performed
//------------------------------------------------------------------------------
U8 can_auto_baudrate (U8 mode)
{
    3514:	a0 e0       	ldi	r26, 0x00	; 0
    3516:	b0 e0       	ldi	r27, 0x00	; 0
    3518:	e0 e9       	ldi	r30, 0x90	; 144
    351a:	fa e1       	ldi	r31, 0x1A	; 26
    351c:	0c 94 0d 2d 	jmp	0x5a1a	; 0x5a1a <__prologue_saves__+0x12>
    conf_index = 0;
    bt_not_found = 1;

    //! --- Init segment variables with MIN values if mode=0
    //!     or init segment variables with CANBTx if mode=1
    if (mode==0)
    3520:	88 23       	and	r24, r24
    3522:	09 f4       	brne	.+2      	; 0x3526 <can_auto_baudrate+0x12>
    3524:	4f c0       	rjmp	.+158    	; 0x35c4 <can_auto_baudrate+0xb0>
        try_conf = 1;       //! Try this configuration
        wait_for_rx = 1;    //! Enable "while (wait_for_rx ..." loop
    }
    else //! mode = 1
    {
        brp  = Max ((((CANBT1 &  BRP_MSK) >> 1) +1) , BRP_MIN );
    3526:	80 91 e2 00 	lds	r24, 0x00E2
    352a:	8e 77       	andi	r24, 0x7E	; 126
    352c:	51 f0       	breq	.+20     	; 0x3542 <can_auto_baudrate+0x2e>
    352e:	80 91 e2 00 	lds	r24, 0x00E2
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	8e 77       	andi	r24, 0x7E	; 126
    3536:	90 70       	andi	r25, 0x00	; 0
    3538:	95 95       	asr	r25
    353a:	87 95       	ror	r24
    353c:	18 2f       	mov	r17, r24
    353e:	1f 5f       	subi	r17, 0xFF	; 255
    3540:	01 c0       	rjmp	.+2      	; 0x3544 <can_auto_baudrate+0x30>
    3542:	11 e0       	ldi	r17, 0x01	; 1
        prs  = Max ((((CANBT2 &  PRS_MSK) >> 1) +1) , PRS_MIN );
    3544:	80 91 e3 00 	lds	r24, 0x00E3
    3548:	8e 70       	andi	r24, 0x0E	; 14
    354a:	49 f0       	breq	.+18     	; 0x355e <can_auto_baudrate+0x4a>
    354c:	a0 91 e3 00 	lds	r26, 0x00E3
    3550:	b0 e0       	ldi	r27, 0x00	; 0
    3552:	ae 70       	andi	r26, 0x0E	; 14
    3554:	b0 70       	andi	r27, 0x00	; 0
    3556:	b5 95       	asr	r27
    3558:	a7 95       	ror	r26
    355a:	af 5f       	subi	r26, 0xFF	; 255
    355c:	01 c0       	rjmp	.+2      	; 0x3560 <can_auto_baudrate+0x4c>
    355e:	a1 e0       	ldi	r26, 0x01	; 1
        phs1 = Max ((((CANBT3 & PHS1_MSK) >> 1) +1) , PHS1_MIN);
    3560:	80 91 e4 00 	lds	r24, 0x00E4
    3564:	8e 70       	andi	r24, 0x0E	; 14
    3566:	83 30       	cpi	r24, 0x03	; 3
    3568:	48 f0       	brcs	.+18     	; 0x357c <can_auto_baudrate+0x68>
    356a:	e0 91 e4 00 	lds	r30, 0x00E4
    356e:	f0 e0       	ldi	r31, 0x00	; 0
    3570:	ee 70       	andi	r30, 0x0E	; 14
    3572:	f0 70       	andi	r31, 0x00	; 0
    3574:	f5 95       	asr	r31
    3576:	e7 95       	ror	r30
    3578:	ef 5f       	subi	r30, 0xFF	; 255
    357a:	01 c0       	rjmp	.+2      	; 0x357e <can_auto_baudrate+0x6a>
    357c:	e2 e0       	ldi	r30, 0x02	; 2
        phs2 = Max ((((CANBT3 & PHS2_MSK) >> 4) +1) , PHS2_MIN);
    357e:	80 91 e4 00 	lds	r24, 0x00E4
    3582:	80 77       	andi	r24, 0x70	; 112
    3584:	81 31       	cpi	r24, 0x11	; 17
    3586:	68 f0       	brcs	.+26     	; 0x35a2 <can_auto_baudrate+0x8e>
    3588:	80 91 e4 00 	lds	r24, 0x00E4
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	80 77       	andi	r24, 0x70	; 112
    3590:	90 70       	andi	r25, 0x00	; 0
    3592:	34 e0       	ldi	r19, 0x04	; 4
    3594:	95 95       	asr	r25
    3596:	87 95       	ror	r24
    3598:	3a 95       	dec	r19
    359a:	e1 f7       	brne	.-8      	; 0x3594 <can_auto_baudrate+0x80>
    359c:	f8 2f       	mov	r31, r24
    359e:	ff 5f       	subi	r31, 0xFF	; 255
    35a0:	01 c0       	rjmp	.+2      	; 0x35a4 <can_auto_baudrate+0x90>
    35a2:	f2 e0       	ldi	r31, 0x02	; 2
        ntq  = Max ((prs + phs1 + phs2 + 1) , NTQ_MIN);
    35a4:	8a 2f       	mov	r24, r26
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	8e 0f       	add	r24, r30
    35aa:	91 1d       	adc	r25, r1
    35ac:	8f 0f       	add	r24, r31
    35ae:	91 1d       	adc	r25, r1
    35b0:	88 30       	cpi	r24, 0x08	; 8
    35b2:	91 05       	cpc	r25, r1
    35b4:	7c f0       	brlt	.+30     	; 0x35d4 <can_auto_baudrate+0xc0>
    35b6:	ba 2f       	mov	r27, r26
    35b8:	bf 5f       	subi	r27, 0xFF	; 255
    35ba:	be 0f       	add	r27, r30
    35bc:	bf 0f       	add	r27, r31
        phs1_inc = evaluate = 1;   //! To enter in "while (evaluate ..." loop
        try_conf = 0;       //! Look for the next configuration
        wait_for_rx = 0;    //! Skip "while (wait_for_rx ..." loop
    35be:	60 e0       	ldi	r22, 0x00	; 0
        brp  = Max ((((CANBT1 &  BRP_MSK) >> 1) +1) , BRP_MIN );
        prs  = Max ((((CANBT2 &  PRS_MSK) >> 1) +1) , PRS_MIN );
        phs1 = Max ((((CANBT3 & PHS1_MSK) >> 1) +1) , PHS1_MIN);
        phs2 = Max ((((CANBT3 & PHS2_MSK) >> 4) +1) , PHS2_MIN);
        ntq  = Max ((prs + phs1 + phs2 + 1) , NTQ_MIN);
        phs1_inc = evaluate = 1;   //! To enter in "while (evaluate ..." loop
    35c0:	71 e0       	ldi	r23, 0x01	; 1
    35c2:	0b c0       	rjmp	.+22     	; 0x35da <can_auto_baudrate+0xc6>
        ntq  = NTQ_MIN;
        phs1 = PHS1_MIN;
        phs2 = PHS2_MIN;
        prs  = ntq - ( phs1 + phs2 + 1 );
        try_conf = 1;       //! Try this configuration
        wait_for_rx = 1;    //! Enable "while (wait_for_rx ..." loop
    35c4:	61 e0       	ldi	r22, 0x01	; 1
    U8  ovrtim_flag=0;                          //! Timer overflow count
    U16 conf_index;                             //! Count of bit timing configuration tried
    U8  bt_performed;                           //! Return flag

    //! --- Default setting
    phs1_inc = evaluate = 0;
    35c6:	70 e0       	ldi	r23, 0x00	; 0
    if (mode==0)
    {
        brp  = BRP_MIN;
        ntq  = NTQ_MIN;
        phs1 = PHS1_MIN;
        phs2 = PHS2_MIN;
    35c8:	f2 e0       	ldi	r31, 0x02	; 2
    //!     or init segment variables with CANBTx if mode=1
    if (mode==0)
    {
        brp  = BRP_MIN;
        ntq  = NTQ_MIN;
        phs1 = PHS1_MIN;
    35ca:	e2 e0       	ldi	r30, 0x02	; 2
    //! --- Init segment variables with MIN values if mode=0
    //!     or init segment variables with CANBTx if mode=1
    if (mode==0)
    {
        brp  = BRP_MIN;
        ntq  = NTQ_MIN;
    35cc:	b8 e0       	ldi	r27, 0x08	; 8
        phs1 = PHS1_MIN;
        phs2 = PHS2_MIN;
        prs  = ntq - ( phs1 + phs2 + 1 );
    35ce:	a3 e0       	ldi	r26, 0x03	; 3

    //! --- Init segment variables with MIN values if mode=0
    //!     or init segment variables with CANBTx if mode=1
    if (mode==0)
    {
        brp  = BRP_MIN;
    35d0:	11 e0       	ldi	r17, 0x01	; 1
    35d2:	03 c0       	rjmp	.+6      	; 0x35da <can_auto_baudrate+0xc6>
        phs1 = Max ((((CANBT3 & PHS1_MSK) >> 1) +1) , PHS1_MIN);
        phs2 = Max ((((CANBT3 & PHS2_MSK) >> 4) +1) , PHS2_MIN);
        ntq  = Max ((prs + phs1 + phs2 + 1) , NTQ_MIN);
        phs1_inc = evaluate = 1;   //! To enter in "while (evaluate ..." loop
        try_conf = 0;       //! Look for the next configuration
        wait_for_rx = 0;    //! Skip "while (wait_for_rx ..." loop
    35d4:	60 e0       	ldi	r22, 0x00	; 0
        brp  = Max ((((CANBT1 &  BRP_MSK) >> 1) +1) , BRP_MIN );
        prs  = Max ((((CANBT2 &  PRS_MSK) >> 1) +1) , PRS_MIN );
        phs1 = Max ((((CANBT3 & PHS1_MSK) >> 1) +1) , PHS1_MIN);
        phs2 = Max ((((CANBT3 & PHS2_MSK) >> 4) +1) , PHS2_MIN);
        ntq  = Max ((prs + phs1 + phs2 + 1) , NTQ_MIN);
        phs1_inc = evaluate = 1;   //! To enter in "while (evaluate ..." loop
    35d6:	71 e0       	ldi	r23, 0x01	; 1
    {
        brp  = Max ((((CANBT1 &  BRP_MSK) >> 1) +1) , BRP_MIN );
        prs  = Max ((((CANBT2 &  PRS_MSK) >> 1) +1) , PRS_MIN );
        phs1 = Max ((((CANBT3 & PHS1_MSK) >> 1) +1) , PHS1_MIN);
        phs2 = Max ((((CANBT3 & PHS2_MSK) >> 4) +1) , PHS2_MIN);
        ntq  = Max ((prs + phs1 + phs2 + 1) , NTQ_MIN);
    35d8:	b8 e0       	ldi	r27, 0x08	; 8
        try_conf = 0;       //! Look for the next configuration
        wait_for_rx = 0;    //! Skip "while (wait_for_rx ..." loop
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
    35da:	80 e0       	ldi	r24, 0x00	; 0
    {
        Can_set_mob(u8_temp0);  //! Page index
    35dc:	98 2f       	mov	r25, r24
    35de:	92 95       	swap	r25
    35e0:	90 7f       	andi	r25, 0xF0	; 240
    35e2:	90 93 ed 00 	sts	0x00ED, r25
        Can_clear_mob();        //! All MOb Registers = 0x00
    35e6:	ce ee       	ldi	r28, 0xEE	; 238
    35e8:	d0 e0       	ldi	r29, 0x00	; 0
    35ea:	19 92       	st	Y+, r1
    35ec:	c8 3f       	cpi	r28, 0xF8	; 248
    35ee:	d1 05       	cpc	r29, r1
    35f0:	e1 f7       	brne	.-8      	; 0x35ea <can_auto_baudrate+0xd6>
        try_conf = 0;       //! Look for the next configuration
        wait_for_rx = 0;    //! Skip "while (wait_for_rx ..." loop
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
    35f2:	8f 5f       	subi	r24, 0xFF	; 255
    35f4:	8f 30       	cpi	r24, 0x0F	; 15
    35f6:	91 f7       	brne	.-28     	; 0x35dc <can_auto_baudrate+0xc8>
    35f8:	06 2f       	mov	r16, r22
    35fa:	e7 2e       	mov	r14, r23
    35fc:	40 e0       	ldi	r20, 0x00	; 0
    35fe:	50 e0       	ldi	r21, 0x00	; 0
    3600:	dd 24       	eor	r13, r13
            CANTCON = (U8)(conf_index >> 3);

            //! --- MOb configuration
            Can_set_mob(MOB_0);                 //! Use MOb-0
            CANSTMOB = 0;                       //! Reset MOb status (undone by "Can_reset()")
            CANCDMOB = (MOB_Rx_ENA  << CONMOB); //! MOb 0 in receive mode
    3602:	20 e8       	ldi	r18, 0x80	; 128
    3604:	f2 2e       	mov	r15, r18

            //! CAN controller configuration
            CANGCON = (1<<LISTEN) | (1<<ENASTB);//! Enable CAN controller in "listen" mode
    3606:	9a e0       	ldi	r25, 0x0A	; 10
    3608:	c9 2e       	mov	r12, r25
            while ((CANGSTA & (1<<ENFG)) == 0); //! Wait for Enable OK
            CANGIT = 0xFF;                      //! Reset General errors and OVRTIM flag
    360a:	bb 24       	eor	r11, r11
    360c:	ba 94       	dec	r11
    360e:	01 c0       	rjmp	.+2      	; 0x3612 <can_auto_baudrate+0xfe>
    {
        Can_set_mob(u8_temp0);  //! Page index
        Can_clear_mob();        //! All MOb Registers = 0x00
    }

    while (bt_not_found == 1)
    3610:	ee 24       	eor	r14, r14
    {
        if (try_conf == 1)
    3612:	01 30       	cpi	r16, 0x01	; 1
    3614:	09 f0       	breq	.+2      	; 0x3618 <can_auto_baudrate+0x104>
    3616:	7b c0       	rjmp	.+246    	; 0x370e <can_auto_baudrate+0x1fa>
        {
            Can_reset();
    3618:	00 93 d8 00 	sts	0x00D8, r16
            conf_index++;
    361c:	4f 5f       	subi	r20, 0xFF	; 255
    361e:	5f 4f       	sbci	r21, 0xFF	; 255
            ovrtim_flag=0;

            //! --- CANBTx registers update (sjw = phs2/2, 3 sample points)
            CANBT1 = ((brp-1) << BRP);
    3620:	81 2f       	mov	r24, r17
    3622:	81 50       	subi	r24, 0x01	; 1
    3624:	88 0f       	add	r24, r24
    3626:	80 93 e2 00 	sts	0x00E2, r24
            CANBT2 = (((phs2 >> 1)-1) << SJW) |((prs-1) << PRS);
    362a:	2f 2f       	mov	r18, r31
    362c:	26 95       	lsr	r18
    362e:	30 e0       	ldi	r19, 0x00	; 0
    3630:	21 50       	subi	r18, 0x01	; 1
    3632:	30 40       	sbci	r19, 0x00	; 0
    3634:	85 e0       	ldi	r24, 0x05	; 5
    3636:	22 0f       	add	r18, r18
    3638:	33 1f       	adc	r19, r19
    363a:	8a 95       	dec	r24
    363c:	e1 f7       	brne	.-8      	; 0x3636 <can_auto_baudrate+0x122>
    363e:	8a 2f       	mov	r24, r26
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	01 97       	sbiw	r24, 0x01	; 1
    3644:	88 0f       	add	r24, r24
    3646:	99 1f       	adc	r25, r25
    3648:	82 2b       	or	r24, r18
    364a:	80 93 e3 00 	sts	0x00E3, r24
            CANBT3 = (((phs2-1) << PHS2) | ((phs1-1) << PHS1) | (1<<SMP));
    364e:	2f 2f       	mov	r18, r31
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	21 50       	subi	r18, 0x01	; 1
    3654:	30 40       	sbci	r19, 0x00	; 0
    3656:	84 e0       	ldi	r24, 0x04	; 4
    3658:	22 0f       	add	r18, r18
    365a:	33 1f       	adc	r19, r19
    365c:	8a 95       	dec	r24
    365e:	e1 f7       	brne	.-8      	; 0x3658 <can_auto_baudrate+0x144>
    3660:	8e 2f       	mov	r24, r30
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	01 97       	sbiw	r24, 0x01	; 1
    3666:	88 0f       	add	r24, r24
    3668:	99 1f       	adc	r25, r25
    366a:	82 2b       	or	r24, r18
    366c:	81 60       	ori	r24, 0x01	; 1
    366e:	80 93 e4 00 	sts	0x00E4, r24

            //! --- Set CAN-Timer - Used for time-out
            //!     There are 641 (0x281) possible evaluations. The first one provides the faster
            //!         the faster bit timing, the last one gives the slower. It is necessary to
            //!         modulate the time-out versus bit timing (0x281>>3=0x50, matching an U8).
            CANTCON = (U8)(conf_index >> 3);
    3672:	ca 01       	movw	r24, r20
    3674:	23 e0       	ldi	r18, 0x03	; 3
    3676:	96 95       	lsr	r25
    3678:	87 95       	ror	r24
    367a:	2a 95       	dec	r18
    367c:	e1 f7       	brne	.-8      	; 0x3676 <can_auto_baudrate+0x162>
    367e:	80 93 e5 00 	sts	0x00E5, r24

            //! --- MOb configuration
            Can_set_mob(MOB_0);                 //! Use MOb-0
    3682:	10 92 ed 00 	sts	0x00ED, r1
            CANSTMOB = 0;                       //! Reset MOb status (undone by "Can_reset()")
    3686:	10 92 ee 00 	sts	0x00EE, r1
            CANCDMOB = (MOB_Rx_ENA  << CONMOB); //! MOb 0 in receive mode
    368a:	f0 92 ef 00 	sts	0x00EF, r15

            //! CAN controller configuration
            CANGCON = (1<<LISTEN) | (1<<ENASTB);//! Enable CAN controller in "listen" mode
    368e:	c0 92 d8 00 	sts	0x00D8, r12
            while ((CANGSTA & (1<<ENFG)) == 0); //! Wait for Enable OK
    3692:	80 91 d9 00 	lds	r24, 0x00D9
    3696:	82 ff       	sbrs	r24, 2
    3698:	fc cf       	rjmp	.-8      	; 0x3692 <can_auto_baudrate+0x17e>
            CANGIT = 0xFF;                      //! Reset General errors and OVRTIM flag
    369a:	b0 92 da 00 	sts	0x00DA, r11
    {
        if (try_conf == 1)
        {
            Can_reset();
            conf_index++;
            ovrtim_flag=0;
    369e:	dd 24       	eor	r13, r13
    36a0:	36 c0       	rjmp	.+108    	; 0x370e <can_auto_baudrate+0x1fa>
        //!     Try to perform a CAN message reception in "LISTEN" mode without error and
        //!     before a time_out done by CAN-Timer.
        //!     Else gives the hand to "EVALUATE LOOP" to have a new set of bit timing.
        while (wait_for_rx == 1)
        {
            u8_temp0 = CANSTMOB;
    36a2:	80 91 ee 00 	lds	r24, 0x00EE
            //! --- RxOK received ?
            if ((u8_temp0 & (1<<RXOK)) != 0)
    36a6:	90 e0       	ldi	r25, 0x00	; 0
    36a8:	85 ff       	sbrs	r24, 5
    36aa:	0d c0       	rjmp	.+26     	; 0x36c6 <can_auto_baudrate+0x1b2>
            {   //! --- It is the successful output of "can_auto_baudrate" function
                wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
                evaluate = 0;       //! Will skip "while (evaluate ..." loop
                bt_not_found = 0;   //! Out of "while (bt_not_found ..." loop
                bt_performed = 1;   //! Return flag = TRUE
                DISABLE_MOB;        //! Disable MOb-0
    36ac:	80 91 ef 00 	lds	r24, 0x00EF
    36b0:	8f 73       	andi	r24, 0x3F	; 63
    36b2:	80 93 ef 00 	sts	0x00EF, r24
                CANGCON = 0x00;     //! Disable CAN controller & reset "listen" mode
    36b6:	10 92 d8 00 	sts	0x00D8, r1
                while ((CANGSTA & (1<<ENFG)) != 0); //! Wait for Disable OK
    36ba:	80 91 d9 00 	lds	r24, 0x00D9
    36be:	82 fd       	sbrc	r24, 2
    36c0:	fc cf       	rjmp	.-8      	; 0x36ba <can_auto_baudrate+0x1a6>
            if ((u8_temp0 & (1<<RXOK)) != 0)
            {   //! --- It is the successful output of "can_auto_baudrate" function
                wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
                evaluate = 0;       //! Will skip "while (evaluate ..." loop
                bt_not_found = 0;   //! Out of "while (bt_not_found ..." loop
                bt_performed = 1;   //! Return flag = TRUE
    36c2:	81 e0       	ldi	r24, 0x01	; 1
    36c4:	7c c0       	rjmp	.+248    	; 0x37be <can_auto_baudrate+0x2aa>
            }
             //! --- Else stop if any errors
             else
            {
                //! --- MOb error ?
                if ((u8_temp0 & ((1<<BERR)|(1<<SERR)|(1<<CERR)|(1<<FERR)|(1<<AERR))) !=0)
    36c6:	8f 71       	andi	r24, 0x1F	; 31
    36c8:	90 70       	andi	r25, 0x00	; 0
    36ca:	00 97       	sbiw	r24, 0x00	; 0
    36cc:	19 f0       	breq	.+6      	; 0x36d4 <can_auto_baudrate+0x1c0>
                {
                    evaluate = 1;       //! Will enter in "while (evaluate ..." loop
    36ce:	ee 24       	eor	r14, r14
    36d0:	e3 94       	inc	r14
                    wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
    36d2:	60 e0       	ldi	r22, 0x00	; 0
                }

                u8_temp0 = CANGIT;
    36d4:	80 91 da 00 	lds	r24, 0x00DA

                //! --- Time_out reached ?
                if ((u8_temp0 & (1<<OVRTIM)) !=0 )
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	85 ff       	sbrs	r24, 5
    36dc:	12 c0       	rjmp	.+36     	; 0x3702 <can_auto_baudrate+0x1ee>
                {
                    if (ovrtim_flag==0)
    36de:	dd 20       	and	r13, r13
    36e0:	41 f4       	brne	.+16     	; 0x36f2 <can_auto_baudrate+0x1de>
                    {
                        //! --- First Time_out
                        CANGIT |= (1<<OVRTIM);  // Reset OVRTIM
    36e2:	20 91 da 00 	lds	r18, 0x00DA
    36e6:	20 62       	ori	r18, 0x20	; 32
    36e8:	20 93 da 00 	sts	0x00DA, r18
                        ovrtim_flag++;
    36ec:	dd 24       	eor	r13, r13
    36ee:	d3 94       	inc	r13
    36f0:	08 c0       	rjmp	.+16     	; 0x3702 <can_auto_baudrate+0x1ee>
                    }
                    else
                    {
                        //! --- Second Time_out
                        CANGIT |= (1<<OVRTIM);  // Reset OVRTIM
    36f2:	20 91 da 00 	lds	r18, 0x00DA
    36f6:	20 62       	ori	r18, 0x20	; 32
    36f8:	20 93 da 00 	sts	0x00DA, r18
                        evaluate = 1;           //! Will enter in "while (evaluate ..." loop
    36fc:	ee 24       	eor	r14, r14
    36fe:	e3 94       	inc	r14
                        wait_for_rx = 0;        //! Out of "while (wait_for_rx ..." loop
    3700:	60 e0       	ldi	r22, 0x00	; 0
                    }
                }

                //! --- General error ?
                if ((u8_temp0 & ((1<<SERG)|(1<<CERG)|(1<<FERG)|(1<<AERG))) !=0)
    3702:	8f 70       	andi	r24, 0x0F	; 15
    3704:	90 70       	andi	r25, 0x00	; 0
    3706:	00 97       	sbiw	r24, 0x00	; 0
    3708:	11 f0       	breq	.+4      	; 0x370e <can_auto_baudrate+0x1fa>
                {
                    evaluate = 1;       //! Will enter in "while (evaluate ..." loop
                    wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
                    try_conf = 1;       //! Try this configuration
    370a:	01 e0       	ldi	r16, 0x01	; 1
    370c:	03 c0       	rjmp	.+6      	; 0x3714 <can_auto_baudrate+0x200>
        //! --- WAIT_FOR_RX LOOP:
        //!     ================
        //!     Try to perform a CAN message reception in "LISTEN" mode without error and
        //!     before a time_out done by CAN-Timer.
        //!     Else gives the hand to "EVALUATE LOOP" to have a new set of bit timing.
        while (wait_for_rx == 1)
    370e:	61 30       	cpi	r22, 0x01	; 1
    3710:	41 f2       	breq	.-112    	; 0x36a2 <can_auto_baudrate+0x18e>
    3712:	50 c0       	rjmp	.+160    	; 0x37b4 <can_auto_baudrate+0x2a0>
        //!     limit and after it is the Prescaler. During the computing high (80%)
        //!     and low (75%) limits of sampling point location are tested. SJW and
        //!     the number of sampling points are not calculated in this loop.
        while (evaluate == 1)
        {
            if (phs1_inc != 0) phs1++;
    3714:	71 11       	cpse	r23, r1
    3716:	ef 5f       	subi	r30, 0xFF	; 255
            phs1_inc = 1;

            // --- The following test takes into account the previous incrementation of phs1
            if ((phs1 > PHS1_MAX) && (phs2 >= PHS2_MAX))
    3718:	e9 30       	cpi	r30, 0x09	; 9
    371a:	d0 f0       	brcs	.+52     	; 0x3750 <can_auto_baudrate+0x23c>
    371c:	f8 30       	cpi	r31, 0x08	; 8
    371e:	d0 f0       	brcs	.+52     	; 0x3754 <can_auto_baudrate+0x240>
            {
                phs1 = PHS1_MIN;
                phs2 = PHS2_MIN;
                phs1_inc = 0;
                if (ntq != NTQ_MAX) ntq++;
    3720:	b9 31       	cpi	r27, 0x19	; 25
    3722:	19 f0       	breq	.+6      	; 0x372a <can_auto_baudrate+0x216>
    3724:	bf 5f       	subi	r27, 0xFF	; 255
            phs1_inc = 1;

            // --- The following test takes into account the previous incrementation of phs1
            if ((phs1 > PHS1_MAX) && (phs2 >= PHS2_MAX))
            {
                phs1 = PHS1_MIN;
    3726:	e2 e0       	ldi	r30, 0x02	; 2
    3728:	20 c0       	rjmp	.+64     	; 0x376a <can_auto_baudrate+0x256>
                phs1_inc = 0;
                if (ntq != NTQ_MAX) ntq++;
                else
                {
                    ntq = NTQ_MIN;
                    if (brp != BRP_MAX) brp++;
    372a:	10 34       	cpi	r17, 0x40	; 64
    372c:	21 f0       	breq	.+8      	; 0x3736 <can_auto_baudrate+0x222>
    372e:	1f 5f       	subi	r17, 0xFF	; 255
            phs1_inc = 1;

            // --- The following test takes into account the previous incrementation of phs1
            if ((phs1 > PHS1_MAX) && (phs2 >= PHS2_MAX))
            {
                phs1 = PHS1_MIN;
    3730:	e2 e0       	ldi	r30, 0x02	; 2
                phs2 = PHS2_MIN;
                phs1_inc = 0;
                if (ntq != NTQ_MAX) ntq++;
                else
                {
                    ntq = NTQ_MIN;
    3732:	b8 e0       	ldi	r27, 0x08	; 8
    3734:	1a c0       	rjmp	.+52     	; 0x376a <can_auto_baudrate+0x256>
                    {
                        //! --- It is the failing of "can_auto_baudrate" function
                        evaluate = 0;       //! Out of "while (evaluate ..." loop
                        bt_performed = 0;   //! Return flag = FALSE
                        bt_not_found = 0;   //! Out of "while (bt_not_found ..." loop
                        DISABLE_MOB;        //! Disable MOb-0
    3736:	80 91 ef 00 	lds	r24, 0x00EF
    373a:	8f 73       	andi	r24, 0x3F	; 63
    373c:	80 93 ef 00 	sts	0x00EF, r24
                        CANGCON = 0x00;     //! Disable CAN controller & reset "listen" mode
    3740:	10 92 d8 00 	sts	0x00D8, r1
                        while ((CANGSTA & (1<<ENFG)) != 0); //! Wait for Disable OK
    3744:	80 91 d9 00 	lds	r24, 0x00D9
    3748:	82 fd       	sbrc	r24, 2
    374a:	fc cf       	rjmp	.-8      	; 0x3744 <can_auto_baudrate+0x230>
                    if (brp != BRP_MAX) brp++;
                    else
                    {
                        //! --- It is the failing of "can_auto_baudrate" function
                        evaluate = 0;       //! Out of "while (evaluate ..." loop
                        bt_performed = 0;   //! Return flag = FALSE
    374c:	80 e0       	ldi	r24, 0x00	; 0
    374e:	37 c0       	rjmp	.+110    	; 0x37be <can_auto_baudrate+0x2aa>
                }
            }
            else    // if (phs1 > PHS1_MAX ...
            {
                //! --- If psh1 > 5 then phs1 =phs2 or =phs2+1, else phs1=phs2
                if (phs1>5)
    3750:	e6 30       	cpi	r30, 0x06	; 6
    3752:	58 f0       	brcs	.+22     	; 0x376a <can_auto_baudrate+0x256>
                {
                    if (phs1>(phs2+1)) phs1=(++phs2);
    3754:	2e 2f       	mov	r18, r30
    3756:	30 e0       	ldi	r19, 0x00	; 0
    3758:	8f 2f       	mov	r24, r31
    375a:	90 e0       	ldi	r25, 0x00	; 0
    375c:	01 96       	adiw	r24, 0x01	; 1
    375e:	82 17       	cp	r24, r18
    3760:	93 07       	cpc	r25, r19
    3762:	24 f4       	brge	.+8      	; 0x376c <can_auto_baudrate+0x258>
    3764:	ff 5f       	subi	r31, 0xFF	; 255
    3766:	ef 2f       	mov	r30, r31
    3768:	01 c0       	rjmp	.+2      	; 0x376c <can_auto_baudrate+0x258>
                }
            }
            else    // if (phs1 > PHS1_MAX ...
            {
                //! --- If psh1 > 5 then phs1 =phs2 or =phs2+1, else phs1=phs2
                if (phs1>5)
    376a:	fe 2f       	mov	r31, r30
                }
                else
                {
                phs2=phs1;
                }
                prs = ntq - ( phs1 + phs2 + 1 );
    376c:	af 2f       	mov	r26, r31
    376e:	ae 0f       	add	r26, r30
    3770:	a0 95       	com	r26
    3772:	ab 0f       	add	r26, r27

                //! --- Test PRS limits
                if ((prs <= PRS_MAX) && (prs >= PRS_MIN))
    3774:	8a 2f       	mov	r24, r26
    3776:	81 50       	subi	r24, 0x01	; 1
    3778:	88 30       	cpi	r24, 0x08	; 8
    377a:	68 f6       	brcc	.-102    	; 0x3716 <can_auto_baudrate+0x202>
                {
                    //! --- Values  accepted if  80% >= sampling point >= 75%
                    if (((phs2<<2) >= (1+prs+phs1)) && ((phs2+phs2+phs2) <= (1+prs+phs1)))
    377c:	6f 2f       	mov	r22, r31
    377e:	70 e0       	ldi	r23, 0x00	; 0
    3780:	8e 2f       	mov	r24, r30
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	01 96       	adiw	r24, 0x01	; 1
    3786:	8a 0f       	add	r24, r26
    3788:	91 1d       	adc	r25, r1
    378a:	9b 01       	movw	r18, r22
    378c:	22 0f       	add	r18, r18
    378e:	33 1f       	adc	r19, r19
    3790:	22 0f       	add	r18, r18
    3792:	33 1f       	adc	r19, r19
    3794:	28 17       	cp	r18, r24
    3796:	39 07       	cpc	r19, r25
    3798:	0c f4       	brge	.+2      	; 0x379c <can_auto_baudrate+0x288>
    379a:	bd cf       	rjmp	.-134    	; 0x3716 <can_auto_baudrate+0x202>
    379c:	9b 01       	movw	r18, r22
    379e:	22 0f       	add	r18, r18
    37a0:	33 1f       	adc	r19, r19
    37a2:	26 0f       	add	r18, r22
    37a4:	37 1f       	adc	r19, r23
    37a6:	82 17       	cp	r24, r18
    37a8:	93 07       	cpc	r25, r19
    37aa:	0c f4       	brge	.+2      	; 0x37ae <can_auto_baudrate+0x29a>
    37ac:	b4 cf       	rjmp	.-152    	; 0x3716 <can_auto_baudrate+0x202>
                    {
                        evaluate = 0;     //! Out of "while (evaluate ..." loop &
                        wait_for_rx = 1;  //!    new "while (bt_not_found ..." loop
    37ae:	61 e0       	ldi	r22, 0x01	; 1
        //!     and low (75%) limits of sampling point location are tested. SJW and
        //!     the number of sampling points are not calculated in this loop.
        while (evaluate == 1)
        {
            if (phs1_inc != 0) phs1++;
            phs1_inc = 1;
    37b0:	71 e0       	ldi	r23, 0x01	; 1
    37b2:	2e cf       	rjmp	.-420    	; 0x3610 <can_auto_baudrate+0xfc>
        //!     then Phase2=Phase1 and if Phase1>5, Phase1 can be equal to Phase2 or
        //!     Phase2+1. After this, the number of TQ is increased up to its high
        //!     limit and after it is the Prescaler. During the computing high (80%)
        //!     and low (75%) limits of sampling point location are tested. SJW and
        //!     the number of sampling points are not calculated in this loop.
        while (evaluate == 1)
    37b4:	8e 2d       	mov	r24, r14
    37b6:	81 30       	cpi	r24, 0x01	; 1
    37b8:	09 f0       	breq	.+2      	; 0x37bc <can_auto_baudrate+0x2a8>
    37ba:	2a cf       	rjmp	.-428    	; 0x3610 <can_auto_baudrate+0xfc>
    37bc:	ab cf       	rjmp	.-170    	; 0x3714 <can_auto_baudrate+0x200>
            }
        } // while (evaluate ...
    } // while (bt_not_found ...

    return (bt_performed);
}
    37be:	cd b7       	in	r28, 0x3d	; 61
    37c0:	de b7       	in	r29, 0x3e	; 62
    37c2:	e9 e0       	ldi	r30, 0x09	; 9
    37c4:	0c 94 29 2d 	jmp	0x5a52	; 0x5a52 <__epilogue_restores__+0x12>

000037c8 <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
U8 can_fixed_baudrate(U8 mode)
{
    Can_reset();
    37c8:	81 e0       	ldi	r24, 0x01	; 1
    37ca:	80 93 d8 00 	sts	0x00D8, r24
    Can_conf_bt();
    37ce:	86 e0       	ldi	r24, 0x06	; 6
    37d0:	80 93 e2 00 	sts	0x00E2, r24
    37d4:	80 93 e3 00 	sts	0x00E3, r24
    37d8:	84 e2       	ldi	r24, 0x24	; 36
    37da:	80 93 e4 00 	sts	0x00E4, r24
    return 1;
}
    37de:	81 e0       	ldi	r24, 0x01	; 1
    37e0:	08 95       	ret

000037e2 <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
    37e2:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <can_fixed_baudrate>
    37e6:	88 23       	and	r24, r24
    37e8:	49 f0       	breq	.+18     	; 0x37fc <can_init+0x1a>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
    37ea:	0e 94 3d 1a 	call	0x347a	; 0x347a <can_clear_all_mob>
    Can_enable();                               // c.f. macro in "can_drv.h" 
    37ee:	80 91 d8 00 	lds	r24, 0x00D8
    37f2:	82 60       	ori	r24, 0x02	; 2
    37f4:	80 93 d8 00 	sts	0x00D8, r24
    return (1);
    37f8:	81 e0       	ldi	r24, 0x01	; 1
    37fa:	08 95       	ret
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
    37fc:	80 e0       	ldi	r24, 0x00	; 0
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
    Can_enable();                               // c.f. macro in "can_drv.h" 
    return (1);
}
    37fe:	08 95       	ret

00003800 <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd)
{
    3800:	a4 e0       	ldi	r26, 0x04	; 4
    3802:	b0 e0       	ldi	r27, 0x00	; 0
    3804:	e6 e0       	ldi	r30, 0x06	; 6
    3806:	fc e1       	ldi	r31, 0x1C	; 28
    3808:	0c 94 12 2d 	jmp	0x5a24	; 0x5a24 <__prologue_saves__+0x1c>
    380c:	8c 01       	movw	r16, r24
  uint8_t mob_handle, cpt;
  U32 u32_temp;
  uint16_t tmp;
  
  if (cmd->cmd == CMD_ABORT)
    380e:	dc 01       	movw	r26, r24
    3810:	11 96       	adiw	r26, 0x01	; 1
    3812:	8d 91       	ld	r24, X+
    3814:	9c 91       	ld	r25, X
    3816:	12 97       	sbiw	r26, 0x02	; 2
    3818:	8c 30       	cpi	r24, 0x0C	; 12
    381a:	91 05       	cpc	r25, r1
    381c:	a1 f4       	brne	.+40     	; 0x3846 <can_cmd+0x46>
  {
    if (cmd->status == MOB_PENDING)
    381e:	1a 96       	adiw	r26, 0x0a	; 10
    3820:	8c 91       	ld	r24, X
    3822:	1a 97       	sbiw	r26, 0x0a	; 10
    3824:	80 36       	cpi	r24, 0x60	; 96
    3826:	09 f0       	breq	.+2      	; 0x382a <can_cmd+0x2a>
    3828:	48 c5       	rjmp	.+2704   	; 0x42ba <can_cmd+0xaba>
    {
      // Rx or Tx not yet performed
      Can_set_mob(cmd->handle);
    382a:	8c 91       	ld	r24, X
    382c:	82 95       	swap	r24
    382e:	80 7f       	andi	r24, 0xF0	; 240
    3830:	80 93 ed 00 	sts	0x00ED, r24
      Can_mob_abort();
    3834:	80 91 ef 00 	lds	r24, 0x00EF
    3838:	8f 73       	andi	r24, 0x3F	; 63
    383a:	80 93 ef 00 	sts	0x00EF, r24
      Can_clear_status_mob();       // To be sure !
    383e:	10 92 ee 00 	sts	0x00EE, r1
      cmd->handle = 0;
    3842:	1c 92       	st	X, r1
    3844:	3a c5       	rjmp	.+2676   	; 0x42ba <can_cmd+0xaba>
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
    mob_handle = can_get_mob_free();
    3846:	0e 94 4d 1a 	call	0x349a	; 0x349a <can_get_mob_free>
    if (mob_handle!= NO_MOB)
    384a:	8f 3f       	cpi	r24, 0xFF	; 255
    384c:	09 f4       	brne	.+2      	; 0x3850 <can_cmd+0x50>
    384e:	38 c5       	rjmp	.+2672   	; 0x42c0 <can_cmd+0xac0>
    {
      cmd->status = MOB_PENDING; 
    3850:	90 e6       	ldi	r25, 0x60	; 96
    3852:	d8 01       	movw	r26, r16
    3854:	1a 96       	adiw	r26, 0x0a	; 10
    3856:	9c 93       	st	X, r25
    3858:	1a 97       	sbiw	r26, 0x0a	; 10
      cmd->handle = mob_handle;
    385a:	8c 93       	st	X, r24
      Can_set_mob(mob_handle);
    385c:	98 2f       	mov	r25, r24
    385e:	92 95       	swap	r25
    3860:	90 7f       	andi	r25, 0xF0	; 240
    3862:	90 93 ed 00 	sts	0x00ED, r25
      Can_clear_mob();
    3866:	ee ee       	ldi	r30, 0xEE	; 238
    3868:	f0 e0       	ldi	r31, 0x00	; 0
    386a:	11 92       	st	Z+, r1
    386c:	e8 3f       	cpi	r30, 0xF8	; 248
    386e:	f1 05       	cpc	r31, r1
    3870:	e1 f7       	brne	.-8      	; 0x386a <can_cmd+0x6a>
          
      switch (cmd->cmd)
    3872:	d8 01       	movw	r26, r16
    3874:	11 96       	adiw	r26, 0x01	; 1
    3876:	ed 91       	ld	r30, X+
    3878:	fc 91       	ld	r31, X
    387a:	12 97       	sbiw	r26, 0x02	; 2
    387c:	31 97       	sbiw	r30, 0x01	; 1
    387e:	eb 30       	cpi	r30, 0x0B	; 11
    3880:	f1 05       	cpc	r31, r1
    3882:	08 f0       	brcs	.+2      	; 0x3886 <can_cmd+0x86>
    3884:	1a c5       	rjmp	.+2612   	; 0x42ba <can_cmd+0xaba>
    3886:	e7 5a       	subi	r30, 0xA7	; 167
    3888:	ff 4f       	sbci	r31, 0xFF	; 255
    388a:	0c 94 3b 2d 	jmp	0x5a76	; 0x5a76 <__tablejump2__>
    388e:	80 e0       	ldi	r24, 0x00	; 0
    3890:	1e c4       	rjmp	.+2108   	; 0x40ce <can_cmd+0x8ce>
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    3892:	f8 01       	movw	r30, r16
    3894:	84 85       	ldd	r24, Z+12	; 0x0c
    3896:	88 23       	and	r24, r24
    3898:	59 f1       	breq	.+86     	; 0x38f0 <can_cmd+0xf0>
    389a:	85 81       	ldd	r24, Z+5	; 0x05
    389c:	82 95       	swap	r24
    389e:	86 95       	lsr	r24
    38a0:	87 70       	andi	r24, 0x07	; 7
    38a2:	96 81       	ldd	r25, Z+6	; 0x06
    38a4:	99 0f       	add	r25, r25
    38a6:	99 0f       	add	r25, r25
    38a8:	99 0f       	add	r25, r25
    38aa:	89 0f       	add	r24, r25
    38ac:	80 93 f3 00 	sts	0x00F3, r24
    38b0:	84 81       	ldd	r24, Z+4	; 0x04
    38b2:	82 95       	swap	r24
    38b4:	86 95       	lsr	r24
    38b6:	87 70       	andi	r24, 0x07	; 7
    38b8:	95 81       	ldd	r25, Z+5	; 0x05
    38ba:	99 0f       	add	r25, r25
    38bc:	99 0f       	add	r25, r25
    38be:	99 0f       	add	r25, r25
    38c0:	89 0f       	add	r24, r25
    38c2:	80 93 f2 00 	sts	0x00F2, r24
    38c6:	83 81       	ldd	r24, Z+3	; 0x03
    38c8:	82 95       	swap	r24
    38ca:	86 95       	lsr	r24
    38cc:	87 70       	andi	r24, 0x07	; 7
    38ce:	94 81       	ldd	r25, Z+4	; 0x04
    38d0:	99 0f       	add	r25, r25
    38d2:	99 0f       	add	r25, r25
    38d4:	99 0f       	add	r25, r25
    38d6:	89 0f       	add	r24, r25
    38d8:	80 93 f1 00 	sts	0x00F1, r24
    38dc:	83 81       	ldd	r24, Z+3	; 0x03
    38de:	88 0f       	add	r24, r24
    38e0:	88 0f       	add	r24, r24
    38e2:	88 0f       	add	r24, r24
    38e4:	80 93 f0 00 	sts	0x00F0, r24
    38e8:	80 91 ef 00 	lds	r24, 0x00EF
    38ec:	80 61       	ori	r24, 0x10	; 16
    38ee:	1b c0       	rjmp	.+54     	; 0x3926 <can_cmd+0x126>
          else              { Can_set_std_id(cmd->id.std);}
    38f0:	d8 01       	movw	r26, r16
    38f2:	13 96       	adiw	r26, 0x03	; 3
    38f4:	8c 91       	ld	r24, X
    38f6:	13 97       	sbiw	r26, 0x03	; 3
    38f8:	86 95       	lsr	r24
    38fa:	86 95       	lsr	r24
    38fc:	86 95       	lsr	r24
    38fe:	14 96       	adiw	r26, 0x04	; 4
    3900:	9c 91       	ld	r25, X
    3902:	14 97       	sbiw	r26, 0x04	; 4
    3904:	92 95       	swap	r25
    3906:	99 0f       	add	r25, r25
    3908:	90 7e       	andi	r25, 0xE0	; 224
    390a:	89 0f       	add	r24, r25
    390c:	80 93 f3 00 	sts	0x00F3, r24
    3910:	13 96       	adiw	r26, 0x03	; 3
    3912:	8c 91       	ld	r24, X
    3914:	13 97       	sbiw	r26, 0x03	; 3
    3916:	82 95       	swap	r24
    3918:	88 0f       	add	r24, r24
    391a:	80 7e       	andi	r24, 0xE0	; 224
    391c:	80 93 f2 00 	sts	0x00F2, r24
    3920:	80 91 ef 00 	lds	r24, 0x00EF
    3924:	8f 7e       	andi	r24, 0xEF	; 239
    3926:	80 93 ef 00 	sts	0x00EF, r24
      cmd->status = MOB_PENDING; 
      cmd->handle = mob_handle;
      Can_set_mob(mob_handle);
      Can_clear_mob();
          
      switch (cmd->cmd)
    392a:	80 e0       	ldi	r24, 0x00	; 0
    392c:	0b c0       	rjmp	.+22     	; 0x3944 <can_cmd+0x144>
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    392e:	d8 01       	movw	r26, r16
    3930:	18 96       	adiw	r26, 0x08	; 8
    3932:	ed 91       	ld	r30, X+
    3934:	fc 91       	ld	r31, X
    3936:	19 97       	sbiw	r26, 0x09	; 9
    3938:	e8 0f       	add	r30, r24
    393a:	f1 1d       	adc	r31, r1
    393c:	90 81       	ld	r25, Z
    393e:	90 93 fa 00 	sts	0x00FA, r25
    3942:	8f 5f       	subi	r24, 0xFF	; 255
    3944:	f8 01       	movw	r30, r16
    3946:	97 81       	ldd	r25, Z+7	; 0x07
    3948:	89 17       	cp	r24, r25
    394a:	88 f3       	brcs	.-30     	; 0x392e <can_cmd+0x12e>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
    394c:	83 85       	ldd	r24, Z+11	; 0x0b
    394e:	88 23       	and	r24, r24
    3950:	21 f0       	breq	.+8      	; 0x395a <can_cmd+0x15a>
    3952:	80 91 f0 00 	lds	r24, 0x00F0
    3956:	84 60       	ori	r24, 0x04	; 4
    3958:	03 c0       	rjmp	.+6      	; 0x3960 <can_cmd+0x160>
            else Can_clear_rtr();    
    395a:	80 91 f0 00 	lds	r24, 0x00F0
    395e:	8b 7f       	andi	r24, 0xFB	; 251
    3960:	80 93 f0 00 	sts	0x00F0, r24
          Can_set_dlc(cmd->dlc);
    3964:	80 91 ef 00 	lds	r24, 0x00EF
    3968:	d8 01       	movw	r26, r16
    396a:	17 96       	adiw	r26, 0x07	; 7
    396c:	9c 91       	ld	r25, X
    396e:	17 97       	sbiw	r26, 0x07	; 7
    3970:	89 2b       	or	r24, r25
    3972:	80 93 ef 00 	sts	0x00EF, r24
          Can_config_tx();
    3976:	80 91 ef 00 	lds	r24, 0x00EF
    397a:	8f 73       	andi	r24, 0x3F	; 63
    397c:	80 93 ef 00 	sts	0x00EF, r24
    3980:	80 91 ef 00 	lds	r24, 0x00EF
    3984:	80 64       	ori	r24, 0x40	; 64
    3986:	80 93 ef 00 	sts	0x00EF, r24
    398a:	a1 c4       	rjmp	.+2370   	; 0x42ce <can_cmd+0xace>
          break;
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    398c:	f8 01       	movw	r30, r16
    398e:	94 85       	ldd	r25, Z+12	; 0x0c
    3990:	99 23       	and	r25, r25
    3992:	59 f1       	breq	.+86     	; 0x39ea <can_cmd+0x1ea>
    3994:	95 81       	ldd	r25, Z+5	; 0x05
    3996:	92 95       	swap	r25
    3998:	96 95       	lsr	r25
    399a:	97 70       	andi	r25, 0x07	; 7
    399c:	26 81       	ldd	r18, Z+6	; 0x06
    399e:	22 0f       	add	r18, r18
    39a0:	22 0f       	add	r18, r18
    39a2:	22 0f       	add	r18, r18
    39a4:	92 0f       	add	r25, r18
    39a6:	90 93 f3 00 	sts	0x00F3, r25
    39aa:	94 81       	ldd	r25, Z+4	; 0x04
    39ac:	92 95       	swap	r25
    39ae:	96 95       	lsr	r25
    39b0:	97 70       	andi	r25, 0x07	; 7
    39b2:	25 81       	ldd	r18, Z+5	; 0x05
    39b4:	22 0f       	add	r18, r18
    39b6:	22 0f       	add	r18, r18
    39b8:	22 0f       	add	r18, r18
    39ba:	92 0f       	add	r25, r18
    39bc:	90 93 f2 00 	sts	0x00F2, r25
    39c0:	93 81       	ldd	r25, Z+3	; 0x03
    39c2:	92 95       	swap	r25
    39c4:	96 95       	lsr	r25
    39c6:	97 70       	andi	r25, 0x07	; 7
    39c8:	24 81       	ldd	r18, Z+4	; 0x04
    39ca:	22 0f       	add	r18, r18
    39cc:	22 0f       	add	r18, r18
    39ce:	22 0f       	add	r18, r18
    39d0:	92 0f       	add	r25, r18
    39d2:	90 93 f1 00 	sts	0x00F1, r25
    39d6:	93 81       	ldd	r25, Z+3	; 0x03
    39d8:	99 0f       	add	r25, r25
    39da:	99 0f       	add	r25, r25
    39dc:	99 0f       	add	r25, r25
    39de:	90 93 f0 00 	sts	0x00F0, r25
    39e2:	90 91 ef 00 	lds	r25, 0x00EF
    39e6:	90 61       	ori	r25, 0x10	; 16
    39e8:	1b c0       	rjmp	.+54     	; 0x3a20 <can_cmd+0x220>
          else              { Can_set_std_id(cmd->id.std);}
    39ea:	d8 01       	movw	r26, r16
    39ec:	13 96       	adiw	r26, 0x03	; 3
    39ee:	9c 91       	ld	r25, X
    39f0:	13 97       	sbiw	r26, 0x03	; 3
    39f2:	96 95       	lsr	r25
    39f4:	96 95       	lsr	r25
    39f6:	96 95       	lsr	r25
    39f8:	14 96       	adiw	r26, 0x04	; 4
    39fa:	2c 91       	ld	r18, X
    39fc:	14 97       	sbiw	r26, 0x04	; 4
    39fe:	22 95       	swap	r18
    3a00:	22 0f       	add	r18, r18
    3a02:	20 7e       	andi	r18, 0xE0	; 224
    3a04:	92 0f       	add	r25, r18
    3a06:	90 93 f3 00 	sts	0x00F3, r25
    3a0a:	13 96       	adiw	r26, 0x03	; 3
    3a0c:	9c 91       	ld	r25, X
    3a0e:	13 97       	sbiw	r26, 0x03	; 3
    3a10:	92 95       	swap	r25
    3a12:	99 0f       	add	r25, r25
    3a14:	90 7e       	andi	r25, 0xE0	; 224
    3a16:	90 93 f2 00 	sts	0x00F2, r25
    3a1a:	90 91 ef 00 	lds	r25, 0x00EF
    3a1e:	9f 7e       	andi	r25, 0xEF	; 239
    3a20:	90 93 ef 00 	sts	0x00EF, r25
      cmd->status = MOB_PENDING; 
      cmd->handle = mob_handle;
      Can_set_mob(mob_handle);
      Can_clear_mob();
          
      switch (cmd->cmd)
    3a24:	90 e0       	ldi	r25, 0x00	; 0
    3a26:	0b c0       	rjmp	.+22     	; 0x3a3e <can_cmd+0x23e>
          break;
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    3a28:	d8 01       	movw	r26, r16
    3a2a:	18 96       	adiw	r26, 0x08	; 8
    3a2c:	ed 91       	ld	r30, X+
    3a2e:	fc 91       	ld	r31, X
    3a30:	19 97       	sbiw	r26, 0x09	; 9
    3a32:	e9 0f       	add	r30, r25
    3a34:	f1 1d       	adc	r31, r1
    3a36:	20 81       	ld	r18, Z
    3a38:	20 93 fa 00 	sts	0x00FA, r18
    3a3c:	9f 5f       	subi	r25, 0xFF	; 255
    3a3e:	f8 01       	movw	r30, r16
    3a40:	27 81       	ldd	r18, Z+7	; 0x07
    3a42:	92 17       	cp	r25, r18
    3a44:	88 f3       	brcs	.-30     	; 0x3a28 <can_cmd+0x228>
          cmd->ctrl.rtr=0; Can_clear_rtr();
    3a46:	13 86       	std	Z+11, r1	; 0x0b
    3a48:	90 91 f0 00 	lds	r25, 0x00F0
    3a4c:	9b 7f       	andi	r25, 0xFB	; 251
    3a4e:	90 93 f0 00 	sts	0x00F0, r25
          Can_set_dlc(cmd->dlc);
    3a52:	90 91 ef 00 	lds	r25, 0x00EF
    3a56:	27 81       	ldd	r18, Z+7	; 0x07
    3a58:	92 2b       	or	r25, r18
    3a5a:	90 93 ef 00 	sts	0x00EF, r25
          Can_config_tx();
    3a5e:	90 91 ef 00 	lds	r25, 0x00EF
    3a62:	9f 73       	andi	r25, 0x3F	; 63
    3a64:	90 93 ef 00 	sts	0x00EF, r25
    3a68:	90 91 ef 00 	lds	r25, 0x00EF
    3a6c:	90 64       	ori	r25, 0x40	; 64
    3a6e:	90 93 ef 00 	sts	0x00EF, r25
	  if(!cmd->blocking){	/* Enable interrupt TODO Fjern denne linje og lav det på en bedre måde */ 
    3a72:	95 85       	ldd	r25, Z+13	; 0x0d
    3a74:	99 23       	and	r25, r25
    3a76:	09 f0       	breq	.+2      	; 0x3a7a <can_cmd+0x27a>
    3a78:	2a c4       	rjmp	.+2132   	; 0x42ce <can_cmd+0xace>
    3a7a:	67 c2       	rjmp	.+1230   	; 0x3f4a <can_cmd+0x74a>
        Can_set_mob_int(mob_handle) /* Ser ud til at virke */
	  }
          break;
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    3a7c:	d8 01       	movw	r26, r16
    3a7e:	1c 96       	adiw	r26, 0x0c	; 12
    3a80:	8c 91       	ld	r24, X
    3a82:	1c 97       	sbiw	r26, 0x0c	; 12
    3a84:	88 23       	and	r24, r24
    3a86:	c9 f1       	breq	.+114    	; 0x3afa <can_cmd+0x2fa>
    3a88:	15 96       	adiw	r26, 0x05	; 5
    3a8a:	8c 91       	ld	r24, X
    3a8c:	15 97       	sbiw	r26, 0x05	; 5
    3a8e:	82 95       	swap	r24
    3a90:	86 95       	lsr	r24
    3a92:	87 70       	andi	r24, 0x07	; 7
    3a94:	16 96       	adiw	r26, 0x06	; 6
    3a96:	9c 91       	ld	r25, X
    3a98:	16 97       	sbiw	r26, 0x06	; 6
    3a9a:	99 0f       	add	r25, r25
    3a9c:	99 0f       	add	r25, r25
    3a9e:	99 0f       	add	r25, r25
    3aa0:	89 0f       	add	r24, r25
    3aa2:	80 93 f3 00 	sts	0x00F3, r24
    3aa6:	14 96       	adiw	r26, 0x04	; 4
    3aa8:	8c 91       	ld	r24, X
    3aaa:	14 97       	sbiw	r26, 0x04	; 4
    3aac:	82 95       	swap	r24
    3aae:	86 95       	lsr	r24
    3ab0:	87 70       	andi	r24, 0x07	; 7
    3ab2:	15 96       	adiw	r26, 0x05	; 5
    3ab4:	9c 91       	ld	r25, X
    3ab6:	15 97       	sbiw	r26, 0x05	; 5
    3ab8:	99 0f       	add	r25, r25
    3aba:	99 0f       	add	r25, r25
    3abc:	99 0f       	add	r25, r25
    3abe:	89 0f       	add	r24, r25
    3ac0:	80 93 f2 00 	sts	0x00F2, r24
    3ac4:	13 96       	adiw	r26, 0x03	; 3
    3ac6:	8c 91       	ld	r24, X
    3ac8:	13 97       	sbiw	r26, 0x03	; 3
    3aca:	82 95       	swap	r24
    3acc:	86 95       	lsr	r24
    3ace:	87 70       	andi	r24, 0x07	; 7
    3ad0:	14 96       	adiw	r26, 0x04	; 4
    3ad2:	9c 91       	ld	r25, X
    3ad4:	14 97       	sbiw	r26, 0x04	; 4
    3ad6:	99 0f       	add	r25, r25
    3ad8:	99 0f       	add	r25, r25
    3ada:	99 0f       	add	r25, r25
    3adc:	89 0f       	add	r24, r25
    3ade:	80 93 f1 00 	sts	0x00F1, r24
    3ae2:	13 96       	adiw	r26, 0x03	; 3
    3ae4:	8c 91       	ld	r24, X
    3ae6:	13 97       	sbiw	r26, 0x03	; 3
    3ae8:	88 0f       	add	r24, r24
    3aea:	88 0f       	add	r24, r24
    3aec:	88 0f       	add	r24, r24
    3aee:	80 93 f0 00 	sts	0x00F0, r24
    3af2:	80 91 ef 00 	lds	r24, 0x00EF
    3af6:	80 61       	ori	r24, 0x10	; 16
    3af8:	15 c0       	rjmp	.+42     	; 0x3b24 <can_cmd+0x324>
          else              { Can_set_std_id(cmd->id.std);}
    3afa:	f8 01       	movw	r30, r16
    3afc:	83 81       	ldd	r24, Z+3	; 0x03
    3afe:	86 95       	lsr	r24
    3b00:	86 95       	lsr	r24
    3b02:	86 95       	lsr	r24
    3b04:	94 81       	ldd	r25, Z+4	; 0x04
    3b06:	92 95       	swap	r25
    3b08:	99 0f       	add	r25, r25
    3b0a:	90 7e       	andi	r25, 0xE0	; 224
    3b0c:	89 0f       	add	r24, r25
    3b0e:	80 93 f3 00 	sts	0x00F3, r24
    3b12:	83 81       	ldd	r24, Z+3	; 0x03
    3b14:	82 95       	swap	r24
    3b16:	88 0f       	add	r24, r24
    3b18:	80 7e       	andi	r24, 0xE0	; 224
    3b1a:	80 93 f2 00 	sts	0x00F2, r24
    3b1e:	80 91 ef 00 	lds	r24, 0x00EF
    3b22:	8f 7e       	andi	r24, 0xEF	; 239
    3b24:	80 93 ef 00 	sts	0x00EF, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
    3b28:	81 e0       	ldi	r24, 0x01	; 1
    3b2a:	d8 01       	movw	r26, r16
    3b2c:	1b 96       	adiw	r26, 0x0b	; 11
    3b2e:	8c 93       	st	X, r24
    3b30:	1b 97       	sbiw	r26, 0x0b	; 11
    3b32:	80 91 f0 00 	lds	r24, 0x00F0
    3b36:	84 60       	ori	r24, 0x04	; 4
    3b38:	80 93 f0 00 	sts	0x00F0, r24
          Can_set_dlc(cmd->dlc);
    3b3c:	80 91 ef 00 	lds	r24, 0x00EF
    3b40:	14 cf       	rjmp	.-472    	; 0x396a <can_cmd+0x16a>
          Can_config_tx();
          break;
        //------------      
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    3b42:	19 82       	std	Y+1, r1	; 0x01
    3b44:	1a 82       	std	Y+2, r1	; 0x02
    3b46:	1b 82       	std	Y+3, r1	; 0x03
    3b48:	1c 82       	std	Y+4, r1	; 0x04
    3b4a:	fe 01       	movw	r30, r28
    3b4c:	31 96       	adiw	r30, 0x01	; 1
    3b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    3b50:	82 95       	swap	r24
    3b52:	86 95       	lsr	r24
    3b54:	87 70       	andi	r24, 0x07	; 7
    3b56:	93 81       	ldd	r25, Z+3	; 0x03
    3b58:	99 0f       	add	r25, r25
    3b5a:	99 0f       	add	r25, r25
    3b5c:	99 0f       	add	r25, r25
    3b5e:	89 0f       	add	r24, r25
    3b60:	80 93 f7 00 	sts	0x00F7, r24
    3b64:	81 81       	ldd	r24, Z+1	; 0x01
    3b66:	82 95       	swap	r24
    3b68:	86 95       	lsr	r24
    3b6a:	87 70       	andi	r24, 0x07	; 7
    3b6c:	9b 81       	ldd	r25, Y+3	; 0x03
    3b6e:	99 0f       	add	r25, r25
    3b70:	99 0f       	add	r25, r25
    3b72:	99 0f       	add	r25, r25
    3b74:	89 0f       	add	r24, r25
    3b76:	80 93 f6 00 	sts	0x00F6, r24
    3b7a:	81 81       	ldd	r24, Z+1	; 0x01
    3b7c:	88 0f       	add	r24, r24
    3b7e:	88 0f       	add	r24, r24
    3b80:	88 0f       	add	r24, r24
    3b82:	99 81       	ldd	r25, Y+1	; 0x01
    3b84:	92 95       	swap	r25
    3b86:	96 95       	lsr	r25
    3b88:	97 70       	andi	r25, 0x07	; 7
    3b8a:	89 0f       	add	r24, r25
    3b8c:	80 93 f5 00 	sts	0x00F5, r24
    3b90:	89 81       	ldd	r24, Y+1	; 0x01
    3b92:	88 0f       	add	r24, r24
    3b94:	88 0f       	add	r24, r24
    3b96:	88 0f       	add	r24, r24
    3b98:	80 93 f4 00 	sts	0x00F4, r24
          Can_set_dlc(cmd->dlc);
    3b9c:	80 91 ef 00 	lds	r24, 0x00EF
    3ba0:	f8 01       	movw	r30, r16
    3ba2:	97 81       	ldd	r25, Z+7	; 0x07
    3ba4:	89 2b       	or	r24, r25
    3ba6:	80 93 ef 00 	sts	0x00EF, r24
          Can_clear_rtrmsk();
    3baa:	80 91 f4 00 	lds	r24, 0x00F4
    3bae:	8b 7f       	andi	r24, 0xFB	; 251
    3bb0:	80 93 f4 00 	sts	0x00F4, r24
    3bb4:	43 c0       	rjmp	.+134    	; 0x3c3c <can_cmd+0x43c>
          Can_clear_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_RX_DATA:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    3bb6:	19 82       	std	Y+1, r1	; 0x01
    3bb8:	1a 82       	std	Y+2, r1	; 0x02
    3bba:	1b 82       	std	Y+3, r1	; 0x03
    3bbc:	1c 82       	std	Y+4, r1	; 0x04
    3bbe:	fe 01       	movw	r30, r28
    3bc0:	31 96       	adiw	r30, 0x01	; 1
    3bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    3bc4:	82 95       	swap	r24
    3bc6:	86 95       	lsr	r24
    3bc8:	87 70       	andi	r24, 0x07	; 7
    3bca:	93 81       	ldd	r25, Z+3	; 0x03
    3bcc:	99 0f       	add	r25, r25
    3bce:	99 0f       	add	r25, r25
    3bd0:	99 0f       	add	r25, r25
    3bd2:	89 0f       	add	r24, r25
    3bd4:	80 93 f7 00 	sts	0x00F7, r24
    3bd8:	81 81       	ldd	r24, Z+1	; 0x01
    3bda:	82 95       	swap	r24
    3bdc:	86 95       	lsr	r24
    3bde:	87 70       	andi	r24, 0x07	; 7
    3be0:	9b 81       	ldd	r25, Y+3	; 0x03
    3be2:	99 0f       	add	r25, r25
    3be4:	99 0f       	add	r25, r25
    3be6:	99 0f       	add	r25, r25
    3be8:	89 0f       	add	r24, r25
    3bea:	80 93 f6 00 	sts	0x00F6, r24
    3bee:	81 81       	ldd	r24, Z+1	; 0x01
    3bf0:	88 0f       	add	r24, r24
    3bf2:	88 0f       	add	r24, r24
    3bf4:	88 0f       	add	r24, r24
    3bf6:	99 81       	ldd	r25, Y+1	; 0x01
    3bf8:	92 95       	swap	r25
    3bfa:	96 95       	lsr	r25
    3bfc:	97 70       	andi	r25, 0x07	; 7
    3bfe:	89 0f       	add	r24, r25
    3c00:	80 93 f5 00 	sts	0x00F5, r24
    3c04:	89 81       	ldd	r24, Y+1	; 0x01
    3c06:	88 0f       	add	r24, r24
    3c08:	88 0f       	add	r24, r24
    3c0a:	88 0f       	add	r24, r24
    3c0c:	80 93 f4 00 	sts	0x00F4, r24
          Can_set_dlc(cmd->dlc);
    3c10:	80 91 ef 00 	lds	r24, 0x00EF
    3c14:	d8 01       	movw	r26, r16
    3c16:	17 96       	adiw	r26, 0x07	; 7
    3c18:	9c 91       	ld	r25, X
    3c1a:	17 97       	sbiw	r26, 0x07	; 7
    3c1c:	89 2b       	or	r24, r25
    3c1e:	80 93 ef 00 	sts	0x00EF, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    3c22:	1b 96       	adiw	r26, 0x0b	; 11
    3c24:	1c 92       	st	X, r1
    3c26:	1b 97       	sbiw	r26, 0x0b	; 11
    3c28:	80 91 f4 00 	lds	r24, 0x00F4
    3c2c:	84 60       	ori	r24, 0x04	; 4
    3c2e:	80 93 f4 00 	sts	0x00F4, r24
    3c32:	80 91 f0 00 	lds	r24, 0x00F0
    3c36:	8b 7f       	andi	r24, 0xFB	; 251
    3c38:	80 93 f0 00 	sts	0x00F0, r24
          Can_clear_idemsk();
    3c3c:	80 91 f4 00 	lds	r24, 0x00F4
    3c40:	8e 7f       	andi	r24, 0xFE	; 254
    3c42:	80 93 f4 00 	sts	0x00F4, r24
          Can_config_rx();       
    3c46:	80 91 ef 00 	lds	r24, 0x00EF
    3c4a:	8f 73       	andi	r24, 0x3F	; 63
    3c4c:	80 93 ef 00 	sts	0x00EF, r24
    3c50:	80 91 ef 00 	lds	r24, 0x00EF
    3c54:	80 68       	ori	r24, 0x80	; 128
    3c56:	97 ce       	rjmp	.-722    	; 0x3986 <can_cmd+0x186>
          break;
        //------------      
        case CMD_RX_REMOTE:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    3c58:	19 82       	std	Y+1, r1	; 0x01
    3c5a:	1a 82       	std	Y+2, r1	; 0x02
    3c5c:	1b 82       	std	Y+3, r1	; 0x03
    3c5e:	1c 82       	std	Y+4, r1	; 0x04
    3c60:	fe 01       	movw	r30, r28
    3c62:	31 96       	adiw	r30, 0x01	; 1
    3c64:	8b 81       	ldd	r24, Y+3	; 0x03
    3c66:	82 95       	swap	r24
    3c68:	86 95       	lsr	r24
    3c6a:	87 70       	andi	r24, 0x07	; 7
    3c6c:	93 81       	ldd	r25, Z+3	; 0x03
    3c6e:	99 0f       	add	r25, r25
    3c70:	99 0f       	add	r25, r25
    3c72:	99 0f       	add	r25, r25
    3c74:	89 0f       	add	r24, r25
    3c76:	80 93 f7 00 	sts	0x00F7, r24
    3c7a:	81 81       	ldd	r24, Z+1	; 0x01
    3c7c:	82 95       	swap	r24
    3c7e:	86 95       	lsr	r24
    3c80:	87 70       	andi	r24, 0x07	; 7
    3c82:	9b 81       	ldd	r25, Y+3	; 0x03
    3c84:	99 0f       	add	r25, r25
    3c86:	99 0f       	add	r25, r25
    3c88:	99 0f       	add	r25, r25
    3c8a:	89 0f       	add	r24, r25
    3c8c:	80 93 f6 00 	sts	0x00F6, r24
    3c90:	81 81       	ldd	r24, Z+1	; 0x01
    3c92:	88 0f       	add	r24, r24
    3c94:	88 0f       	add	r24, r24
    3c96:	88 0f       	add	r24, r24
    3c98:	99 81       	ldd	r25, Y+1	; 0x01
    3c9a:	92 95       	swap	r25
    3c9c:	96 95       	lsr	r25
    3c9e:	97 70       	andi	r25, 0x07	; 7
    3ca0:	89 0f       	add	r24, r25
    3ca2:	80 93 f5 00 	sts	0x00F5, r24
    3ca6:	89 81       	ldd	r24, Y+1	; 0x01
    3ca8:	88 0f       	add	r24, r24
    3caa:	88 0f       	add	r24, r24
    3cac:	88 0f       	add	r24, r24
    3cae:	80 93 f4 00 	sts	0x00F4, r24
          Can_set_dlc(cmd->dlc);
    3cb2:	80 91 ef 00 	lds	r24, 0x00EF
    3cb6:	f8 01       	movw	r30, r16
    3cb8:	97 81       	ldd	r25, Z+7	; 0x07
    3cba:	89 2b       	or	r24, r25
    3cbc:	80 93 ef 00 	sts	0x00EF, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    3cc0:	81 e0       	ldi	r24, 0x01	; 1
    3cc2:	83 87       	std	Z+11, r24	; 0x0b
    3cc4:	80 91 f4 00 	lds	r24, 0x00F4
    3cc8:	84 60       	ori	r24, 0x04	; 4
    3cca:	80 93 f4 00 	sts	0x00F4, r24
    3cce:	80 91 f0 00 	lds	r24, 0x00F0
    3cd2:	84 60       	ori	r24, 0x04	; 4
    3cd4:	80 93 f0 00 	sts	0x00F0, r24
          Can_clear_rplv();
    3cd8:	80 91 ef 00 	lds	r24, 0x00EF
    3cdc:	8f 7d       	andi	r24, 0xDF	; 223
    3cde:	42 c2       	rjmp	.+1156   	; 0x4164 <can_cmd+0x964>
          Can_clear_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    3ce0:	d8 01       	movw	r26, r16
    3ce2:	1c 96       	adiw	r26, 0x0c	; 12
    3ce4:	8c 91       	ld	r24, X
    3ce6:	1c 97       	sbiw	r26, 0x0c	; 12
    3ce8:	88 23       	and	r24, r24
    3cea:	c9 f1       	breq	.+114    	; 0x3d5e <can_cmd+0x55e>
    3cec:	15 96       	adiw	r26, 0x05	; 5
    3cee:	8c 91       	ld	r24, X
    3cf0:	15 97       	sbiw	r26, 0x05	; 5
    3cf2:	82 95       	swap	r24
    3cf4:	86 95       	lsr	r24
    3cf6:	87 70       	andi	r24, 0x07	; 7
    3cf8:	16 96       	adiw	r26, 0x06	; 6
    3cfa:	9c 91       	ld	r25, X
    3cfc:	16 97       	sbiw	r26, 0x06	; 6
    3cfe:	99 0f       	add	r25, r25
    3d00:	99 0f       	add	r25, r25
    3d02:	99 0f       	add	r25, r25
    3d04:	89 0f       	add	r24, r25
    3d06:	80 93 f3 00 	sts	0x00F3, r24
    3d0a:	14 96       	adiw	r26, 0x04	; 4
    3d0c:	8c 91       	ld	r24, X
    3d0e:	14 97       	sbiw	r26, 0x04	; 4
    3d10:	82 95       	swap	r24
    3d12:	86 95       	lsr	r24
    3d14:	87 70       	andi	r24, 0x07	; 7
    3d16:	15 96       	adiw	r26, 0x05	; 5
    3d18:	9c 91       	ld	r25, X
    3d1a:	15 97       	sbiw	r26, 0x05	; 5
    3d1c:	99 0f       	add	r25, r25
    3d1e:	99 0f       	add	r25, r25
    3d20:	99 0f       	add	r25, r25
    3d22:	89 0f       	add	r24, r25
    3d24:	80 93 f2 00 	sts	0x00F2, r24
    3d28:	13 96       	adiw	r26, 0x03	; 3
    3d2a:	8c 91       	ld	r24, X
    3d2c:	13 97       	sbiw	r26, 0x03	; 3
    3d2e:	82 95       	swap	r24
    3d30:	86 95       	lsr	r24
    3d32:	87 70       	andi	r24, 0x07	; 7
    3d34:	14 96       	adiw	r26, 0x04	; 4
    3d36:	9c 91       	ld	r25, X
    3d38:	14 97       	sbiw	r26, 0x04	; 4
    3d3a:	99 0f       	add	r25, r25
    3d3c:	99 0f       	add	r25, r25
    3d3e:	99 0f       	add	r25, r25
    3d40:	89 0f       	add	r24, r25
    3d42:	80 93 f1 00 	sts	0x00F1, r24
    3d46:	13 96       	adiw	r26, 0x03	; 3
    3d48:	8c 91       	ld	r24, X
    3d4a:	13 97       	sbiw	r26, 0x03	; 3
    3d4c:	88 0f       	add	r24, r24
    3d4e:	88 0f       	add	r24, r24
    3d50:	88 0f       	add	r24, r24
    3d52:	80 93 f0 00 	sts	0x00F0, r24
    3d56:	80 91 ef 00 	lds	r24, 0x00EF
    3d5a:	80 61       	ori	r24, 0x10	; 16
    3d5c:	15 c0       	rjmp	.+42     	; 0x3d88 <can_cmd+0x588>
          else              { Can_set_std_id(cmd->id.std);}
    3d5e:	f8 01       	movw	r30, r16
    3d60:	83 81       	ldd	r24, Z+3	; 0x03
    3d62:	86 95       	lsr	r24
    3d64:	86 95       	lsr	r24
    3d66:	86 95       	lsr	r24
    3d68:	94 81       	ldd	r25, Z+4	; 0x04
    3d6a:	92 95       	swap	r25
    3d6c:	99 0f       	add	r25, r25
    3d6e:	90 7e       	andi	r25, 0xE0	; 224
    3d70:	89 0f       	add	r24, r25
    3d72:	80 93 f3 00 	sts	0x00F3, r24
    3d76:	83 81       	ldd	r24, Z+3	; 0x03
    3d78:	82 95       	swap	r24
    3d7a:	88 0f       	add	r24, r24
    3d7c:	80 7e       	andi	r24, 0xE0	; 224
    3d7e:	80 93 f2 00 	sts	0x00F2, r24
    3d82:	80 91 ef 00 	lds	r24, 0x00EF
    3d86:	8f 7e       	andi	r24, 0xEF	; 239
    3d88:	80 93 ef 00 	sts	0x00EF, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    3d8c:	8f ef       	ldi	r24, 0xFF	; 255
    3d8e:	9f ef       	ldi	r25, 0xFF	; 255
    3d90:	dc 01       	movw	r26, r24
    3d92:	89 83       	std	Y+1, r24	; 0x01
    3d94:	9a 83       	std	Y+2, r25	; 0x02
    3d96:	ab 83       	std	Y+3, r26	; 0x03
    3d98:	bc 83       	std	Y+4, r27	; 0x04
    3d9a:	fe 01       	movw	r30, r28
    3d9c:	31 96       	adiw	r30, 0x01	; 1
    3d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    3da0:	82 95       	swap	r24
    3da2:	86 95       	lsr	r24
    3da4:	87 70       	andi	r24, 0x07	; 7
    3da6:	93 81       	ldd	r25, Z+3	; 0x03
    3da8:	99 0f       	add	r25, r25
    3daa:	99 0f       	add	r25, r25
    3dac:	99 0f       	add	r25, r25
    3dae:	89 0f       	add	r24, r25
    3db0:	80 93 f7 00 	sts	0x00F7, r24
    3db4:	81 81       	ldd	r24, Z+1	; 0x01
    3db6:	82 95       	swap	r24
    3db8:	86 95       	lsr	r24
    3dba:	87 70       	andi	r24, 0x07	; 7
    3dbc:	9b 81       	ldd	r25, Y+3	; 0x03
    3dbe:	99 0f       	add	r25, r25
    3dc0:	99 0f       	add	r25, r25
    3dc2:	99 0f       	add	r25, r25
    3dc4:	89 0f       	add	r24, r25
    3dc6:	80 93 f6 00 	sts	0x00F6, r24
    3dca:	81 81       	ldd	r24, Z+1	; 0x01
    3dcc:	88 0f       	add	r24, r24
    3dce:	88 0f       	add	r24, r24
    3dd0:	88 0f       	add	r24, r24
    3dd2:	99 81       	ldd	r25, Y+1	; 0x01
    3dd4:	92 95       	swap	r25
    3dd6:	96 95       	lsr	r25
    3dd8:	97 70       	andi	r25, 0x07	; 7
    3dda:	89 0f       	add	r24, r25
    3ddc:	80 93 f5 00 	sts	0x00F5, r24
    3de0:	89 81       	ldd	r24, Y+1	; 0x01
    3de2:	88 0f       	add	r24, r24
    3de4:	88 0f       	add	r24, r24
    3de6:	88 0f       	add	r24, r24
    3de8:	80 93 f4 00 	sts	0x00F4, r24
          Can_set_dlc(cmd->dlc);
    3dec:	80 91 ef 00 	lds	r24, 0x00EF
    3df0:	d8 01       	movw	r26, r16
    3df2:	17 96       	adiw	r26, 0x07	; 7
    3df4:	9c 91       	ld	r25, X
    3df6:	17 97       	sbiw	r26, 0x07	; 7
    3df8:	89 2b       	or	r24, r25
    3dfa:	80 93 ef 00 	sts	0x00EF, r24
          Can_clear_rtrmsk();
    3dfe:	80 91 f4 00 	lds	r24, 0x00F4
    3e02:	8b 7f       	andi	r24, 0xFB	; 251
    3e04:	80 93 f4 00 	sts	0x00F4, r24
          Can_set_idemsk();
    3e08:	80 91 f4 00 	lds	r24, 0x00F4
    3e0c:	81 60       	ori	r24, 0x01	; 1
    3e0e:	19 cf       	rjmp	.-462    	; 0x3c42 <can_cmd+0x442>
          Can_config_rx();  
          break;
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    3e10:	f8 01       	movw	r30, r16
    3e12:	94 85       	ldd	r25, Z+12	; 0x0c
    3e14:	99 23       	and	r25, r25
    3e16:	59 f1       	breq	.+86     	; 0x3e6e <can_cmd+0x66e>
    3e18:	95 81       	ldd	r25, Z+5	; 0x05
    3e1a:	92 95       	swap	r25
    3e1c:	96 95       	lsr	r25
    3e1e:	97 70       	andi	r25, 0x07	; 7
    3e20:	26 81       	ldd	r18, Z+6	; 0x06
    3e22:	22 0f       	add	r18, r18
    3e24:	22 0f       	add	r18, r18
    3e26:	22 0f       	add	r18, r18
    3e28:	92 0f       	add	r25, r18
    3e2a:	90 93 f3 00 	sts	0x00F3, r25
    3e2e:	94 81       	ldd	r25, Z+4	; 0x04
    3e30:	92 95       	swap	r25
    3e32:	96 95       	lsr	r25
    3e34:	97 70       	andi	r25, 0x07	; 7
    3e36:	25 81       	ldd	r18, Z+5	; 0x05
    3e38:	22 0f       	add	r18, r18
    3e3a:	22 0f       	add	r18, r18
    3e3c:	22 0f       	add	r18, r18
    3e3e:	92 0f       	add	r25, r18
    3e40:	90 93 f2 00 	sts	0x00F2, r25
    3e44:	93 81       	ldd	r25, Z+3	; 0x03
    3e46:	92 95       	swap	r25
    3e48:	96 95       	lsr	r25
    3e4a:	97 70       	andi	r25, 0x07	; 7
    3e4c:	24 81       	ldd	r18, Z+4	; 0x04
    3e4e:	22 0f       	add	r18, r18
    3e50:	22 0f       	add	r18, r18
    3e52:	22 0f       	add	r18, r18
    3e54:	92 0f       	add	r25, r18
    3e56:	90 93 f1 00 	sts	0x00F1, r25
    3e5a:	93 81       	ldd	r25, Z+3	; 0x03
    3e5c:	99 0f       	add	r25, r25
    3e5e:	99 0f       	add	r25, r25
    3e60:	99 0f       	add	r25, r25
    3e62:	90 93 f0 00 	sts	0x00F0, r25
    3e66:	90 91 ef 00 	lds	r25, 0x00EF
    3e6a:	90 61       	ori	r25, 0x10	; 16
    3e6c:	1b c0       	rjmp	.+54     	; 0x3ea4 <can_cmd+0x6a4>
          else              { Can_set_std_id(cmd->id.std);}
    3e6e:	d8 01       	movw	r26, r16
    3e70:	13 96       	adiw	r26, 0x03	; 3
    3e72:	9c 91       	ld	r25, X
    3e74:	13 97       	sbiw	r26, 0x03	; 3
    3e76:	96 95       	lsr	r25
    3e78:	96 95       	lsr	r25
    3e7a:	96 95       	lsr	r25
    3e7c:	14 96       	adiw	r26, 0x04	; 4
    3e7e:	2c 91       	ld	r18, X
    3e80:	14 97       	sbiw	r26, 0x04	; 4
    3e82:	22 95       	swap	r18
    3e84:	22 0f       	add	r18, r18
    3e86:	20 7e       	andi	r18, 0xE0	; 224
    3e88:	92 0f       	add	r25, r18
    3e8a:	90 93 f3 00 	sts	0x00F3, r25
    3e8e:	13 96       	adiw	r26, 0x03	; 3
    3e90:	9c 91       	ld	r25, X
    3e92:	13 97       	sbiw	r26, 0x03	; 3
    3e94:	92 95       	swap	r25
    3e96:	99 0f       	add	r25, r25
    3e98:	90 7e       	andi	r25, 0xE0	; 224
    3e9a:	90 93 f2 00 	sts	0x00F2, r25
    3e9e:	90 91 ef 00 	lds	r25, 0x00EF
    3ea2:	9f 7e       	andi	r25, 0xEF	; 239
    3ea4:	90 93 ef 00 	sts	0x00EF, r25
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    3ea8:	2f ef       	ldi	r18, 0xFF	; 255
    3eaa:	3f ef       	ldi	r19, 0xFF	; 255
    3eac:	a9 01       	movw	r20, r18
    3eae:	29 83       	std	Y+1, r18	; 0x01
    3eb0:	3a 83       	std	Y+2, r19	; 0x02
    3eb2:	4b 83       	std	Y+3, r20	; 0x03
    3eb4:	5c 83       	std	Y+4, r21	; 0x04
    3eb6:	fe 01       	movw	r30, r28
    3eb8:	31 96       	adiw	r30, 0x01	; 1
    3eba:	9b 81       	ldd	r25, Y+3	; 0x03
    3ebc:	92 95       	swap	r25
    3ebe:	96 95       	lsr	r25
    3ec0:	97 70       	andi	r25, 0x07	; 7
    3ec2:	23 81       	ldd	r18, Z+3	; 0x03
    3ec4:	22 0f       	add	r18, r18
    3ec6:	22 0f       	add	r18, r18
    3ec8:	22 0f       	add	r18, r18
    3eca:	92 0f       	add	r25, r18
    3ecc:	90 93 f7 00 	sts	0x00F7, r25
    3ed0:	91 81       	ldd	r25, Z+1	; 0x01
    3ed2:	92 95       	swap	r25
    3ed4:	96 95       	lsr	r25
    3ed6:	97 70       	andi	r25, 0x07	; 7
    3ed8:	2b 81       	ldd	r18, Y+3	; 0x03
    3eda:	22 0f       	add	r18, r18
    3edc:	22 0f       	add	r18, r18
    3ede:	22 0f       	add	r18, r18
    3ee0:	92 0f       	add	r25, r18
    3ee2:	90 93 f6 00 	sts	0x00F6, r25
    3ee6:	91 81       	ldd	r25, Z+1	; 0x01
    3ee8:	99 0f       	add	r25, r25
    3eea:	99 0f       	add	r25, r25
    3eec:	99 0f       	add	r25, r25
    3eee:	29 81       	ldd	r18, Y+1	; 0x01
    3ef0:	22 95       	swap	r18
    3ef2:	26 95       	lsr	r18
    3ef4:	27 70       	andi	r18, 0x07	; 7
    3ef6:	92 0f       	add	r25, r18
    3ef8:	90 93 f5 00 	sts	0x00F5, r25
    3efc:	99 81       	ldd	r25, Y+1	; 0x01
    3efe:	99 0f       	add	r25, r25
    3f00:	99 0f       	add	r25, r25
    3f02:	99 0f       	add	r25, r25
    3f04:	90 93 f4 00 	sts	0x00F4, r25
          Can_set_dlc(cmd->dlc);
    3f08:	90 91 ef 00 	lds	r25, 0x00EF
    3f0c:	f8 01       	movw	r30, r16
    3f0e:	27 81       	ldd	r18, Z+7	; 0x07
    3f10:	92 2b       	or	r25, r18
    3f12:	90 93 ef 00 	sts	0x00EF, r25
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    3f16:	13 86       	std	Z+11, r1	; 0x0b
    3f18:	90 91 f4 00 	lds	r25, 0x00F4
    3f1c:	94 60       	ori	r25, 0x04	; 4
    3f1e:	90 93 f4 00 	sts	0x00F4, r25
    3f22:	90 91 f0 00 	lds	r25, 0x00F0
    3f26:	9b 7f       	andi	r25, 0xFB	; 251
    3f28:	90 93 f0 00 	sts	0x00F0, r25
          Can_set_idemsk();
    3f2c:	90 91 f4 00 	lds	r25, 0x00F4
    3f30:	91 60       	ori	r25, 0x01	; 1
    3f32:	90 93 f4 00 	sts	0x00F4, r25
          Can_config_rx();  
    3f36:	90 91 ef 00 	lds	r25, 0x00EF
    3f3a:	9f 73       	andi	r25, 0x3F	; 63
    3f3c:	90 93 ef 00 	sts	0x00EF, r25
    3f40:	90 91 ef 00 	lds	r25, 0x00EF
    3f44:	90 68       	ori	r25, 0x80	; 128
    3f46:	90 93 ef 00 	sts	0x00EF, r25
	Can_set_mob_int(mob_handle) /* Ser ud til at virke TODO Fjern denne linje og lav det på en bedre måde */          
    3f4a:	90 91 de 00 	lds	r25, 0x00DE
    3f4e:	21 e0       	ldi	r18, 0x01	; 1
    3f50:	30 e0       	ldi	r19, 0x00	; 0
    3f52:	02 c0       	rjmp	.+4      	; 0x3f58 <can_cmd+0x758>
    3f54:	22 0f       	add	r18, r18
    3f56:	33 1f       	adc	r19, r19
    3f58:	8a 95       	dec	r24
    3f5a:	e2 f7       	brpl	.-8      	; 0x3f54 <can_cmd+0x754>
    3f5c:	92 2b       	or	r25, r18
    3f5e:	90 93 de 00 	sts	0x00DE, r25
    3f62:	90 91 df 00 	lds	r25, 0x00DF
    3f66:	83 2f       	mov	r24, r19
    3f68:	8f 77       	andi	r24, 0x7F	; 127
    3f6a:	89 2b       	or	r24, r25
    3f6c:	80 93 df 00 	sts	0x00DF, r24
    3f70:	ae c1       	rjmp	.+860    	; 0x42ce <can_cmd+0xace>
          break;
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    3f72:	d8 01       	movw	r26, r16
    3f74:	1c 96       	adiw	r26, 0x0c	; 12
    3f76:	8c 91       	ld	r24, X
    3f78:	1c 97       	sbiw	r26, 0x0c	; 12
    3f7a:	88 23       	and	r24, r24
    3f7c:	c9 f1       	breq	.+114    	; 0x3ff0 <can_cmd+0x7f0>
    3f7e:	15 96       	adiw	r26, 0x05	; 5
    3f80:	8c 91       	ld	r24, X
    3f82:	15 97       	sbiw	r26, 0x05	; 5
    3f84:	82 95       	swap	r24
    3f86:	86 95       	lsr	r24
    3f88:	87 70       	andi	r24, 0x07	; 7
    3f8a:	16 96       	adiw	r26, 0x06	; 6
    3f8c:	9c 91       	ld	r25, X
    3f8e:	16 97       	sbiw	r26, 0x06	; 6
    3f90:	99 0f       	add	r25, r25
    3f92:	99 0f       	add	r25, r25
    3f94:	99 0f       	add	r25, r25
    3f96:	89 0f       	add	r24, r25
    3f98:	80 93 f3 00 	sts	0x00F3, r24
    3f9c:	14 96       	adiw	r26, 0x04	; 4
    3f9e:	8c 91       	ld	r24, X
    3fa0:	14 97       	sbiw	r26, 0x04	; 4
    3fa2:	82 95       	swap	r24
    3fa4:	86 95       	lsr	r24
    3fa6:	87 70       	andi	r24, 0x07	; 7
    3fa8:	15 96       	adiw	r26, 0x05	; 5
    3faa:	9c 91       	ld	r25, X
    3fac:	15 97       	sbiw	r26, 0x05	; 5
    3fae:	99 0f       	add	r25, r25
    3fb0:	99 0f       	add	r25, r25
    3fb2:	99 0f       	add	r25, r25
    3fb4:	89 0f       	add	r24, r25
    3fb6:	80 93 f2 00 	sts	0x00F2, r24
    3fba:	13 96       	adiw	r26, 0x03	; 3
    3fbc:	8c 91       	ld	r24, X
    3fbe:	13 97       	sbiw	r26, 0x03	; 3
    3fc0:	82 95       	swap	r24
    3fc2:	86 95       	lsr	r24
    3fc4:	87 70       	andi	r24, 0x07	; 7
    3fc6:	14 96       	adiw	r26, 0x04	; 4
    3fc8:	9c 91       	ld	r25, X
    3fca:	14 97       	sbiw	r26, 0x04	; 4
    3fcc:	99 0f       	add	r25, r25
    3fce:	99 0f       	add	r25, r25
    3fd0:	99 0f       	add	r25, r25
    3fd2:	89 0f       	add	r24, r25
    3fd4:	80 93 f1 00 	sts	0x00F1, r24
    3fd8:	13 96       	adiw	r26, 0x03	; 3
    3fda:	8c 91       	ld	r24, X
    3fdc:	13 97       	sbiw	r26, 0x03	; 3
    3fde:	88 0f       	add	r24, r24
    3fe0:	88 0f       	add	r24, r24
    3fe2:	88 0f       	add	r24, r24
    3fe4:	80 93 f0 00 	sts	0x00F0, r24
    3fe8:	80 91 ef 00 	lds	r24, 0x00EF
    3fec:	80 61       	ori	r24, 0x10	; 16
    3fee:	15 c0       	rjmp	.+42     	; 0x401a <can_cmd+0x81a>
          else              { Can_set_std_id(cmd->id.std);}
    3ff0:	f8 01       	movw	r30, r16
    3ff2:	83 81       	ldd	r24, Z+3	; 0x03
    3ff4:	86 95       	lsr	r24
    3ff6:	86 95       	lsr	r24
    3ff8:	86 95       	lsr	r24
    3ffa:	94 81       	ldd	r25, Z+4	; 0x04
    3ffc:	92 95       	swap	r25
    3ffe:	99 0f       	add	r25, r25
    4000:	90 7e       	andi	r25, 0xE0	; 224
    4002:	89 0f       	add	r24, r25
    4004:	80 93 f3 00 	sts	0x00F3, r24
    4008:	83 81       	ldd	r24, Z+3	; 0x03
    400a:	82 95       	swap	r24
    400c:	88 0f       	add	r24, r24
    400e:	80 7e       	andi	r24, 0xE0	; 224
    4010:	80 93 f2 00 	sts	0x00F2, r24
    4014:	80 91 ef 00 	lds	r24, 0x00EF
    4018:	8f 7e       	andi	r24, 0xEF	; 239
    401a:	80 93 ef 00 	sts	0x00EF, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    401e:	8f ef       	ldi	r24, 0xFF	; 255
    4020:	9f ef       	ldi	r25, 0xFF	; 255
    4022:	dc 01       	movw	r26, r24
    4024:	89 83       	std	Y+1, r24	; 0x01
    4026:	9a 83       	std	Y+2, r25	; 0x02
    4028:	ab 83       	std	Y+3, r26	; 0x03
    402a:	bc 83       	std	Y+4, r27	; 0x04
    402c:	fe 01       	movw	r30, r28
    402e:	31 96       	adiw	r30, 0x01	; 1
    4030:	8b 81       	ldd	r24, Y+3	; 0x03
    4032:	82 95       	swap	r24
    4034:	86 95       	lsr	r24
    4036:	87 70       	andi	r24, 0x07	; 7
    4038:	93 81       	ldd	r25, Z+3	; 0x03
    403a:	99 0f       	add	r25, r25
    403c:	99 0f       	add	r25, r25
    403e:	99 0f       	add	r25, r25
    4040:	89 0f       	add	r24, r25
    4042:	80 93 f7 00 	sts	0x00F7, r24
    4046:	81 81       	ldd	r24, Z+1	; 0x01
    4048:	82 95       	swap	r24
    404a:	86 95       	lsr	r24
    404c:	87 70       	andi	r24, 0x07	; 7
    404e:	9b 81       	ldd	r25, Y+3	; 0x03
    4050:	99 0f       	add	r25, r25
    4052:	99 0f       	add	r25, r25
    4054:	99 0f       	add	r25, r25
    4056:	89 0f       	add	r24, r25
    4058:	80 93 f6 00 	sts	0x00F6, r24
    405c:	81 81       	ldd	r24, Z+1	; 0x01
    405e:	88 0f       	add	r24, r24
    4060:	88 0f       	add	r24, r24
    4062:	88 0f       	add	r24, r24
    4064:	99 81       	ldd	r25, Y+1	; 0x01
    4066:	92 95       	swap	r25
    4068:	96 95       	lsr	r25
    406a:	97 70       	andi	r25, 0x07	; 7
    406c:	89 0f       	add	r24, r25
    406e:	80 93 f5 00 	sts	0x00F5, r24
    4072:	89 81       	ldd	r24, Y+1	; 0x01
    4074:	88 0f       	add	r24, r24
    4076:	88 0f       	add	r24, r24
    4078:	88 0f       	add	r24, r24
    407a:	80 93 f4 00 	sts	0x00F4, r24
          Can_set_dlc(cmd->dlc);
    407e:	80 91 ef 00 	lds	r24, 0x00EF
    4082:	d8 01       	movw	r26, r16
    4084:	17 96       	adiw	r26, 0x07	; 7
    4086:	9c 91       	ld	r25, X
    4088:	17 97       	sbiw	r26, 0x07	; 7
    408a:	89 2b       	or	r24, r25
    408c:	80 93 ef 00 	sts	0x00EF, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    4090:	81 e0       	ldi	r24, 0x01	; 1
    4092:	1b 96       	adiw	r26, 0x0b	; 11
    4094:	8c 93       	st	X, r24
    4096:	1b 97       	sbiw	r26, 0x0b	; 11
    4098:	80 91 f4 00 	lds	r24, 0x00F4
    409c:	84 60       	ori	r24, 0x04	; 4
    409e:	80 93 f4 00 	sts	0x00F4, r24
    40a2:	80 91 f0 00 	lds	r24, 0x00F0
    40a6:	84 60       	ori	r24, 0x04	; 4
    40a8:	80 93 f0 00 	sts	0x00F0, r24
          Can_clear_rplv();
    40ac:	80 91 ef 00 	lds	r24, 0x00EF
    40b0:	8f 7d       	andi	r24, 0xDF	; 223
    40b2:	80 93 ef 00 	sts	0x00EF, r24
    40b6:	a8 ce       	rjmp	.-688    	; 0x3e08 <can_cmd+0x608>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    40b8:	d8 01       	movw	r26, r16
    40ba:	18 96       	adiw	r26, 0x08	; 8
    40bc:	ed 91       	ld	r30, X+
    40be:	fc 91       	ld	r31, X
    40c0:	19 97       	sbiw	r26, 0x09	; 9
    40c2:	e8 0f       	add	r30, r24
    40c4:	f1 1d       	adc	r31, r1
    40c6:	90 81       	ld	r25, Z
    40c8:	90 93 fa 00 	sts	0x00FA, r25
    40cc:	8f 5f       	subi	r24, 0xFF	; 255
    40ce:	f8 01       	movw	r30, r16
    40d0:	97 81       	ldd	r25, Z+7	; 0x07
    40d2:	89 17       	cp	r24, r25
    40d4:	88 f3       	brcs	.-30     	; 0x40b8 <can_cmd+0x8b8>
          u32_temp=0; Can_set_ext_msk(u32_temp);
    40d6:	19 82       	std	Y+1, r1	; 0x01
    40d8:	1a 82       	std	Y+2, r1	; 0x02
    40da:	1b 82       	std	Y+3, r1	; 0x03
    40dc:	1c 82       	std	Y+4, r1	; 0x04
    40de:	fe 01       	movw	r30, r28
    40e0:	31 96       	adiw	r30, 0x01	; 1
    40e2:	8b 81       	ldd	r24, Y+3	; 0x03
    40e4:	82 95       	swap	r24
    40e6:	86 95       	lsr	r24
    40e8:	87 70       	andi	r24, 0x07	; 7
    40ea:	93 81       	ldd	r25, Z+3	; 0x03
    40ec:	99 0f       	add	r25, r25
    40ee:	99 0f       	add	r25, r25
    40f0:	99 0f       	add	r25, r25
    40f2:	89 0f       	add	r24, r25
    40f4:	80 93 f7 00 	sts	0x00F7, r24
    40f8:	81 81       	ldd	r24, Z+1	; 0x01
    40fa:	82 95       	swap	r24
    40fc:	86 95       	lsr	r24
    40fe:	87 70       	andi	r24, 0x07	; 7
    4100:	9b 81       	ldd	r25, Y+3	; 0x03
    4102:	99 0f       	add	r25, r25
    4104:	99 0f       	add	r25, r25
    4106:	99 0f       	add	r25, r25
    4108:	89 0f       	add	r24, r25
    410a:	80 93 f6 00 	sts	0x00F6, r24
    410e:	81 81       	ldd	r24, Z+1	; 0x01
    4110:	88 0f       	add	r24, r24
    4112:	88 0f       	add	r24, r24
    4114:	88 0f       	add	r24, r24
    4116:	99 81       	ldd	r25, Y+1	; 0x01
    4118:	92 95       	swap	r25
    411a:	96 95       	lsr	r25
    411c:	97 70       	andi	r25, 0x07	; 7
    411e:	89 0f       	add	r24, r25
    4120:	80 93 f5 00 	sts	0x00F5, r24
    4124:	89 81       	ldd	r24, Y+1	; 0x01
    4126:	88 0f       	add	r24, r24
    4128:	88 0f       	add	r24, r24
    412a:	88 0f       	add	r24, r24
    412c:	80 93 f4 00 	sts	0x00F4, r24
          Can_set_dlc(cmd->dlc);
    4130:	80 91 ef 00 	lds	r24, 0x00EF
    4134:	d8 01       	movw	r26, r16
    4136:	17 96       	adiw	r26, 0x07	; 7
    4138:	9c 91       	ld	r25, X
    413a:	17 97       	sbiw	r26, 0x07	; 7
    413c:	89 2b       	or	r24, r25
    413e:	80 93 ef 00 	sts	0x00EF, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    4142:	81 e0       	ldi	r24, 0x01	; 1
    4144:	1b 96       	adiw	r26, 0x0b	; 11
    4146:	8c 93       	st	X, r24
    4148:	1b 97       	sbiw	r26, 0x0b	; 11
    414a:	80 91 f4 00 	lds	r24, 0x00F4
    414e:	84 60       	ori	r24, 0x04	; 4
    4150:	80 93 f4 00 	sts	0x00F4, r24
    4154:	80 91 f0 00 	lds	r24, 0x00F0
    4158:	84 60       	ori	r24, 0x04	; 4
    415a:	80 93 f0 00 	sts	0x00F0, r24
          Can_set_rplv();
    415e:	80 91 ef 00 	lds	r24, 0x00EF
    4162:	80 62       	ori	r24, 0x20	; 32
    4164:	80 93 ef 00 	sts	0x00EF, r24
    4168:	69 cd       	rjmp	.-1326   	; 0x3c3c <can_cmd+0x43c>
          Can_clear_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    416a:	f8 01       	movw	r30, r16
    416c:	84 85       	ldd	r24, Z+12	; 0x0c
    416e:	88 23       	and	r24, r24
    4170:	59 f1       	breq	.+86     	; 0x41c8 <can_cmd+0x9c8>
    4172:	85 81       	ldd	r24, Z+5	; 0x05
    4174:	82 95       	swap	r24
    4176:	86 95       	lsr	r24
    4178:	87 70       	andi	r24, 0x07	; 7
    417a:	96 81       	ldd	r25, Z+6	; 0x06
    417c:	99 0f       	add	r25, r25
    417e:	99 0f       	add	r25, r25
    4180:	99 0f       	add	r25, r25
    4182:	89 0f       	add	r24, r25
    4184:	80 93 f3 00 	sts	0x00F3, r24
    4188:	84 81       	ldd	r24, Z+4	; 0x04
    418a:	82 95       	swap	r24
    418c:	86 95       	lsr	r24
    418e:	87 70       	andi	r24, 0x07	; 7
    4190:	95 81       	ldd	r25, Z+5	; 0x05
    4192:	99 0f       	add	r25, r25
    4194:	99 0f       	add	r25, r25
    4196:	99 0f       	add	r25, r25
    4198:	89 0f       	add	r24, r25
    419a:	80 93 f2 00 	sts	0x00F2, r24
    419e:	83 81       	ldd	r24, Z+3	; 0x03
    41a0:	82 95       	swap	r24
    41a2:	86 95       	lsr	r24
    41a4:	87 70       	andi	r24, 0x07	; 7
    41a6:	94 81       	ldd	r25, Z+4	; 0x04
    41a8:	99 0f       	add	r25, r25
    41aa:	99 0f       	add	r25, r25
    41ac:	99 0f       	add	r25, r25
    41ae:	89 0f       	add	r24, r25
    41b0:	80 93 f1 00 	sts	0x00F1, r24
    41b4:	83 81       	ldd	r24, Z+3	; 0x03
    41b6:	88 0f       	add	r24, r24
    41b8:	88 0f       	add	r24, r24
    41ba:	88 0f       	add	r24, r24
    41bc:	80 93 f0 00 	sts	0x00F0, r24
    41c0:	80 91 ef 00 	lds	r24, 0x00EF
    41c4:	80 61       	ori	r24, 0x10	; 16
    41c6:	1b c0       	rjmp	.+54     	; 0x41fe <can_cmd+0x9fe>
          else              { Can_set_std_id(cmd->id.std);}
    41c8:	d8 01       	movw	r26, r16
    41ca:	13 96       	adiw	r26, 0x03	; 3
    41cc:	8c 91       	ld	r24, X
    41ce:	13 97       	sbiw	r26, 0x03	; 3
    41d0:	86 95       	lsr	r24
    41d2:	86 95       	lsr	r24
    41d4:	86 95       	lsr	r24
    41d6:	14 96       	adiw	r26, 0x04	; 4
    41d8:	9c 91       	ld	r25, X
    41da:	14 97       	sbiw	r26, 0x04	; 4
    41dc:	92 95       	swap	r25
    41de:	99 0f       	add	r25, r25
    41e0:	90 7e       	andi	r25, 0xE0	; 224
    41e2:	89 0f       	add	r24, r25
    41e4:	80 93 f3 00 	sts	0x00F3, r24
    41e8:	13 96       	adiw	r26, 0x03	; 3
    41ea:	8c 91       	ld	r24, X
    41ec:	13 97       	sbiw	r26, 0x03	; 3
    41ee:	82 95       	swap	r24
    41f0:	88 0f       	add	r24, r24
    41f2:	80 7e       	andi	r24, 0xE0	; 224
    41f4:	80 93 f2 00 	sts	0x00F2, r24
    41f8:	80 91 ef 00 	lds	r24, 0x00EF
    41fc:	8f 7e       	andi	r24, 0xEF	; 239
    41fe:	80 93 ef 00 	sts	0x00EF, r24
      cmd->status = MOB_PENDING; 
      cmd->handle = mob_handle;
      Can_set_mob(mob_handle);
      Can_clear_mob();
          
      switch (cmd->cmd)
    4202:	80 e0       	ldi	r24, 0x00	; 0
    4204:	0b c0       	rjmp	.+22     	; 0x421c <can_cmd+0xa1c>
          break;
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    4206:	d8 01       	movw	r26, r16
    4208:	18 96       	adiw	r26, 0x08	; 8
    420a:	ed 91       	ld	r30, X+
    420c:	fc 91       	ld	r31, X
    420e:	19 97       	sbiw	r26, 0x09	; 9
    4210:	e8 0f       	add	r30, r24
    4212:	f1 1d       	adc	r31, r1
    4214:	90 81       	ld	r25, Z
    4216:	90 93 fa 00 	sts	0x00FA, r25
    421a:	8f 5f       	subi	r24, 0xFF	; 255
    421c:	f8 01       	movw	r30, r16
    421e:	97 81       	ldd	r25, Z+7	; 0x07
    4220:	89 17       	cp	r24, r25
    4222:	88 f3       	brcs	.-30     	; 0x4206 <can_cmd+0xa06>
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    4224:	8f ef       	ldi	r24, 0xFF	; 255
    4226:	9f ef       	ldi	r25, 0xFF	; 255
    4228:	dc 01       	movw	r26, r24
    422a:	89 83       	std	Y+1, r24	; 0x01
    422c:	9a 83       	std	Y+2, r25	; 0x02
    422e:	ab 83       	std	Y+3, r26	; 0x03
    4230:	bc 83       	std	Y+4, r27	; 0x04
    4232:	fe 01       	movw	r30, r28
    4234:	31 96       	adiw	r30, 0x01	; 1
    4236:	8b 81       	ldd	r24, Y+3	; 0x03
    4238:	82 95       	swap	r24
    423a:	86 95       	lsr	r24
    423c:	87 70       	andi	r24, 0x07	; 7
    423e:	93 81       	ldd	r25, Z+3	; 0x03
    4240:	99 0f       	add	r25, r25
    4242:	99 0f       	add	r25, r25
    4244:	99 0f       	add	r25, r25
    4246:	89 0f       	add	r24, r25
    4248:	80 93 f7 00 	sts	0x00F7, r24
    424c:	81 81       	ldd	r24, Z+1	; 0x01
    424e:	82 95       	swap	r24
    4250:	86 95       	lsr	r24
    4252:	87 70       	andi	r24, 0x07	; 7
    4254:	9b 81       	ldd	r25, Y+3	; 0x03
    4256:	99 0f       	add	r25, r25
    4258:	99 0f       	add	r25, r25
    425a:	99 0f       	add	r25, r25
    425c:	89 0f       	add	r24, r25
    425e:	80 93 f6 00 	sts	0x00F6, r24
    4262:	81 81       	ldd	r24, Z+1	; 0x01
    4264:	88 0f       	add	r24, r24
    4266:	88 0f       	add	r24, r24
    4268:	88 0f       	add	r24, r24
    426a:	99 81       	ldd	r25, Y+1	; 0x01
    426c:	92 95       	swap	r25
    426e:	96 95       	lsr	r25
    4270:	97 70       	andi	r25, 0x07	; 7
    4272:	89 0f       	add	r24, r25
    4274:	80 93 f5 00 	sts	0x00F5, r24
    4278:	89 81       	ldd	r24, Y+1	; 0x01
    427a:	88 0f       	add	r24, r24
    427c:	88 0f       	add	r24, r24
    427e:	88 0f       	add	r24, r24
    4280:	80 93 f4 00 	sts	0x00F4, r24
          Can_set_dlc(cmd->dlc);
    4284:	80 91 ef 00 	lds	r24, 0x00EF
    4288:	d8 01       	movw	r26, r16
    428a:	17 96       	adiw	r26, 0x07	; 7
    428c:	9c 91       	ld	r25, X
    428e:	17 97       	sbiw	r26, 0x07	; 7
    4290:	89 2b       	or	r24, r25
    4292:	80 93 ef 00 	sts	0x00EF, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    4296:	81 e0       	ldi	r24, 0x01	; 1
    4298:	1b 96       	adiw	r26, 0x0b	; 11
    429a:	8c 93       	st	X, r24
    429c:	1b 97       	sbiw	r26, 0x0b	; 11
    429e:	80 91 f4 00 	lds	r24, 0x00F4
    42a2:	84 60       	ori	r24, 0x04	; 4
    42a4:	80 93 f4 00 	sts	0x00F4, r24
    42a8:	80 91 f0 00 	lds	r24, 0x00F0
    42ac:	84 60       	ori	r24, 0x04	; 4
    42ae:	80 93 f0 00 	sts	0x00F0, r24
          Can_set_rplv();
    42b2:	80 91 ef 00 	lds	r24, 0x00EF
    42b6:	80 62       	ori	r24, 0x20	; 32
    42b8:	fc ce       	rjmp	.-520    	; 0x40b2 <can_cmd+0x8b2>
          Can_config_rx();       
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    42ba:	f8 01       	movw	r30, r16
    42bc:	12 86       	std	Z+10, r1	; 0x0a
    42be:	07 c0       	rjmp	.+14     	; 0x42ce <can_cmd+0xace>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    42c0:	8f e1       	ldi	r24, 0x1F	; 31
    42c2:	d8 01       	movw	r26, r16
    42c4:	1a 96       	adiw	r26, 0x0a	; 10
    42c6:	8c 93       	st	X, r24
    42c8:	1a 97       	sbiw	r26, 0x0a	; 10
      return CAN_CMD_REFUSED;
    42ca:	8f ef       	ldi	r24, 0xFF	; 255
    42cc:	01 c0       	rjmp	.+2      	; 0x42d0 <can_cmd+0xad0>
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    42ce:	80 e0       	ldi	r24, 0x00	; 0
}
    42d0:	24 96       	adiw	r28, 0x04	; 4
    42d2:	e4 e0       	ldi	r30, 0x04	; 4
    42d4:	0c 94 2e 2d 	jmp	0x5a5c	; 0x5a5c <__epilogue_restores__+0x1c>

000042d8 <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd)
{
    42d8:	1f 93       	push	r17
    42da:	cf 93       	push	r28
    42dc:	df 93       	push	r29
    42de:	ec 01       	movw	r28, r24
    U8 a_status, rtn_val;
     
    a_status = cmd->status;
    42e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    42e2:	88 23       	and	r24, r24
    42e4:	09 f4       	brne	.+2      	; 0x42e8 <can_get_status+0x10>
    42e6:	82 c0       	rjmp	.+260    	; 0x43ec <can_get_status+0x114>
    42e8:	8f 31       	cpi	r24, 0x1F	; 31
    42ea:	09 f4       	brne	.+2      	; 0x42ee <can_get_status+0x16>
    42ec:	7f c0       	rjmp	.+254    	; 0x43ec <can_get_status+0x114>
    42ee:	8f 3f       	cpi	r24, 0xFF	; 255
    42f0:	09 f4       	brne	.+2      	; 0x42f4 <can_get_status+0x1c>
    42f2:	7c c0       	rjmp	.+248    	; 0x43ec <can_get_status+0x114>
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(cmd->handle);
    42f4:	88 81       	ld	r24, Y
    42f6:	82 95       	swap	r24
    42f8:	80 7f       	andi	r24, 0xF0	; 240
    42fa:	80 93 ed 00 	sts	0x00ED, r24
    a_status = can_get_mob_status();
    42fe:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <can_get_mob_status>
    4302:	18 2f       	mov	r17, r24
    
    switch (a_status)
    4304:	80 32       	cpi	r24, 0x20	; 32
    4306:	61 f0       	breq	.+24     	; 0x4320 <can_get_status+0x48>
    4308:	81 32       	cpi	r24, 0x21	; 33
    430a:	20 f4       	brcc	.+8      	; 0x4314 <can_get_status+0x3c>
    430c:	88 23       	and	r24, r24
    430e:	09 f4       	brne	.+2      	; 0x4312 <can_get_status+0x3a>
    4310:	6f c0       	rjmp	.+222    	; 0x43f0 <can_get_status+0x118>
    4312:	64 c0       	rjmp	.+200    	; 0x43dc <can_get_status+0x104>
    4314:	80 34       	cpi	r24, 0x40	; 64
    4316:	09 f4       	brne	.+2      	; 0x431a <can_get_status+0x42>
    4318:	57 c0       	rjmp	.+174    	; 0x43c8 <can_get_status+0xf0>
    431a:	80 3a       	cpi	r24, 0xA0	; 160
    431c:	09 f0       	breq	.+2      	; 0x4320 <can_get_status+0x48>
    431e:	5e c0       	rjmp	.+188    	; 0x43dc <can_get_status+0x104>
            rtn_val = CAN_STATUS_NOT_COMPLETED;
            break;
        //---------------      
        case MOB_RX_COMPLETED:     
        case MOB_RX_COMPLETED_DLCW:
            cmd->dlc = Can_get_dlc();
    4320:	80 91 ef 00 	lds	r24, 0x00EF
    4324:	8f 70       	andi	r24, 0x0F	; 15
    4326:	8f 83       	std	Y+7, r24	; 0x07
            can_get_data(cmd->pt_data);
    4328:	88 85       	ldd	r24, Y+8	; 0x08
    432a:	99 85       	ldd	r25, Y+9	; 0x09
    432c:	0e 94 76 1a 	call	0x34ec	; 0x34ec <can_get_data>
            cmd->ctrl.rtr = Can_get_rtr();
    4330:	20 91 f0 00 	lds	r18, 0x00F0
    4334:	30 e0       	ldi	r19, 0x00	; 0
    4336:	24 70       	andi	r18, 0x04	; 4
    4338:	30 70       	andi	r19, 0x00	; 0
    433a:	35 95       	asr	r19
    433c:	27 95       	ror	r18
    433e:	35 95       	asr	r19
    4340:	27 95       	ror	r18
    4342:	2b 87       	std	Y+11, r18	; 0x0b
            if (Can_get_ide()) // if extended frame
    4344:	80 91 ef 00 	lds	r24, 0x00EF
    4348:	84 ff       	sbrs	r24, 4
    434a:	2b c0       	rjmp	.+86     	; 0x43a2 <can_get_status+0xca>
            {
                cmd->ctrl.ide = 1; // extended frame
    434c:	81 e0       	ldi	r24, 0x01	; 1
    434e:	8c 87       	std	Y+12, r24	; 0x0c
                Can_get_ext_id(cmd->id.ext);
    4350:	80 91 f3 00 	lds	r24, 0x00F3
    4354:	86 95       	lsr	r24
    4356:	86 95       	lsr	r24
    4358:	86 95       	lsr	r24
    435a:	8e 83       	std	Y+6, r24	; 0x06
    435c:	90 91 f2 00 	lds	r25, 0x00F2
    4360:	80 91 f3 00 	lds	r24, 0x00F3
    4364:	82 95       	swap	r24
    4366:	88 0f       	add	r24, r24
    4368:	80 7e       	andi	r24, 0xE0	; 224
    436a:	96 95       	lsr	r25
    436c:	96 95       	lsr	r25
    436e:	96 95       	lsr	r25
    4370:	89 0f       	add	r24, r25
    4372:	8d 83       	std	Y+5, r24	; 0x05
    4374:	90 91 f1 00 	lds	r25, 0x00F1
    4378:	80 91 f2 00 	lds	r24, 0x00F2
    437c:	82 95       	swap	r24
    437e:	88 0f       	add	r24, r24
    4380:	80 7e       	andi	r24, 0xE0	; 224
    4382:	96 95       	lsr	r25
    4384:	96 95       	lsr	r25
    4386:	96 95       	lsr	r25
    4388:	89 0f       	add	r24, r25
    438a:	8c 83       	std	Y+4, r24	; 0x04
    438c:	90 91 f0 00 	lds	r25, 0x00F0
    4390:	80 91 f1 00 	lds	r24, 0x00F1
    4394:	82 95       	swap	r24
    4396:	88 0f       	add	r24, r24
    4398:	80 7e       	andi	r24, 0xE0	; 224
    439a:	96 95       	lsr	r25
    439c:	96 95       	lsr	r25
    439e:	96 95       	lsr	r25
    43a0:	11 c0       	rjmp	.+34     	; 0x43c4 <can_get_status+0xec>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    43a2:	1c 86       	std	Y+12, r1	; 0x0c
                    Can_get_std_id(cmd->id.std);
    43a4:	80 91 f3 00 	lds	r24, 0x00F3
    43a8:	82 95       	swap	r24
    43aa:	86 95       	lsr	r24
    43ac:	87 70       	andi	r24, 0x07	; 7
    43ae:	8c 83       	std	Y+4, r24	; 0x04
    43b0:	90 91 f2 00 	lds	r25, 0x00F2
    43b4:	80 91 f3 00 	lds	r24, 0x00F3
    43b8:	88 0f       	add	r24, r24
    43ba:	88 0f       	add	r24, r24
    43bc:	88 0f       	add	r24, r24
    43be:	92 95       	swap	r25
    43c0:	96 95       	lsr	r25
    43c2:	97 70       	andi	r25, 0x07	; 7
    43c4:	89 0f       	add	r24, r25
    43c6:	8b 83       	std	Y+3, r24	; 0x03
            rtn_val = CAN_STATUS_COMPLETED;
            break;
        //---------------      
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    43c8:	1a 87       	std	Y+10, r17	; 0x0a
            Can_mob_abort();        // Freed the MOB
    43ca:	80 91 ef 00 	lds	r24, 0x00EF
    43ce:	8f 73       	andi	r24, 0x3F	; 63
    43d0:	80 93 ef 00 	sts	0x00EF, r24
            Can_clear_status_mob(); //   and reset MOb status
    43d4:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_COMPLETED;
    43d8:	80 e0       	ldi	r24, 0x00	; 0
            break;
    43da:	0b c0       	rjmp	.+22     	; 0x43f2 <can_get_status+0x11a>
        //---------------      
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    43dc:	1a 87       	std	Y+10, r17	; 0x0a
            Can_mob_abort();        // Freed the MOB
    43de:	80 91 ef 00 	lds	r24, 0x00EF
    43e2:	8f 73       	andi	r24, 0x3F	; 63
    43e4:	80 93 ef 00 	sts	0x00EF, r24
            Can_clear_status_mob(); //   and reset MOb status
    43e8:	10 92 ee 00 	sts	0x00EE, r1
    U8 a_status, rtn_val;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    {
        return CAN_STATUS_ERROR;
    43ec:	82 e0       	ldi	r24, 0x02	; 2
    43ee:	01 c0       	rjmp	.+2      	; 0x43f2 <can_get_status+0x11a>
    
    switch (a_status)
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    43f0:	81 e0       	ldi	r24, 0x01	; 1
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
    43f2:	df 91       	pop	r29
    43f4:	cf 91       	pop	r28
    43f6:	1f 91       	pop	r17
    43f8:	08 95       	ret

000043fa <__vector_16>:
volatile uint8_t xbee_sending = 0;
volatile uint8_t nextId = 0;

/* Funktion der sender data request til ECU */
ISR(TIMER0_COMP_vect)
{
    43fa:	1f 92       	push	r1
    43fc:	0f 92       	push	r0
    43fe:	0f b6       	in	r0, 0x3f	; 63
    4400:	0f 92       	push	r0
    4402:	0b b6       	in	r0, 0x3b	; 59
    4404:	0f 92       	push	r0
    4406:	11 24       	eor	r1, r1
    4408:	2f 93       	push	r18
    440a:	3f 93       	push	r19
    440c:	4f 93       	push	r20
    440e:	5f 93       	push	r21
    4410:	6f 93       	push	r22
    4412:	7f 93       	push	r23
    4414:	8f 93       	push	r24
    4416:	9f 93       	push	r25
    4418:	af 93       	push	r26
    441a:	bf 93       	push	r27
    441c:	cf 93       	push	r28
    441e:	df 93       	push	r29
    4420:	ef 93       	push	r30
    4422:	ff 93       	push	r31
	int i;
	testvar++;
    4424:	80 91 ba 03 	lds	r24, 0x03BA
    4428:	90 91 bb 03 	lds	r25, 0x03BB
    442c:	01 96       	adiw	r24, 0x01	; 1
    442e:	90 93 bb 03 	sts	0x03BB, r25
    4432:	80 93 ba 03 	sts	0x03BA, r24
	if (testvar == 4) {
    4436:	84 30       	cpi	r24, 0x04	; 4
    4438:	91 05       	cpc	r25, r1
    443a:	d1 f5       	brne	.+116    	; 0x44b0 <__vector_16+0xb6>
		RecCount = 1;
    443c:	21 e0       	ldi	r18, 0x01	; 1
    443e:	20 93 0f 01 	sts	0x010F, r18
		RecJ = 0;
    4442:	10 92 b6 03 	sts	0x03B6, r1
		RecXbeeSend= 0;
    4446:	10 92 b7 03 	sts	0x03B7, r1
		RecCanSend = 0;
    444a:	10 92 b8 03 	sts	0x03B8, r1
		if (RecIndex != 114 && EcuErrorTmp < 5) { // Test for fejl
    444e:	80 91 b4 03 	lds	r24, 0x03B4
    4452:	90 91 b5 03 	lds	r25, 0x03B5
    4456:	82 37       	cpi	r24, 0x72	; 114
    4458:	91 05       	cpc	r25, r1
    445a:	69 f0       	breq	.+26     	; 0x4476 <__vector_16+0x7c>
    445c:	30 91 bf 03 	lds	r19, 0x03BF
    4460:	35 30       	cpi	r19, 0x05	; 5
    4462:	48 f4       	brcc	.+18     	; 0x4476 <__vector_16+0x7c>
			EcuErrorTmp++;
    4464:	83 2f       	mov	r24, r19
    4466:	8f 5f       	subi	r24, 0xFF	; 255
    4468:	80 93 bf 03 	sts	0x03BF, r24
			if (EcuErrorTmp == 5) {
    446c:	85 30       	cpi	r24, 0x05	; 5
    446e:	79 f4       	brne	.+30     	; 0x448e <__vector_16+0x94>
				EcuCommError = 1;
    4470:	20 93 be 03 	sts	0x03BE, r18
    4474:	0c c0       	rjmp	.+24     	; 0x448e <__vector_16+0x94>
			}
		} else if (EcuErrorTmp > 0 && RecIndex == 114) {
    4476:	20 91 bf 03 	lds	r18, 0x03BF
    447a:	22 23       	and	r18, r18
    447c:	41 f0       	breq	.+16     	; 0x448e <__vector_16+0x94>
    447e:	82 37       	cpi	r24, 0x72	; 114
    4480:	91 05       	cpc	r25, r1
    4482:	29 f4       	brne	.+10     	; 0x448e <__vector_16+0x94>
			EcuErrorTmp--;
    4484:	21 50       	subi	r18, 0x01	; 1
    4486:	20 93 bf 03 	sts	0x03BF, r18
			EcuCommError = 0;
    448a:	10 92 be 03 	sts	0x03BE, r1
		}
		testvar=0;
    448e:	10 92 bb 03 	sts	0x03BB, r1
    4492:	10 92 ba 03 	sts	0x03BA, r1
		RecIndex = 0;
    4496:	10 92 b5 03 	sts	0x03B5, r1
    449a:	10 92 b4 03 	sts	0x03B4, r1
    449e:	c0 ef       	ldi	r28, 0xF0	; 240
    44a0:	d1 e0       	ldi	r29, 0x01	; 1
		for (i=0;i<=9;i++) {		// Send data req streng
			USART0_Transmit(ecu_data[i]); 
    44a2:	89 91       	ld	r24, Y+
    44a4:	0e 94 18 03 	call	0x630	; 0x630 <USART0_Transmit>
			EcuErrorTmp--;
			EcuCommError = 0;
		}
		testvar=0;
		RecIndex = 0;
		for (i=0;i<=9;i++) {		// Send data req streng
    44a8:	81 e0       	ldi	r24, 0x01	; 1
    44aa:	ca 3f       	cpi	r28, 0xFA	; 250
    44ac:	d8 07       	cpc	r29, r24
    44ae:	c9 f7       	brne	.-14     	; 0x44a2 <__vector_16+0xa8>
			USART0_Transmit(ecu_data[i]); 
		}
	}
}
    44b0:	ff 91       	pop	r31
    44b2:	ef 91       	pop	r30
    44b4:	df 91       	pop	r29
    44b6:	cf 91       	pop	r28
    44b8:	bf 91       	pop	r27
    44ba:	af 91       	pop	r26
    44bc:	9f 91       	pop	r25
    44be:	8f 91       	pop	r24
    44c0:	7f 91       	pop	r23
    44c2:	6f 91       	pop	r22
    44c4:	5f 91       	pop	r21
    44c6:	4f 91       	pop	r20
    44c8:	3f 91       	pop	r19
    44ca:	2f 91       	pop	r18
    44cc:	0f 90       	pop	r0
    44ce:	0b be       	out	0x3b, r0	; 59
    44d0:	0f 90       	pop	r0
    44d2:	0f be       	out	0x3f, r0	; 63
    44d4:	0f 90       	pop	r0
    44d6:	1f 90       	pop	r1
    44d8:	18 95       	reti

000044da <__vector_21>:

/* Funktion til at læse data fra ECU */
ISR(USART0_RX_vect)
{
    44da:	1f 92       	push	r1
    44dc:	0f 92       	push	r0
    44de:	0f b6       	in	r0, 0x3f	; 63
    44e0:	0f 92       	push	r0
    44e2:	0b b6       	in	r0, 0x3b	; 59
    44e4:	0f 92       	push	r0
    44e6:	11 24       	eor	r1, r1
    44e8:	2f 93       	push	r18
    44ea:	3f 93       	push	r19
    44ec:	4f 93       	push	r20
    44ee:	5f 93       	push	r21
    44f0:	6f 93       	push	r22
    44f2:	7f 93       	push	r23
    44f4:	8f 93       	push	r24
    44f6:	9f 93       	push	r25
    44f8:	af 93       	push	r26
    44fa:	bf 93       	push	r27
    44fc:	ef 93       	push	r30
    44fe:	ff 93       	push	r31
	if (RecIndex <= 114) {			// Der skal modtages 228 bytes fra ECU'en
    4500:	80 91 b4 03 	lds	r24, 0x03B4
    4504:	90 91 b5 03 	lds	r25, 0x03B5
    4508:	83 37       	cpi	r24, 0x73	; 115
    450a:	91 05       	cpc	r25, r1
    450c:	0c f0       	brlt	.+2      	; 0x4510 <__vector_21+0x36>
    450e:	da c0       	rjmp	.+436    	; 0x46c4 <__vector_21+0x1ea>
		EcuData[RecIndex] = UDR0;	// Gem data fra ECU
    4510:	20 91 c6 00 	lds	r18, 0x00C6
    4514:	fc 01       	movw	r30, r24
    4516:	e3 50       	subi	r30, 0x03	; 3
    4518:	fe 4f       	sbci	r31, 0xFE	; 254
    451a:	20 83       	st	Z, r18
		RecIndex++;
    451c:	01 96       	adiw	r24, 0x01	; 1
    451e:	90 93 b5 03 	sts	0x03B5, r25
    4522:	80 93 b4 03 	sts	0x03B4, r24

		if (RecCount == RecIndex) {
    4526:	40 91 0f 01 	lds	r20, 0x010F
    452a:	24 2f       	mov	r18, r20
    452c:	30 e0       	ldi	r19, 0x00	; 0
    452e:	28 17       	cp	r18, r24
    4530:	39 07       	cpc	r19, r25
    4532:	09 f0       	breq	.+2      	; 0x4536 <__vector_21+0x5c>
    4534:	8a c0       	rjmp	.+276    	; 0x464a <__vector_21+0x170>
			RecCount += ECUObjects[RecJ].length;
    4536:	80 91 b6 03 	lds	r24, 0x03B6
    453a:	90 e0       	ldi	r25, 0x00	; 0
    453c:	fc 01       	movw	r30, r24
    453e:	ee 0f       	add	r30, r30
    4540:	ff 1f       	adc	r31, r31
    4542:	e8 0f       	add	r30, r24
    4544:	f9 1f       	adc	r31, r25
    4546:	e7 59       	subi	r30, 0x97	; 151
    4548:	fe 4f       	sbci	r31, 0xFE	; 254
    454a:	80 81       	ld	r24, Z
    454c:	84 0f       	add	r24, r20
    454e:	80 93 0f 01 	sts	0x010F, r24
			if (RecCanSend == 1) {
    4552:	80 91 b8 03 	lds	r24, 0x03B8
    4556:	81 30       	cpi	r24, 0x01	; 1
    4558:	41 f4       	brne	.+16     	; 0x456a <__vector_21+0x90>
				can_send_non_blocking(rpm_msgid, &CanSendData[0], 3);
    455a:	85 e8       	ldi	r24, 0x85	; 133
    455c:	90 e0       	ldi	r25, 0x00	; 0
    455e:	65 e9       	ldi	r22, 0x95	; 149
    4560:	7a e0       	ldi	r23, 0x0A	; 10
    4562:	43 e0       	ldi	r20, 0x03	; 3
    4564:	50 e0       	ldi	r21, 0x00	; 0
    4566:	0e 94 52 26 	call	0x4ca4	; 0x4ca4 <can_send_non_blocking>
			}
			if (valueObjects[ECUObjects[RecJ].id].action & (TO_XBEE | TO_SD | TO_CAN) ) {
    456a:	80 91 b6 03 	lds	r24, 0x03B6
    456e:	90 e0       	ldi	r25, 0x00	; 0
    4570:	fc 01       	movw	r30, r24
    4572:	ee 0f       	add	r30, r30
    4574:	ff 1f       	adc	r31, r31
    4576:	e8 0f       	add	r30, r24
    4578:	f9 1f       	adc	r31, r25
    457a:	e7 59       	subi	r30, 0x97	; 151
    457c:	fe 4f       	sbci	r31, 0xFE	; 254
    457e:	01 80       	ldd	r0, Z+1	; 0x01
    4580:	f2 81       	ldd	r31, Z+2	; 0x02
    4582:	e0 2d       	mov	r30, r0
    4584:	ee 0f       	add	r30, r30
    4586:	ff 1f       	adc	r31, r31
    4588:	ed 5e       	subi	r30, 0xED	; 237
    458a:	fe 4f       	sbci	r31, 0xFE	; 254
    458c:	81 81       	ldd	r24, Z+1	; 0x01
    458e:	90 e0       	ldi	r25, 0x00	; 0
    4590:	9c 01       	movw	r18, r24
    4592:	27 70       	andi	r18, 0x07	; 7
    4594:	30 70       	andi	r19, 0x00	; 0
    4596:	21 15       	cp	r18, r1
    4598:	31 05       	cpc	r19, r1
    459a:	09 f4       	brne	.+2      	; 0x459e <__vector_21+0xc4>
    459c:	4d c0       	rjmp	.+154    	; 0x4638 <__vector_21+0x15e>
				
				
				RecXbeeSend = 0;
    459e:	10 92 b7 03 	sts	0x03B7, r1
				RecCanSend = 0;
    45a2:	10 92 b8 03 	sts	0x03B8, r1

				/* Value to xbee? */				
				if (valueObjects[ECUObjects[RecJ].id].action & TO_XBEE) {
    45a6:	82 ff       	sbrs	r24, 2
    45a8:	2b c0       	rjmp	.+86     	; 0x4600 <__vector_21+0x126>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    45aa:	f8 94       	cli
				    	//_delay_us(10);
				    	ATOMIC_BLOCK(ATOMIC_FORCEON)
				    	{
						QUEUE_PUT(xbee_q, ECUObjects[RecJ].id);
    45ac:	80 91 17 0a 	lds	r24, 0x0A17
    45b0:	90 91 18 0a 	lds	r25, 0x0A18
    45b4:	dc 01       	movw	r26, r24
    45b6:	ab 5e       	subi	r26, 0xEB	; 235
    45b8:	b5 4f       	sbci	r27, 0xF5	; 245
    45ba:	20 91 b6 03 	lds	r18, 0x03B6
    45be:	30 e0       	ldi	r19, 0x00	; 0
    45c0:	f9 01       	movw	r30, r18
    45c2:	ee 0f       	add	r30, r30
    45c4:	ff 1f       	adc	r31, r31
    45c6:	e2 0f       	add	r30, r18
    45c8:	f3 1f       	adc	r31, r19
    45ca:	e7 59       	subi	r30, 0x97	; 151
    45cc:	fe 4f       	sbci	r31, 0xFE	; 254
    45ce:	21 81       	ldd	r18, Z+1	; 0x01
    45d0:	17 96       	adiw	r26, 0x07	; 7
    45d2:	2c 93       	st	X, r18
    45d4:	17 97       	sbiw	r26, 0x07	; 7
    45d6:	01 96       	adiw	r24, 0x01	; 1
    45d8:	60 91 19 0a 	lds	r22, 0x0A19
    45dc:	70 91 1a 0a 	lds	r23, 0x0A1A
    45e0:	0e 94 cf 2c 	call	0x599e	; 0x599e <__divmodhi4>
    45e4:	90 93 18 0a 	sts	0x0A18, r25
    45e8:	80 93 17 0a 	sts	0x0A17, r24
    45ec:	80 91 1b 0a 	lds	r24, 0x0A1B
    45f0:	8f 5f       	subi	r24, 0xFF	; 255
    45f2:	e5 e1       	ldi	r30, 0x15	; 21
    45f4:	fa e0       	ldi	r31, 0x0A	; 10
    45f6:	86 83       	std	Z+6, r24	; 0x06
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    45f8:	78 94       	sei
					}
					RecXbeeSend = 1;
    45fa:	81 e0       	ldi	r24, 0x01	; 1
    45fc:	80 93 b7 03 	sts	0x03B7, r24
				}
				
				/* Value to CAN? */
				if (valueObjects[ECUObjects[RecJ].id].action & TO_CAN) {
    4600:	80 91 b6 03 	lds	r24, 0x03B6
    4604:	90 e0       	ldi	r25, 0x00	; 0
    4606:	fc 01       	movw	r30, r24
    4608:	ee 0f       	add	r30, r30
    460a:	ff 1f       	adc	r31, r31
    460c:	e8 0f       	add	r30, r24
    460e:	f9 1f       	adc	r31, r25
    4610:	e7 59       	subi	r30, 0x97	; 151
    4612:	fe 4f       	sbci	r31, 0xFE	; 254
    4614:	81 81       	ldd	r24, Z+1	; 0x01
    4616:	92 81       	ldd	r25, Z+2	; 0x02
    4618:	fc 01       	movw	r30, r24
    461a:	ee 0f       	add	r30, r30
    461c:	ff 1f       	adc	r31, r31
    461e:	ed 5e       	subi	r30, 0xED	; 237
    4620:	fe 4f       	sbci	r31, 0xFE	; 254
    4622:	21 81       	ldd	r18, Z+1	; 0x01
    4624:	20 ff       	sbrs	r18, 0
    4626:	0c c0       	rjmp	.+24     	; 0x4640 <__vector_21+0x166>
					/* TODO
					 * Insert call to val_to_CAN() when the function is
					 * made
					 */
					CanDataIndex = 0;
					CanSendData[CanDataIndex++] = ECUObjects[RecJ].id;
    4628:	80 93 95 0a 	sts	0x0A95, r24
    462c:	81 e0       	ldi	r24, 0x01	; 1
    462e:	80 93 b9 03 	sts	0x03B9, r24
					RecCanSend = 1;
    4632:	80 93 b8 03 	sts	0x03B8, r24
    4636:	04 c0       	rjmp	.+8      	; 0x4640 <__vector_21+0x166>
					 * Insert call to val_to_SD() when the function is
					 * made
					 */
				}
			} else {
				RecCanSend = 0;
    4638:	10 92 b8 03 	sts	0x03B8, r1
				RecXbeeSend = 0;
    463c:	10 92 b7 03 	sts	0x03B7, r1
			}

			RecJ++;
    4640:	80 91 b6 03 	lds	r24, 0x03B6
    4644:	8f 5f       	subi	r24, 0xFF	; 255
    4646:	80 93 b6 03 	sts	0x03B6, r24
		}

		if (RecXbeeSend == 1) {
    464a:	80 91 b7 03 	lds	r24, 0x03B7
    464e:	81 30       	cpi	r24, 0x01	; 1
    4650:	21 f5       	brne	.+72     	; 0x469a <__vector_21+0x1c0>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4652:	f8 94       	cli
		    	ATOMIC_BLOCK(ATOMIC_FORCEON)
		    	{
				QUEUE_PUT(xbee_q, EcuData[RecIndex-1]);
    4654:	80 91 17 0a 	lds	r24, 0x0A17
    4658:	90 91 18 0a 	lds	r25, 0x0A18
    465c:	dc 01       	movw	r26, r24
    465e:	ab 5e       	subi	r26, 0xEB	; 235
    4660:	b5 4f       	sbci	r27, 0xF5	; 245
    4662:	e0 91 b4 03 	lds	r30, 0x03B4
    4666:	f0 91 b5 03 	lds	r31, 0x03B5
    466a:	e4 50       	subi	r30, 0x04	; 4
    466c:	fe 4f       	sbci	r31, 0xFE	; 254
    466e:	20 81       	ld	r18, Z
    4670:	17 96       	adiw	r26, 0x07	; 7
    4672:	2c 93       	st	X, r18
    4674:	17 97       	sbiw	r26, 0x07	; 7
    4676:	01 96       	adiw	r24, 0x01	; 1
    4678:	60 91 19 0a 	lds	r22, 0x0A19
    467c:	70 91 1a 0a 	lds	r23, 0x0A1A
    4680:	0e 94 cf 2c 	call	0x599e	; 0x599e <__divmodhi4>
    4684:	90 93 18 0a 	sts	0x0A18, r25
    4688:	80 93 17 0a 	sts	0x0A17, r24
    468c:	80 91 1b 0a 	lds	r24, 0x0A1B
    4690:	8f 5f       	subi	r24, 0xFF	; 255
    4692:	e5 e1       	ldi	r30, 0x15	; 21
    4694:	fa e0       	ldi	r31, 0x0A	; 10
    4696:	86 83       	std	Z+6, r24	; 0x06
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    4698:	78 94       	sei
			}
		}
		if (RecCanSend == 1) {
    469a:	80 91 b8 03 	lds	r24, 0x03B8
    469e:	81 30       	cpi	r24, 0x01	; 1
    46a0:	89 f4       	brne	.+34     	; 0x46c4 <__vector_21+0x1ea>
			CanSendData[CanDataIndex++] = EcuData[RecIndex-1];
    46a2:	80 91 b9 03 	lds	r24, 0x03B9
    46a6:	e8 2f       	mov	r30, r24
    46a8:	f0 e0       	ldi	r31, 0x00	; 0
    46aa:	eb 56       	subi	r30, 0x6B	; 107
    46ac:	f5 4f       	sbci	r31, 0xF5	; 245
    46ae:	a0 91 b4 03 	lds	r26, 0x03B4
    46b2:	b0 91 b5 03 	lds	r27, 0x03B5
    46b6:	a4 50       	subi	r26, 0x04	; 4
    46b8:	be 4f       	sbci	r27, 0xFE	; 254
    46ba:	9c 91       	ld	r25, X
    46bc:	90 83       	st	Z, r25
    46be:	8f 5f       	subi	r24, 0xFF	; 255
    46c0:	80 93 b9 03 	sts	0x03B9, r24
		}

	}
}
    46c4:	ff 91       	pop	r31
    46c6:	ef 91       	pop	r30
    46c8:	bf 91       	pop	r27
    46ca:	af 91       	pop	r26
    46cc:	9f 91       	pop	r25
    46ce:	8f 91       	pop	r24
    46d0:	7f 91       	pop	r23
    46d2:	6f 91       	pop	r22
    46d4:	5f 91       	pop	r21
    46d6:	4f 91       	pop	r20
    46d8:	3f 91       	pop	r19
    46da:	2f 91       	pop	r18
    46dc:	0f 90       	pop	r0
    46de:	0b be       	out	0x3b, r0	; 59
    46e0:	0f 90       	pop	r0
    46e2:	0f be       	out	0x3f, r0	; 63
    46e4:	0f 90       	pop	r0
    46e6:	1f 90       	pop	r1
    46e8:	18 95       	reti

000046ea <__vector_33>:

/* ISR to take care of xbee data sending */
ISR(USART1_UDRE_vect)
{
    46ea:	1f 92       	push	r1
    46ec:	0f 92       	push	r0
    46ee:	0f b6       	in	r0, 0x3f	; 63
    46f0:	0f 92       	push	r0
    46f2:	0b b6       	in	r0, 0x3b	; 59
    46f4:	0f 92       	push	r0
    46f6:	11 24       	eor	r1, r1
    46f8:	2f 93       	push	r18
    46fa:	5f 93       	push	r21
    46fc:	6f 93       	push	r22
    46fe:	7f 93       	push	r23
    4700:	8f 93       	push	r24
    4702:	9f 93       	push	r25
    4704:	af 93       	push	r26
    4706:	bf 93       	push	r27
    4708:	ef 93       	push	r30
    470a:	ff 93       	push	r31
	uint8_t tmp;

	/* if xbee_seq_index is less than 3 send package start sequence */
	if (xbee_seq_index<3) {
    470c:	80 91 c0 03 	lds	r24, 0x03C0
    4710:	83 30       	cpi	r24, 0x03	; 3
    4712:	68 f4       	brcc	.+26     	; 0x472e <__vector_33+0x44>
		UDR1 = start_sequence[xbee_seq_index++];
    4714:	80 91 c0 03 	lds	r24, 0x03C0
    4718:	e8 2f       	mov	r30, r24
    471a:	f0 e0       	ldi	r31, 0x00	; 0
    471c:	e0 5f       	subi	r30, 0xF0	; 240
    471e:	fe 4f       	sbci	r31, 0xFE	; 254
    4720:	90 81       	ld	r25, Z
    4722:	90 93 ce 00 	sts	0x00CE, r25
    4726:	8f 5f       	subi	r24, 0xFF	; 255
    4728:	80 93 c0 03 	sts	0x03C0, r24
    472c:	3c c0       	rjmp	.+120    	; 0x47a6 <__vector_33+0xbc>
	}else{
		QUEUE_GET(xbee_q, tmp);
    472e:	80 91 15 0a 	lds	r24, 0x0A15
    4732:	90 91 16 0a 	lds	r25, 0x0A16
    4736:	fc 01       	movw	r30, r24
    4738:	eb 5e       	subi	r30, 0xEB	; 235
    473a:	f5 4f       	sbci	r31, 0xF5	; 245
    473c:	27 81       	ldd	r18, Z+7	; 0x07
    473e:	01 96       	adiw	r24, 0x01	; 1
    4740:	60 91 19 0a 	lds	r22, 0x0A19
    4744:	70 91 1a 0a 	lds	r23, 0x0A1A
    4748:	0e 94 cf 2c 	call	0x599e	; 0x599e <__divmodhi4>
    474c:	90 93 16 0a 	sts	0x0A16, r25
    4750:	80 93 15 0a 	sts	0x0A15, r24
    4754:	80 91 1b 0a 	lds	r24, 0x0A1B
    4758:	81 50       	subi	r24, 0x01	; 1
    475a:	80 93 1b 0a 	sts	0x0A1B, r24
		if (nextId == 0) {
    475e:	80 91 bd 03 	lds	r24, 0x03BD
    4762:	88 23       	and	r24, r24
    4764:	51 f4       	brne	.+20     	; 0x477a <__vector_33+0x90>
			nextId = valueObjects[tmp].length+8;
    4766:	e2 2f       	mov	r30, r18
    4768:	f0 e0       	ldi	r31, 0x00	; 0
    476a:	ee 0f       	add	r30, r30
    476c:	ff 1f       	adc	r31, r31
    476e:	ed 5e       	subi	r30, 0xED	; 237
    4770:	fe 4f       	sbci	r31, 0xFE	; 254
    4772:	80 81       	ld	r24, Z
    4774:	88 5f       	subi	r24, 0xF8	; 248
    4776:	80 93 bd 03 	sts	0x03BD, r24
		}
		UDR1 = tmp;
    477a:	20 93 ce 00 	sts	0x00CE, r18
		nextId = nextId - 8;
    477e:	80 91 bd 03 	lds	r24, 0x03BD
    4782:	88 50       	subi	r24, 0x08	; 8
    4784:	80 93 bd 03 	sts	0x03BD, r24
	    	if (nextId == 0) {
    4788:	80 91 bd 03 	lds	r24, 0x03BD
    478c:	88 23       	and	r24, r24
    478e:	59 f4       	brne	.+22     	; 0x47a6 <__vector_33+0xbc>
			if (QUEUE_GET_NUM_ELE(xbee_q) <= 4) {
    4790:	80 91 1b 0a 	lds	r24, 0x0A1B
    4794:	85 30       	cpi	r24, 0x05	; 5
    4796:	38 f4       	brcc	.+14     	; 0x47a6 <__vector_33+0xbc>
				xbee_sending = 0;
    4798:	10 92 bc 03 	sts	0x03BC, r1
				Usart1_tx_ei_dis();
    479c:	80 91 c9 00 	lds	r24, 0x00C9
    47a0:	8f 7d       	andi	r24, 0xDF	; 223
    47a2:	80 93 c9 00 	sts	0x00C9, r24
			}
		}
	}
}
    47a6:	ff 91       	pop	r31
    47a8:	ef 91       	pop	r30
    47aa:	bf 91       	pop	r27
    47ac:	af 91       	pop	r26
    47ae:	9f 91       	pop	r25
    47b0:	8f 91       	pop	r24
    47b2:	7f 91       	pop	r23
    47b4:	6f 91       	pop	r22
    47b6:	5f 91       	pop	r21
    47b8:	2f 91       	pop	r18
    47ba:	0f 90       	pop	r0
    47bc:	0b be       	out	0x3b, r0	; 59
    47be:	0f 90       	pop	r0
    47c0:	0f be       	out	0x3f, r0	; 63
    47c2:	0f 90       	pop	r0
    47c4:	1f 90       	pop	r1
    47c6:	18 95       	reti

000047c8 <xbee_send_trigger>:
	 * 
	 *
	 * -Trigger package send 
	 */
	/* Check if xbee is already sending and if true just return */
	if (xbee_sending) return;
    47c8:	80 91 bc 03 	lds	r24, 0x03BC
    47cc:	88 23       	and	r24, r24
    47ce:	d1 f4       	brne	.+52     	; 0x4804 <xbee_send_trigger+0x3c>

	/* If number of bytes in send buffer is greater than X send data */
	if (QUEUE_GET_NUM_ELE(xbee_q)>=10){
    47d0:	80 91 1b 0a 	lds	r24, 0x0A1B
    47d4:	8a 30       	cpi	r24, 0x0A	; 10
    47d6:	b0 f0       	brcs	.+44     	; 0x4804 <xbee_send_trigger+0x3c>
		xbee_sending = 1;
    47d8:	81 e0       	ldi	r24, 0x01	; 1
    47da:	80 93 bc 03 	sts	0x03BC, r24
		xbee_seq_index = 0;
    47de:	10 92 c0 03 	sts	0x03C0, r1
	    	Usart1_tx_ei_en();	/* Remove when done testing */
    47e2:	80 91 c9 00 	lds	r24, 0x00C9
    47e6:	80 62       	ori	r24, 0x20	; 32
    47e8:	80 93 c9 00 	sts	0x00C9, r24
		UDR1 = start_sequence[xbee_seq_index++];
    47ec:	80 91 c0 03 	lds	r24, 0x03C0
    47f0:	e8 2f       	mov	r30, r24
    47f2:	f0 e0       	ldi	r31, 0x00	; 0
    47f4:	e6 50       	subi	r30, 0x06	; 6
    47f6:	fe 4f       	sbci	r31, 0xFE	; 254
    47f8:	90 81       	ld	r25, Z
    47fa:	90 93 ce 00 	sts	0x00CE, r25
    47fe:	8f 5f       	subi	r24, 0xFF	; 255
    4800:	80 93 c0 03 	sts	0x03C0, r24
    4804:	08 95       	ret

00004806 <TWI_init>:
#include <util/twi.h>
#include "twi.h"

void TWI_init(void)
{
	PORTD |= (1<<PORTD0)|(1<<PORTD1);	/* Enable pull-up on TWI pins */
    4806:	8b b1       	in	r24, 0x0b	; 11
    4808:	83 60       	ori	r24, 0x03	; 3
    480a:	8b b9       	out	0x0b, r24	; 11

	/* Set TWI clock */
	TWSR = 0;	/* Set prescaler to 1 */
    480c:	10 92 b9 00 	sts	0x00B9, r1
	TWBR = (F_CPU/TWI_CLOCK-16)/2;	/* Calculate TWBR value */
    4810:	8f e2       	ldi	r24, 0x2F	; 47
    4812:	80 93 b8 00 	sts	0x00B8, r24
}
    4816:	08 95       	ret

00004818 <TWI_start>:

BOOL TWI_start(void)
{
	TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);	/* send start condition */
    4818:	84 ea       	ldi	r24, 0xA4	; 164
    481a:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    481e:	80 91 bc 00 	lds	r24, 0x00BC
    4822:	87 ff       	sbrs	r24, 7
    4824:	fc cf       	rjmp	.-8      	; 0x481e <TWI_start+0x6>
	if (!((TW_STATUS == TW_REP_START) || (TW_STATUS == TW_START))) return FALSE; /* Return if communication could not be started */
    4826:	80 91 b9 00 	lds	r24, 0x00B9
    482a:	88 7f       	andi	r24, 0xF8	; 248
    482c:	80 31       	cpi	r24, 0x10	; 16
    482e:	51 f0       	breq	.+20     	; 0x4844 <TWI_start+0x2c>
    4830:	80 91 b9 00 	lds	r24, 0x00B9
    4834:	88 7f       	andi	r24, 0xF8	; 248
	/* Set TWI clock */
	TWSR = 0;	/* Set prescaler to 1 */
	TWBR = (F_CPU/TWI_CLOCK-16)/2;	/* Calculate TWBR value */
}

BOOL TWI_start(void)
    4836:	21 e0       	ldi	r18, 0x01	; 1
    4838:	30 e0       	ldi	r19, 0x00	; 0
    483a:	88 30       	cpi	r24, 0x08	; 8
    483c:	29 f0       	breq	.+10     	; 0x4848 <TWI_start+0x30>
    483e:	20 e0       	ldi	r18, 0x00	; 0
    4840:	30 e0       	ldi	r19, 0x00	; 0
    4842:	02 c0       	rjmp	.+4      	; 0x4848 <TWI_start+0x30>
{
	TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);	/* send start condition */
	while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
	if (!((TW_STATUS == TW_REP_START) || (TW_STATUS == TW_START))) return FALSE; /* Return if communication could not be started */
	return TRUE;
    4844:	21 e0       	ldi	r18, 0x01	; 1
    4846:	30 e0       	ldi	r19, 0x00	; 0
}
    4848:	c9 01       	movw	r24, r18
    484a:	08 95       	ret

0000484c <TWI_send>:

/* Send a byte to the TWI bus */
void TWI_send(uint8_t data)
{
	TWDR = data;
    484c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    4850:	84 e8       	ldi	r24, 0x84	; 132
    4852:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    4856:	80 91 bc 00 	lds	r24, 0x00BC
    485a:	87 ff       	sbrs	r24, 7
    485c:	fc cf       	rjmp	.-8      	; 0x4856 <TWI_send+0xa>
}	
    485e:	08 95       	ret

00004860 <TWI_rcvr>:

/* Read a byte from the TWI bus */
uint8_t TWI_rcvr(BOOL ack)
{
	if (ack) {
    4860:	00 97       	sbiw	r24, 0x00	; 0
    4862:	11 f0       	breq	.+4      	; 0x4868 <TWI_rcvr+0x8>
		TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA); 	/* send ACK after data recived */
    4864:	84 ec       	ldi	r24, 0xC4	; 196
    4866:	01 c0       	rjmp	.+2      	; 0x486a <TWI_rcvr+0xa>
	} else {
		TWCR = _BV(TWINT) | _BV(TWEN);			/* send NACK after data recived */
    4868:	84 e8       	ldi	r24, 0x84	; 132
    486a:	80 93 bc 00 	sts	0x00BC, r24
	}		 
	while ((TWCR & _BV(TWINT)) == 0) ; 			/* wait for transmission */	
    486e:	80 91 bc 00 	lds	r24, 0x00BC
    4872:	87 ff       	sbrs	r24, 7
    4874:	fc cf       	rjmp	.-8      	; 0x486e <TWI_rcvr+0xe>
	return 	TWDR;
    4876:	80 91 bb 00 	lds	r24, 0x00BB
}
    487a:	08 95       	ret

0000487c <TWI_stop>:
		
void TWI_stop(void)
{
	TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */
    487c:	84 e9       	ldi	r24, 0x94	; 148
    487e:	80 93 bc 00 	sts	0x00BC, r24
}
    4882:	08 95       	ret

00004884 <get_free_log_number>:
#if _USE_LFN
char Lfname[_MAX_LFN+1];
#endif

int get_free_log_number( DIR *dir )
{
    4884:	ef 92       	push	r14
    4886:	ff 92       	push	r15
    4888:	0f 93       	push	r16
    488a:	1f 93       	push	r17
    488c:	cf 93       	push	r28
    488e:	df 93       	push	r29
    4890:	8c 01       	movw	r16, r24
	BYTE res;
	DWORD p1, p2;
	UINT s1, s2;
	UINT maxname=0;
    4892:	c0 e0       	ldi	r28, 0x00	; 0
    4894:	d0 e0       	ldi	r29, 0x00	; 0
#if _USE_LFN
	Finfo.lfname = Lfname;
	Finfo.lfsize = sizeof(Lfname);
#endif
	for(;;) {
		res = f_readdir(dir, &Finfo);
    4896:	c8 01       	movw	r24, r16
    4898:	65 ef       	ldi	r22, 0xF5	; 245
    489a:	75 e0       	ldi	r23, 0x05	; 5
    489c:	0e 94 01 14 	call	0x2802	; 0x2802 <f_readdir>
		if ((res != FR_OK) || !Finfo.fname[0]) break;
    48a0:	88 23       	and	r24, r24
    48a2:	69 f4       	brne	.+26     	; 0x48be <get_free_log_number+0x3a>
    48a4:	80 91 fe 05 	lds	r24, 0x05FE
    48a8:	88 23       	and	r24, r24
    48aa:	49 f0       	breq	.+18     	; 0x48be <get_free_log_number+0x3a>
		if ( atoi(&(Finfo.fname[0])) > maxname )
    48ac:	8e ef       	ldi	r24, 0xFE	; 254
    48ae:	95 e0       	ldi	r25, 0x05	; 5
    48b0:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <atoi>
    48b4:	c8 17       	cp	r28, r24
    48b6:	d9 07       	cpc	r29, r25
    48b8:	70 f7       	brcc	.-36     	; 0x4896 <get_free_log_number+0x12>
    48ba:	ec 01       	movw	r28, r24
    48bc:	ec cf       	rjmp	.-40     	; 0x4896 <get_free_log_number+0x12>
			maxname = atoi(&(Finfo.fname[0]));
	}
	return maxname + 1;
    48be:	21 96       	adiw	r28, 0x01	; 1
}
    48c0:	7e 01       	movw	r14, r28
    48c2:	ce 01       	movw	r24, r28
    48c4:	cd b7       	in	r28, 0x3d	; 61
    48c6:	de b7       	in	r29, 0x3e	; 62
    48c8:	e6 e0       	ldi	r30, 0x06	; 6
    48ca:	0c 94 2c 2d 	jmp	0x5a58	; 0x5a58 <__epilogue_restores__+0x18>

000048ce <ecu_val_to_xbee>:
    48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
    73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,
    98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114};

void ecu_val_to_xbee(uint8_t i, uint8_t j)
{
    48ce:	1f 93       	push	r17
    48d0:	28 2f       	mov	r18, r24
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    48d2:	f8 94       	cli
	uint8_t k=0;
//	xprintf(PSTR("i%d,j%d \n"), i, j);
	/* Add value to xbee buffer */
    	ATOMIC_BLOCK(ATOMIC_FORCEON)
    	{
		QUEUE_PUT(xbee_q, ECUObjects[j].id);	/* Add id */
    48d4:	40 91 17 0a 	lds	r20, 0x0A17
    48d8:	50 91 18 0a 	lds	r21, 0x0A18
    48dc:	70 e0       	ldi	r23, 0x00	; 0
    48de:	da 01       	movw	r26, r20
    48e0:	ab 5e       	subi	r26, 0xEB	; 235
    48e2:	b5 4f       	sbci	r27, 0xF5	; 245
    48e4:	fb 01       	movw	r30, r22
    48e6:	ee 0f       	add	r30, r30
    48e8:	ff 1f       	adc	r31, r31
    48ea:	e6 0f       	add	r30, r22
    48ec:	f7 1f       	adc	r31, r23
    48ee:	e0 59       	subi	r30, 0x90	; 144
    48f0:	fd 4f       	sbci	r31, 0xFD	; 253
    48f2:	81 81       	ldd	r24, Z+1	; 0x01
    48f4:	17 96       	adiw	r26, 0x07	; 7
    48f6:	8c 93       	st	X, r24
    48f8:	ca 01       	movw	r24, r20
    48fa:	01 96       	adiw	r24, 0x01	; 1
    48fc:	60 91 19 0a 	lds	r22, 0x0A19
    4900:	70 91 1a 0a 	lds	r23, 0x0A1A
    4904:	0e 94 cf 2c 	call	0x599e	; 0x599e <__divmodhi4>
    4908:	90 93 18 0a 	sts	0x0A18, r25
    490c:	80 93 17 0a 	sts	0x0A17, r24
    4910:	80 91 1b 0a 	lds	r24, 0x0A1B
    4914:	8f 5f       	subi	r24, 0xFF	; 255
    4916:	a5 e1       	ldi	r26, 0x15	; 21
    4918:	ba e0       	ldi	r27, 0x0A	; 10
    491a:	16 96       	adiw	r26, 0x06	; 6
    491c:	8c 93       	st	X, r24
    491e:	16 97       	sbiw	r26, 0x06	; 6
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    4920:	78 94       	sei
	}
	for (k=0;k<ECUObjects[j].length;k++) {	/* Add value */
    4922:	40 e0       	ldi	r20, 0x00	; 0
    4924:	10 81       	ld	r17, Z
    		ATOMIC_BLOCK(ATOMIC_FORCEON)
    		{
			QUEUE_PUT(xbee_q, EcuData[i+k]);
    4926:	30 e0       	ldi	r19, 0x00	; 0
	/* Add value to xbee buffer */
    	ATOMIC_BLOCK(ATOMIC_FORCEON)
    	{
		QUEUE_PUT(xbee_q, ECUObjects[j].id);	/* Add id */
	}
	for (k=0;k<ECUObjects[j].length;k++) {	/* Add value */
    4928:	24 c0       	rjmp	.+72     	; 0x4972 <ecu_val_to_xbee+0xa4>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    492a:	f8 94       	cli
    		ATOMIC_BLOCK(ATOMIC_FORCEON)
    		{
			QUEUE_PUT(xbee_q, EcuData[i+k]);
    492c:	80 91 17 0a 	lds	r24, 0x0A17
    4930:	90 91 18 0a 	lds	r25, 0x0A18
    4934:	dc 01       	movw	r26, r24
    4936:	ab 5e       	subi	r26, 0xEB	; 235
    4938:	b5 4f       	sbci	r27, 0xF5	; 245
    493a:	e4 2f       	mov	r30, r20
    493c:	f0 e0       	ldi	r31, 0x00	; 0
    493e:	e3 50       	subi	r30, 0x03	; 3
    4940:	fe 4f       	sbci	r31, 0xFE	; 254
    4942:	e2 0f       	add	r30, r18
    4944:	f3 1f       	adc	r31, r19
    4946:	50 81       	ld	r21, Z
    4948:	17 96       	adiw	r26, 0x07	; 7
    494a:	5c 93       	st	X, r21
    494c:	17 97       	sbiw	r26, 0x07	; 7
    494e:	01 96       	adiw	r24, 0x01	; 1
    4950:	60 91 19 0a 	lds	r22, 0x0A19
    4954:	70 91 1a 0a 	lds	r23, 0x0A1A
    4958:	0e 94 cf 2c 	call	0x599e	; 0x599e <__divmodhi4>
    495c:	90 93 18 0a 	sts	0x0A18, r25
    4960:	80 93 17 0a 	sts	0x0A17, r24
    4964:	80 91 1b 0a 	lds	r24, 0x0A1B
    4968:	8f 5f       	subi	r24, 0xFF	; 255
    496a:	80 93 1b 0a 	sts	0x0A1B, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    496e:	78 94       	sei
	/* Add value to xbee buffer */
    	ATOMIC_BLOCK(ATOMIC_FORCEON)
    	{
		QUEUE_PUT(xbee_q, ECUObjects[j].id);	/* Add id */
	}
	for (k=0;k<ECUObjects[j].length;k++) {	/* Add value */
    4970:	4f 5f       	subi	r20, 0xFF	; 255
    4972:	41 17       	cp	r20, r17
    4974:	d0 f2       	brcs	.-76     	; 0x492a <ecu_val_to_xbee+0x5c>
    		{
			QUEUE_PUT(xbee_q, EcuData[i+k]);
		}
	}
	/* Check if more than 20 elements in xbee buffer */
	if (QUEUE_GET_NUM_ELE(xbee_q) >= 20) {
    4976:	80 91 1b 0a 	lds	r24, 0x0A1B
    497a:	84 31       	cpi	r24, 0x14	; 20
    497c:	10 f0       	brcs	.+4      	; 0x4982 <ecu_val_to_xbee+0xb4>
		//xprintf(PSTR("More than 20 elements\n"));
		xbee_send_trigger();
    497e:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <xbee_send_trigger>
	}
}
    4982:	1f 91       	pop	r17
    4984:	08 95       	ret

00004986 <ecu_data_handler>:

void ecu_data_handler( void )
{
    4986:	a8 e0       	ldi	r26, 0x08	; 8
    4988:	b0 e0       	ldi	r27, 0x00	; 0
    498a:	e9 ec       	ldi	r30, 0xC9	; 201
    498c:	f4 e2       	ldi	r31, 0x24	; 36
    498e:	0c 94 08 2d 	jmp	0x5a10	; 0x5a10 <__prologue_saves__+0x8>
	uint8_t i=0;
	uint8_t	j=0;
    4992:	66 24       	eor	r6, r6
	}
}

void ecu_data_handler( void )
{
	uint8_t i=0;
    4994:	77 24       	eor	r7, r7
				/* TODO
				 * Insert call to val_to_CAN() when the function is
				 * made
				 */
				data[0] = ECUObjects[j].id;
				for (k=0;k<ECUObjects[j].length;k++){
    4996:	52 e0       	ldi	r21, 0x02	; 2
    4998:	c5 2e       	mov	r12, r21
    499a:	d1 2c       	mov	r13, r1
    499c:	cc 0e       	add	r12, r28
    499e:	dd 1e       	adc	r13, r29
					data[k+1]= EcuData[i+k];
				}
				can_send_non_blocking(rpm_msgid, &data[0], ECUObjects[j].length+1);
    49a0:	4e 01       	movw	r8, r28
    49a2:	08 94       	sec
    49a4:	81 1c       	adc	r8, r1
    49a6:	91 1c       	adc	r9, r1
	uint8_t data[8];

	/* Loop over all values in EcuData */
	while(i<=114) {
		/* Check if anything to be done for value */
		if (valueObjects[ECUObjects[j].id].action & (TO_XBEE | TO_SD | TO_CAN) ) {
    49a8:	06 2d       	mov	r16, r6
    49aa:	10 e0       	ldi	r17, 0x00	; 0
    49ac:	f8 01       	movw	r30, r16
    49ae:	ee 0f       	add	r30, r30
    49b0:	ff 1f       	adc	r31, r31
    49b2:	e0 0f       	add	r30, r16
    49b4:	f1 1f       	adc	r31, r17
    49b6:	e0 59       	subi	r30, 0x90	; 144
    49b8:	fd 4f       	sbci	r31, 0xFD	; 253
    49ba:	a1 80       	ldd	r10, Z+1	; 0x01
    49bc:	b2 80       	ldd	r11, Z+2	; 0x02
    49be:	f5 01       	movw	r30, r10
    49c0:	ee 0f       	add	r30, r30
    49c2:	ff 1f       	adc	r31, r31
    49c4:	e9 50       	subi	r30, 0x09	; 9
    49c6:	fd 4f       	sbci	r31, 0xFD	; 253
    49c8:	e1 80       	ldd	r14, Z+1	; 0x01
    49ca:	ff 24       	eor	r15, r15
    49cc:	c7 01       	movw	r24, r14
    49ce:	87 70       	andi	r24, 0x07	; 7
    49d0:	90 70       	andi	r25, 0x00	; 0
    49d2:	00 97       	sbiw	r24, 0x00	; 0
    49d4:	21 f1       	breq	.+72     	; 0x4a1e <ecu_data_handler+0x98>
			/* Value to xbee? */
			if (valueObjects[ECUObjects[j].id].action & TO_XBEE) {
    49d6:	e2 fe       	sbrs	r14, 2
    49d8:	04 c0       	rjmp	.+8      	; 0x49e2 <ecu_data_handler+0x5c>
			    	//_delay_us(10);
				ecu_val_to_xbee(i,j);
    49da:	87 2d       	mov	r24, r7
    49dc:	66 2d       	mov	r22, r6
    49de:	0e 94 67 24 	call	0x48ce	; 0x48ce <ecu_val_to_xbee>
				 * made
				 */
			}
	
			/* Value to CAN? */
			if (valueObjects[ECUObjects[j].id].action & TO_CAN) {
    49e2:	e0 fe       	sbrs	r14, 0
    49e4:	1c c0       	rjmp	.+56     	; 0x4a1e <ecu_data_handler+0x98>
				/* TODO
				 * Insert call to val_to_CAN() when the function is
				 * made
				 */
				data[0] = ECUObjects[j].id;
    49e6:	a9 82       	std	Y+1, r10	; 0x01
				for (k=0;k<ECUObjects[j].length;k++){
    49e8:	f8 01       	movw	r30, r16
    49ea:	ee 0f       	add	r30, r30
    49ec:	ff 1f       	adc	r31, r31
    49ee:	e0 0f       	add	r30, r16
    49f0:	f1 1f       	adc	r31, r17
    49f2:	e0 59       	subi	r30, 0x90	; 144
    49f4:	fd 4f       	sbci	r31, 0xFD	; 253
    49f6:	40 81       	ld	r20, Z
					data[k+1]= EcuData[i+k];
    49f8:	e7 2d       	mov	r30, r7
    49fa:	f0 e0       	ldi	r31, 0x00	; 0
		//xprintf(PSTR("More than 20 elements\n"));
		xbee_send_trigger();
	}
}

void ecu_data_handler( void )
    49fc:	e3 50       	subi	r30, 0x03	; 3
    49fe:	fe 4f       	sbci	r31, 0xFE	; 254
				/* TODO
				 * Insert call to val_to_CAN() when the function is
				 * made
				 */
				data[0] = ECUObjects[j].id;
				for (k=0;k<ECUObjects[j].length;k++){
    4a00:	d6 01       	movw	r26, r12
		//xprintf(PSTR("More than 20 elements\n"));
		xbee_send_trigger();
	}
}

void ecu_data_handler( void )
    4a02:	c6 01       	movw	r24, r12
    4a04:	84 0f       	add	r24, r20
    4a06:	91 1d       	adc	r25, r1
				/* TODO
				 * Insert call to val_to_CAN() when the function is
				 * made
				 */
				data[0] = ECUObjects[j].id;
				for (k=0;k<ECUObjects[j].length;k++){
    4a08:	02 c0       	rjmp	.+4      	; 0x4a0e <ecu_data_handler+0x88>
					data[k+1]= EcuData[i+k];
    4a0a:	21 91       	ld	r18, Z+
    4a0c:	2d 93       	st	X+, r18
				/* TODO
				 * Insert call to val_to_CAN() when the function is
				 * made
				 */
				data[0] = ECUObjects[j].id;
				for (k=0;k<ECUObjects[j].length;k++){
    4a0e:	a8 17       	cp	r26, r24
    4a10:	b9 07       	cpc	r27, r25
    4a12:	d9 f7       	brne	.-10     	; 0x4a0a <ecu_data_handler+0x84>
					data[k+1]= EcuData[i+k];
				}
				can_send_non_blocking(rpm_msgid, &data[0], ECUObjects[j].length+1);
    4a14:	4f 5f       	subi	r20, 0xFF	; 255
    4a16:	85 e8       	ldi	r24, 0x85	; 133
    4a18:	b4 01       	movw	r22, r8
    4a1a:	0e 94 52 26 	call	0x4ca4	; 0x4ca4 <can_send_non_blocking>
			}
		}
		
		/* Find index for next value */
		i += ECUObjects[j].length;
    4a1e:	f8 01       	movw	r30, r16
    4a20:	ee 0f       	add	r30, r30
    4a22:	ff 1f       	adc	r31, r31
    4a24:	e0 0f       	add	r30, r16
    4a26:	f1 1f       	adc	r31, r17
    4a28:	e0 59       	subi	r30, 0x90	; 144
    4a2a:	fd 4f       	sbci	r31, 0xFD	; 253
    4a2c:	80 81       	ld	r24, Z
    4a2e:	78 0e       	add	r7, r24
	uint8_t k;
	int hej = 40;
	uint8_t data[8];

	/* Loop over all values in EcuData */
	while(i<=114) {
    4a30:	87 2d       	mov	r24, r7
    4a32:	83 37       	cpi	r24, 0x73	; 115
    4a34:	10 f4       	brcc	.+4      	; 0x4a3a <ecu_data_handler+0xb4>
			}
		}
		
		/* Find index for next value */
		i += ECUObjects[j].length;
		j++;
    4a36:	63 94       	inc	r6
    4a38:	b7 cf       	rjmp	.-146    	; 0x49a8 <ecu_data_handler+0x22>
	}
}
    4a3a:	28 96       	adiw	r28, 0x08	; 8
    4a3c:	ee e0       	ldi	r30, 0x0E	; 14
    4a3e:	0c 94 24 2d 	jmp	0x5a48	; 0x5a48 <__epilogue_restores__+0x8>

00004a42 <__vector_18>:

st_cmd_t tx_remote_msg;

/* Interrupt routine to take care of can interrupts */
ISR(CANIT_vect)
{
    4a42:	1f 92       	push	r1
    4a44:	0f 92       	push	r0
    4a46:	0f b6       	in	r0, 0x3f	; 63
    4a48:	0f 92       	push	r0
    4a4a:	0b b6       	in	r0, 0x3b	; 59
    4a4c:	0f 92       	push	r0
    4a4e:	11 24       	eor	r1, r1
    4a50:	2f 92       	push	r2
    4a52:	3f 92       	push	r3
    4a54:	4f 92       	push	r4
    4a56:	5f 92       	push	r5
    4a58:	6f 92       	push	r6
    4a5a:	7f 92       	push	r7
    4a5c:	8f 92       	push	r8
    4a5e:	9f 92       	push	r9
    4a60:	af 92       	push	r10
    4a62:	bf 92       	push	r11
    4a64:	cf 92       	push	r12
    4a66:	df 92       	push	r13
    4a68:	ef 92       	push	r14
    4a6a:	ff 92       	push	r15
    4a6c:	0f 93       	push	r16
    4a6e:	1f 93       	push	r17
    4a70:	2f 93       	push	r18
    4a72:	3f 93       	push	r19
    4a74:	4f 93       	push	r20
    4a76:	5f 93       	push	r21
    4a78:	6f 93       	push	r22
    4a7a:	7f 93       	push	r23
    4a7c:	8f 93       	push	r24
    4a7e:	9f 93       	push	r25
    4a80:	af 93       	push	r26
    4a82:	bf 93       	push	r27
    4a84:	ef 93       	push	r30
    4a86:	ff 93       	push	r31
    4a88:	df 93       	push	r29
    4a8a:	cf 93       	push	r28
    4a8c:	cd b7       	in	r28, 0x3d	; 61
    4a8e:	de b7       	in	r29, 0x3e	; 62
    4a90:	6f 97       	sbiw	r28, 0x1f	; 31
    4a92:	de bf       	out	0x3e, r29	; 62
    4a94:	cd bf       	out	0x3d, r28	; 61
	uint8_t DataBuf[8];

	uint8_t rpm_response_buffer[8];
	st_cmd_t rpm_msg;

	rpm_msg.pt_data = rpm_response_buffer;
    4a96:	ce 01       	movw	r24, r28
    4a98:	09 96       	adiw	r24, 0x09	; 9
    4a9a:	9a 8f       	std	Y+26, r25	; 0x1a
    4a9c:	89 8f       	std	Y+25, r24	; 0x19
	rpm_msg.status = 0;
    4a9e:	1b 8e       	std	Y+27, r1	; 0x1b
	 * TXOK just need to call Can_mob_abort() and Can_clear_status_mob()
	 * Proper action for all other types is TODO
	*/

	/* Test mob's for pending interrupt */
	tmp = CANSIT2+(CANSIT1<<8);
    4aa0:	20 91 e0 00 	lds	r18, 0x00E0
    4aa4:	30 91 e1 00 	lds	r19, 0x00E1
    4aa8:	93 2f       	mov	r25, r19
    4aaa:	80 e0       	ldi	r24, 0x00	; 0
    4aac:	3c 01       	movw	r6, r24
    4aae:	62 0e       	add	r6, r18
    4ab0:	71 1c       	adc	r7, r1


	mob_back = CANPAGE;	// Save CANPAGE state
    4ab2:	80 91 ed 00 	lds	r24, 0x00ED
    4ab6:	8f 8f       	std	Y+31, r24	; 0x1f
    4ab8:	00 e0       	ldi	r16, 0x00	; 0
    4aba:	10 e0       	ldi	r17, 0x00	; 0

/* Interrupt routine to take care of can interrupts */
ISR(CANIT_vect)
{
	uint8_t i,interrupt, mob_back, j;
	uint16_t tmp,tmp2,mask=1;
    4abc:	61 e0       	ldi	r22, 0x01	; 1
    4abe:	e6 2e       	mov	r14, r22
    4ac0:	f1 2c       	mov	r15, r1
			Can_set_mob(i); /* Switch to mob */
			interrupt = (CANSTMOB & INT_MOB_MSK);
			switch (interrupt){
				case MOB_RX_COMPLETED:
					/* Can specific code */
					can_get_data(&DataBuf[0]);	// Copy data to canDataTest
    4ac2:	6e 01       	movw	r12, r28
    4ac4:	08 94       	sec
    4ac6:	c1 1c       	adc	r12, r1
    4ac8:	d1 1c       	adc	r13, r1

uint8_t can_update_rx_msg(st_cmd_t* msg, uint8_t msg_id, uint8_t dlc)
{
        uint8_t i;
        
        msg->id.std = msg_id;
    4aca:	55 e8       	ldi	r21, 0x85	; 133
    4acc:	45 2e       	mov	r4, r21
    4ace:	51 2c       	mov	r5, r1
        msg->ctrl.ide = 0;
        msg->ctrl.rtr = 0;
        msg->dlc = dlc;
    4ad0:	48 e0       	ldi	r20, 0x08	; 8
    4ad2:	a4 2e       	mov	r10, r20
        msg->cmd = CMD_RX_DATA_MASKED;
    4ad4:	38 e0       	ldi	r19, 0x08	; 8
    4ad6:	23 2e       	mov	r2, r19
    4ad8:	31 2c       	mov	r3, r1
					xbee_send_trigger();
					break;
				case MOB_TX_COMPLETED:
					Can_mob_abort();        // Freed the MOB
					Can_clear_status_mob(); // and reset MOb status	
					Can_unset_mob_int(i);	// Unset interrupt
    4ada:	21 e0       	ldi	r18, 0x01	; 1
    4adc:	82 2e       	mov	r8, r18
    4ade:	91 2c       	mov	r9, r1
	tmp = CANSIT2+(CANSIT1<<8);


	mob_back = CANPAGE;	// Save CANPAGE state
	for(i=0;i<=14;i++){
		if(tmp & mask){	/* True if mob have pending interrupt */
    4ae0:	c7 01       	movw	r24, r14
    4ae2:	86 21       	and	r24, r6
    4ae4:	97 21       	and	r25, r7
    4ae6:	00 97       	sbiw	r24, 0x00	; 0
    4ae8:	09 f4       	brne	.+2      	; 0x4aec <__vector_18+0xaa>
    4aea:	a5 c0       	rjmp	.+330    	; 0x4c36 <__vector_18+0x1f4>
			Can_set_mob(i); /* Switch to mob */
    4aec:	80 2f       	mov	r24, r16
    4aee:	82 95       	swap	r24
    4af0:	80 7f       	andi	r24, 0xF0	; 240
    4af2:	80 93 ed 00 	sts	0x00ED, r24
			interrupt = (CANSTMOB & INT_MOB_MSK);
    4af6:	80 91 ee 00 	lds	r24, 0x00EE
    4afa:	8f 77       	andi	r24, 0x7F	; 127
			switch (interrupt){
    4afc:	88 30       	cpi	r24, 0x08	; 8
    4afe:	09 f4       	brne	.+2      	; 0x4b02 <__vector_18+0xc0>
    4b00:	9a c0       	rjmp	.+308    	; 0x4c36 <__vector_18+0x1f4>
    4b02:	89 30       	cpi	r24, 0x09	; 9
    4b04:	50 f4       	brcc	.+20     	; 0x4b1a <__vector_18+0xd8>
    4b06:	81 30       	cpi	r24, 0x01	; 1
    4b08:	08 f4       	brcc	.+2      	; 0x4b0c <__vector_18+0xca>
    4b0a:	8e c0       	rjmp	.+284    	; 0x4c28 <__vector_18+0x1e6>
    4b0c:	83 30       	cpi	r24, 0x03	; 3
    4b0e:	08 f4       	brcc	.+2      	; 0x4b12 <__vector_18+0xd0>
    4b10:	92 c0       	rjmp	.+292    	; 0x4c36 <__vector_18+0x1f4>
    4b12:	84 30       	cpi	r24, 0x04	; 4
    4b14:	09 f0       	breq	.+2      	; 0x4b18 <__vector_18+0xd6>
    4b16:	88 c0       	rjmp	.+272    	; 0x4c28 <__vector_18+0x1e6>
    4b18:	8e c0       	rjmp	.+284    	; 0x4c36 <__vector_18+0x1f4>
    4b1a:	80 32       	cpi	r24, 0x20	; 32
    4b1c:	39 f0       	breq	.+14     	; 0x4b2c <__vector_18+0xea>
    4b1e:	80 34       	cpi	r24, 0x40	; 64
    4b20:	09 f4       	brne	.+2      	; 0x4b24 <__vector_18+0xe2>
    4b22:	64 c0       	rjmp	.+200    	; 0x4bec <__vector_18+0x1aa>
    4b24:	80 31       	cpi	r24, 0x10	; 16
    4b26:	09 f0       	breq	.+2      	; 0x4b2a <__vector_18+0xe8>
    4b28:	7f c0       	rjmp	.+254    	; 0x4c28 <__vector_18+0x1e6>
    4b2a:	85 c0       	rjmp	.+266    	; 0x4c36 <__vector_18+0x1f4>
				case MOB_RX_COMPLETED:
					/* Can specific code */
					can_get_data(&DataBuf[0]);	// Copy data to canDataTest
    4b2c:	c6 01       	movw	r24, r12
    4b2e:	0e 94 76 1a 	call	0x34ec	; 0x34ec <can_get_data>
					Can_mob_abort();        // Freed the MOB
    4b32:	80 91 ef 00 	lds	r24, 0x00EF
    4b36:	8f 73       	andi	r24, 0x3F	; 63
    4b38:	80 93 ef 00 	sts	0x00EF, r24
					Can_clear_status_mob(); // and reset MOb status
    4b3c:	10 92 ee 00 	sts	0x00EE, r1
					rpm_msg.status = 0;
    4b40:	1b 8e       	std	Y+27, r1	; 0x1b

uint8_t can_update_rx_msg(st_cmd_t* msg, uint8_t msg_id, uint8_t dlc)
{
        uint8_t i;
        
        msg->id.std = msg_id;
    4b42:	5d 8a       	std	Y+21, r5	; 0x15
    4b44:	4c 8a       	std	Y+20, r4	; 0x14
        msg->ctrl.ide = 0;
    4b46:	1d 8e       	std	Y+29, r1	; 0x1d
        msg->ctrl.rtr = 0;
    4b48:	1c 8e       	std	Y+28, r1	; 0x1c
        msg->dlc = dlc;
    4b4a:	a8 8e       	std	Y+24, r10	; 0x18
        msg->cmd = CMD_RX_DATA_MASKED;
    4b4c:	3b 8a       	std	Y+19, r3	; 0x13
    4b4e:	2a 8a       	std	Y+18, r2	; 0x12

        while(can_cmd(msg) != CAN_CMD_ACCEPTED);
    4b50:	ce 01       	movw	r24, r28
    4b52:	41 96       	adiw	r24, 0x11	; 17
    4b54:	0e 94 00 1c 	call	0x3800	; 0x3800 <can_cmd>
    4b58:	88 23       	and	r24, r24
    4b5a:	d1 f7       	brne	.-12     	; 0x4b50 <__vector_18+0x10e>
					Can_clear_status_mob(); // and reset MOb status
					rpm_msg.status = 0;
					can_update_rx_msg(&rpm_msg, rpm_msgid, 8);	/* TODO Lav det her på en anden måde */

					/* Take care of the data */
					if (valueObjects[DataBuf[0]].action & TO_XBEE) {
    4b5c:	29 81       	ldd	r18, Y+1	; 0x01
    4b5e:	e2 2f       	mov	r30, r18
    4b60:	f0 e0       	ldi	r31, 0x00	; 0
    4b62:	ee 0f       	add	r30, r30
    4b64:	ff 1f       	adc	r31, r31
    4b66:	e3 5b       	subi	r30, 0xB3	; 179
    4b68:	fc 4f       	sbci	r31, 0xFC	; 252
    4b6a:	81 81       	ldd	r24, Z+1	; 0x01
    4b6c:	82 ff       	sbrs	r24, 2
    4b6e:	3b c0       	rjmp	.+118    	; 0x4be6 <__vector_18+0x1a4>
						QUEUE_PUT(xbee_q, DataBuf[0]);	/* Add id */
    4b70:	80 91 17 0a 	lds	r24, 0x0A17
    4b74:	90 91 18 0a 	lds	r25, 0x0A18
    4b78:	dc 01       	movw	r26, r24
    4b7a:	ab 5e       	subi	r26, 0xEB	; 235
    4b7c:	b5 4f       	sbci	r27, 0xF5	; 245
    4b7e:	17 96       	adiw	r26, 0x07	; 7
    4b80:	2c 93       	st	X, r18
    4b82:	17 97       	sbiw	r26, 0x07	; 7
    4b84:	20 91 19 0a 	lds	r18, 0x0A19
    4b88:	30 91 1a 0a 	lds	r19, 0x0A1A
    4b8c:	01 96       	adiw	r24, 0x01	; 1
    4b8e:	b9 01       	movw	r22, r18
    4b90:	0e 94 cf 2c 	call	0x599e	; 0x599e <__divmodhi4>
    4b94:	80 93 17 0a 	sts	0x0A17, r24
    4b98:	90 93 18 0a 	sts	0x0A18, r25
    4b9c:	40 91 1b 0a 	lds	r20, 0x0A1B
    4ba0:	4f 5f       	subi	r20, 0xFF	; 255
    4ba2:	40 93 1b 0a 	sts	0x0A1B, r20
						for (j=1;j<=valueObjects[DataBuf[0]].length/8;j++) {
    4ba6:	b0 80       	ld	r11, Z
    4ba8:	b6 94       	lsr	r11
    4baa:	b6 94       	lsr	r11
    4bac:	b6 94       	lsr	r11
    4bae:	41 e0       	ldi	r20, 0x01	; 1
    4bb0:	14 c0       	rjmp	.+40     	; 0x4bda <__vector_18+0x198>
							QUEUE_PUT(xbee_q, DataBuf[j]);	
    4bb2:	dc 01       	movw	r26, r24
    4bb4:	ab 5e       	subi	r26, 0xEB	; 235
    4bb6:	b5 4f       	sbci	r27, 0xF5	; 245
    4bb8:	f6 01       	movw	r30, r12
    4bba:	e4 0f       	add	r30, r20
    4bbc:	f1 1d       	adc	r31, r1
    4bbe:	50 81       	ld	r21, Z
    4bc0:	17 96       	adiw	r26, 0x07	; 7
    4bc2:	5c 93       	st	X, r21
    4bc4:	17 97       	sbiw	r26, 0x07	; 7
    4bc6:	01 96       	adiw	r24, 0x01	; 1
    4bc8:	b9 01       	movw	r22, r18
    4bca:	0e 94 cf 2c 	call	0x599e	; 0x599e <__divmodhi4>
    4bce:	50 91 1b 0a 	lds	r21, 0x0A1B
    4bd2:	5f 5f       	subi	r21, 0xFF	; 255
    4bd4:	50 93 1b 0a 	sts	0x0A1B, r21
					can_update_rx_msg(&rpm_msg, rpm_msgid, 8);	/* TODO Lav det her på en anden måde */

					/* Take care of the data */
					if (valueObjects[DataBuf[0]].action & TO_XBEE) {
						QUEUE_PUT(xbee_q, DataBuf[0]);	/* Add id */
						for (j=1;j<=valueObjects[DataBuf[0]].length/8;j++) {
    4bd8:	4f 5f       	subi	r20, 0xFF	; 255
    4bda:	b4 16       	cp	r11, r20
    4bdc:	50 f7       	brcc	.-44     	; 0x4bb2 <__vector_18+0x170>
    4bde:	90 93 18 0a 	sts	0x0A18, r25
    4be2:	80 93 17 0a 	sts	0x0A17, r24
							QUEUE_PUT(xbee_q, DataBuf[j]);	
						}
					}
					xbee_send_trigger();
    4be6:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <xbee_send_trigger>
					break;
    4bea:	25 c0       	rjmp	.+74     	; 0x4c36 <__vector_18+0x1f4>
				case MOB_TX_COMPLETED:
					Can_mob_abort();        // Freed the MOB
    4bec:	80 91 ef 00 	lds	r24, 0x00EF
    4bf0:	8f 73       	andi	r24, 0x3F	; 63
    4bf2:	80 93 ef 00 	sts	0x00EF, r24
					Can_clear_status_mob(); // and reset MOb status	
    4bf6:	10 92 ee 00 	sts	0x00EE, r1
					Can_unset_mob_int(i);	// Unset interrupt
    4bfa:	30 91 de 00 	lds	r19, 0x00DE
    4bfe:	c4 01       	movw	r24, r8
    4c00:	00 2e       	mov	r0, r16
    4c02:	02 c0       	rjmp	.+4      	; 0x4c08 <__vector_18+0x1c6>
    4c04:	88 0f       	add	r24, r24
    4c06:	99 1f       	adc	r25, r25
    4c08:	0a 94       	dec	r0
    4c0a:	e2 f7       	brpl	.-8      	; 0x4c04 <__vector_18+0x1c2>
    4c0c:	28 2f       	mov	r18, r24
    4c0e:	20 95       	com	r18
    4c10:	23 23       	and	r18, r19
    4c12:	20 93 de 00 	sts	0x00DE, r18
    4c16:	20 91 df 00 	lds	r18, 0x00DF
    4c1a:	89 2f       	mov	r24, r25
    4c1c:	8f 77       	andi	r24, 0x7F	; 127
    4c1e:	80 95       	com	r24
    4c20:	82 23       	and	r24, r18
    4c22:	80 93 df 00 	sts	0x00DF, r24
					break;				
    4c26:	07 c0       	rjmp	.+14     	; 0x4c36 <__vector_18+0x1f4>
					break;
				case MOB_BIT_ERROR:
					/* TODO */
					break;
				default:
					Can_mob_abort();        // Freed the MOB
    4c28:	80 91 ef 00 	lds	r24, 0x00EF
    4c2c:	8f 73       	andi	r24, 0x3F	; 63
    4c2e:	80 93 ef 00 	sts	0x00EF, r24
					Can_clear_status_mob(); // and reset MOb status
    4c32:	10 92 ee 00 	sts	0x00EE, r1
					break;
    4c36:	0f 5f       	subi	r16, 0xFF	; 255
    4c38:	1f 4f       	sbci	r17, 0xFF	; 255
	/* Test mob's for pending interrupt */
	tmp = CANSIT2+(CANSIT1<<8);


	mob_back = CANPAGE;	// Save CANPAGE state
	for(i=0;i<=14;i++){
    4c3a:	0f 30       	cpi	r16, 0x0F	; 15
    4c3c:	11 05       	cpc	r17, r1
    4c3e:	19 f0       	breq	.+6      	; 0x4c46 <__vector_18+0x204>
					Can_mob_abort();        // Freed the MOB
					Can_clear_status_mob(); // and reset MOb status
					break;
			}
		}
		mask = mask<<1;
    4c40:	ee 0c       	add	r14, r14
    4c42:	ff 1c       	adc	r15, r15
    4c44:	4d cf       	rjmp	.-358    	; 0x4ae0 <__vector_18+0x9e>
	}
	CANPAGE |= mob_back & 0xf0;	// Restore CANPAGE state
    4c46:	90 91 ed 00 	lds	r25, 0x00ED
    4c4a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4c4c:	80 7f       	andi	r24, 0xF0	; 240
    4c4e:	89 2b       	or	r24, r25
    4c50:	80 93 ed 00 	sts	0x00ED, r24
}
    4c54:	6f 96       	adiw	r28, 0x1f	; 31
    4c56:	de bf       	out	0x3e, r29	; 62
    4c58:	cd bf       	out	0x3d, r28	; 61
    4c5a:	cf 91       	pop	r28
    4c5c:	df 91       	pop	r29
    4c5e:	ff 91       	pop	r31
    4c60:	ef 91       	pop	r30
    4c62:	bf 91       	pop	r27
    4c64:	af 91       	pop	r26
    4c66:	9f 91       	pop	r25
    4c68:	8f 91       	pop	r24
    4c6a:	7f 91       	pop	r23
    4c6c:	6f 91       	pop	r22
    4c6e:	5f 91       	pop	r21
    4c70:	4f 91       	pop	r20
    4c72:	3f 91       	pop	r19
    4c74:	2f 91       	pop	r18
    4c76:	1f 91       	pop	r17
    4c78:	0f 91       	pop	r16
    4c7a:	ff 90       	pop	r15
    4c7c:	ef 90       	pop	r14
    4c7e:	df 90       	pop	r13
    4c80:	cf 90       	pop	r12
    4c82:	bf 90       	pop	r11
    4c84:	af 90       	pop	r10
    4c86:	9f 90       	pop	r9
    4c88:	8f 90       	pop	r8
    4c8a:	7f 90       	pop	r7
    4c8c:	6f 90       	pop	r6
    4c8e:	5f 90       	pop	r5
    4c90:	4f 90       	pop	r4
    4c92:	3f 90       	pop	r3
    4c94:	2f 90       	pop	r2
    4c96:	0f 90       	pop	r0
    4c98:	0b be       	out	0x3b, r0	; 59
    4c9a:	0f 90       	pop	r0
    4c9c:	0f be       	out	0x3f, r0	; 63
    4c9e:	0f 90       	pop	r0
    4ca0:	1f 90       	pop	r1
    4ca2:	18 95       	reti

00004ca4 <can_send_non_blocking>:
 * 0 = Besked ikke kommet i udbakke
 * 1 = Besked kommet i udbakke
*/
uint8_t can_send_non_blocking(uint8_t msg_id, void* buf, uint8_t dlc)
{
	tx_remote_msg.pt_data = buf; 
    4ca4:	70 93 a6 0a 	sts	0x0AA6, r23
    4ca8:	60 93 a5 0a 	sts	0x0AA5, r22
	tx_remote_msg.id.std = msg_id;
    4cac:	e0 ea       	ldi	r30, 0xA0	; 160
    4cae:	fa e0       	ldi	r31, 0x0A	; 10
    4cb0:	80 93 a0 0a 	sts	0x0AA0, r24
    4cb4:	11 82       	std	Z+1, r1	; 0x01
	tx_remote_msg.ctrl.ide = 0;
    4cb6:	10 92 a9 0a 	sts	0x0AA9, r1
	tx_remote_msg.ctrl.rtr = 1;
    4cba:	81 e0       	ldi	r24, 0x01	; 1
    4cbc:	80 93 a8 0a 	sts	0x0AA8, r24
	tx_remote_msg.dlc = dlc;
    4cc0:	40 93 a4 0a 	sts	0x0AA4, r20
	tx_remote_msg.cmd = CMD_TX_DATA;
    4cc4:	82 e0       	ldi	r24, 0x02	; 2
    4cc6:	90 e0       	ldi	r25, 0x00	; 0
    4cc8:	90 93 9f 0a 	sts	0x0A9F, r25
    4ccc:	80 93 9e 0a 	sts	0x0A9E, r24
	tx_remote_msg.blocking = 0;	/* For non blocking */
    4cd0:	10 92 aa 0a 	sts	0x0AAA, r1

	/* can_cmd function extended with a feature to enable interrupt for
	 * the message mob picked for the message
	*/
	if (can_cmd(&tx_remote_msg) != CAN_CMD_ACCEPTED){
    4cd4:	cf 01       	movw	r24, r30
    4cd6:	03 97       	sbiw	r24, 0x03	; 3
    4cd8:	0e 94 00 1c 	call	0x3800	; 0x3800 <can_cmd>
		return 0;	// No free mob could not put message in mail box
    4cdc:	91 e0       	ldi	r25, 0x01	; 1
    4cde:	81 11       	cpse	r24, r1
    4ce0:	90 e0       	ldi	r25, 0x00	; 0
	}else{
		return 1;
	}
}
    4ce2:	89 2f       	mov	r24, r25
    4ce4:	08 95       	ret

00004ce6 <can_update_rx_msg>:

uint8_t can_update_rx_msg(st_cmd_t* msg, uint8_t msg_id, uint8_t dlc)
{
    4ce6:	cf 93       	push	r28
    4ce8:	df 93       	push	r29
    4cea:	ec 01       	movw	r28, r24
        uint8_t i;
        
        msg->id.std = msg_id;
    4cec:	6b 83       	std	Y+3, r22	; 0x03
    4cee:	1c 82       	std	Y+4, r1	; 0x04
        msg->ctrl.ide = 0;
    4cf0:	1c 86       	std	Y+12, r1	; 0x0c
        msg->ctrl.rtr = 0;
    4cf2:	1b 86       	std	Y+11, r1	; 0x0b
        msg->dlc = dlc;
    4cf4:	4f 83       	std	Y+7, r20	; 0x07
        msg->cmd = CMD_RX_DATA_MASKED;
    4cf6:	88 e0       	ldi	r24, 0x08	; 8
    4cf8:	90 e0       	ldi	r25, 0x00	; 0
    4cfa:	9a 83       	std	Y+2, r25	; 0x02
    4cfc:	89 83       	std	Y+1, r24	; 0x01

        while(can_cmd(msg) != CAN_CMD_ACCEPTED);
    4cfe:	ce 01       	movw	r24, r28
    4d00:	0e 94 00 1c 	call	0x3800	; 0x3800 <can_cmd>
    4d04:	88 23       	and	r24, r24
    4d06:	d9 f7       	brne	.-10     	; 0x4cfe <can_update_rx_msg+0x18>
}
    4d08:	df 91       	pop	r29
    4d0a:	cf 91       	pop	r28
    4d0c:	08 95       	ret

00004d0e <can_config_rx_mailbox>:

uint8_t can_config_rx_mailbox(st_cmd_t* msg, uint8_t count)
{
    4d0e:	ef 92       	push	r14
    4d10:	ff 92       	push	r15
    4d12:	1f 93       	push	r17
    4d14:	df 93       	push	r29
    4d16:	cf 93       	push	r28
    4d18:	0f 92       	push	r0
    4d1a:	cd b7       	in	r28, 0x3d	; 61
    4d1c:	de b7       	in	r29, 0x3e	; 62
    4d1e:	7c 01       	movw	r14, r24
	uint8_t i;

	msg->ctrl.ide = 0;
    4d20:	fc 01       	movw	r30, r24
    4d22:	14 86       	std	Z+12, r1	; 0x0c
	msg->ctrl.rtr = 0;
    4d24:	13 86       	std	Z+11, r1	; 0x0b
	msg->cmd = CMD_RX_DATA_MASKED;
    4d26:	88 e0       	ldi	r24, 0x08	; 8
    4d28:	90 e0       	ldi	r25, 0x00	; 0
    4d2a:	92 83       	std	Z+2, r25	; 0x02
    4d2c:	81 83       	std	Z+1, r24	; 0x01
	
	for (i=0;i<count;i++) {
    4d2e:	10 e0       	ldi	r17, 0x00	; 0
    4d30:	08 c0       	rjmp	.+16     	; 0x4d42 <can_config_rx_mailbox+0x34>
		if (can_cmd(msg) != CAN_CMD_ACCEPTED) {
    4d32:	c7 01       	movw	r24, r14
    4d34:	69 83       	std	Y+1, r22	; 0x01
    4d36:	0e 94 00 1c 	call	0x3800	; 0x3800 <can_cmd>
    4d3a:	69 81       	ldd	r22, Y+1	; 0x01
    4d3c:	88 23       	and	r24, r24
    4d3e:	29 f4       	brne	.+10     	; 0x4d4a <can_config_rx_mailbox+0x3c>

	msg->ctrl.ide = 0;
	msg->ctrl.rtr = 0;
	msg->cmd = CMD_RX_DATA_MASKED;
	
	for (i=0;i<count;i++) {
    4d40:	1f 5f       	subi	r17, 0xFF	; 255
    4d42:	16 17       	cp	r17, r22
    4d44:	b0 f3       	brcs	.-20     	; 0x4d32 <can_config_rx_mailbox+0x24>
		if (can_cmd(msg) != CAN_CMD_ACCEPTED) {
			return CAN_CMD_REFUSED;
		}
	}
	return CAN_CMD_ACCEPTED;
    4d46:	80 e0       	ldi	r24, 0x00	; 0
    4d48:	01 c0       	rjmp	.+2      	; 0x4d4c <can_config_rx_mailbox+0x3e>
	msg->ctrl.rtr = 0;
	msg->cmd = CMD_RX_DATA_MASKED;
	
	for (i=0;i<count;i++) {
		if (can_cmd(msg) != CAN_CMD_ACCEPTED) {
			return CAN_CMD_REFUSED;
    4d4a:	8f ef       	ldi	r24, 0xFF	; 255
		}
	}
	return CAN_CMD_ACCEPTED;
}
    4d4c:	0f 90       	pop	r0
    4d4e:	cf 91       	pop	r28
    4d50:	df 91       	pop	r29
    4d52:	1f 91       	pop	r17
    4d54:	ff 90       	pop	r15
    4d56:	ef 90       	pop	r14
    4d58:	08 95       	ret

00004d5a <xputc>:

.global xputc
.func xputc
xputc:
#ifdef CR_CRLF
	cpi	r24, 10		;LF --> CRLF
    4d5a:	8a 30       	cpi	r24, 0x0A	; 10
	brne	1f		;
    4d5c:	19 f4       	brne	.+6      	; 0x4d64 <xputc+0xa>
	ldi	r24, 13		;
    4d5e:	8d e0       	ldi	r24, 0x0D	; 13
	rcall	1f		;
    4d60:	01 d0       	rcall	.+2      	; 0x4d64 <xputc+0xa>
	ldi	r24, 10		;/
    4d62:	8a e0       	ldi	r24, 0x0A	; 10
1:
#endif
	push	ZH
    4d64:	ff 93       	push	r31
	push	ZL
    4d66:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
    4d68:	e0 91 c1 03 	lds	r30, 0x03C1
	lds	ZH, xfunc_out+1	;/
    4d6c:	f0 91 c2 03 	lds	r31, 0x03C2
	icall
    4d70:	09 95       	icall
	pop	ZL
    4d72:	ef 91       	pop	r30
	pop	ZH
    4d74:	ff 91       	pop	r31
	ret
    4d76:	08 95       	ret

00004d78 <xputs>:

#ifdef USE_XPUTS
.global xputs
.func xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
    4d78:	fc 01       	movw	r30, r24
1:	_LPMI	r24
    4d7a:	85 91       	lpm	r24, Z+
	cpi	r24, 0
    4d7c:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
    4d7e:	11 f0       	breq	.+4      	; 0x4d84 <xputs+0xc>
	rcall	xputc
    4d80:	ec df       	rcall	.-40     	; 0x4d5a <xputc>
	rjmp	1b
    4d82:	fb cf       	rjmp	.-10     	; 0x4d7a <xputs+0x2>
2:	ret
    4d84:	08 95       	ret

00004d86 <xitoa>:
#ifdef USE_XITOA
.global xitoa
.func xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
    4d86:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
    4d88:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
    4d8a:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
    4d8c:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
    4d8e:	0c c0       	rjmp	.+24     	; 0x4da8 <xitoa+0x22>
	neg	r20		;
    4d90:	41 95       	neg	r20
	sbrs	r25, 7		;
    4d92:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
    4d94:	09 c0       	rjmp	.+18     	; 0x4da8 <xitoa+0x22>
	ldi	r30, '-'	;
    4d96:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
    4d98:	60 95       	com	r22
	com	r23		;
    4d9a:	70 95       	com	r23
	com	r24		;
    4d9c:	80 95       	com	r24
	com	r25		;
    4d9e:	90 95       	com	r25
	adc	r22, r1		;
    4da0:	61 1d       	adc	r22, r1
	adc	r23, r1		;
    4da2:	71 1d       	adc	r23, r1
	adc	r24, r1		;
    4da4:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
    4da6:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
    4da8:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
    4daa:	02 c0       	rjmp	.+4      	; 0x4db0 <xitoa+0x2a>
	neg	r18		;
    4dac:	21 95       	neg	r18
	ldi	r19, '0'	;/
    4dae:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
    4db0:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
    4db2:	aa 27       	eor	r26, r26
2:	lsl	r22		;
    4db4:	66 0f       	add	r22, r22
	rol	r23		;
    4db6:	77 1f       	adc	r23, r23
	rol	r24		;
    4db8:	88 1f       	adc	r24, r24
	rol	r25		;
    4dba:	99 1f       	adc	r25, r25
	rol	r26		;
    4dbc:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
    4dbe:	a4 17       	cp	r26, r20
	brcs	3f		;
    4dc0:	10 f0       	brcs	.+4      	; 0x4dc6 <xitoa+0x40>
	sub	r26, r20	;
    4dc2:	a4 1b       	sub	r26, r20
	inc	r22		;
    4dc4:	63 95       	inc	r22
3:	dec	r21		;
    4dc6:	5a 95       	dec	r21
	brne	2b		;/
    4dc8:	a9 f7       	brne	.-22     	; 0x4db4 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
    4dca:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
    4dcc:	08 f0       	brcs	.+2      	; 0x4dd0 <xitoa+0x4a>
	subi	r26, -7		;
    4dce:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
    4dd0:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
    4dd2:	af 93       	push	r26
	inc	r31		;/
    4dd4:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
    4dd6:	61 15       	cp	r22, r1
	cpc	r23, r1		;
    4dd8:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
    4dda:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
    4ddc:	91 05       	cpc	r25, r1
	brne	1b		;/
    4dde:	41 f7       	brne	.-48     	; 0x4db0 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
    4de0:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
    4de2:	11 f4       	brne	.+4      	; 0x4de8 <xitoa+0x62>
	push	r30		;
    4de4:	ef 93       	push	r30
	inc	r31		;/
    4de6:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
    4de8:	f2 17       	cp	r31, r18
	brcc	6f		;
    4dea:	18 f4       	brcc	.+6      	; 0x4df2 <xitoa+0x6c>
	push	r19		;
    4dec:	3f 93       	push	r19
	inc	r31		;
    4dee:	f3 95       	inc	r31
	rjmp	5b		;/
    4df0:	fb cf       	rjmp	.-10     	; 0x4de8 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
    4df2:	8f 91       	pop	r24
	rcall	xputc		;
    4df4:	b2 df       	rcall	.-156    	; 0x4d5a <xputc>
	dec	r31		;
    4df6:	fa 95       	dec	r31
	brne	6b		;/
    4df8:	e1 f7       	brne	.-8      	; 0x4df2 <xitoa+0x6c>

	ret
    4dfa:	08 95       	ret

00004dfc <xprintf>:

#ifdef USE_XPRINTF
.global xprintf
.func xprintf
xprintf:
	push	YH
    4dfc:	df 93       	push	r29
	push	YL
    4dfe:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
    4e00:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
    4e02:	de b7       	in	r29, 0x3e	; 62
	clr	YH
#endif
#if FLASHEND > 0x1FFFF
	adiw	YL, 6		;Y = pointer to arguments
#else
	adiw	YL, 5		;Y = pointer to arguments
    4e04:	25 96       	adiw	r28, 0x05	; 5
#endif
	ld	ZL, Y+		;Z = pointer to format string
    4e06:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
    4e08:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
    4e0a:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
    4e0c:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
    4e0e:	21 f0       	breq	.+8      	; 0x4e18 <xprintf+0x1c>
	cpi	r24, '%'	;Is format?
    4e10:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
    4e12:	29 f0       	breq	.+10     	; 0x4e1e <xprintf+0x22>
1:	rcall	xputc		;Put a normal character
    4e14:	a2 df       	rcall	.-188    	; 0x4d5a <xputc>
	rjmp	0b		;/
    4e16:	f9 cf       	rjmp	.-14     	; 0x4e0a <xprintf+0xe>
90:	pop	YL
    4e18:	cf 91       	pop	r28
	pop	YH
    4e1a:	df 91       	pop	r29
	ret
    4e1c:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
    4e1e:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
    4e20:	e8 94       	clt
	_LPMI	r21		;Get flags
    4e22:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
    4e24:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
    4e26:	b1 f3       	breq	.-20     	; 0x4e14 <xprintf+0x18>
	cpi	r21, '0'	;Zero filled?
    4e28:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
    4e2a:	11 f4       	brne	.+4      	; 0x4e30 <xprintf+0x34>
	set			;/
    4e2c:	68 94       	set
22:	_LPMI	r21		;Get width
    4e2e:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
    4e30:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
    4e32:	48 f4       	brcc	.+18     	; 0x4e46 <xprintf+0x4a>
	subi	r21, '0'	;
    4e34:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
    4e36:	80 f3       	brcs	.-32     	; 0x4e18 <xprintf+0x1c>
	lsl	r18		;
    4e38:	22 0f       	add	r18, r18
	mov	r0, r18		;
    4e3a:	02 2e       	mov	r0, r18
	lsl	r18		;
    4e3c:	22 0f       	add	r18, r18
	lsl	r18		;
    4e3e:	22 0f       	add	r18, r18
	add	r18, r0		;
    4e40:	20 0d       	add	r18, r0
	add	r18, r21	;
    4e42:	25 0f       	add	r18, r21
	rjmp	22b		;/
    4e44:	f4 cf       	rjmp	.-24     	; 0x4e2e <xprintf+0x32>

24:	brtc	25f		;get value (low word)
    4e46:	0e f4       	brtc	.+2      	; 0x4e4a <xprintf+0x4e>
	neg	r18		;
    4e48:	21 95       	neg	r18
25:	ld	r24, Y+		;
    4e4a:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
    4e4c:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
    4e4e:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
    4e50:	09 f3       	breq	.-62     	; 0x4e14 <xprintf+0x18>
	cpi	r21, 's'	;Is type RAM string?
    4e52:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
    4e54:	29 f1       	breq	.+74     	; 0x4ea0 <xprintf+0xa4>
	cpi	r21, 'S'	;Is type ROM string?
    4e56:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
    4e58:	59 f1       	breq	.+86     	; 0x4eb0 <xprintf+0xb4>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
    4e5a:	bc 01       	movw	r22, r24
	clr	r24		;
    4e5c:	88 27       	eor	r24, r24
	clr	r25		;
    4e5e:	99 27       	eor	r25, r25
	clt			;/
    4e60:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
    4e62:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
    4e64:	21 f4       	brne	.+8      	; 0x4e6e <xprintf+0x72>
	ld	r24, Y+		;get value (high word)
    4e66:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
    4e68:	99 91       	ld	r25, Y+
	set			;
    4e6a:	68 94       	set
	_LPMI	r21		;/
    4e6c:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
    4e6e:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
    4e70:	39 f4       	brne	.+14     	; 0x4e80 <xprintf+0x84>
	ldi	r20, -10	;
    4e72:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
    4e74:	7e f0       	brts	.+30     	; 0x4e94 <xprintf+0x98>
	sbrs	r23, 7		;
    4e76:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
    4e78:	0d c0       	rjmp	.+26     	; 0x4e94 <xprintf+0x98>
	ldi	r24, -1		;
    4e7a:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
    4e7c:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
    4e7e:	0a c0       	rjmp	.+20     	; 0x4e94 <xprintf+0x98>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
    4e80:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
    4e82:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
    4e84:	39 f0       	breq	.+14     	; 0x4e94 <xprintf+0x98>
	cpi	r21, 'X'	;Is type hexdecimal?
    4e86:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
    4e88:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
    4e8a:	21 f0       	breq	.+8      	; 0x4e94 <xprintf+0x98>
	cpi	r21, 'b'	;Is type binary?
    4e8c:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
    4e8e:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
    4e90:	09 f0       	breq	.+2      	; 0x4e94 <xprintf+0x98>
	rjmp	90b		;abort
    4e92:	c2 cf       	rjmp	.-124    	; 0x4e18 <xprintf+0x1c>
40:	push	ZH		;Output the value
    4e94:	ff 93       	push	r31
	push	ZL		;
    4e96:	ef 93       	push	r30
	rcall	xitoa		;
    4e98:	76 df       	rcall	.-276    	; 0x4d86 <xitoa>
42:	pop	ZL		;
    4e9a:	ef 91       	pop	r30
	pop	ZH		;
    4e9c:	ff 91       	pop	r31
	rjmp	0b		;/
    4e9e:	b5 cf       	rjmp	.-150    	; 0x4e0a <xprintf+0xe>

50:	push	ZH		;Put a string on the RAM
    4ea0:	ff 93       	push	r31
	push	ZL
    4ea2:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
    4ea4:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
    4ea6:	81 91       	ld	r24, Z+
	cpi	r24, 0
    4ea8:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
    4eaa:	b9 f3       	breq	.-18     	; 0x4e9a <xprintf+0x9e>
	rcall	xputc
    4eac:	56 df       	rcall	.-340    	; 0x4d5a <xputc>
	rjmp	51b
    4eae:	fb cf       	rjmp	.-10     	; 0x4ea6 <xprintf+0xaa>

60:	push	ZH		;Put a string on the ROM
    4eb0:	ff 93       	push	r31
	push	ZL
    4eb2:	ef 93       	push	r30
	rcall	xputs
    4eb4:	61 df       	rcall	.-318    	; 0x4d78 <xputs>
	rjmp	42b
    4eb6:	f1 cf       	rjmp	.-30     	; 0x4e9a <xprintf+0x9e>

00004eb8 <xatoi>:

#ifdef USE_XATOI
.global xatoi
.func xatoi
xatoi:
	_MOVW	r1, r0, r23, r22
    4eb8:	0b 01       	movw	r0, r22
	_MOVW	XH, XL, r25, r24
    4eba:	dc 01       	movw	r26, r24
	ld	ZL, X+
    4ebc:	ed 91       	ld	r30, X+
	ld	ZH, X+
    4ebe:	fd 91       	ld	r31, X+
	clr	r18		;r21:r18 = 0;
    4ec0:	22 27       	eor	r18, r18
	clr	r19		;
    4ec2:	33 27       	eor	r19, r19
	clr	r20		;
    4ec4:	44 27       	eor	r20, r20
	clr	r21		;/
    4ec6:	55 27       	eor	r21, r21
	clt			;T = 0;
    4ec8:	e8 94       	clt

	ldi	r25, 10		;r25 = 10;
    4eca:	9a e0       	ldi	r25, 0x0A	; 10
	rjmp	41f		;/
    4ecc:	01 c0       	rjmp	.+2      	; 0x4ed0 <xatoi+0x18>
40:	adiw	ZL, 1		;Z++;
    4ece:	31 96       	adiw	r30, 0x01	; 1
41:	ld	r22, Z		;r22 = *Z;
    4ed0:	60 81       	ld	r22, Z
	cpi	r22, ' '	;if(r22 == ' ') continue
    4ed2:	60 32       	cpi	r22, 0x20	; 32
	breq	40b		;/
    4ed4:	e1 f3       	breq	.-8      	; 0x4ece <xatoi+0x16>
	brcs	70f		;if(r22 < ' ') error;
    4ed6:	a8 f1       	brcs	.+106    	; 0x4f42 <xatoi+0x8a>
	cpi	r22, '-'	;if(r22 == '-') {
    4ed8:	6d 32       	cpi	r22, 0x2D	; 45
	brne	42f		; T = 1;
    4eda:	11 f4       	brne	.+4      	; 0x4ee0 <xatoi+0x28>
	set			; continue;
    4edc:	68 94       	set
	rjmp	40b		;}
    4ede:	f7 cf       	rjmp	.-18     	; 0x4ece <xatoi+0x16>
42:	cpi	r22, '9'+1	;if(r22 > '9') error;
    4ee0:	6a 33       	cpi	r22, 0x3A	; 58
	brcc	70f		;/
    4ee2:	78 f5       	brcc	.+94     	; 0x4f42 <xatoi+0x8a>
	cpi	r22, '0'	;if(r22 < '0') error;
    4ee4:	60 33       	cpi	r22, 0x30	; 48
	brcs	70f		;/
    4ee6:	68 f1       	brcs	.+90     	; 0x4f42 <xatoi+0x8a>
	brne	51f		;if(r22 > '0') cv_start;
    4ee8:	71 f4       	brne	.+28     	; 0x4f06 <xatoi+0x4e>
	ldi	r25, 8		;r25 = 8;
    4eea:	98 e0       	ldi	r25, 0x08	; 8
	adiw	ZL, 1		;r22 = *(++Z);
    4eec:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;/
    4eee:	60 81       	ld	r22, Z
	cpi	r22, ' '+1	;if(r22 <= ' ') exit;
    4ef0:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    4ef2:	48 f1       	brcs	.+82     	; 0x4f46 <xatoi+0x8e>
	cpi	r22, 'b'	;if(r22 == 'b') {
    4ef4:	62 36       	cpi	r22, 0x62	; 98
	brne	43f		; r25 = 2;
    4ef6:	11 f4       	brne	.+4      	; 0x4efc <xatoi+0x44>
	ldi	r25, 2		; cv_start;
    4ef8:	92 e0       	ldi	r25, 0x02	; 2
	rjmp	50f		;}
    4efa:	03 c0       	rjmp	.+6      	; 0x4f02 <xatoi+0x4a>
43:	cpi	r22, 'x'	;if(r22 != 'x') error;
    4efc:	68 37       	cpi	r22, 0x78	; 120
	brne	51f		;/
    4efe:	19 f4       	brne	.+6      	; 0x4f06 <xatoi+0x4e>
	ldi	r25, 16		;r25 = 16;
    4f00:	90 e1       	ldi	r25, 0x10	; 16

50:	adiw	ZL, 1		;Z++;
    4f02:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;r22 = *Z;
    4f04:	60 81       	ld	r22, Z
51:	cpi	r22, ' '+1	;if(r22 <= ' ') break;
    4f06:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    4f08:	f0 f0       	brcs	.+60     	; 0x4f46 <xatoi+0x8e>
	cpi	r22, 'a'	;if(r22 >= 'a') r22 =- 0x20;
    4f0a:	61 36       	cpi	r22, 0x61	; 97
	brcs	52f		;
    4f0c:	08 f0       	brcs	.+2      	; 0x4f10 <xatoi+0x58>
	subi	r22, 0x20	;/
    4f0e:	60 52       	subi	r22, 0x20	; 32
52:	subi	r22, '0'	;if((r22 -= '0') < 0) error;
    4f10:	60 53       	subi	r22, 0x30	; 48
	brcs	70f		;/
    4f12:	b8 f0       	brcs	.+46     	; 0x4f42 <xatoi+0x8a>
	cpi	r22, 10		;if(r22 >= 10) {
    4f14:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	53f		; r22 -= 7;
    4f16:	18 f0       	brcs	.+6      	; 0x4f1e <xatoi+0x66>
	subi	r22, 7		; if(r22 < 10) 
    4f18:	67 50       	subi	r22, 0x07	; 7
	cpi	r22, 10		;
    4f1a:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	70f		;}
    4f1c:	90 f0       	brcs	.+36     	; 0x4f42 <xatoi+0x8a>
53:	cp	r22, r25	;if(r22 >= r25) error;
    4f1e:	69 17       	cp	r22, r25
	brcc	70f		;/
    4f20:	80 f4       	brcc	.+32     	; 0x4f42 <xatoi+0x8a>
60:	ldi	r24, 33		;r21:r18 *= r25;
    4f22:	81 e2       	ldi	r24, 0x21	; 33
	sub	r23, r23	;
    4f24:	77 1b       	sub	r23, r23
61:	brcc	62f		;
    4f26:	08 f4       	brcc	.+2      	; 0x4f2a <xatoi+0x72>
	add	r23, r25	;
    4f28:	79 0f       	add	r23, r25
62:	lsr	r23		;
    4f2a:	76 95       	lsr	r23
	ror	r21		;
    4f2c:	57 95       	ror	r21
	ror	r20		;
    4f2e:	47 95       	ror	r20
	ror	r19		;
    4f30:	37 95       	ror	r19
	ror	r18		;
    4f32:	27 95       	ror	r18
	dec	r24		;
    4f34:	8a 95       	dec	r24
	brne	61b		;/
    4f36:	b9 f7       	brne	.-18     	; 0x4f26 <xatoi+0x6e>
	add	r18, r22	;r21:r18 += r22;
    4f38:	26 0f       	add	r18, r22
	adc	r19, r24	;
    4f3a:	38 1f       	adc	r19, r24
	adc	r20, r24	;
    4f3c:	48 1f       	adc	r20, r24
	adc	r21, r24	;/
    4f3e:	58 1f       	adc	r21, r24
	rjmp	50b		;repeat
    4f40:	e0 cf       	rjmp	.-64     	; 0x4f02 <xatoi+0x4a>

70:	ldi	r24, 0
    4f42:	80 e0       	ldi	r24, 0x00	; 0
	rjmp	81f
    4f44:	01 c0       	rjmp	.+2      	; 0x4f48 <xatoi+0x90>
80:	ldi	r24, 1
    4f46:	81 e0       	ldi	r24, 0x01	; 1
81:	brtc	82f
    4f48:	4e f4       	brtc	.+18     	; 0x4f5c <xatoi+0xa4>
	clr	r22
    4f4a:	66 27       	eor	r22, r22
	com	r18
    4f4c:	20 95       	com	r18
	com	r19
    4f4e:	30 95       	com	r19
	com	r20
    4f50:	40 95       	com	r20
	com	r21
    4f52:	50 95       	com	r21
	adc	r18, r22
    4f54:	26 1f       	adc	r18, r22
	adc	r19, r22
    4f56:	36 1f       	adc	r19, r22
	adc	r20, r22
    4f58:	46 1f       	adc	r20, r22
	adc	r21, r22
    4f5a:	56 1f       	adc	r21, r22
82:	st	-X, ZH
    4f5c:	fe 93       	st	-X, r31
	st	-X, ZL
    4f5e:	ee 93       	st	-X, r30
	_MOVW	XH, XL, r1, r0
    4f60:	d0 01       	movw	r26, r0
	st	X+, r18
    4f62:	2d 93       	st	X+, r18
	st	X+, r19
    4f64:	3d 93       	st	X+, r19
	st	X+, r20
    4f66:	4d 93       	st	X+, r20
	st	X+, r21
    4f68:	5d 93       	st	X+, r21
	clr	r1
    4f6a:	11 24       	eor	r1, r1
	ret
    4f6c:	08 95       	ret

00004f6e <_fpadd_parts>:
    4f6e:	a0 e0       	ldi	r26, 0x00	; 0
    4f70:	b0 e0       	ldi	r27, 0x00	; 0
    4f72:	ed eb       	ldi	r30, 0xBD	; 189
    4f74:	f7 e2       	ldi	r31, 0x27	; 39
    4f76:	0c 94 08 2d 	jmp	0x5a10	; 0x5a10 <__prologue_saves__+0x8>
    4f7a:	fc 01       	movw	r30, r24
    4f7c:	ea 01       	movw	r28, r20
    4f7e:	80 81       	ld	r24, Z
    4f80:	82 30       	cpi	r24, 0x02	; 2
    4f82:	08 f4       	brcc	.+2      	; 0x4f86 <_fpadd_parts+0x18>
    4f84:	38 c1       	rjmp	.+624    	; 0x51f6 <_fpadd_parts+0x288>
    4f86:	db 01       	movw	r26, r22
    4f88:	9c 91       	ld	r25, X
    4f8a:	92 30       	cpi	r25, 0x02	; 2
    4f8c:	08 f4       	brcc	.+2      	; 0x4f90 <_fpadd_parts+0x22>
    4f8e:	30 c1       	rjmp	.+608    	; 0x51f0 <_fpadd_parts+0x282>
    4f90:	84 30       	cpi	r24, 0x04	; 4
    4f92:	59 f4       	brne	.+22     	; 0x4faa <_fpadd_parts+0x3c>
    4f94:	94 30       	cpi	r25, 0x04	; 4
    4f96:	09 f0       	breq	.+2      	; 0x4f9a <_fpadd_parts+0x2c>
    4f98:	2e c1       	rjmp	.+604    	; 0x51f6 <_fpadd_parts+0x288>
    4f9a:	91 81       	ldd	r25, Z+1	; 0x01
    4f9c:	11 96       	adiw	r26, 0x01	; 1
    4f9e:	8c 91       	ld	r24, X
    4fa0:	11 97       	sbiw	r26, 0x01	; 1
    4fa2:	98 17       	cp	r25, r24
    4fa4:	09 f0       	breq	.+2      	; 0x4fa8 <_fpadd_parts+0x3a>
    4fa6:	21 c1       	rjmp	.+578    	; 0x51ea <_fpadd_parts+0x27c>
    4fa8:	26 c1       	rjmp	.+588    	; 0x51f6 <_fpadd_parts+0x288>
    4faa:	94 30       	cpi	r25, 0x04	; 4
    4fac:	09 f4       	brne	.+2      	; 0x4fb0 <_fpadd_parts+0x42>
    4fae:	20 c1       	rjmp	.+576    	; 0x51f0 <_fpadd_parts+0x282>
    4fb0:	92 30       	cpi	r25, 0x02	; 2
    4fb2:	b1 f4       	brne	.+44     	; 0x4fe0 <_fpadd_parts+0x72>
    4fb4:	82 30       	cpi	r24, 0x02	; 2
    4fb6:	09 f0       	breq	.+2      	; 0x4fba <_fpadd_parts+0x4c>
    4fb8:	1e c1       	rjmp	.+572    	; 0x51f6 <_fpadd_parts+0x288>
    4fba:	ca 01       	movw	r24, r20
    4fbc:	af 01       	movw	r20, r30
    4fbe:	28 e0       	ldi	r18, 0x08	; 8
    4fc0:	da 01       	movw	r26, r20
    4fc2:	0d 90       	ld	r0, X+
    4fc4:	ad 01       	movw	r20, r26
    4fc6:	dc 01       	movw	r26, r24
    4fc8:	0d 92       	st	X+, r0
    4fca:	cd 01       	movw	r24, r26
    4fcc:	21 50       	subi	r18, 0x01	; 1
    4fce:	c1 f7       	brne	.-16     	; 0x4fc0 <_fpadd_parts+0x52>
    4fd0:	db 01       	movw	r26, r22
    4fd2:	11 96       	adiw	r26, 0x01	; 1
    4fd4:	8c 91       	ld	r24, X
    4fd6:	11 97       	sbiw	r26, 0x01	; 1
    4fd8:	91 81       	ldd	r25, Z+1	; 0x01
    4fda:	89 23       	and	r24, r25
    4fdc:	89 83       	std	Y+1, r24	; 0x01
    4fde:	0a c1       	rjmp	.+532    	; 0x51f4 <_fpadd_parts+0x286>
    4fe0:	82 30       	cpi	r24, 0x02	; 2
    4fe2:	09 f4       	brne	.+2      	; 0x4fe6 <_fpadd_parts+0x78>
    4fe4:	05 c1       	rjmp	.+522    	; 0x51f0 <_fpadd_parts+0x282>
    4fe6:	c2 80       	ldd	r12, Z+2	; 0x02
    4fe8:	d3 80       	ldd	r13, Z+3	; 0x03
    4fea:	db 01       	movw	r26, r22
    4fec:	12 96       	adiw	r26, 0x02	; 2
    4fee:	6d 90       	ld	r6, X+
    4ff0:	7c 90       	ld	r7, X
    4ff2:	13 97       	sbiw	r26, 0x03	; 3
    4ff4:	24 81       	ldd	r18, Z+4	; 0x04
    4ff6:	35 81       	ldd	r19, Z+5	; 0x05
    4ff8:	46 81       	ldd	r20, Z+6	; 0x06
    4ffa:	57 81       	ldd	r21, Z+7	; 0x07
    4ffc:	14 96       	adiw	r26, 0x04	; 4
    4ffe:	ed 90       	ld	r14, X+
    5000:	fd 90       	ld	r15, X+
    5002:	0d 91       	ld	r16, X+
    5004:	1c 91       	ld	r17, X
    5006:	17 97       	sbiw	r26, 0x07	; 7
    5008:	c6 01       	movw	r24, r12
    500a:	86 19       	sub	r24, r6
    500c:	97 09       	sbc	r25, r7
    500e:	5c 01       	movw	r10, r24
    5010:	97 ff       	sbrs	r25, 7
    5012:	04 c0       	rjmp	.+8      	; 0x501c <_fpadd_parts+0xae>
    5014:	aa 24       	eor	r10, r10
    5016:	bb 24       	eor	r11, r11
    5018:	a8 1a       	sub	r10, r24
    501a:	b9 0a       	sbc	r11, r25
    501c:	b0 e2       	ldi	r27, 0x20	; 32
    501e:	ab 16       	cp	r10, r27
    5020:	b1 04       	cpc	r11, r1
    5022:	0c f0       	brlt	.+2      	; 0x5026 <_fpadd_parts+0xb8>
    5024:	61 c0       	rjmp	.+194    	; 0x50e8 <_fpadd_parts+0x17a>
    5026:	18 16       	cp	r1, r24
    5028:	19 06       	cpc	r1, r25
    502a:	6c f5       	brge	.+90     	; 0x5086 <_fpadd_parts+0x118>
    502c:	37 01       	movw	r6, r14
    502e:	48 01       	movw	r8, r16
    5030:	0a 2c       	mov	r0, r10
    5032:	04 c0       	rjmp	.+8      	; 0x503c <_fpadd_parts+0xce>
    5034:	96 94       	lsr	r9
    5036:	87 94       	ror	r8
    5038:	77 94       	ror	r7
    503a:	67 94       	ror	r6
    503c:	0a 94       	dec	r0
    503e:	d2 f7       	brpl	.-12     	; 0x5034 <_fpadd_parts+0xc6>
    5040:	81 e0       	ldi	r24, 0x01	; 1
    5042:	90 e0       	ldi	r25, 0x00	; 0
    5044:	a0 e0       	ldi	r26, 0x00	; 0
    5046:	b0 e0       	ldi	r27, 0x00	; 0
    5048:	0a 2c       	mov	r0, r10
    504a:	04 c0       	rjmp	.+8      	; 0x5054 <_fpadd_parts+0xe6>
    504c:	88 0f       	add	r24, r24
    504e:	99 1f       	adc	r25, r25
    5050:	aa 1f       	adc	r26, r26
    5052:	bb 1f       	adc	r27, r27
    5054:	0a 94       	dec	r0
    5056:	d2 f7       	brpl	.-12     	; 0x504c <_fpadd_parts+0xde>
    5058:	01 97       	sbiw	r24, 0x01	; 1
    505a:	a1 09       	sbc	r26, r1
    505c:	b1 09       	sbc	r27, r1
    505e:	8e 21       	and	r24, r14
    5060:	9f 21       	and	r25, r15
    5062:	a0 23       	and	r26, r16
    5064:	b1 23       	and	r27, r17
    5066:	ee 24       	eor	r14, r14
    5068:	ff 24       	eor	r15, r15
    506a:	87 01       	movw	r16, r14
    506c:	e3 94       	inc	r14
    506e:	00 97       	sbiw	r24, 0x00	; 0
    5070:	a1 05       	cpc	r26, r1
    5072:	b1 05       	cpc	r27, r1
    5074:	19 f4       	brne	.+6      	; 0x507c <_fpadd_parts+0x10e>
    5076:	ee 24       	eor	r14, r14
    5078:	ff 24       	eor	r15, r15
    507a:	87 01       	movw	r16, r14
    507c:	e6 28       	or	r14, r6
    507e:	f7 28       	or	r15, r7
    5080:	08 29       	or	r16, r8
    5082:	19 29       	or	r17, r9
    5084:	3c c0       	rjmp	.+120    	; 0x50fe <_fpadd_parts+0x190>
    5086:	00 97       	sbiw	r24, 0x00	; 0
    5088:	d1 f1       	breq	.+116    	; 0x50fe <_fpadd_parts+0x190>
    508a:	ca 0c       	add	r12, r10
    508c:	db 1c       	adc	r13, r11
    508e:	39 01       	movw	r6, r18
    5090:	4a 01       	movw	r8, r20
    5092:	0a 2c       	mov	r0, r10
    5094:	04 c0       	rjmp	.+8      	; 0x509e <_fpadd_parts+0x130>
    5096:	96 94       	lsr	r9
    5098:	87 94       	ror	r8
    509a:	77 94       	ror	r7
    509c:	67 94       	ror	r6
    509e:	0a 94       	dec	r0
    50a0:	d2 f7       	brpl	.-12     	; 0x5096 <_fpadd_parts+0x128>
    50a2:	81 e0       	ldi	r24, 0x01	; 1
    50a4:	90 e0       	ldi	r25, 0x00	; 0
    50a6:	a0 e0       	ldi	r26, 0x00	; 0
    50a8:	b0 e0       	ldi	r27, 0x00	; 0
    50aa:	0a 2c       	mov	r0, r10
    50ac:	04 c0       	rjmp	.+8      	; 0x50b6 <_fpadd_parts+0x148>
    50ae:	88 0f       	add	r24, r24
    50b0:	99 1f       	adc	r25, r25
    50b2:	aa 1f       	adc	r26, r26
    50b4:	bb 1f       	adc	r27, r27
    50b6:	0a 94       	dec	r0
    50b8:	d2 f7       	brpl	.-12     	; 0x50ae <_fpadd_parts+0x140>
    50ba:	01 97       	sbiw	r24, 0x01	; 1
    50bc:	a1 09       	sbc	r26, r1
    50be:	b1 09       	sbc	r27, r1
    50c0:	82 23       	and	r24, r18
    50c2:	93 23       	and	r25, r19
    50c4:	a4 23       	and	r26, r20
    50c6:	b5 23       	and	r27, r21
    50c8:	21 e0       	ldi	r18, 0x01	; 1
    50ca:	30 e0       	ldi	r19, 0x00	; 0
    50cc:	40 e0       	ldi	r20, 0x00	; 0
    50ce:	50 e0       	ldi	r21, 0x00	; 0
    50d0:	00 97       	sbiw	r24, 0x00	; 0
    50d2:	a1 05       	cpc	r26, r1
    50d4:	b1 05       	cpc	r27, r1
    50d6:	19 f4       	brne	.+6      	; 0x50de <_fpadd_parts+0x170>
    50d8:	20 e0       	ldi	r18, 0x00	; 0
    50da:	30 e0       	ldi	r19, 0x00	; 0
    50dc:	a9 01       	movw	r20, r18
    50de:	26 29       	or	r18, r6
    50e0:	37 29       	or	r19, r7
    50e2:	48 29       	or	r20, r8
    50e4:	59 29       	or	r21, r9
    50e6:	0b c0       	rjmp	.+22     	; 0x50fe <_fpadd_parts+0x190>
    50e8:	6c 14       	cp	r6, r12
    50ea:	7d 04       	cpc	r7, r13
    50ec:	24 f4       	brge	.+8      	; 0x50f6 <_fpadd_parts+0x188>
    50ee:	ee 24       	eor	r14, r14
    50f0:	ff 24       	eor	r15, r15
    50f2:	87 01       	movw	r16, r14
    50f4:	04 c0       	rjmp	.+8      	; 0x50fe <_fpadd_parts+0x190>
    50f6:	63 01       	movw	r12, r6
    50f8:	20 e0       	ldi	r18, 0x00	; 0
    50fa:	30 e0       	ldi	r19, 0x00	; 0
    50fc:	a9 01       	movw	r20, r18
    50fe:	81 81       	ldd	r24, Z+1	; 0x01
    5100:	fb 01       	movw	r30, r22
    5102:	91 81       	ldd	r25, Z+1	; 0x01
    5104:	89 17       	cp	r24, r25
    5106:	09 f4       	brne	.+2      	; 0x510a <_fpadd_parts+0x19c>
    5108:	45 c0       	rjmp	.+138    	; 0x5194 <_fpadd_parts+0x226>
    510a:	88 23       	and	r24, r24
    510c:	49 f0       	breq	.+18     	; 0x5120 <_fpadd_parts+0x1b2>
    510e:	d8 01       	movw	r26, r16
    5110:	c7 01       	movw	r24, r14
    5112:	82 1b       	sub	r24, r18
    5114:	93 0b       	sbc	r25, r19
    5116:	a4 0b       	sbc	r26, r20
    5118:	b5 0b       	sbc	r27, r21
    511a:	9c 01       	movw	r18, r24
    511c:	ad 01       	movw	r20, r26
    511e:	04 c0       	rjmp	.+8      	; 0x5128 <_fpadd_parts+0x1ba>
    5120:	2e 19       	sub	r18, r14
    5122:	3f 09       	sbc	r19, r15
    5124:	40 0b       	sbc	r20, r16
    5126:	51 0b       	sbc	r21, r17
    5128:	57 fd       	sbrc	r21, 7
    512a:	04 c0       	rjmp	.+8      	; 0x5134 <_fpadd_parts+0x1c6>
    512c:	19 82       	std	Y+1, r1	; 0x01
    512e:	db 82       	std	Y+3, r13	; 0x03
    5130:	ca 82       	std	Y+2, r12	; 0x02
    5132:	0b c0       	rjmp	.+22     	; 0x514a <_fpadd_parts+0x1dc>
    5134:	81 e0       	ldi	r24, 0x01	; 1
    5136:	89 83       	std	Y+1, r24	; 0x01
    5138:	db 82       	std	Y+3, r13	; 0x03
    513a:	ca 82       	std	Y+2, r12	; 0x02
    513c:	50 95       	com	r21
    513e:	40 95       	com	r20
    5140:	30 95       	com	r19
    5142:	21 95       	neg	r18
    5144:	3f 4f       	sbci	r19, 0xFF	; 255
    5146:	4f 4f       	sbci	r20, 0xFF	; 255
    5148:	5f 4f       	sbci	r21, 0xFF	; 255
    514a:	2c 83       	std	Y+4, r18	; 0x04
    514c:	3d 83       	std	Y+5, r19	; 0x05
    514e:	4e 83       	std	Y+6, r20	; 0x06
    5150:	5f 83       	std	Y+7, r21	; 0x07
    5152:	0d c0       	rjmp	.+26     	; 0x516e <_fpadd_parts+0x200>
    5154:	88 0f       	add	r24, r24
    5156:	99 1f       	adc	r25, r25
    5158:	aa 1f       	adc	r26, r26
    515a:	bb 1f       	adc	r27, r27
    515c:	8c 83       	std	Y+4, r24	; 0x04
    515e:	9d 83       	std	Y+5, r25	; 0x05
    5160:	ae 83       	std	Y+6, r26	; 0x06
    5162:	bf 83       	std	Y+7, r27	; 0x07
    5164:	8a 81       	ldd	r24, Y+2	; 0x02
    5166:	9b 81       	ldd	r25, Y+3	; 0x03
    5168:	01 97       	sbiw	r24, 0x01	; 1
    516a:	9b 83       	std	Y+3, r25	; 0x03
    516c:	8a 83       	std	Y+2, r24	; 0x02
    516e:	8c 81       	ldd	r24, Y+4	; 0x04
    5170:	9d 81       	ldd	r25, Y+5	; 0x05
    5172:	ae 81       	ldd	r26, Y+6	; 0x06
    5174:	bf 81       	ldd	r27, Y+7	; 0x07
    5176:	9c 01       	movw	r18, r24
    5178:	ad 01       	movw	r20, r26
    517a:	21 50       	subi	r18, 0x01	; 1
    517c:	30 40       	sbci	r19, 0x00	; 0
    517e:	40 40       	sbci	r20, 0x00	; 0
    5180:	50 40       	sbci	r21, 0x00	; 0
    5182:	2f 3f       	cpi	r18, 0xFF	; 255
    5184:	ef ef       	ldi	r30, 0xFF	; 255
    5186:	3e 07       	cpc	r19, r30
    5188:	ef ef       	ldi	r30, 0xFF	; 255
    518a:	4e 07       	cpc	r20, r30
    518c:	ef e3       	ldi	r30, 0x3F	; 63
    518e:	5e 07       	cpc	r21, r30
    5190:	08 f3       	brcs	.-62     	; 0x5154 <_fpadd_parts+0x1e6>
    5192:	0b c0       	rjmp	.+22     	; 0x51aa <_fpadd_parts+0x23c>
    5194:	89 83       	std	Y+1, r24	; 0x01
    5196:	db 82       	std	Y+3, r13	; 0x03
    5198:	ca 82       	std	Y+2, r12	; 0x02
    519a:	2e 0d       	add	r18, r14
    519c:	3f 1d       	adc	r19, r15
    519e:	40 1f       	adc	r20, r16
    51a0:	51 1f       	adc	r21, r17
    51a2:	2c 83       	std	Y+4, r18	; 0x04
    51a4:	3d 83       	std	Y+5, r19	; 0x05
    51a6:	4e 83       	std	Y+6, r20	; 0x06
    51a8:	5f 83       	std	Y+7, r21	; 0x07
    51aa:	83 e0       	ldi	r24, 0x03	; 3
    51ac:	88 83       	st	Y, r24
    51ae:	2c 81       	ldd	r18, Y+4	; 0x04
    51b0:	3d 81       	ldd	r19, Y+5	; 0x05
    51b2:	4e 81       	ldd	r20, Y+6	; 0x06
    51b4:	5f 81       	ldd	r21, Y+7	; 0x07
    51b6:	57 ff       	sbrs	r21, 7
    51b8:	1d c0       	rjmp	.+58     	; 0x51f4 <_fpadd_parts+0x286>
    51ba:	da 01       	movw	r26, r20
    51bc:	c9 01       	movw	r24, r18
    51be:	81 70       	andi	r24, 0x01	; 1
    51c0:	90 70       	andi	r25, 0x00	; 0
    51c2:	a0 70       	andi	r26, 0x00	; 0
    51c4:	b0 70       	andi	r27, 0x00	; 0
    51c6:	56 95       	lsr	r21
    51c8:	47 95       	ror	r20
    51ca:	37 95       	ror	r19
    51cc:	27 95       	ror	r18
    51ce:	82 2b       	or	r24, r18
    51d0:	93 2b       	or	r25, r19
    51d2:	a4 2b       	or	r26, r20
    51d4:	b5 2b       	or	r27, r21
    51d6:	8c 83       	std	Y+4, r24	; 0x04
    51d8:	9d 83       	std	Y+5, r25	; 0x05
    51da:	ae 83       	std	Y+6, r26	; 0x06
    51dc:	bf 83       	std	Y+7, r27	; 0x07
    51de:	8a 81       	ldd	r24, Y+2	; 0x02
    51e0:	9b 81       	ldd	r25, Y+3	; 0x03
    51e2:	01 96       	adiw	r24, 0x01	; 1
    51e4:	9b 83       	std	Y+3, r25	; 0x03
    51e6:	8a 83       	std	Y+2, r24	; 0x02
    51e8:	05 c0       	rjmp	.+10     	; 0x51f4 <_fpadd_parts+0x286>
    51ea:	e3 ea       	ldi	r30, 0xA3	; 163
    51ec:	f3 e0       	ldi	r31, 0x03	; 3
    51ee:	03 c0       	rjmp	.+6      	; 0x51f6 <_fpadd_parts+0x288>
    51f0:	fb 01       	movw	r30, r22
    51f2:	01 c0       	rjmp	.+2      	; 0x51f6 <_fpadd_parts+0x288>
    51f4:	fe 01       	movw	r30, r28
    51f6:	cf 01       	movw	r24, r30
    51f8:	cd b7       	in	r28, 0x3d	; 61
    51fa:	de b7       	in	r29, 0x3e	; 62
    51fc:	ee e0       	ldi	r30, 0x0E	; 14
    51fe:	0c 94 24 2d 	jmp	0x5a48	; 0x5a48 <__epilogue_restores__+0x8>

00005202 <__addsf3>:
    5202:	a0 e2       	ldi	r26, 0x20	; 32
    5204:	b0 e0       	ldi	r27, 0x00	; 0
    5206:	e7 e0       	ldi	r30, 0x07	; 7
    5208:	f9 e2       	ldi	r31, 0x29	; 41
    520a:	0c 94 10 2d 	jmp	0x5a20	; 0x5a20 <__prologue_saves__+0x18>
    520e:	69 83       	std	Y+1, r22	; 0x01
    5210:	7a 83       	std	Y+2, r23	; 0x02
    5212:	8b 83       	std	Y+3, r24	; 0x03
    5214:	9c 83       	std	Y+4, r25	; 0x04
    5216:	2d 83       	std	Y+5, r18	; 0x05
    5218:	3e 83       	std	Y+6, r19	; 0x06
    521a:	4f 83       	std	Y+7, r20	; 0x07
    521c:	58 87       	std	Y+8, r21	; 0x08
    521e:	89 e0       	ldi	r24, 0x09	; 9
    5220:	e8 2e       	mov	r14, r24
    5222:	f1 2c       	mov	r15, r1
    5224:	ec 0e       	add	r14, r28
    5226:	fd 1e       	adc	r15, r29
    5228:	ce 01       	movw	r24, r28
    522a:	01 96       	adiw	r24, 0x01	; 1
    522c:	b7 01       	movw	r22, r14
    522e:	0e 94 27 2c 	call	0x584e	; 0x584e <__unpack_f>
    5232:	8e 01       	movw	r16, r28
    5234:	0f 5e       	subi	r16, 0xEF	; 239
    5236:	1f 4f       	sbci	r17, 0xFF	; 255
    5238:	ce 01       	movw	r24, r28
    523a:	05 96       	adiw	r24, 0x05	; 5
    523c:	b8 01       	movw	r22, r16
    523e:	0e 94 27 2c 	call	0x584e	; 0x584e <__unpack_f>
    5242:	c7 01       	movw	r24, r14
    5244:	b8 01       	movw	r22, r16
    5246:	ae 01       	movw	r20, r28
    5248:	47 5e       	subi	r20, 0xE7	; 231
    524a:	5f 4f       	sbci	r21, 0xFF	; 255
    524c:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <_fpadd_parts>
    5250:	0e 94 59 2b 	call	0x56b2	; 0x56b2 <__pack_f>
    5254:	a0 96       	adiw	r28, 0x20	; 32
    5256:	e6 e0       	ldi	r30, 0x06	; 6
    5258:	0c 94 2c 2d 	jmp	0x5a58	; 0x5a58 <__epilogue_restores__+0x18>

0000525c <__subsf3>:
    525c:	a0 e2       	ldi	r26, 0x20	; 32
    525e:	b0 e0       	ldi	r27, 0x00	; 0
    5260:	e4 e3       	ldi	r30, 0x34	; 52
    5262:	f9 e2       	ldi	r31, 0x29	; 41
    5264:	0c 94 10 2d 	jmp	0x5a20	; 0x5a20 <__prologue_saves__+0x18>
    5268:	69 83       	std	Y+1, r22	; 0x01
    526a:	7a 83       	std	Y+2, r23	; 0x02
    526c:	8b 83       	std	Y+3, r24	; 0x03
    526e:	9c 83       	std	Y+4, r25	; 0x04
    5270:	2d 83       	std	Y+5, r18	; 0x05
    5272:	3e 83       	std	Y+6, r19	; 0x06
    5274:	4f 83       	std	Y+7, r20	; 0x07
    5276:	58 87       	std	Y+8, r21	; 0x08
    5278:	8e 01       	movw	r16, r28
    527a:	07 5f       	subi	r16, 0xF7	; 247
    527c:	1f 4f       	sbci	r17, 0xFF	; 255
    527e:	ce 01       	movw	r24, r28
    5280:	01 96       	adiw	r24, 0x01	; 1
    5282:	b8 01       	movw	r22, r16
    5284:	0e 94 27 2c 	call	0x584e	; 0x584e <__unpack_f>
    5288:	91 e1       	ldi	r25, 0x11	; 17
    528a:	e9 2e       	mov	r14, r25
    528c:	f1 2c       	mov	r15, r1
    528e:	ec 0e       	add	r14, r28
    5290:	fd 1e       	adc	r15, r29
    5292:	ce 01       	movw	r24, r28
    5294:	05 96       	adiw	r24, 0x05	; 5
    5296:	b7 01       	movw	r22, r14
    5298:	0e 94 27 2c 	call	0x584e	; 0x584e <__unpack_f>
    529c:	8a 89       	ldd	r24, Y+18	; 0x12
    529e:	91 e0       	ldi	r25, 0x01	; 1
    52a0:	89 27       	eor	r24, r25
    52a2:	8a 8b       	std	Y+18, r24	; 0x12
    52a4:	c8 01       	movw	r24, r16
    52a6:	b7 01       	movw	r22, r14
    52a8:	ae 01       	movw	r20, r28
    52aa:	47 5e       	subi	r20, 0xE7	; 231
    52ac:	5f 4f       	sbci	r21, 0xFF	; 255
    52ae:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <_fpadd_parts>
    52b2:	0e 94 59 2b 	call	0x56b2	; 0x56b2 <__pack_f>
    52b6:	a0 96       	adiw	r28, 0x20	; 32
    52b8:	e6 e0       	ldi	r30, 0x06	; 6
    52ba:	0c 94 2c 2d 	jmp	0x5a58	; 0x5a58 <__epilogue_restores__+0x18>

000052be <__mulsf3>:
    52be:	a0 e2       	ldi	r26, 0x20	; 32
    52c0:	b0 e0       	ldi	r27, 0x00	; 0
    52c2:	e5 e6       	ldi	r30, 0x65	; 101
    52c4:	f9 e2       	ldi	r31, 0x29	; 41
    52c6:	0c 94 04 2d 	jmp	0x5a08	; 0x5a08 <__prologue_saves__>
    52ca:	69 83       	std	Y+1, r22	; 0x01
    52cc:	7a 83       	std	Y+2, r23	; 0x02
    52ce:	8b 83       	std	Y+3, r24	; 0x03
    52d0:	9c 83       	std	Y+4, r25	; 0x04
    52d2:	2d 83       	std	Y+5, r18	; 0x05
    52d4:	3e 83       	std	Y+6, r19	; 0x06
    52d6:	4f 83       	std	Y+7, r20	; 0x07
    52d8:	58 87       	std	Y+8, r21	; 0x08
    52da:	ce 01       	movw	r24, r28
    52dc:	01 96       	adiw	r24, 0x01	; 1
    52de:	be 01       	movw	r22, r28
    52e0:	67 5f       	subi	r22, 0xF7	; 247
    52e2:	7f 4f       	sbci	r23, 0xFF	; 255
    52e4:	0e 94 27 2c 	call	0x584e	; 0x584e <__unpack_f>
    52e8:	ce 01       	movw	r24, r28
    52ea:	05 96       	adiw	r24, 0x05	; 5
    52ec:	be 01       	movw	r22, r28
    52ee:	6f 5e       	subi	r22, 0xEF	; 239
    52f0:	7f 4f       	sbci	r23, 0xFF	; 255
    52f2:	0e 94 27 2c 	call	0x584e	; 0x584e <__unpack_f>
    52f6:	99 85       	ldd	r25, Y+9	; 0x09
    52f8:	92 30       	cpi	r25, 0x02	; 2
    52fa:	78 f0       	brcs	.+30     	; 0x531a <__mulsf3+0x5c>
    52fc:	89 89       	ldd	r24, Y+17	; 0x11
    52fe:	82 30       	cpi	r24, 0x02	; 2
    5300:	c0 f0       	brcs	.+48     	; 0x5332 <__mulsf3+0x74>
    5302:	94 30       	cpi	r25, 0x04	; 4
    5304:	19 f4       	brne	.+6      	; 0x530c <__mulsf3+0x4e>
    5306:	82 30       	cpi	r24, 0x02	; 2
    5308:	41 f4       	brne	.+16     	; 0x531a <__mulsf3+0x5c>
    530a:	cb c0       	rjmp	.+406    	; 0x54a2 <__mulsf3+0x1e4>
    530c:	84 30       	cpi	r24, 0x04	; 4
    530e:	19 f4       	brne	.+6      	; 0x5316 <__mulsf3+0x58>
    5310:	92 30       	cpi	r25, 0x02	; 2
    5312:	79 f4       	brne	.+30     	; 0x5332 <__mulsf3+0x74>
    5314:	c6 c0       	rjmp	.+396    	; 0x54a2 <__mulsf3+0x1e4>
    5316:	92 30       	cpi	r25, 0x02	; 2
    5318:	51 f4       	brne	.+20     	; 0x532e <__mulsf3+0x70>
    531a:	81 e0       	ldi	r24, 0x01	; 1
    531c:	2a 85       	ldd	r18, Y+10	; 0x0a
    531e:	9a 89       	ldd	r25, Y+18	; 0x12
    5320:	29 17       	cp	r18, r25
    5322:	09 f4       	brne	.+2      	; 0x5326 <__mulsf3+0x68>
    5324:	80 e0       	ldi	r24, 0x00	; 0
    5326:	8a 87       	std	Y+10, r24	; 0x0a
    5328:	ce 01       	movw	r24, r28
    532a:	09 96       	adiw	r24, 0x09	; 9
    532c:	bc c0       	rjmp	.+376    	; 0x54a6 <__mulsf3+0x1e8>
    532e:	82 30       	cpi	r24, 0x02	; 2
    5330:	51 f4       	brne	.+20     	; 0x5346 <__mulsf3+0x88>
    5332:	81 e0       	ldi	r24, 0x01	; 1
    5334:	2a 85       	ldd	r18, Y+10	; 0x0a
    5336:	9a 89       	ldd	r25, Y+18	; 0x12
    5338:	29 17       	cp	r18, r25
    533a:	09 f4       	brne	.+2      	; 0x533e <__mulsf3+0x80>
    533c:	80 e0       	ldi	r24, 0x00	; 0
    533e:	8a 8b       	std	Y+18, r24	; 0x12
    5340:	ce 01       	movw	r24, r28
    5342:	41 96       	adiw	r24, 0x11	; 17
    5344:	b0 c0       	rjmp	.+352    	; 0x54a6 <__mulsf3+0x1e8>
    5346:	6d 84       	ldd	r6, Y+13	; 0x0d
    5348:	7e 84       	ldd	r7, Y+14	; 0x0e
    534a:	8f 84       	ldd	r8, Y+15	; 0x0f
    534c:	98 88       	ldd	r9, Y+16	; 0x10
    534e:	ed 88       	ldd	r14, Y+21	; 0x15
    5350:	fe 88       	ldd	r15, Y+22	; 0x16
    5352:	0f 89       	ldd	r16, Y+23	; 0x17
    5354:	18 8d       	ldd	r17, Y+24	; 0x18
    5356:	e0 e2       	ldi	r30, 0x20	; 32
    5358:	f0 e0       	ldi	r31, 0x00	; 0
    535a:	80 e0       	ldi	r24, 0x00	; 0
    535c:	90 e0       	ldi	r25, 0x00	; 0
    535e:	dc 01       	movw	r26, r24
    5360:	aa 24       	eor	r10, r10
    5362:	bb 24       	eor	r11, r11
    5364:	65 01       	movw	r12, r10
    5366:	20 e0       	ldi	r18, 0x00	; 0
    5368:	30 e0       	ldi	r19, 0x00	; 0
    536a:	a9 01       	movw	r20, r18
    536c:	b3 01       	movw	r22, r6
    536e:	61 70       	andi	r22, 0x01	; 1
    5370:	70 70       	andi	r23, 0x00	; 0
    5372:	61 15       	cp	r22, r1
    5374:	71 05       	cpc	r23, r1
    5376:	d1 f0       	breq	.+52     	; 0x53ac <__mulsf3+0xee>
    5378:	2e 0d       	add	r18, r14
    537a:	3f 1d       	adc	r19, r15
    537c:	40 1f       	adc	r20, r16
    537e:	51 1f       	adc	r21, r17
    5380:	15 01       	movw	r2, r10
    5382:	26 01       	movw	r4, r12
    5384:	28 0e       	add	r2, r24
    5386:	39 1e       	adc	r3, r25
    5388:	4a 1e       	adc	r4, r26
    538a:	5b 1e       	adc	r5, r27
    538c:	81 e0       	ldi	r24, 0x01	; 1
    538e:	90 e0       	ldi	r25, 0x00	; 0
    5390:	a0 e0       	ldi	r26, 0x00	; 0
    5392:	b0 e0       	ldi	r27, 0x00	; 0
    5394:	2e 15       	cp	r18, r14
    5396:	3f 05       	cpc	r19, r15
    5398:	40 07       	cpc	r20, r16
    539a:	51 07       	cpc	r21, r17
    539c:	18 f0       	brcs	.+6      	; 0x53a4 <__mulsf3+0xe6>
    539e:	80 e0       	ldi	r24, 0x00	; 0
    53a0:	90 e0       	ldi	r25, 0x00	; 0
    53a2:	dc 01       	movw	r26, r24
    53a4:	82 0d       	add	r24, r2
    53a6:	93 1d       	adc	r25, r3
    53a8:	a4 1d       	adc	r26, r4
    53aa:	b5 1d       	adc	r27, r5
    53ac:	aa 0c       	add	r10, r10
    53ae:	bb 1c       	adc	r11, r11
    53b0:	cc 1c       	adc	r12, r12
    53b2:	dd 1c       	adc	r13, r13
    53b4:	17 ff       	sbrs	r17, 7
    53b6:	09 c0       	rjmp	.+18     	; 0x53ca <__mulsf3+0x10c>
    53b8:	61 e0       	ldi	r22, 0x01	; 1
    53ba:	26 2e       	mov	r2, r22
    53bc:	31 2c       	mov	r3, r1
    53be:	41 2c       	mov	r4, r1
    53c0:	51 2c       	mov	r5, r1
    53c2:	a2 28       	or	r10, r2
    53c4:	b3 28       	or	r11, r3
    53c6:	c4 28       	or	r12, r4
    53c8:	d5 28       	or	r13, r5
    53ca:	31 97       	sbiw	r30, 0x01	; 1
    53cc:	49 f0       	breq	.+18     	; 0x53e0 <__mulsf3+0x122>
    53ce:	ee 0c       	add	r14, r14
    53d0:	ff 1c       	adc	r15, r15
    53d2:	00 1f       	adc	r16, r16
    53d4:	11 1f       	adc	r17, r17
    53d6:	96 94       	lsr	r9
    53d8:	87 94       	ror	r8
    53da:	77 94       	ror	r7
    53dc:	67 94       	ror	r6
    53de:	c6 cf       	rjmp	.-116    	; 0x536c <__mulsf3+0xae>
    53e0:	6b 89       	ldd	r22, Y+19	; 0x13
    53e2:	7c 89       	ldd	r23, Y+20	; 0x14
    53e4:	eb 85       	ldd	r30, Y+11	; 0x0b
    53e6:	fc 85       	ldd	r31, Y+12	; 0x0c
    53e8:	6e 0f       	add	r22, r30
    53ea:	7f 1f       	adc	r23, r31
    53ec:	6e 5f       	subi	r22, 0xFE	; 254
    53ee:	7f 4f       	sbci	r23, 0xFF	; 255
    53f0:	7c 8f       	std	Y+28, r23	; 0x1c
    53f2:	6b 8f       	std	Y+27, r22	; 0x1b
    53f4:	61 e0       	ldi	r22, 0x01	; 1
    53f6:	ea 85       	ldd	r30, Y+10	; 0x0a
    53f8:	7a 89       	ldd	r23, Y+18	; 0x12
    53fa:	e7 17       	cp	r30, r23
    53fc:	09 f4       	brne	.+2      	; 0x5400 <__mulsf3+0x142>
    53fe:	60 e0       	ldi	r22, 0x00	; 0
    5400:	6a 8f       	std	Y+26, r22	; 0x1a
    5402:	6b 8d       	ldd	r22, Y+27	; 0x1b
    5404:	7c 8d       	ldd	r23, Y+28	; 0x1c
    5406:	10 c0       	rjmp	.+32     	; 0x5428 <__mulsf3+0x16a>
    5408:	fc 01       	movw	r30, r24
    540a:	e1 70       	andi	r30, 0x01	; 1
    540c:	f0 70       	andi	r31, 0x00	; 0
    540e:	30 97       	sbiw	r30, 0x00	; 0
    5410:	29 f0       	breq	.+10     	; 0x541c <__mulsf3+0x15e>
    5412:	56 95       	lsr	r21
    5414:	47 95       	ror	r20
    5416:	37 95       	ror	r19
    5418:	27 95       	ror	r18
    541a:	50 68       	ori	r21, 0x80	; 128
    541c:	b6 95       	lsr	r27
    541e:	a7 95       	ror	r26
    5420:	97 95       	ror	r25
    5422:	87 95       	ror	r24
    5424:	6f 5f       	subi	r22, 0xFF	; 255
    5426:	7f 4f       	sbci	r23, 0xFF	; 255
    5428:	b7 fd       	sbrc	r27, 7
    542a:	ee cf       	rjmp	.-36     	; 0x5408 <__mulsf3+0x14a>
    542c:	0c c0       	rjmp	.+24     	; 0x5446 <__mulsf3+0x188>
    542e:	88 0f       	add	r24, r24
    5430:	99 1f       	adc	r25, r25
    5432:	aa 1f       	adc	r26, r26
    5434:	bb 1f       	adc	r27, r27
    5436:	57 fd       	sbrc	r21, 7
    5438:	81 60       	ori	r24, 0x01	; 1
    543a:	22 0f       	add	r18, r18
    543c:	33 1f       	adc	r19, r19
    543e:	44 1f       	adc	r20, r20
    5440:	55 1f       	adc	r21, r21
    5442:	61 50       	subi	r22, 0x01	; 1
    5444:	70 40       	sbci	r23, 0x00	; 0
    5446:	80 30       	cpi	r24, 0x00	; 0
    5448:	e0 e0       	ldi	r30, 0x00	; 0
    544a:	9e 07       	cpc	r25, r30
    544c:	e0 e0       	ldi	r30, 0x00	; 0
    544e:	ae 07       	cpc	r26, r30
    5450:	e0 e4       	ldi	r30, 0x40	; 64
    5452:	be 07       	cpc	r27, r30
    5454:	60 f3       	brcs	.-40     	; 0x542e <__mulsf3+0x170>
    5456:	6b 8f       	std	Y+27, r22	; 0x1b
    5458:	7c 8f       	std	Y+28, r23	; 0x1c
    545a:	6f e7       	ldi	r22, 0x7F	; 127
    545c:	e6 2e       	mov	r14, r22
    545e:	f1 2c       	mov	r15, r1
    5460:	01 2d       	mov	r16, r1
    5462:	11 2d       	mov	r17, r1
    5464:	e8 22       	and	r14, r24
    5466:	f9 22       	and	r15, r25
    5468:	0a 23       	and	r16, r26
    546a:	1b 23       	and	r17, r27
    546c:	60 e4       	ldi	r22, 0x40	; 64
    546e:	e6 16       	cp	r14, r22
    5470:	f1 04       	cpc	r15, r1
    5472:	01 05       	cpc	r16, r1
    5474:	11 05       	cpc	r17, r1
    5476:	61 f4       	brne	.+24     	; 0x5490 <__mulsf3+0x1d2>
    5478:	87 fd       	sbrc	r24, 7
    547a:	0a c0       	rjmp	.+20     	; 0x5490 <__mulsf3+0x1d2>
    547c:	21 15       	cp	r18, r1
    547e:	31 05       	cpc	r19, r1
    5480:	41 05       	cpc	r20, r1
    5482:	51 05       	cpc	r21, r1
    5484:	29 f0       	breq	.+10     	; 0x5490 <__mulsf3+0x1d2>
    5486:	80 5c       	subi	r24, 0xC0	; 192
    5488:	9f 4f       	sbci	r25, 0xFF	; 255
    548a:	af 4f       	sbci	r26, 0xFF	; 255
    548c:	bf 4f       	sbci	r27, 0xFF	; 255
    548e:	80 78       	andi	r24, 0x80	; 128
    5490:	8d 8f       	std	Y+29, r24	; 0x1d
    5492:	9e 8f       	std	Y+30, r25	; 0x1e
    5494:	af 8f       	std	Y+31, r26	; 0x1f
    5496:	b8 a3       	std	Y+32, r27	; 0x20
    5498:	83 e0       	ldi	r24, 0x03	; 3
    549a:	89 8f       	std	Y+25, r24	; 0x19
    549c:	ce 01       	movw	r24, r28
    549e:	49 96       	adiw	r24, 0x19	; 25
    54a0:	02 c0       	rjmp	.+4      	; 0x54a6 <__mulsf3+0x1e8>
    54a2:	83 ea       	ldi	r24, 0xA3	; 163
    54a4:	93 e0       	ldi	r25, 0x03	; 3
    54a6:	0e 94 59 2b 	call	0x56b2	; 0x56b2 <__pack_f>
    54aa:	a0 96       	adiw	r28, 0x20	; 32
    54ac:	e2 e1       	ldi	r30, 0x12	; 18
    54ae:	0c 94 20 2d 	jmp	0x5a40	; 0x5a40 <__epilogue_restores__>

000054b2 <__divsf3>:
    54b2:	a8 e1       	ldi	r26, 0x18	; 24
    54b4:	b0 e0       	ldi	r27, 0x00	; 0
    54b6:	ef e5       	ldi	r30, 0x5F	; 95
    54b8:	fa e2       	ldi	r31, 0x2A	; 42
    54ba:	0c 94 0c 2d 	jmp	0x5a18	; 0x5a18 <__prologue_saves__+0x10>
    54be:	69 83       	std	Y+1, r22	; 0x01
    54c0:	7a 83       	std	Y+2, r23	; 0x02
    54c2:	8b 83       	std	Y+3, r24	; 0x03
    54c4:	9c 83       	std	Y+4, r25	; 0x04
    54c6:	2d 83       	std	Y+5, r18	; 0x05
    54c8:	3e 83       	std	Y+6, r19	; 0x06
    54ca:	4f 83       	std	Y+7, r20	; 0x07
    54cc:	58 87       	std	Y+8, r21	; 0x08
    54ce:	8e 01       	movw	r16, r28
    54d0:	07 5f       	subi	r16, 0xF7	; 247
    54d2:	1f 4f       	sbci	r17, 0xFF	; 255
    54d4:	ce 01       	movw	r24, r28
    54d6:	01 96       	adiw	r24, 0x01	; 1
    54d8:	b8 01       	movw	r22, r16
    54da:	0e 94 27 2c 	call	0x584e	; 0x584e <__unpack_f>
    54de:	81 e1       	ldi	r24, 0x11	; 17
    54e0:	e8 2e       	mov	r14, r24
    54e2:	f1 2c       	mov	r15, r1
    54e4:	ec 0e       	add	r14, r28
    54e6:	fd 1e       	adc	r15, r29
    54e8:	ce 01       	movw	r24, r28
    54ea:	05 96       	adiw	r24, 0x05	; 5
    54ec:	b7 01       	movw	r22, r14
    54ee:	0e 94 27 2c 	call	0x584e	; 0x584e <__unpack_f>
    54f2:	99 85       	ldd	r25, Y+9	; 0x09
    54f4:	92 30       	cpi	r25, 0x02	; 2
    54f6:	08 f4       	brcc	.+2      	; 0x54fa <__divsf3+0x48>
    54f8:	83 c0       	rjmp	.+262    	; 0x5600 <__divsf3+0x14e>
    54fa:	89 89       	ldd	r24, Y+17	; 0x11
    54fc:	82 30       	cpi	r24, 0x02	; 2
    54fe:	08 f4       	brcc	.+2      	; 0x5502 <__divsf3+0x50>
    5500:	7b c0       	rjmp	.+246    	; 0x55f8 <__divsf3+0x146>
    5502:	2a 85       	ldd	r18, Y+10	; 0x0a
    5504:	3a 89       	ldd	r19, Y+18	; 0x12
    5506:	23 27       	eor	r18, r19
    5508:	2a 87       	std	Y+10, r18	; 0x0a
    550a:	94 30       	cpi	r25, 0x04	; 4
    550c:	11 f0       	breq	.+4      	; 0x5512 <__divsf3+0x60>
    550e:	92 30       	cpi	r25, 0x02	; 2
    5510:	21 f4       	brne	.+8      	; 0x551a <__divsf3+0x68>
    5512:	98 17       	cp	r25, r24
    5514:	09 f0       	breq	.+2      	; 0x5518 <__divsf3+0x66>
    5516:	6c c0       	rjmp	.+216    	; 0x55f0 <__divsf3+0x13e>
    5518:	71 c0       	rjmp	.+226    	; 0x55fc <__divsf3+0x14a>
    551a:	84 30       	cpi	r24, 0x04	; 4
    551c:	39 f4       	brne	.+14     	; 0x552c <__divsf3+0x7a>
    551e:	1d 86       	std	Y+13, r1	; 0x0d
    5520:	1e 86       	std	Y+14, r1	; 0x0e
    5522:	1f 86       	std	Y+15, r1	; 0x0f
    5524:	18 8a       	std	Y+16, r1	; 0x10
    5526:	1c 86       	std	Y+12, r1	; 0x0c
    5528:	1b 86       	std	Y+11, r1	; 0x0b
    552a:	6a c0       	rjmp	.+212    	; 0x5600 <__divsf3+0x14e>
    552c:	82 30       	cpi	r24, 0x02	; 2
    552e:	19 f4       	brne	.+6      	; 0x5536 <__divsf3+0x84>
    5530:	84 e0       	ldi	r24, 0x04	; 4
    5532:	89 87       	std	Y+9, r24	; 0x09
    5534:	65 c0       	rjmp	.+202    	; 0x5600 <__divsf3+0x14e>
    5536:	8b 85       	ldd	r24, Y+11	; 0x0b
    5538:	9c 85       	ldd	r25, Y+12	; 0x0c
    553a:	2b 89       	ldd	r18, Y+19	; 0x13
    553c:	3c 89       	ldd	r19, Y+20	; 0x14
    553e:	82 1b       	sub	r24, r18
    5540:	93 0b       	sbc	r25, r19
    5542:	9c 87       	std	Y+12, r25	; 0x0c
    5544:	8b 87       	std	Y+11, r24	; 0x0b
    5546:	2d 85       	ldd	r18, Y+13	; 0x0d
    5548:	3e 85       	ldd	r19, Y+14	; 0x0e
    554a:	4f 85       	ldd	r20, Y+15	; 0x0f
    554c:	58 89       	ldd	r21, Y+16	; 0x10
    554e:	ed 88       	ldd	r14, Y+21	; 0x15
    5550:	fe 88       	ldd	r15, Y+22	; 0x16
    5552:	0f 89       	ldd	r16, Y+23	; 0x17
    5554:	18 8d       	ldd	r17, Y+24	; 0x18
    5556:	2e 15       	cp	r18, r14
    5558:	3f 05       	cpc	r19, r15
    555a:	40 07       	cpc	r20, r16
    555c:	51 07       	cpc	r21, r17
    555e:	38 f4       	brcc	.+14     	; 0x556e <__divsf3+0xbc>
    5560:	22 0f       	add	r18, r18
    5562:	33 1f       	adc	r19, r19
    5564:	44 1f       	adc	r20, r20
    5566:	55 1f       	adc	r21, r21
    5568:	01 97       	sbiw	r24, 0x01	; 1
    556a:	9c 87       	std	Y+12, r25	; 0x0c
    556c:	8b 87       	std	Y+11, r24	; 0x0b
    556e:	6f e1       	ldi	r22, 0x1F	; 31
    5570:	70 e0       	ldi	r23, 0x00	; 0
    5572:	a1 2c       	mov	r10, r1
    5574:	b1 2c       	mov	r11, r1
    5576:	c1 2c       	mov	r12, r1
    5578:	a0 e4       	ldi	r26, 0x40	; 64
    557a:	da 2e       	mov	r13, r26
    557c:	80 e0       	ldi	r24, 0x00	; 0
    557e:	90 e0       	ldi	r25, 0x00	; 0
    5580:	dc 01       	movw	r26, r24
    5582:	2e 15       	cp	r18, r14
    5584:	3f 05       	cpc	r19, r15
    5586:	40 07       	cpc	r20, r16
    5588:	51 07       	cpc	r21, r17
    558a:	40 f0       	brcs	.+16     	; 0x559c <__divsf3+0xea>
    558c:	8a 29       	or	r24, r10
    558e:	9b 29       	or	r25, r11
    5590:	ac 29       	or	r26, r12
    5592:	bd 29       	or	r27, r13
    5594:	2e 19       	sub	r18, r14
    5596:	3f 09       	sbc	r19, r15
    5598:	40 0b       	sbc	r20, r16
    559a:	51 0b       	sbc	r21, r17
    559c:	d6 94       	lsr	r13
    559e:	c7 94       	ror	r12
    55a0:	b7 94       	ror	r11
    55a2:	a7 94       	ror	r10
    55a4:	22 0f       	add	r18, r18
    55a6:	33 1f       	adc	r19, r19
    55a8:	44 1f       	adc	r20, r20
    55aa:	55 1f       	adc	r21, r21
    55ac:	61 50       	subi	r22, 0x01	; 1
    55ae:	70 40       	sbci	r23, 0x00	; 0
    55b0:	41 f7       	brne	.-48     	; 0x5582 <__divsf3+0xd0>
    55b2:	6f e7       	ldi	r22, 0x7F	; 127
    55b4:	e6 2e       	mov	r14, r22
    55b6:	f1 2c       	mov	r15, r1
    55b8:	01 2d       	mov	r16, r1
    55ba:	11 2d       	mov	r17, r1
    55bc:	e8 22       	and	r14, r24
    55be:	f9 22       	and	r15, r25
    55c0:	0a 23       	and	r16, r26
    55c2:	1b 23       	and	r17, r27
    55c4:	60 e4       	ldi	r22, 0x40	; 64
    55c6:	e6 16       	cp	r14, r22
    55c8:	f1 04       	cpc	r15, r1
    55ca:	01 05       	cpc	r16, r1
    55cc:	11 05       	cpc	r17, r1
    55ce:	61 f4       	brne	.+24     	; 0x55e8 <__divsf3+0x136>
    55d0:	87 fd       	sbrc	r24, 7
    55d2:	0a c0       	rjmp	.+20     	; 0x55e8 <__divsf3+0x136>
    55d4:	21 15       	cp	r18, r1
    55d6:	31 05       	cpc	r19, r1
    55d8:	41 05       	cpc	r20, r1
    55da:	51 05       	cpc	r21, r1
    55dc:	29 f0       	breq	.+10     	; 0x55e8 <__divsf3+0x136>
    55de:	80 5c       	subi	r24, 0xC0	; 192
    55e0:	9f 4f       	sbci	r25, 0xFF	; 255
    55e2:	af 4f       	sbci	r26, 0xFF	; 255
    55e4:	bf 4f       	sbci	r27, 0xFF	; 255
    55e6:	80 78       	andi	r24, 0x80	; 128
    55e8:	8d 87       	std	Y+13, r24	; 0x0d
    55ea:	9e 87       	std	Y+14, r25	; 0x0e
    55ec:	af 87       	std	Y+15, r26	; 0x0f
    55ee:	b8 8b       	std	Y+16, r27	; 0x10
    55f0:	8e 01       	movw	r16, r28
    55f2:	07 5f       	subi	r16, 0xF7	; 247
    55f4:	1f 4f       	sbci	r17, 0xFF	; 255
    55f6:	04 c0       	rjmp	.+8      	; 0x5600 <__divsf3+0x14e>
    55f8:	87 01       	movw	r16, r14
    55fa:	02 c0       	rjmp	.+4      	; 0x5600 <__divsf3+0x14e>
    55fc:	03 ea       	ldi	r16, 0xA3	; 163
    55fe:	13 e0       	ldi	r17, 0x03	; 3
    5600:	c8 01       	movw	r24, r16
    5602:	0e 94 59 2b 	call	0x56b2	; 0x56b2 <__pack_f>
    5606:	68 96       	adiw	r28, 0x18	; 24
    5608:	ea e0       	ldi	r30, 0x0A	; 10
    560a:	0c 94 28 2d 	jmp	0x5a50	; 0x5a50 <__epilogue_restores__+0x10>

0000560e <__fixsfsi>:
    560e:	ac e0       	ldi	r26, 0x0C	; 12
    5610:	b0 e0       	ldi	r27, 0x00	; 0
    5612:	ed e0       	ldi	r30, 0x0D	; 13
    5614:	fb e2       	ldi	r31, 0x2B	; 43
    5616:	0c 94 14 2d 	jmp	0x5a28	; 0x5a28 <__prologue_saves__+0x20>
    561a:	69 83       	std	Y+1, r22	; 0x01
    561c:	7a 83       	std	Y+2, r23	; 0x02
    561e:	8b 83       	std	Y+3, r24	; 0x03
    5620:	9c 83       	std	Y+4, r25	; 0x04
    5622:	ce 01       	movw	r24, r28
    5624:	01 96       	adiw	r24, 0x01	; 1
    5626:	be 01       	movw	r22, r28
    5628:	6b 5f       	subi	r22, 0xFB	; 251
    562a:	7f 4f       	sbci	r23, 0xFF	; 255
    562c:	0e 94 27 2c 	call	0x584e	; 0x584e <__unpack_f>
    5630:	8d 81       	ldd	r24, Y+5	; 0x05
    5632:	82 30       	cpi	r24, 0x02	; 2
    5634:	81 f1       	breq	.+96     	; 0x5696 <__fixsfsi+0x88>
    5636:	82 30       	cpi	r24, 0x02	; 2
    5638:	70 f1       	brcs	.+92     	; 0x5696 <__fixsfsi+0x88>
    563a:	84 30       	cpi	r24, 0x04	; 4
    563c:	21 f4       	brne	.+8      	; 0x5646 <__fixsfsi+0x38>
    563e:	8e 81       	ldd	r24, Y+6	; 0x06
    5640:	88 23       	and	r24, r24
    5642:	69 f1       	breq	.+90     	; 0x569e <__fixsfsi+0x90>
    5644:	0a c0       	rjmp	.+20     	; 0x565a <__fixsfsi+0x4c>
    5646:	2f 81       	ldd	r18, Y+7	; 0x07
    5648:	38 85       	ldd	r19, Y+8	; 0x08
    564a:	37 fd       	sbrc	r19, 7
    564c:	24 c0       	rjmp	.+72     	; 0x5696 <__fixsfsi+0x88>
    564e:	6e 81       	ldd	r22, Y+6	; 0x06
    5650:	2f 31       	cpi	r18, 0x1F	; 31
    5652:	31 05       	cpc	r19, r1
    5654:	3c f0       	brlt	.+14     	; 0x5664 <__fixsfsi+0x56>
    5656:	66 23       	and	r22, r22
    5658:	11 f1       	breq	.+68     	; 0x569e <__fixsfsi+0x90>
    565a:	20 e0       	ldi	r18, 0x00	; 0
    565c:	30 e0       	ldi	r19, 0x00	; 0
    565e:	40 e0       	ldi	r20, 0x00	; 0
    5660:	50 e8       	ldi	r21, 0x80	; 128
    5662:	21 c0       	rjmp	.+66     	; 0x56a6 <__fixsfsi+0x98>
    5664:	8e e1       	ldi	r24, 0x1E	; 30
    5666:	90 e0       	ldi	r25, 0x00	; 0
    5668:	82 1b       	sub	r24, r18
    566a:	93 0b       	sbc	r25, r19
    566c:	29 85       	ldd	r18, Y+9	; 0x09
    566e:	3a 85       	ldd	r19, Y+10	; 0x0a
    5670:	4b 85       	ldd	r20, Y+11	; 0x0b
    5672:	5c 85       	ldd	r21, Y+12	; 0x0c
    5674:	04 c0       	rjmp	.+8      	; 0x567e <__fixsfsi+0x70>
    5676:	56 95       	lsr	r21
    5678:	47 95       	ror	r20
    567a:	37 95       	ror	r19
    567c:	27 95       	ror	r18
    567e:	8a 95       	dec	r24
    5680:	d2 f7       	brpl	.-12     	; 0x5676 <__fixsfsi+0x68>
    5682:	66 23       	and	r22, r22
    5684:	81 f0       	breq	.+32     	; 0x56a6 <__fixsfsi+0x98>
    5686:	50 95       	com	r21
    5688:	40 95       	com	r20
    568a:	30 95       	com	r19
    568c:	21 95       	neg	r18
    568e:	3f 4f       	sbci	r19, 0xFF	; 255
    5690:	4f 4f       	sbci	r20, 0xFF	; 255
    5692:	5f 4f       	sbci	r21, 0xFF	; 255
    5694:	08 c0       	rjmp	.+16     	; 0x56a6 <__fixsfsi+0x98>
    5696:	20 e0       	ldi	r18, 0x00	; 0
    5698:	30 e0       	ldi	r19, 0x00	; 0
    569a:	a9 01       	movw	r20, r18
    569c:	04 c0       	rjmp	.+8      	; 0x56a6 <__fixsfsi+0x98>
    569e:	2f ef       	ldi	r18, 0xFF	; 255
    56a0:	3f ef       	ldi	r19, 0xFF	; 255
    56a2:	4f ef       	ldi	r20, 0xFF	; 255
    56a4:	5f e7       	ldi	r21, 0x7F	; 127
    56a6:	b9 01       	movw	r22, r18
    56a8:	ca 01       	movw	r24, r20
    56aa:	2c 96       	adiw	r28, 0x0c	; 12
    56ac:	e2 e0       	ldi	r30, 0x02	; 2
    56ae:	0c 94 30 2d 	jmp	0x5a60	; 0x5a60 <__epilogue_restores__+0x20>

000056b2 <__pack_f>:
    56b2:	ef 92       	push	r14
    56b4:	ff 92       	push	r15
    56b6:	0f 93       	push	r16
    56b8:	1f 93       	push	r17
    56ba:	cf 93       	push	r28
    56bc:	df 93       	push	r29
    56be:	fc 01       	movw	r30, r24
    56c0:	24 81       	ldd	r18, Z+4	; 0x04
    56c2:	35 81       	ldd	r19, Z+5	; 0x05
    56c4:	46 81       	ldd	r20, Z+6	; 0x06
    56c6:	57 81       	ldd	r21, Z+7	; 0x07
    56c8:	61 81       	ldd	r22, Z+1	; 0x01
    56ca:	80 81       	ld	r24, Z
    56cc:	82 30       	cpi	r24, 0x02	; 2
    56ce:	20 f4       	brcc	.+8      	; 0x56d8 <__pack_f+0x26>
    56d0:	40 61       	ori	r20, 0x10	; 16
    56d2:	ef ef       	ldi	r30, 0xFF	; 255
    56d4:	f0 e0       	ldi	r31, 0x00	; 0
    56d6:	a3 c0       	rjmp	.+326    	; 0x581e <__pack_f+0x16c>
    56d8:	84 30       	cpi	r24, 0x04	; 4
    56da:	09 f4       	brne	.+2      	; 0x56de <__pack_f+0x2c>
    56dc:	9b c0       	rjmp	.+310    	; 0x5814 <__pack_f+0x162>
    56de:	82 30       	cpi	r24, 0x02	; 2
    56e0:	09 f4       	brne	.+2      	; 0x56e4 <__pack_f+0x32>
    56e2:	92 c0       	rjmp	.+292    	; 0x5808 <__pack_f+0x156>
    56e4:	21 15       	cp	r18, r1
    56e6:	31 05       	cpc	r19, r1
    56e8:	41 05       	cpc	r20, r1
    56ea:	51 05       	cpc	r21, r1
    56ec:	09 f4       	brne	.+2      	; 0x56f0 <__pack_f+0x3e>
    56ee:	8f c0       	rjmp	.+286    	; 0x580e <__pack_f+0x15c>
    56f0:	02 80       	ldd	r0, Z+2	; 0x02
    56f2:	f3 81       	ldd	r31, Z+3	; 0x03
    56f4:	e0 2d       	mov	r30, r0
    56f6:	8f ef       	ldi	r24, 0xFF	; 255
    56f8:	e2 38       	cpi	r30, 0x82	; 130
    56fa:	f8 07       	cpc	r31, r24
    56fc:	0c f0       	brlt	.+2      	; 0x5700 <__pack_f+0x4e>
    56fe:	5a c0       	rjmp	.+180    	; 0x57b4 <__pack_f+0x102>
    5700:	c2 e8       	ldi	r28, 0x82	; 130
    5702:	df ef       	ldi	r29, 0xFF	; 255
    5704:	ce 1b       	sub	r28, r30
    5706:	df 0b       	sbc	r29, r31
    5708:	ca 31       	cpi	r28, 0x1A	; 26
    570a:	d1 05       	cpc	r29, r1
    570c:	6c f5       	brge	.+90     	; 0x5768 <__pack_f+0xb6>
    570e:	79 01       	movw	r14, r18
    5710:	8a 01       	movw	r16, r20
    5712:	0c 2e       	mov	r0, r28
    5714:	04 c0       	rjmp	.+8      	; 0x571e <__pack_f+0x6c>
    5716:	16 95       	lsr	r17
    5718:	07 95       	ror	r16
    571a:	f7 94       	ror	r15
    571c:	e7 94       	ror	r14
    571e:	0a 94       	dec	r0
    5720:	d2 f7       	brpl	.-12     	; 0x5716 <__pack_f+0x64>
    5722:	81 e0       	ldi	r24, 0x01	; 1
    5724:	90 e0       	ldi	r25, 0x00	; 0
    5726:	a0 e0       	ldi	r26, 0x00	; 0
    5728:	b0 e0       	ldi	r27, 0x00	; 0
    572a:	0c 2e       	mov	r0, r28
    572c:	04 c0       	rjmp	.+8      	; 0x5736 <__pack_f+0x84>
    572e:	88 0f       	add	r24, r24
    5730:	99 1f       	adc	r25, r25
    5732:	aa 1f       	adc	r26, r26
    5734:	bb 1f       	adc	r27, r27
    5736:	0a 94       	dec	r0
    5738:	d2 f7       	brpl	.-12     	; 0x572e <__pack_f+0x7c>
    573a:	01 97       	sbiw	r24, 0x01	; 1
    573c:	a1 09       	sbc	r26, r1
    573e:	b1 09       	sbc	r27, r1
    5740:	82 23       	and	r24, r18
    5742:	93 23       	and	r25, r19
    5744:	a4 23       	and	r26, r20
    5746:	b5 23       	and	r27, r21
    5748:	21 e0       	ldi	r18, 0x01	; 1
    574a:	30 e0       	ldi	r19, 0x00	; 0
    574c:	40 e0       	ldi	r20, 0x00	; 0
    574e:	50 e0       	ldi	r21, 0x00	; 0
    5750:	00 97       	sbiw	r24, 0x00	; 0
    5752:	a1 05       	cpc	r26, r1
    5754:	b1 05       	cpc	r27, r1
    5756:	19 f4       	brne	.+6      	; 0x575e <__pack_f+0xac>
    5758:	20 e0       	ldi	r18, 0x00	; 0
    575a:	30 e0       	ldi	r19, 0x00	; 0
    575c:	a9 01       	movw	r20, r18
    575e:	2e 29       	or	r18, r14
    5760:	3f 29       	or	r19, r15
    5762:	40 2b       	or	r20, r16
    5764:	51 2b       	or	r21, r17
    5766:	03 c0       	rjmp	.+6      	; 0x576e <__pack_f+0xbc>
    5768:	20 e0       	ldi	r18, 0x00	; 0
    576a:	30 e0       	ldi	r19, 0x00	; 0
    576c:	a9 01       	movw	r20, r18
    576e:	da 01       	movw	r26, r20
    5770:	c9 01       	movw	r24, r18
    5772:	8f 77       	andi	r24, 0x7F	; 127
    5774:	90 70       	andi	r25, 0x00	; 0
    5776:	a0 70       	andi	r26, 0x00	; 0
    5778:	b0 70       	andi	r27, 0x00	; 0
    577a:	80 34       	cpi	r24, 0x40	; 64
    577c:	91 05       	cpc	r25, r1
    577e:	a1 05       	cpc	r26, r1
    5780:	b1 05       	cpc	r27, r1
    5782:	39 f4       	brne	.+14     	; 0x5792 <__pack_f+0xe0>
    5784:	27 ff       	sbrs	r18, 7
    5786:	09 c0       	rjmp	.+18     	; 0x579a <__pack_f+0xe8>
    5788:	20 5c       	subi	r18, 0xC0	; 192
    578a:	3f 4f       	sbci	r19, 0xFF	; 255
    578c:	4f 4f       	sbci	r20, 0xFF	; 255
    578e:	5f 4f       	sbci	r21, 0xFF	; 255
    5790:	04 c0       	rjmp	.+8      	; 0x579a <__pack_f+0xe8>
    5792:	21 5c       	subi	r18, 0xC1	; 193
    5794:	3f 4f       	sbci	r19, 0xFF	; 255
    5796:	4f 4f       	sbci	r20, 0xFF	; 255
    5798:	5f 4f       	sbci	r21, 0xFF	; 255
    579a:	e1 e0       	ldi	r30, 0x01	; 1
    579c:	f0 e0       	ldi	r31, 0x00	; 0
    579e:	20 30       	cpi	r18, 0x00	; 0
    57a0:	80 e0       	ldi	r24, 0x00	; 0
    57a2:	38 07       	cpc	r19, r24
    57a4:	80 e0       	ldi	r24, 0x00	; 0
    57a6:	48 07       	cpc	r20, r24
    57a8:	80 e4       	ldi	r24, 0x40	; 64
    57aa:	58 07       	cpc	r21, r24
    57ac:	28 f5       	brcc	.+74     	; 0x57f8 <__pack_f+0x146>
    57ae:	e0 e0       	ldi	r30, 0x00	; 0
    57b0:	f0 e0       	ldi	r31, 0x00	; 0
    57b2:	22 c0       	rjmp	.+68     	; 0x57f8 <__pack_f+0x146>
    57b4:	e0 38       	cpi	r30, 0x80	; 128
    57b6:	f1 05       	cpc	r31, r1
    57b8:	6c f5       	brge	.+90     	; 0x5814 <__pack_f+0x162>
    57ba:	e1 58       	subi	r30, 0x81	; 129
    57bc:	ff 4f       	sbci	r31, 0xFF	; 255
    57be:	da 01       	movw	r26, r20
    57c0:	c9 01       	movw	r24, r18
    57c2:	8f 77       	andi	r24, 0x7F	; 127
    57c4:	90 70       	andi	r25, 0x00	; 0
    57c6:	a0 70       	andi	r26, 0x00	; 0
    57c8:	b0 70       	andi	r27, 0x00	; 0
    57ca:	80 34       	cpi	r24, 0x40	; 64
    57cc:	91 05       	cpc	r25, r1
    57ce:	a1 05       	cpc	r26, r1
    57d0:	b1 05       	cpc	r27, r1
    57d2:	39 f4       	brne	.+14     	; 0x57e2 <__pack_f+0x130>
    57d4:	27 ff       	sbrs	r18, 7
    57d6:	09 c0       	rjmp	.+18     	; 0x57ea <__pack_f+0x138>
    57d8:	20 5c       	subi	r18, 0xC0	; 192
    57da:	3f 4f       	sbci	r19, 0xFF	; 255
    57dc:	4f 4f       	sbci	r20, 0xFF	; 255
    57de:	5f 4f       	sbci	r21, 0xFF	; 255
    57e0:	04 c0       	rjmp	.+8      	; 0x57ea <__pack_f+0x138>
    57e2:	21 5c       	subi	r18, 0xC1	; 193
    57e4:	3f 4f       	sbci	r19, 0xFF	; 255
    57e6:	4f 4f       	sbci	r20, 0xFF	; 255
    57e8:	5f 4f       	sbci	r21, 0xFF	; 255
    57ea:	57 ff       	sbrs	r21, 7
    57ec:	05 c0       	rjmp	.+10     	; 0x57f8 <__pack_f+0x146>
    57ee:	56 95       	lsr	r21
    57f0:	47 95       	ror	r20
    57f2:	37 95       	ror	r19
    57f4:	27 95       	ror	r18
    57f6:	31 96       	adiw	r30, 0x01	; 1
    57f8:	87 e0       	ldi	r24, 0x07	; 7
    57fa:	56 95       	lsr	r21
    57fc:	47 95       	ror	r20
    57fe:	37 95       	ror	r19
    5800:	27 95       	ror	r18
    5802:	8a 95       	dec	r24
    5804:	d1 f7       	brne	.-12     	; 0x57fa <__pack_f+0x148>
    5806:	0b c0       	rjmp	.+22     	; 0x581e <__pack_f+0x16c>
    5808:	e0 e0       	ldi	r30, 0x00	; 0
    580a:	f0 e0       	ldi	r31, 0x00	; 0
    580c:	05 c0       	rjmp	.+10     	; 0x5818 <__pack_f+0x166>
    580e:	e0 e0       	ldi	r30, 0x00	; 0
    5810:	f0 e0       	ldi	r31, 0x00	; 0
    5812:	05 c0       	rjmp	.+10     	; 0x581e <__pack_f+0x16c>
    5814:	ef ef       	ldi	r30, 0xFF	; 255
    5816:	f0 e0       	ldi	r31, 0x00	; 0
    5818:	20 e0       	ldi	r18, 0x00	; 0
    581a:	30 e0       	ldi	r19, 0x00	; 0
    581c:	a9 01       	movw	r20, r18
    581e:	8e 2f       	mov	r24, r30
    5820:	87 95       	ror	r24
    5822:	88 27       	eor	r24, r24
    5824:	87 95       	ror	r24
    5826:	94 2f       	mov	r25, r20
    5828:	9f 77       	andi	r25, 0x7F	; 127
    582a:	67 95       	ror	r22
    582c:	66 27       	eor	r22, r22
    582e:	67 95       	ror	r22
    5830:	e6 95       	lsr	r30
    5832:	e2 2e       	mov	r14, r18
    5834:	a9 2f       	mov	r26, r25
    5836:	a8 2b       	or	r26, r24
    5838:	fe 2f       	mov	r31, r30
    583a:	f6 2b       	or	r31, r22
    583c:	62 2f       	mov	r22, r18
    583e:	73 2f       	mov	r23, r19
    5840:	8a 2f       	mov	r24, r26
    5842:	9f 2f       	mov	r25, r31
    5844:	cd b7       	in	r28, 0x3d	; 61
    5846:	de b7       	in	r29, 0x3e	; 62
    5848:	e6 e0       	ldi	r30, 0x06	; 6
    584a:	0c 94 2c 2d 	jmp	0x5a58	; 0x5a58 <__epilogue_restores__+0x18>

0000584e <__unpack_f>:
    584e:	dc 01       	movw	r26, r24
    5850:	fb 01       	movw	r30, r22
    5852:	2c 91       	ld	r18, X
    5854:	11 96       	adiw	r26, 0x01	; 1
    5856:	3c 91       	ld	r19, X
    5858:	11 97       	sbiw	r26, 0x01	; 1
    585a:	12 96       	adiw	r26, 0x02	; 2
    585c:	8c 91       	ld	r24, X
    585e:	12 97       	sbiw	r26, 0x02	; 2
    5860:	48 2f       	mov	r20, r24
    5862:	4f 77       	andi	r20, 0x7F	; 127
    5864:	50 e0       	ldi	r21, 0x00	; 0
    5866:	98 2f       	mov	r25, r24
    5868:	99 1f       	adc	r25, r25
    586a:	99 27       	eor	r25, r25
    586c:	99 1f       	adc	r25, r25
    586e:	13 96       	adiw	r26, 0x03	; 3
    5870:	6c 91       	ld	r22, X
    5872:	13 97       	sbiw	r26, 0x03	; 3
    5874:	86 2f       	mov	r24, r22
    5876:	88 0f       	add	r24, r24
    5878:	89 2b       	or	r24, r25
    587a:	90 e0       	ldi	r25, 0x00	; 0
    587c:	66 1f       	adc	r22, r22
    587e:	66 27       	eor	r22, r22
    5880:	66 1f       	adc	r22, r22
    5882:	61 83       	std	Z+1, r22	; 0x01
    5884:	00 97       	sbiw	r24, 0x00	; 0
    5886:	39 f5       	brne	.+78     	; 0x58d6 <__unpack_f+0x88>
    5888:	21 15       	cp	r18, r1
    588a:	31 05       	cpc	r19, r1
    588c:	41 05       	cpc	r20, r1
    588e:	51 05       	cpc	r21, r1
    5890:	11 f4       	brne	.+4      	; 0x5896 <__unpack_f+0x48>
    5892:	82 e0       	ldi	r24, 0x02	; 2
    5894:	29 c0       	rjmp	.+82     	; 0x58e8 <__unpack_f+0x9a>
    5896:	82 e8       	ldi	r24, 0x82	; 130
    5898:	9f ef       	ldi	r25, 0xFF	; 255
    589a:	93 83       	std	Z+3, r25	; 0x03
    589c:	82 83       	std	Z+2, r24	; 0x02
    589e:	67 e0       	ldi	r22, 0x07	; 7
    58a0:	22 0f       	add	r18, r18
    58a2:	33 1f       	adc	r19, r19
    58a4:	44 1f       	adc	r20, r20
    58a6:	55 1f       	adc	r21, r21
    58a8:	6a 95       	dec	r22
    58aa:	d1 f7       	brne	.-12     	; 0x58a0 <__unpack_f+0x52>
    58ac:	83 e0       	ldi	r24, 0x03	; 3
    58ae:	80 83       	st	Z, r24
    58b0:	09 c0       	rjmp	.+18     	; 0x58c4 <__unpack_f+0x76>
    58b2:	22 0f       	add	r18, r18
    58b4:	33 1f       	adc	r19, r19
    58b6:	44 1f       	adc	r20, r20
    58b8:	55 1f       	adc	r21, r21
    58ba:	82 81       	ldd	r24, Z+2	; 0x02
    58bc:	93 81       	ldd	r25, Z+3	; 0x03
    58be:	01 97       	sbiw	r24, 0x01	; 1
    58c0:	93 83       	std	Z+3, r25	; 0x03
    58c2:	82 83       	std	Z+2, r24	; 0x02
    58c4:	20 30       	cpi	r18, 0x00	; 0
    58c6:	80 e0       	ldi	r24, 0x00	; 0
    58c8:	38 07       	cpc	r19, r24
    58ca:	80 e0       	ldi	r24, 0x00	; 0
    58cc:	48 07       	cpc	r20, r24
    58ce:	80 e4       	ldi	r24, 0x40	; 64
    58d0:	58 07       	cpc	r21, r24
    58d2:	78 f3       	brcs	.-34     	; 0x58b2 <__unpack_f+0x64>
    58d4:	20 c0       	rjmp	.+64     	; 0x5916 <__unpack_f+0xc8>
    58d6:	8f 3f       	cpi	r24, 0xFF	; 255
    58d8:	91 05       	cpc	r25, r1
    58da:	79 f4       	brne	.+30     	; 0x58fa <__unpack_f+0xac>
    58dc:	21 15       	cp	r18, r1
    58de:	31 05       	cpc	r19, r1
    58e0:	41 05       	cpc	r20, r1
    58e2:	51 05       	cpc	r21, r1
    58e4:	19 f4       	brne	.+6      	; 0x58ec <__unpack_f+0x9e>
    58e6:	84 e0       	ldi	r24, 0x04	; 4
    58e8:	80 83       	st	Z, r24
    58ea:	08 95       	ret
    58ec:	44 ff       	sbrs	r20, 4
    58ee:	03 c0       	rjmp	.+6      	; 0x58f6 <__unpack_f+0xa8>
    58f0:	81 e0       	ldi	r24, 0x01	; 1
    58f2:	80 83       	st	Z, r24
    58f4:	10 c0       	rjmp	.+32     	; 0x5916 <__unpack_f+0xc8>
    58f6:	10 82       	st	Z, r1
    58f8:	0e c0       	rjmp	.+28     	; 0x5916 <__unpack_f+0xc8>
    58fa:	8f 57       	subi	r24, 0x7F	; 127
    58fc:	90 40       	sbci	r25, 0x00	; 0
    58fe:	93 83       	std	Z+3, r25	; 0x03
    5900:	82 83       	std	Z+2, r24	; 0x02
    5902:	83 e0       	ldi	r24, 0x03	; 3
    5904:	80 83       	st	Z, r24
    5906:	87 e0       	ldi	r24, 0x07	; 7
    5908:	22 0f       	add	r18, r18
    590a:	33 1f       	adc	r19, r19
    590c:	44 1f       	adc	r20, r20
    590e:	55 1f       	adc	r21, r21
    5910:	8a 95       	dec	r24
    5912:	d1 f7       	brne	.-12     	; 0x5908 <__unpack_f+0xba>
    5914:	50 64       	ori	r21, 0x40	; 64
    5916:	24 83       	std	Z+4, r18	; 0x04
    5918:	35 83       	std	Z+5, r19	; 0x05
    591a:	46 83       	std	Z+6, r20	; 0x06
    591c:	57 83       	std	Z+7, r21	; 0x07
    591e:	08 95       	ret

00005920 <__mulsi3>:
    5920:	62 9f       	mul	r22, r18
    5922:	d0 01       	movw	r26, r0
    5924:	73 9f       	mul	r23, r19
    5926:	f0 01       	movw	r30, r0
    5928:	82 9f       	mul	r24, r18
    592a:	e0 0d       	add	r30, r0
    592c:	f1 1d       	adc	r31, r1
    592e:	64 9f       	mul	r22, r20
    5930:	e0 0d       	add	r30, r0
    5932:	f1 1d       	adc	r31, r1
    5934:	92 9f       	mul	r25, r18
    5936:	f0 0d       	add	r31, r0
    5938:	83 9f       	mul	r24, r19
    593a:	f0 0d       	add	r31, r0
    593c:	74 9f       	mul	r23, r20
    593e:	f0 0d       	add	r31, r0
    5940:	65 9f       	mul	r22, r21
    5942:	f0 0d       	add	r31, r0
    5944:	99 27       	eor	r25, r25
    5946:	72 9f       	mul	r23, r18
    5948:	b0 0d       	add	r27, r0
    594a:	e1 1d       	adc	r30, r1
    594c:	f9 1f       	adc	r31, r25
    594e:	63 9f       	mul	r22, r19
    5950:	b0 0d       	add	r27, r0
    5952:	e1 1d       	adc	r30, r1
    5954:	f9 1f       	adc	r31, r25
    5956:	bd 01       	movw	r22, r26
    5958:	cf 01       	movw	r24, r30
    595a:	11 24       	eor	r1, r1
    595c:	08 95       	ret

0000595e <__udivmodqi4>:
    595e:	99 1b       	sub	r25, r25
    5960:	79 e0       	ldi	r23, 0x09	; 9
    5962:	04 c0       	rjmp	.+8      	; 0x596c <__udivmodqi4_ep>

00005964 <__udivmodqi4_loop>:
    5964:	99 1f       	adc	r25, r25
    5966:	96 17       	cp	r25, r22
    5968:	08 f0       	brcs	.+2      	; 0x596c <__udivmodqi4_ep>
    596a:	96 1b       	sub	r25, r22

0000596c <__udivmodqi4_ep>:
    596c:	88 1f       	adc	r24, r24
    596e:	7a 95       	dec	r23
    5970:	c9 f7       	brne	.-14     	; 0x5964 <__udivmodqi4_loop>
    5972:	80 95       	com	r24
    5974:	08 95       	ret

00005976 <__udivmodhi4>:
    5976:	aa 1b       	sub	r26, r26
    5978:	bb 1b       	sub	r27, r27
    597a:	51 e1       	ldi	r21, 0x11	; 17
    597c:	07 c0       	rjmp	.+14     	; 0x598c <__udivmodhi4_ep>

0000597e <__udivmodhi4_loop>:
    597e:	aa 1f       	adc	r26, r26
    5980:	bb 1f       	adc	r27, r27
    5982:	a6 17       	cp	r26, r22
    5984:	b7 07       	cpc	r27, r23
    5986:	10 f0       	brcs	.+4      	; 0x598c <__udivmodhi4_ep>
    5988:	a6 1b       	sub	r26, r22
    598a:	b7 0b       	sbc	r27, r23

0000598c <__udivmodhi4_ep>:
    598c:	88 1f       	adc	r24, r24
    598e:	99 1f       	adc	r25, r25
    5990:	5a 95       	dec	r21
    5992:	a9 f7       	brne	.-22     	; 0x597e <__udivmodhi4_loop>
    5994:	80 95       	com	r24
    5996:	90 95       	com	r25
    5998:	bc 01       	movw	r22, r24
    599a:	cd 01       	movw	r24, r26
    599c:	08 95       	ret

0000599e <__divmodhi4>:
    599e:	97 fb       	bst	r25, 7
    59a0:	09 2e       	mov	r0, r25
    59a2:	07 26       	eor	r0, r23
    59a4:	0a d0       	rcall	.+20     	; 0x59ba <__divmodhi4_neg1>
    59a6:	77 fd       	sbrc	r23, 7
    59a8:	04 d0       	rcall	.+8      	; 0x59b2 <__divmodhi4_neg2>
    59aa:	e5 df       	rcall	.-54     	; 0x5976 <__udivmodhi4>
    59ac:	06 d0       	rcall	.+12     	; 0x59ba <__divmodhi4_neg1>
    59ae:	00 20       	and	r0, r0
    59b0:	1a f4       	brpl	.+6      	; 0x59b8 <__divmodhi4_exit>

000059b2 <__divmodhi4_neg2>:
    59b2:	70 95       	com	r23
    59b4:	61 95       	neg	r22
    59b6:	7f 4f       	sbci	r23, 0xFF	; 255

000059b8 <__divmodhi4_exit>:
    59b8:	08 95       	ret

000059ba <__divmodhi4_neg1>:
    59ba:	f6 f7       	brtc	.-4      	; 0x59b8 <__divmodhi4_exit>
    59bc:	90 95       	com	r25
    59be:	81 95       	neg	r24
    59c0:	9f 4f       	sbci	r25, 0xFF	; 255
    59c2:	08 95       	ret

000059c4 <__udivmodsi4>:
    59c4:	a1 e2       	ldi	r26, 0x21	; 33
    59c6:	1a 2e       	mov	r1, r26
    59c8:	aa 1b       	sub	r26, r26
    59ca:	bb 1b       	sub	r27, r27
    59cc:	fd 01       	movw	r30, r26
    59ce:	0d c0       	rjmp	.+26     	; 0x59ea <__udivmodsi4_ep>

000059d0 <__udivmodsi4_loop>:
    59d0:	aa 1f       	adc	r26, r26
    59d2:	bb 1f       	adc	r27, r27
    59d4:	ee 1f       	adc	r30, r30
    59d6:	ff 1f       	adc	r31, r31
    59d8:	a2 17       	cp	r26, r18
    59da:	b3 07       	cpc	r27, r19
    59dc:	e4 07       	cpc	r30, r20
    59de:	f5 07       	cpc	r31, r21
    59e0:	20 f0       	brcs	.+8      	; 0x59ea <__udivmodsi4_ep>
    59e2:	a2 1b       	sub	r26, r18
    59e4:	b3 0b       	sbc	r27, r19
    59e6:	e4 0b       	sbc	r30, r20
    59e8:	f5 0b       	sbc	r31, r21

000059ea <__udivmodsi4_ep>:
    59ea:	66 1f       	adc	r22, r22
    59ec:	77 1f       	adc	r23, r23
    59ee:	88 1f       	adc	r24, r24
    59f0:	99 1f       	adc	r25, r25
    59f2:	1a 94       	dec	r1
    59f4:	69 f7       	brne	.-38     	; 0x59d0 <__udivmodsi4_loop>
    59f6:	60 95       	com	r22
    59f8:	70 95       	com	r23
    59fa:	80 95       	com	r24
    59fc:	90 95       	com	r25
    59fe:	9b 01       	movw	r18, r22
    5a00:	ac 01       	movw	r20, r24
    5a02:	bd 01       	movw	r22, r26
    5a04:	cf 01       	movw	r24, r30
    5a06:	08 95       	ret

00005a08 <__prologue_saves__>:
    5a08:	2f 92       	push	r2
    5a0a:	3f 92       	push	r3
    5a0c:	4f 92       	push	r4
    5a0e:	5f 92       	push	r5
    5a10:	6f 92       	push	r6
    5a12:	7f 92       	push	r7
    5a14:	8f 92       	push	r8
    5a16:	9f 92       	push	r9
    5a18:	af 92       	push	r10
    5a1a:	bf 92       	push	r11
    5a1c:	cf 92       	push	r12
    5a1e:	df 92       	push	r13
    5a20:	ef 92       	push	r14
    5a22:	ff 92       	push	r15
    5a24:	0f 93       	push	r16
    5a26:	1f 93       	push	r17
    5a28:	cf 93       	push	r28
    5a2a:	df 93       	push	r29
    5a2c:	cd b7       	in	r28, 0x3d	; 61
    5a2e:	de b7       	in	r29, 0x3e	; 62
    5a30:	ca 1b       	sub	r28, r26
    5a32:	db 0b       	sbc	r29, r27
    5a34:	0f b6       	in	r0, 0x3f	; 63
    5a36:	f8 94       	cli
    5a38:	de bf       	out	0x3e, r29	; 62
    5a3a:	0f be       	out	0x3f, r0	; 63
    5a3c:	cd bf       	out	0x3d, r28	; 61
    5a3e:	09 94       	ijmp

00005a40 <__epilogue_restores__>:
    5a40:	2a 88       	ldd	r2, Y+18	; 0x12
    5a42:	39 88       	ldd	r3, Y+17	; 0x11
    5a44:	48 88       	ldd	r4, Y+16	; 0x10
    5a46:	5f 84       	ldd	r5, Y+15	; 0x0f
    5a48:	6e 84       	ldd	r6, Y+14	; 0x0e
    5a4a:	7d 84       	ldd	r7, Y+13	; 0x0d
    5a4c:	8c 84       	ldd	r8, Y+12	; 0x0c
    5a4e:	9b 84       	ldd	r9, Y+11	; 0x0b
    5a50:	aa 84       	ldd	r10, Y+10	; 0x0a
    5a52:	b9 84       	ldd	r11, Y+9	; 0x09
    5a54:	c8 84       	ldd	r12, Y+8	; 0x08
    5a56:	df 80       	ldd	r13, Y+7	; 0x07
    5a58:	ee 80       	ldd	r14, Y+6	; 0x06
    5a5a:	fd 80       	ldd	r15, Y+5	; 0x05
    5a5c:	0c 81       	ldd	r16, Y+4	; 0x04
    5a5e:	1b 81       	ldd	r17, Y+3	; 0x03
    5a60:	aa 81       	ldd	r26, Y+2	; 0x02
    5a62:	b9 81       	ldd	r27, Y+1	; 0x01
    5a64:	ce 0f       	add	r28, r30
    5a66:	d1 1d       	adc	r29, r1
    5a68:	0f b6       	in	r0, 0x3f	; 63
    5a6a:	f8 94       	cli
    5a6c:	de bf       	out	0x3e, r29	; 62
    5a6e:	0f be       	out	0x3f, r0	; 63
    5a70:	cd bf       	out	0x3d, r28	; 61
    5a72:	ed 01       	movw	r28, r26
    5a74:	08 95       	ret

00005a76 <__tablejump2__>:
    5a76:	ee 0f       	add	r30, r30
    5a78:	ff 1f       	adc	r31, r31

00005a7a <__tablejump__>:
    5a7a:	05 90       	lpm	r0, Z+
    5a7c:	f4 91       	lpm	r31, Z+
    5a7e:	e0 2d       	mov	r30, r0
    5a80:	09 94       	ijmp

00005a82 <atoi>:
    5a82:	fc 01       	movw	r30, r24
    5a84:	88 27       	eor	r24, r24
    5a86:	99 27       	eor	r25, r25
    5a88:	e8 94       	clt
    5a8a:	21 91       	ld	r18, Z+
    5a8c:	20 32       	cpi	r18, 0x20	; 32
    5a8e:	e9 f3       	breq	.-6      	; 0x5a8a <atoi+0x8>
    5a90:	29 30       	cpi	r18, 0x09	; 9
    5a92:	10 f0       	brcs	.+4      	; 0x5a98 <atoi+0x16>
    5a94:	2e 30       	cpi	r18, 0x0E	; 14
    5a96:	c8 f3       	brcs	.-14     	; 0x5a8a <atoi+0x8>
    5a98:	2b 32       	cpi	r18, 0x2B	; 43
    5a9a:	41 f0       	breq	.+16     	; 0x5aac <atoi+0x2a>
    5a9c:	2d 32       	cpi	r18, 0x2D	; 45
    5a9e:	39 f4       	brne	.+14     	; 0x5aae <atoi+0x2c>
    5aa0:	68 94       	set
    5aa2:	04 c0       	rjmp	.+8      	; 0x5aac <atoi+0x2a>
    5aa4:	0e 94 80 2d 	call	0x5b00	; 0x5b00 <__mulhi_const_10>
    5aa8:	82 0f       	add	r24, r18
    5aaa:	91 1d       	adc	r25, r1
    5aac:	21 91       	ld	r18, Z+
    5aae:	20 53       	subi	r18, 0x30	; 48
    5ab0:	2a 30       	cpi	r18, 0x0A	; 10
    5ab2:	c0 f3       	brcs	.-16     	; 0x5aa4 <atoi+0x22>
    5ab4:	1e f4       	brtc	.+6      	; 0x5abc <atoi+0x3a>
    5ab6:	90 95       	com	r25
    5ab8:	81 95       	neg	r24
    5aba:	9f 4f       	sbci	r25, 0xFF	; 255
    5abc:	08 95       	ret

00005abe <itoa>:
    5abe:	fb 01       	movw	r30, r22
    5ac0:	9f 01       	movw	r18, r30
    5ac2:	e8 94       	clt
    5ac4:	42 30       	cpi	r20, 0x02	; 2
    5ac6:	c4 f0       	brlt	.+48     	; 0x5af8 <itoa+0x3a>
    5ac8:	45 32       	cpi	r20, 0x25	; 37
    5aca:	b4 f4       	brge	.+44     	; 0x5af8 <itoa+0x3a>
    5acc:	4a 30       	cpi	r20, 0x0A	; 10
    5ace:	29 f4       	brne	.+10     	; 0x5ada <itoa+0x1c>
    5ad0:	97 fb       	bst	r25, 7
    5ad2:	1e f4       	brtc	.+6      	; 0x5ada <itoa+0x1c>
    5ad4:	90 95       	com	r25
    5ad6:	81 95       	neg	r24
    5ad8:	9f 4f       	sbci	r25, 0xFF	; 255
    5ada:	64 2f       	mov	r22, r20
    5adc:	77 27       	eor	r23, r23
    5ade:	0e 94 bb 2c 	call	0x5976	; 0x5976 <__udivmodhi4>
    5ae2:	80 5d       	subi	r24, 0xD0	; 208
    5ae4:	8a 33       	cpi	r24, 0x3A	; 58
    5ae6:	0c f0       	brlt	.+2      	; 0x5aea <itoa+0x2c>
    5ae8:	89 5d       	subi	r24, 0xD9	; 217
    5aea:	81 93       	st	Z+, r24
    5aec:	cb 01       	movw	r24, r22
    5aee:	00 97       	sbiw	r24, 0x00	; 0
    5af0:	a1 f7       	brne	.-24     	; 0x5ada <itoa+0x1c>
    5af2:	16 f4       	brtc	.+4      	; 0x5af8 <itoa+0x3a>
    5af4:	5d e2       	ldi	r21, 0x2D	; 45
    5af6:	51 93       	st	Z+, r21
    5af8:	10 82       	st	Z, r1
    5afa:	c9 01       	movw	r24, r18
    5afc:	0c 94 88 2d 	jmp	0x5b10	; 0x5b10 <strrev>

00005b00 <__mulhi_const_10>:
    5b00:	7a e0       	ldi	r23, 0x0A	; 10
    5b02:	97 9f       	mul	r25, r23
    5b04:	90 2d       	mov	r25, r0
    5b06:	87 9f       	mul	r24, r23
    5b08:	80 2d       	mov	r24, r0
    5b0a:	91 0d       	add	r25, r1
    5b0c:	11 24       	eor	r1, r1
    5b0e:	08 95       	ret

00005b10 <strrev>:
    5b10:	dc 01       	movw	r26, r24
    5b12:	fc 01       	movw	r30, r24
    5b14:	67 2f       	mov	r22, r23
    5b16:	71 91       	ld	r23, Z+
    5b18:	77 23       	and	r23, r23
    5b1a:	e1 f7       	brne	.-8      	; 0x5b14 <strrev+0x4>
    5b1c:	32 97       	sbiw	r30, 0x02	; 2
    5b1e:	04 c0       	rjmp	.+8      	; 0x5b28 <strrev+0x18>
    5b20:	7c 91       	ld	r23, X
    5b22:	6d 93       	st	X+, r22
    5b24:	70 83       	st	Z, r23
    5b26:	62 91       	ld	r22, -Z
    5b28:	ae 17       	cp	r26, r30
    5b2a:	bf 07       	cpc	r27, r31
    5b2c:	c8 f3       	brcs	.-14     	; 0x5b20 <strrev+0x10>
    5b2e:	08 95       	ret

00005b30 <_exit>:
    5b30:	f8 94       	cli

00005b32 <__stop_program>:
    5b32:	ff cf       	rjmp	.-2      	; 0x5b32 <__stop_program>
