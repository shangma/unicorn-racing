
node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00005c18  00005cac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005c18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000796  00800122  00800122  00005cce  2**0
                  ALLOC
  3 .stab         000018c0  00000000  00000000  00005cd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000152  00000000  00000000  00007590  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000076e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000005e6  00000000  00000000  00007862  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000434c  00000000  00000000  00007e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001238  00000000  00000000  0000c194  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000339c  00000000  00000000  0000d3cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000570  00000000  00000000  00010768  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000c3f  00000000  00000000  00010cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003ae1  00000000  00000000  00011917  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000150  00000000  00000000  000153f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__ctors_end>
       4:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
       8:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
       c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      10:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      14:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      18:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      1c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      20:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      24:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__vector_9>
      28:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      2c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      30:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      34:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      38:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      3c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      40:	0c 94 a0 25 	jmp	0x4b40	; 0x4b40 <__vector_16>
      44:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      48:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      4c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      50:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      54:	0c 94 75 25 	jmp	0x4aea	; 0x4aea <__vector_21>
      58:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      5c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      60:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      64:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      68:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      6c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      70:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      74:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      78:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      7c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      80:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      84:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      88:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      8c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      90:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      94:	67 1a       	sub	r6, r23
      96:	74 1a       	sub	r7, r20
      98:	d5 1a       	sub	r13, r21
      9a:	db 1a       	sub	r13, r27
      9c:	64 1a       	sub	r6, r20
      9e:	64 1a       	sub	r6, r20
      a0:	64 1a       	sub	r6, r20
      a2:	64 1a       	sub	r6, r20
      a4:	64 1a       	sub	r6, r20
      a6:	64 1a       	sub	r6, r20
      a8:	6e 1b       	sub	r22, r30
      aa:	73 1b       	sub	r23, r19
      ac:	75 1b       	sub	r23, r21
      ae:	82 1b       	sub	r24, r18
      b0:	9b 1b       	sub	r25, r27
      b2:	31 20       	and	r3, r1
      b4:	a1 20       	and	r10, r1
      b6:	17 21       	and	r17, r7
      b8:	69 21       	and	r22, r9
      ba:	a4 21       	and	r26, r4
      bc:	e4 21       	and	r30, r4
      be:	2b 22       	and	r2, r27
      c0:	c0 22       	and	r12, r16
      c2:	4f 23       	and	r20, r31
      c4:	2d 20       	and	r2, r13
      c6:	39 24       	eor	r3, r9

000000c8 <__c.2113>:
      c8:	57 72 69 74 65 20 65 72 72 6f 72 0d 0a 00           Write error...

000000d6 <__c.2108>:
      d6:	42 20 25 64 00                                      B %d.

000000db <__c.2100>:
      db:	42 75 66 66 65 72 20 66 75 6c 6c 20 65 72 72 6f     Buffer full erro
      eb:	72 0a 00                                            r..

000000ee <__c.2059>:
      ee:	69 3a 20 25 64 2c 20 48 6a 75 6c 35 3a 20 25 64     i: %d, Hjul5: %d
      fe:	20 48 6a 75 6c 36 3a 20 25 64 0a 00                  Hjul6: %d..

0000010a <__c.2057>:
     10a:	72 63 3d 25 64 0a 00                                rc=%d..

00000111 <__c.2055>:
     111:	4f 70 65 6e 69 6e 67 20 66 69 6c 65 20 25 73 0a     Opening file %s.
	...

00000122 <__c.2053>:
     122:	46 72 65 65 20 6c 6f 67 20 6e 72 20 25 64 0a 00     Free log nr %d..

00000132 <__c.2051>:
     132:	72 63 3d 25 64 0a 00                                rc=%d..

00000139 <__c.2049>:
     139:	6f 70 65 6e 20 64 69 72 20 0a 00                    open dir ..

00000144 <__c.2047>:
     144:	72 63 3d 25 64 0a 00                                rc=%d..

0000014b <__c.2045>:
     14b:	49 6e 69 74 69 61 6c 69 7a 65 20 6c 6f 67 69 63     Initialize logic
     15b:	61 6c 20 64 72 69 63 65 20 30 0a 00                 al drice 0..

00000167 <__c.2043>:
     167:	72 63 3d 25 64 0a 00                                rc=%d..

0000016e <__c.2041>:
     16e:	74 65 73 74 20 25 64 0a 00                          test %d..

00000177 <__c.2039>:
     177:	49 6e 69 74 69 61 6c 69 7a 65 20 64 69 73 6b 20     Initialize disk 
     187:	30 0a 00                                            0..

0000018a <__c.2037>:
     18a:	25 64 2d 25 64 2d 25 64 54 25 64 3a 25 64 3a 25     %d-%d-%dT%d:%d:%
     19a:	64 0a 00                                            d..

0000019d <__c.2035>:
     19d:	53 79 73 74 65 6d 20 73 74 61 72 74 65 74 0a 00     System startet..
	...

000001ae <__ctors_end>:
     1ae:	11 24       	eor	r1, r1
     1b0:	1f be       	out	0x3f, r1	; 63
     1b2:	cf ef       	ldi	r28, 0xFF	; 255
     1b4:	d0 e1       	ldi	r29, 0x10	; 16
     1b6:	de bf       	out	0x3e, r29	; 62
     1b8:	cd bf       	out	0x3d, r28	; 61

000001ba <__do_copy_data>:
     1ba:	11 e0       	ldi	r17, 0x01	; 1
     1bc:	a0 e0       	ldi	r26, 0x00	; 0
     1be:	b1 e0       	ldi	r27, 0x01	; 1
     1c0:	e8 e1       	ldi	r30, 0x18	; 24
     1c2:	fc e5       	ldi	r31, 0x5C	; 92
     1c4:	00 e0       	ldi	r16, 0x00	; 0
     1c6:	0b bf       	out	0x3b, r16	; 59
     1c8:	02 c0       	rjmp	.+4      	; 0x1ce <__do_copy_data+0x14>
     1ca:	07 90       	elpm	r0, Z+
     1cc:	0d 92       	st	X+, r0
     1ce:	a2 32       	cpi	r26, 0x22	; 34
     1d0:	b1 07       	cpc	r27, r17
     1d2:	d9 f7       	brne	.-10     	; 0x1ca <__do_copy_data+0x10>

000001d4 <__do_clear_bss>:
     1d4:	18 e0       	ldi	r17, 0x08	; 8
     1d6:	a2 e2       	ldi	r26, 0x22	; 34
     1d8:	b1 e0       	ldi	r27, 0x01	; 1
     1da:	01 c0       	rjmp	.+2      	; 0x1de <.do_clear_bss_start>

000001dc <.do_clear_bss_loop>:
     1dc:	1d 92       	st	X+, r1

000001de <.do_clear_bss_start>:
     1de:	a8 3b       	cpi	r26, 0xB8	; 184
     1e0:	b1 07       	cpc	r27, r17
     1e2:	e1 f7       	brne	.-8      	; 0x1dc <.do_clear_bss_loop>
     1e4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <main>
     1e8:	0c 94 0a 2e 	jmp	0x5c14	; 0x5c14 <_exit>

000001ec <__bad_interrupt>:
     1ec:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001f0 <can>:
}


/* eksempel kode til at vise hvordan end besked modtaget fra can skrives til sdcard */
void can(FIL *file)
{
     1f0:	a0 e0       	ldi	r26, 0x00	; 0
     1f2:	b0 e0       	ldi	r27, 0x00	; 0
     1f4:	ee ef       	ldi	r30, 0xFE	; 254
     1f6:	f0 e0       	ldi	r31, 0x00	; 0
     1f8:	0c 94 7e 2d 	jmp	0x5afc	; 0x5afc <__prologue_saves__+0x10>
     1fc:	6c 01       	movw	r12, r24
     1fe:	4e e9       	ldi	r20, 0x9E	; 158
     200:	e4 2e       	mov	r14, r20
     202:	48 e0       	ldi	r20, 0x08	; 8
     204:	f4 2e       	mov	r15, r20
     206:	0a e7       	ldi	r16, 0x7A	; 122
     208:	18 e0       	ldi	r17, 0x08	; 8
     20a:	c0 e0       	ldi	r28, 0x00	; 0
     20c:	d0 e0       	ldi	r29, 0x00	; 0
    int *e;

    for (j=0; j<num_of_response_mobs; j++){
        if (can_get_status(&response_msg[j]) == CAN_STATUS_COMPLETED){
            if (bufferindex >= data_buffer_num){
                xprintf(PSTR("Buffer full error\n"));
     20e:	3b ed       	ldi	r19, 0xDB	; 219
     210:	a3 2e       	mov	r10, r19
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	b3 2e       	mov	r11, r19
{
    U8 i,j;
    int *e;

    for (j=0; j<num_of_response_mobs; j++){
        if (can_get_status(&response_msg[j]) == CAN_STATUS_COMPLETED){
     216:	c7 01       	movw	r24, r14
     218:	0e 94 53 1f 	call	0x3ea6	; 0x3ea6 <can_get_status>
     21c:	88 23       	and	r24, r24
     21e:	69 f5       	brne	.+90     	; 0x27a <can+0x8a>
            if (bufferindex >= data_buffer_num){
     220:	90 91 2a 01 	lds	r25, 0x012A
     224:	92 30       	cpi	r25, 0x02	; 2
     226:	60 f0       	brcs	.+24     	; 0x240 <can+0x50>
                xprintf(PSTR("Buffer full error\n"));
     228:	00 d0       	rcall	.+0      	; 0x22a <can+0x3a>
     22a:	ad b7       	in	r26, 0x3d	; 61
     22c:	be b7       	in	r27, 0x3e	; 62
     22e:	12 96       	adiw	r26, 0x02	; 2
     230:	bc 92       	st	X, r11
     232:	ae 92       	st	-X, r10
     234:	11 97       	sbiw	r26, 0x01	; 1
     236:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <xprintf>
     23a:	0f 90       	pop	r0
     23c:	0f 90       	pop	r0
     23e:	1a c0       	rjmp	.+52     	; 0x274 <can+0x84>
     240:	de 01       	movw	r26, r28
     242:	23 e0       	ldi	r18, 0x03	; 3
     244:	aa 0f       	add	r26, r26
     246:	bb 1f       	adc	r27, r27
     248:	2a 95       	dec	r18
     24a:	e1 f7       	brne	.-8      	; 0x244 <can+0x54>
     24c:	af 58       	subi	r26, 0x8F	; 143
     24e:	b7 4f       	sbci	r27, 0xF7	; 247
     250:	e9 2f       	mov	r30, r25
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	83 e0       	ldi	r24, 0x03	; 3
     256:	ee 0f       	add	r30, r30
     258:	ff 1f       	adc	r31, r31
     25a:	8a 95       	dec	r24
     25c:	e1 f7       	brne	.-8      	; 0x256 <can+0x66>
     25e:	e2 57       	subi	r30, 0x72	; 114
     260:	f7 4f       	sbci	r31, 0xF7	; 247
            } else {
                for (i=0; i<9; i++) {
                        databuffer[bufferindex][i] = response_buffer[j][i];
     262:	8c 91       	ld	r24, X
     264:	81 93       	st	Z+, r24
                        response_buffer[j][i] = 0;
     266:	1d 92       	st	X+, r1
    for (j=0; j<num_of_response_mobs; j++){
        if (can_get_status(&response_msg[j]) == CAN_STATUS_COMPLETED){
            if (bufferindex >= data_buffer_num){
                xprintf(PSTR("Buffer full error\n"));
            } else {
                for (i=0; i<9; i++) {
     268:	a0 17       	cp	r26, r16
     26a:	b1 07       	cpc	r27, r17
     26c:	d1 f7       	brne	.-12     	; 0x262 <can+0x72>
                        databuffer[bufferindex][i] = response_buffer[j][i];
                        response_buffer[j][i] = 0;
                }
                bufferindex++;
     26e:	9f 5f       	subi	r25, 0xFF	; 255
     270:	90 93 2a 01 	sts	0x012A, r25
            }
            can_data_mob_setup(i);
     274:	89 e0       	ldi	r24, 0x09	; 9
     276:	0e 94 2c 25 	call	0x4a58	; 0x4a58 <can_data_mob_setup>
     27a:	21 96       	adiw	r28, 0x01	; 1
     27c:	ed e0       	ldi	r30, 0x0D	; 13
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	ee 0e       	add	r14, r30
     282:	ff 1e       	adc	r15, r31
     284:	08 5f       	subi	r16, 0xF8	; 248
     286:	1f 4f       	sbci	r17, 0xFF	; 255
void can(FIL *file)
{
    U8 i,j;
    int *e;

    for (j=0; j<num_of_response_mobs; j++){
     288:	c2 30       	cpi	r28, 0x02	; 2
     28a:	d1 05       	cpc	r29, r1
     28c:	21 f6       	brne	.-120    	; 0x216 <can+0x26>
     28e:	10 e0       	ldi	r17, 0x00	; 0
            can_data_mob_setup(i);
        }
    }

    for (i=0; i<bufferindex; i++) {         
        xprintf(PSTR("B %d"), i); 
     290:	c6 ed       	ldi	r28, 0xD6	; 214
     292:	d0 e0       	ldi	r29, 0x00	; 0
     294:	14 c0       	rjmp	.+40     	; 0x2be <can+0xce>
     296:	00 d0       	rcall	.+0      	; 0x298 <can+0xa8>
     298:	00 d0       	rcall	.+0      	; 0x29a <can+0xaa>
     29a:	ed b7       	in	r30, 0x3d	; 61
     29c:	fe b7       	in	r31, 0x3e	; 62
     29e:	31 96       	adiw	r30, 0x01	; 1
     2a0:	ad b7       	in	r26, 0x3d	; 61
     2a2:	be b7       	in	r27, 0x3e	; 62
     2a4:	12 96       	adiw	r26, 0x02	; 2
     2a6:	dc 93       	st	X, r29
     2a8:	ce 93       	st	-X, r28
     2aa:	11 97       	sbiw	r26, 0x01	; 1
     2ac:	12 83       	std	Z+2, r17	; 0x02
     2ae:	13 82       	std	Z+3, r1	; 0x03
     2b0:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <xprintf>
            }
            can_data_mob_setup(i);
        }
    }

    for (i=0; i<bufferindex; i++) {         
     2b4:	1f 5f       	subi	r17, 0xFF	; 255
     2b6:	0f 90       	pop	r0
     2b8:	0f 90       	pop	r0
     2ba:	0f 90       	pop	r0
     2bc:	0f 90       	pop	r0
     2be:	80 91 2a 01 	lds	r24, 0x012A
     2c2:	18 17       	cp	r17, r24
     2c4:	40 f3       	brcs	.-48     	; 0x296 <can+0xa6>
        xprintf(PSTR(", Data6: %03d"), databuffer[i][5]);
	    xprintf(PSTR(", Data7: %03d"), databuffer[i][6]);                
    	xprintf(PSTR(", Data8: %03d"), databuffer[i][7]);
	    xprintf(PSTR("\r\n"));*/
    }
    if (f_write(file, databuffer, 9*bufferindex, e) != 0)
     2c6:	49 e0       	ldi	r20, 0x09	; 9
     2c8:	84 9f       	mul	r24, r20
     2ca:	a0 01       	movw	r20, r0
     2cc:	11 24       	eor	r1, r1
     2ce:	c6 01       	movw	r24, r12
     2d0:	6e e8       	ldi	r22, 0x8E	; 142
     2d2:	78 e0       	ldi	r23, 0x08	; 8
     2d4:	20 e0       	ldi	r18, 0x00	; 0
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <f_write>
     2dc:	89 2b       	or	r24, r25
     2de:	59 f0       	breq	.+22     	; 0x2f6 <can+0x106>
            xprintf(PSTR("Write error\r\n"));
     2e0:	00 d0       	rcall	.+0      	; 0x2e2 <can+0xf2>
     2e2:	88 ec       	ldi	r24, 0xC8	; 200
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	ed b7       	in	r30, 0x3d	; 61
     2e8:	fe b7       	in	r31, 0x3e	; 62
     2ea:	92 83       	std	Z+2, r25	; 0x02
     2ec:	81 83       	std	Z+1, r24	; 0x01
     2ee:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <xprintf>
     2f2:	0f 90       	pop	r0
     2f4:	0f 90       	pop	r0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2f6:	8c e5       	ldi	r24, 0x5C	; 92
     2f8:	92 e1       	ldi	r25, 0x12	; 18
     2fa:	01 97       	sbiw	r24, 0x01	; 1
     2fc:	f1 f7       	brne	.-4      	; 0x2fa <can+0x10a>
    _delay_us(1700);
    bufferindex = 0;
     2fe:	10 92 2a 01 	sts	0x012A, r1
}
     302:	cd b7       	in	r28, 0x3d	; 61
     304:	de b7       	in	r29, 0x3e	; 62
     306:	ea e0       	ldi	r30, 0x0A	; 10
     308:	0c 94 9a 2d 	jmp	0x5b34	; 0x5b34 <__epilogue_restores__+0x10>

0000030c <get_fattime>:
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */
/* This is not required in read-only configuration.        */

DWORD get_fattime ()
{
     30c:	a8 e0       	ldi	r26, 0x08	; 8
     30e:	b0 e0       	ldi	r27, 0x00	; 0
     310:	ec e8       	ldi	r30, 0x8C	; 140
     312:	f1 e0       	ldi	r31, 0x01	; 1
     314:	0c 94 86 2d 	jmp	0x5b0c	; 0x5b0c <__prologue_saves__+0x20>
	RTC rtc;

	/* Get local time */
	rtc_gettime(&rtc);
     318:	ce 01       	movw	r24, r28
     31a:	01 96       	adiw	r24, 0x01	; 1
     31c:	0e 94 2e 1c 	call	0x385c	; 0x385c <rtc_gettime>
     320:	2c 81       	ldd	r18, Y+4	; 0x04
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	40 e0       	ldi	r20, 0x00	; 0
     326:	50 e0       	ldi	r21, 0x00	; 0
     328:	a9 01       	movw	r20, r18
     32a:	33 27       	eor	r19, r19
     32c:	22 27       	eor	r18, r18
     32e:	8b 81       	ldd	r24, Y+3	; 0x03
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	a0 e0       	ldi	r26, 0x00	; 0
     334:	b0 e0       	ldi	r27, 0x00	; 0
     336:	f5 e1       	ldi	r31, 0x15	; 21
     338:	88 0f       	add	r24, r24
     33a:	99 1f       	adc	r25, r25
     33c:	aa 1f       	adc	r26, r26
     33e:	bb 1f       	adc	r27, r27
     340:	fa 95       	dec	r31
     342:	d1 f7       	brne	.-12     	; 0x338 <get_fattime+0x2c>
     344:	28 2b       	or	r18, r24
     346:	39 2b       	or	r19, r25
     348:	4a 2b       	or	r20, r26
     34a:	5b 2b       	or	r21, r27
     34c:	8e 81       	ldd	r24, Y+6	; 0x06
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	a0 e0       	ldi	r26, 0x00	; 0
     352:	b0 e0       	ldi	r27, 0x00	; 0
     354:	eb e0       	ldi	r30, 0x0B	; 11
     356:	88 0f       	add	r24, r24
     358:	99 1f       	adc	r25, r25
     35a:	aa 1f       	adc	r26, r26
     35c:	bb 1f       	adc	r27, r27
     35e:	ea 95       	dec	r30
     360:	d1 f7       	brne	.-12     	; 0x356 <get_fattime+0x4a>
     362:	28 2b       	or	r18, r24
     364:	39 2b       	or	r19, r25
     366:	4a 2b       	or	r20, r26
     368:	5b 2b       	or	r21, r27
     36a:	8f 81       	ldd	r24, Y+7	; 0x07
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	a0 e0       	ldi	r26, 0x00	; 0
     370:	b0 e0       	ldi	r27, 0x00	; 0
     372:	75 e0       	ldi	r23, 0x05	; 5
     374:	88 0f       	add	r24, r24
     376:	99 1f       	adc	r25, r25
     378:	aa 1f       	adc	r26, r26
     37a:	bb 1f       	adc	r27, r27
     37c:	7a 95       	dec	r23
     37e:	d1 f7       	brne	.-12     	; 0x374 <get_fattime+0x68>
     380:	28 2b       	or	r18, r24
     382:	39 2b       	or	r19, r25
     384:	4a 2b       	or	r20, r26
     386:	5b 2b       	or	r21, r27
     388:	88 85       	ldd	r24, Y+8	; 0x08
     38a:	86 95       	lsr	r24
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	a0 e0       	ldi	r26, 0x00	; 0
     390:	b0 e0       	ldi	r27, 0x00	; 0
     392:	28 2b       	or	r18, r24
     394:	39 2b       	or	r19, r25
     396:	4a 2b       	or	r20, r26
     398:	5b 2b       	or	r21, r27
     39a:	89 81       	ldd	r24, Y+1	; 0x01
     39c:	9a 81       	ldd	r25, Y+2	; 0x02
     39e:	8c 5b       	subi	r24, 0xBC	; 188
     3a0:	97 40       	sbci	r25, 0x07	; 7
     3a2:	a0 e0       	ldi	r26, 0x00	; 0
     3a4:	b0 e0       	ldi	r27, 0x00	; 0
     3a6:	69 e1       	ldi	r22, 0x19	; 25
     3a8:	88 0f       	add	r24, r24
     3aa:	99 1f       	adc	r25, r25
     3ac:	aa 1f       	adc	r26, r26
     3ae:	bb 1f       	adc	r27, r27
     3b0:	6a 95       	dec	r22
     3b2:	d1 f7       	brne	.-12     	; 0x3a8 <get_fattime+0x9c>
     3b4:	28 2b       	or	r18, r24
     3b6:	39 2b       	or	r19, r25
     3b8:	4a 2b       	or	r20, r26
     3ba:	5b 2b       	or	r21, r27
			| ((DWORD)rtc.month << 21)
			| ((DWORD)rtc.mday << 16)
			| ((DWORD)rtc.hour << 11)
			| ((DWORD)rtc.min << 5)
			| ((DWORD)rtc.sec >> 1);
}
     3bc:	b9 01       	movw	r22, r18
     3be:	ca 01       	movw	r24, r20
     3c0:	28 96       	adiw	r28, 0x08	; 8
     3c2:	e2 e0       	ldi	r30, 0x02	; 2
     3c4:	0c 94 a2 2d 	jmp	0x5b44	; 0x5b44 <__epilogue_restores__+0x20>

000003c8 <main>:
}

/*-----------------------------------------------------------------------*/
/* Main                                                                  */
int main (void)
{
     3c8:	ad e5       	ldi	r26, 0x5D	; 93
     3ca:	b0 e0       	ldi	r27, 0x00	; 0
     3cc:	ea ee       	ldi	r30, 0xEA	; 234
     3ce:	f1 e0       	ldi	r31, 0x01	; 1
     3d0:	0c 94 7e 2d 	jmp	0x5afc	; 0x5afc <__prologue_saves__+0x10>
	int i;
	// Recieve buffer
	U8 rpm_response_buffer[8];
	st_cmd_t rpm_msg;
	
	TWI_init();	/* Init TWI interface */
     3d4:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <TWI_init>

static
void IoInit ()
{
	/* Timer2 used for filesystem functions */
	OCR2A = 90-1;      // Timer2: 100Hz interval (OC2)
     3d8:	89 e5       	ldi	r24, 0x59	; 89
     3da:	80 93 b3 00 	sts	0x00B3, r24
	TCCR2A = 0b00001101;
     3de:	8d e0       	ldi	r24, 0x0D	; 13
     3e0:	80 93 b0 00 	sts	0x00B0, r24
	TIMSK2 = 0b00000010;   // Enable TC2.oc interrupt
     3e4:	82 e0       	ldi	r24, 0x02	; 2
     3e6:	80 93 70 00 	sts	0x0070, r24

	/* Timer0 bruges til at sende data req til ECU */
	OCR0A = 100;			// Sæt start værdi
     3ea:	84 e6       	ldi	r24, 0x64	; 100
     3ec:	87 bd       	out	0x27, r24	; 39
	TCCR0A |= 1<<CS02 | 1<<CS00;    // prescaler til 1024
     3ee:	84 b5       	in	r24, 0x24	; 36
     3f0:	85 60       	ori	r24, 0x05	; 5
     3f2:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= 1<<OCIE0A; 		// Slår timer compare match interrupt til
     3f4:	80 91 6e 00 	lds	r24, 0x006E
     3f8:	82 60       	ori	r24, 0x02	; 2
     3fa:	80 93 6e 00 	sts	0x006E, r24

	rtc_init();         // Initialize RTC
     3fe:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <rtc_init>
	can_init(0);		/* Initialize can controllor */
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <can_init>
	uart_init();		/* Initialize uart 0 and 1 for ecu and xbee */
     408:	0e 94 2c 04 	call	0x858	; 0x858 <uart_init>
	
	TWI_init();	/* Init TWI interface */
	IoInit();

	/* Join xitoa module to uart module */
	xfunc_out = (void (*)(char))uart_put;		/* xprintf writes to uart connected to the xbee */
     40c:	8b e5       	ldi	r24, 0x5B	; 91
     40e:	94 e0       	ldi	r25, 0x04	; 4
     410:	90 93 32 01 	sts	0x0132, r25
     414:	80 93 31 01 	sts	0x0131, r24
     418:	88 e8       	ldi	r24, 0x88	; 136
     41a:	93 e1       	ldi	r25, 0x13	; 19
     41c:	24 e1       	ldi	r18, 0x14	; 20
     41e:	31 e0       	ldi	r19, 0x01	; 1
     420:	f9 01       	movw	r30, r18
     422:	31 97       	sbiw	r30, 0x01	; 1
     424:	f1 f7       	brne	.-4      	; 0x422 <main+0x5a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     426:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     428:	d9 f7       	brne	.-10     	; 0x420 <main+0x58>

	_delay_ms(500);
	xprintf(PSTR("System startet\n"));
     42a:	00 d0       	rcall	.+0      	; 0x42c <main+0x64>
     42c:	8d e9       	ldi	r24, 0x9D	; 157
     42e:	91 e0       	ldi	r25, 0x01	; 1
     430:	ad b7       	in	r26, 0x3d	; 61
     432:	be b7       	in	r27, 0x3e	; 62
     434:	12 96       	adiw	r26, 0x02	; 2
     436:	9c 93       	st	X, r25
     438:	8e 93       	st	-X, r24
     43a:	11 97       	sbiw	r26, 0x01	; 1
     43c:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <xprintf>

	res = rtc_gettime(&rtc);
     440:	0f 90       	pop	r0
     442:	0f 90       	pop	r0
     444:	ce 01       	movw	r24, r28
     446:	01 96       	adiw	r24, 0x01	; 1
     448:	0e 94 2e 1c 	call	0x385c	; 0x385c <rtc_gettime>
	xprintf(PSTR("%d-%d-%dT%d:%d:%d\n"), rtc.year, rtc.month, rtc.mday, rtc.hour, rtc.min, rtc.sec);
     44c:	ed b7       	in	r30, 0x3d	; 61
     44e:	fe b7       	in	r31, 0x3e	; 62
     450:	3e 97       	sbiw	r30, 0x0e	; 14
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	f8 94       	cli
     456:	fe bf       	out	0x3e, r31	; 62
     458:	0f be       	out	0x3f, r0	; 63
     45a:	ed bf       	out	0x3d, r30	; 61
     45c:	31 96       	adiw	r30, 0x01	; 1
     45e:	8a e8       	ldi	r24, 0x8A	; 138
     460:	91 e0       	ldi	r25, 0x01	; 1
     462:	ad b7       	in	r26, 0x3d	; 61
     464:	be b7       	in	r27, 0x3e	; 62
     466:	12 96       	adiw	r26, 0x02	; 2
     468:	9c 93       	st	X, r25
     46a:	8e 93       	st	-X, r24
     46c:	11 97       	sbiw	r26, 0x01	; 1
     46e:	89 81       	ldd	r24, Y+1	; 0x01
     470:	9a 81       	ldd	r25, Y+2	; 0x02
     472:	93 83       	std	Z+3, r25	; 0x03
     474:	82 83       	std	Z+2, r24	; 0x02
     476:	8b 81       	ldd	r24, Y+3	; 0x03
     478:	84 83       	std	Z+4, r24	; 0x04
     47a:	15 82       	std	Z+5, r1	; 0x05
     47c:	8c 81       	ldd	r24, Y+4	; 0x04
     47e:	86 83       	std	Z+6, r24	; 0x06
     480:	17 82       	std	Z+7, r1	; 0x07
     482:	8e 81       	ldd	r24, Y+6	; 0x06
     484:	80 87       	std	Z+8, r24	; 0x08
     486:	11 86       	std	Z+9, r1	; 0x09
     488:	8f 81       	ldd	r24, Y+7	; 0x07
     48a:	82 87       	std	Z+10, r24	; 0x0a
     48c:	13 86       	std	Z+11, r1	; 0x0b
     48e:	88 85       	ldd	r24, Y+8	; 0x08
     490:	84 87       	std	Z+12, r24	; 0x0c
     492:	15 86       	std	Z+13, r1	; 0x0d
     494:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <xprintf>

	xprintf(PSTR("Initialize disk 0\n"));
     498:	ed b7       	in	r30, 0x3d	; 61
     49a:	fe b7       	in	r31, 0x3e	; 62
     49c:	3c 96       	adiw	r30, 0x0c	; 12
     49e:	0f b6       	in	r0, 0x3f	; 63
     4a0:	f8 94       	cli
     4a2:	fe bf       	out	0x3e, r31	; 62
     4a4:	0f be       	out	0x3f, r0	; 63
     4a6:	ed bf       	out	0x3d, r30	; 61
     4a8:	87 e7       	ldi	r24, 0x77	; 119
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	92 83       	std	Z+2, r25	; 0x02
     4ae:	81 83       	std	Z+1, r24	; 0x01
     4b0:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <xprintf>
	xprintf(PSTR("test %d\n"), ECUObjects[0].length);
     4b4:	00 d0       	rcall	.+0      	; 0x4b6 <main+0xee>
     4b6:	8e e6       	ldi	r24, 0x6E	; 110
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	ad b7       	in	r26, 0x3d	; 61
     4bc:	be b7       	in	r27, 0x3e	; 62
     4be:	12 96       	adiw	r26, 0x02	; 2
     4c0:	9c 93       	st	X, r25
     4c2:	8e 93       	st	-X, r24
     4c4:	11 97       	sbiw	r26, 0x01	; 1
     4c6:	82 e0       	ldi	r24, 0x02	; 2
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	14 96       	adiw	r26, 0x04	; 4
     4cc:	9c 93       	st	X, r25
     4ce:	8e 93       	st	-X, r24
     4d0:	13 97       	sbiw	r26, 0x03	; 3
     4d2:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <xprintf>
	xprintf(PSTR("rc=%d\n"), (WORD)disk_initialize(0));		/* initialize filesystem */
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
     4da:	0f 90       	pop	r0
     4dc:	0f 90       	pop	r0
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	0e 94 89 18 	call	0x3112	; 0x3112 <disk_initialize>
     4e4:	00 d0       	rcall	.+0      	; 0x4e6 <main+0x11e>
     4e6:	00 d0       	rcall	.+0      	; 0x4e8 <main+0x120>
     4e8:	ed b7       	in	r30, 0x3d	; 61
     4ea:	fe b7       	in	r31, 0x3e	; 62
     4ec:	31 96       	adiw	r30, 0x01	; 1
     4ee:	27 e6       	ldi	r18, 0x67	; 103
     4f0:	31 e0       	ldi	r19, 0x01	; 1
     4f2:	ad b7       	in	r26, 0x3d	; 61
     4f4:	be b7       	in	r27, 0x3e	; 62
     4f6:	12 96       	adiw	r26, 0x02	; 2
     4f8:	3c 93       	st	X, r19
     4fa:	2e 93       	st	-X, r18
     4fc:	11 97       	sbiw	r26, 0x01	; 1
     4fe:	82 83       	std	Z+2, r24	; 0x02
     500:	13 82       	std	Z+3, r1	; 0x03
     502:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <xprintf>
	xprintf(PSTR("Initialize logical drice 0\n"));	
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	8b e4       	ldi	r24, 0x4B	; 75
     50c:	91 e0       	ldi	r25, 0x01	; 1
     50e:	ed b7       	in	r30, 0x3d	; 61
     510:	fe b7       	in	r31, 0x3e	; 62
     512:	92 83       	std	Z+2, r25	; 0x02
     514:	81 83       	std	Z+1, r24	; 0x01
     516:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <xprintf>
	xprintf(PSTR("rc=%d\n"), (WORD)f_mount(0, &Fatfs[0]));		/* mount filesystem */
     51a:	0f 90       	pop	r0
     51c:	0f 90       	pop	r0
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	63 e3       	ldi	r22, 0x33	; 51
     522:	71 e0       	ldi	r23, 0x01	; 1
     524:	0e 94 c0 04 	call	0x980	; 0x980 <f_mount>
     528:	00 d0       	rcall	.+0      	; 0x52a <main+0x162>
     52a:	00 d0       	rcall	.+0      	; 0x52c <main+0x164>
     52c:	24 e4       	ldi	r18, 0x44	; 68
     52e:	31 e0       	ldi	r19, 0x01	; 1
     530:	ad b7       	in	r26, 0x3d	; 61
     532:	be b7       	in	r27, 0x3e	; 62
     534:	12 96       	adiw	r26, 0x02	; 2
     536:	3c 93       	st	X, r19
     538:	2e 93       	st	-X, r18
     53a:	11 97       	sbiw	r26, 0x01	; 1
     53c:	14 96       	adiw	r26, 0x04	; 4
     53e:	9c 93       	st	X, r25
     540:	8e 93       	st	-X, r24
     542:	13 97       	sbiw	r26, 0x03	; 3
     544:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <xprintf>
	xprintf(PSTR("open dir \n")); 
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	89 e3       	ldi	r24, 0x39	; 57
     54e:	91 e0       	ldi	r25, 0x01	; 1
     550:	ed b7       	in	r30, 0x3d	; 61
     552:	fe b7       	in	r31, 0x3e	; 62
     554:	92 83       	std	Z+2, r25	; 0x02
     556:	81 83       	std	Z+1, r24	; 0x01
     558:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <xprintf>
	xprintf(PSTR("rc=%d\n"), f_opendir(&dir, "0:"));	/* open root dir on fs */
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	8e 01       	movw	r16, r28
     562:	08 5d       	subi	r16, 0xD8	; 216
     564:	1f 4f       	sbci	r17, 0xFF	; 255
     566:	c8 01       	movw	r24, r16
     568:	60 e0       	ldi	r22, 0x00	; 0
     56a:	71 e0       	ldi	r23, 0x01	; 1
     56c:	0e 94 d5 14 	call	0x29aa	; 0x29aa <f_opendir>
     570:	00 d0       	rcall	.+0      	; 0x572 <main+0x1aa>
     572:	00 d0       	rcall	.+0      	; 0x574 <main+0x1ac>
     574:	22 e3       	ldi	r18, 0x32	; 50
     576:	31 e0       	ldi	r19, 0x01	; 1
     578:	ad b7       	in	r26, 0x3d	; 61
     57a:	be b7       	in	r27, 0x3e	; 62
     57c:	12 96       	adiw	r26, 0x02	; 2
     57e:	3c 93       	st	X, r19
     580:	2e 93       	st	-X, r18
     582:	11 97       	sbiw	r26, 0x01	; 1
     584:	14 96       	adiw	r26, 0x04	; 4
     586:	9c 93       	st	X, r25
     588:	8e 93       	st	-X, r24
     58a:	13 97       	sbiw	r26, 0x03	; 3
     58c:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <xprintf>
	freelognumber = get_free_log_number(&dir);		/* Get lowest free log number */
     590:	0f 90       	pop	r0
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	c8 01       	movw	r24, r16
     59a:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <get_free_log_number>
     59e:	7c 01       	movw	r14, r24
	xprintf(PSTR("Free log nr %d\n"), freelognumber);
     5a0:	00 d0       	rcall	.+0      	; 0x5a2 <main+0x1da>
     5a2:	00 d0       	rcall	.+0      	; 0x5a4 <main+0x1dc>
     5a4:	82 e2       	ldi	r24, 0x22	; 34
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	ed b7       	in	r30, 0x3d	; 61
     5aa:	fe b7       	in	r31, 0x3e	; 62
     5ac:	92 83       	std	Z+2, r25	; 0x02
     5ae:	81 83       	std	Z+1, r24	; 0x01
     5b0:	f4 82       	std	Z+4, r15	; 0x04
     5b2:	e3 82       	std	Z+3, r14	; 0x03
     5b4:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <xprintf>
	itoa(freelognumber, filename, 10);			/* Convert to string for use in f_open() */
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	0f 90       	pop	r0
     5be:	0f 90       	pop	r0
     5c0:	8e 01       	movw	r16, r28
     5c2:	0f 5e       	subi	r16, 0xEF	; 239
     5c4:	1f 4f       	sbci	r17, 0xFF	; 255
     5c6:	c7 01       	movw	r24, r14
     5c8:	b8 01       	movw	r22, r16
     5ca:	4a e0       	ldi	r20, 0x0A	; 10
     5cc:	50 e0       	ldi	r21, 0x00	; 0
     5ce:	0e 94 d1 2d 	call	0x5ba2	; 0x5ba2 <itoa>
	xprintf(PSTR("Opening file %s\n"), filename);
     5d2:	00 d0       	rcall	.+0      	; 0x5d4 <main+0x20c>
     5d4:	00 d0       	rcall	.+0      	; 0x5d6 <main+0x20e>
     5d6:	81 e1       	ldi	r24, 0x11	; 17
     5d8:	91 e0       	ldi	r25, 0x01	; 1
     5da:	ad b7       	in	r26, 0x3d	; 61
     5dc:	be b7       	in	r27, 0x3e	; 62
     5de:	12 96       	adiw	r26, 0x02	; 2
     5e0:	9c 93       	st	X, r25
     5e2:	8e 93       	st	-X, r24
     5e4:	11 97       	sbiw	r26, 0x01	; 1
     5e6:	14 96       	adiw	r26, 0x04	; 4
     5e8:	1c 93       	st	X, r17
     5ea:	0e 93       	st	-X, r16
     5ec:	13 97       	sbiw	r26, 0x03	; 3
     5ee:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <xprintf>
	xprintf(PSTR("rc=%d\n"), (WORD)f_open(&file1, filename, FA_CREATE_NEW | FA_WRITE));	/* Create new logfile for writing */
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
     5fa:	2e e3       	ldi	r18, 0x3E	; 62
     5fc:	e2 2e       	mov	r14, r18
     5fe:	f1 2c       	mov	r15, r1
     600:	ec 0e       	add	r14, r28
     602:	fd 1e       	adc	r15, r29
     604:	c7 01       	movw	r24, r14
     606:	b8 01       	movw	r22, r16
     608:	46 e0       	ldi	r20, 0x06	; 6
     60a:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <f_open>
     60e:	00 d0       	rcall	.+0      	; 0x610 <main+0x248>
     610:	00 d0       	rcall	.+0      	; 0x612 <main+0x24a>
     612:	2a e0       	ldi	r18, 0x0A	; 10
     614:	31 e0       	ldi	r19, 0x01	; 1
     616:	ed b7       	in	r30, 0x3d	; 61
     618:	fe b7       	in	r31, 0x3e	; 62
     61a:	32 83       	std	Z+2, r19	; 0x02
     61c:	21 83       	std	Z+1, r18	; 0x01
     61e:	94 83       	std	Z+4, r25	; 0x04
     620:	83 83       	std	Z+3, r24	; 0x03
     622:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <xprintf>
	f_sync(&file1);			/* Sync filesystem to write changes to disk */
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
     62e:	c7 01       	movw	r24, r14
     630:	0e 94 52 12 	call	0x24a4	; 0x24a4 <f_sync>
     634:	80 e1       	ldi	r24, 0x10	; 16
     636:	97 e2       	ldi	r25, 0x27	; 39
     638:	24 e1       	ldi	r18, 0x14	; 20
     63a:	31 e0       	ldi	r19, 0x01	; 1
     63c:	f9 01       	movw	r30, r18
     63e:	31 97       	sbiw	r30, 0x01	; 1
     640:	f1 f7       	brne	.-4      	; 0x63e <main+0x276>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     642:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     644:	d9 f7       	brne	.-10     	; 0x63c <main+0x274>
	_delay_ms(1000);

	/*
	 *	Kode til hurtig test af can 
	 */
	rpm_msg.pt_data = rpm_response_buffer;
     646:	ce 01       	movw	r24, r28
     648:	09 96       	adiw	r24, 0x09	; 9
     64a:	9c a3       	std	Y+36, r25	; 0x24
     64c:	8b a3       	std	Y+35, r24	; 0x23
	rpm_msg.status = 0;
     64e:	1d a2       	std	Y+37, r1	; 0x25

	can_update_rx_msg(&rpm_msg, rpm_msgid, 8);
     650:	ce 01       	movw	r24, r28
     652:	4b 96       	adiw	r24, 0x1b	; 27
     654:	65 e8       	ldi	r22, 0x85	; 133
     656:	48 e0       	ldi	r20, 0x08	; 8
     658:	0e 94 18 25 	call	0x4a30	; 0x4a30 <can_update_rx_msg>

	sei();				/* Enable interrupt */
     65c:	78 94       	sei

	while(1) {
		// check for rpm_msg
		if (can_get_status(&rpm_msg) == CAN_STATUS_COMPLETED) {
     65e:	8e 01       	movw	r16, r28
     660:	05 5e       	subi	r16, 0xE5	; 229
     662:	1f 4f       	sbci	r17, 0xFF	; 255
			xprintf(PSTR("i: %d, Hjul5: %d Hjul6: %d\n"), rpm_response_buffer[0], rpm_response_buffer[1], rpm_response_buffer[2]);
     664:	9e ee       	ldi	r25, 0xEE	; 238
     666:	a9 2e       	mov	r10, r25
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	b9 2e       	mov	r11, r25
			can_update_rx_msg(&rpm_msg, rpm_msgid, 8);      // update rpm_msg to accept a new msg
     66c:	89 e0       	ldi	r24, 0x09	; 9
     66e:	c8 2e       	mov	r12, r24
     670:	d1 2c       	mov	r13, r1
     672:	cc 0e       	add	r12, r28
     674:	dd 1e       	adc	r13, r29
			for (i=0;i<8;i++) {
     676:	b1 e1       	ldi	r27, 0x11	; 17
     678:	eb 2e       	mov	r14, r27
     67a:	f1 2c       	mov	r15, r1
     67c:	ec 0e       	add	r14, r28
     67e:	fd 1e       	adc	r15, r29

	sei();				/* Enable interrupt */

	while(1) {
		// check for rpm_msg
		if (can_get_status(&rpm_msg) == CAN_STATUS_COMPLETED) {
     680:	c8 01       	movw	r24, r16
     682:	0e 94 53 1f 	call	0x3ea6	; 0x3ea6 <can_get_status>
     686:	88 23       	and	r24, r24
     688:	d9 f7       	brne	.-10     	; 0x680 <main+0x2b8>
			xprintf(PSTR("i: %d, Hjul5: %d Hjul6: %d\n"), rpm_response_buffer[0], rpm_response_buffer[1], rpm_response_buffer[2]);
     68a:	8d b7       	in	r24, 0x3d	; 61
     68c:	9e b7       	in	r25, 0x3e	; 62
     68e:	08 97       	sbiw	r24, 0x08	; 8
     690:	0f b6       	in	r0, 0x3f	; 63
     692:	f8 94       	cli
     694:	9e bf       	out	0x3e, r25	; 62
     696:	0f be       	out	0x3f, r0	; 63
     698:	8d bf       	out	0x3d, r24	; 61
     69a:	ed b7       	in	r30, 0x3d	; 61
     69c:	fe b7       	in	r31, 0x3e	; 62
     69e:	31 96       	adiw	r30, 0x01	; 1
     6a0:	ad b7       	in	r26, 0x3d	; 61
     6a2:	be b7       	in	r27, 0x3e	; 62
     6a4:	12 96       	adiw	r26, 0x02	; 2
     6a6:	bc 92       	st	X, r11
     6a8:	ae 92       	st	-X, r10
     6aa:	11 97       	sbiw	r26, 0x01	; 1
     6ac:	89 85       	ldd	r24, Y+9	; 0x09
     6ae:	82 83       	std	Z+2, r24	; 0x02
     6b0:	13 82       	std	Z+3, r1	; 0x03
     6b2:	8a 85       	ldd	r24, Y+10	; 0x0a
     6b4:	84 83       	std	Z+4, r24	; 0x04
     6b6:	15 82       	std	Z+5, r1	; 0x05
     6b8:	8b 85       	ldd	r24, Y+11	; 0x0b
     6ba:	86 83       	std	Z+6, r24	; 0x06
     6bc:	17 82       	std	Z+7, r1	; 0x07
     6be:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <xprintf>
			can_update_rx_msg(&rpm_msg, rpm_msgid, 8);      // update rpm_msg to accept a new msg
     6c2:	ed b7       	in	r30, 0x3d	; 61
     6c4:	fe b7       	in	r31, 0x3e	; 62
     6c6:	38 96       	adiw	r30, 0x08	; 8
     6c8:	0f b6       	in	r0, 0x3f	; 63
     6ca:	f8 94       	cli
     6cc:	fe bf       	out	0x3e, r31	; 62
     6ce:	0f be       	out	0x3f, r0	; 63
     6d0:	ed bf       	out	0x3d, r30	; 61
     6d2:	c8 01       	movw	r24, r16
     6d4:	65 e8       	ldi	r22, 0x85	; 133
     6d6:	48 e0       	ldi	r20, 0x08	; 8
     6d8:	0e 94 18 25 	call	0x4a30	; 0x4a30 <can_update_rx_msg>
     6dc:	f6 01       	movw	r30, r12
			for (i=0;i<8;i++) {
				rpm_response_buffer[i] = 0;
     6de:	11 92       	st	Z+, r1
	while(1) {
		// check for rpm_msg
		if (can_get_status(&rpm_msg) == CAN_STATUS_COMPLETED) {
			xprintf(PSTR("i: %d, Hjul5: %d Hjul6: %d\n"), rpm_response_buffer[0], rpm_response_buffer[1], rpm_response_buffer[2]);
			can_update_rx_msg(&rpm_msg, rpm_msgid, 8);      // update rpm_msg to accept a new msg
			for (i=0;i<8;i++) {
     6e0:	ee 15       	cp	r30, r14
     6e2:	ff 05       	cpc	r31, r15
     6e4:	e1 f7       	brne	.-8      	; 0x6de <main+0x316>
     6e6:	cc cf       	rjmp	.-104    	; 0x680 <main+0x2b8>

000006e8 <__vector_9>:
/*---------------------------------------------------------*/
/* 100Hz timer interrupt generated by OC2                  */
/*---------------------------------------------------------*/

ISR(TIMER2_COMP_vect)
{
     6e8:	1f 92       	push	r1
     6ea:	0f 92       	push	r0
     6ec:	0f b6       	in	r0, 0x3f	; 63
     6ee:	0f 92       	push	r0
     6f0:	0b b6       	in	r0, 0x3b	; 59
     6f2:	0f 92       	push	r0
     6f4:	11 24       	eor	r1, r1
     6f6:	2f 93       	push	r18
     6f8:	3f 93       	push	r19
     6fa:	4f 93       	push	r20
     6fc:	5f 93       	push	r21
     6fe:	6f 93       	push	r22
     700:	7f 93       	push	r23
     702:	8f 93       	push	r24
     704:	9f 93       	push	r25
     706:	af 93       	push	r26
     708:	bf 93       	push	r27
     70a:	ef 93       	push	r30
     70c:	ff 93       	push	r31
	Timer++;			/* Performance counter for this module */
     70e:	80 91 7f 03 	lds	r24, 0x037F
     712:	90 91 80 03 	lds	r25, 0x0380
     716:	01 96       	adiw	r24, 0x01	; 1
     718:	90 93 80 03 	sts	0x0380, r25
     71c:	80 93 7f 03 	sts	0x037F, r24
	disk_timerproc();	/* Drive timer procedure of low level disk I/O module */
     720:	0e 94 c4 1b 	call	0x3788	; 0x3788 <disk_timerproc>
}
     724:	ff 91       	pop	r31
     726:	ef 91       	pop	r30
     728:	bf 91       	pop	r27
     72a:	af 91       	pop	r26
     72c:	9f 91       	pop	r25
     72e:	8f 91       	pop	r24
     730:	7f 91       	pop	r23
     732:	6f 91       	pop	r22
     734:	5f 91       	pop	r21
     736:	4f 91       	pop	r20
     738:	3f 91       	pop	r19
     73a:	2f 91       	pop	r18
     73c:	0f 90       	pop	r0
     73e:	0b be       	out	0x3b, r0	; 59
     740:	0f 90       	pop	r0
     742:	0f be       	out	0x3f, r0	; 63
     744:	0f 90       	pop	r0
     746:	1f 90       	pop	r1
     748:	18 95       	reti

0000074a <USART0_Transmit>:
#include <avr/interrupt.h>
#include "config.h"
#include "uart.h"

void USART0_Transmit( unsigned char txData )
{
     74a:	98 2f       	mov	r25, r24
   /* Wait for empty transmit buffer */
   while ( !( UCSR0A & (1<<UDRE0)) );
     74c:	80 91 c0 00 	lds	r24, 0x00C0
     750:	85 ff       	sbrs	r24, 5
     752:	fc cf       	rjmp	.-8      	; 0x74c <USART0_Transmit+0x2>
   /* Put data into buffer, sends the data */
   UDR0 = txData;
     754:	90 93 c6 00 	sts	0x00C6, r25
}
     758:	08 95       	ret

0000075a <USART1_Transmit>:

void USART1_Transmit( unsigned char txData )
{
     75a:	98 2f       	mov	r25, r24
   /* Wait for empty transmit buffer */
   while ( !( UCSR1A & (1<<UDRE1)) );
     75c:	80 91 c8 00 	lds	r24, 0x00C8
     760:	85 ff       	sbrs	r24, 5
     762:	fc cf       	rjmp	.-8      	; 0x75c <USART1_Transmit+0x2>
   /* Put data into buffer, sends the data */
   UDR1 = txData;
     764:	90 93 ce 00 	sts	0x00CE, r25
}
     768:	08 95       	ret

0000076a <USART_set_baud_rate>:

void USART_set_baud_rate(double baudrate0, double baudrate1)
{
     76a:	6f 92       	push	r6
     76c:	7f 92       	push	r7
     76e:	8f 92       	push	r8
     770:	9f 92       	push	r9
     772:	af 92       	push	r10
     774:	bf 92       	push	r11
     776:	cf 92       	push	r12
     778:	df 92       	push	r13
     77a:	ef 92       	push	r14
     77c:	ff 92       	push	r15
     77e:	0f 93       	push	r16
     780:	1f 93       	push	r17
     782:	5b 01       	movw	r10, r22
     784:	6c 01       	movw	r12, r24
     786:	39 01       	movw	r6, r18
     788:	4a 01       	movw	r8, r20
   // calculate division factor for requested baud rate, and set it
   int bauddiv0 = ((F_CPU+(baudrate0*8L))/(baudrate0*16L)-1);
     78a:	20 e0       	ldi	r18, 0x00	; 0
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	40 e0       	ldi	r20, 0x00	; 0
     790:	51 e4       	ldi	r21, 0x41	; 65
     792:	0e 94 ce 29 	call	0x539c	; 0x539c <__mulsf3>
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	30 ec       	ldi	r19, 0xC0	; 192
     79a:	48 e2       	ldi	r20, 0x28	; 40
     79c:	5b e4       	ldi	r21, 0x4B	; 75
     79e:	0e 94 a1 29 	call	0x5342	; 0x5342 <__addsf3>
     7a2:	7b 01       	movw	r14, r22
     7a4:	8c 01       	movw	r16, r24
     7a6:	c6 01       	movw	r24, r12
     7a8:	b5 01       	movw	r22, r10
     7aa:	20 e0       	ldi	r18, 0x00	; 0
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	40 e8       	ldi	r20, 0x80	; 128
     7b0:	51 e4       	ldi	r21, 0x41	; 65
     7b2:	0e 94 ce 29 	call	0x539c	; 0x539c <__mulsf3>
     7b6:	9b 01       	movw	r18, r22
     7b8:	ac 01       	movw	r20, r24
     7ba:	c8 01       	movw	r24, r16
     7bc:	b7 01       	movw	r22, r14
     7be:	0e 94 c8 2a 	call	0x5590	; 0x5590 <__divsf3>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e8       	ldi	r20, 0x80	; 128
     7c8:	5f e3       	ldi	r21, 0x3F	; 63
     7ca:	0e 94 70 29 	call	0x52e0	; 0x52e0 <__subsf3>
     7ce:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__fixsfsi>
     7d2:	7b 01       	movw	r14, r22
     7d4:	8c 01       	movw	r16, r24
   int bauddiv1 = ((F_CPU+(baudrate1*8L))/(baudrate1*16L)-1);
     7d6:	c4 01       	movw	r24, r8
     7d8:	b3 01       	movw	r22, r6
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	40 e0       	ldi	r20, 0x00	; 0
     7e0:	51 e4       	ldi	r21, 0x41	; 65
     7e2:	0e 94 ce 29 	call	0x539c	; 0x539c <__mulsf3>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 ec       	ldi	r19, 0xC0	; 192
     7ea:	48 e2       	ldi	r20, 0x28	; 40
     7ec:	5b e4       	ldi	r21, 0x4B	; 75
     7ee:	0e 94 a1 29 	call	0x5342	; 0x5342 <__addsf3>
     7f2:	5b 01       	movw	r10, r22
     7f4:	6c 01       	movw	r12, r24
     7f6:	c4 01       	movw	r24, r8
     7f8:	b3 01       	movw	r22, r6
     7fa:	20 e0       	ldi	r18, 0x00	; 0
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	40 e8       	ldi	r20, 0x80	; 128
     800:	51 e4       	ldi	r21, 0x41	; 65
     802:	0e 94 ce 29 	call	0x539c	; 0x539c <__mulsf3>
     806:	9b 01       	movw	r18, r22
     808:	ac 01       	movw	r20, r24
     80a:	c6 01       	movw	r24, r12
     80c:	b5 01       	movw	r22, r10
     80e:	0e 94 c8 2a 	call	0x5590	; 0x5590 <__divsf3>
     812:	20 e0       	ldi	r18, 0x00	; 0
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	40 e8       	ldi	r20, 0x80	; 128
     818:	5f e3       	ldi	r21, 0x3F	; 63
     81a:	0e 94 70 29 	call	0x52e0	; 0x52e0 <__subsf3>
     81e:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <__fixsfsi>
   UBRR0L= bauddiv0;
     822:	e0 92 c4 00 	sts	0x00C4, r14
#ifdef UBRR0H
   UBRR0H= (bauddiv0>>8);
     826:	ef 2c       	mov	r14, r15
     828:	ff 0c       	add	r15, r15
     82a:	ff 08       	sbc	r15, r15
     82c:	e0 92 c5 00 	sts	0x00C5, r14
#endif

   UBRR1L= bauddiv1;
     830:	60 93 cc 00 	sts	0x00CC, r22
#ifdef UBRR1H
   UBRR1H= (bauddiv1>>8);
     834:	67 2f       	mov	r22, r23
     836:	77 0f       	add	r23, r23
     838:	77 0b       	sbc	r23, r23
     83a:	60 93 cd 00 	sts	0x00CD, r22
#endif
}
     83e:	1f 91       	pop	r17
     840:	0f 91       	pop	r16
     842:	ff 90       	pop	r15
     844:	ef 90       	pop	r14
     846:	df 90       	pop	r13
     848:	cf 90       	pop	r12
     84a:	bf 90       	pop	r11
     84c:	af 90       	pop	r10
     84e:	9f 90       	pop	r9
     850:	8f 90       	pop	r8
     852:	7f 90       	pop	r7
     854:	6f 90       	pop	r6
     856:	08 95       	ret

00000858 <uart_init>:

/* Initialize UART */
void uart_init()
{
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);  // Turn on U(S)ART port og sæt rec interrupt
     858:	88 e9       	ldi	r24, 0x98	; 152
     85a:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);   // Set frame format: 8 data bits, 1 stop bit, no parity
     85e:	96 e0       	ldi	r25, 0x06	; 6
     860:	90 93 c2 00 	sts	0x00C2, r25

	UCSR1B = (1<<RXEN0)|(1<<TXEN0);      // Turn on U(S)ART port
     864:	88 e1       	ldi	r24, 0x18	; 24
     866:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = (1<<UCSZ01)|(1<<UCSZ00);   // Set frame format: 8 data bits, 1 stop bit, no parity
     86a:	90 93 ca 00 	sts	0x00CA, r25
   
	USART_set_baud_rate(BAUD0, BAUD1); //Set baud rate
     86e:	60 e0       	ldi	r22, 0x00	; 0
     870:	70 e0       	ldi	r23, 0x00	; 0
     872:	86 e9       	ldi	r24, 0x96	; 150
     874:	96 e4       	ldi	r25, 0x46	; 70
     876:	20 e0       	ldi	r18, 0x00	; 0
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	41 ee       	ldi	r20, 0xE1	; 225
     87c:	57 e4       	ldi	r21, 0x47	; 71
     87e:	0e 94 b5 03 	call	0x76a	; 0x76a <USART_set_baud_rate>
}
     882:	08 95       	ret

00000884 <uart_get>:

/* Get a received character */
uint8_t uart_get ()
{
   unsigned char d;
   while ((UCSR0A & (1 << RXC0)) == 0) {}; // Do nothing until data have been recieved and is ready to be read from UDR
     884:	80 91 c0 00 	lds	r24, 0x00C0
     888:	87 ff       	sbrs	r24, 7
     88a:	fc cf       	rjmp	.-8      	; 0x884 <uart_get>
   d=UDR0;
     88c:	80 91 c6 00 	lds	r24, 0x00C6
   return d;
}
     890:	08 95       	ret

00000892 <uart_put_test>:

/* Transmit a character */
void uart_put_test( uint8_t device, uint8_t d)
{
	switch (device) {
     892:	88 23       	and	r24, r24
     894:	49 f0       	breq	.+18     	; 0x8a8 <uart_put_test+0x16>
     896:	81 30       	cpi	r24, 0x01	; 1
     898:	69 f4       	brne	.+26     	; 0x8b4 <uart_put_test+0x22>
}

void USART1_Transmit( unsigned char txData )
{
   /* Wait for empty transmit buffer */
   while ( !( UCSR1A & (1<<UDRE1)) );
     89a:	80 91 c8 00 	lds	r24, 0x00C8
     89e:	85 ff       	sbrs	r24, 5
     8a0:	fc cf       	rjmp	.-8      	; 0x89a <uart_put_test+0x8>
   /* Put data into buffer, sends the data */
   UDR1 = txData;
     8a2:	60 93 ce 00 	sts	0x00CE, r22
     8a6:	08 95       	ret
#include "uart.h"

void USART0_Transmit( unsigned char txData )
{
   /* Wait for empty transmit buffer */
   while ( !( UCSR0A & (1<<UDRE0)) );
     8a8:	80 91 c0 00 	lds	r24, 0x00C0
     8ac:	85 ff       	sbrs	r24, 5
     8ae:	fc cf       	rjmp	.-8      	; 0x8a8 <uart_put_test+0x16>
   /* Put data into buffer, sends the data */
   UDR0 = txData;
     8b0:	60 93 c6 00 	sts	0x00C6, r22
     8b4:	08 95       	ret

000008b6 <uart_put>:
	}
}

/* Transmit a character */
void uart_put(uint8_t d)
{
     8b6:	98 2f       	mov	r25, r24
}

void USART1_Transmit( unsigned char txData )
{
   /* Wait for empty transmit buffer */
   while ( !( UCSR1A & (1<<UDRE1)) );
     8b8:	80 91 c8 00 	lds	r24, 0x00C8
     8bc:	85 ff       	sbrs	r24, 5
     8be:	fc cf       	rjmp	.-8      	; 0x8b8 <uart_put+0x2>
   /* Put data into buffer, sends the data */
   UDR1 = txData;
     8c0:	90 93 ce 00 	sts	0x00CE, r25

/* Transmit a character */
void uart_put(uint8_t d)
{
   USART1_Transmit( d );
}
     8c4:	08 95       	ret

000008c6 <uart_puts>:

/* Transmit a string */
void uart_puts(const char *s)
{
     8c6:	fc 01       	movw	r30, r24
     8c8:	07 c0       	rjmp	.+14     	; 0x8d8 <uart_puts+0x12>
#include "uart.h"

void USART0_Transmit( unsigned char txData )
{
   /* Wait for empty transmit buffer */
   while ( !( UCSR0A & (1<<UDRE0)) );
     8ca:	80 91 c0 00 	lds	r24, 0x00C0
     8ce:	85 ff       	sbrs	r24, 5
     8d0:	fc cf       	rjmp	.-8      	; 0x8ca <uart_puts+0x4>

/* Transmit a string */
void uart_puts(const char *s)
{
   while (*s)
      USART0_Transmit( *s++ );
     8d2:	31 96       	adiw	r30, 0x01	; 1
void USART0_Transmit( unsigned char txData )
{
   /* Wait for empty transmit buffer */
   while ( !( UCSR0A & (1<<UDRE0)) );
   /* Put data into buffer, sends the data */
   UDR0 = txData;
     8d4:	90 93 c6 00 	sts	0x00C6, r25
}

/* Transmit a string */
void uart_puts(const char *s)
{
   while (*s)
     8d8:	90 81       	ld	r25, Z
     8da:	99 23       	and	r25, r25
     8dc:	b1 f7       	brne	.-20     	; 0x8ca <uart_puts+0x4>
      USART0_Transmit( *s++ );
}
     8de:	08 95       	ret

000008e0 <uart1_put>:

void uart1_put(uint8_t d)
{
     8e0:	98 2f       	mov	r25, r24
}

void USART1_Transmit( unsigned char txData )
{
   /* Wait for empty transmit buffer */
   while ( !( UCSR1A & (1<<UDRE1)) );
     8e2:	80 91 c8 00 	lds	r24, 0x00C8
     8e6:	85 ff       	sbrs	r24, 5
     8e8:	fc cf       	rjmp	.-8      	; 0x8e2 <uart1_put+0x2>
   /* Put data into buffer, sends the data */
   UDR1 = txData;
     8ea:	90 93 ce 00 	sts	0x00CE, r25
}

void uart1_put(uint8_t d)
{
        USART1_Transmit(d);
}
     8ee:	08 95       	ret

000008f0 <uart1_puts>:

void uart1_puts(const char *s)
{
     8f0:	fc 01       	movw	r30, r24
     8f2:	07 c0       	rjmp	.+14     	; 0x902 <uart1_puts+0x12>
}

void USART1_Transmit( unsigned char txData )
{
   /* Wait for empty transmit buffer */
   while ( !( UCSR1A & (1<<UDRE1)) );
     8f4:	80 91 c8 00 	lds	r24, 0x00C8
     8f8:	85 ff       	sbrs	r24, 5
     8fa:	fc cf       	rjmp	.-8      	; 0x8f4 <uart1_puts+0x4>
}

void uart1_puts(const char *s)
{
    while (*s)
            USART1_Transmit(*s++);
     8fc:	31 96       	adiw	r30, 0x01	; 1
void USART1_Transmit( unsigned char txData )
{
   /* Wait for empty transmit buffer */
   while ( !( UCSR1A & (1<<UDRE1)) );
   /* Put data into buffer, sends the data */
   UDR1 = txData;
     8fe:	90 93 ce 00 	sts	0x00CE, r25
        USART1_Transmit(d);
}

void uart1_puts(const char *s)
{
    while (*s)
     902:	90 81       	ld	r25, Z
     904:	99 23       	and	r25, r25
     906:	b1 f7       	brne	.-20     	; 0x8f4 <uart1_puts+0x4>
            USART1_Transmit(*s++);
}
     908:	08 95       	ret

0000090a <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
     90a:	ef 92       	push	r14
     90c:	ff 92       	push	r15
     90e:	0f 93       	push	r16
     910:	1f 93       	push	r17
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	ec 01       	movw	r28, r24
     918:	7a 01       	movw	r14, r20
     91a:	8b 01       	movw	r16, r22
	clst -= 2;
     91c:	8e ef       	ldi	r24, 0xFE	; 254
     91e:	9f ef       	ldi	r25, 0xFF	; 255
     920:	af ef       	ldi	r26, 0xFF	; 255
     922:	bf ef       	ldi	r27, 0xFF	; 255
     924:	e8 0e       	add	r14, r24
     926:	f9 1e       	adc	r15, r25
     928:	0a 1f       	adc	r16, r26
     92a:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
     92c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     92e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     930:	a8 a1       	ldd	r26, Y+32	; 0x20
     932:	b9 a1       	ldd	r27, Y+33	; 0x21
     934:	02 97       	sbiw	r24, 0x02	; 2
     936:	a1 09       	sbc	r26, r1
     938:	b1 09       	sbc	r27, r1
     93a:	e8 16       	cp	r14, r24
     93c:	f9 06       	cpc	r15, r25
     93e:	0a 07       	cpc	r16, r26
     940:	1b 07       	cpc	r17, r27
     942:	28 f0       	brcs	.+10     	; 0x94e <clust2sect+0x44>
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	40 e0       	ldi	r20, 0x00	; 0
     94a:	50 e0       	ldi	r21, 0x00	; 0
     94c:	12 c0       	rjmp	.+36     	; 0x972 <clust2sect+0x68>
	return clst * fs->csize + fs->database;
     94e:	2a 81       	ldd	r18, Y+2	; 0x02
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	40 e0       	ldi	r20, 0x00	; 0
     954:	50 e0       	ldi	r21, 0x00	; 0
     956:	c8 01       	movw	r24, r16
     958:	b7 01       	movw	r22, r14
     95a:	0e 94 15 2d 	call	0x5a2a	; 0x5a2a <__mulsi3>
     95e:	9b 01       	movw	r18, r22
     960:	ac 01       	movw	r20, r24
     962:	8a a5       	ldd	r24, Y+42	; 0x2a
     964:	9b a5       	ldd	r25, Y+43	; 0x2b
     966:	ac a5       	ldd	r26, Y+44	; 0x2c
     968:	bd a5       	ldd	r27, Y+45	; 0x2d
     96a:	28 0f       	add	r18, r24
     96c:	39 1f       	adc	r19, r25
     96e:	4a 1f       	adc	r20, r26
     970:	5b 1f       	adc	r21, r27
}
     972:	b9 01       	movw	r22, r18
     974:	ca 01       	movw	r24, r20
     976:	cd b7       	in	r28, 0x3d	; 61
     978:	de b7       	in	r29, 0x3e	; 62
     97a:	e6 e0       	ldi	r30, 0x06	; 6
     97c:	0c 94 9e 2d 	jmp	0x5b3c	; 0x5b3c <__epilogue_restores__+0x18>

00000980 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
     980:	db 01       	movw	r26, r22
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
     982:	88 23       	and	r24, r24
     984:	19 f0       	breq	.+6      	; 0x98c <f_mount+0xc>
     986:	2b e0       	ldi	r18, 0x0B	; 11
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	10 c0       	rjmp	.+32     	; 0x9ac <f_mount+0x2c>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
     98c:	e0 91 22 01 	lds	r30, 0x0122
     990:	f0 91 23 01 	lds	r31, 0x0123

	if (rfs) {
     994:	30 97       	sbiw	r30, 0x00	; 0
     996:	09 f0       	breq	.+2      	; 0x99a <f_mount+0x1a>
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
     998:	10 82       	st	Z, r1
	}

	if (fs) {
     99a:	10 97       	sbiw	r26, 0x00	; 0
     99c:	09 f0       	breq	.+2      	; 0x9a0 <f_mount+0x20>
		fs->fs_type = 0;			/* Clear new fs object */
     99e:	1c 92       	st	X, r1
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
     9a0:	b0 93 23 01 	sts	0x0123, r27
     9a4:	a0 93 22 01 	sts	0x0122, r26
     9a8:	20 e0       	ldi	r18, 0x00	; 0
     9aa:	30 e0       	ldi	r19, 0x00	; 0

	return FR_OK;
}
     9ac:	c9 01       	movw	r24, r18
     9ae:	08 95       	ret

000009b0 <f_chdrive>:

FRESULT f_chdrive (
	BYTE drv		/* Drive number */
)
{
	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
     9b0:	88 23       	and	r24, r24
     9b2:	19 f0       	breq	.+6      	; 0x9ba <f_chdrive+0xa>
     9b4:	2b e0       	ldi	r18, 0x0B	; 11
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	04 c0       	rjmp	.+8      	; 0x9c2 <f_chdrive+0x12>

	Drive = drv;
     9ba:	10 92 26 01 	sts	0x0126, r1
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0

	return FR_OK;
}
     9c2:	c9 01       	movw	r24, r18
     9c4:	08 95       	ret

000009c6 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
     9c6:	fc 01       	movw	r30, r24
	if (!fs || !fs->fs_type || fs->id != id)
     9c8:	00 97       	sbiw	r24, 0x00	; 0
     9ca:	99 f0       	breq	.+38     	; 0x9f2 <validate+0x2c>
     9cc:	80 81       	ld	r24, Z
     9ce:	88 23       	and	r24, r24
     9d0:	81 f0       	breq	.+32     	; 0x9f2 <validate+0x2c>
     9d2:	86 81       	ldd	r24, Z+6	; 0x06
     9d4:	97 81       	ldd	r25, Z+7	; 0x07
     9d6:	86 17       	cp	r24, r22
     9d8:	97 07       	cpc	r25, r23
     9da:	59 f4       	brne	.+22     	; 0x9f2 <validate+0x2c>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drive) & STA_NOINIT)
     9dc:	81 81       	ldd	r24, Z+1	; 0x01
     9de:	0e 94 4c 19 	call	0x3298	; 0x3298 <disk_status>
     9e2:	80 fd       	sbrc	r24, 0
     9e4:	03 c0       	rjmp	.+6      	; 0x9ec <validate+0x26>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	05 c0       	rjmp	.+10     	; 0x9f6 <validate+0x30>
     9ec:	23 e0       	ldi	r18, 0x03	; 3
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <validate+0x30>
     9f2:	29 e0       	ldi	r18, 0x09	; 9
     9f4:	30 e0       	ldi	r19, 0x00	; 0
		return FR_NOT_READY;

	return FR_OK;
}
     9f6:	c9 01       	movw	r24, r18
     9f8:	08 95       	ret

000009fa <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make apperance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
     9fa:	a0 e0       	ldi	r26, 0x00	; 0
     9fc:	b0 e0       	ldi	r27, 0x00	; 0
     9fe:	e3 e0       	ldi	r30, 0x03	; 3
     a00:	f5 e0       	ldi	r31, 0x05	; 5
     a02:	0c 94 7a 2d 	jmp	0x5af4	; 0x5af4 <__prologue_saves__+0x8>
     a06:	ec 01       	movw	r28, r24
     a08:	4a 01       	movw	r8, r20
     a0a:	5b 01       	movw	r10, r22
	DWORD wsect;


	wsect = fs->winsect;
     a0c:	ce a4       	ldd	r12, Y+46	; 0x2e
     a0e:	df a4       	ldd	r13, Y+47	; 0x2f
     a10:	e8 a8       	ldd	r14, Y+48	; 0x30
     a12:	f9 a8       	ldd	r15, Y+49	; 0x31
	if (wsect != sector) {	/* Changed current window */
     a14:	c4 16       	cp	r12, r20
     a16:	d5 06       	cpc	r13, r21
     a18:	e6 06       	cpc	r14, r22
     a1a:	f7 06       	cpc	r15, r23
     a1c:	09 f4       	brne	.+2      	; 0xa20 <move_window+0x26>
     a1e:	4f c0       	rjmp	.+158    	; 0xabe <move_window+0xc4>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
     a20:	8c 81       	ldd	r24, Y+4	; 0x04
     a22:	88 23       	and	r24, r24
     a24:	a1 f1       	breq	.+104    	; 0xa8e <move_window+0x94>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
     a26:	82 e3       	ldi	r24, 0x32	; 50
     a28:	68 2e       	mov	r6, r24
     a2a:	71 2c       	mov	r7, r1
     a2c:	6c 0e       	add	r6, r28
     a2e:	7d 1e       	adc	r7, r29
     a30:	89 81       	ldd	r24, Y+1	; 0x01
     a32:	b3 01       	movw	r22, r6
     a34:	a7 01       	movw	r20, r14
     a36:	96 01       	movw	r18, r12
     a38:	01 e0       	ldi	r16, 0x01	; 1
     a3a:	0e 94 b1 19 	call	0x3362	; 0x3362 <disk_write>
     a3e:	89 2b       	or	r24, r25
     a40:	d9 f5       	brne	.+118    	; 0xab8 <move_window+0xbe>
				return FR_DISK_ERR;
			fs->wflag = 0;
     a42:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
     a44:	8a 8d       	ldd	r24, Y+26	; 0x1a
     a46:	9b 8d       	ldd	r25, Y+27	; 0x1b
     a48:	ac 8d       	ldd	r26, Y+28	; 0x1c
     a4a:	bd 8d       	ldd	r27, Y+29	; 0x1d
     a4c:	2a a1       	ldd	r18, Y+34	; 0x22
     a4e:	3b a1       	ldd	r19, Y+35	; 0x23
     a50:	4c a1       	ldd	r20, Y+36	; 0x24
     a52:	5d a1       	ldd	r21, Y+37	; 0x25
     a54:	82 0f       	add	r24, r18
     a56:	93 1f       	adc	r25, r19
     a58:	a4 1f       	adc	r26, r20
     a5a:	b5 1f       	adc	r27, r21
     a5c:	c8 16       	cp	r12, r24
     a5e:	d9 06       	cpc	r13, r25
     a60:	ea 06       	cpc	r14, r26
     a62:	fb 06       	cpc	r15, r27
     a64:	a0 f4       	brcc	.+40     	; 0xa8e <move_window+0x94>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
     a66:	1b 81       	ldd	r17, Y+3	; 0x03
     a68:	10 c0       	rjmp	.+32     	; 0xa8a <move_window+0x90>
					wsect += fs->sects_fat;
     a6a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     a6c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     a6e:	ac 8d       	ldd	r26, Y+28	; 0x1c
     a70:	bd 8d       	ldd	r27, Y+29	; 0x1d
     a72:	c8 0e       	add	r12, r24
     a74:	d9 1e       	adc	r13, r25
     a76:	ea 1e       	adc	r14, r26
     a78:	fb 1e       	adc	r15, r27
					disk_write(fs->drive, fs->win, wsect, 1);
     a7a:	89 81       	ldd	r24, Y+1	; 0x01
     a7c:	b3 01       	movw	r22, r6
     a7e:	a7 01       	movw	r20, r14
     a80:	96 01       	movw	r18, r12
     a82:	01 e0       	ldi	r16, 0x01	; 1
     a84:	0e 94 b1 19 	call	0x3362	; 0x3362 <disk_write>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
     a88:	11 50       	subi	r17, 0x01	; 1
     a8a:	12 30       	cpi	r17, 0x02	; 2
     a8c:	70 f7       	brcc	.-36     	; 0xa6a <move_window+0x70>
					disk_write(fs->drive, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
     a8e:	81 14       	cp	r8, r1
     a90:	91 04       	cpc	r9, r1
     a92:	a1 04       	cpc	r10, r1
     a94:	b1 04       	cpc	r11, r1
     a96:	99 f0       	breq	.+38     	; 0xabe <move_window+0xc4>
			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
     a98:	be 01       	movw	r22, r28
     a9a:	6e 5c       	subi	r22, 0xCE	; 206
     a9c:	7f 4f       	sbci	r23, 0xFF	; 255
     a9e:	89 81       	ldd	r24, Y+1	; 0x01
     aa0:	a5 01       	movw	r20, r10
     aa2:	94 01       	movw	r18, r8
     aa4:	01 e0       	ldi	r16, 0x01	; 1
     aa6:	0e 94 53 19 	call	0x32a6	; 0x32a6 <disk_read>
     aaa:	89 2b       	or	r24, r25
     aac:	29 f4       	brne	.+10     	; 0xab8 <move_window+0xbe>
				return FR_DISK_ERR;
			fs->winsect = sector;
     aae:	8e a6       	std	Y+46, r8	; 0x2e
     ab0:	9f a6       	std	Y+47, r9	; 0x2f
     ab2:	a8 aa       	std	Y+48, r10	; 0x30
     ab4:	b9 aa       	std	Y+49, r11	; 0x31
     ab6:	03 c0       	rjmp	.+6      	; 0xabe <move_window+0xc4>
     ab8:	21 e0       	ldi	r18, 0x01	; 1
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	02 c0       	rjmp	.+4      	; 0xac2 <move_window+0xc8>
     abe:	20 e0       	ldi	r18, 0x00	; 0
     ac0:	30 e0       	ldi	r19, 0x00	; 0
		}
	}

	return FR_OK;
}
     ac2:	c9 01       	movw	r24, r18
     ac4:	cd b7       	in	r28, 0x3d	; 61
     ac6:	de b7       	in	r29, 0x3e	; 62
     ac8:	ee e0       	ldi	r30, 0x0E	; 14
     aca:	0c 94 96 2d 	jmp	0x5b2c	; 0x5b2c <__epilogue_restores__+0x8>

00000ace <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->max_clust - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
     ace:	a0 e0       	ldi	r26, 0x00	; 0
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	ed e6       	ldi	r30, 0x6D	; 109
     ad4:	f5 e0       	ldi	r31, 0x05	; 5
     ad6:	0c 94 76 2d 	jmp	0x5aec	; 0x5aec <__prologue_saves__>
     ada:	5c 01       	movw	r10, r24
     adc:	6a 01       	movw	r12, r20
     ade:	7b 01       	movw	r14, r22
     ae0:	38 01       	movw	r6, r16
     ae2:	49 01       	movw	r8, r18
	BYTE *p;
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
     ae4:	42 30       	cpi	r20, 0x02	; 2
     ae6:	51 05       	cpc	r21, r1
     ae8:	61 05       	cpc	r22, r1
     aea:	71 05       	cpc	r23, r1
     aec:	08 f4       	brcc	.+2      	; 0xaf0 <put_fat+0x22>
     aee:	b1 c0       	rjmp	.+354    	; 0xc52 <put_fat+0x184>
     af0:	f5 01       	movw	r30, r10
     af2:	86 8d       	ldd	r24, Z+30	; 0x1e
     af4:	97 8d       	ldd	r25, Z+31	; 0x1f
     af6:	a0 a1       	ldd	r26, Z+32	; 0x20
     af8:	b1 a1       	ldd	r27, Z+33	; 0x21
     afa:	48 17       	cp	r20, r24
     afc:	59 07       	cpc	r21, r25
     afe:	6a 07       	cpc	r22, r26
     b00:	7b 07       	cpc	r23, r27
     b02:	08 f0       	brcs	.+2      	; 0xb06 <put_fat+0x38>
     b04:	a6 c0       	rjmp	.+332    	; 0xc52 <put_fat+0x184>
		res = FR_INT_ERR;

	} else {
		fsect = fs->fatbase;
     b06:	22 a0       	ldd	r2, Z+34	; 0x22
     b08:	33 a0       	ldd	r3, Z+35	; 0x23
     b0a:	44 a0       	ldd	r4, Z+36	; 0x24
     b0c:	55 a0       	ldd	r5, Z+37	; 0x25
		switch (fs->fs_type) {
     b0e:	80 81       	ld	r24, Z
     b10:	82 30       	cpi	r24, 0x02	; 2
     b12:	09 f4       	brne	.+2      	; 0xb16 <put_fat+0x48>
     b14:	66 c0       	rjmp	.+204    	; 0xbe2 <put_fat+0x114>
     b16:	83 30       	cpi	r24, 0x03	; 3
     b18:	09 f4       	brne	.+2      	; 0xb1c <put_fat+0x4e>
     b1a:	7a c0       	rjmp	.+244    	; 0xc10 <put_fat+0x142>
     b1c:	81 30       	cpi	r24, 0x01	; 1
     b1e:	19 f0       	breq	.+6      	; 0xb26 <put_fat+0x58>
     b20:	42 e0       	ldi	r20, 0x02	; 2
     b22:	50 e0       	ldi	r21, 0x00	; 0
     b24:	92 c0       	rjmp	.+292    	; 0xc4a <put_fat+0x17c>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
     b26:	ea 01       	movw	r28, r20
     b28:	d6 95       	lsr	r29
     b2a:	c7 95       	ror	r28
     b2c:	c4 0f       	add	r28, r20
     b2e:	d5 1f       	adc	r29, r21
			res = move_window(fs, fsect + (bc / SS(fs)));
     b30:	ae 01       	movw	r20, r28
     b32:	45 2f       	mov	r20, r21
     b34:	55 27       	eor	r21, r21
     b36:	46 95       	lsr	r20
     b38:	60 e0       	ldi	r22, 0x00	; 0
     b3a:	70 e0       	ldi	r23, 0x00	; 0
     b3c:	42 0d       	add	r20, r2
     b3e:	53 1d       	adc	r21, r3
     b40:	64 1d       	adc	r22, r4
     b42:	75 1d       	adc	r23, r5
     b44:	c5 01       	movw	r24, r10
     b46:	0e 94 fd 04 	call	0x9fa	; 0x9fa <move_window>
     b4a:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
     b4c:	00 97       	sbiw	r24, 0x00	; 0
     b4e:	09 f0       	breq	.+2      	; 0xb52 <put_fat+0x84>
     b50:	7c c0       	rjmp	.+248    	; 0xc4a <put_fat+0x17c>
			p = &fs->win[bc & (SS(fs) - 1)];
     b52:	de 01       	movw	r26, r28
     b54:	b1 70       	andi	r27, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
     b56:	86 01       	movw	r16, r12
     b58:	01 70       	andi	r16, 0x01	; 1
     b5a:	10 70       	andi	r17, 0x00	; 0
     b5c:	01 15       	cp	r16, r1
     b5e:	11 05       	cpc	r17, r1
     b60:	51 f0       	breq	.+20     	; 0xb76 <put_fat+0xa8>
     b62:	f5 01       	movw	r30, r10
     b64:	ea 0f       	add	r30, r26
     b66:	fb 1f       	adc	r31, r27
     b68:	82 a9       	ldd	r24, Z+50	; 0x32
     b6a:	8f 70       	andi	r24, 0x0F	; 15
     b6c:	96 2d       	mov	r25, r6
     b6e:	92 95       	swap	r25
     b70:	90 7f       	andi	r25, 0xF0	; 240
     b72:	98 2b       	or	r25, r24
     b74:	01 c0       	rjmp	.+2      	; 0xb78 <put_fat+0xaa>
     b76:	96 2d       	mov	r25, r6
     b78:	aa 0d       	add	r26, r10
     b7a:	bb 1d       	adc	r27, r11
     b7c:	d2 96       	adiw	r26, 0x32	; 50
     b7e:	9c 93       	st	X, r25
			bc++;
     b80:	21 96       	adiw	r28, 0x01	; 1
			fs->wflag = 1;
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	f5 01       	movw	r30, r10
     b86:	84 83       	std	Z+4, r24	; 0x04
			res = move_window(fs, fsect + (bc / SS(fs)));
     b88:	ae 01       	movw	r20, r28
     b8a:	45 2f       	mov	r20, r21
     b8c:	55 27       	eor	r21, r21
     b8e:	46 95       	lsr	r20
     b90:	60 e0       	ldi	r22, 0x00	; 0
     b92:	70 e0       	ldi	r23, 0x00	; 0
     b94:	42 0d       	add	r20, r2
     b96:	53 1d       	adc	r21, r3
     b98:	64 1d       	adc	r22, r4
     b9a:	75 1d       	adc	r23, r5
     b9c:	c5 01       	movw	r24, r10
     b9e:	0e 94 fd 04 	call	0x9fa	; 0x9fa <move_window>
     ba2:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
     ba4:	00 97       	sbiw	r24, 0x00	; 0
     ba6:	09 f0       	breq	.+2      	; 0xbaa <put_fat+0xdc>
     ba8:	50 c0       	rjmp	.+160    	; 0xc4a <put_fat+0x17c>
			p = &fs->win[bc & (SS(fs) - 1)];
     baa:	d1 70       	andi	r29, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
     bac:	01 15       	cp	r16, r1
     bae:	11 05       	cpc	r17, r1
     bb0:	49 f0       	breq	.+18     	; 0xbc4 <put_fat+0xf6>
     bb2:	e4 e0       	ldi	r30, 0x04	; 4
     bb4:	96 94       	lsr	r9
     bb6:	87 94       	ror	r8
     bb8:	77 94       	ror	r7
     bba:	67 94       	ror	r6
     bbc:	ea 95       	dec	r30
     bbe:	d1 f7       	brne	.-12     	; 0xbb4 <put_fat+0xe6>
     bc0:	66 2d       	mov	r22, r6
     bc2:	0b c0       	rjmp	.+22     	; 0xbda <put_fat+0x10c>
     bc4:	f5 01       	movw	r30, r10
     bc6:	ec 0f       	add	r30, r28
     bc8:	fd 1f       	adc	r31, r29
     bca:	62 a9       	ldd	r22, Z+50	; 0x32
     bcc:	60 7f       	andi	r22, 0xF0	; 240
     bce:	bb 27       	eor	r27, r27
     bd0:	a9 2d       	mov	r26, r9
     bd2:	98 2d       	mov	r25, r8
     bd4:	87 2d       	mov	r24, r7
     bd6:	8f 70       	andi	r24, 0x0F	; 15
     bd8:	68 2b       	or	r22, r24
     bda:	ca 0d       	add	r28, r10
     bdc:	db 1d       	adc	r29, r11
     bde:	6a ab       	std	Y+50, r22	; 0x32
     be0:	34 c0       	rjmp	.+104    	; 0xc4a <put_fat+0x17c>
			break;

		case FS_FAT16 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
     be2:	77 27       	eor	r23, r23
     be4:	6f 2d       	mov	r22, r15
     be6:	5e 2d       	mov	r21, r14
     be8:	4d 2d       	mov	r20, r13
     bea:	42 0d       	add	r20, r2
     bec:	53 1d       	adc	r21, r3
     bee:	64 1d       	adc	r22, r4
     bf0:	75 1d       	adc	r23, r5
     bf2:	c5 01       	movw	r24, r10
     bf4:	0e 94 fd 04 	call	0x9fa	; 0x9fa <move_window>
     bf8:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
     bfa:	00 97       	sbiw	r24, 0x00	; 0
     bfc:	31 f5       	brne	.+76     	; 0xc4a <put_fat+0x17c>
			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
     bfe:	f6 01       	movw	r30, r12
     c00:	ee 0f       	add	r30, r30
     c02:	ff 1f       	adc	r31, r31
     c04:	f1 70       	andi	r31, 0x01	; 1
     c06:	ea 0d       	add	r30, r10
     c08:	fb 1d       	adc	r31, r11
     c0a:	73 aa       	std	Z+51, r7	; 0x33
     c0c:	62 aa       	std	Z+50, r6	; 0x32
     c0e:	1d c0       	rjmp	.+58     	; 0xc4a <put_fat+0x17c>
			break;

		case FS_FAT32 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
     c10:	27 e0       	ldi	r18, 0x07	; 7
     c12:	76 95       	lsr	r23
     c14:	67 95       	ror	r22
     c16:	57 95       	ror	r21
     c18:	47 95       	ror	r20
     c1a:	2a 95       	dec	r18
     c1c:	d1 f7       	brne	.-12     	; 0xc12 <put_fat+0x144>
     c1e:	42 0d       	add	r20, r2
     c20:	53 1d       	adc	r21, r3
     c22:	64 1d       	adc	r22, r4
     c24:	75 1d       	adc	r23, r5
     c26:	c5 01       	movw	r24, r10
     c28:	0e 94 fd 04 	call	0x9fa	; 0x9fa <move_window>
     c2c:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
     c2e:	00 97       	sbiw	r24, 0x00	; 0
     c30:	61 f4       	brne	.+24     	; 0xc4a <put_fat+0x17c>
			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
     c32:	f6 01       	movw	r30, r12
     c34:	ee 0f       	add	r30, r30
     c36:	ff 1f       	adc	r31, r31
     c38:	ee 0f       	add	r30, r30
     c3a:	ff 1f       	adc	r31, r31
     c3c:	f1 70       	andi	r31, 0x01	; 1
     c3e:	ea 0d       	add	r30, r10
     c40:	fb 1d       	adc	r31, r11
     c42:	62 aa       	std	Z+50, r6	; 0x32
     c44:	73 aa       	std	Z+51, r7	; 0x33
     c46:	84 aa       	std	Z+52, r8	; 0x34
     c48:	95 aa       	std	Z+53, r9	; 0x35
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	f5 01       	movw	r30, r10
     c4e:	84 83       	std	Z+4, r24	; 0x04
     c50:	02 c0       	rjmp	.+4      	; 0xc56 <put_fat+0x188>
     c52:	42 e0       	ldi	r20, 0x02	; 2
     c54:	50 e0       	ldi	r21, 0x00	; 0
	}

	return res;
}
     c56:	ca 01       	movw	r24, r20
     c58:	cd b7       	in	r28, 0x3d	; 61
     c5a:	de b7       	in	r29, 0x3e	; 62
     c5c:	e2 e1       	ldi	r30, 0x12	; 18
     c5e:	0c 94 92 2d 	jmp	0x5b24	; 0x5b24 <__epilogue_restores__>

00000c62 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Interal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
     c62:	a0 e0       	ldi	r26, 0x00	; 0
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	e7 e3       	ldi	r30, 0x37	; 55
     c68:	f6 e0       	ldi	r31, 0x06	; 6
     c6a:	0c 94 7b 2d 	jmp	0x5af6	; 0x5af6 <__prologue_saves__+0xa>
     c6e:	4c 01       	movw	r8, r24
     c70:	7a 01       	movw	r14, r20
     c72:	8b 01       	movw	r16, r22
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
     c74:	42 30       	cpi	r20, 0x02	; 2
     c76:	51 05       	cpc	r21, r1
     c78:	61 05       	cpc	r22, r1
     c7a:	71 05       	cpc	r23, r1
     c7c:	08 f4       	brcc	.+2      	; 0xc80 <get_fat+0x1e>
     c7e:	97 c0       	rjmp	.+302    	; 0xdae <get_fat+0x14c>
     c80:	f4 01       	movw	r30, r8
     c82:	86 8d       	ldd	r24, Z+30	; 0x1e
     c84:	97 8d       	ldd	r25, Z+31	; 0x1f
     c86:	a0 a1       	ldd	r26, Z+32	; 0x20
     c88:	b1 a1       	ldd	r27, Z+33	; 0x21
     c8a:	48 17       	cp	r20, r24
     c8c:	59 07       	cpc	r21, r25
     c8e:	6a 07       	cpc	r22, r26
     c90:	7b 07       	cpc	r23, r27
     c92:	08 f0       	brcs	.+2      	; 0xc96 <get_fat+0x34>
     c94:	8c c0       	rjmp	.+280    	; 0xdae <get_fat+0x14c>
		return 1;

	fsect = fs->fatbase;
     c96:	a2 a0       	ldd	r10, Z+34	; 0x22
     c98:	b3 a0       	ldd	r11, Z+35	; 0x23
     c9a:	c4 a0       	ldd	r12, Z+36	; 0x24
     c9c:	d5 a0       	ldd	r13, Z+37	; 0x25
	switch (fs->fs_type) {
     c9e:	80 81       	ld	r24, Z
     ca0:	82 30       	cpi	r24, 0x02	; 2
     ca2:	09 f4       	brne	.+2      	; 0xca6 <get_fat+0x44>
     ca4:	4d c0       	rjmp	.+154    	; 0xd40 <get_fat+0xde>
     ca6:	83 30       	cpi	r24, 0x03	; 3
     ca8:	09 f4       	brne	.+2      	; 0xcac <get_fat+0x4a>
     caa:	63 c0       	rjmp	.+198    	; 0xd72 <get_fat+0x110>
     cac:	81 30       	cpi	r24, 0x01	; 1
     cae:	09 f0       	breq	.+2      	; 0xcb2 <get_fat+0x50>
     cb0:	83 c0       	rjmp	.+262    	; 0xdb8 <get_fat+0x156>
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
     cb2:	ea 01       	movw	r28, r20
     cb4:	d6 95       	lsr	r29
     cb6:	c7 95       	ror	r28
     cb8:	c4 0f       	add	r28, r20
     cba:	d5 1f       	adc	r29, r21
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
     cbc:	ae 01       	movw	r20, r28
     cbe:	45 2f       	mov	r20, r21
     cc0:	55 27       	eor	r21, r21
     cc2:	46 95       	lsr	r20
     cc4:	60 e0       	ldi	r22, 0x00	; 0
     cc6:	70 e0       	ldi	r23, 0x00	; 0
     cc8:	4a 0d       	add	r20, r10
     cca:	5b 1d       	adc	r21, r11
     ccc:	6c 1d       	adc	r22, r12
     cce:	7d 1d       	adc	r23, r13
     cd0:	c4 01       	movw	r24, r8
     cd2:	0e 94 fd 04 	call	0x9fa	; 0x9fa <move_window>
     cd6:	89 2b       	or	r24, r25
     cd8:	09 f0       	breq	.+2      	; 0xcdc <get_fat+0x7a>
     cda:	6e c0       	rjmp	.+220    	; 0xdb8 <get_fat+0x156>
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
     cdc:	fe 01       	movw	r30, r28
     cde:	f1 70       	andi	r31, 0x01	; 1
     ce0:	e8 0d       	add	r30, r8
     ce2:	f9 1d       	adc	r31, r9
     ce4:	72 a8       	ldd	r7, Z+50	; 0x32
     ce6:	21 96       	adiw	r28, 0x01	; 1
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
     ce8:	ae 01       	movw	r20, r28
     cea:	45 2f       	mov	r20, r21
     cec:	55 27       	eor	r21, r21
     cee:	46 95       	lsr	r20
     cf0:	60 e0       	ldi	r22, 0x00	; 0
     cf2:	70 e0       	ldi	r23, 0x00	; 0
     cf4:	4a 0d       	add	r20, r10
     cf6:	5b 1d       	adc	r21, r11
     cf8:	6c 1d       	adc	r22, r12
     cfa:	7d 1d       	adc	r23, r13
     cfc:	c4 01       	movw	r24, r8
     cfe:	0e 94 fd 04 	call	0x9fa	; 0x9fa <move_window>
     d02:	89 2b       	or	r24, r25
     d04:	09 f0       	breq	.+2      	; 0xd08 <get_fat+0xa6>
     d06:	58 c0       	rjmp	.+176    	; 0xdb8 <get_fat+0x156>
	fsect = fs->fatbase;
	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
     d08:	67 2d       	mov	r22, r7
     d0a:	70 e0       	ldi	r23, 0x00	; 0
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
     d0c:	d1 70       	andi	r29, 0x01	; 1
     d0e:	c8 0d       	add	r28, r8
     d10:	d9 1d       	adc	r29, r9
     d12:	9a a9       	ldd	r25, Y+50	; 0x32
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	68 2b       	or	r22, r24
     d18:	79 2b       	or	r23, r25
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
     d1a:	c7 01       	movw	r24, r14
     d1c:	81 70       	andi	r24, 0x01	; 1
     d1e:	90 70       	andi	r25, 0x00	; 0
     d20:	89 2b       	or	r24, r25
     d22:	39 f0       	breq	.+14     	; 0xd32 <get_fat+0xd0>
     d24:	44 e0       	ldi	r20, 0x04	; 4
     d26:	76 95       	lsr	r23
     d28:	67 95       	ror	r22
     d2a:	4a 95       	dec	r20
     d2c:	e1 f7       	brne	.-8      	; 0xd26 <get_fat+0xc4>
     d2e:	9b 01       	movw	r18, r22
     d30:	1d c0       	rjmp	.+58     	; 0xd6c <get_fat+0x10a>
     d32:	9b 01       	movw	r18, r22
     d34:	40 e0       	ldi	r20, 0x00	; 0
     d36:	50 e0       	ldi	r21, 0x00	; 0
     d38:	3f 70       	andi	r19, 0x0F	; 15
     d3a:	40 70       	andi	r20, 0x00	; 0
     d3c:	50 70       	andi	r21, 0x00	; 0
     d3e:	40 c0       	rjmp	.+128    	; 0xdc0 <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
     d40:	45 2f       	mov	r20, r21
     d42:	56 2f       	mov	r21, r22
     d44:	67 2f       	mov	r22, r23
     d46:	77 27       	eor	r23, r23
     d48:	4a 0d       	add	r20, r10
     d4a:	5b 1d       	adc	r21, r11
     d4c:	6c 1d       	adc	r22, r12
     d4e:	7d 1d       	adc	r23, r13
     d50:	c4 01       	movw	r24, r8
     d52:	0e 94 fd 04 	call	0x9fa	; 0x9fa <move_window>
     d56:	89 2b       	or	r24, r25
     d58:	79 f5       	brne	.+94     	; 0xdb8 <get_fat+0x156>
		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
     d5a:	f7 01       	movw	r30, r14
     d5c:	ee 0f       	add	r30, r30
     d5e:	ff 1f       	adc	r31, r31
     d60:	f1 70       	andi	r31, 0x01	; 1
     d62:	e8 0d       	add	r30, r8
     d64:	f9 1d       	adc	r31, r9
     d66:	82 a9       	ldd	r24, Z+50	; 0x32
     d68:	93 a9       	ldd	r25, Z+51	; 0x33
     d6a:	9c 01       	movw	r18, r24
     d6c:	40 e0       	ldi	r20, 0x00	; 0
     d6e:	50 e0       	ldi	r21, 0x00	; 0
     d70:	27 c0       	rjmp	.+78     	; 0xdc0 <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
     d72:	97 e0       	ldi	r25, 0x07	; 7
     d74:	76 95       	lsr	r23
     d76:	67 95       	ror	r22
     d78:	57 95       	ror	r21
     d7a:	47 95       	ror	r20
     d7c:	9a 95       	dec	r25
     d7e:	d1 f7       	brne	.-12     	; 0xd74 <get_fat+0x112>
     d80:	4a 0d       	add	r20, r10
     d82:	5b 1d       	adc	r21, r11
     d84:	6c 1d       	adc	r22, r12
     d86:	7d 1d       	adc	r23, r13
     d88:	c4 01       	movw	r24, r8
     d8a:	0e 94 fd 04 	call	0x9fa	; 0x9fa <move_window>
     d8e:	89 2b       	or	r24, r25
     d90:	99 f4       	brne	.+38     	; 0xdb8 <get_fat+0x156>
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
     d92:	f7 01       	movw	r30, r14
     d94:	ee 0f       	add	r30, r30
     d96:	ff 1f       	adc	r31, r31
     d98:	ee 0f       	add	r30, r30
     d9a:	ff 1f       	adc	r31, r31
     d9c:	f1 70       	andi	r31, 0x01	; 1
     d9e:	e8 0d       	add	r30, r8
     da0:	f9 1d       	adc	r31, r9
     da2:	22 a9       	ldd	r18, Z+50	; 0x32
     da4:	33 a9       	ldd	r19, Z+51	; 0x33
     da6:	44 a9       	ldd	r20, Z+52	; 0x34
     da8:	55 a9       	ldd	r21, Z+53	; 0x35
     daa:	5f 70       	andi	r21, 0x0F	; 15
     dac:	09 c0       	rjmp	.+18     	; 0xdc0 <get_fat+0x15e>
     dae:	21 e0       	ldi	r18, 0x01	; 1
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	40 e0       	ldi	r20, 0x00	; 0
     db4:	50 e0       	ldi	r21, 0x00	; 0
     db6:	04 c0       	rjmp	.+8      	; 0xdc0 <get_fat+0x15e>
     db8:	2f ef       	ldi	r18, 0xFF	; 255
     dba:	3f ef       	ldi	r19, 0xFF	; 255
     dbc:	4f ef       	ldi	r20, 0xFF	; 255
     dbe:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return 0xFFFFFFFF;	/* An error occured at the disk I/O layer */
}
     dc0:	b9 01       	movw	r22, r18
     dc2:	ca 01       	movw	r24, r20
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
     dc8:	ed e0       	ldi	r30, 0x0D	; 13
     dca:	0c 94 97 2d 	jmp	0x5b2e	; 0x5b2e <__epilogue_restores__+0xa>

00000dce <dir_seek>:
static
FRESULT dir_seek (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
     dce:	a0 e0       	ldi	r26, 0x00	; 0
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	ed ee       	ldi	r30, 0xED	; 237
     dd4:	f6 e0       	ldi	r31, 0x06	; 6
     dd6:	0c 94 7e 2d 	jmp	0x5afc	; 0x5afc <__prologue_saves__+0x10>
     dda:	6c 01       	movw	r12, r24
     ddc:	5b 01       	movw	r10, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
     dde:	dc 01       	movw	r26, r24
     de0:	15 96       	adiw	r26, 0x05	; 5
     de2:	7c 93       	st	X, r23
     de4:	6e 93       	st	-X, r22
     de6:	14 97       	sbiw	r26, 0x04	; 4
	clst = dj->sclust;
     de8:	16 96       	adiw	r26, 0x06	; 6
     dea:	4d 91       	ld	r20, X+
     dec:	5d 91       	ld	r21, X+
     dee:	6d 91       	ld	r22, X+
     df0:	7c 91       	ld	r23, X
     df2:	19 97       	sbiw	r26, 0x09	; 9
	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
     df4:	41 30       	cpi	r20, 0x01	; 1
     df6:	51 05       	cpc	r21, r1
     df8:	61 05       	cpc	r22, r1
     dfa:	71 05       	cpc	r23, r1
     dfc:	09 f4       	brne	.+2      	; 0xe00 <dir_seek+0x32>
     dfe:	d0 c0       	rjmp	.+416    	; 0xfa0 <dir_seek+0x1d2>
     e00:	ed 91       	ld	r30, X+
     e02:	fc 91       	ld	r31, X
     e04:	86 8d       	ldd	r24, Z+30	; 0x1e
     e06:	97 8d       	ldd	r25, Z+31	; 0x1f
     e08:	a0 a1       	ldd	r26, Z+32	; 0x20
     e0a:	b1 a1       	ldd	r27, Z+33	; 0x21
     e0c:	48 17       	cp	r20, r24
     e0e:	59 07       	cpc	r21, r25
     e10:	6a 07       	cpc	r22, r26
     e12:	7b 07       	cpc	r23, r27
     e14:	08 f0       	brcs	.+2      	; 0xe18 <dir_seek+0x4a>
     e16:	c4 c0       	rjmp	.+392    	; 0xfa0 <dir_seek+0x1d2>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
     e18:	41 15       	cp	r20, r1
     e1a:	51 05       	cpc	r21, r1
     e1c:	61 05       	cpc	r22, r1
     e1e:	71 05       	cpc	r23, r1
     e20:	81 f5       	brne	.+96     	; 0xe82 <dir_seek+0xb4>
     e22:	80 81       	ld	r24, Z
     e24:	83 30       	cpi	r24, 0x03	; 3
     e26:	49 f4       	brne	.+18     	; 0xe3a <dir_seek+0x6c>
		clst = dj->fs->dirbase;
     e28:	46 a1       	ldd	r20, Z+38	; 0x26
     e2a:	57 a1       	ldd	r21, Z+39	; 0x27
     e2c:	60 a5       	ldd	r22, Z+40	; 0x28
     e2e:	71 a5       	ldd	r23, Z+41	; 0x29

	if (clst == 0) {	/* Static table */
     e30:	41 15       	cp	r20, r1
     e32:	51 05       	cpc	r21, r1
     e34:	61 05       	cpc	r22, r1
     e36:	71 05       	cpc	r23, r1
     e38:	21 f5       	brne	.+72     	; 0xe82 <dir_seek+0xb4>
		dj->clust = clst;
     e3a:	f6 01       	movw	r30, r12
     e3c:	12 86       	std	Z+10, r1	; 0x0a
     e3e:	13 86       	std	Z+11, r1	; 0x0b
     e40:	14 86       	std	Z+12, r1	; 0x0c
     e42:	15 86       	std	Z+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
     e44:	01 90       	ld	r0, Z+
     e46:	f0 81       	ld	r31, Z
     e48:	e0 2d       	mov	r30, r0
     e4a:	80 85       	ldd	r24, Z+8	; 0x08
     e4c:	91 85       	ldd	r25, Z+9	; 0x09
     e4e:	a8 16       	cp	r10, r24
     e50:	b9 06       	cpc	r11, r25
     e52:	08 f0       	brcs	.+2      	; 0xe56 <dir_seek+0x88>
     e54:	a5 c0       	rjmp	.+330    	; 0xfa0 <dir_seek+0x1d2>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
     e56:	c5 01       	movw	r24, r10
     e58:	24 e0       	ldi	r18, 0x04	; 4
     e5a:	96 95       	lsr	r25
     e5c:	87 95       	ror	r24
     e5e:	2a 95       	dec	r18
     e60:	e1 f7       	brne	.-8      	; 0xe5a <dir_seek+0x8c>
     e62:	a0 e0       	ldi	r26, 0x00	; 0
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	26 a1       	ldd	r18, Z+38	; 0x26
     e68:	37 a1       	ldd	r19, Z+39	; 0x27
     e6a:	40 a5       	ldd	r20, Z+40	; 0x28
     e6c:	51 a5       	ldd	r21, Z+41	; 0x29
     e6e:	82 0f       	add	r24, r18
     e70:	93 1f       	adc	r25, r19
     e72:	a4 1f       	adc	r26, r20
     e74:	b5 1f       	adc	r27, r21
     e76:	f6 01       	movw	r30, r12
     e78:	86 87       	std	Z+14, r24	; 0x0e
     e7a:	97 87       	std	Z+15, r25	; 0x0f
     e7c:	a0 8b       	std	Z+16, r26	; 0x10
     e7e:	b1 8b       	std	Z+17, r27	; 0x11
     e80:	7b c0       	rjmp	.+246    	; 0xf78 <dir_seek+0x1aa>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
     e82:	82 81       	ldd	r24, Z+2	; 0x02
     e84:	08 2f       	mov	r16, r24
     e86:	10 e0       	ldi	r17, 0x00	; 0
     e88:	84 e0       	ldi	r24, 0x04	; 4
     e8a:	00 0f       	add	r16, r16
     e8c:	11 1f       	adc	r17, r17
     e8e:	8a 95       	dec	r24
     e90:	e1 f7       	brne	.-8      	; 0xe8a <dir_seek+0xbc>
     e92:	25 c0       	rjmp	.+74     	; 0xede <dir_seek+0x110>
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
     e94:	ce 01       	movw	r24, r28
     e96:	0e 94 31 06 	call	0xc62	; 0xc62 <get_fat>
     e9a:	ab 01       	movw	r20, r22
     e9c:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
     e9e:	4f 3f       	cpi	r20, 0xFF	; 255
     ea0:	ff ef       	ldi	r31, 0xFF	; 255
     ea2:	5f 07       	cpc	r21, r31
     ea4:	ff ef       	ldi	r31, 0xFF	; 255
     ea6:	6f 07       	cpc	r22, r31
     ea8:	ff ef       	ldi	r31, 0xFF	; 255
     eaa:	7f 07       	cpc	r23, r31
     eac:	19 f4       	brne	.+6      	; 0xeb4 <dir_seek+0xe6>
     eae:	21 e0       	ldi	r18, 0x01	; 1
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	78 c0       	rjmp	.+240    	; 0xfa4 <dir_seek+0x1d6>
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
     eb4:	42 30       	cpi	r20, 0x02	; 2
     eb6:	51 05       	cpc	r21, r1
     eb8:	61 05       	cpc	r22, r1
     eba:	71 05       	cpc	r23, r1
     ebc:	08 f4       	brcc	.+2      	; 0xec0 <dir_seek+0xf2>
     ebe:	70 c0       	rjmp	.+224    	; 0xfa0 <dir_seek+0x1d2>
     ec0:	d6 01       	movw	r26, r12
     ec2:	ed 91       	ld	r30, X+
     ec4:	fc 91       	ld	r31, X
     ec6:	86 8d       	ldd	r24, Z+30	; 0x1e
     ec8:	97 8d       	ldd	r25, Z+31	; 0x1f
     eca:	a0 a1       	ldd	r26, Z+32	; 0x20
     ecc:	b1 a1       	ldd	r27, Z+33	; 0x21
     ece:	48 17       	cp	r20, r24
     ed0:	59 07       	cpc	r21, r25
     ed2:	6a 07       	cpc	r22, r26
     ed4:	7b 07       	cpc	r23, r27
     ed6:	08 f0       	brcs	.+2      	; 0xeda <dir_seek+0x10c>
     ed8:	63 c0       	rjmp	.+198    	; 0xfa0 <dir_seek+0x1d2>
				return FR_INT_ERR;
			idx -= ic;
     eda:	a0 1a       	sub	r10, r16
     edc:	b1 0a       	sbc	r11, r17
     ede:	f6 01       	movw	r30, r12
     ee0:	c0 81       	ld	r28, Z
     ee2:	d1 81       	ldd	r29, Z+1	; 0x01
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
     ee4:	a0 16       	cp	r10, r16
     ee6:	b1 06       	cpc	r11, r17
     ee8:	a8 f6       	brcc	.-86     	; 0xe94 <dir_seek+0xc6>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
     eea:	d6 01       	movw	r26, r12
     eec:	1a 96       	adiw	r26, 0x0a	; 10
     eee:	4d 93       	st	X+, r20
     ef0:	5d 93       	st	X+, r21
     ef2:	6d 93       	st	X+, r22
     ef4:	7c 93       	st	X, r23
     ef6:	1d 97       	sbiw	r26, 0x0d	; 13
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
     ef8:	be ef       	ldi	r27, 0xFE	; 254
     efa:	eb 2e       	mov	r14, r27
     efc:	bf ef       	ldi	r27, 0xFF	; 255
     efe:	fb 2e       	mov	r15, r27
     f00:	bf ef       	ldi	r27, 0xFF	; 255
     f02:	0b 2f       	mov	r16, r27
     f04:	bf ef       	ldi	r27, 0xFF	; 255
     f06:	1b 2f       	mov	r17, r27
     f08:	e4 0e       	add	r14, r20
     f0a:	f5 1e       	adc	r15, r21
     f0c:	06 1f       	adc	r16, r22
     f0e:	17 1f       	adc	r17, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
     f10:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f12:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f14:	a8 a1       	ldd	r26, Y+32	; 0x20
     f16:	b9 a1       	ldd	r27, Y+33	; 0x21
     f18:	02 97       	sbiw	r24, 0x02	; 2
     f1a:	a1 09       	sbc	r26, r1
     f1c:	b1 09       	sbc	r27, r1
     f1e:	e8 16       	cp	r14, r24
     f20:	f9 06       	cpc	r15, r25
     f22:	0a 07       	cpc	r16, r26
     f24:	1b 07       	cpc	r17, r27
     f26:	28 f0       	brcs	.+10     	; 0xf32 <dir_seek+0x164>
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	40 e0       	ldi	r20, 0x00	; 0
     f2e:	50 e0       	ldi	r21, 0x00	; 0
     f30:	12 c0       	rjmp	.+36     	; 0xf56 <dir_seek+0x188>
	return clst * fs->csize + fs->database;
     f32:	2a 81       	ldd	r18, Y+2	; 0x02
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	40 e0       	ldi	r20, 0x00	; 0
     f38:	50 e0       	ldi	r21, 0x00	; 0
     f3a:	c8 01       	movw	r24, r16
     f3c:	b7 01       	movw	r22, r14
     f3e:	0e 94 15 2d 	call	0x5a2a	; 0x5a2a <__mulsi3>
     f42:	9b 01       	movw	r18, r22
     f44:	ac 01       	movw	r20, r24
     f46:	8a a5       	ldd	r24, Y+42	; 0x2a
     f48:	9b a5       	ldd	r25, Y+43	; 0x2b
     f4a:	ac a5       	ldd	r26, Y+44	; 0x2c
     f4c:	bd a5       	ldd	r27, Y+45	; 0x2d
     f4e:	28 0f       	add	r18, r24
     f50:	39 1f       	adc	r19, r25
     f52:	4a 1f       	adc	r20, r26
     f54:	5b 1f       	adc	r21, r27
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
     f56:	c5 01       	movw	r24, r10
     f58:	a4 e0       	ldi	r26, 0x04	; 4
     f5a:	96 95       	lsr	r25
     f5c:	87 95       	ror	r24
     f5e:	aa 95       	dec	r26
     f60:	e1 f7       	brne	.-8      	; 0xf5a <dir_seek+0x18c>
     f62:	a0 e0       	ldi	r26, 0x00	; 0
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	28 0f       	add	r18, r24
     f68:	39 1f       	adc	r19, r25
     f6a:	4a 1f       	adc	r20, r26
     f6c:	5b 1f       	adc	r21, r27
     f6e:	f6 01       	movw	r30, r12
     f70:	26 87       	std	Z+14, r18	; 0x0e
     f72:	37 87       	std	Z+15, r19	; 0x0f
     f74:	40 8b       	std	Z+16, r20	; 0x10
     f76:	51 8b       	std	Z+17, r21	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
     f78:	d6 01       	movw	r26, r12
     f7a:	8d 91       	ld	r24, X+
     f7c:	9c 91       	ld	r25, X
     f7e:	c2 96       	adiw	r24, 0x32	; 50
     f80:	bf e0       	ldi	r27, 0x0F	; 15
     f82:	ab 22       	and	r10, r27
     f84:	bb 24       	eor	r11, r11
     f86:	f5 e0       	ldi	r31, 0x05	; 5
     f88:	aa 0c       	add	r10, r10
     f8a:	bb 1c       	adc	r11, r11
     f8c:	fa 95       	dec	r31
     f8e:	e1 f7       	brne	.-8      	; 0xf88 <dir_seek+0x1ba>
     f90:	8a 0d       	add	r24, r10
     f92:	9b 1d       	adc	r25, r11
     f94:	f6 01       	movw	r30, r12
     f96:	93 8b       	std	Z+19, r25	; 0x13
     f98:	82 8b       	std	Z+18, r24	; 0x12
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <dir_seek+0x1d6>

	return FR_OK;	/* Seek succeeded */
     fa0:	22 e0       	ldi	r18, 0x02	; 2
     fa2:	30 e0       	ldi	r19, 0x00	; 0
}
     fa4:	c9 01       	movw	r24, r18
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
     faa:	ea e0       	ldi	r30, 0x0A	; 10
     fac:	0c 94 9a 2d 	jmp	0x5b34	; 0x5b34 <__epilogue_restores__+0x10>

00000fb0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
     fb0:	a4 e0       	ldi	r26, 0x04	; 4
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	ee ed       	ldi	r30, 0xDE	; 222
     fb6:	f7 e0       	ldi	r31, 0x07	; 7
     fb8:	0c 94 76 2d 	jmp	0x5aec	; 0x5aec <__prologue_saves__>
     fbc:	1c 01       	movw	r2, r24
     fbe:	2a 01       	movw	r4, r20
     fc0:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl, mcl;


	mcl = fs->max_clust;
     fc2:	dc 01       	movw	r26, r24
     fc4:	5e 96       	adiw	r26, 0x1e	; 30
     fc6:	8d 91       	ld	r24, X+
     fc8:	9d 91       	ld	r25, X+
     fca:	0d 90       	ld	r0, X+
     fcc:	bc 91       	ld	r27, X
     fce:	a0 2d       	mov	r26, r0
     fd0:	89 83       	std	Y+1, r24	; 0x01
     fd2:	9a 83       	std	Y+2, r25	; 0x02
     fd4:	ab 83       	std	Y+3, r26	; 0x03
     fd6:	bc 83       	std	Y+4, r27	; 0x04
	if (clst == 0) {		/* Create new chain */
     fd8:	41 15       	cp	r20, r1
     fda:	51 05       	cpc	r21, r1
     fdc:	61 05       	cpc	r22, r1
     fde:	71 05       	cpc	r23, r1
     fe0:	81 f4       	brne	.+32     	; 0x1002 <create_chain+0x52>
		scl = fs->last_clust;			/* Get suggested start point */
     fe2:	f1 01       	movw	r30, r2
     fe4:	82 84       	ldd	r8, Z+10	; 0x0a
     fe6:	93 84       	ldd	r9, Z+11	; 0x0b
     fe8:	a4 84       	ldd	r10, Z+12	; 0x0c
     fea:	b5 84       	ldd	r11, Z+13	; 0x0d
		if (scl == 0 || scl >= mcl) scl = 1;
     fec:	81 14       	cp	r8, r1
     fee:	91 04       	cpc	r9, r1
     ff0:	a1 04       	cpc	r10, r1
     ff2:	b1 04       	cpc	r11, r1
     ff4:	11 f1       	breq	.+68     	; 0x103a <create_chain+0x8a>
     ff6:	88 16       	cp	r8, r24
     ff8:	99 06       	cpc	r9, r25
     ffa:	aa 06       	cpc	r10, r26
     ffc:	bb 06       	cpc	r11, r27
     ffe:	e8 f4       	brcc	.+58     	; 0x103a <create_chain+0x8a>
    1000:	21 c0       	rjmp	.+66     	; 0x1044 <create_chain+0x94>
	}
	else {					/* Stretch existing chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    1002:	c1 01       	movw	r24, r2
    1004:	0e 94 31 06 	call	0xc62	; 0xc62 <get_fat>
    1008:	9b 01       	movw	r18, r22
    100a:	ac 01       	movw	r20, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
    100c:	62 30       	cpi	r22, 0x02	; 2
    100e:	71 05       	cpc	r23, r1
    1010:	81 05       	cpc	r24, r1
    1012:	91 05       	cpc	r25, r1
    1014:	28 f4       	brcc	.+10     	; 0x1020 <create_chain+0x70>
    1016:	21 e0       	ldi	r18, 0x01	; 1
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	40 e0       	ldi	r20, 0x00	; 0
    101c:	50 e0       	ldi	r21, 0x00	; 0
    101e:	93 c0       	rjmp	.+294    	; 0x1146 <__stack+0x47>
		if (cs < mcl) return cs;		/* It is already followed by next cluster */
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	9a 81       	ldd	r25, Y+2	; 0x02
    1024:	ab 81       	ldd	r26, Y+3	; 0x03
    1026:	bc 81       	ldd	r27, Y+4	; 0x04
    1028:	28 17       	cp	r18, r24
    102a:	39 07       	cpc	r19, r25
    102c:	4a 07       	cpc	r20, r26
    102e:	5b 07       	cpc	r21, r27
    1030:	08 f4       	brcc	.+2      	; 0x1034 <create_chain+0x84>
    1032:	89 c0       	rjmp	.+274    	; 0x1146 <__stack+0x47>
    1034:	53 01       	movw	r10, r6
    1036:	42 01       	movw	r8, r4
    1038:	05 c0       	rjmp	.+10     	; 0x1044 <create_chain+0x94>
    103a:	41 e0       	ldi	r20, 0x01	; 1
    103c:	84 2e       	mov	r8, r20
    103e:	91 2c       	mov	r9, r1
    1040:	a1 2c       	mov	r10, r1
    1042:	b1 2c       	mov	r11, r1
    1044:	75 01       	movw	r14, r10
    1046:	64 01       	movw	r12, r8
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    1048:	08 94       	sec
    104a:	c1 1c       	adc	r12, r1
    104c:	d1 1c       	adc	r13, r1
    104e:	e1 1c       	adc	r14, r1
    1050:	f1 1c       	adc	r15, r1
		if (ncl >= mcl) {				/* Wrap around */
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	9a 81       	ldd	r25, Y+2	; 0x02
    1056:	ab 81       	ldd	r26, Y+3	; 0x03
    1058:	bc 81       	ldd	r27, Y+4	; 0x04
    105a:	c8 16       	cp	r12, r24
    105c:	d9 06       	cpc	r13, r25
    105e:	ea 06       	cpc	r14, r26
    1060:	fb 06       	cpc	r15, r27
    1062:	60 f0       	brcs	.+24     	; 0x107c <create_chain+0xcc>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free custer */
    1064:	92 e0       	ldi	r25, 0x02	; 2
    1066:	89 16       	cp	r8, r25
    1068:	91 04       	cpc	r9, r1
    106a:	a1 04       	cpc	r10, r1
    106c:	b1 04       	cpc	r11, r1
    106e:	08 f4       	brcc	.+2      	; 0x1072 <create_chain+0xc2>
    1070:	61 c0       	rjmp	.+194    	; 0x1134 <__stack+0x35>
    1072:	32 e0       	ldi	r19, 0x02	; 2
    1074:	c3 2e       	mov	r12, r19
    1076:	d1 2c       	mov	r13, r1
    1078:	e1 2c       	mov	r14, r1
    107a:	f1 2c       	mov	r15, r1
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    107c:	c1 01       	movw	r24, r2
    107e:	b7 01       	movw	r22, r14
    1080:	a6 01       	movw	r20, r12
    1082:	0e 94 31 06 	call	0xc62	; 0xc62 <get_fat>
    1086:	9b 01       	movw	r18, r22
    1088:	ac 01       	movw	r20, r24
		if (cs == 0) break;				/* Found a free cluster */
    108a:	61 15       	cp	r22, r1
    108c:	71 05       	cpc	r23, r1
    108e:	81 05       	cpc	r24, r1
    1090:	91 05       	cpc	r25, r1
    1092:	a9 f0       	breq	.+42     	; 0x10be <create_chain+0x10e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
    1094:	6f 3f       	cpi	r22, 0xFF	; 255
    1096:	af ef       	ldi	r26, 0xFF	; 255
    1098:	7a 07       	cpc	r23, r26
    109a:	af ef       	ldi	r26, 0xFF	; 255
    109c:	8a 07       	cpc	r24, r26
    109e:	af ef       	ldi	r26, 0xFF	; 255
    10a0:	9a 07       	cpc	r25, r26
    10a2:	09 f4       	brne	.+2      	; 0x10a6 <create_chain+0xf6>
    10a4:	50 c0       	rjmp	.+160    	; 0x1146 <__stack+0x47>
    10a6:	61 30       	cpi	r22, 0x01	; 1
    10a8:	71 05       	cpc	r23, r1
    10aa:	81 05       	cpc	r24, r1
    10ac:	91 05       	cpc	r25, r1
    10ae:	09 f4       	brne	.+2      	; 0x10b2 <create_chain+0x102>
    10b0:	4a c0       	rjmp	.+148    	; 0x1146 <__stack+0x47>
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
    10b2:	c8 14       	cp	r12, r8
    10b4:	d9 04       	cpc	r13, r9
    10b6:	ea 04       	cpc	r14, r10
    10b8:	fb 04       	cpc	r15, r11
    10ba:	31 f6       	brne	.-116    	; 0x1048 <create_chain+0x98>
    10bc:	3b c0       	rjmp	.+118    	; 0x1134 <__stack+0x35>
    10be:	bc 2c       	mov	r11, r12
    10c0:	ad 2c       	mov	r10, r13
    10c2:	9e 2c       	mov	r9, r14
    10c4:	8f 2c       	mov	r8, r15
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
    10c6:	c1 01       	movw	r24, r2
    10c8:	a6 01       	movw	r20, r12
    10ca:	b7 01       	movw	r22, r14
    10cc:	0f ef       	ldi	r16, 0xFF	; 255
    10ce:	1f ef       	ldi	r17, 0xFF	; 255
    10d0:	2f ef       	ldi	r18, 0xFF	; 255
    10d2:	3f e0       	ldi	r19, 0x0F	; 15
    10d4:	0e 94 67 05 	call	0xace	; 0xace <put_fat>
    10d8:	89 2b       	or	r24, r25
    10da:	89 f5       	brne	.+98     	; 0x113e <__stack+0x3f>
		return 0xFFFFFFFF;
	if (clst != 0) {					/* Link it to the previous one if needed */
    10dc:	41 14       	cp	r4, r1
    10de:	51 04       	cpc	r5, r1
    10e0:	61 04       	cpc	r6, r1
    10e2:	71 04       	cpc	r7, r1
    10e4:	49 f0       	breq	.+18     	; 0x10f8 <create_chain+0x148>
		if (put_fat(fs, clst, ncl))
    10e6:	c1 01       	movw	r24, r2
    10e8:	b3 01       	movw	r22, r6
    10ea:	a2 01       	movw	r20, r4
    10ec:	86 01       	movw	r16, r12
    10ee:	97 01       	movw	r18, r14
    10f0:	0e 94 67 05 	call	0xace	; 0xace <put_fat>
    10f4:	89 2b       	or	r24, r25
    10f6:	19 f5       	brne	.+70     	; 0x113e <__stack+0x3f>
			return 0xFFFFFFFF;
	}

	fs->last_clust = ncl;				/* Update FSINFO */
    10f8:	f1 01       	movw	r30, r2
    10fa:	b2 86       	std	Z+10, r11	; 0x0a
    10fc:	a3 86       	std	Z+11, r10	; 0x0b
    10fe:	94 86       	std	Z+12, r9	; 0x0c
    1100:	85 86       	std	Z+13, r8	; 0x0d
	if (fs->free_clust != 0xFFFFFFFF) {
    1102:	86 85       	ldd	r24, Z+14	; 0x0e
    1104:	97 85       	ldd	r25, Z+15	; 0x0f
    1106:	a0 89       	ldd	r26, Z+16	; 0x10
    1108:	b1 89       	ldd	r27, Z+17	; 0x11
    110a:	8f 3f       	cpi	r24, 0xFF	; 255
    110c:	ff ef       	ldi	r31, 0xFF	; 255
    110e:	9f 07       	cpc	r25, r31
    1110:	ff ef       	ldi	r31, 0xFF	; 255
    1112:	af 07       	cpc	r26, r31
    1114:	ff ef       	ldi	r31, 0xFF	; 255
    1116:	bf 07       	cpc	r27, r31
    1118:	51 f0       	breq	.+20     	; 0x112e <__stack+0x2f>
		fs->free_clust--;
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	a1 09       	sbc	r26, r1
    111e:	b1 09       	sbc	r27, r1
    1120:	f1 01       	movw	r30, r2
    1122:	86 87       	std	Z+14, r24	; 0x0e
    1124:	97 87       	std	Z+15, r25	; 0x0f
    1126:	a0 8b       	std	Z+16, r26	; 0x10
    1128:	b1 8b       	std	Z+17, r27	; 0x11
		fs->fsi_flag = 1;
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	85 83       	std	Z+5, r24	; 0x05
    112e:	a7 01       	movw	r20, r14
    1130:	96 01       	movw	r18, r12
    1132:	09 c0       	rjmp	.+18     	; 0x1146 <__stack+0x47>
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	40 e0       	ldi	r20, 0x00	; 0
    113a:	50 e0       	ldi	r21, 0x00	; 0
    113c:	04 c0       	rjmp	.+8      	; 0x1146 <__stack+0x47>
    113e:	2f ef       	ldi	r18, 0xFF	; 255
    1140:	3f ef       	ldi	r19, 0xFF	; 255
    1142:	4f ef       	ldi	r20, 0xFF	; 255
    1144:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return ncl;		/* Return new cluster number */
}
    1146:	b9 01       	movw	r22, r18
    1148:	ca 01       	movw	r24, r20
    114a:	24 96       	adiw	r28, 0x04	; 4
    114c:	e2 e1       	ldi	r30, 0x12	; 18
    114e:	0c 94 92 2d 	jmp	0x5b24	; 0x5b24 <__epilogue_restores__>

00001152 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    1152:	a6 e0       	ldi	r26, 0x06	; 6
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	ef ea       	ldi	r30, 0xAF	; 175
    1158:	f8 e0       	ldi	r31, 0x08	; 8
    115a:	0c 94 76 2d 	jmp	0x5aec	; 0x5aec <__prologue_saves__>
    115e:	9e 83       	std	Y+6, r25	; 0x06
    1160:	8d 83       	std	Y+5, r24	; 0x05
    1162:	3a 01       	movw	r6, r20
    1164:	4b 01       	movw	r8, r22
	FRESULT res;
	DWORD clst, bcs, nsect, ifptr;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    1166:	dc 01       	movw	r26, r24
    1168:	12 96       	adiw	r26, 0x02	; 2
    116a:	6d 91       	ld	r22, X+
    116c:	7c 91       	ld	r23, X
    116e:	13 97       	sbiw	r26, 0x03	; 3
    1170:	8d 91       	ld	r24, X+
    1172:	9c 91       	ld	r25, X
    1174:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <validate>
    1178:	9c 83       	std	Y+4, r25	; 0x04
    117a:	8b 83       	std	Y+3, r24	; 0x03
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    117c:	89 2b       	or	r24, r25
    117e:	09 f0       	breq	.+2      	; 0x1182 <f_lseek+0x30>
    1180:	c7 c1       	rjmp	.+910    	; 0x1510 <f_lseek+0x3be>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    1182:	ed 81       	ldd	r30, Y+5	; 0x05
    1184:	fe 81       	ldd	r31, Y+6	; 0x06
    1186:	84 81       	ldd	r24, Z+4	; 0x04
    1188:	87 fd       	sbrc	r24, 7
    118a:	92 c0       	rjmp	.+292    	; 0x12b0 <f_lseek+0x15e>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    118c:	ad 81       	ldd	r26, Y+5	; 0x05
    118e:	be 81       	ldd	r27, Y+6	; 0x06
    1190:	1a 96       	adiw	r26, 0x0a	; 10
    1192:	ad 90       	ld	r10, X+
    1194:	bd 90       	ld	r11, X+
    1196:	cd 90       	ld	r12, X+
    1198:	dc 90       	ld	r13, X
    119a:	1d 97       	sbiw	r26, 0x0d	; 13
    119c:	a6 14       	cp	r10, r6
    119e:	b7 04       	cpc	r11, r7
    11a0:	c8 04       	cpc	r12, r8
    11a2:	d9 04       	cpc	r13, r9
    11a4:	10 f4       	brcc	.+4      	; 0x11aa <f_lseek+0x58>
    11a6:	81 ff       	sbrs	r24, 1
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <f_lseek+0x5c>
    11aa:	64 01       	movw	r12, r8
    11ac:	53 01       	movw	r10, r6
#if !_FS_READONLY
		 && !(fp->flag & FA_WRITE)
#endif
		) ofs = fp->fsize;

	ifptr = fp->fptr;
    11ae:	ed 81       	ldd	r30, Y+5	; 0x05
    11b0:	fe 81       	ldd	r31, Y+6	; 0x06
    11b2:	26 81       	ldd	r18, Z+6	; 0x06
    11b4:	37 81       	ldd	r19, Z+7	; 0x07
    11b6:	40 85       	ldd	r20, Z+8	; 0x08
    11b8:	51 85       	ldd	r21, Z+9	; 0x09
	fp->fptr = nsect = 0; fp->csect = 255;
    11ba:	16 82       	std	Z+6, r1	; 0x06
    11bc:	17 82       	std	Z+7, r1	; 0x07
    11be:	10 86       	std	Z+8, r1	; 0x08
    11c0:	11 86       	std	Z+9, r1	; 0x09
    11c2:	8f ef       	ldi	r24, 0xFF	; 255
    11c4:	85 83       	std	Z+5, r24	; 0x05
	if (ofs > 0) {
    11c6:	a1 14       	cp	r10, r1
    11c8:	b1 04       	cpc	r11, r1
    11ca:	c1 04       	cpc	r12, r1
    11cc:	d1 04       	cpc	r13, r1
    11ce:	09 f4       	brne	.+2      	; 0x11d2 <f_lseek+0x80>
    11d0:	6b c1       	rjmp	.+726    	; 0x14a8 <f_lseek+0x356>
		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    11d2:	01 90       	ld	r0, Z+
    11d4:	f0 81       	ld	r31, Z
    11d6:	e0 2d       	mov	r30, r0
    11d8:	fa 83       	std	Y+2, r31	; 0x02
    11da:	e9 83       	std	Y+1, r30	; 0x01
    11dc:	82 81       	ldd	r24, Z+2	; 0x02
    11de:	68 2e       	mov	r6, r24
    11e0:	77 24       	eor	r7, r7
    11e2:	88 24       	eor	r8, r8
    11e4:	99 24       	eor	r9, r9
    11e6:	69 e0       	ldi	r22, 0x09	; 9
    11e8:	66 0c       	add	r6, r6
    11ea:	77 1c       	adc	r7, r7
    11ec:	88 1c       	adc	r8, r8
    11ee:	99 1c       	adc	r9, r9
    11f0:	6a 95       	dec	r22
    11f2:	d1 f7       	brne	.-12     	; 0x11e8 <f_lseek+0x96>
		if (ifptr > 0 &&
    11f4:	21 15       	cp	r18, r1
    11f6:	31 05       	cpc	r19, r1
    11f8:	41 05       	cpc	r20, r1
    11fa:	51 05       	cpc	r21, r1
    11fc:	c1 f1       	breq	.+112    	; 0x126e <f_lseek+0x11c>
    11fe:	19 01       	movw	r2, r18
    1200:	2a 01       	movw	r4, r20
    1202:	08 94       	sec
    1204:	21 08       	sbc	r2, r1
    1206:	31 08       	sbc	r3, r1
    1208:	41 08       	sbc	r4, r1
    120a:	51 08       	sbc	r5, r1
    120c:	c6 01       	movw	r24, r12
    120e:	b5 01       	movw	r22, r10
    1210:	61 50       	subi	r22, 0x01	; 1
    1212:	70 40       	sbci	r23, 0x00	; 0
    1214:	80 40       	sbci	r24, 0x00	; 0
    1216:	90 40       	sbci	r25, 0x00	; 0
    1218:	a4 01       	movw	r20, r8
    121a:	93 01       	movw	r18, r6
    121c:	0e 94 54 2d 	call	0x5aa8	; 0x5aa8 <__udivmodsi4>
    1220:	79 01       	movw	r14, r18
    1222:	8a 01       	movw	r16, r20
    1224:	c2 01       	movw	r24, r4
    1226:	b1 01       	movw	r22, r2
    1228:	a4 01       	movw	r20, r8
    122a:	93 01       	movw	r18, r6
    122c:	0e 94 54 2d 	call	0x5aa8	; 0x5aa8 <__udivmodsi4>
    1230:	e2 16       	cp	r14, r18
    1232:	f3 06       	cpc	r15, r19
    1234:	04 07       	cpc	r16, r20
    1236:	15 07       	cpc	r17, r21
    1238:	d0 f0       	brcs	.+52     	; 0x126e <f_lseek+0x11c>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    123a:	88 27       	eor	r24, r24
    123c:	99 27       	eor	r25, r25
    123e:	dc 01       	movw	r26, r24
    1240:	86 19       	sub	r24, r6
    1242:	97 09       	sbc	r25, r7
    1244:	a8 09       	sbc	r26, r8
    1246:	b9 09       	sbc	r27, r9
    1248:	82 21       	and	r24, r2
    124a:	93 21       	and	r25, r3
    124c:	a4 21       	and	r26, r4
    124e:	b5 21       	and	r27, r5
    1250:	ed 81       	ldd	r30, Y+5	; 0x05
    1252:	fe 81       	ldd	r31, Y+6	; 0x06
    1254:	86 83       	std	Z+6, r24	; 0x06
    1256:	97 83       	std	Z+7, r25	; 0x07
    1258:	a0 87       	std	Z+8, r26	; 0x08
    125a:	b1 87       	std	Z+9, r27	; 0x09
			ofs -= fp->fptr;
    125c:	a8 1a       	sub	r10, r24
    125e:	b9 0a       	sbc	r11, r25
    1260:	ca 0a       	sbc	r12, r26
    1262:	db 0a       	sbc	r13, r27
			clst = fp->curr_clust;
    1264:	42 89       	ldd	r20, Z+18	; 0x12
    1266:	53 89       	ldd	r21, Z+19	; 0x13
    1268:	64 89       	ldd	r22, Z+20	; 0x14
    126a:	75 89       	ldd	r23, Z+21	; 0x15
    126c:	47 c0       	rjmp	.+142    	; 0x12fc <f_lseek+0x1aa>
		} else {									/* When seek to back cluster, */
			clst = fp->org_clust;					/* start from the first cluster */
    126e:	ad 81       	ldd	r26, Y+5	; 0x05
    1270:	be 81       	ldd	r27, Y+6	; 0x06
    1272:	1e 96       	adiw	r26, 0x0e	; 14
    1274:	4d 91       	ld	r20, X+
    1276:	5d 91       	ld	r21, X+
    1278:	6d 91       	ld	r22, X+
    127a:	7c 91       	ld	r23, X
    127c:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
			if (clst == 0) {						/* If no cluster chain, create a new chain */
    127e:	41 15       	cp	r20, r1
    1280:	51 05       	cpc	r21, r1
    1282:	61 05       	cpc	r22, r1
    1284:	71 05       	cpc	r23, r1
    1286:	a1 f5       	brne	.+104    	; 0x12f0 <f_lseek+0x19e>
				clst = create_chain(fp->fs, 0);
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	9a 81       	ldd	r25, Y+2	; 0x02
    128c:	40 e0       	ldi	r20, 0x00	; 0
    128e:	50 e0       	ldi	r21, 0x00	; 0
    1290:	60 e0       	ldi	r22, 0x00	; 0
    1292:	70 e0       	ldi	r23, 0x00	; 0
    1294:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <create_chain>
    1298:	ab 01       	movw	r20, r22
    129a:	bc 01       	movw	r22, r24
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    129c:	41 30       	cpi	r20, 0x01	; 1
    129e:	51 05       	cpc	r21, r1
    12a0:	61 05       	cpc	r22, r1
    12a2:	71 05       	cpc	r23, r1
    12a4:	51 f4       	brne	.+20     	; 0x12ba <f_lseek+0x168>
    12a6:	ed 81       	ldd	r30, Y+5	; 0x05
    12a8:	fe 81       	ldd	r31, Y+6	; 0x06
    12aa:	84 81       	ldd	r24, Z+4	; 0x04
    12ac:	80 68       	ori	r24, 0x80	; 128
    12ae:	84 83       	std	Z+4, r24	; 0x04
    12b0:	82 e0       	ldi	r24, 0x02	; 2
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	9c 83       	std	Y+4, r25	; 0x04
    12b6:	8b 83       	std	Y+3, r24	; 0x03
    12b8:	2b c1       	rjmp	.+598    	; 0x1510 <f_lseek+0x3be>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    12ba:	4f 3f       	cpi	r20, 0xFF	; 255
    12bc:	9f ef       	ldi	r25, 0xFF	; 255
    12be:	59 07       	cpc	r21, r25
    12c0:	9f ef       	ldi	r25, 0xFF	; 255
    12c2:	69 07       	cpc	r22, r25
    12c4:	9f ef       	ldi	r25, 0xFF	; 255
    12c6:	79 07       	cpc	r23, r25
    12c8:	59 f4       	brne	.+22     	; 0x12e0 <f_lseek+0x18e>
    12ca:	ad 81       	ldd	r26, Y+5	; 0x05
    12cc:	be 81       	ldd	r27, Y+6	; 0x06
    12ce:	14 96       	adiw	r26, 0x04	; 4
    12d0:	8c 91       	ld	r24, X
    12d2:	14 97       	sbiw	r26, 0x04	; 4
    12d4:	80 68       	ori	r24, 0x80	; 128
    12d6:	14 96       	adiw	r26, 0x04	; 4
    12d8:	8c 93       	st	X, r24
    12da:	e1 e0       	ldi	r30, 0x01	; 1
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	d7 c0       	rjmp	.+430    	; 0x148e <f_lseek+0x33c>
				fp->org_clust = clst;
    12e0:	ad 81       	ldd	r26, Y+5	; 0x05
    12e2:	be 81       	ldd	r27, Y+6	; 0x06
    12e4:	1e 96       	adiw	r26, 0x0e	; 14
    12e6:	4d 93       	st	X+, r20
    12e8:	5d 93       	st	X+, r21
    12ea:	6d 93       	st	X+, r22
    12ec:	7c 93       	st	X, r23
    12ee:	51 97       	sbiw	r26, 0x11	; 17
			}
#endif
			fp->curr_clust = clst;
    12f0:	ed 81       	ldd	r30, Y+5	; 0x05
    12f2:	fe 81       	ldd	r31, Y+6	; 0x06
    12f4:	42 8b       	std	Z+18, r20	; 0x12
    12f6:	53 8b       	std	Z+19, r21	; 0x13
    12f8:	64 8b       	std	Z+20, r22	; 0x14
    12fa:	75 8b       	std	Z+21, r23	; 0x15
		}
		if (clst != 0) {
    12fc:	41 15       	cp	r20, r1
    12fe:	51 05       	cpc	r21, r1
    1300:	61 05       	cpc	r22, r1
    1302:	71 05       	cpc	r23, r1
    1304:	09 f0       	breq	.+2      	; 0x1308 <f_lseek+0x1b6>
    1306:	59 c0       	rjmp	.+178    	; 0x13ba <f_lseek+0x268>
    1308:	cf c0       	rjmp	.+414    	; 0x14a8 <f_lseek+0x356>
			while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    130a:	ad 81       	ldd	r26, Y+5	; 0x05
    130c:	be 81       	ldd	r27, Y+6	; 0x06
    130e:	14 96       	adiw	r26, 0x04	; 4
    1310:	8c 91       	ld	r24, X
    1312:	14 97       	sbiw	r26, 0x04	; 4
    1314:	2d 91       	ld	r18, X+
    1316:	3c 91       	ld	r19, X
    1318:	81 ff       	sbrs	r24, 1
    131a:	0d c0       	rjmp	.+26     	; 0x1336 <f_lseek+0x1e4>
					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
    131c:	c9 01       	movw	r24, r18
    131e:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <create_chain>
    1322:	ab 01       	movw	r20, r22
    1324:	bc 01       	movw	r22, r24
					if (clst == 0) {				/* When disk gets full, clip file size */
    1326:	41 15       	cp	r20, r1
    1328:	51 05       	cpc	r21, r1
    132a:	61 05       	cpc	r22, r1
    132c:	71 05       	cpc	r23, r1
    132e:	41 f4       	brne	.+16     	; 0x1340 <f_lseek+0x1ee>
    1330:	64 01       	movw	r12, r8
    1332:	53 01       	movw	r10, r6
    1334:	48 c0       	rjmp	.+144    	; 0x13c6 <f_lseek+0x274>
						ofs = bcs; break;
					}
				} else
#endif
					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    1336:	c9 01       	movw	r24, r18
    1338:	0e 94 31 06 	call	0xc62	; 0xc62 <get_fat>
    133c:	ab 01       	movw	r20, r22
    133e:	bc 01       	movw	r22, r24
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    1340:	4f 3f       	cpi	r20, 0xFF	; 255
    1342:	bf ef       	ldi	r27, 0xFF	; 255
    1344:	5b 07       	cpc	r21, r27
    1346:	bf ef       	ldi	r27, 0xFF	; 255
    1348:	6b 07       	cpc	r22, r27
    134a:	bf ef       	ldi	r27, 0xFF	; 255
    134c:	7b 07       	cpc	r23, r27
    134e:	41 f4       	brne	.+16     	; 0x1360 <f_lseek+0x20e>
    1350:	ed 81       	ldd	r30, Y+5	; 0x05
    1352:	fe 81       	ldd	r31, Y+6	; 0x06
    1354:	84 81       	ldd	r24, Z+4	; 0x04
    1356:	80 68       	ori	r24, 0x80	; 128
    1358:	84 83       	std	Z+4, r24	; 0x04
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	aa cf       	rjmp	.-172    	; 0x12b4 <f_lseek+0x162>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
    1360:	42 30       	cpi	r20, 0x02	; 2
    1362:	51 05       	cpc	r21, r1
    1364:	61 05       	cpc	r22, r1
    1366:	71 05       	cpc	r23, r1
    1368:	08 f4       	brcc	.+2      	; 0x136c <f_lseek+0x21a>
    136a:	9d cf       	rjmp	.-198    	; 0x12a6 <f_lseek+0x154>
    136c:	ad 81       	ldd	r26, Y+5	; 0x05
    136e:	be 81       	ldd	r27, Y+6	; 0x06
    1370:	ed 91       	ld	r30, X+
    1372:	fc 91       	ld	r31, X
    1374:	86 8d       	ldd	r24, Z+30	; 0x1e
    1376:	97 8d       	ldd	r25, Z+31	; 0x1f
    1378:	a0 a1       	ldd	r26, Z+32	; 0x20
    137a:	b1 a1       	ldd	r27, Z+33	; 0x21
    137c:	48 17       	cp	r20, r24
    137e:	59 07       	cpc	r21, r25
    1380:	6a 07       	cpc	r22, r26
    1382:	7b 07       	cpc	r23, r27
    1384:	08 f0       	brcs	.+2      	; 0x1388 <f_lseek+0x236>
    1386:	8f cf       	rjmp	.-226    	; 0x12a6 <f_lseek+0x154>
				fp->curr_clust = clst;
    1388:	ad 81       	ldd	r26, Y+5	; 0x05
    138a:	be 81       	ldd	r27, Y+6	; 0x06
    138c:	52 96       	adiw	r26, 0x12	; 18
    138e:	4d 93       	st	X+, r20
    1390:	5d 93       	st	X+, r21
    1392:	6d 93       	st	X+, r22
    1394:	7c 93       	st	X, r23
    1396:	55 97       	sbiw	r26, 0x15	; 21
				fp->fptr += bcs;
    1398:	fd 01       	movw	r30, r26
    139a:	86 81       	ldd	r24, Z+6	; 0x06
    139c:	97 81       	ldd	r25, Z+7	; 0x07
    139e:	a0 85       	ldd	r26, Z+8	; 0x08
    13a0:	b1 85       	ldd	r27, Z+9	; 0x09
    13a2:	86 0d       	add	r24, r6
    13a4:	97 1d       	adc	r25, r7
    13a6:	a8 1d       	adc	r26, r8
    13a8:	b9 1d       	adc	r27, r9
    13aa:	86 83       	std	Z+6, r24	; 0x06
    13ac:	97 83       	std	Z+7, r25	; 0x07
    13ae:	a0 87       	std	Z+8, r26	; 0x08
    13b0:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= bcs;
    13b2:	a6 18       	sub	r10, r6
    13b4:	b7 08       	sbc	r11, r7
    13b6:	c8 08       	sbc	r12, r8
    13b8:	d9 08       	sbc	r13, r9
			}
#endif
			fp->curr_clust = clst;
		}
		if (clst != 0) {
			while (ofs > bcs) {						/* Cluster following loop */
    13ba:	6a 14       	cp	r6, r10
    13bc:	7b 04       	cpc	r7, r11
    13be:	8c 04       	cpc	r8, r12
    13c0:	9d 04       	cpc	r9, r13
    13c2:	08 f4       	brcc	.+2      	; 0x13c6 <f_lseek+0x274>
    13c4:	a2 cf       	rjmp	.-188    	; 0x130a <f_lseek+0x1b8>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
				fp->curr_clust = clst;
				fp->fptr += bcs;
				ofs -= bcs;
			}
			fp->fptr += ofs;
    13c6:	ed 81       	ldd	r30, Y+5	; 0x05
    13c8:	fe 81       	ldd	r31, Y+6	; 0x06
    13ca:	86 81       	ldd	r24, Z+6	; 0x06
    13cc:	97 81       	ldd	r25, Z+7	; 0x07
    13ce:	a0 85       	ldd	r26, Z+8	; 0x08
    13d0:	b1 85       	ldd	r27, Z+9	; 0x09
    13d2:	8a 0d       	add	r24, r10
    13d4:	9b 1d       	adc	r25, r11
    13d6:	ac 1d       	adc	r26, r12
    13d8:	bd 1d       	adc	r27, r13
    13da:	86 83       	std	Z+6, r24	; 0x06
    13dc:	97 83       	std	Z+7, r25	; 0x07
    13de:	a0 87       	std	Z+8, r26	; 0x08
    13e0:	b1 87       	std	Z+9, r27	; 0x09
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
    13e2:	d6 01       	movw	r26, r12
    13e4:	c5 01       	movw	r24, r10
    13e6:	29 e0       	ldi	r18, 0x09	; 9
    13e8:	b6 95       	lsr	r27
    13ea:	a7 95       	ror	r26
    13ec:	97 95       	ror	r25
    13ee:	87 95       	ror	r24
    13f0:	2a 95       	dec	r18
    13f2:	d1 f7       	brne	.-12     	; 0x13e8 <f_lseek+0x296>
    13f4:	e8 2e       	mov	r14, r24
    13f6:	85 83       	std	Z+5, r24	; 0x05
			if (ofs % SS(fp->fs)) {
    13f8:	8f ef       	ldi	r24, 0xFF	; 255
    13fa:	91 e0       	ldi	r25, 0x01	; 1
    13fc:	a0 e0       	ldi	r26, 0x00	; 0
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	a8 22       	and	r10, r24
    1402:	b9 22       	and	r11, r25
    1404:	ca 22       	and	r12, r26
    1406:	db 22       	and	r13, r27
    1408:	a1 14       	cp	r10, r1
    140a:	b1 04       	cpc	r11, r1
    140c:	c1 04       	cpc	r12, r1
    140e:	d1 04       	cpc	r13, r1
    1410:	09 f4       	brne	.+2      	; 0x1414 <f_lseek+0x2c2>
    1412:	4a c0       	rjmp	.+148    	; 0x14a8 <f_lseek+0x356>
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
    1414:	80 80       	ld	r8, Z
    1416:	91 80       	ldd	r9, Z+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    1418:	ee ef       	ldi	r30, 0xFE	; 254
    141a:	ae 2e       	mov	r10, r30
    141c:	ef ef       	ldi	r30, 0xFF	; 255
    141e:	be 2e       	mov	r11, r30
    1420:	ef ef       	ldi	r30, 0xFF	; 255
    1422:	ce 2e       	mov	r12, r30
    1424:	ef ef       	ldi	r30, 0xFF	; 255
    1426:	de 2e       	mov	r13, r30
    1428:	a4 0e       	add	r10, r20
    142a:	b5 1e       	adc	r11, r21
    142c:	c6 1e       	adc	r12, r22
    142e:	d7 1e       	adc	r13, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1430:	f4 01       	movw	r30, r8
    1432:	86 8d       	ldd	r24, Z+30	; 0x1e
    1434:	97 8d       	ldd	r25, Z+31	; 0x1f
    1436:	a0 a1       	ldd	r26, Z+32	; 0x20
    1438:	b1 a1       	ldd	r27, Z+33	; 0x21
    143a:	02 97       	sbiw	r24, 0x02	; 2
    143c:	a1 09       	sbc	r26, r1
    143e:	b1 09       	sbc	r27, r1
    1440:	a8 16       	cp	r10, r24
    1442:	b9 06       	cpc	r11, r25
    1444:	ca 06       	cpc	r12, r26
    1446:	db 06       	cpc	r13, r27
    1448:	c0 f4       	brcc	.+48     	; 0x147a <f_lseek+0x328>
	return clst * fs->csize + fs->database;
    144a:	22 81       	ldd	r18, Z+2	; 0x02
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	40 e0       	ldi	r20, 0x00	; 0
    1450:	50 e0       	ldi	r21, 0x00	; 0
    1452:	c6 01       	movw	r24, r12
    1454:	b5 01       	movw	r22, r10
    1456:	0e 94 15 2d 	call	0x5a2a	; 0x5a2a <__mulsi3>
    145a:	9b 01       	movw	r18, r22
    145c:	ac 01       	movw	r20, r24
    145e:	f4 01       	movw	r30, r8
    1460:	82 a5       	ldd	r24, Z+42	; 0x2a
    1462:	93 a5       	ldd	r25, Z+43	; 0x2b
    1464:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1466:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1468:	28 0f       	add	r18, r24
    146a:	39 1f       	adc	r19, r25
    146c:	4a 1f       	adc	r20, r26
    146e:	5b 1f       	adc	r21, r27
			}
			fp->fptr += ofs;
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
			if (ofs % SS(fp->fs)) {
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    1470:	21 15       	cp	r18, r1
    1472:	31 05       	cpc	r19, r1
    1474:	41 05       	cpc	r20, r1
    1476:	51 05       	cpc	r21, r1
    1478:	69 f4       	brne	.+26     	; 0x1494 <f_lseek+0x342>
    147a:	ad 81       	ldd	r26, Y+5	; 0x05
    147c:	be 81       	ldd	r27, Y+6	; 0x06
    147e:	14 96       	adiw	r26, 0x04	; 4
    1480:	8c 91       	ld	r24, X
    1482:	14 97       	sbiw	r26, 0x04	; 4
    1484:	80 68       	ori	r24, 0x80	; 128
    1486:	14 96       	adiw	r26, 0x04	; 4
    1488:	8c 93       	st	X, r24
    148a:	e2 e0       	ldi	r30, 0x02	; 2
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	fc 83       	std	Y+4, r31	; 0x04
    1490:	eb 83       	std	Y+3, r30	; 0x03
    1492:	3e c0       	rjmp	.+124    	; 0x1510 <f_lseek+0x3be>
				nsect += fp->csect;
    1494:	2e 0d       	add	r18, r14
    1496:	31 1d       	adc	r19, r1
    1498:	41 1d       	adc	r20, r1
    149a:	51 1d       	adc	r21, r1
				fp->csect++;
    149c:	e3 94       	inc	r14
    149e:	ad 81       	ldd	r26, Y+5	; 0x05
    14a0:	be 81       	ldd	r27, Y+6	; 0x06
    14a2:	15 96       	adiw	r26, 0x05	; 5
    14a4:	ec 92       	st	X, r14
    14a6:	04 c0       	rjmp	.+8      	; 0x14b0 <f_lseek+0x35e>
    14a8:	20 e0       	ldi	r18, 0x00	; 0
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	40 e0       	ldi	r20, 0x00	; 0
    14ae:	50 e0       	ldi	r21, 0x00	; 0
			}
		}
	}
	if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
    14b0:	ed 81       	ldd	r30, Y+5	; 0x05
    14b2:	fe 81       	ldd	r31, Y+6	; 0x06
    14b4:	86 81       	ldd	r24, Z+6	; 0x06
    14b6:	97 81       	ldd	r25, Z+7	; 0x07
    14b8:	a0 85       	ldd	r26, Z+8	; 0x08
    14ba:	b1 85       	ldd	r27, Z+9	; 0x09
    14bc:	91 70       	andi	r25, 0x01	; 1
    14be:	a0 70       	andi	r26, 0x00	; 0
    14c0:	b0 70       	andi	r27, 0x00	; 0
    14c2:	00 97       	sbiw	r24, 0x00	; 0
    14c4:	a1 05       	cpc	r26, r1
    14c6:	b1 05       	cpc	r27, r1
    14c8:	69 f0       	breq	.+26     	; 0x14e4 <f_lseek+0x392>
    14ca:	86 89       	ldd	r24, Z+22	; 0x16
    14cc:	97 89       	ldd	r25, Z+23	; 0x17
    14ce:	a0 8d       	ldd	r26, Z+24	; 0x18
    14d0:	b1 8d       	ldd	r27, Z+25	; 0x19
    14d2:	28 17       	cp	r18, r24
    14d4:	39 07       	cpc	r19, r25
    14d6:	4a 07       	cpc	r20, r26
    14d8:	5b 07       	cpc	r21, r27
    14da:	21 f0       	breq	.+8      	; 0x14e4 <f_lseek+0x392>
		}
#endif
		if (disk_read(fp->fs->drive, fp->buf, nsect, 1) != RES_OK)
			ABORT(fp->fs, FR_DISK_ERR);
#endif
		fp->dsect = nsect;
    14dc:	26 8b       	std	Z+22, r18	; 0x16
    14de:	37 8b       	std	Z+23, r19	; 0x17
    14e0:	40 8f       	std	Z+24, r20	; 0x18
    14e2:	51 8f       	std	Z+25, r21	; 0x19
	}
#if !_FS_READONLY
	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
    14e4:	ed 81       	ldd	r30, Y+5	; 0x05
    14e6:	fe 81       	ldd	r31, Y+6	; 0x06
    14e8:	26 81       	ldd	r18, Z+6	; 0x06
    14ea:	37 81       	ldd	r19, Z+7	; 0x07
    14ec:	40 85       	ldd	r20, Z+8	; 0x08
    14ee:	51 85       	ldd	r21, Z+9	; 0x09
    14f0:	82 85       	ldd	r24, Z+10	; 0x0a
    14f2:	93 85       	ldd	r25, Z+11	; 0x0b
    14f4:	a4 85       	ldd	r26, Z+12	; 0x0c
    14f6:	b5 85       	ldd	r27, Z+13	; 0x0d
    14f8:	82 17       	cp	r24, r18
    14fa:	93 07       	cpc	r25, r19
    14fc:	a4 07       	cpc	r26, r20
    14fe:	b5 07       	cpc	r27, r21
    1500:	38 f4       	brcc	.+14     	; 0x1510 <f_lseek+0x3be>
		fp->fsize = fp->fptr;
    1502:	22 87       	std	Z+10, r18	; 0x0a
    1504:	33 87       	std	Z+11, r19	; 0x0b
    1506:	44 87       	std	Z+12, r20	; 0x0c
    1508:	55 87       	std	Z+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    150a:	84 81       	ldd	r24, Z+4	; 0x04
    150c:	80 62       	ori	r24, 0x20	; 32
    150e:	84 83       	std	Z+4, r24	; 0x04
	}
#endif

	LEAVE_FF(fp->fs, res);
}
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	9c 81       	ldd	r25, Y+4	; 0x04
    1514:	26 96       	adiw	r28, 0x06	; 6
    1516:	e2 e1       	ldi	r30, 0x12	; 18
    1518:	0c 94 92 2d 	jmp	0x5b24	; 0x5b24 <__epilogue_restores__>

0000151c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
	DIR *dj,		/* Pointer to directory object */
	BOOL streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
)
{
    151c:	a0 e0       	ldi	r26, 0x00	; 0
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e4 e9       	ldi	r30, 0x94	; 148
    1522:	fa e0       	ldi	r31, 0x0A	; 10
    1524:	0c 94 78 2d 	jmp	0x5af0	; 0x5af0 <__prologue_saves__+0x4>
    1528:	ec 01       	movw	r28, r24
    152a:	6b 01       	movw	r12, r22
	DWORD clst;
	WORD i;


	i = dj->index + 1;
    152c:	6c 80       	ldd	r6, Y+4	; 0x04
    152e:	7d 80       	ldd	r7, Y+5	; 0x05
    1530:	08 94       	sec
    1532:	61 1c       	adc	r6, r1
    1534:	71 1c       	adc	r7, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    1536:	61 14       	cp	r6, r1
    1538:	71 04       	cpc	r7, r1
    153a:	09 f4       	brne	.+2      	; 0x153e <dir_next+0x22>
    153c:	4a c1       	rjmp	.+660    	; 0x17d2 <dir_next+0x2b6>
    153e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1540:	9f 85       	ldd	r25, Y+15	; 0x0f
    1542:	a8 89       	ldd	r26, Y+16	; 0x10
    1544:	b9 89       	ldd	r27, Y+17	; 0x11
    1546:	00 97       	sbiw	r24, 0x00	; 0
    1548:	a1 05       	cpc	r26, r1
    154a:	b1 05       	cpc	r27, r1
    154c:	09 f4       	brne	.+2      	; 0x1550 <dir_next+0x34>
    154e:	41 c1       	rjmp	.+642    	; 0x17d2 <dir_next+0x2b6>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
    1550:	2f e0       	ldi	r18, 0x0F	; 15
    1552:	42 2e       	mov	r4, r18
    1554:	51 2c       	mov	r5, r1
    1556:	46 20       	and	r4, r6
    1558:	57 20       	and	r5, r7
    155a:	41 14       	cp	r4, r1
    155c:	51 04       	cpc	r5, r1
    155e:	09 f0       	breq	.+2      	; 0x1562 <dir_next+0x46>
    1560:	27 c1       	rjmp	.+590    	; 0x17b0 <dir_next+0x294>
		dj->sect++;					/* Next sector */
    1562:	01 96       	adiw	r24, 0x01	; 1
    1564:	a1 1d       	adc	r26, r1
    1566:	b1 1d       	adc	r27, r1
    1568:	8e 87       	std	Y+14, r24	; 0x0e
    156a:	9f 87       	std	Y+15, r25	; 0x0f
    156c:	a8 8b       	std	Y+16, r26	; 0x10
    156e:	b9 8b       	std	Y+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    1570:	4a 85       	ldd	r20, Y+10	; 0x0a
    1572:	5b 85       	ldd	r21, Y+11	; 0x0b
    1574:	6c 85       	ldd	r22, Y+12	; 0x0c
    1576:	7d 85       	ldd	r23, Y+13	; 0x0d
    1578:	e8 81       	ld	r30, Y
    157a:	f9 81       	ldd	r31, Y+1	; 0x01
    157c:	41 15       	cp	r20, r1
    157e:	51 05       	cpc	r21, r1
    1580:	61 05       	cpc	r22, r1
    1582:	71 05       	cpc	r23, r1
    1584:	39 f4       	brne	.+14     	; 0x1594 <dir_next+0x78>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    1586:	80 85       	ldd	r24, Z+8	; 0x08
    1588:	91 85       	ldd	r25, Z+9	; 0x09
    158a:	68 16       	cp	r6, r24
    158c:	79 06       	cpc	r7, r25
    158e:	08 f4       	brcc	.+2      	; 0x1592 <dir_next+0x76>
    1590:	0f c1       	rjmp	.+542    	; 0x17b0 <dir_next+0x294>
    1592:	1f c1       	rjmp	.+574    	; 0x17d2 <dir_next+0x2b6>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    1594:	82 81       	ldd	r24, Z+2	; 0x02
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	01 97       	sbiw	r24, 0x01	; 1
    159a:	93 01       	movw	r18, r6
    159c:	a4 e0       	ldi	r26, 0x04	; 4
    159e:	36 95       	lsr	r19
    15a0:	27 95       	ror	r18
    15a2:	aa 95       	dec	r26
    15a4:	e1 f7       	brne	.-8      	; 0x159e <dir_next+0x82>
    15a6:	82 23       	and	r24, r18
    15a8:	93 23       	and	r25, r19
    15aa:	89 2b       	or	r24, r25
    15ac:	09 f0       	breq	.+2      	; 0x15b0 <dir_next+0x94>
    15ae:	00 c1       	rjmp	.+512    	; 0x17b0 <dir_next+0x294>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    15b0:	cf 01       	movw	r24, r30
    15b2:	0e 94 31 06 	call	0xc62	; 0xc62 <get_fat>
    15b6:	7b 01       	movw	r14, r22
    15b8:	8c 01       	movw	r16, r24
				if (clst <= 1) return FR_INT_ERR;
    15ba:	82 e0       	ldi	r24, 0x02	; 2
    15bc:	e8 16       	cp	r14, r24
    15be:	f1 04       	cpc	r15, r1
    15c0:	01 05       	cpc	r16, r1
    15c2:	11 05       	cpc	r17, r1
    15c4:	08 f4       	brcc	.+2      	; 0x15c8 <dir_next+0xac>
    15c6:	08 c1       	rjmp	.+528    	; 0x17d8 <dir_next+0x2bc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    15c8:	9f ef       	ldi	r25, 0xFF	; 255
    15ca:	e9 16       	cp	r14, r25
    15cc:	9f ef       	ldi	r25, 0xFF	; 255
    15ce:	f9 06       	cpc	r15, r25
    15d0:	9f ef       	ldi	r25, 0xFF	; 255
    15d2:	09 07       	cpc	r16, r25
    15d4:	9f ef       	ldi	r25, 0xFF	; 255
    15d6:	19 07       	cpc	r17, r25
    15d8:	09 f4       	brne	.+2      	; 0x15dc <dir_next+0xc0>
    15da:	01 c1       	rjmp	.+514    	; 0x17de <dir_next+0x2c2>
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
    15dc:	e8 81       	ld	r30, Y
    15de:	f9 81       	ldd	r31, Y+1	; 0x01
    15e0:	86 8d       	ldd	r24, Z+30	; 0x1e
    15e2:	97 8d       	ldd	r25, Z+31	; 0x1f
    15e4:	a0 a1       	ldd	r26, Z+32	; 0x20
    15e6:	b1 a1       	ldd	r27, Z+33	; 0x21
    15e8:	e8 16       	cp	r14, r24
    15ea:	f9 06       	cpc	r15, r25
    15ec:	0a 07       	cpc	r16, r26
    15ee:	1b 07       	cpc	r17, r27
    15f0:	08 f4       	brcc	.+2      	; 0x15f4 <dir_next+0xd8>
    15f2:	a5 c0       	rjmp	.+330    	; 0x173e <dir_next+0x222>
#if !_FS_READONLY
					BYTE c;
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
    15f4:	c1 14       	cp	r12, r1
    15f6:	d1 04       	cpc	r13, r1
    15f8:	09 f4       	brne	.+2      	; 0x15fc <dir_next+0xe0>
    15fa:	eb c0       	rjmp	.+470    	; 0x17d2 <dir_next+0x2b6>
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
    15fc:	4a 85       	ldd	r20, Y+10	; 0x0a
    15fe:	5b 85       	ldd	r21, Y+11	; 0x0b
    1600:	6c 85       	ldd	r22, Y+12	; 0x0c
    1602:	7d 85       	ldd	r23, Y+13	; 0x0d
    1604:	cf 01       	movw	r24, r30
    1606:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <create_chain>
    160a:	7b 01       	movw	r14, r22
    160c:	8c 01       	movw	r16, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    160e:	61 15       	cp	r22, r1
    1610:	71 05       	cpc	r23, r1
    1612:	81 05       	cpc	r24, r1
    1614:	91 05       	cpc	r25, r1
    1616:	19 f4       	brne	.+6      	; 0x161e <dir_next+0x102>
    1618:	27 e0       	ldi	r18, 0x07	; 7
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	e2 c0       	rjmp	.+452    	; 0x17e2 <dir_next+0x2c6>
					if (clst == 1) return FR_INT_ERR;
    161e:	61 30       	cpi	r22, 0x01	; 1
    1620:	71 05       	cpc	r23, r1
    1622:	81 05       	cpc	r24, r1
    1624:	91 05       	cpc	r25, r1
    1626:	09 f4       	brne	.+2      	; 0x162a <dir_next+0x10e>
    1628:	d7 c0       	rjmp	.+430    	; 0x17d8 <dir_next+0x2bc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    162a:	6f 3f       	cpi	r22, 0xFF	; 255
    162c:	bf ef       	ldi	r27, 0xFF	; 255
    162e:	7b 07       	cpc	r23, r27
    1630:	bf ef       	ldi	r27, 0xFF	; 255
    1632:	8b 07       	cpc	r24, r27
    1634:	bf ef       	ldi	r27, 0xFF	; 255
    1636:	9b 07       	cpc	r25, r27
    1638:	09 f4       	brne	.+2      	; 0x163c <dir_next+0x120>
    163a:	d1 c0       	rjmp	.+418    	; 0x17de <dir_next+0x2c2>
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    163c:	88 81       	ld	r24, Y
    163e:	99 81       	ldd	r25, Y+1	; 0x01
    1640:	40 e0       	ldi	r20, 0x00	; 0
    1642:	50 e0       	ldi	r21, 0x00	; 0
    1644:	60 e0       	ldi	r22, 0x00	; 0
    1646:	70 e0       	ldi	r23, 0x00	; 0
    1648:	0e 94 fd 04 	call	0x9fa	; 0x9fa <move_window>
    164c:	89 2b       	or	r24, r25
    164e:	09 f0       	breq	.+2      	; 0x1652 <dir_next+0x136>
    1650:	c6 c0       	rjmp	.+396    	; 0x17de <dir_next+0x2c2>
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    1652:	88 81       	ld	r24, Y
    1654:	99 81       	ldd	r25, Y+1	; 0x01
    1656:	fc 01       	movw	r30, r24
    1658:	f2 96       	adiw	r30, 0x32	; 50
	while (cnt--) *d++ = (char)val;
    165a:	8e 5c       	subi	r24, 0xCE	; 206
    165c:	9d 4f       	sbci	r25, 0xFD	; 253
    165e:	01 c0       	rjmp	.+2      	; 0x1662 <dir_next+0x146>
    1660:	11 92       	st	Z+, r1
    1662:	e8 17       	cp	r30, r24
    1664:	f9 07       	cpc	r31, r25
    1666:	e1 f7       	brne	.-8      	; 0x1660 <dir_next+0x144>
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    1668:	88 80       	ld	r8, Y
    166a:	99 80       	ldd	r9, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    166c:	ee ef       	ldi	r30, 0xFE	; 254
    166e:	ae 2e       	mov	r10, r30
    1670:	ef ef       	ldi	r30, 0xFF	; 255
    1672:	be 2e       	mov	r11, r30
    1674:	ef ef       	ldi	r30, 0xFF	; 255
    1676:	ce 2e       	mov	r12, r30
    1678:	ef ef       	ldi	r30, 0xFF	; 255
    167a:	de 2e       	mov	r13, r30
    167c:	ae 0c       	add	r10, r14
    167e:	bf 1c       	adc	r11, r15
    1680:	c0 1e       	adc	r12, r16
    1682:	d1 1e       	adc	r13, r17
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1684:	f4 01       	movw	r30, r8
    1686:	86 8d       	ldd	r24, Z+30	; 0x1e
    1688:	97 8d       	ldd	r25, Z+31	; 0x1f
    168a:	a0 a1       	ldd	r26, Z+32	; 0x20
    168c:	b1 a1       	ldd	r27, Z+33	; 0x21
    168e:	02 97       	sbiw	r24, 0x02	; 2
    1690:	a1 09       	sbc	r26, r1
    1692:	b1 09       	sbc	r27, r1
    1694:	a8 16       	cp	r10, r24
    1696:	b9 06       	cpc	r11, r25
    1698:	ca 06       	cpc	r12, r26
    169a:	db 06       	cpc	r13, r27
    169c:	28 f0       	brcs	.+10     	; 0x16a8 <dir_next+0x18c>
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	40 e0       	ldi	r20, 0x00	; 0
    16a4:	50 e0       	ldi	r21, 0x00	; 0
    16a6:	15 c0       	rjmp	.+42     	; 0x16d2 <dir_next+0x1b6>
	return clst * fs->csize + fs->database;
    16a8:	d4 01       	movw	r26, r8
    16aa:	12 96       	adiw	r26, 0x02	; 2
    16ac:	2c 91       	ld	r18, X
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	40 e0       	ldi	r20, 0x00	; 0
    16b2:	50 e0       	ldi	r21, 0x00	; 0
    16b4:	c6 01       	movw	r24, r12
    16b6:	b5 01       	movw	r22, r10
    16b8:	0e 94 15 2d 	call	0x5a2a	; 0x5a2a <__mulsi3>
    16bc:	9b 01       	movw	r18, r22
    16be:	ac 01       	movw	r20, r24
    16c0:	f4 01       	movw	r30, r8
    16c2:	82 a5       	ldd	r24, Z+42	; 0x2a
    16c4:	93 a5       	ldd	r25, Z+43	; 0x2b
    16c6:	a4 a5       	ldd	r26, Z+44	; 0x2c
    16c8:	b5 a5       	ldd	r27, Z+45	; 0x2d
    16ca:	28 0f       	add	r18, r24
    16cc:	39 1f       	adc	r19, r25
    16ce:	4a 1f       	adc	r20, r26
    16d0:	5b 1f       	adc	r21, r27
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    16d2:	d4 01       	movw	r26, r8
    16d4:	9e 96       	adiw	r26, 0x2e	; 46
    16d6:	2d 93       	st	X+, r18
    16d8:	3d 93       	st	X+, r19
    16da:	4d 93       	st	X+, r20
    16dc:	5c 93       	st	X, r21
    16de:	d1 97       	sbiw	r26, 0x31	; 49
    16e0:	dd 24       	eor	r13, r13
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
    16e2:	cc 24       	eor	r12, r12
    16e4:	c3 94       	inc	r12
    16e6:	1a c0       	rjmp	.+52     	; 0x171c <dir_next+0x200>
    16e8:	c4 82       	std	Z+4, r12	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    16ea:	88 81       	ld	r24, Y
    16ec:	99 81       	ldd	r25, Y+1	; 0x01
    16ee:	40 e0       	ldi	r20, 0x00	; 0
    16f0:	50 e0       	ldi	r21, 0x00	; 0
    16f2:	60 e0       	ldi	r22, 0x00	; 0
    16f4:	70 e0       	ldi	r23, 0x00	; 0
    16f6:	0e 94 fd 04 	call	0x9fa	; 0x9fa <move_window>
    16fa:	89 2b       	or	r24, r25
    16fc:	09 f0       	breq	.+2      	; 0x1700 <dir_next+0x1e4>
    16fe:	6f c0       	rjmp	.+222    	; 0x17de <dir_next+0x2c2>
						dj->fs->winsect++;
    1700:	e8 81       	ld	r30, Y
    1702:	f9 81       	ldd	r31, Y+1	; 0x01
    1704:	86 a5       	ldd	r24, Z+46	; 0x2e
    1706:	97 a5       	ldd	r25, Z+47	; 0x2f
    1708:	a0 a9       	ldd	r26, Z+48	; 0x30
    170a:	b1 a9       	ldd	r27, Z+49	; 0x31
    170c:	01 96       	adiw	r24, 0x01	; 1
    170e:	a1 1d       	adc	r26, r1
    1710:	b1 1d       	adc	r27, r1
    1712:	86 a7       	std	Z+46, r24	; 0x2e
    1714:	97 a7       	std	Z+47, r25	; 0x2f
    1716:	a0 ab       	std	Z+48, r26	; 0x30
    1718:	b1 ab       	std	Z+49, r27	; 0x31
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    171a:	d3 94       	inc	r13
    171c:	e8 81       	ld	r30, Y
    171e:	f9 81       	ldd	r31, Y+1	; 0x01
    1720:	82 81       	ldd	r24, Z+2	; 0x02
    1722:	d8 16       	cp	r13, r24
    1724:	08 f3       	brcs	.-62     	; 0x16e8 <dir_next+0x1cc>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    1726:	86 a5       	ldd	r24, Z+46	; 0x2e
    1728:	97 a5       	ldd	r25, Z+47	; 0x2f
    172a:	a0 a9       	ldd	r26, Z+48	; 0x30
    172c:	b1 a9       	ldd	r27, Z+49	; 0x31
    172e:	8d 19       	sub	r24, r13
    1730:	91 09       	sbc	r25, r1
    1732:	a1 09       	sbc	r26, r1
    1734:	b1 09       	sbc	r27, r1
    1736:	86 a7       	std	Z+46, r24	; 0x2e
    1738:	97 a7       	std	Z+47, r25	; 0x2f
    173a:	a0 ab       	std	Z+48, r26	; 0x30
    173c:	b1 ab       	std	Z+49, r27	; 0x31
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    173e:	ea 86       	std	Y+10, r14	; 0x0a
    1740:	fb 86       	std	Y+11, r15	; 0x0b
    1742:	0c 87       	std	Y+12, r16	; 0x0c
    1744:	1d 87       	std	Y+13, r17	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    1746:	c8 80       	ld	r12, Y
    1748:	d9 80       	ldd	r13, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    174a:	8e ef       	ldi	r24, 0xFE	; 254
    174c:	9f ef       	ldi	r25, 0xFF	; 255
    174e:	af ef       	ldi	r26, 0xFF	; 255
    1750:	bf ef       	ldi	r27, 0xFF	; 255
    1752:	e8 0e       	add	r14, r24
    1754:	f9 1e       	adc	r15, r25
    1756:	0a 1f       	adc	r16, r26
    1758:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    175a:	f6 01       	movw	r30, r12
    175c:	86 8d       	ldd	r24, Z+30	; 0x1e
    175e:	97 8d       	ldd	r25, Z+31	; 0x1f
    1760:	a0 a1       	ldd	r26, Z+32	; 0x20
    1762:	b1 a1       	ldd	r27, Z+33	; 0x21
    1764:	02 97       	sbiw	r24, 0x02	; 2
    1766:	a1 09       	sbc	r26, r1
    1768:	b1 09       	sbc	r27, r1
    176a:	e8 16       	cp	r14, r24
    176c:	f9 06       	cpc	r15, r25
    176e:	0a 07       	cpc	r16, r26
    1770:	1b 07       	cpc	r17, r27
    1772:	28 f0       	brcs	.+10     	; 0x177e <dir_next+0x262>
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	40 e0       	ldi	r20, 0x00	; 0
    177a:	50 e0       	ldi	r21, 0x00	; 0
    177c:	15 c0       	rjmp	.+42     	; 0x17a8 <dir_next+0x28c>
	return clst * fs->csize + fs->database;
    177e:	d6 01       	movw	r26, r12
    1780:	12 96       	adiw	r26, 0x02	; 2
    1782:	2c 91       	ld	r18, X
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	40 e0       	ldi	r20, 0x00	; 0
    1788:	50 e0       	ldi	r21, 0x00	; 0
    178a:	c8 01       	movw	r24, r16
    178c:	b7 01       	movw	r22, r14
    178e:	0e 94 15 2d 	call	0x5a2a	; 0x5a2a <__mulsi3>
    1792:	9b 01       	movw	r18, r22
    1794:	ac 01       	movw	r20, r24
    1796:	f6 01       	movw	r30, r12
    1798:	82 a5       	ldd	r24, Z+42	; 0x2a
    179a:	93 a5       	ldd	r25, Z+43	; 0x2b
    179c:	a4 a5       	ldd	r26, Z+44	; 0x2c
    179e:	b5 a5       	ldd	r27, Z+45	; 0x2d
    17a0:	28 0f       	add	r18, r24
    17a2:	39 1f       	adc	r19, r25
    17a4:	4a 1f       	adc	r20, r26
    17a6:	5b 1f       	adc	r21, r27
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(dj->fs, clst);
    17a8:	2e 87       	std	Y+14, r18	; 0x0e
    17aa:	3f 87       	std	Y+15, r19	; 0x0f
    17ac:	48 8b       	std	Y+16, r20	; 0x10
    17ae:	59 8b       	std	Y+17, r21	; 0x11
			}
		}
	}

	dj->index = i;
    17b0:	7d 82       	std	Y+5, r7	; 0x05
    17b2:	6c 82       	std	Y+4, r6	; 0x04
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
    17b4:	88 81       	ld	r24, Y
    17b6:	99 81       	ldd	r25, Y+1	; 0x01
    17b8:	c2 96       	adiw	r24, 0x32	; 50
    17ba:	75 e0       	ldi	r23, 0x05	; 5
    17bc:	44 0c       	add	r4, r4
    17be:	55 1c       	adc	r5, r5
    17c0:	7a 95       	dec	r23
    17c2:	e1 f7       	brne	.-8      	; 0x17bc <dir_next+0x2a0>
    17c4:	84 0d       	add	r24, r4
    17c6:	95 1d       	adc	r25, r5
    17c8:	9b 8b       	std	Y+19, r25	; 0x13
    17ca:	8a 8b       	std	Y+18, r24	; 0x12
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	08 c0       	rjmp	.+16     	; 0x17e2 <dir_next+0x2c6>

	return FR_OK;
    17d2:	24 e0       	ldi	r18, 0x04	; 4
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	05 c0       	rjmp	.+10     	; 0x17e2 <dir_next+0x2c6>
    17d8:	22 e0       	ldi	r18, 0x02	; 2
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <dir_next+0x2c6>
    17de:	21 e0       	ldi	r18, 0x01	; 1
    17e0:	30 e0       	ldi	r19, 0x00	; 0
}
    17e2:	c9 01       	movw	r24, r18
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
    17e8:	e0 e1       	ldi	r30, 0x10	; 16
    17ea:	0c 94 94 2d 	jmp	0x5b28	; 0x5b28 <__epilogue_restores__+0x4>

000017ee <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    17ee:	ac e0       	ldi	r26, 0x0C	; 12
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	ed ef       	ldi	r30, 0xFD	; 253
    17f4:	fb e0       	ldi	r31, 0x0B	; 11
    17f6:	0c 94 7e 2d 	jmp	0x5afc	; 0x5afc <__prologue_saves__+0x10>
    17fa:	8c 01       	movw	r16, r24
    17fc:	7b 01       	movw	r14, r22
	FRESULT res;
	NAMEBUF(sfn, lfn);


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    17fe:	dc 01       	movw	r26, r24
    1800:	12 96       	adiw	r26, 0x02	; 2
    1802:	6d 91       	ld	r22, X+
    1804:	7c 91       	ld	r23, X
    1806:	13 97       	sbiw	r26, 0x03	; 3
    1808:	8d 91       	ld	r24, X+
    180a:	9c 91       	ld	r25, X
    180c:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <validate>
	if (res == FR_OK) {
    1810:	00 97       	sbiw	r24, 0x00	; 0
    1812:	81 f4       	brne	.+32     	; 0x1834 <f_readdir+0x46>
		INITBUF((*dj), sfn, lfn);
    1814:	ce 01       	movw	r24, r28
    1816:	01 96       	adiw	r24, 0x01	; 1
    1818:	f8 01       	movw	r30, r16
    181a:	95 8b       	std	Z+21, r25	; 0x15
    181c:	84 8b       	std	Z+20, r24	; 0x14
		if (!fno) {
    181e:	e1 14       	cp	r14, r1
    1820:	f1 04       	cpc	r15, r1
    1822:	19 f0       	breq	.+6      	; 0x182a <f_readdir+0x3c>
    1824:	24 e0       	ldi	r18, 0x04	; 4
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	25 c0       	rjmp	.+74     	; 0x1874 <f_readdir+0x86>
			res = dir_seek(dj, 0);
    182a:	c8 01       	movw	r24, r16
    182c:	60 e0       	ldi	r22, 0x00	; 0
    182e:	70 e0       	ldi	r23, 0x00	; 0
    1830:	0e 94 e7 06 	call	0xdce	; 0xdce <dir_seek>
    1834:	9c 01       	movw	r18, r24
    1836:	ac c0       	rjmp	.+344    	; 0x1990 <f_readdir+0x1a2>
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
    1838:	d8 01       	movw	r26, r16
    183a:	8d 91       	ld	r24, X+
    183c:	9c 91       	ld	r25, X
    183e:	0e 94 fd 04 	call	0x9fa	; 0x9fa <move_window>
    1842:	9c 01       	movw	r18, r24
		if (res != FR_OK) break;
    1844:	00 97       	sbiw	r24, 0x00	; 0
    1846:	19 f5       	brne	.+70     	; 0x188e <f_readdir+0xa0>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    1848:	d8 01       	movw	r26, r16
    184a:	52 96       	adiw	r26, 0x12	; 18
    184c:	ed 91       	ld	r30, X+
    184e:	fc 91       	ld	r31, X
    1850:	53 97       	sbiw	r26, 0x13	; 19
		c = dir[DIR_Name];
    1852:	80 81       	ld	r24, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1854:	88 23       	and	r24, r24
    1856:	09 f4       	brne	.+2      	; 0x185a <f_readdir+0x6c>
    1858:	a0 c0       	rjmp	.+320    	; 0x199a <f_readdir+0x1ac>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    185a:	85 3e       	cpi	r24, 0xE5	; 229
    185c:	19 f0       	breq	.+6      	; 0x1864 <f_readdir+0x76>
    185e:	83 85       	ldd	r24, Z+11	; 0x0b
    1860:	83 ff       	sbrs	r24, 3
    1862:	23 c0       	rjmp	.+70     	; 0x18aa <f_readdir+0xbc>
			break;
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
    1864:	c8 01       	movw	r24, r16
    1866:	60 e0       	ldi	r22, 0x00	; 0
    1868:	70 e0       	ldi	r23, 0x00	; 0
    186a:	0e 94 8e 0a 	call	0x151c	; 0x151c <dir_next>
    186e:	9c 01       	movw	r18, r24
		if (res != FR_OK) break;
    1870:	00 97       	sbiw	r24, 0x00	; 0
    1872:	69 f4       	brne	.+26     	; 0x188e <f_readdir+0xa0>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
    1874:	f8 01       	movw	r30, r16
    1876:	46 85       	ldd	r20, Z+14	; 0x0e
    1878:	57 85       	ldd	r21, Z+15	; 0x0f
    187a:	60 89       	ldd	r22, Z+16	; 0x10
    187c:	71 89       	ldd	r23, Z+17	; 0x11
    187e:	41 15       	cp	r20, r1
    1880:	51 05       	cpc	r21, r1
    1882:	61 05       	cpc	r22, r1
    1884:	71 05       	cpc	r23, r1
    1886:	c1 f6       	brne	.-80     	; 0x1838 <f_readdir+0x4a>
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    1888:	21 15       	cp	r18, r1
    188a:	31 05       	cpc	r19, r1
    188c:	71 f0       	breq	.+28     	; 0x18aa <f_readdir+0xbc>
    188e:	d8 01       	movw	r26, r16
    1890:	1e 96       	adiw	r26, 0x0e	; 14
    1892:	1d 92       	st	X+, r1
    1894:	1d 92       	st	X+, r1
    1896:	1d 92       	st	X+, r1
    1898:	1c 92       	st	X, r1
    189a:	51 97       	sbiw	r26, 0x11	; 17
		INITBUF((*dj), sfn, lfn);
		if (!fno) {
			res = dir_seek(dj, 0);
		} else {
			res = dir_read(dj);
			if (res == FR_NO_FILE) {
    189c:	24 30       	cpi	r18, 0x04	; 4
    189e:	31 05       	cpc	r19, r1
    18a0:	21 f0       	breq	.+8      	; 0x18aa <f_readdir+0xbc>
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    18a2:	21 15       	cp	r18, r1
    18a4:	31 05       	cpc	r19, r1
    18a6:	09 f0       	breq	.+2      	; 0x18aa <f_readdir+0xbc>
    18a8:	73 c0       	rjmp	.+230    	; 0x1990 <f_readdir+0x1a2>
	int i;
	BYTE c, nt, *dir;
	char *p;


	p = fno->fname;
    18aa:	97 01       	movw	r18, r14
    18ac:	27 5f       	subi	r18, 0xF7	; 247
    18ae:	3f 4f       	sbci	r19, 0xFF	; 255
	if (dj->sect) {
    18b0:	f8 01       	movw	r30, r16
    18b2:	86 85       	ldd	r24, Z+14	; 0x0e
    18b4:	97 85       	ldd	r25, Z+15	; 0x0f
    18b6:	a0 89       	ldd	r26, Z+16	; 0x10
    18b8:	b1 89       	ldd	r27, Z+17	; 0x11
    18ba:	00 97       	sbiw	r24, 0x00	; 0
    18bc:	a1 05       	cpc	r26, r1
    18be:	b1 05       	cpc	r27, r1
    18c0:	09 f4       	brne	.+2      	; 0x18c4 <f_readdir+0xd6>
    18c2:	52 c0       	rjmp	.+164    	; 0x1968 <f_readdir+0x17a>
		dir = dj->dir;
    18c4:	42 89       	ldd	r20, Z+18	; 0x12
    18c6:	53 89       	ldd	r21, Z+19	; 0x13
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	90 e0       	ldi	r25, 0x00	; 0
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
    18cc:	fa 01       	movw	r30, r20
    18ce:	e8 0f       	add	r30, r24
    18d0:	f9 1f       	adc	r31, r25
    18d2:	e0 81       	ld	r30, Z
			if (c == ' ') break;
    18d4:	e0 32       	cpi	r30, 0x20	; 32
    18d6:	51 f0       	breq	.+20     	; 0x18ec <f_readdir+0xfe>
			if (c == 0x05) c = 0xE5;
    18d8:	e5 30       	cpi	r30, 0x05	; 5
    18da:	09 f4       	brne	.+2      	; 0x18de <f_readdir+0xf0>
    18dc:	e5 ee       	ldi	r30, 0xE5	; 229
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
    18de:	d9 01       	movw	r26, r18
    18e0:	ed 93       	st	X+, r30
    18e2:	9d 01       	movw	r18, r26

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
    18e4:	01 96       	adiw	r24, 0x01	; 1
    18e6:	88 30       	cpi	r24, 0x08	; 8
    18e8:	91 05       	cpc	r25, r1
    18ea:	81 f7       	brne	.-32     	; 0x18cc <f_readdir+0xde>
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
    18ec:	fa 01       	movw	r30, r20
    18ee:	80 85       	ldd	r24, Z+8	; 0x08
    18f0:	80 32       	cpi	r24, 0x20	; 32
    18f2:	11 f4       	brne	.+4      	; 0x18f8 <f_readdir+0x10a>
    18f4:	f9 01       	movw	r30, r18
    18f6:	10 c0       	rjmp	.+32     	; 0x1918 <f_readdir+0x12a>
			*p++ = '.';
    18f8:	f9 01       	movw	r30, r18
    18fa:	8e e2       	ldi	r24, 0x2E	; 46
    18fc:	81 93       	st	Z+, r24
    18fe:	da 01       	movw	r26, r20
			for (i = 8; i < 11; i++) {
    1900:	2c 5f       	subi	r18, 0xFC	; 252
    1902:	3f 4f       	sbci	r19, 0xFF	; 255
				c = dir[i];
    1904:	18 96       	adiw	r26, 0x08	; 8
    1906:	8c 91       	ld	r24, X
    1908:	18 97       	sbiw	r26, 0x08	; 8
				if (c == ' ') break;
    190a:	80 32       	cpi	r24, 0x20	; 32
    190c:	29 f0       	breq	.+10     	; 0x1918 <f_readdir+0x12a>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
    190e:	81 93       	st	Z+, r24
    1910:	11 96       	adiw	r26, 0x01	; 1
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    1912:	e2 17       	cp	r30, r18
    1914:	f3 07       	cpc	r31, r19
    1916:	b1 f7       	brne	.-20     	; 0x1904 <f_readdir+0x116>
				if (c == ' ') break;
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    1918:	da 01       	movw	r26, r20
    191a:	1b 96       	adiw	r26, 0x0b	; 11
    191c:	8c 91       	ld	r24, X
    191e:	d7 01       	movw	r26, r14
    1920:	18 96       	adiw	r26, 0x08	; 8
    1922:	8c 93       	st	X, r24
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    1924:	da 01       	movw	r26, r20
    1926:	5c 96       	adiw	r26, 0x1c	; 28
    1928:	ad 90       	ld	r10, X+
    192a:	bd 90       	ld	r11, X+
    192c:	cd 90       	ld	r12, X+
    192e:	dc 90       	ld	r13, X
    1930:	5f 97       	sbiw	r26, 0x1f	; 31
    1932:	d7 01       	movw	r26, r14
    1934:	ad 92       	st	X+, r10
    1936:	bd 92       	st	X+, r11
    1938:	cd 92       	st	X+, r12
    193a:	dc 92       	st	X, r13
    193c:	13 97       	sbiw	r26, 0x03	; 3
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    193e:	da 01       	movw	r26, r20
    1940:	58 96       	adiw	r26, 0x18	; 24
    1942:	8d 91       	ld	r24, X+
    1944:	9c 91       	ld	r25, X
    1946:	59 97       	sbiw	r26, 0x19	; 25
    1948:	d7 01       	movw	r26, r14
    194a:	15 96       	adiw	r26, 0x05	; 5
    194c:	9c 93       	st	X, r25
    194e:	8e 93       	st	-X, r24
    1950:	14 97       	sbiw	r26, 0x04	; 4
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    1952:	da 01       	movw	r26, r20
    1954:	56 96       	adiw	r26, 0x16	; 22
    1956:	8d 91       	ld	r24, X+
    1958:	9c 91       	ld	r25, X
    195a:	57 97       	sbiw	r26, 0x17	; 23
    195c:	d7 01       	movw	r26, r14
    195e:	17 96       	adiw	r26, 0x07	; 7
    1960:	9c 93       	st	X, r25
    1962:	8e 93       	st	-X, r24
    1964:	16 97       	sbiw	r26, 0x06	; 6
    1966:	9f 01       	movw	r18, r30
	}
	*p = 0;
    1968:	f9 01       	movw	r30, r18
    196a:	10 82       	st	Z, r1
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj, FALSE);	/* Increment index for next */
    196c:	c8 01       	movw	r24, r16
    196e:	60 e0       	ldi	r22, 0x00	; 0
    1970:	70 e0       	ldi	r23, 0x00	; 0
    1972:	0e 94 8e 0a 	call	0x151c	; 0x151c <dir_next>
    1976:	9c 01       	movw	r18, r24
				if (res == FR_NO_FILE) {
    1978:	84 30       	cpi	r24, 0x04	; 4
    197a:	91 05       	cpc	r25, r1
    197c:	49 f4       	brne	.+18     	; 0x1990 <f_readdir+0x1a2>
					dj->sect = 0;
    197e:	d8 01       	movw	r26, r16
    1980:	1e 96       	adiw	r26, 0x0e	; 14
    1982:	1d 92       	st	X+, r1
    1984:	1d 92       	st	X+, r1
    1986:	1d 92       	st	X+, r1
    1988:	1c 92       	st	X, r1
    198a:	51 97       	sbiw	r26, 0x11	; 17
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj->fs, res);
}
    1990:	c9 01       	movw	r24, r18
    1992:	2c 96       	adiw	r28, 0x0c	; 12
    1994:	ea e0       	ldi	r30, 0x0A	; 10
    1996:	0c 94 9a 2d 	jmp	0x5b34	; 0x5b34 <__epilogue_restores__+0x10>
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj, FALSE);	/* Increment index for next */
				if (res == FR_NO_FILE) {
					dj->sect = 0;
    199a:	24 e0       	ldi	r18, 0x04	; 4
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	77 cf       	rjmp	.-274    	; 0x188e <f_readdir+0xa0>

000019a0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const XCHAR *path	/* Full-path string to find a file or directory */
)
{
    19a0:	a0 e0       	ldi	r26, 0x00	; 0
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	e6 ed       	ldi	r30, 0xD6	; 214
    19a6:	fc e0       	ldi	r31, 0x0C	; 12
    19a8:	0c 94 7d 2d 	jmp	0x5afa	; 0x5afa <__prologue_saves__+0xe>
    19ac:	ec 01       	movw	r28, r24
    19ae:	7b 01       	movw	r14, r22
    19b0:	03 c0       	rjmp	.+6      	; 0x19b8 <follow_path+0x18>
	FRESULT res;
	BYTE *dir, last;


	while (!_USE_LFN && *path == ' ') path++;	/* Skip leading spaces */
    19b2:	08 94       	sec
    19b4:	e1 1c       	adc	r14, r1
    19b6:	f1 1c       	adc	r15, r1
    19b8:	f7 01       	movw	r30, r14
    19ba:	80 81       	ld	r24, Z
    19bc:	80 32       	cpi	r24, 0x20	; 32
    19be:	c9 f3       	breq	.-14     	; 0x19b2 <follow_path+0x12>
#if _FS_RPATH
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
    19c0:	8f 32       	cpi	r24, 0x2F	; 47
    19c2:	11 f0       	breq	.+4      	; 0x19c8 <follow_path+0x28>
    19c4:	8c 35       	cpi	r24, 0x5C	; 92
    19c6:	41 f4       	brne	.+16     	; 0x19d8 <follow_path+0x38>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
    19c8:	08 94       	sec
    19ca:	e1 1c       	adc	r14, r1
    19cc:	f1 1c       	adc	r15, r1
    19ce:	1e 82       	std	Y+6, r1	; 0x06
    19d0:	1f 82       	std	Y+7, r1	; 0x07
    19d2:	18 86       	std	Y+8, r1	; 0x08
    19d4:	19 86       	std	Y+9, r1	; 0x09
    19d6:	0a c0       	rjmp	.+20     	; 0x19ec <follow_path+0x4c>
	} else {							/* No heading saparator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
    19d8:	e8 81       	ld	r30, Y
    19da:	f9 81       	ldd	r31, Y+1	; 0x01
    19dc:	86 89       	ldd	r24, Z+22	; 0x16
    19de:	97 89       	ldd	r25, Z+23	; 0x17
    19e0:	a0 8d       	ldd	r26, Z+24	; 0x18
    19e2:	b1 8d       	ldd	r27, Z+25	; 0x19
    19e4:	8e 83       	std	Y+6, r24	; 0x06
    19e6:	9f 83       	std	Y+7, r25	; 0x07
    19e8:	a8 87       	std	Y+8, r26	; 0x08
    19ea:	b9 87       	std	Y+9, r27	; 0x09
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
		path++;
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
    19ec:	f7 01       	movw	r30, r14
    19ee:	80 81       	ld	r24, Z
    19f0:	80 32       	cpi	r24, 0x20	; 32
    19f2:	48 f4       	brcc	.+18     	; 0x1a06 <follow_path+0x66>
		res = dir_seek(dj, 0);
    19f4:	ce 01       	movw	r24, r28
    19f6:	60 e0       	ldi	r22, 0x00	; 0
    19f8:	70 e0       	ldi	r23, 0x00	; 0
    19fa:	0e 94 e7 06 	call	0xdce	; 0xdce <dir_seek>
    19fe:	9c 01       	movw	r18, r24
		dj->dir = NULL;
    1a00:	1b 8a       	std	Y+19, r1	; 0x13
    1a02:	1a 8a       	std	Y+18, r1	; 0x12
    1a04:	2b c1       	rjmp	.+598    	; 0x1c5c <follow_path+0x2bc>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    1a06:	f0 e2       	ldi	r31, 0x20	; 32
    1a08:	9f 2e       	mov	r9, r31
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    1a0a:	e5 e0       	ldi	r30, 0x05	; 5
    1a0c:	ce 2e       	mov	r12, r30
	BYTE b, c, d, *sfn;
	int ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    1a0e:	0c 89       	ldd	r16, Y+20	; 0x14
    1a10:	1d 89       	ldd	r17, Y+21	; 0x15
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    1a12:	f8 01       	movw	r30, r16
	while (cnt--) *d++ = (char)val;
    1a14:	c8 01       	movw	r24, r16
    1a16:	0b 96       	adiw	r24, 0x0b	; 11
    1a18:	01 c0       	rjmp	.+2      	; 0x1a1c <follow_path+0x7c>
    1a1a:	91 92       	st	Z+, r9
    1a1c:	e8 17       	cp	r30, r24
    1a1e:	f9 07       	cpc	r31, r25
    1a20:	e1 f7       	brne	.-8      	; 0x1a1a <follow_path+0x7a>
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
	p = *path;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
    1a22:	f7 01       	movw	r30, r14
    1a24:	80 81       	ld	r24, Z
    1a26:	8e 32       	cpi	r24, 0x2E	; 46
    1a28:	49 f0       	breq	.+18     	; 0x1a3c <follow_path+0x9c>
    1a2a:	40 e0       	ldi	r20, 0x00	; 0
    1a2c:	50 e0       	ldi	r21, 0x00	; 0
    1a2e:	a0 e0       	ldi	r26, 0x00	; 0
    1a30:	b0 e0       	ldi	r27, 0x00	; 0
    1a32:	78 e0       	ldi	r23, 0x08	; 8
    1a34:	a7 2e       	mov	r10, r23
    1a36:	b1 2c       	mov	r11, r1
    1a38:	dd 24       	eor	r13, r13
    1a3a:	21 c0       	rjmp	.+66     	; 0x1a7e <follow_path+0xde>
    1a3c:	d8 01       	movw	r26, r16
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	90 e0       	ldi	r25, 0x00	; 0
		for (;;) {
			c = p[si++];
    1a42:	f7 01       	movw	r30, r14
    1a44:	e8 0f       	add	r30, r24
    1a46:	f9 1f       	adc	r31, r25
    1a48:	e0 81       	ld	r30, Z
    1a4a:	01 96       	adiw	r24, 0x01	; 1
			if (c != '.' || si >= 3) break;
    1a4c:	ee 32       	cpi	r30, 0x2E	; 46
    1a4e:	31 f4       	brne	.+12     	; 0x1a5c <follow_path+0xbc>
    1a50:	83 30       	cpi	r24, 0x03	; 3
    1a52:	91 05       	cpc	r25, r1
    1a54:	09 f4       	brne	.+2      	; 0x1a58 <follow_path+0xb8>
    1a56:	fb c0       	rjmp	.+502    	; 0x1c4e <follow_path+0x2ae>
			sfn[i++] = c;
    1a58:	ed 93       	st	X+, r30
    1a5a:	f3 cf       	rjmp	.-26     	; 0x1a42 <follow_path+0xa2>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
    1a5c:	ef 32       	cpi	r30, 0x2F	; 47
    1a5e:	29 f0       	breq	.+10     	; 0x1a6a <follow_path+0xca>
    1a60:	ec 35       	cpi	r30, 0x5C	; 92
    1a62:	39 f0       	breq	.+14     	; 0x1a72 <follow_path+0xd2>
    1a64:	e1 32       	cpi	r30, 0x21	; 33
    1a66:	08 f0       	brcs	.+2      	; 0x1a6a <follow_path+0xca>
    1a68:	f2 c0       	rjmp	.+484    	; 0x1c4e <follow_path+0x2ae>
		*path = &p[si];									/* Rerurn pointer to the next segment */
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    1a6a:	e1 32       	cpi	r30, 0x21	; 33
    1a6c:	10 f4       	brcc	.+4      	; 0x1a72 <follow_path+0xd2>
    1a6e:	24 e2       	ldi	r18, 0x24	; 36
    1a70:	01 c0       	rjmp	.+2      	; 0x1a74 <follow_path+0xd4>
    1a72:	20 e2       	ldi	r18, 0x20	; 32
			c = p[si++];
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
		*path = &p[si];									/* Rerurn pointer to the next segment */
    1a74:	e8 0e       	add	r14, r24
    1a76:	f9 1e       	adc	r15, r25
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    1a78:	f8 01       	movw	r30, r16
    1a7a:	23 87       	std	Z+11, r18	; 0x0b
    1a7c:	f5 c0       	rjmp	.+490    	; 0x1c68 <follow_path+0x2c8>
		return FR_OK;
	}
#endif
	for (;;) {
		c = p[si++];
    1a7e:	f7 01       	movw	r30, r14
    1a80:	ea 0f       	add	r30, r26
    1a82:	fb 1f       	adc	r31, r27
    1a84:	20 81       	ld	r18, Z
    1a86:	11 96       	adiw	r26, 0x01	; 1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    1a88:	21 32       	cpi	r18, 0x21	; 33
    1a8a:	08 f4       	brcc	.+2      	; 0x1a8e <follow_path+0xee>
    1a8c:	6a c0       	rjmp	.+212    	; 0x1b62 <follow_path+0x1c2>
    1a8e:	2f 32       	cpi	r18, 0x2F	; 47
    1a90:	09 f4       	brne	.+2      	; 0x1a94 <follow_path+0xf4>
    1a92:	f4 c0       	rjmp	.+488    	; 0x1c7c <follow_path+0x2dc>
    1a94:	2c 35       	cpi	r18, 0x5C	; 92
    1a96:	09 f4       	brne	.+2      	; 0x1a9a <follow_path+0xfa>
    1a98:	f1 c0       	rjmp	.+482    	; 0x1c7c <follow_path+0x2dc>
		if (c == '.' || i >= ni) {
    1a9a:	2e 32       	cpi	r18, 0x2E	; 46
    1a9c:	19 f0       	breq	.+6      	; 0x1aa4 <follow_path+0x104>
    1a9e:	4a 15       	cp	r20, r10
    1aa0:	5b 05       	cpc	r21, r11
    1aa2:	84 f0       	brlt	.+32     	; 0x1ac4 <follow_path+0x124>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    1aa4:	f8 e0       	ldi	r31, 0x08	; 8
    1aa6:	af 16       	cp	r10, r31
    1aa8:	b1 04       	cpc	r11, r1
    1aaa:	09 f0       	breq	.+2      	; 0x1aae <follow_path+0x10e>
    1aac:	d0 c0       	rjmp	.+416    	; 0x1c4e <follow_path+0x2ae>
    1aae:	2e 32       	cpi	r18, 0x2E	; 46
    1ab0:	09 f0       	breq	.+2      	; 0x1ab4 <follow_path+0x114>
    1ab2:	cd c0       	rjmp	.+410    	; 0x1c4e <follow_path+0x2ae>
			i = 8; ni = 11;
			b <<= 2; continue;
    1ab4:	dd 0c       	add	r13, r13
    1ab6:	dd 0c       	add	r13, r13
    1ab8:	48 e0       	ldi	r20, 0x08	; 8
    1aba:	50 e0       	ldi	r21, 0x00	; 0
    1abc:	6b e0       	ldi	r22, 0x0B	; 11
    1abe:	a6 2e       	mov	r10, r22
    1ac0:	b1 2c       	mov	r11, r1
    1ac2:	dd cf       	rjmp	.-70     	; 0x1a7e <follow_path+0xde>
		}
		if (c >= 0x80) {				/* Extended char */
    1ac4:	27 ff       	sbrs	r18, 7
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <follow_path+0x12c>
#ifdef _EXCVT
			c = cvt[c - 0x80];			/* Convert extend char (SBCS) */
#else
			b |= 3;						/* Eliminate NT flag if ext char is exist */
    1ac8:	83 e0       	ldi	r24, 0x03	; 3
    1aca:	d8 2a       	or	r13, r24
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
    1acc:	82 2f       	mov	r24, r18
    1ace:	81 58       	subi	r24, 0x81	; 129
    1ad0:	8f 31       	cpi	r24, 0x1F	; 31
    1ad2:	18 f0       	brcs	.+6      	; 0x1ada <follow_path+0x13a>
    1ad4:	8f 55       	subi	r24, 0x5F	; 95
    1ad6:	8d 31       	cpi	r24, 0x1D	; 29
    1ad8:	f8 f4       	brcc	.+62     	; 0x1b18 <follow_path+0x178>
			d = p[si++];				/* Get 2nd byte */
    1ada:	f7 01       	movw	r30, r14
    1adc:	ea 0f       	add	r30, r26
    1ade:	fb 1f       	adc	r31, r27
    1ae0:	30 81       	ld	r19, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    1ae2:	83 2f       	mov	r24, r19
    1ae4:	80 54       	subi	r24, 0x40	; 64
    1ae6:	8f 33       	cpi	r24, 0x3F	; 63
    1ae8:	20 f0       	brcs	.+8      	; 0x1af2 <follow_path+0x152>
    1aea:	80 54       	subi	r24, 0x40	; 64
    1aec:	8d 37       	cpi	r24, 0x7D	; 125
    1aee:	08 f0       	brcs	.+2      	; 0x1af2 <follow_path+0x152>
    1af0:	ae c0       	rjmp	.+348    	; 0x1c4e <follow_path+0x2ae>
    1af2:	c5 01       	movw	r24, r10
    1af4:	01 97       	sbiw	r24, 0x01	; 1
    1af6:	48 17       	cp	r20, r24
    1af8:	59 07       	cpc	r21, r25
    1afa:	0c f0       	brlt	.+2      	; 0x1afe <follow_path+0x15e>
    1afc:	a8 c0       	rjmp	.+336    	; 0x1c4e <follow_path+0x2ae>
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
    1afe:	11 96       	adiw	r26, 0x01	; 1
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
    1b00:	f8 01       	movw	r30, r16
    1b02:	e4 0f       	add	r30, r20
    1b04:	f5 1f       	adc	r31, r21
    1b06:	20 83       	st	Z, r18
    1b08:	ca 01       	movw	r24, r20
    1b0a:	01 96       	adiw	r24, 0x01	; 1
			sfn[i++] = d;
    1b0c:	f8 01       	movw	r30, r16
    1b0e:	e8 0f       	add	r30, r24
    1b10:	f9 1f       	adc	r31, r25
    1b12:	30 83       	st	Z, r19
    1b14:	ac 01       	movw	r20, r24
    1b16:	22 c0       	rjmp	.+68     	; 0x1b5c <follow_path+0x1bc>
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
    1b18:	62 2f       	mov	r22, r18
    1b1a:	70 e0       	ldi	r23, 0x00	; 0
    1b1c:	e3 e0       	ldi	r30, 0x03	; 3
    1b1e:	f1 e0       	ldi	r31, 0x01	; 1
    1b20:	01 c0       	rjmp	.+2      	; 0x1b24 <follow_path+0x184>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    1b22:	31 96       	adiw	r30, 0x01	; 1
    1b24:	80 81       	ld	r24, Z
    1b26:	88 23       	and	r24, r24
    1b28:	39 f0       	breq	.+14     	; 0x1b38 <follow_path+0x198>
    1b2a:	99 27       	eor	r25, r25
    1b2c:	87 fd       	sbrc	r24, 7
    1b2e:	90 95       	com	r25
    1b30:	86 17       	cp	r24, r22
    1b32:	97 07       	cpc	r25, r23
    1b34:	b1 f7       	brne	.-20     	; 0x1b22 <follow_path+0x182>
    1b36:	8b c0       	rjmp	.+278    	; 0x1c4e <follow_path+0x2ae>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    1b38:	82 2f       	mov	r24, r18
    1b3a:	81 54       	subi	r24, 0x41	; 65
    1b3c:	8a 31       	cpi	r24, 0x1A	; 26
    1b3e:	18 f4       	brcc	.+6      	; 0x1b46 <follow_path+0x1a6>
				b |= 2;
    1b40:	e2 e0       	ldi	r30, 0x02	; 2
    1b42:	de 2a       	or	r13, r30
    1b44:	07 c0       	rjmp	.+14     	; 0x1b54 <follow_path+0x1b4>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    1b46:	82 2f       	mov	r24, r18
    1b48:	81 56       	subi	r24, 0x61	; 97
    1b4a:	8a 31       	cpi	r24, 0x1A	; 26
    1b4c:	18 f4       	brcc	.+6      	; 0x1b54 <follow_path+0x1b4>
					b |= 1; c -= 0x20;
    1b4e:	f1 e0       	ldi	r31, 0x01	; 1
    1b50:	df 2a       	or	r13, r31
    1b52:	20 52       	subi	r18, 0x20	; 32
				}
			}
			sfn[i++] = c;
    1b54:	f8 01       	movw	r30, r16
    1b56:	e4 0f       	add	r30, r20
    1b58:	f5 1f       	adc	r31, r21
    1b5a:	20 83       	st	Z, r18
    1b5c:	4f 5f       	subi	r20, 0xFF	; 255
    1b5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b60:	8e cf       	rjmp	.-228    	; 0x1a7e <follow_path+0xde>
    1b62:	64 e0       	ldi	r22, 0x04	; 4
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
    1b64:	45 2b       	or	r20, r21
    1b66:	09 f4       	brne	.+2      	; 0x1b6a <follow_path+0x1ca>
    1b68:	72 c0       	rjmp	.+228    	; 0x1c4e <follow_path+0x2ae>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    1b6a:	f8 01       	movw	r30, r16
    1b6c:	80 81       	ld	r24, Z
    1b6e:	85 3e       	cpi	r24, 0xE5	; 229
    1b70:	09 f4       	brne	.+2      	; 0x1b74 <follow_path+0x1d4>
    1b72:	c0 82       	st	Z, r12

	if (ni == 8) b <<= 2;
    1b74:	f8 e0       	ldi	r31, 0x08	; 8
    1b76:	af 16       	cp	r10, r31
    1b78:	b1 04       	cpc	r11, r1
    1b7a:	11 f4       	brne	.+4      	; 0x1b80 <follow_path+0x1e0>
    1b7c:	dd 0c       	add	r13, r13
    1b7e:	dd 0c       	add	r13, r13
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
    1b80:	2d 2d       	mov	r18, r13
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	c9 01       	movw	r24, r18
    1b86:	83 70       	andi	r24, 0x03	; 3
    1b88:	90 70       	andi	r25, 0x00	; 0
    1b8a:	01 97       	sbiw	r24, 0x01	; 1
    1b8c:	09 f4       	brne	.+2      	; 0x1b90 <follow_path+0x1f0>
    1b8e:	60 61       	ori	r22, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
    1b90:	2c 70       	andi	r18, 0x0C	; 12
    1b92:	30 70       	andi	r19, 0x00	; 0
    1b94:	24 30       	cpi	r18, 0x04	; 4
    1b96:	31 05       	cpc	r19, r1
    1b98:	09 f4       	brne	.+2      	; 0x1b9c <follow_path+0x1fc>
    1b9a:	68 60       	ori	r22, 0x08	; 8
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    1b9c:	ea 0e       	add	r14, r26
    1b9e:	fb 1e       	adc	r15, r27

	if (ni == 8) b <<= 2;
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */

	sfn[NS] = c;		/* Store NT flag, File name is created */
    1ba0:	f8 01       	movw	r30, r16
    1ba2:	63 87       	std	Z+11, r22	; 0x0b
    1ba4:	61 c0       	rjmp	.+194    	; 0x1c68 <follow_path+0x2c8>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    1ba6:	4e 85       	ldd	r20, Y+14	; 0x0e
    1ba8:	5f 85       	ldd	r21, Y+15	; 0x0f
    1baa:	68 89       	ldd	r22, Y+16	; 0x10
    1bac:	79 89       	ldd	r23, Y+17	; 0x11
    1bae:	88 81       	ld	r24, Y
    1bb0:	99 81       	ldd	r25, Y+1	; 0x01
    1bb2:	0e 94 fd 04 	call	0x9fa	; 0x9fa <move_window>
    1bb6:	ac 01       	movw	r20, r24
		if (res != FR_OK) break;
    1bb8:	00 97       	sbiw	r24, 0x00	; 0
    1bba:	01 f5       	brne	.+64     	; 0x1bfc <follow_path+0x25c>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    1bbc:	ea 89       	ldd	r30, Y+18	; 0x12
    1bbe:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1bc0:	80 81       	ld	r24, Z
    1bc2:	88 23       	and	r24, r24
    1bc4:	19 f4       	brne	.+6      	; 0x1bcc <follow_path+0x22c>
    1bc6:	44 e0       	ldi	r20, 0x04	; 4
    1bc8:	50 e0       	ldi	r21, 0x00	; 0
    1bca:	18 c0       	rjmp	.+48     	; 0x1bfc <follow_path+0x25c>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    1bcc:	83 85       	ldd	r24, Z+11	; 0x0b
    1bce:	83 fd       	sbrc	r24, 3
    1bd0:	0f c0       	rjmp	.+30     	; 0x1bf0 <follow_path+0x250>
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
    1bd2:	ac 89       	ldd	r26, Y+20	; 0x14
    1bd4:	bd 89       	ldd	r27, Y+21	; 0x15
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    1bd6:	9f 01       	movw	r18, r30
    1bd8:	25 5f       	subi	r18, 0xF5	; 245
    1bda:	3f 4f       	sbci	r19, 0xFF	; 255
    1bdc:	e2 17       	cp	r30, r18
    1bde:	f3 07       	cpc	r31, r19
    1be0:	69 f0       	breq	.+26     	; 0x1bfc <follow_path+0x25c>
    1be2:	90 81       	ld	r25, Z
    1be4:	8c 91       	ld	r24, X
    1be6:	98 17       	cp	r25, r24
    1be8:	19 f4       	brne	.+6      	; 0x1bf0 <follow_path+0x250>
    1bea:	31 96       	adiw	r30, 0x01	; 1
    1bec:	11 96       	adiw	r26, 0x01	; 1
    1bee:	f6 cf       	rjmp	.-20     	; 0x1bdc <follow_path+0x23c>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, FALSE);		/* Next entry */
    1bf0:	ce 01       	movw	r24, r28
    1bf2:	60 e0       	ldi	r22, 0x00	; 0
    1bf4:	70 e0       	ldi	r23, 0x00	; 0
    1bf6:	0e 94 8e 0a 	call	0x151c	; 0x151c <dir_next>
    1bfa:	3b c0       	rjmp	.+118    	; 0x1c72 <follow_path+0x2d2>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			last = *(dj->fn+NS) & NS_LAST;
    1bfc:	ec 89       	ldd	r30, Y+20	; 0x14
    1bfe:	fd 89       	ldd	r31, Y+21	; 0x15
    1c00:	83 85       	ldd	r24, Z+11	; 0x0b
    1c02:	84 70       	andi	r24, 0x04	; 4
			if (res != FR_OK) {				/* Could not find the object */
    1c04:	41 15       	cp	r20, r1
    1c06:	51 05       	cpc	r21, r1
    1c08:	39 f0       	breq	.+14     	; 0x1c18 <follow_path+0x278>
    1c0a:	9a 01       	movw	r18, r20
				if (res == FR_NO_FILE && !last)
    1c0c:	44 30       	cpi	r20, 0x04	; 4
    1c0e:	51 05       	cpc	r21, r1
    1c10:	09 f5       	brne	.+66     	; 0x1c54 <follow_path+0x2b4>
    1c12:	88 23       	and	r24, r24
    1c14:	09 f1       	breq	.+66     	; 0x1c58 <follow_path+0x2b8>
    1c16:	22 c0       	rjmp	.+68     	; 0x1c5c <follow_path+0x2bc>
					res = FR_NO_PATH;
				break;
			}
			if (last) break;				/* Last segment match. Function completed. */
    1c18:	88 23       	and	r24, r24
    1c1a:	e1 f4       	brne	.+56     	; 0x1c54 <follow_path+0x2b4>
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
    1c1c:	ea 89       	ldd	r30, Y+18	; 0x12
    1c1e:	fb 89       	ldd	r31, Y+19	; 0x13
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    1c20:	83 85       	ldd	r24, Z+11	; 0x0b
    1c22:	84 ff       	sbrs	r24, 4
    1c24:	19 c0       	rjmp	.+50     	; 0x1c58 <follow_path+0x2b8>
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    1c26:	84 89       	ldd	r24, Z+20	; 0x14
    1c28:	95 89       	ldd	r25, Z+21	; 0x15
    1c2a:	a0 e0       	ldi	r26, 0x00	; 0
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	dc 01       	movw	r26, r24
    1c30:	99 27       	eor	r25, r25
    1c32:	88 27       	eor	r24, r24
    1c34:	22 8d       	ldd	r18, Z+26	; 0x1a
    1c36:	33 8d       	ldd	r19, Z+27	; 0x1b
    1c38:	40 e0       	ldi	r20, 0x00	; 0
    1c3a:	50 e0       	ldi	r21, 0x00	; 0
    1c3c:	82 2b       	or	r24, r18
    1c3e:	93 2b       	or	r25, r19
    1c40:	a4 2b       	or	r26, r20
    1c42:	b5 2b       	or	r27, r21
    1c44:	8e 83       	std	Y+6, r24	; 0x06
    1c46:	9f 83       	std	Y+7, r25	; 0x07
    1c48:	a8 87       	std	Y+8, r26	; 0x08
    1c4a:	b9 87       	std	Y+9, r27	; 0x09
    1c4c:	e0 ce       	rjmp	.-576    	; 0x1a0e <follow_path+0x6e>
		}
    1c4e:	26 e0       	ldi	r18, 0x06	; 6
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	04 c0       	rjmp	.+8      	; 0x1c5c <follow_path+0x2bc>
    1c54:	9a 01       	movw	r18, r20
    1c56:	02 c0       	rjmp	.+4      	; 0x1c5c <follow_path+0x2bc>
    1c58:	25 e0       	ldi	r18, 0x05	; 5
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
	}

	return res;
}
    1c5c:	c9 01       	movw	r24, r18
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
    1c62:	eb e0       	ldi	r30, 0x0B	; 11
    1c64:	0c 94 99 2d 	jmp	0x5b32	; 0x5b32 <__epilogue_restores__+0xe>
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_seek(dj, 0);			/* Rewind directory object */
    1c68:	ce 01       	movw	r24, r28
    1c6a:	60 e0       	ldi	r22, 0x00	; 0
    1c6c:	70 e0       	ldi	r23, 0x00	; 0
    1c6e:	0e 94 e7 06 	call	0xdce	; 0xdce <dir_seek>
    1c72:	ac 01       	movw	r20, r24
	if (res != FR_OK) return res;
    1c74:	00 97       	sbiw	r24, 0x00	; 0
    1c76:	09 f4       	brne	.+2      	; 0x1c7a <follow_path+0x2da>
    1c78:	96 cf       	rjmp	.-212    	; 0x1ba6 <follow_path+0x206>
    1c7a:	c0 cf       	rjmp	.-128    	; 0x1bfc <follow_path+0x25c>
    1c7c:	60 e0       	ldi	r22, 0x00	; 0
    1c7e:	72 cf       	rjmp	.-284    	; 0x1b64 <follow_path+0x1c4>

00001c80 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    1c80:	a4 e0       	ldi	r26, 0x04	; 4
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	e6 e4       	ldi	r30, 0x46	; 70
    1c86:	fe e0       	ldi	r31, 0x0E	; 14
    1c88:	0c 94 76 2d 	jmp	0x5aec	; 0x5aec <__prologue_saves__>
    1c8c:	9c 83       	std	Y+4, r25	; 0x04
    1c8e:	8b 83       	std	Y+3, r24	; 0x03
    1c90:	16 2f       	mov	r17, r22
    1c92:	07 2f       	mov	r16, r23
    1c94:	3a 01       	movw	r6, r20
    1c96:	3a 83       	std	Y+2, r19	; 0x02
    1c98:	29 83       	std	Y+1, r18	; 0x01
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;


	*bw = 0;	/* Initialize bytes written */
    1c9a:	d9 01       	movw	r26, r18
    1c9c:	1d 92       	st	X+, r1
    1c9e:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	62 81       	ldd	r22, Z+2	; 0x02
    1ca4:	73 81       	ldd	r23, Z+3	; 0x03
    1ca6:	80 81       	ld	r24, Z
    1ca8:	91 81       	ldd	r25, Z+1	; 0x01
    1caa:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <validate>
    1cae:	4c 01       	movw	r8, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    1cb0:	00 97       	sbiw	r24, 0x00	; 0
    1cb2:	09 f0       	breq	.+2      	; 0x1cb6 <f_write+0x36>
    1cb4:	09 c2       	rjmp	.+1042   	; 0x20c8 <f_write+0x448>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    1cb6:	ab 81       	ldd	r26, Y+3	; 0x03
    1cb8:	bc 81       	ldd	r27, Y+4	; 0x04
    1cba:	14 96       	adiw	r26, 0x04	; 4
    1cbc:	8c 91       	ld	r24, X
    1cbe:	87 fd       	sbrc	r24, 7
    1cc0:	78 c0       	rjmp	.+240    	; 0x1db2 <f_write+0x132>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
    1cc2:	81 fd       	sbrc	r24, 1
    1cc4:	04 c0       	rjmp	.+8      	; 0x1cce <f_write+0x4e>
    1cc6:	37 e0       	ldi	r19, 0x07	; 7
    1cc8:	83 2e       	mov	r8, r19
    1cca:	91 2c       	mov	r9, r1
    1ccc:	fd c1       	rjmp	.+1018   	; 0x20c8 <f_write+0x448>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
    1cce:	eb 81       	ldd	r30, Y+3	; 0x03
    1cd0:	fc 81       	ldd	r31, Y+4	; 0x04
    1cd2:	22 85       	ldd	r18, Z+10	; 0x0a
    1cd4:	33 85       	ldd	r19, Z+11	; 0x0b
    1cd6:	44 85       	ldd	r20, Z+12	; 0x0c
    1cd8:	55 85       	ldd	r21, Z+13	; 0x0d
    1cda:	c3 01       	movw	r24, r6
    1cdc:	a0 e0       	ldi	r26, 0x00	; 0
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	82 0f       	add	r24, r18
    1ce2:	93 1f       	adc	r25, r19
    1ce4:	a4 1f       	adc	r26, r20
    1ce6:	b5 1f       	adc	r27, r21
    1ce8:	82 17       	cp	r24, r18
    1cea:	93 07       	cpc	r25, r19
    1cec:	a4 07       	cpc	r26, r20
    1cee:	b5 07       	cpc	r27, r21
    1cf0:	10 f4       	brcc	.+4      	; 0x1cf6 <f_write+0x76>
    1cf2:	66 24       	eor	r6, r6
    1cf4:	77 24       	eor	r7, r7
)
{
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    1cf6:	81 2f       	mov	r24, r17
    1cf8:	90 2f       	mov	r25, r16
    1cfa:	9c 01       	movw	r18, r24
    1cfc:	29 01       	movw	r4, r18
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
    1cfe:	22 24       	eor	r2, r2
    1d00:	23 94       	inc	r2
    1d02:	bd c1       	rjmp	.+890    	; 0x207e <f_write+0x3fe>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    1d04:	ab 81       	ldd	r26, Y+3	; 0x03
    1d06:	bc 81       	ldd	r27, Y+4	; 0x04
    1d08:	16 96       	adiw	r26, 0x06	; 6
    1d0a:	2d 91       	ld	r18, X+
    1d0c:	3d 91       	ld	r19, X+
    1d0e:	4d 91       	ld	r20, X+
    1d10:	5c 91       	ld	r21, X
    1d12:	19 97       	sbiw	r26, 0x09	; 9
    1d14:	da 01       	movw	r26, r20
    1d16:	c9 01       	movw	r24, r18
    1d18:	91 70       	andi	r25, 0x01	; 1
    1d1a:	a0 70       	andi	r26, 0x00	; 0
    1d1c:	b0 70       	andi	r27, 0x00	; 0
    1d1e:	00 97       	sbiw	r24, 0x00	; 0
    1d20:	a1 05       	cpc	r26, r1
    1d22:	b1 05       	cpc	r27, r1
    1d24:	09 f0       	breq	.+2      	; 0x1d28 <f_write+0xa8>
    1d26:	4a c1       	rjmp	.+660    	; 0x1fbc <f_write+0x33c>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    1d28:	ab 81       	ldd	r26, Y+3	; 0x03
    1d2a:	bc 81       	ldd	r27, Y+4	; 0x04
    1d2c:	ed 91       	ld	r30, X+
    1d2e:	fc 91       	ld	r31, X
    1d30:	11 97       	sbiw	r26, 0x01	; 1
    1d32:	15 96       	adiw	r26, 0x05	; 5
    1d34:	9c 91       	ld	r25, X
    1d36:	15 97       	sbiw	r26, 0x05	; 5
    1d38:	82 81       	ldd	r24, Z+2	; 0x02
    1d3a:	98 17       	cp	r25, r24
    1d3c:	08 f4       	brcc	.+2      	; 0x1d40 <f_write+0xc0>
    1d3e:	55 c0       	rjmp	.+170    	; 0x1dea <f_write+0x16a>
				if (fp->fptr == 0) {				/* On the top of the file? */
    1d40:	21 15       	cp	r18, r1
    1d42:	31 05       	cpc	r19, r1
    1d44:	41 05       	cpc	r20, r1
    1d46:	51 05       	cpc	r21, r1
    1d48:	c9 f4       	brne	.+50     	; 0x1d7c <f_write+0xfc>
					clst = fp->org_clust;			/* Follow from the origin */
    1d4a:	1e 96       	adiw	r26, 0x0e	; 14
    1d4c:	6d 91       	ld	r22, X+
    1d4e:	7d 91       	ld	r23, X+
    1d50:	8d 91       	ld	r24, X+
    1d52:	9c 91       	ld	r25, X
    1d54:	51 97       	sbiw	r26, 0x11	; 17
					if (clst == 0)					/* When there is no cluster chain, */
    1d56:	61 15       	cp	r22, r1
    1d58:	71 05       	cpc	r23, r1
    1d5a:	81 05       	cpc	r24, r1
    1d5c:	91 05       	cpc	r25, r1
    1d5e:	f9 f4       	brne	.+62     	; 0x1d9e <f_write+0x11e>
						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    1d60:	cf 01       	movw	r24, r30
    1d62:	40 e0       	ldi	r20, 0x00	; 0
    1d64:	50 e0       	ldi	r21, 0x00	; 0
    1d66:	60 e0       	ldi	r22, 0x00	; 0
    1d68:	70 e0       	ldi	r23, 0x00	; 0
    1d6a:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <create_chain>
    1d6e:	eb 81       	ldd	r30, Y+3	; 0x03
    1d70:	fc 81       	ldd	r31, Y+4	; 0x04
    1d72:	66 87       	std	Z+14, r22	; 0x0e
    1d74:	77 87       	std	Z+15, r23	; 0x0f
    1d76:	80 8b       	std	Z+16, r24	; 0x10
    1d78:	91 8b       	std	Z+17, r25	; 0x11
    1d7a:	0b c0       	rjmp	.+22     	; 0x1d92 <f_write+0x112>
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
    1d7c:	ab 81       	ldd	r26, Y+3	; 0x03
    1d7e:	bc 81       	ldd	r27, Y+4	; 0x04
    1d80:	52 96       	adiw	r26, 0x12	; 18
    1d82:	4d 91       	ld	r20, X+
    1d84:	5d 91       	ld	r21, X+
    1d86:	6d 91       	ld	r22, X+
    1d88:	7c 91       	ld	r23, X
    1d8a:	55 97       	sbiw	r26, 0x15	; 21
    1d8c:	cf 01       	movw	r24, r30
    1d8e:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <create_chain>
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
    1d92:	61 15       	cp	r22, r1
    1d94:	71 05       	cpc	r23, r1
    1d96:	81 05       	cpc	r24, r1
    1d98:	91 05       	cpc	r25, r1
    1d9a:	09 f4       	brne	.+2      	; 0x1d9e <f_write+0x11e>
    1d9c:	74 c1       	rjmp	.+744    	; 0x2086 <f_write+0x406>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    1d9e:	61 30       	cpi	r22, 0x01	; 1
    1da0:	71 05       	cpc	r23, r1
    1da2:	81 05       	cpc	r24, r1
    1da4:	91 05       	cpc	r25, r1
    1da6:	49 f4       	brne	.+18     	; 0x1dba <f_write+0x13a>
    1da8:	eb 81       	ldd	r30, Y+3	; 0x03
    1daa:	fc 81       	ldd	r31, Y+4	; 0x04
    1dac:	84 81       	ldd	r24, Z+4	; 0x04
    1dae:	80 68       	ori	r24, 0x80	; 128
    1db0:	84 83       	std	Z+4, r24	; 0x04
    1db2:	22 e0       	ldi	r18, 0x02	; 2
    1db4:	82 2e       	mov	r8, r18
    1db6:	91 2c       	mov	r9, r1
    1db8:	87 c1       	rjmp	.+782    	; 0x20c8 <f_write+0x448>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    1dba:	6f 3f       	cpi	r22, 0xFF	; 255
    1dbc:	ff ef       	ldi	r31, 0xFF	; 255
    1dbe:	7f 07       	cpc	r23, r31
    1dc0:	ff ef       	ldi	r31, 0xFF	; 255
    1dc2:	8f 07       	cpc	r24, r31
    1dc4:	ff ef       	ldi	r31, 0xFF	; 255
    1dc6:	9f 07       	cpc	r25, r31
    1dc8:	49 f4       	brne	.+18     	; 0x1ddc <f_write+0x15c>
    1dca:	ab 81       	ldd	r26, Y+3	; 0x03
    1dcc:	bc 81       	ldd	r27, Y+4	; 0x04
    1dce:	14 96       	adiw	r26, 0x04	; 4
    1dd0:	8c 91       	ld	r24, X
    1dd2:	14 97       	sbiw	r26, 0x04	; 4
    1dd4:	80 68       	ori	r24, 0x80	; 128
    1dd6:	14 96       	adiw	r26, 0x04	; 4
    1dd8:	8c 93       	st	X, r24
    1dda:	09 c1       	rjmp	.+530    	; 0x1fee <f_write+0x36e>
				fp->curr_clust = clst;				/* Update current cluster */
    1ddc:	eb 81       	ldd	r30, Y+3	; 0x03
    1dde:	fc 81       	ldd	r31, Y+4	; 0x04
    1de0:	62 8b       	std	Z+18, r22	; 0x12
    1de2:	73 8b       	std	Z+19, r23	; 0x13
    1de4:	84 8b       	std	Z+20, r24	; 0x14
    1de6:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector address in the cluster */
    1de8:	15 82       	std	Z+5, r1	; 0x05
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
    1dea:	ab 81       	ldd	r26, Y+3	; 0x03
    1dec:	bc 81       	ldd	r27, Y+4	; 0x04
    1dee:	ed 91       	ld	r30, X+
    1df0:	fc 91       	ld	r31, X
    1df2:	11 97       	sbiw	r26, 0x01	; 1
    1df4:	26 a5       	ldd	r18, Z+46	; 0x2e
    1df6:	37 a5       	ldd	r19, Z+47	; 0x2f
    1df8:	40 a9       	ldd	r20, Z+48	; 0x30
    1dfa:	51 a9       	ldd	r21, Z+49	; 0x31
    1dfc:	56 96       	adiw	r26, 0x16	; 22
    1dfe:	ed 90       	ld	r14, X+
    1e00:	fd 90       	ld	r15, X+
    1e02:	0d 91       	ld	r16, X+
    1e04:	1c 91       	ld	r17, X
    1e06:	59 97       	sbiw	r26, 0x19	; 25
    1e08:	2e 15       	cp	r18, r14
    1e0a:	3f 05       	cpc	r19, r15
    1e0c:	40 07       	cpc	r20, r16
    1e0e:	51 07       	cpc	r21, r17
    1e10:	51 f4       	brne	.+20     	; 0x1e26 <f_write+0x1a6>
    1e12:	cf 01       	movw	r24, r30
    1e14:	40 e0       	ldi	r20, 0x00	; 0
    1e16:	50 e0       	ldi	r21, 0x00	; 0
    1e18:	60 e0       	ldi	r22, 0x00	; 0
    1e1a:	70 e0       	ldi	r23, 0x00	; 0
    1e1c:	0e 94 fd 04 	call	0x9fa	; 0x9fa <move_window>
    1e20:	89 2b       	or	r24, r25
    1e22:	09 f0       	breq	.+2      	; 0x1e26 <f_write+0x1a6>
    1e24:	df c0       	rjmp	.+446    	; 0x1fe4 <f_write+0x364>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    1e26:	ab 81       	ldd	r26, Y+3	; 0x03
    1e28:	bc 81       	ldd	r27, Y+4	; 0x04
    1e2a:	0d 91       	ld	r16, X+
    1e2c:	1c 91       	ld	r17, X
    1e2e:	11 97       	sbiw	r26, 0x01	; 1
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    1e30:	52 96       	adiw	r26, 0x12	; 18
    1e32:	2d 91       	ld	r18, X+
    1e34:	3d 91       	ld	r19, X+
    1e36:	4d 91       	ld	r20, X+
    1e38:	5c 91       	ld	r21, X
    1e3a:	55 97       	sbiw	r26, 0x15	; 21
    1e3c:	22 50       	subi	r18, 0x02	; 2
    1e3e:	30 40       	sbci	r19, 0x00	; 0
    1e40:	40 40       	sbci	r20, 0x00	; 0
    1e42:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1e44:	f8 01       	movw	r30, r16
    1e46:	86 8d       	ldd	r24, Z+30	; 0x1e
    1e48:	97 8d       	ldd	r25, Z+31	; 0x1f
    1e4a:	a0 a1       	ldd	r26, Z+32	; 0x20
    1e4c:	b1 a1       	ldd	r27, Z+33	; 0x21
    1e4e:	02 97       	sbiw	r24, 0x02	; 2
    1e50:	a1 09       	sbc	r26, r1
    1e52:	b1 09       	sbc	r27, r1
    1e54:	28 17       	cp	r18, r24
    1e56:	39 07       	cpc	r19, r25
    1e58:	4a 07       	cpc	r20, r26
    1e5a:	5b 07       	cpc	r21, r27
    1e5c:	b8 f4       	brcc	.+46     	; 0x1e8c <f_write+0x20c>
	return clst * fs->csize + fs->database;
    1e5e:	32 80       	ldd	r3, Z+2	; 0x02
    1e60:	63 2d       	mov	r22, r3
    1e62:	70 e0       	ldi	r23, 0x00	; 0
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	0e 94 15 2d 	call	0x5a2a	; 0x5a2a <__mulsi3>
    1e6c:	9b 01       	movw	r18, r22
    1e6e:	ac 01       	movw	r20, r24
    1e70:	f8 01       	movw	r30, r16
    1e72:	82 a5       	ldd	r24, Z+42	; 0x2a
    1e74:	93 a5       	ldd	r25, Z+43	; 0x2b
    1e76:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1e78:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1e7a:	28 0f       	add	r18, r24
    1e7c:	39 1f       	adc	r19, r25
    1e7e:	4a 1f       	adc	r20, r26
    1e80:	5b 1f       	adc	r21, r27
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    1e82:	21 15       	cp	r18, r1
    1e84:	31 05       	cpc	r19, r1
    1e86:	41 05       	cpc	r20, r1
    1e88:	51 05       	cpc	r21, r1
    1e8a:	49 f4       	brne	.+18     	; 0x1e9e <f_write+0x21e>
    1e8c:	ab 81       	ldd	r26, Y+3	; 0x03
    1e8e:	bc 81       	ldd	r27, Y+4	; 0x04
    1e90:	14 96       	adiw	r26, 0x04	; 4
    1e92:	8c 91       	ld	r24, X
    1e94:	14 97       	sbiw	r26, 0x04	; 4
    1e96:	80 68       	ori	r24, 0x80	; 128
    1e98:	14 96       	adiw	r26, 0x04	; 4
    1e9a:	8c 93       	st	X, r24
    1e9c:	8a cf       	rjmp	.-236    	; 0x1db2 <f_write+0x132>
			sect += fp->csect;
    1e9e:	eb 81       	ldd	r30, Y+3	; 0x03
    1ea0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ea2:	85 81       	ldd	r24, Z+5	; 0x05
    1ea4:	59 01       	movw	r10, r18
    1ea6:	6a 01       	movw	r12, r20
    1ea8:	a8 0e       	add	r10, r24
    1eaa:	b1 1c       	adc	r11, r1
    1eac:	c1 1c       	adc	r12, r1
    1eae:	d1 1c       	adc	r13, r1
			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
    1eb0:	73 01       	movw	r14, r6
    1eb2:	ef 2c       	mov	r14, r15
    1eb4:	ff 24       	eor	r15, r15
    1eb6:	e6 94       	lsr	r14
			if (cc) {								/* Write maximum contiguous sectors directly */
    1eb8:	e1 14       	cp	r14, r1
    1eba:	f1 04       	cpc	r15, r1
    1ebc:	09 f4       	brne	.+2      	; 0x1ec0 <f_write+0x240>
    1ebe:	51 c0       	rjmp	.+162    	; 0x1f62 <f_write+0x2e2>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    1ec0:	28 2f       	mov	r18, r24
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	c7 01       	movw	r24, r14
    1ec6:	82 0f       	add	r24, r18
    1ec8:	93 1f       	adc	r25, r19
    1eca:	63 2d       	mov	r22, r3
    1ecc:	70 e0       	ldi	r23, 0x00	; 0
    1ece:	68 17       	cp	r22, r24
    1ed0:	79 07       	cpc	r23, r25
    1ed2:	18 f4       	brcc	.+6      	; 0x1eda <f_write+0x25a>
					cc = fp->fs->csize - fp->csect;
    1ed4:	7b 01       	movw	r14, r22
    1ed6:	e2 1a       	sub	r14, r18
    1ed8:	f3 0a       	sbc	r15, r19
				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
    1eda:	d8 01       	movw	r26, r16
    1edc:	11 96       	adiw	r26, 0x01	; 1
    1ede:	8c 91       	ld	r24, X
    1ee0:	b2 01       	movw	r22, r4
    1ee2:	a6 01       	movw	r20, r12
    1ee4:	95 01       	movw	r18, r10
    1ee6:	0e 2d       	mov	r16, r14
    1ee8:	0e 94 b1 19 	call	0x3362	; 0x3362 <disk_write>
    1eec:	89 2b       	or	r24, r25
    1eee:	09 f0       	breq	.+2      	; 0x1ef2 <f_write+0x272>
    1ef0:	79 c0       	rjmp	.+242    	; 0x1fe4 <f_write+0x364>
					ABORT(fp->fs, FR_DISK_ERR);
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
    1ef2:	ab 81       	ldd	r26, Y+3	; 0x03
    1ef4:	bc 81       	ldd	r27, Y+4	; 0x04
    1ef6:	ed 91       	ld	r30, X+
    1ef8:	fc 91       	ld	r31, X
    1efa:	26 a5       	ldd	r18, Z+46	; 0x2e
    1efc:	37 a5       	ldd	r19, Z+47	; 0x2f
    1efe:	40 a9       	ldd	r20, Z+48	; 0x30
    1f00:	51 a9       	ldd	r21, Z+49	; 0x31
    1f02:	2a 19       	sub	r18, r10
    1f04:	3b 09       	sbc	r19, r11
    1f06:	4c 09       	sbc	r20, r12
    1f08:	5d 09       	sbc	r21, r13
    1f0a:	c7 01       	movw	r24, r14
    1f0c:	a0 e0       	ldi	r26, 0x00	; 0
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	28 17       	cp	r18, r24
    1f12:	39 07       	cpc	r19, r25
    1f14:	4a 07       	cpc	r20, r26
    1f16:	5b 07       	cpc	r21, r27
    1f18:	d0 f4       	brcc	.+52     	; 0x1f4e <f_write+0x2ce>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    1f1a:	df 01       	movw	r26, r30
    1f1c:	d2 96       	adiw	r26, 0x32	; 50
	const char *s = (const char *)src;
    1f1e:	89 e0       	ldi	r24, 0x09	; 9
    1f20:	22 0f       	add	r18, r18
    1f22:	33 1f       	adc	r19, r19
    1f24:	44 1f       	adc	r20, r20
    1f26:	55 1f       	adc	r21, r21
    1f28:	8a 95       	dec	r24
    1f2a:	d1 f7       	brne	.-12     	; 0x1f20 <f_write+0x2a0>
    1f2c:	f2 01       	movw	r30, r4
    1f2e:	e2 0f       	add	r30, r18
    1f30:	f3 1f       	adc	r31, r19
	while (cnt--) *d++ = *s++;
    1f32:	9f 01       	movw	r18, r30
    1f34:	20 50       	subi	r18, 0x00	; 0
    1f36:	3e 4f       	sbci	r19, 0xFE	; 254
    1f38:	02 c0       	rjmp	.+4      	; 0x1f3e <f_write+0x2be>
    1f3a:	81 91       	ld	r24, Z+
    1f3c:	8d 93       	st	X+, r24
    1f3e:	e2 17       	cp	r30, r18
    1f40:	f3 07       	cpc	r31, r19
    1f42:	d9 f7       	brne	.-10     	; 0x1f3a <f_write+0x2ba>
				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
    1f44:	ab 81       	ldd	r26, Y+3	; 0x03
    1f46:	bc 81       	ldd	r27, Y+4	; 0x04
    1f48:	ed 91       	ld	r30, X+
    1f4a:	fc 91       	ld	r31, X
    1f4c:	14 82       	std	Z+4, r1	; 0x04
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    1f4e:	eb 81       	ldd	r30, Y+3	; 0x03
    1f50:	fc 81       	ldd	r31, Y+4	; 0x04
    1f52:	85 81       	ldd	r24, Z+5	; 0x05
    1f54:	8e 0d       	add	r24, r14
    1f56:	85 83       	std	Z+5, r24	; 0x05
				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    1f58:	b7 01       	movw	r22, r14
    1f5a:	76 2f       	mov	r23, r22
    1f5c:	66 27       	eor	r22, r22
    1f5e:	77 0f       	add	r23, r23
    1f60:	71 c0       	rjmp	.+226    	; 0x2044 <f_write+0x3c4>
				continue;
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
    1f62:	ab 81       	ldd	r26, Y+3	; 0x03
    1f64:	bc 81       	ldd	r27, Y+4	; 0x04
    1f66:	16 96       	adiw	r26, 0x06	; 6
    1f68:	2d 91       	ld	r18, X+
    1f6a:	3d 91       	ld	r19, X+
    1f6c:	4d 91       	ld	r20, X+
    1f6e:	5c 91       	ld	r21, X
    1f70:	19 97       	sbiw	r26, 0x09	; 9
    1f72:	1a 96       	adiw	r26, 0x0a	; 10
    1f74:	8d 91       	ld	r24, X+
    1f76:	9d 91       	ld	r25, X+
    1f78:	0d 90       	ld	r0, X+
    1f7a:	bc 91       	ld	r27, X
    1f7c:	a0 2d       	mov	r26, r0
    1f7e:	28 17       	cp	r18, r24
    1f80:	39 07       	cpc	r19, r25
    1f82:	4a 07       	cpc	r20, r26
    1f84:	5b 07       	cpc	r21, r27
    1f86:	88 f0       	brcs	.+34     	; 0x1faa <f_write+0x32a>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    1f88:	c8 01       	movw	r24, r16
    1f8a:	40 e0       	ldi	r20, 0x00	; 0
    1f8c:	50 e0       	ldi	r21, 0x00	; 0
    1f8e:	60 e0       	ldi	r22, 0x00	; 0
    1f90:	70 e0       	ldi	r23, 0x00	; 0
    1f92:	0e 94 fd 04 	call	0x9fa	; 0x9fa <move_window>
    1f96:	89 2b       	or	r24, r25
    1f98:	29 f5       	brne	.+74     	; 0x1fe4 <f_write+0x364>
				fp->fs->winsect = sect;
    1f9a:	ab 81       	ldd	r26, Y+3	; 0x03
    1f9c:	bc 81       	ldd	r27, Y+4	; 0x04
    1f9e:	ed 91       	ld	r30, X+
    1fa0:	fc 91       	ld	r31, X
    1fa2:	a6 a6       	std	Z+46, r10	; 0x2e
    1fa4:	b7 a6       	std	Z+47, r11	; 0x2f
    1fa6:	c0 aa       	std	Z+48, r12	; 0x30
    1fa8:	d1 aa       	std	Z+49, r13	; 0x31
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    1faa:	eb 81       	ldd	r30, Y+3	; 0x03
    1fac:	fc 81       	ldd	r31, Y+4	; 0x04
    1fae:	a6 8a       	std	Z+22, r10	; 0x16
    1fb0:	b7 8a       	std	Z+23, r11	; 0x17
    1fb2:	c0 8e       	std	Z+24, r12	; 0x18
    1fb4:	d1 8e       	std	Z+25, r13	; 0x19
			fp->csect++;							/* Next sector address in the cluster */
    1fb6:	85 81       	ldd	r24, Z+5	; 0x05
    1fb8:	8f 5f       	subi	r24, 0xFF	; 255
    1fba:	85 83       	std	Z+5, r24	; 0x05
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    1fbc:	ab 81       	ldd	r26, Y+3	; 0x03
    1fbe:	bc 81       	ldd	r27, Y+4	; 0x04
    1fc0:	16 96       	adiw	r26, 0x06	; 6
    1fc2:	cd 90       	ld	r12, X+
    1fc4:	dd 90       	ld	r13, X+
    1fc6:	ed 90       	ld	r14, X+
    1fc8:	fc 90       	ld	r15, X
    1fca:	19 97       	sbiw	r26, 0x09	; 9
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
    1fcc:	56 96       	adiw	r26, 0x16	; 22
    1fce:	4d 91       	ld	r20, X+
    1fd0:	5d 91       	ld	r21, X+
    1fd2:	6d 91       	ld	r22, X+
    1fd4:	7c 91       	ld	r23, X
    1fd6:	59 97       	sbiw	r26, 0x19	; 25
    1fd8:	8d 91       	ld	r24, X+
    1fda:	9c 91       	ld	r25, X
    1fdc:	0e 94 fd 04 	call	0x9fa	; 0x9fa <move_window>
    1fe0:	89 2b       	or	r24, r25
    1fe2:	49 f0       	breq	.+18     	; 0x1ff6 <f_write+0x376>
			ABORT(fp->fs, FR_DISK_ERR);
    1fe4:	eb 81       	ldd	r30, Y+3	; 0x03
    1fe6:	fc 81       	ldd	r31, Y+4	; 0x04
    1fe8:	84 81       	ldd	r24, Z+4	; 0x04
    1fea:	80 68       	ori	r24, 0x80	; 128
    1fec:	84 83       	std	Z+4, r24	; 0x04
    1fee:	a1 e0       	ldi	r26, 0x01	; 1
    1ff0:	8a 2e       	mov	r8, r26
    1ff2:	91 2c       	mov	r9, r1
    1ff4:	69 c0       	rjmp	.+210    	; 0x20c8 <f_write+0x448>
			}
#endif
			fp->dsect = sect;
			fp->csect++;							/* Next sector address in the cluster */
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    1ff6:	c6 01       	movw	r24, r12
    1ff8:	91 70       	andi	r25, 0x01	; 1
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	32 e0       	ldi	r19, 0x02	; 2
    1ffe:	28 1b       	sub	r18, r24
    2000:	39 0b       	sbc	r19, r25
    2002:	b3 01       	movw	r22, r6
    2004:	26 15       	cp	r18, r6
    2006:	37 05       	cpc	r19, r7
    2008:	08 f4       	brcc	.+2      	; 0x200c <f_write+0x38c>
    200a:	b9 01       	movw	r22, r18
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    200c:	ab 81       	ldd	r26, Y+3	; 0x03
    200e:	bc 81       	ldd	r27, Y+4	; 0x04
    2010:	16 96       	adiw	r26, 0x06	; 6
    2012:	8d 91       	ld	r24, X+
    2014:	9c 91       	ld	r25, X
    2016:	17 97       	sbiw	r26, 0x07	; 7
    2018:	91 70       	andi	r25, 0x01	; 1
    201a:	c2 96       	adiw	r24, 0x32	; 50
    201c:	0d 90       	ld	r0, X+
    201e:	bc 91       	ld	r27, X
    2020:	a0 2d       	mov	r26, r0
    2022:	a8 0f       	add	r26, r24
    2024:	b9 1f       	adc	r27, r25
	const char *s = (const char *)src;
    2026:	f2 01       	movw	r30, r4
	while (cnt--) *d++ = *s++;
    2028:	92 01       	movw	r18, r4
    202a:	26 0f       	add	r18, r22
    202c:	37 1f       	adc	r19, r23
    202e:	02 c0       	rjmp	.+4      	; 0x2034 <f_write+0x3b4>
    2030:	81 91       	ld	r24, Z+
    2032:	8d 93       	st	X+, r24
    2034:	e2 17       	cp	r30, r18
    2036:	f3 07       	cpc	r31, r19
    2038:	d9 f7       	brne	.-10     	; 0x2030 <f_write+0x3b0>
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
    203a:	ab 81       	ldd	r26, Y+3	; 0x03
    203c:	bc 81       	ldd	r27, Y+4	; 0x04
    203e:	ed 91       	ld	r30, X+
    2040:	fc 91       	ld	r31, X
    2042:	24 82       	std	Z+4, r2	; 0x04
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    2044:	46 0e       	add	r4, r22
    2046:	57 1e       	adc	r5, r23
    2048:	cb 01       	movw	r24, r22
    204a:	a0 e0       	ldi	r26, 0x00	; 0
    204c:	b0 e0       	ldi	r27, 0x00	; 0
    204e:	eb 81       	ldd	r30, Y+3	; 0x03
    2050:	fc 81       	ldd	r31, Y+4	; 0x04
    2052:	26 81       	ldd	r18, Z+6	; 0x06
    2054:	37 81       	ldd	r19, Z+7	; 0x07
    2056:	40 85       	ldd	r20, Z+8	; 0x08
    2058:	51 85       	ldd	r21, Z+9	; 0x09
    205a:	28 0f       	add	r18, r24
    205c:	39 1f       	adc	r19, r25
    205e:	4a 1f       	adc	r20, r26
    2060:	5b 1f       	adc	r21, r27
    2062:	26 83       	std	Z+6, r18	; 0x06
    2064:	37 83       	std	Z+7, r19	; 0x07
    2066:	40 87       	std	Z+8, r20	; 0x08
    2068:	51 87       	std	Z+9, r21	; 0x09
    206a:	e9 81       	ldd	r30, Y+1	; 0x01
    206c:	fa 81       	ldd	r31, Y+2	; 0x02
    206e:	80 81       	ld	r24, Z
    2070:	91 81       	ldd	r25, Z+1	; 0x01
    2072:	86 0f       	add	r24, r22
    2074:	97 1f       	adc	r25, r23
    2076:	91 83       	std	Z+1, r25	; 0x01
    2078:	80 83       	st	Z, r24
    207a:	66 1a       	sub	r6, r22
    207c:	77 0a       	sbc	r7, r23
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
    207e:	61 14       	cp	r6, r1
    2080:	71 04       	cpc	r7, r1
    2082:	09 f0       	breq	.+2      	; 0x2086 <f_write+0x406>
    2084:	3f ce       	rjmp	.-898    	; 0x1d04 <f_write+0x84>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    2086:	ab 81       	ldd	r26, Y+3	; 0x03
    2088:	bc 81       	ldd	r27, Y+4	; 0x04
    208a:	16 96       	adiw	r26, 0x06	; 6
    208c:	2d 91       	ld	r18, X+
    208e:	3d 91       	ld	r19, X+
    2090:	4d 91       	ld	r20, X+
    2092:	5c 91       	ld	r21, X
    2094:	19 97       	sbiw	r26, 0x09	; 9
    2096:	1a 96       	adiw	r26, 0x0a	; 10
    2098:	8d 91       	ld	r24, X+
    209a:	9d 91       	ld	r25, X+
    209c:	0d 90       	ld	r0, X+
    209e:	bc 91       	ld	r27, X
    20a0:	a0 2d       	mov	r26, r0
    20a2:	82 17       	cp	r24, r18
    20a4:	93 07       	cpc	r25, r19
    20a6:	a4 07       	cpc	r26, r20
    20a8:	b5 07       	cpc	r27, r21
    20aa:	30 f4       	brcc	.+12     	; 0x20b8 <f_write+0x438>
    20ac:	eb 81       	ldd	r30, Y+3	; 0x03
    20ae:	fc 81       	ldd	r31, Y+4	; 0x04
    20b0:	22 87       	std	Z+10, r18	; 0x0a
    20b2:	33 87       	std	Z+11, r19	; 0x0b
    20b4:	44 87       	std	Z+12, r20	; 0x0c
    20b6:	55 87       	std	Z+13, r21	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
    20b8:	ab 81       	ldd	r26, Y+3	; 0x03
    20ba:	bc 81       	ldd	r27, Y+4	; 0x04
    20bc:	14 96       	adiw	r26, 0x04	; 4
    20be:	8c 91       	ld	r24, X
    20c0:	14 97       	sbiw	r26, 0x04	; 4
    20c2:	80 62       	ori	r24, 0x20	; 32
    20c4:	14 96       	adiw	r26, 0x04	; 4
    20c6:	8c 93       	st	X, r24

	LEAVE_FF(fp->fs, FR_OK);
}
    20c8:	c4 01       	movw	r24, r8
    20ca:	24 96       	adiw	r28, 0x04	; 4
    20cc:	e2 e1       	ldi	r30, 0x12	; 18
    20ce:	0c 94 92 2d 	jmp	0x5b24	; 0x5b24 <__epilogue_restores__>

000020d2 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    20d2:	a4 e0       	ldi	r26, 0x04	; 4
    20d4:	b0 e0       	ldi	r27, 0x00	; 0
    20d6:	ef e6       	ldi	r30, 0x6F	; 111
    20d8:	f0 e1       	ldi	r31, 0x10	; 16
    20da:	0c 94 77 2d 	jmp	0x5aee	; 0x5aee <__prologue_saves__+0x2>
    20de:	9c 83       	std	Y+4, r25	; 0x04
    20e0:	8b 83       	std	Y+3, r24	; 0x03
    20e2:	16 2f       	mov	r17, r22
    20e4:	07 2f       	mov	r16, r23
    20e6:	3a 01       	movw	r6, r20
    20e8:	3a 83       	std	Y+2, r19	; 0x02
    20ea:	29 83       	std	Y+1, r18	; 0x01
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;


	*br = 0;	/* Initialize bytes read */
    20ec:	d9 01       	movw	r26, r18
    20ee:	1d 92       	st	X+, r1
    20f0:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    20f2:	fc 01       	movw	r30, r24
    20f4:	62 81       	ldd	r22, Z+2	; 0x02
    20f6:	73 81       	ldd	r23, Z+3	; 0x03
    20f8:	80 81       	ld	r24, Z
    20fa:	91 81       	ldd	r25, Z+1	; 0x01
    20fc:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <validate>
    2100:	4c 01       	movw	r8, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2102:	00 97       	sbiw	r24, 0x00	; 0
    2104:	09 f0       	breq	.+2      	; 0x2108 <f_read+0x36>
    2106:	8a c1       	rjmp	.+788    	; 0x241c <f_read+0x34a>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    2108:	ab 81       	ldd	r26, Y+3	; 0x03
    210a:	bc 81       	ldd	r27, Y+4	; 0x04
    210c:	14 96       	adiw	r26, 0x04	; 4
    210e:	8c 91       	ld	r24, X
    2110:	87 fd       	sbrc	r24, 7
    2112:	60 c0       	rjmp	.+192    	; 0x21d4 <f_read+0x102>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
    2114:	80 fd       	sbrc	r24, 0
    2116:	04 c0       	rjmp	.+8      	; 0x2120 <f_read+0x4e>
    2118:	97 e0       	ldi	r25, 0x07	; 7
    211a:	89 2e       	mov	r8, r25
    211c:	91 2c       	mov	r9, r1
    211e:	7e c1       	rjmp	.+764    	; 0x241c <f_read+0x34a>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    2120:	eb 81       	ldd	r30, Y+3	; 0x03
    2122:	fc 81       	ldd	r31, Y+4	; 0x04
    2124:	22 85       	ldd	r18, Z+10	; 0x0a
    2126:	33 85       	ldd	r19, Z+11	; 0x0b
    2128:	44 85       	ldd	r20, Z+12	; 0x0c
    212a:	55 85       	ldd	r21, Z+13	; 0x0d
    212c:	86 81       	ldd	r24, Z+6	; 0x06
    212e:	97 81       	ldd	r25, Z+7	; 0x07
    2130:	a0 85       	ldd	r26, Z+8	; 0x08
    2132:	b1 85       	ldd	r27, Z+9	; 0x09
    2134:	28 1b       	sub	r18, r24
    2136:	39 0b       	sbc	r19, r25
    2138:	4a 0b       	sbc	r20, r26
    213a:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
    213c:	c3 01       	movw	r24, r6
    213e:	a0 e0       	ldi	r26, 0x00	; 0
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	28 17       	cp	r18, r24
    2144:	39 07       	cpc	r19, r25
    2146:	4a 07       	cpc	r20, r26
    2148:	5b 07       	cpc	r21, r27
    214a:	08 f4       	brcc	.+2      	; 0x214e <f_read+0x7c>
    214c:	39 01       	movw	r6, r18
)
{
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;
    214e:	81 2f       	mov	r24, r17
    2150:	90 2f       	mov	r25, r16
    2152:	9c 01       	movw	r18, r24
    2154:	29 01       	movw	r4, r18
    2156:	5e c1       	rjmp	.+700    	; 0x2414 <f_read+0x342>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    2158:	ab 81       	ldd	r26, Y+3	; 0x03
    215a:	bc 81       	ldd	r27, Y+4	; 0x04
    215c:	16 96       	adiw	r26, 0x06	; 6
    215e:	2d 91       	ld	r18, X+
    2160:	3d 91       	ld	r19, X+
    2162:	4d 91       	ld	r20, X+
    2164:	5c 91       	ld	r21, X
    2166:	19 97       	sbiw	r26, 0x09	; 9
    2168:	da 01       	movw	r26, r20
    216a:	c9 01       	movw	r24, r18
    216c:	91 70       	andi	r25, 0x01	; 1
    216e:	a0 70       	andi	r26, 0x00	; 0
    2170:	b0 70       	andi	r27, 0x00	; 0
    2172:	00 97       	sbiw	r24, 0x00	; 0
    2174:	a1 05       	cpc	r26, r1
    2176:	b1 05       	cpc	r27, r1
    2178:	09 f0       	breq	.+2      	; 0x217c <f_read+0xaa>
    217a:	ef c0       	rjmp	.+478    	; 0x235a <f_read+0x288>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    217c:	ab 81       	ldd	r26, Y+3	; 0x03
    217e:	bc 81       	ldd	r27, Y+4	; 0x04
    2180:	ed 91       	ld	r30, X+
    2182:	fc 91       	ld	r31, X
    2184:	11 97       	sbiw	r26, 0x01	; 1
    2186:	15 96       	adiw	r26, 0x05	; 5
    2188:	9c 91       	ld	r25, X
    218a:	15 97       	sbiw	r26, 0x05	; 5
    218c:	82 81       	ldd	r24, Z+2	; 0x02
    218e:	98 17       	cp	r25, r24
    2190:	e8 f1       	brcs	.+122    	; 0x220c <f_read+0x13a>
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
    2192:	21 15       	cp	r18, r1
    2194:	31 05       	cpc	r19, r1
    2196:	41 05       	cpc	r20, r1
    2198:	51 05       	cpc	r21, r1
    219a:	39 f4       	brne	.+14     	; 0x21aa <f_read+0xd8>
    219c:	1e 96       	adiw	r26, 0x0e	; 14
    219e:	6d 91       	ld	r22, X+
    21a0:	7d 91       	ld	r23, X+
    21a2:	8d 91       	ld	r24, X+
    21a4:	9c 91       	ld	r25, X
    21a6:	51 97       	sbiw	r26, 0x11	; 17
    21a8:	0b c0       	rjmp	.+22     	; 0x21c0 <f_read+0xee>
    21aa:	ab 81       	ldd	r26, Y+3	; 0x03
    21ac:	bc 81       	ldd	r27, Y+4	; 0x04
    21ae:	52 96       	adiw	r26, 0x12	; 18
    21b0:	4d 91       	ld	r20, X+
    21b2:	5d 91       	ld	r21, X+
    21b4:	6d 91       	ld	r22, X+
    21b6:	7c 91       	ld	r23, X
    21b8:	55 97       	sbiw	r26, 0x15	; 21
    21ba:	cf 01       	movw	r24, r30
    21bc:	0e 94 31 06 	call	0xc62	; 0xc62 <get_fat>
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
    21c0:	62 30       	cpi	r22, 0x02	; 2
    21c2:	71 05       	cpc	r23, r1
    21c4:	81 05       	cpc	r24, r1
    21c6:	91 05       	cpc	r25, r1
    21c8:	48 f4       	brcc	.+18     	; 0x21dc <f_read+0x10a>
    21ca:	eb 81       	ldd	r30, Y+3	; 0x03
    21cc:	fc 81       	ldd	r31, Y+4	; 0x04
    21ce:	84 81       	ldd	r24, Z+4	; 0x04
    21d0:	80 68       	ori	r24, 0x80	; 128
    21d2:	84 83       	std	Z+4, r24	; 0x04
    21d4:	82 e0       	ldi	r24, 0x02	; 2
    21d6:	88 2e       	mov	r8, r24
    21d8:	91 2c       	mov	r9, r1
    21da:	20 c1       	rjmp	.+576    	; 0x241c <f_read+0x34a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    21dc:	6f 3f       	cpi	r22, 0xFF	; 255
    21de:	ff ef       	ldi	r31, 0xFF	; 255
    21e0:	7f 07       	cpc	r23, r31
    21e2:	ff ef       	ldi	r31, 0xFF	; 255
    21e4:	8f 07       	cpc	r24, r31
    21e6:	ff ef       	ldi	r31, 0xFF	; 255
    21e8:	9f 07       	cpc	r25, r31
    21ea:	49 f4       	brne	.+18     	; 0x21fe <f_read+0x12c>
    21ec:	ab 81       	ldd	r26, Y+3	; 0x03
    21ee:	bc 81       	ldd	r27, Y+4	; 0x04
    21f0:	14 96       	adiw	r26, 0x04	; 4
    21f2:	8c 91       	ld	r24, X
    21f4:	14 97       	sbiw	r26, 0x04	; 4
    21f6:	80 68       	ori	r24, 0x80	; 128
    21f8:	14 96       	adiw	r26, 0x04	; 4
    21fa:	8c 93       	st	X, r24
    21fc:	c7 c0       	rjmp	.+398    	; 0x238c <f_read+0x2ba>
				fp->curr_clust = clst;				/* Update current cluster */
    21fe:	eb 81       	ldd	r30, Y+3	; 0x03
    2200:	fc 81       	ldd	r31, Y+4	; 0x04
    2202:	62 8b       	std	Z+18, r22	; 0x12
    2204:	73 8b       	std	Z+19, r23	; 0x13
    2206:	84 8b       	std	Z+20, r24	; 0x14
    2208:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector offset in the cluster */
    220a:	15 82       	std	Z+5, r1	; 0x05
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    220c:	ab 81       	ldd	r26, Y+3	; 0x03
    220e:	bc 81       	ldd	r27, Y+4	; 0x04
    2210:	0d 91       	ld	r16, X+
    2212:	1c 91       	ld	r17, X
    2214:	11 97       	sbiw	r26, 0x01	; 1
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    2216:	52 96       	adiw	r26, 0x12	; 18
    2218:	2d 91       	ld	r18, X+
    221a:	3d 91       	ld	r19, X+
    221c:	4d 91       	ld	r20, X+
    221e:	5c 91       	ld	r21, X
    2220:	55 97       	sbiw	r26, 0x15	; 21
    2222:	22 50       	subi	r18, 0x02	; 2
    2224:	30 40       	sbci	r19, 0x00	; 0
    2226:	40 40       	sbci	r20, 0x00	; 0
    2228:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    222a:	f8 01       	movw	r30, r16
    222c:	86 8d       	ldd	r24, Z+30	; 0x1e
    222e:	97 8d       	ldd	r25, Z+31	; 0x1f
    2230:	a0 a1       	ldd	r26, Z+32	; 0x20
    2232:	b1 a1       	ldd	r27, Z+33	; 0x21
    2234:	02 97       	sbiw	r24, 0x02	; 2
    2236:	a1 09       	sbc	r26, r1
    2238:	b1 09       	sbc	r27, r1
    223a:	28 17       	cp	r18, r24
    223c:	39 07       	cpc	r19, r25
    223e:	4a 07       	cpc	r20, r26
    2240:	5b 07       	cpc	r21, r27
    2242:	b8 f4       	brcc	.+46     	; 0x2272 <f_read+0x1a0>
	return clst * fs->csize + fs->database;
    2244:	32 80       	ldd	r3, Z+2	; 0x02
    2246:	63 2d       	mov	r22, r3
    2248:	70 e0       	ldi	r23, 0x00	; 0
    224a:	80 e0       	ldi	r24, 0x00	; 0
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	0e 94 15 2d 	call	0x5a2a	; 0x5a2a <__mulsi3>
    2252:	9b 01       	movw	r18, r22
    2254:	ac 01       	movw	r20, r24
    2256:	f8 01       	movw	r30, r16
    2258:	82 a5       	ldd	r24, Z+42	; 0x2a
    225a:	93 a5       	ldd	r25, Z+43	; 0x2b
    225c:	a4 a5       	ldd	r26, Z+44	; 0x2c
    225e:	b5 a5       	ldd	r27, Z+45	; 0x2d
    2260:	28 0f       	add	r18, r24
    2262:	39 1f       	adc	r19, r25
    2264:	4a 1f       	adc	r20, r26
    2266:	5b 1f       	adc	r21, r27
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->curr_clust = clst;				/* Update current cluster */
				fp->csect = 0;						/* Reset sector offset in the cluster */
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    2268:	21 15       	cp	r18, r1
    226a:	31 05       	cpc	r19, r1
    226c:	41 05       	cpc	r20, r1
    226e:	51 05       	cpc	r21, r1
    2270:	49 f4       	brne	.+18     	; 0x2284 <f_read+0x1b2>
    2272:	ab 81       	ldd	r26, Y+3	; 0x03
    2274:	bc 81       	ldd	r27, Y+4	; 0x04
    2276:	14 96       	adiw	r26, 0x04	; 4
    2278:	8c 91       	ld	r24, X
    227a:	14 97       	sbiw	r26, 0x04	; 4
    227c:	80 68       	ori	r24, 0x80	; 128
    227e:	14 96       	adiw	r26, 0x04	; 4
    2280:	8c 93       	st	X, r24
    2282:	a8 cf       	rjmp	.-176    	; 0x21d4 <f_read+0x102>
			sect += fp->csect;
    2284:	eb 81       	ldd	r30, Y+3	; 0x03
    2286:	fc 81       	ldd	r31, Y+4	; 0x04
    2288:	85 81       	ldd	r24, Z+5	; 0x05
    228a:	69 01       	movw	r12, r18
    228c:	7a 01       	movw	r14, r20
    228e:	c8 0e       	add	r12, r24
    2290:	d1 1c       	adc	r13, r1
    2292:	e1 1c       	adc	r14, r1
    2294:	f1 1c       	adc	r15, r1
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
    2296:	53 01       	movw	r10, r6
    2298:	ab 2c       	mov	r10, r11
    229a:	bb 24       	eor	r11, r11
    229c:	a6 94       	lsr	r10
			if (cc) {								/* Read maximum contiguous sectors directly */
    229e:	a1 14       	cp	r10, r1
    22a0:	b1 04       	cpc	r11, r1
    22a2:	09 f4       	brne	.+2      	; 0x22a6 <f_read+0x1d4>
    22a4:	52 c0       	rjmp	.+164    	; 0x234a <f_read+0x278>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    22a6:	28 2f       	mov	r18, r24
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	c5 01       	movw	r24, r10
    22ac:	82 0f       	add	r24, r18
    22ae:	93 1f       	adc	r25, r19
    22b0:	63 2d       	mov	r22, r3
    22b2:	70 e0       	ldi	r23, 0x00	; 0
    22b4:	68 17       	cp	r22, r24
    22b6:	79 07       	cpc	r23, r25
    22b8:	18 f4       	brcc	.+6      	; 0x22c0 <f_read+0x1ee>
					cc = fp->fs->csize - fp->csect;
    22ba:	5b 01       	movw	r10, r22
    22bc:	a2 1a       	sub	r10, r18
    22be:	b3 0a       	sbc	r11, r19
				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
    22c0:	d8 01       	movw	r26, r16
    22c2:	11 96       	adiw	r26, 0x01	; 1
    22c4:	8c 91       	ld	r24, X
    22c6:	b2 01       	movw	r22, r4
    22c8:	a7 01       	movw	r20, r14
    22ca:	96 01       	movw	r18, r12
    22cc:	0a 2d       	mov	r16, r10
    22ce:	0e 94 53 19 	call	0x32a6	; 0x32a6 <disk_read>
    22d2:	89 2b       	or	r24, r25
    22d4:	09 f0       	breq	.+2      	; 0x22d8 <f_read+0x206>
    22d6:	55 c0       	rjmp	.+170    	; 0x2382 <f_read+0x2b0>
					ABORT(fp->fs, FR_DISK_ERR);
#if !_FS_READONLY && _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)		/* Replace one of the read sectors with cached data if it contains a dirty sector */
    22d8:	ab 81       	ldd	r26, Y+3	; 0x03
    22da:	bc 81       	ldd	r27, Y+4	; 0x04
    22dc:	6d 91       	ld	r22, X+
    22de:	7c 91       	ld	r23, X
    22e0:	fb 01       	movw	r30, r22
    22e2:	84 81       	ldd	r24, Z+4	; 0x04
    22e4:	88 23       	and	r24, r24
    22e6:	21 f1       	breq	.+72     	; 0x2330 <f_read+0x25e>
    22e8:	26 a5       	ldd	r18, Z+46	; 0x2e
    22ea:	37 a5       	ldd	r19, Z+47	; 0x2f
    22ec:	40 a9       	ldd	r20, Z+48	; 0x30
    22ee:	51 a9       	ldd	r21, Z+49	; 0x31
    22f0:	2c 19       	sub	r18, r12
    22f2:	3d 09       	sbc	r19, r13
    22f4:	4e 09       	sbc	r20, r14
    22f6:	5f 09       	sbc	r21, r15
    22f8:	c5 01       	movw	r24, r10
    22fa:	a0 e0       	ldi	r26, 0x00	; 0
    22fc:	b0 e0       	ldi	r27, 0x00	; 0
    22fe:	28 17       	cp	r18, r24
    2300:	39 07       	cpc	r19, r25
    2302:	4a 07       	cpc	r20, r26
    2304:	5b 07       	cpc	r21, r27
    2306:	a0 f4       	brcc	.+40     	; 0x2330 <f_read+0x25e>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    2308:	a9 e0       	ldi	r26, 0x09	; 9
    230a:	22 0f       	add	r18, r18
    230c:	33 1f       	adc	r19, r19
    230e:	44 1f       	adc	r20, r20
    2310:	55 1f       	adc	r21, r21
    2312:	aa 95       	dec	r26
    2314:	d1 f7       	brne	.-12     	; 0x230a <f_read+0x238>
    2316:	d2 01       	movw	r26, r4
    2318:	a2 0f       	add	r26, r18
    231a:	b3 1f       	adc	r27, r19
	const char *s = (const char *)src;
    231c:	f2 96       	adiw	r30, 0x32	; 50
	while (cnt--) *d++ = *s++;
    231e:	9b 01       	movw	r18, r22
    2320:	2e 5c       	subi	r18, 0xCE	; 206
    2322:	3d 4f       	sbci	r19, 0xFD	; 253
    2324:	02 c0       	rjmp	.+4      	; 0x232a <f_read+0x258>
    2326:	81 91       	ld	r24, Z+
    2328:	8d 93       	st	X+, r24
    232a:	e2 17       	cp	r30, r18
    232c:	f3 07       	cpc	r31, r19
    232e:	d9 f7       	brne	.-10     	; 0x2326 <f_read+0x254>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    2330:	ab 81       	ldd	r26, Y+3	; 0x03
    2332:	bc 81       	ldd	r27, Y+4	; 0x04
    2334:	15 96       	adiw	r26, 0x05	; 5
    2336:	8c 91       	ld	r24, X
    2338:	15 97       	sbiw	r26, 0x05	; 5
    233a:	8a 0d       	add	r24, r10
    233c:	15 96       	adiw	r26, 0x05	; 5
    233e:	8c 93       	st	X, r24
				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    2340:	b5 01       	movw	r22, r10
    2342:	76 2f       	mov	r23, r22
    2344:	66 27       	eor	r22, r22
    2346:	77 0f       	add	r23, r23
    2348:	48 c0       	rjmp	.+144    	; 0x23da <f_read+0x308>
			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    234a:	eb 81       	ldd	r30, Y+3	; 0x03
    234c:	fc 81       	ldd	r31, Y+4	; 0x04
    234e:	c6 8a       	std	Z+22, r12	; 0x16
    2350:	d7 8a       	std	Z+23, r13	; 0x17
    2352:	e0 8e       	std	Z+24, r14	; 0x18
    2354:	f1 8e       	std	Z+25, r15	; 0x19
			fp->csect++;							/* Next sector address in the cluster */
    2356:	8f 5f       	subi	r24, 0xFF	; 255
    2358:	85 83       	std	Z+5, r24	; 0x05
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    235a:	ab 81       	ldd	r26, Y+3	; 0x03
    235c:	bc 81       	ldd	r27, Y+4	; 0x04
    235e:	16 96       	adiw	r26, 0x06	; 6
    2360:	cd 90       	ld	r12, X+
    2362:	dd 90       	ld	r13, X+
    2364:	ed 90       	ld	r14, X+
    2366:	fc 90       	ld	r15, X
    2368:	19 97       	sbiw	r26, 0x09	; 9
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
    236a:	56 96       	adiw	r26, 0x16	; 22
    236c:	4d 91       	ld	r20, X+
    236e:	5d 91       	ld	r21, X+
    2370:	6d 91       	ld	r22, X+
    2372:	7c 91       	ld	r23, X
    2374:	59 97       	sbiw	r26, 0x19	; 25
    2376:	8d 91       	ld	r24, X+
    2378:	9c 91       	ld	r25, X
    237a:	0e 94 fd 04 	call	0x9fa	; 0x9fa <move_window>
    237e:	89 2b       	or	r24, r25
    2380:	49 f0       	breq	.+18     	; 0x2394 <f_read+0x2c2>
			ABORT(fp->fs, FR_DISK_ERR);
    2382:	eb 81       	ldd	r30, Y+3	; 0x03
    2384:	fc 81       	ldd	r31, Y+4	; 0x04
    2386:	84 81       	ldd	r24, Z+4	; 0x04
    2388:	80 68       	ori	r24, 0x80	; 128
    238a:	84 83       	std	Z+4, r24	; 0x04
    238c:	41 e0       	ldi	r20, 0x01	; 1
    238e:	84 2e       	mov	r8, r20
    2390:	91 2c       	mov	r9, r1
    2392:	44 c0       	rjmp	.+136    	; 0x241c <f_read+0x34a>
			}
#endif
			fp->dsect = sect;
			fp->csect++;							/* Next sector address in the cluster */
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    2394:	c6 01       	movw	r24, r12
    2396:	91 70       	andi	r25, 0x01	; 1
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	32 e0       	ldi	r19, 0x02	; 2
    239c:	28 1b       	sub	r18, r24
    239e:	39 0b       	sbc	r19, r25
    23a0:	b3 01       	movw	r22, r6
    23a2:	26 15       	cp	r18, r6
    23a4:	37 05       	cpc	r19, r7
    23a6:	08 f4       	brcc	.+2      	; 0x23aa <f_read+0x2d8>
    23a8:	b9 01       	movw	r22, r18
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    23aa:	a2 01       	movw	r20, r4
	const char *s = (const char *)src;
    23ac:	ab 81       	ldd	r26, Y+3	; 0x03
    23ae:	bc 81       	ldd	r27, Y+4	; 0x04
    23b0:	16 96       	adiw	r26, 0x06	; 6
    23b2:	8d 91       	ld	r24, X+
    23b4:	9c 91       	ld	r25, X
    23b6:	17 97       	sbiw	r26, 0x07	; 7
    23b8:	91 70       	andi	r25, 0x01	; 1
    23ba:	c2 96       	adiw	r24, 0x32	; 50
    23bc:	ed 91       	ld	r30, X+
    23be:	fc 91       	ld	r31, X
    23c0:	e8 0f       	add	r30, r24
    23c2:	f9 1f       	adc	r31, r25
	while (cnt--) *d++ = *s++;
    23c4:	9f 01       	movw	r18, r30
    23c6:	26 0f       	add	r18, r22
    23c8:	37 1f       	adc	r19, r23
    23ca:	04 c0       	rjmp	.+8      	; 0x23d4 <f_read+0x302>
    23cc:	81 91       	ld	r24, Z+
    23ce:	da 01       	movw	r26, r20
    23d0:	8d 93       	st	X+, r24
    23d2:	ad 01       	movw	r20, r26
    23d4:	e2 17       	cp	r30, r18
    23d6:	f3 07       	cpc	r31, r19
    23d8:	c9 f7       	brne	.-14     	; 0x23cc <f_read+0x2fa>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    23da:	46 0e       	add	r4, r22
    23dc:	57 1e       	adc	r5, r23
    23de:	cb 01       	movw	r24, r22
    23e0:	a0 e0       	ldi	r26, 0x00	; 0
    23e2:	b0 e0       	ldi	r27, 0x00	; 0
    23e4:	eb 81       	ldd	r30, Y+3	; 0x03
    23e6:	fc 81       	ldd	r31, Y+4	; 0x04
    23e8:	26 81       	ldd	r18, Z+6	; 0x06
    23ea:	37 81       	ldd	r19, Z+7	; 0x07
    23ec:	40 85       	ldd	r20, Z+8	; 0x08
    23ee:	51 85       	ldd	r21, Z+9	; 0x09
    23f0:	28 0f       	add	r18, r24
    23f2:	39 1f       	adc	r19, r25
    23f4:	4a 1f       	adc	r20, r26
    23f6:	5b 1f       	adc	r21, r27
    23f8:	26 83       	std	Z+6, r18	; 0x06
    23fa:	37 83       	std	Z+7, r19	; 0x07
    23fc:	40 87       	std	Z+8, r20	; 0x08
    23fe:	51 87       	std	Z+9, r21	; 0x09
    2400:	e9 81       	ldd	r30, Y+1	; 0x01
    2402:	fa 81       	ldd	r31, Y+2	; 0x02
    2404:	80 81       	ld	r24, Z
    2406:	91 81       	ldd	r25, Z+1	; 0x01
    2408:	86 0f       	add	r24, r22
    240a:	97 1f       	adc	r25, r23
    240c:	91 83       	std	Z+1, r25	; 0x01
    240e:	80 83       	st	Z, r24
    2410:	66 1a       	sub	r6, r22
    2412:	77 0a       	sbc	r7, r23
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
    2414:	61 14       	cp	r6, r1
    2416:	71 04       	cpc	r7, r1
    2418:	09 f0       	breq	.+2      	; 0x241c <f_read+0x34a>
    241a:	9e ce       	rjmp	.-708    	; 0x2158 <f_read+0x86>
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    241c:	c4 01       	movw	r24, r8
    241e:	24 96       	adiw	r28, 0x04	; 4
    2420:	e1 e1       	ldi	r30, 0x11	; 17
    2422:	0c 94 93 2d 	jmp	0x5b26	; 0x5b26 <__epilogue_restores__+0x2>

00002426 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    2426:	0f 93       	push	r16
    2428:	cf 93       	push	r28
    242a:	df 93       	push	r29
    242c:	ec 01       	movw	r28, r24
    242e:	9a 01       	movw	r18, r20
    2430:	ab 01       	movw	r20, r22
	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    2432:	bc 01       	movw	r22, r24
    2434:	6e 5c       	subi	r22, 0xCE	; 206
    2436:	7f 4f       	sbci	r23, 0xFF	; 255
    2438:	89 81       	ldd	r24, Y+1	; 0x01
    243a:	01 e0       	ldi	r16, 0x01	; 1
    243c:	0e 94 53 19 	call	0x32a6	; 0x32a6 <disk_read>
    2440:	89 2b       	or	r24, r25
    2442:	11 f0       	breq	.+4      	; 0x2448 <check_fs+0x22>
    2444:	23 e0       	ldi	r18, 0x03	; 3
    2446:	29 c0       	rjmp	.+82     	; 0x249a <check_fs+0x74>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    2448:	c0 5d       	subi	r28, 0xD0	; 208
    244a:	dd 4f       	sbci	r29, 0xFD	; 253
    244c:	88 81       	ld	r24, Y
    244e:	99 81       	ldd	r25, Y+1	; 0x01
    2450:	c0 53       	subi	r28, 0x30	; 48
    2452:	d2 40       	sbci	r29, 0x02	; 2
    2454:	85 55       	subi	r24, 0x55	; 85
    2456:	9a 4a       	sbci	r25, 0xAA	; 170
    2458:	11 f0       	breq	.+4      	; 0x245e <check_fs+0x38>
    245a:	22 e0       	ldi	r18, 0x02	; 2
    245c:	1e c0       	rjmp	.+60     	; 0x249a <check_fs+0x74>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    245e:	c8 59       	subi	r28, 0x98	; 152
    2460:	df 4f       	sbci	r29, 0xFF	; 255
    2462:	88 81       	ld	r24, Y
    2464:	99 81       	ldd	r25, Y+1	; 0x01
    2466:	aa 81       	ldd	r26, Y+2	; 0x02
    2468:	bb 81       	ldd	r27, Y+3	; 0x03
    246a:	c8 56       	subi	r28, 0x68	; 104
    246c:	d0 40       	sbci	r29, 0x00	; 0
    246e:	b0 70       	andi	r27, 0x00	; 0
    2470:	86 54       	subi	r24, 0x46	; 70
    2472:	91 44       	sbci	r25, 0x41	; 65
    2474:	a4 45       	sbci	r26, 0x54	; 84
    2476:	b0 40       	sbci	r27, 0x00	; 0
    2478:	11 f4       	brne	.+4      	; 0x247e <check_fs+0x58>
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	0e c0       	rjmp	.+28     	; 0x249a <check_fs+0x74>
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	cc 57       	subi	r28, 0x7C	; 124
    2482:	df 4f       	sbci	r29, 0xFF	; 255
    2484:	88 81       	ld	r24, Y
    2486:	99 81       	ldd	r25, Y+1	; 0x01
    2488:	aa 81       	ldd	r26, Y+2	; 0x02
    248a:	bb 81       	ldd	r27, Y+3	; 0x03
    248c:	b0 70       	andi	r27, 0x00	; 0
    248e:	86 54       	subi	r24, 0x46	; 70
    2490:	91 44       	sbci	r25, 0x41	; 65
    2492:	a4 45       	sbci	r26, 0x54	; 84
    2494:	b0 40       	sbci	r27, 0x00	; 0
    2496:	09 f0       	breq	.+2      	; 0x249a <check_fs+0x74>
    2498:	21 e0       	ldi	r18, 0x01	; 1
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
    249a:	82 2f       	mov	r24, r18
    249c:	df 91       	pop	r29
    249e:	cf 91       	pop	r28
    24a0:	0f 91       	pop	r16
    24a2:	08 95       	ret

000024a4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    24a4:	0f 93       	push	r16
    24a6:	1f 93       	push	r17
    24a8:	cf 93       	push	r28
    24aa:	df 93       	push	r29
    24ac:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    24ae:	6a 81       	ldd	r22, Y+2	; 0x02
    24b0:	7b 81       	ldd	r23, Y+3	; 0x03
    24b2:	88 81       	ld	r24, Y
    24b4:	99 81       	ldd	r25, Y+1	; 0x01
    24b6:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <validate>
    24ba:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    24bc:	00 97       	sbiw	r24, 0x00	; 0
    24be:	09 f0       	breq	.+2      	; 0x24c2 <f_sync+0x1e>
    24c0:	a6 c0       	rjmp	.+332    	; 0x260e <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    24c2:	8c 81       	ldd	r24, Y+4	; 0x04
    24c4:	85 ff       	sbrs	r24, 5
    24c6:	a3 c0       	rjmp	.+326    	; 0x260e <f_sync+0x16a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    24c8:	4a 8d       	ldd	r20, Y+26	; 0x1a
    24ca:	5b 8d       	ldd	r21, Y+27	; 0x1b
    24cc:	6c 8d       	ldd	r22, Y+28	; 0x1c
    24ce:	7d 8d       	ldd	r23, Y+29	; 0x1d
    24d0:	88 81       	ld	r24, Y
    24d2:	99 81       	ldd	r25, Y+1	; 0x01
    24d4:	0e 94 fd 04 	call	0x9fa	; 0x9fa <move_window>
    24d8:	9c 01       	movw	r18, r24
			if (res == FR_OK) {
    24da:	00 97       	sbiw	r24, 0x00	; 0
    24dc:	09 f0       	breq	.+2      	; 0x24e0 <f_sync+0x3c>
    24de:	97 c0       	rjmp	.+302    	; 0x260e <f_sync+0x16a>
				dir = fp->dir_ptr;
    24e0:	0e 8d       	ldd	r16, Y+30	; 0x1e
    24e2:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    24e4:	f8 01       	movw	r30, r16
    24e6:	83 85       	ldd	r24, Z+11	; 0x0b
    24e8:	80 62       	ori	r24, 0x20	; 32
    24ea:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    24ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    24ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    24f0:	ac 85       	ldd	r26, Y+12	; 0x0c
    24f2:	bd 85       	ldd	r27, Y+13	; 0x0d
    24f4:	84 8f       	std	Z+28, r24	; 0x1c
    24f6:	95 8f       	std	Z+29, r25	; 0x1d
    24f8:	a6 8f       	std	Z+30, r26	; 0x1e
    24fa:	b7 8f       	std	Z+31, r27	; 0x1f
				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
    24fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    24fe:	9f 85       	ldd	r25, Y+15	; 0x0f
    2500:	93 8f       	std	Z+27, r25	; 0x1b
    2502:	82 8f       	std	Z+26, r24	; 0x1a
				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
    2504:	8e 85       	ldd	r24, Y+14	; 0x0e
    2506:	9f 85       	ldd	r25, Y+15	; 0x0f
    2508:	a8 89       	ldd	r26, Y+16	; 0x10
    250a:	b9 89       	ldd	r27, Y+17	; 0x11
    250c:	cd 01       	movw	r24, r26
    250e:	aa 27       	eor	r26, r26
    2510:	bb 27       	eor	r27, r27
    2512:	95 8b       	std	Z+21, r25	; 0x15
    2514:	84 8b       	std	Z+20, r24	; 0x14
				tim = get_fattime();			/* Updated time */
    2516:	0e 94 86 01 	call	0x30c	; 0x30c <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
    251a:	f8 01       	movw	r30, r16
    251c:	66 8b       	std	Z+22, r22	; 0x16
    251e:	77 8b       	std	Z+23, r23	; 0x17
    2520:	80 8f       	std	Z+24, r24	; 0x18
    2522:	91 8f       	std	Z+25, r25	; 0x19
				fp->flag &= ~FA__WRITTEN;
    2524:	8c 81       	ldd	r24, Y+4	; 0x04
    2526:	8f 7d       	andi	r24, 0xDF	; 223
    2528:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    252a:	e8 81       	ld	r30, Y
    252c:	f9 81       	ldd	r31, Y+1	; 0x01
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    2532:	09 90       	ld	r0, Y+
    2534:	d8 81       	ld	r29, Y
    2536:	c0 2d       	mov	r28, r0
)
{
	FRESULT res;


	res = move_window(fs, 0);
    2538:	ce 01       	movw	r24, r28
    253a:	40 e0       	ldi	r20, 0x00	; 0
    253c:	50 e0       	ldi	r21, 0x00	; 0
    253e:	60 e0       	ldi	r22, 0x00	; 0
    2540:	70 e0       	ldi	r23, 0x00	; 0
    2542:	0e 94 fd 04 	call	0x9fa	; 0x9fa <move_window>
    2546:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    2548:	00 97       	sbiw	r24, 0x00	; 0
    254a:	09 f0       	breq	.+2      	; 0x254e <f_sync+0xaa>
    254c:	60 c0       	rjmp	.+192    	; 0x260e <f_sync+0x16a>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    254e:	88 81       	ld	r24, Y
    2550:	83 30       	cpi	r24, 0x03	; 3
    2552:	09 f0       	breq	.+2      	; 0x2556 <f_sync+0xb2>
    2554:	51 c0       	rjmp	.+162    	; 0x25f8 <f_sync+0x154>
    2556:	8d 81       	ldd	r24, Y+5	; 0x05
    2558:	88 23       	and	r24, r24
    255a:	09 f4       	brne	.+2      	; 0x255e <f_sync+0xba>
    255c:	4d c0       	rjmp	.+154    	; 0x25f8 <f_sync+0x154>
			fs->winsect = 0;
    255e:	1e a6       	std	Y+46, r1	; 0x2e
    2560:	1f a6       	std	Y+47, r1	; 0x2f
    2562:	18 aa       	std	Y+48, r1	; 0x30
    2564:	19 aa       	std	Y+49, r1	; 0x31
			mem_set(fs->win, 0, 512);
    2566:	be 01       	movw	r22, r28
    2568:	6e 5c       	subi	r22, 0xCE	; 206
    256a:	7f 4f       	sbci	r23, 0xFF	; 255
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    256c:	fb 01       	movw	r30, r22
	while (cnt--) *d++ = (char)val;
    256e:	ce 01       	movw	r24, r28
    2570:	8e 5c       	subi	r24, 0xCE	; 206
    2572:	9d 4f       	sbci	r25, 0xFD	; 253
    2574:	01 c0       	rjmp	.+2      	; 0x2578 <f_sync+0xd4>
    2576:	11 92       	st	Z+, r1
    2578:	e8 17       	cp	r30, r24
    257a:	f9 07       	cpc	r31, r25
    257c:	e1 f7       	brne	.-8      	; 0x2576 <f_sync+0xd2>
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    257e:	c0 5d       	subi	r28, 0xD0	; 208
    2580:	dd 4f       	sbci	r29, 0xFD	; 253
    2582:	85 e5       	ldi	r24, 0x55	; 85
    2584:	9a ea       	ldi	r25, 0xAA	; 170
    2586:	99 83       	std	Y+1, r25	; 0x01
    2588:	88 83       	st	Y, r24
    258a:	c0 53       	subi	r28, 0x30	; 48
    258c:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    258e:	82 e5       	ldi	r24, 0x52	; 82
    2590:	92 e5       	ldi	r25, 0x52	; 82
    2592:	a1 e6       	ldi	r26, 0x61	; 97
    2594:	b1 e4       	ldi	r27, 0x41	; 65
    2596:	8a ab       	std	Y+50, r24	; 0x32
    2598:	9b ab       	std	Y+51, r25	; 0x33
    259a:	ac ab       	std	Y+52, r26	; 0x34
    259c:	bd ab       	std	Y+53, r27	; 0x35
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    259e:	ca 5e       	subi	r28, 0xEA	; 234
    25a0:	dd 4f       	sbci	r29, 0xFD	; 253
    25a2:	82 e7       	ldi	r24, 0x72	; 114
    25a4:	92 e7       	ldi	r25, 0x72	; 114
    25a6:	a1 e4       	ldi	r26, 0x41	; 65
    25a8:	b1 e6       	ldi	r27, 0x61	; 97
    25aa:	88 83       	st	Y, r24
    25ac:	99 83       	std	Y+1, r25	; 0x01
    25ae:	aa 83       	std	Y+2, r26	; 0x02
    25b0:	bb 83       	std	Y+3, r27	; 0x03
    25b2:	c6 51       	subi	r28, 0x16	; 22
    25b4:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    25b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    25b8:	9f 85       	ldd	r25, Y+15	; 0x0f
    25ba:	a8 89       	ldd	r26, Y+16	; 0x10
    25bc:	b9 89       	ldd	r27, Y+17	; 0x11
    25be:	c6 5e       	subi	r28, 0xE6	; 230
    25c0:	dd 4f       	sbci	r29, 0xFD	; 253
    25c2:	88 83       	st	Y, r24
    25c4:	99 83       	std	Y+1, r25	; 0x01
    25c6:	aa 83       	std	Y+2, r26	; 0x02
    25c8:	bb 83       	std	Y+3, r27	; 0x03
    25ca:	ca 51       	subi	r28, 0x1A	; 26
    25cc:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    25ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    25d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    25d2:	ac 85       	ldd	r26, Y+12	; 0x0c
    25d4:	bd 85       	ldd	r27, Y+13	; 0x0d
    25d6:	c2 5e       	subi	r28, 0xE2	; 226
    25d8:	dd 4f       	sbci	r29, 0xFD	; 253
    25da:	88 83       	st	Y, r24
    25dc:	99 83       	std	Y+1, r25	; 0x01
    25de:	aa 83       	std	Y+2, r26	; 0x02
    25e0:	bb 83       	std	Y+3, r27	; 0x03
    25e2:	ce 51       	subi	r28, 0x1E	; 30
    25e4:	d2 40       	sbci	r29, 0x02	; 2
			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
    25e6:	2a 89       	ldd	r18, Y+18	; 0x12
    25e8:	3b 89       	ldd	r19, Y+19	; 0x13
    25ea:	4c 89       	ldd	r20, Y+20	; 0x14
    25ec:	5d 89       	ldd	r21, Y+21	; 0x15
    25ee:	89 81       	ldd	r24, Y+1	; 0x01
    25f0:	01 e0       	ldi	r16, 0x01	; 1
    25f2:	0e 94 b1 19 	call	0x3362	; 0x3362 <disk_write>
			fs->fsi_flag = 0;
    25f6:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drive, CTRL_SYNC, (void*)NULL) != RES_OK)
    25f8:	89 81       	ldd	r24, Y+1	; 0x01
    25fa:	60 e0       	ldi	r22, 0x00	; 0
    25fc:	40 e0       	ldi	r20, 0x00	; 0
    25fe:	50 e0       	ldi	r21, 0x00	; 0
    2600:	0e 94 28 1a 	call	0x3450	; 0x3450 <disk_ioctl>
    2604:	00 97       	sbiw	r24, 0x00	; 0
    2606:	11 f0       	breq	.+4      	; 0x260c <f_sync+0x168>
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	9c 01       	movw	r18, r24
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    260e:	c9 01       	movw	r24, r18
    2610:	df 91       	pop	r29
    2612:	cf 91       	pop	r28
    2614:	1f 91       	pop	r17
    2616:	0f 91       	pop	r16
    2618:	08 95       	ret

0000261a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    261a:	cf 93       	push	r28
    261c:	df 93       	push	r29
    261e:	ec 01       	movw	r28, r24
#if _FS_READONLY
	res = validate(fp->fs, fp->id);
	if (res == FR_OK) fp->fs = NULL;
	LEAVE_FF(fp->fs, res);
#else
	res = f_sync(fp);
    2620:	0e 94 52 12 	call	0x24a4	; 0x24a4 <f_sync>
    2624:	9c 01       	movw	r18, r24
	if (res == FR_OK) fp->fs = NULL;
    2626:	00 97       	sbiw	r24, 0x00	; 0
    2628:	11 f4       	brne	.+4      	; 0x262e <f_close+0x14>
    262a:	19 82       	std	Y+1, r1	; 0x01
    262c:	18 82       	st	Y, r1
	return res;
#endif
}
    262e:	c9 01       	movw	r24, r18
    2630:	df 91       	pop	r29
    2632:	cf 91       	pop	r28
    2634:	08 95       	ret

00002636 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occured */
	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    2636:	a0 e0       	ldi	r26, 0x00	; 0
    2638:	b0 e0       	ldi	r27, 0x00	; 0
    263a:	e1 e2       	ldi	r30, 0x21	; 33
    263c:	f3 e1       	ldi	r31, 0x13	; 19
    263e:	0c 94 7a 2d 	jmp	0x5af4	; 0x5af4 <__prologue_saves__+0x8>
    2642:	dc 01       	movw	r26, r24
    2644:	14 2f       	mov	r17, r20
	BYTE fmt, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fsize, tsect, mclst;
	const XCHAR *p = *path;
    2646:	ed 91       	ld	r30, X+
    2648:	fc 91       	ld	r31, X
    264a:	11 97       	sbiw	r26, 0x01	; 1
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';				/* Is there a drive number? */
    264c:	80 81       	ld	r24, Z
    264e:	28 2f       	mov	r18, r24
    2650:	33 27       	eor	r19, r19
    2652:	27 fd       	sbrc	r18, 7
    2654:	30 95       	com	r19
    2656:	20 53       	subi	r18, 0x30	; 48
    2658:	30 40       	sbci	r19, 0x00	; 0
	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
    265a:	2a 30       	cpi	r18, 0x0A	; 10
    265c:	31 05       	cpc	r19, r1
    265e:	38 f4       	brcc	.+14     	; 0x266e <chk_mounted+0x38>
    2660:	81 81       	ldd	r24, Z+1	; 0x01
    2662:	8a 33       	cpi	r24, 0x3A	; 58
    2664:	21 f4       	brne	.+8      	; 0x266e <chk_mounted+0x38>
		p += 2; *path = p;			/* Return pointer to the path name */
    2666:	32 96       	adiw	r30, 0x02	; 2
    2668:	ed 93       	st	X+, r30
    266a:	fc 93       	st	X, r31
    266c:	04 c0       	rjmp	.+8      	; 0x2676 <chk_mounted+0x40>
	} else {						/* No drive number is given */
#if _FS_RPATH
		vol = Drive;				/* Use current drive */
    266e:	80 91 26 01 	lds	r24, 0x0126
    2672:	28 2f       	mov	r18, r24
    2674:	30 e0       	ldi	r19, 0x00	; 0
		vol = 0;					/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
    2676:	23 2b       	or	r18, r19
    2678:	19 f0       	breq	.+6      	; 0x2680 <chk_mounted+0x4a>
    267a:	2b e0       	ldi	r18, 0x0B	; 11
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	81 c1       	rjmp	.+770    	; 0x2982 <chk_mounted+0x34c>
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
    2680:	c0 91 22 01 	lds	r28, 0x0122
    2684:	d0 91 23 01 	lds	r29, 0x0123
    2688:	fb 01       	movw	r30, r22
    268a:	d1 83       	std	Z+1, r29	; 0x01
    268c:	c0 83       	st	Z, r28
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
    268e:	20 97       	sbiw	r28, 0x00	; 0
    2690:	19 f4       	brne	.+6      	; 0x2698 <chk_mounted+0x62>
    2692:	2c e0       	ldi	r18, 0x0C	; 12
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	75 c1       	rjmp	.+746    	; 0x2982 <chk_mounted+0x34c>

	ENTER_FF(fs);					/* Lock file system */

	if (fs->fs_type) {				/* If the logical drive has been mounted */
    2698:	88 81       	ld	r24, Y
    269a:	88 23       	and	r24, r24
    269c:	59 f0       	breq	.+22     	; 0x26b4 <chk_mounted+0x7e>
		stat = disk_status(fs->drive);
    269e:	89 81       	ldd	r24, Y+1	; 0x01
    26a0:	0e 94 4c 19 	call	0x3298	; 0x3298 <disk_status>
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
    26a4:	80 fd       	sbrc	r24, 0
    26a6:	06 c0       	rjmp	.+12     	; 0x26b4 <chk_mounted+0x7e>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    26a8:	11 23       	and	r17, r17
    26aa:	09 f4       	brne	.+2      	; 0x26ae <chk_mounted+0x78>
    26ac:	65 c1       	rjmp	.+714    	; 0x2978 <chk_mounted+0x342>
    26ae:	82 fd       	sbrc	r24, 2
    26b0:	60 c1       	rjmp	.+704    	; 0x2972 <chk_mounted+0x33c>
    26b2:	62 c1       	rjmp	.+708    	; 0x2978 <chk_mounted+0x342>
		}
	}

	/* The logical drive must be mounted. Following code attempts to mount the volume */

	fs->fs_type = 0;					/* Clear the file system object */
    26b4:	18 82       	st	Y, r1
	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
    26b6:	19 82       	std	Y+1, r1	; 0x01
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
    26b8:	80 e0       	ldi	r24, 0x00	; 0
    26ba:	0e 94 89 18 	call	0x3112	; 0x3112 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
    26be:	80 ff       	sbrs	r24, 0
    26c0:	03 c0       	rjmp	.+6      	; 0x26c8 <chk_mounted+0x92>
    26c2:	23 e0       	ldi	r18, 0x03	; 3
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	5d c1       	rjmp	.+698    	; 0x2982 <chk_mounted+0x34c>
#if _MAX_SS != 512						/* Get disk sector size if needed */
	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    26c8:	11 23       	and	r17, r17
    26ca:	11 f0       	breq	.+4      	; 0x26d0 <chk_mounted+0x9a>
    26cc:	82 fd       	sbrc	r24, 2
    26ce:	51 c1       	rjmp	.+674    	; 0x2972 <chk_mounted+0x33c>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
    26d0:	ce 01       	movw	r24, r28
    26d2:	40 e0       	ldi	r20, 0x00	; 0
    26d4:	50 e0       	ldi	r21, 0x00	; 0
    26d6:	60 e0       	ldi	r22, 0x00	; 0
    26d8:	70 e0       	ldi	r23, 0x00	; 0
    26da:	0e 94 13 12 	call	0x2426	; 0x2426 <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
    26de:	81 30       	cpi	r24, 0x01	; 1
    26e0:	21 f0       	breq	.+8      	; 0x26ea <chk_mounted+0xb4>
    26e2:	66 24       	eor	r6, r6
    26e4:	77 24       	eor	r7, r7
    26e6:	43 01       	movw	r8, r6
    26e8:	10 c0       	rjmp	.+32     	; 0x270a <chk_mounted+0xd4>
		/* Check a partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
    26ea:	fe 01       	movw	r30, r28
    26ec:	e0 51       	subi	r30, 0x10	; 16
    26ee:	fe 4f       	sbci	r31, 0xFE	; 254
		if (tbl[4]) {									/* Is the partition existing? */
    26f0:	84 81       	ldd	r24, Z+4	; 0x04
    26f2:	88 23       	and	r24, r24
    26f4:	09 f4       	brne	.+2      	; 0x26f8 <chk_mounted+0xc2>
    26f6:	43 c1       	rjmp	.+646    	; 0x297e <chk_mounted+0x348>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
    26f8:	60 84       	ldd	r6, Z+8	; 0x08
    26fa:	71 84       	ldd	r7, Z+9	; 0x09
    26fc:	82 84       	ldd	r8, Z+10	; 0x0a
    26fe:	93 84       	ldd	r9, Z+11	; 0x0b
			fmt = check_fs(fs, bsect);					/* Check the partition */
    2700:	ce 01       	movw	r24, r28
    2702:	b4 01       	movw	r22, r8
    2704:	a3 01       	movw	r20, r6
    2706:	0e 94 13 12 	call	0x2426	; 0x2426 <check_fs>
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    270a:	83 30       	cpi	r24, 0x03	; 3
    270c:	19 f4       	brne	.+6      	; 0x2714 <chk_mounted+0xde>
    270e:	21 e0       	ldi	r18, 0x01	; 1
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	37 c1       	rjmp	.+622    	; 0x2982 <chk_mounted+0x34c>
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
    2714:	88 23       	and	r24, r24
    2716:	09 f0       	breq	.+2      	; 0x271a <chk_mounted+0xe4>
    2718:	32 c1       	rjmp	.+612    	; 0x297e <chk_mounted+0x348>
    271a:	8d ad       	ldd	r24, Y+61	; 0x3d
    271c:	9e ad       	ldd	r25, Y+62	; 0x3e
    271e:	80 50       	subi	r24, 0x00	; 0
    2720:	92 40       	sbci	r25, 0x02	; 2
    2722:	09 f0       	breq	.+2      	; 0x2726 <chk_mounted+0xf0>
    2724:	2c c1       	rjmp	.+600    	; 0x297e <chk_mounted+0x348>
		return FR_NO_FILESYSTEM;

	/* Initialize the file system object */
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    2726:	c8 5b       	subi	r28, 0xB8	; 184
    2728:	df 4f       	sbci	r29, 0xFF	; 255
    272a:	88 81       	ld	r24, Y
    272c:	99 81       	ldd	r25, Y+1	; 0x01
    272e:	c8 54       	subi	r28, 0x48	; 72
    2730:	d0 40       	sbci	r29, 0x00	; 0
    2732:	bc 01       	movw	r22, r24
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	90 e0       	ldi	r25, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
    2738:	61 15       	cp	r22, r1
    273a:	71 05       	cpc	r23, r1
    273c:	81 05       	cpc	r24, r1
    273e:	91 05       	cpc	r25, r1
    2740:	41 f4       	brne	.+16     	; 0x2752 <chk_mounted+0x11c>
    2742:	ca 5a       	subi	r28, 0xAA	; 170
    2744:	df 4f       	sbci	r29, 0xFF	; 255
    2746:	68 81       	ld	r22, Y
    2748:	79 81       	ldd	r23, Y+1	; 0x01
    274a:	8a 81       	ldd	r24, Y+2	; 0x02
    274c:	9b 81       	ldd	r25, Y+3	; 0x03
    274e:	c6 55       	subi	r28, 0x56	; 86
    2750:	d0 40       	sbci	r29, 0x00	; 0
	fs->sects_fat = fsize;
    2752:	6a 8f       	std	Y+26, r22	; 0x1a
    2754:	7b 8f       	std	Y+27, r23	; 0x1b
    2756:	8c 8f       	std	Y+28, r24	; 0x1c
    2758:	9d 8f       	std	Y+29, r25	; 0x1d
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
    275a:	ce 5b       	subi	r28, 0xBE	; 190
    275c:	df 4f       	sbci	r29, 0xFF	; 255
    275e:	28 81       	ld	r18, Y
    2760:	c2 54       	subi	r28, 0x42	; 66
    2762:	d0 40       	sbci	r29, 0x00	; 0
    2764:	2b 83       	std	Y+3, r18	; 0x03
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	40 e0       	ldi	r20, 0x00	; 0
    276a:	50 e0       	ldi	r21, 0x00	; 0
    276c:	0e 94 15 2d 	call	0x5a2a	; 0x5a2a <__mulsi3>
    2770:	5b 01       	movw	r10, r22
    2772:	6c 01       	movw	r12, r24
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
    2774:	fe 01       	movw	r30, r28
    2776:	e0 5c       	subi	r30, 0xC0	; 192
    2778:	ff 4f       	sbci	r31, 0xFF	; 255
    277a:	80 81       	ld	r24, Z
    277c:	91 81       	ldd	r25, Z+1	; 0x01
    277e:	a0 e0       	ldi	r26, 0x00	; 0
    2780:	b0 e0       	ldi	r27, 0x00	; 0
    2782:	86 0d       	add	r24, r6
    2784:	97 1d       	adc	r25, r7
    2786:	a8 1d       	adc	r26, r8
    2788:	b9 1d       	adc	r27, r9
    278a:	8a a3       	std	Y+34, r24	; 0x22
    278c:	9b a3       	std	Y+35, r25	; 0x23
    278e:	ac a3       	std	Y+36, r26	; 0x24
    2790:	bd a3       	std	Y+37, r27	; 0x25
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
    2792:	8f ad       	ldd	r24, Y+63	; 0x3f
    2794:	8a 83       	std	Y+2, r24	; 0x02
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
    2796:	cd 5b       	subi	r28, 0xBD	; 189
    2798:	df 4f       	sbci	r29, 0xFF	; 255
    279a:	28 81       	ld	r18, Y
    279c:	39 81       	ldd	r19, Y+1	; 0x01
    279e:	c3 54       	subi	r28, 0x43	; 67
    27a0:	d0 40       	sbci	r29, 0x00	; 0
    27a2:	39 87       	std	Y+9, r19	; 0x09
    27a4:	28 87       	std	Y+8, r18	; 0x08
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    27a6:	cb 5b       	subi	r28, 0xBB	; 187
    27a8:	df 4f       	sbci	r29, 0xFF	; 255
    27aa:	88 81       	ld	r24, Y
    27ac:	99 81       	ldd	r25, Y+1	; 0x01
    27ae:	c5 54       	subi	r28, 0x45	; 69
    27b0:	d0 40       	sbci	r29, 0x00	; 0
    27b2:	7c 01       	movw	r14, r24
    27b4:	00 e0       	ldi	r16, 0x00	; 0
    27b6:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    27b8:	e1 14       	cp	r14, r1
    27ba:	f1 04       	cpc	r15, r1
    27bc:	01 05       	cpc	r16, r1
    27be:	11 05       	cpc	r17, r1
    27c0:	41 f4       	brne	.+16     	; 0x27d2 <chk_mounted+0x19c>
    27c2:	ce 5a       	subi	r28, 0xAE	; 174
    27c4:	df 4f       	sbci	r29, 0xFF	; 255
    27c6:	e8 80       	ld	r14, Y
    27c8:	f9 80       	ldd	r15, Y+1	; 0x01
    27ca:	0a 81       	ldd	r16, Y+2	; 0x02
    27cc:	1b 81       	ldd	r17, Y+3	; 0x03
    27ce:	c2 55       	subi	r28, 0x52	; 82
    27d0:	d0 40       	sbci	r29, 0x00	; 0
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
    27d2:	80 81       	ld	r24, Z
    27d4:	91 81       	ldd	r25, Z+1	; 0x01
    27d6:	a0 e0       	ldi	r26, 0x00	; 0
    27d8:	b0 e0       	ldi	r27, 0x00	; 0
    27da:	e8 1a       	sub	r14, r24
    27dc:	f9 0a       	sbc	r15, r25
    27de:	0a 0b       	sbc	r16, r26
    27e0:	1b 0b       	sbc	r17, r27
    27e2:	ea 18       	sub	r14, r10
    27e4:	fb 08       	sbc	r15, r11
    27e6:	0c 09       	sbc	r16, r12
    27e8:	1d 09       	sbc	r17, r13
    27ea:	44 e0       	ldi	r20, 0x04	; 4
    27ec:	36 95       	lsr	r19
    27ee:	27 95       	ror	r18
    27f0:	4a 95       	dec	r20
    27f2:	e1 f7       	brne	.-8      	; 0x27ec <chk_mounted+0x1b6>
    27f4:	c9 01       	movw	r24, r18
    27f6:	a0 e0       	ldi	r26, 0x00	; 0
    27f8:	b0 e0       	ldi	r27, 0x00	; 0
    27fa:	e8 1a       	sub	r14, r24
    27fc:	f9 0a       	sbc	r15, r25
    27fe:	0a 0b       	sbc	r16, r26
    2800:	1b 0b       	sbc	r17, r27
    2802:	2a 81       	ldd	r18, Y+2	; 0x02
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	40 e0       	ldi	r20, 0x00	; 0
    2808:	50 e0       	ldi	r21, 0x00	; 0
    280a:	c8 01       	movw	r24, r16
    280c:	b7 01       	movw	r22, r14
    280e:	0e 94 54 2d 	call	0x5aa8	; 0x5aa8 <__udivmodsi4>
    2812:	2e 5f       	subi	r18, 0xFE	; 254
    2814:	3f 4f       	sbci	r19, 0xFF	; 255
    2816:	4f 4f       	sbci	r20, 0xFF	; 255
    2818:	5f 4f       	sbci	r21, 0xFF	; 255
    281a:	2e 8f       	std	Y+30, r18	; 0x1e
    281c:	3f 8f       	std	Y+31, r19	; 0x1f
    281e:	48 a3       	std	Y+32, r20	; 0x20
    2820:	59 a3       	std	Y+33, r21	; 0x21
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
    2822:	27 3f       	cpi	r18, 0xF7	; 247
    2824:	8f e0       	ldi	r24, 0x0F	; 15
    2826:	38 07       	cpc	r19, r24
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	48 07       	cpc	r20, r24
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	58 07       	cpc	r21, r24
    2830:	10 f4       	brcc	.+4      	; 0x2836 <chk_mounted+0x200>
    2832:	11 e0       	ldi	r17, 0x01	; 1
    2834:	07 c0       	rjmp	.+14     	; 0x2844 <chk_mounted+0x20e>
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
    2836:	27 5f       	subi	r18, 0xF7	; 247
    2838:	3f 4f       	sbci	r19, 0xFF	; 255
    283a:	40 40       	sbci	r20, 0x00	; 0
    283c:	50 40       	sbci	r21, 0x00	; 0
    283e:	08 f0       	brcs	.+2      	; 0x2842 <chk_mounted+0x20c>
    2840:	a6 c0       	rjmp	.+332    	; 0x298e <chk_mounted+0x358>
    2842:	12 e0       	ldi	r17, 0x02	; 2

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    2844:	8a a1       	ldd	r24, Y+34	; 0x22
    2846:	9b a1       	ldd	r25, Y+35	; 0x23
    2848:	ac a1       	ldd	r26, Y+36	; 0x24
    284a:	bd a1       	ldd	r27, Y+37	; 0x25
    284c:	8a 0d       	add	r24, r10
    284e:	9b 1d       	adc	r25, r11
    2850:	ac 1d       	adc	r26, r12
    2852:	bd 1d       	adc	r27, r13
    2854:	8e a3       	std	Y+38, r24	; 0x26
    2856:	9f a3       	std	Y+39, r25	; 0x27
    2858:	a8 a7       	std	Y+40, r26	; 0x28
    285a:	b9 a7       	std	Y+41, r27	; 0x29
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
    285c:	88 85       	ldd	r24, Y+8	; 0x08
    285e:	99 85       	ldd	r25, Y+9	; 0x09
    2860:	34 e0       	ldi	r19, 0x04	; 4
    2862:	96 95       	lsr	r25
    2864:	87 95       	ror	r24
    2866:	3a 95       	dec	r19
    2868:	e1 f7       	brne	.-8      	; 0x2862 <chk_mounted+0x22c>
    286a:	a0 e0       	ldi	r26, 0x00	; 0
    286c:	b0 e0       	ldi	r27, 0x00	; 0
    286e:	2a a1       	ldd	r18, Y+34	; 0x22
    2870:	3b a1       	ldd	r19, Y+35	; 0x23
    2872:	4c a1       	ldd	r20, Y+36	; 0x24
    2874:	5d a1       	ldd	r21, Y+37	; 0x25
    2876:	82 0f       	add	r24, r18
    2878:	93 1f       	adc	r25, r19
    287a:	a4 1f       	adc	r26, r20
    287c:	b5 1f       	adc	r27, r21
    287e:	8a 0d       	add	r24, r10
    2880:	9b 1d       	adc	r25, r11
    2882:	ac 1d       	adc	r26, r12
    2884:	bd 1d       	adc	r27, r13
    2886:	8a a7       	std	Y+42, r24	; 0x2a
    2888:	9b a7       	std	Y+43, r25	; 0x2b
    288a:	ac a7       	std	Y+44, r26	; 0x2c
    288c:	bd a7       	std	Y+45, r27	; 0x2d

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
    288e:	8f ef       	ldi	r24, 0xFF	; 255
    2890:	9f ef       	ldi	r25, 0xFF	; 255
    2892:	af ef       	ldi	r26, 0xFF	; 255
    2894:	bf ef       	ldi	r27, 0xFF	; 255
    2896:	8e 87       	std	Y+14, r24	; 0x0e
    2898:	9f 87       	std	Y+15, r25	; 0x0f
    289a:	a8 8b       	std	Y+16, r26	; 0x10
    289c:	b9 8b       	std	Y+17, r27	; 0x11
	fs->wflag = 0;
    289e:	1c 82       	std	Y+4, r1	; 0x04
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
    28a0:	13 30       	cpi	r17, 0x03	; 3
    28a2:	09 f0       	breq	.+2      	; 0x28a6 <chk_mounted+0x270>
    28a4:	51 c0       	rjmp	.+162    	; 0x2948 <chk_mounted+0x312>
	 	fs->fsi_flag = 0;
    28a6:	1d 82       	std	Y+5, r1	; 0x05
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    28a8:	ce 59       	subi	r28, 0x9E	; 158
    28aa:	df 4f       	sbci	r29, 0xFF	; 255
    28ac:	28 81       	ld	r18, Y
    28ae:	39 81       	ldd	r19, Y+1	; 0x01
    28b0:	c2 56       	subi	r28, 0x62	; 98
    28b2:	d0 40       	sbci	r29, 0x00	; 0
    28b4:	40 e0       	ldi	r20, 0x00	; 0
    28b6:	50 e0       	ldi	r21, 0x00	; 0
    28b8:	26 0d       	add	r18, r6
    28ba:	37 1d       	adc	r19, r7
    28bc:	48 1d       	adc	r20, r8
    28be:	59 1d       	adc	r21, r9
    28c0:	2a 8b       	std	Y+18, r18	; 0x12
    28c2:	3b 8b       	std	Y+19, r19	; 0x13
    28c4:	4c 8b       	std	Y+20, r20	; 0x14
    28c6:	5d 8b       	std	Y+21, r21	; 0x15
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
    28c8:	be 01       	movw	r22, r28
    28ca:	6e 5c       	subi	r22, 0xCE	; 206
    28cc:	7f 4f       	sbci	r23, 0xFF	; 255
    28ce:	89 81       	ldd	r24, Y+1	; 0x01
    28d0:	01 e0       	ldi	r16, 0x01	; 1
    28d2:	0e 94 53 19 	call	0x32a6	; 0x32a6 <disk_read>
    28d6:	89 2b       	or	r24, r25
    28d8:	b9 f5       	brne	.+110    	; 0x2948 <chk_mounted+0x312>
    28da:	c0 5d       	subi	r28, 0xD0	; 208
    28dc:	dd 4f       	sbci	r29, 0xFD	; 253
    28de:	88 81       	ld	r24, Y
    28e0:	99 81       	ldd	r25, Y+1	; 0x01
    28e2:	c0 53       	subi	r28, 0x30	; 48
    28e4:	d2 40       	sbci	r29, 0x02	; 2
    28e6:	85 55       	subi	r24, 0x55	; 85
    28e8:	9a 4a       	sbci	r25, 0xAA	; 170
    28ea:	71 f5       	brne	.+92     	; 0x2948 <chk_mounted+0x312>
    28ec:	8a a9       	ldd	r24, Y+50	; 0x32
    28ee:	9b a9       	ldd	r25, Y+51	; 0x33
    28f0:	ac a9       	ldd	r26, Y+52	; 0x34
    28f2:	bd a9       	ldd	r27, Y+53	; 0x35
    28f4:	82 55       	subi	r24, 0x52	; 82
    28f6:	92 45       	sbci	r25, 0x52	; 82
    28f8:	a1 46       	sbci	r26, 0x61	; 97
    28fa:	b1 44       	sbci	r27, 0x41	; 65
    28fc:	29 f5       	brne	.+74     	; 0x2948 <chk_mounted+0x312>
    28fe:	ca 5e       	subi	r28, 0xEA	; 234
    2900:	dd 4f       	sbci	r29, 0xFD	; 253
    2902:	88 81       	ld	r24, Y
    2904:	99 81       	ldd	r25, Y+1	; 0x01
    2906:	aa 81       	ldd	r26, Y+2	; 0x02
    2908:	bb 81       	ldd	r27, Y+3	; 0x03
    290a:	c6 51       	subi	r28, 0x16	; 22
    290c:	d2 40       	sbci	r29, 0x02	; 2
    290e:	82 57       	subi	r24, 0x72	; 114
    2910:	92 47       	sbci	r25, 0x72	; 114
    2912:	a1 44       	sbci	r26, 0x41	; 65
    2914:	b1 46       	sbci	r27, 0x61	; 97
    2916:	c1 f4       	brne	.+48     	; 0x2948 <chk_mounted+0x312>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    2918:	c2 5e       	subi	r28, 0xE2	; 226
    291a:	dd 4f       	sbci	r29, 0xFD	; 253
    291c:	88 81       	ld	r24, Y
    291e:	99 81       	ldd	r25, Y+1	; 0x01
    2920:	aa 81       	ldd	r26, Y+2	; 0x02
    2922:	bb 81       	ldd	r27, Y+3	; 0x03
    2924:	ce 51       	subi	r28, 0x1E	; 30
    2926:	d2 40       	sbci	r29, 0x02	; 2
    2928:	8a 87       	std	Y+10, r24	; 0x0a
    292a:	9b 87       	std	Y+11, r25	; 0x0b
    292c:	ac 87       	std	Y+12, r26	; 0x0c
    292e:	bd 87       	std	Y+13, r27	; 0x0d
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    2930:	c6 5e       	subi	r28, 0xE6	; 230
    2932:	dd 4f       	sbci	r29, 0xFD	; 253
    2934:	88 81       	ld	r24, Y
    2936:	99 81       	ldd	r25, Y+1	; 0x01
    2938:	aa 81       	ldd	r26, Y+2	; 0x02
    293a:	bb 81       	ldd	r27, Y+3	; 0x03
    293c:	ca 51       	subi	r28, 0x1A	; 26
    293e:	d2 40       	sbci	r29, 0x02	; 2
    2940:	8e 87       	std	Y+14, r24	; 0x0e
    2942:	9f 87       	std	Y+15, r25	; 0x0f
    2944:	a8 8b       	std	Y+16, r26	; 0x10
    2946:	b9 8b       	std	Y+17, r27	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    2948:	18 83       	st	Y, r17
	fs->winsect = 0;		/* Invalidate sector cache */
    294a:	1e a6       	std	Y+46, r1	; 0x2e
    294c:	1f a6       	std	Y+47, r1	; 0x2f
    294e:	18 aa       	std	Y+48, r1	; 0x30
    2950:	19 aa       	std	Y+49, r1	; 0x31
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
    2952:	1e 8a       	std	Y+22, r1	; 0x16
    2954:	1f 8a       	std	Y+23, r1	; 0x17
    2956:	18 8e       	std	Y+24, r1	; 0x18
    2958:	19 8e       	std	Y+25, r1	; 0x19
#endif
	fs->id = ++Fsid;		/* File system mount ID */
    295a:	80 91 24 01 	lds	r24, 0x0124
    295e:	90 91 25 01 	lds	r25, 0x0125
    2962:	01 96       	adiw	r24, 0x01	; 1
    2964:	90 93 25 01 	sts	0x0125, r25
    2968:	80 93 24 01 	sts	0x0124, r24
    296c:	9f 83       	std	Y+7, r25	; 0x07
    296e:	8e 83       	std	Y+6, r24	; 0x06
    2970:	03 c0       	rjmp	.+6      	; 0x2978 <chk_mounted+0x342>

	return FR_OK;
    2972:	2a e0       	ldi	r18, 0x0A	; 10
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	05 c0       	rjmp	.+10     	; 0x2982 <chk_mounted+0x34c>
    2978:	20 e0       	ldi	r18, 0x00	; 0
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	02 c0       	rjmp	.+4      	; 0x2982 <chk_mounted+0x34c>
    297e:	2d e0       	ldi	r18, 0x0D	; 13
    2980:	30 e0       	ldi	r19, 0x00	; 0
}
    2982:	c9 01       	movw	r24, r18
    2984:	cd b7       	in	r28, 0x3d	; 61
    2986:	de b7       	in	r29, 0x3e	; 62
    2988:	ee e0       	ldi	r30, 0x0E	; 14
    298a:	0c 94 96 2d 	jmp	0x5b2c	; 0x5b2c <__epilogue_restores__+0x8>
	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    298e:	c2 5a       	subi	r28, 0xA2	; 162
    2990:	df 4f       	sbci	r29, 0xFF	; 255
    2992:	88 81       	ld	r24, Y
    2994:	99 81       	ldd	r25, Y+1	; 0x01
    2996:	aa 81       	ldd	r26, Y+2	; 0x02
    2998:	bb 81       	ldd	r27, Y+3	; 0x03
    299a:	ce 55       	subi	r28, 0x5E	; 94
    299c:	d0 40       	sbci	r29, 0x00	; 0
    299e:	8e a3       	std	Y+38, r24	; 0x26
    29a0:	9f a3       	std	Y+39, r25	; 0x27
    29a2:	a8 a7       	std	Y+40, r26	; 0x28
    29a4:	b9 a7       	std	Y+41, r27	; 0x29
    29a6:	13 e0       	ldi	r17, 0x03	; 3
    29a8:	59 cf       	rjmp	.-334    	; 0x285c <chk_mounted+0x226>

000029aa <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const XCHAR *path	/* Pointer to the directory path */
)
{
    29aa:	ae e0       	ldi	r26, 0x0E	; 14
    29ac:	b0 e0       	ldi	r27, 0x00	; 0
    29ae:	eb ed       	ldi	r30, 0xDB	; 219
    29b0:	f4 e1       	ldi	r31, 0x14	; 20
    29b2:	0c 94 84 2d 	jmp	0x5b08	; 0x5b08 <__prologue_saves__+0x1c>
    29b6:	8c 01       	movw	r16, r24
    29b8:	7e 87       	std	Y+14, r23	; 0x0e
    29ba:	6d 87       	std	Y+13, r22	; 0x0d
	FRESULT res;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj->fs, 0);
    29bc:	ce 01       	movw	r24, r28
    29be:	0d 96       	adiw	r24, 0x0d	; 13
    29c0:	b8 01       	movw	r22, r16
    29c2:	40 e0       	ldi	r20, 0x00	; 0
    29c4:	0e 94 1b 13 	call	0x2636	; 0x2636 <chk_mounted>
    29c8:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    29ca:	00 97       	sbiw	r24, 0x00	; 0
    29cc:	09 f0       	breq	.+2      	; 0x29d0 <f_opendir+0x26>
    29ce:	42 c0       	rjmp	.+132    	; 0x2a54 <f_opendir+0xaa>
		INITBUF((*dj), sfn, lfn);
    29d0:	ce 01       	movw	r24, r28
    29d2:	01 96       	adiw	r24, 0x01	; 1
    29d4:	d8 01       	movw	r26, r16
    29d6:	55 96       	adiw	r26, 0x15	; 21
    29d8:	9c 93       	st	X, r25
    29da:	8e 93       	st	-X, r24
    29dc:	54 97       	sbiw	r26, 0x14	; 20
		res = follow_path(dj, path);			/* Follow the path to the directory */
    29de:	6d 85       	ldd	r22, Y+13	; 0x0d
    29e0:	7e 85       	ldd	r23, Y+14	; 0x0e
    29e2:	c8 01       	movw	r24, r16
    29e4:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <follow_path>
    29e8:	9c 01       	movw	r18, r24
		if (res == FR_OK) {						/* Follow completed */
    29ea:	00 97       	sbiw	r24, 0x00	; 0
    29ec:	71 f5       	brne	.+92     	; 0x2a4a <f_opendir+0xa0>
			dir = dj->dir;
    29ee:	d8 01       	movw	r26, r16
    29f0:	52 96       	adiw	r26, 0x12	; 18
    29f2:	ed 91       	ld	r30, X+
    29f4:	fc 91       	ld	r31, X
    29f6:	53 97       	sbiw	r26, 0x13	; 19
			if (dir) {							/* It is not the root dir */
    29f8:	30 97       	sbiw	r30, 0x00	; 0
    29fa:	b9 f0       	breq	.+46     	; 0x2a2a <f_opendir+0x80>
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    29fc:	83 85       	ldd	r24, Z+11	; 0x0b
    29fe:	84 ff       	sbrs	r24, 4
    2a00:	27 c0       	rjmp	.+78     	; 0x2a50 <f_opendir+0xa6>
					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    2a02:	84 89       	ldd	r24, Z+20	; 0x14
    2a04:	95 89       	ldd	r25, Z+21	; 0x15
    2a06:	a0 e0       	ldi	r26, 0x00	; 0
    2a08:	b0 e0       	ldi	r27, 0x00	; 0
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	99 27       	eor	r25, r25
    2a0e:	88 27       	eor	r24, r24
    2a10:	22 8d       	ldd	r18, Z+26	; 0x1a
    2a12:	33 8d       	ldd	r19, Z+27	; 0x1b
    2a14:	40 e0       	ldi	r20, 0x00	; 0
    2a16:	50 e0       	ldi	r21, 0x00	; 0
    2a18:	82 2b       	or	r24, r18
    2a1a:	93 2b       	or	r25, r19
    2a1c:	a4 2b       	or	r26, r20
    2a1e:	b5 2b       	or	r27, r21
    2a20:	f8 01       	movw	r30, r16
    2a22:	86 83       	std	Z+6, r24	; 0x06
    2a24:	97 83       	std	Z+7, r25	; 0x07
    2a26:	a0 87       	std	Z+8, r26	; 0x08
    2a28:	b1 87       	std	Z+9, r27	; 0x09
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
    2a2a:	d8 01       	movw	r26, r16
    2a2c:	ed 91       	ld	r30, X+
    2a2e:	fc 91       	ld	r31, X
    2a30:	11 97       	sbiw	r26, 0x01	; 1
    2a32:	86 81       	ldd	r24, Z+6	; 0x06
    2a34:	97 81       	ldd	r25, Z+7	; 0x07
    2a36:	13 96       	adiw	r26, 0x03	; 3
    2a38:	9c 93       	st	X, r25
    2a3a:	8e 93       	st	-X, r24
    2a3c:	12 97       	sbiw	r26, 0x02	; 2
				res = dir_seek(dj, 0);			/* Rewind dir */
    2a3e:	c8 01       	movw	r24, r16
    2a40:	60 e0       	ldi	r22, 0x00	; 0
    2a42:	70 e0       	ldi	r23, 0x00	; 0
    2a44:	0e 94 e7 06 	call	0xdce	; 0xdce <dir_seek>
    2a48:	9c 01       	movw	r18, r24
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    2a4a:	24 30       	cpi	r18, 0x04	; 4
    2a4c:	31 05       	cpc	r19, r1
    2a4e:	11 f4       	brne	.+4      	; 0x2a54 <f_opendir+0xaa>
    2a50:	25 e0       	ldi	r18, 0x05	; 5
    2a52:	30 e0       	ldi	r19, 0x00	; 0
	}

	LEAVE_FF(dj->fs, res);
}
    2a54:	c9 01       	movw	r24, r18
    2a56:	2e 96       	adiw	r28, 0x0e	; 14
    2a58:	e4 e0       	ldi	r30, 0x04	; 4
    2a5a:	0c 94 a0 2d 	jmp	0x5b40	; 0x5b40 <__epilogue_restores__+0x1c>

00002a5e <f_chdir>:


FRESULT f_chdir (
	const XCHAR *path	/* Pointer to the directory path */
)
{
    2a5e:	a4 e2       	ldi	r26, 0x24	; 36
    2a60:	b0 e0       	ldi	r27, 0x00	; 0
    2a62:	e5 e3       	ldi	r30, 0x35	; 53
    2a64:	f5 e1       	ldi	r31, 0x15	; 21
    2a66:	0c 94 84 2d 	jmp	0x5b08	; 0x5b08 <__prologue_saves__+0x1c>
    2a6a:	9c a3       	std	Y+36, r25	; 0x24
    2a6c:	8b a3       	std	Y+35, r24	; 0x23
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj.fs, 0);
    2a6e:	8e 01       	movw	r16, r28
    2a70:	03 5f       	subi	r16, 0xF3	; 243
    2a72:	1f 4f       	sbci	r17, 0xFF	; 255
    2a74:	ce 01       	movw	r24, r28
    2a76:	83 96       	adiw	r24, 0x23	; 35
    2a78:	b8 01       	movw	r22, r16
    2a7a:	40 e0       	ldi	r20, 0x00	; 0
    2a7c:	0e 94 1b 13 	call	0x2636	; 0x2636 <chk_mounted>
    2a80:	bc 01       	movw	r22, r24
	if (res == FR_OK) {
    2a82:	00 97       	sbiw	r24, 0x00	; 0
    2a84:	e9 f5       	brne	.+122    	; 0x2b00 <f_chdir+0xa2>
		INITBUF(dj, sfn, lfn);
    2a86:	ce 01       	movw	r24, r28
    2a88:	01 96       	adiw	r24, 0x01	; 1
    2a8a:	9a a3       	std	Y+34, r25	; 0x22
    2a8c:	89 a3       	std	Y+33, r24	; 0x21
		res = follow_path(&dj, path);		/* Follow the file path */
    2a8e:	6b a1       	ldd	r22, Y+35	; 0x23
    2a90:	7c a1       	ldd	r23, Y+36	; 0x24
    2a92:	c8 01       	movw	r24, r16
    2a94:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <follow_path>
    2a98:	bc 01       	movw	r22, r24
		if (res == FR_OK) {					/* Follow completed */
    2a9a:	00 97       	sbiw	r24, 0x00	; 0
    2a9c:	61 f5       	brne	.+88     	; 0x2af6 <f_chdir+0x98>
			dir = dj.dir;					/* Pointer to the entry */
    2a9e:	2f 8d       	ldd	r18, Y+31	; 0x1f
    2aa0:	38 a1       	ldd	r19, Y+32	; 0x20
			if (!dir) {
    2aa2:	21 15       	cp	r18, r1
    2aa4:	31 05       	cpc	r19, r1
    2aa6:	39 f4       	brne	.+14     	; 0x2ab6 <f_chdir+0x58>
				dj.fs->cdir = 0;			/* No entry (root dir) */
    2aa8:	ed 85       	ldd	r30, Y+13	; 0x0d
    2aaa:	fe 85       	ldd	r31, Y+14	; 0x0e
    2aac:	16 8a       	std	Z+22, r1	; 0x16
    2aae:	17 8a       	std	Z+23, r1	; 0x17
    2ab0:	10 8e       	std	Z+24, r1	; 0x18
    2ab2:	11 8e       	std	Z+25, r1	; 0x19
    2ab4:	25 c0       	rjmp	.+74     	; 0x2b00 <f_chdir+0xa2>
			} else {
				if (dir[DIR_Attr] & AM_DIR)	/* Reached to the dir */
    2ab6:	d9 01       	movw	r26, r18
    2ab8:	1b 96       	adiw	r26, 0x0b	; 11
    2aba:	8c 91       	ld	r24, X
    2abc:	1b 97       	sbiw	r26, 0x0b	; 11
    2abe:	84 ff       	sbrs	r24, 4
    2ac0:	1d c0       	rjmp	.+58     	; 0x2afc <f_chdir+0x9e>
					dj.fs->cdir = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    2ac2:	0d 85       	ldd	r16, Y+13	; 0x0d
    2ac4:	1e 85       	ldd	r17, Y+14	; 0x0e
    2ac6:	54 96       	adiw	r26, 0x14	; 20
    2ac8:	8d 91       	ld	r24, X+
    2aca:	9c 91       	ld	r25, X
    2acc:	55 97       	sbiw	r26, 0x15	; 21
    2ace:	a0 e0       	ldi	r26, 0x00	; 0
    2ad0:	b0 e0       	ldi	r27, 0x00	; 0
    2ad2:	dc 01       	movw	r26, r24
    2ad4:	99 27       	eor	r25, r25
    2ad6:	88 27       	eor	r24, r24
    2ad8:	f9 01       	movw	r30, r18
    2ada:	22 8d       	ldd	r18, Z+26	; 0x1a
    2adc:	33 8d       	ldd	r19, Z+27	; 0x1b
    2ade:	40 e0       	ldi	r20, 0x00	; 0
    2ae0:	50 e0       	ldi	r21, 0x00	; 0
    2ae2:	82 2b       	or	r24, r18
    2ae4:	93 2b       	or	r25, r19
    2ae6:	a4 2b       	or	r26, r20
    2ae8:	b5 2b       	or	r27, r21
    2aea:	f8 01       	movw	r30, r16
    2aec:	86 8b       	std	Z+22, r24	; 0x16
    2aee:	97 8b       	std	Z+23, r25	; 0x17
    2af0:	a0 8f       	std	Z+24, r26	; 0x18
    2af2:	b1 8f       	std	Z+25, r27	; 0x19
    2af4:	05 c0       	rjmp	.+10     	; 0x2b00 <f_chdir+0xa2>
				else
					res = FR_NO_PATH;		/* Could not reach the dir (it is a file) */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    2af6:	84 30       	cpi	r24, 0x04	; 4
    2af8:	91 05       	cpc	r25, r1
    2afa:	11 f4       	brne	.+4      	; 0x2b00 <f_chdir+0xa2>
    2afc:	65 e0       	ldi	r22, 0x05	; 5
    2afe:	70 e0       	ldi	r23, 0x00	; 0
	}

	LEAVE_FF(dj.fs, res);
}
    2b00:	cb 01       	movw	r24, r22
    2b02:	a4 96       	adiw	r28, 0x24	; 36
    2b04:	e4 e0       	ldi	r30, 0x04	; 4
    2b06:	0c 94 a0 2d 	jmp	0x5b40	; 0x5b40 <__epilogue_restores__+0x1c>

00002b0a <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const XCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    2b0a:	ad e2       	ldi	r26, 0x2D	; 45
    2b0c:	b0 e0       	ldi	r27, 0x00	; 0
    2b0e:	eb e8       	ldi	r30, 0x8B	; 139
    2b10:	f5 e1       	ldi	r31, 0x15	; 21
    2b12:	0c 94 76 2d 	jmp	0x5aec	; 0x5aec <__prologue_saves__>
    2b16:	9d a7       	std	Y+45, r25	; 0x2d
    2b18:	8c a7       	std	Y+44, r24	; 0x2c
    2b1a:	7c a3       	std	Y+36, r23	; 0x24
    2b1c:	6b a3       	std	Y+35, r22	; 0x23
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	fp->fs = NULL;		/* Clear file object */
    2b1e:	dc 01       	movw	r26, r24
    2b20:	1d 92       	st	X+, r1
    2b22:	1c 92       	st	X, r1
#if !_FS_READONLY
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
    2b24:	b4 2f       	mov	r27, r20
    2b26:	bf 71       	andi	r27, 0x1F	; 31
    2b28:	bd a3       	std	Y+37, r27	; 0x25
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
    2b2a:	8e 01       	movw	r16, r28
    2b2c:	03 5f       	subi	r16, 0xF3	; 243
    2b2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b30:	4e 71       	andi	r20, 0x1E	; 30
    2b32:	ce 01       	movw	r24, r28
    2b34:	83 96       	adiw	r24, 0x23	; 35
    2b36:	b8 01       	movw	r22, r16
    2b38:	0e 94 1b 13 	call	0x2636	; 0x2636 <chk_mounted>
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2b3c:	00 97       	sbiw	r24, 0x00	; 0
    2b3e:	11 f0       	breq	.+4      	; 0x2b44 <f_open+0x3a>
    2b40:	9c 01       	movw	r18, r24
    2b42:	a8 c1       	rjmp	.+848    	; 0x2e94 <f_open+0x38a>
	INITBUF(dj, sfn, lfn);
    2b44:	ce 01       	movw	r24, r28
    2b46:	01 96       	adiw	r24, 0x01	; 1
    2b48:	9a a3       	std	Y+34, r25	; 0x22
    2b4a:	89 a3       	std	Y+33, r24	; 0x21
	res = follow_path(&dj, path);	/* Follow the file path */
    2b4c:	6b a1       	ldd	r22, Y+35	; 0x23
    2b4e:	7c a1       	ldd	r23, Y+36	; 0x24
    2b50:	c8 01       	movw	r24, r16
    2b52:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <follow_path>
    2b56:	9c 01       	movw	r18, r24

#if !_FS_READONLY
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    2b58:	ed a1       	ldd	r30, Y+37	; 0x25
    2b5a:	4e 2f       	mov	r20, r30
    2b5c:	50 e0       	ldi	r21, 0x00	; 0
    2b5e:	ca 01       	movw	r24, r20
    2b60:	8c 71       	andi	r24, 0x1C	; 28
    2b62:	90 70       	andi	r25, 0x00	; 0
    2b64:	89 2b       	or	r24, r25
    2b66:	09 f4       	brne	.+2      	; 0x2b6a <f_open+0x60>
    2b68:	25 c1       	rjmp	.+586    	; 0x2db4 <f_open+0x2aa>
		DWORD ps, cl;

		if (res != FR_OK) {			/* No file, create new */
    2b6a:	21 15       	cp	r18, r1
    2b6c:	31 05       	cpc	r19, r1
    2b6e:	09 f4       	brne	.+2      	; 0x2b72 <f_open+0x68>
    2b70:	57 c0       	rjmp	.+174    	; 0x2c20 <f_open+0x116>
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
    2b72:	24 30       	cpi	r18, 0x04	; 4
    2b74:	31 05       	cpc	r19, r1
    2b76:	09 f0       	breq	.+2      	; 0x2b7a <f_open+0x70>
    2b78:	8d c1       	rjmp	.+794    	; 0x2e94 <f_open+0x38a>
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_seek(dj, 0);
    2b7a:	c8 01       	movw	r24, r16
    2b7c:	60 e0       	ldi	r22, 0x00	; 0
    2b7e:	70 e0       	ldi	r23, 0x00	; 0
    2b80:	0e 94 e7 06 	call	0xdce	; 0xdce <dir_seek>
    2b84:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    2b86:	00 97       	sbiw	r24, 0x00	; 0
    2b88:	09 f0       	breq	.+2      	; 0x2b8c <f_open+0x82>
    2b8a:	84 c1       	rjmp	.+776    	; 0x2e94 <f_open+0x38a>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    2b8c:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2b8e:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2b90:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2b92:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2b94:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b96:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b98:	0e 94 fd 04 	call	0x9fa	; 0x9fa <move_window>
    2b9c:	9c 01       	movw	r18, r24
			if (res != FR_OK) break;
    2b9e:	00 97       	sbiw	r24, 0x00	; 0
    2ba0:	09 f0       	breq	.+2      	; 0x2ba4 <f_open+0x9a>
    2ba2:	78 c1       	rjmp	.+752    	; 0x2e94 <f_open+0x38a>
			c = *dj->dir;
    2ba4:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2ba6:	f8 a1       	ldd	r31, Y+32	; 0x20
    2ba8:	e0 81       	ld	r30, Z
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
    2baa:	e5 3e       	cpi	r30, 0xE5	; 229
    2bac:	09 f4       	brne	.+2      	; 0x2bb0 <f_open+0xa6>
    2bae:	89 c1       	rjmp	.+786    	; 0x2ec2 <f_open+0x3b8>
    2bb0:	ee 23       	and	r30, r30
    2bb2:	09 f4       	brne	.+2      	; 0x2bb6 <f_open+0xac>
    2bb4:	86 c1       	rjmp	.+780    	; 0x2ec2 <f_open+0x3b8>
			res = dir_next(dj, TRUE);		/* Next entry with table streach */
    2bb6:	c8 01       	movw	r24, r16
    2bb8:	61 e0       	ldi	r22, 0x01	; 1
    2bba:	70 e0       	ldi	r23, 0x00	; 0
    2bbc:	0e 94 8e 0a 	call	0x151c	; 0x151c <dir_next>
    2bc0:	9c 01       	movw	r18, r24
		} while (res == FR_OK);
    2bc2:	00 97       	sbiw	r24, 0x00	; 0
    2bc4:	19 f3       	breq	.-58     	; 0x2b8c <f_open+0x82>
    2bc6:	66 c1       	rjmp	.+716    	; 0x2e94 <f_open+0x38a>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    2bc8:	af 8d       	ldd	r26, Y+31	; 0x1f
    2bca:	b8 a1       	ldd	r27, Y+32	; 0x20
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    2bcc:	ad 01       	movw	r20, r26
    2bce:	fd 01       	movw	r30, r26
	while (cnt--) *d++ = (char)val;
    2bd0:	cd 01       	movw	r24, r26
    2bd2:	80 96       	adiw	r24, 0x20	; 32
    2bd4:	01 c0       	rjmp	.+2      	; 0x2bd8 <f_open+0xce>
    2bd6:	11 92       	st	Z+, r1
    2bd8:	e8 17       	cp	r30, r24
    2bda:	f9 07       	cpc	r31, r25
    2bdc:	e1 f7       	brne	.-8      	; 0x2bd6 <f_open+0xcc>

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    2bde:	69 a1       	ldd	r22, Y+33	; 0x21
    2be0:	7a a1       	ldd	r23, Y+34	; 0x22
	while (cnt--) *d++ = *s++;
    2be2:	9b 01       	movw	r18, r22
    2be4:	25 5f       	subi	r18, 0xF5	; 245
    2be6:	3f 4f       	sbci	r19, 0xFF	; 255
    2be8:	06 c0       	rjmp	.+12     	; 0x2bf6 <f_open+0xec>
    2bea:	fb 01       	movw	r30, r22
    2bec:	81 91       	ld	r24, Z+
    2bee:	bf 01       	movw	r22, r30
    2bf0:	fa 01       	movw	r30, r20
    2bf2:	81 93       	st	Z+, r24
    2bf4:	af 01       	movw	r20, r30
    2bf6:	62 17       	cp	r22, r18
    2bf8:	73 07       	cpc	r23, r19
    2bfa:	b9 f7       	brne	.-18     	; 0x2bea <f_open+0xe0>
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    2bfc:	e9 a1       	ldd	r30, Y+33	; 0x21
    2bfe:	fa a1       	ldd	r31, Y+34	; 0x22
    2c00:	83 85       	ldd	r24, Z+11	; 0x0b
    2c02:	88 71       	andi	r24, 0x18	; 24
    2c04:	1c 96       	adiw	r26, 0x0c	; 12
    2c06:	8c 93       	st	X, r24
			dj->fs->wflag = 1;
    2c08:	ed 85       	ldd	r30, Y+13	; 0x0d
    2c0a:	fe 85       	ldd	r31, Y+14	; 0x0e
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	84 83       	std	Z+4, r24	; 0x04

		if (res != FR_OK) {			/* No file, create new */
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
				res = dir_register(&dj);
			if (res != FR_OK) LEAVE_FF(dj.fs, res);
			mode |= FA_CREATE_ALWAYS;
    2c10:	fd a1       	ldd	r31, Y+37	; 0x25
    2c12:	f8 60       	ori	r31, 0x08	; 8
    2c14:	fd a3       	std	Y+37, r31	; 0x25
			dir = dj.dir;			/* Created entry (SFN entry) */
    2c16:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c18:	98 a1       	ldd	r25, Y+32	; 0x20
    2c1a:	9b a7       	std	Y+43, r25	; 0x2b
    2c1c:	8a a7       	std	Y+42, r24	; 0x2a
    2c1e:	b3 c0       	rjmp	.+358    	; 0x2d86 <f_open+0x27c>
		}
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
    2c20:	e2 ff       	sbrs	r30, 2
    2c22:	03 c0       	rjmp	.+6      	; 0x2c2a <f_open+0x120>
    2c24:	28 e0       	ldi	r18, 0x08	; 8
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	35 c1       	rjmp	.+618    	; 0x2e94 <f_open+0x38a>
				LEAVE_FF(dj.fs, FR_EXIST);
			dir = dj.dir;
    2c2a:	af 8d       	ldd	r26, Y+31	; 0x1f
    2c2c:	b8 a1       	ldd	r27, Y+32	; 0x20
    2c2e:	bb a7       	std	Y+43, r27	; 0x2b
    2c30:	aa a7       	std	Y+42, r26	; 0x2a
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
    2c32:	10 97       	sbiw	r26, 0x00	; 0
    2c34:	09 f4       	brne	.+2      	; 0x2c38 <f_open+0x12e>
    2c36:	29 c1       	rjmp	.+594    	; 0x2e8a <f_open+0x380>
    2c38:	1b 96       	adiw	r26, 0x0b	; 11
    2c3a:	8c 91       	ld	r24, X
    2c3c:	1b 97       	sbiw	r26, 0x0b	; 11
    2c3e:	81 71       	andi	r24, 0x11	; 17
    2c40:	09 f0       	breq	.+2      	; 0x2c44 <f_open+0x13a>
    2c42:	23 c1       	rjmp	.+582    	; 0x2e8a <f_open+0x380>
				LEAVE_FF(dj.fs, FR_DENIED);
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
    2c44:	e3 ff       	sbrs	r30, 3
    2c46:	9f c0       	rjmp	.+318    	; 0x2d86 <f_open+0x27c>
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
    2c48:	54 96       	adiw	r26, 0x14	; 20
    2c4a:	8d 91       	ld	r24, X+
    2c4c:	9c 91       	ld	r25, X
    2c4e:	55 97       	sbiw	r26, 0x15	; 21
    2c50:	a0 e0       	ldi	r26, 0x00	; 0
    2c52:	b0 e0       	ldi	r27, 0x00	; 0
    2c54:	7c 01       	movw	r14, r24
    2c56:	dd 24       	eor	r13, r13
    2c58:	cc 24       	eor	r12, r12
    2c5a:	ea a5       	ldd	r30, Y+42	; 0x2a
    2c5c:	fb a5       	ldd	r31, Y+43	; 0x2b
    2c5e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c60:	93 8d       	ldd	r25, Z+27	; 0x1b
    2c62:	a0 e0       	ldi	r26, 0x00	; 0
    2c64:	b0 e0       	ldi	r27, 0x00	; 0
    2c66:	c8 2a       	or	r12, r24
    2c68:	d9 2a       	or	r13, r25
    2c6a:	ea 2a       	or	r14, r26
    2c6c:	fb 2a       	or	r15, r27
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
    2c6e:	15 8a       	std	Z+21, r1	; 0x15
    2c70:	14 8a       	std	Z+20, r1	; 0x14
				ST_WORD(dir+DIR_FstClusLO, 0);
    2c72:	13 8e       	std	Z+27, r1	; 0x1b
    2c74:	12 8e       	std	Z+26, r1	; 0x1a
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
    2c76:	14 8e       	std	Z+28, r1	; 0x1c
    2c78:	15 8e       	std	Z+29, r1	; 0x1d
    2c7a:	16 8e       	std	Z+30, r1	; 0x1e
    2c7c:	17 8e       	std	Z+31, r1	; 0x1f
				dj.fs->wflag = 1;
    2c7e:	2d 84       	ldd	r2, Y+13	; 0x0d
    2c80:	3e 84       	ldd	r3, Y+14	; 0x0e
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	f1 01       	movw	r30, r2
    2c86:	84 83       	std	Z+4, r24	; 0x04
				ps = dj.fs->winsect;			/* Remove the cluster chain */
    2c88:	d1 01       	movw	r26, r2
    2c8a:	9e 96       	adiw	r26, 0x2e	; 46
    2c8c:	8d 91       	ld	r24, X+
    2c8e:	9d 91       	ld	r25, X+
    2c90:	0d 90       	ld	r0, X+
    2c92:	bc 91       	ld	r27, X
    2c94:	a0 2d       	mov	r26, r0
    2c96:	8e a3       	std	Y+38, r24	; 0x26
    2c98:	9f a3       	std	Y+39, r25	; 0x27
    2c9a:	a8 a7       	std	Y+40, r26	; 0x28
    2c9c:	b9 a7       	std	Y+41, r27	; 0x29
				if (cl) {
    2c9e:	c1 14       	cp	r12, r1
    2ca0:	d1 04       	cpc	r13, r1
    2ca2:	e1 04       	cpc	r14, r1
    2ca4:	f1 04       	cpc	r15, r1
    2ca6:	09 f4       	brne	.+2      	; 0x2caa <f_open+0x1a0>
    2ca8:	62 c0       	rjmp	.+196    	; 0x2d6e <f_open+0x264>
{
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
    2caa:	b1 e0       	ldi	r27, 0x01	; 1
    2cac:	cb 16       	cp	r12, r27
    2cae:	d1 04       	cpc	r13, r1
    2cb0:	e1 04       	cpc	r14, r1
    2cb2:	f1 04       	cpc	r15, r1
    2cb4:	09 f4       	brne	.+2      	; 0x2cb8 <f_open+0x1ae>
    2cb6:	f6 c0       	rjmp	.+492    	; 0x2ea4 <f_open+0x39a>
    2cb8:	86 8d       	ldd	r24, Z+30	; 0x1e
    2cba:	97 8d       	ldd	r25, Z+31	; 0x1f
    2cbc:	a0 a1       	ldd	r26, Z+32	; 0x20
    2cbe:	b1 a1       	ldd	r27, Z+33	; 0x21
    2cc0:	c8 16       	cp	r12, r24
    2cc2:	d9 06       	cpc	r13, r25
    2cc4:	ea 06       	cpc	r14, r26
    2cc6:	fb 06       	cpc	r15, r27
    2cc8:	08 f0       	brcs	.+2      	; 0x2ccc <f_open+0x1c2>
    2cca:	ec c0       	rjmp	.+472    	; 0x2ea4 <f_open+0x39a>
    2ccc:	46 01       	movw	r8, r12
    2cce:	57 01       	movw	r10, r14
    2cd0:	42 c0       	rjmp	.+132    	; 0x2d56 <f_open+0x24c>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    2cd2:	c1 01       	movw	r24, r2
    2cd4:	b5 01       	movw	r22, r10
    2cd6:	a4 01       	movw	r20, r8
    2cd8:	0e 94 31 06 	call	0xc62	; 0xc62 <get_fat>
    2cdc:	2b 01       	movw	r4, r22
    2cde:	3c 01       	movw	r6, r24
			if (nxt == 0) break;				/* Empty cluster? */
    2ce0:	61 15       	cp	r22, r1
    2ce2:	71 05       	cpc	r23, r1
    2ce4:	81 05       	cpc	r24, r1
    2ce6:	91 05       	cpc	r25, r1
    2ce8:	09 f4       	brne	.+2      	; 0x2cec <f_open+0x1e2>
    2cea:	df c0       	rjmp	.+446    	; 0x2eaa <f_open+0x3a0>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    2cec:	61 30       	cpi	r22, 0x01	; 1
    2cee:	71 05       	cpc	r23, r1
    2cf0:	81 05       	cpc	r24, r1
    2cf2:	91 05       	cpc	r25, r1
    2cf4:	09 f4       	brne	.+2      	; 0x2cf8 <f_open+0x1ee>
    2cf6:	d6 c0       	rjmp	.+428    	; 0x2ea4 <f_open+0x39a>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    2cf8:	6f 3f       	cpi	r22, 0xFF	; 255
    2cfa:	2f ef       	ldi	r18, 0xFF	; 255
    2cfc:	72 07       	cpc	r23, r18
    2cfe:	2f ef       	ldi	r18, 0xFF	; 255
    2d00:	82 07       	cpc	r24, r18
    2d02:	2f ef       	ldi	r18, 0xFF	; 255
    2d04:	92 07       	cpc	r25, r18
    2d06:	09 f4       	brne	.+2      	; 0x2d0a <f_open+0x200>
    2d08:	ca c0       	rjmp	.+404    	; 0x2e9e <f_open+0x394>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    2d0a:	c1 01       	movw	r24, r2
    2d0c:	b5 01       	movw	r22, r10
    2d0e:	a4 01       	movw	r20, r8
    2d10:	00 e0       	ldi	r16, 0x00	; 0
    2d12:	10 e0       	ldi	r17, 0x00	; 0
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	0e 94 67 05 	call	0xace	; 0xace <put_fat>
    2d1c:	9c 01       	movw	r18, r24
			if (res != FR_OK) break;
    2d1e:	00 97       	sbiw	r24, 0x00	; 0
    2d20:	09 f0       	breq	.+2      	; 0x2d24 <f_open+0x21a>
    2d22:	b8 c0       	rjmp	.+368    	; 0x2e94 <f_open+0x38a>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    2d24:	f1 01       	movw	r30, r2
    2d26:	86 85       	ldd	r24, Z+14	; 0x0e
    2d28:	97 85       	ldd	r25, Z+15	; 0x0f
    2d2a:	a0 89       	ldd	r26, Z+16	; 0x10
    2d2c:	b1 89       	ldd	r27, Z+17	; 0x11
    2d2e:	8f 3f       	cpi	r24, 0xFF	; 255
    2d30:	ff ef       	ldi	r31, 0xFF	; 255
    2d32:	9f 07       	cpc	r25, r31
    2d34:	ff ef       	ldi	r31, 0xFF	; 255
    2d36:	af 07       	cpc	r26, r31
    2d38:	ff ef       	ldi	r31, 0xFF	; 255
    2d3a:	bf 07       	cpc	r27, r31
    2d3c:	51 f0       	breq	.+20     	; 0x2d52 <f_open+0x248>
				fs->free_clust++;
    2d3e:	01 96       	adiw	r24, 0x01	; 1
    2d40:	a1 1d       	adc	r26, r1
    2d42:	b1 1d       	adc	r27, r1
    2d44:	f1 01       	movw	r30, r2
    2d46:	86 87       	std	Z+14, r24	; 0x0e
    2d48:	97 87       	std	Z+15, r25	; 0x0f
    2d4a:	a0 8b       	std	Z+16, r26	; 0x10
    2d4c:	b1 8b       	std	Z+17, r27	; 0x11
				fs->fsi_flag = 1;
    2d4e:	21 e0       	ldi	r18, 0x01	; 1
    2d50:	25 83       	std	Z+5, r18	; 0x05
    2d52:	53 01       	movw	r10, r6
    2d54:	42 01       	movw	r8, r4
	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
    2d56:	f1 01       	movw	r30, r2
    2d58:	86 8d       	ldd	r24, Z+30	; 0x1e
    2d5a:	97 8d       	ldd	r25, Z+31	; 0x1f
    2d5c:	a0 a1       	ldd	r26, Z+32	; 0x20
    2d5e:	b1 a1       	ldd	r27, Z+33	; 0x21
    2d60:	88 16       	cp	r8, r24
    2d62:	99 06       	cpc	r9, r25
    2d64:	aa 06       	cpc	r10, r26
    2d66:	bb 06       	cpc	r11, r27
    2d68:	08 f4       	brcc	.+2      	; 0x2d6c <f_open+0x262>
    2d6a:	b3 cf       	rjmp	.-154    	; 0x2cd2 <f_open+0x1c8>
    2d6c:	9e c0       	rjmp	.+316    	; 0x2eaa <f_open+0x3a0>
				if (cl) {
					res = remove_chain(dj.fs, cl);
					if (res) LEAVE_FF(dj.fs, res);
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
				}
				res = move_window(dj.fs, ps);
    2d6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d70:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d72:	4e a1       	ldd	r20, Y+38	; 0x26
    2d74:	5f a1       	ldd	r21, Y+39	; 0x27
    2d76:	68 a5       	ldd	r22, Y+40	; 0x28
    2d78:	79 a5       	ldd	r23, Y+41	; 0x29
    2d7a:	0e 94 fd 04 	call	0x9fa	; 0x9fa <move_window>
    2d7e:	9c 01       	movw	r18, r24
				if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2d80:	00 97       	sbiw	r24, 0x00	; 0
    2d82:	09 f0       	breq	.+2      	; 0x2d86 <f_open+0x27c>
    2d84:	87 c0       	rjmp	.+270    	; 0x2e94 <f_open+0x38a>
			}
		}
		if (mode & FA_CREATE_ALWAYS) {
    2d86:	fd a1       	ldd	r31, Y+37	; 0x25
    2d88:	f3 ff       	sbrs	r31, 3
    2d8a:	28 c0       	rjmp	.+80     	; 0x2ddc <f_open+0x2d2>
			dir[DIR_Attr] = 0;					/* Reset attribute */
    2d8c:	aa a5       	ldd	r26, Y+42	; 0x2a
    2d8e:	bb a5       	ldd	r27, Y+43	; 0x2b
    2d90:	1b 96       	adiw	r26, 0x0b	; 11
    2d92:	1c 92       	st	X, r1
			ps = get_fattime();
    2d94:	0e 94 86 01 	call	0x30c	; 0x30c <get_fattime>
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
    2d98:	ea a5       	ldd	r30, Y+42	; 0x2a
    2d9a:	fb a5       	ldd	r31, Y+43	; 0x2b
    2d9c:	66 87       	std	Z+14, r22	; 0x0e
    2d9e:	77 87       	std	Z+15, r23	; 0x0f
    2da0:	80 8b       	std	Z+16, r24	; 0x10
    2da2:	91 8b       	std	Z+17, r25	; 0x11
			dj.fs->wflag = 1;
    2da4:	ed 85       	ldd	r30, Y+13	; 0x0d
    2da6:	fe 85       	ldd	r31, Y+14	; 0x0e
    2da8:	81 e0       	ldi	r24, 0x01	; 1
    2daa:	84 83       	std	Z+4, r24	; 0x04
			mode |= FA__WRITTEN;				/* Set file changed flag */
    2dac:	fd a1       	ldd	r31, Y+37	; 0x25
    2dae:	f0 62       	ori	r31, 0x20	; 32
    2db0:	fd a3       	std	Y+37, r31	; 0x25
    2db2:	14 c0       	rjmp	.+40     	; 0x2ddc <f_open+0x2d2>
		}
	}
	/* Open an existing file */
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
    2db4:	21 15       	cp	r18, r1
    2db6:	31 05       	cpc	r19, r1
    2db8:	09 f0       	breq	.+2      	; 0x2dbc <f_open+0x2b2>
    2dba:	6c c0       	rjmp	.+216    	; 0x2e94 <f_open+0x38a>
		dir = dj.dir;
    2dbc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2dbe:	98 a1       	ldd	r25, Y+32	; 0x20
    2dc0:	9b a7       	std	Y+43, r25	; 0x2b
    2dc2:	8a a7       	std	Y+42, r24	; 0x2a
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    2dc4:	00 97       	sbiw	r24, 0x00	; 0
    2dc6:	09 f4       	brne	.+2      	; 0x2dca <f_open+0x2c0>
    2dc8:	63 c0       	rjmp	.+198    	; 0x2e90 <f_open+0x386>
    2dca:	dc 01       	movw	r26, r24
    2dcc:	1b 96       	adiw	r26, 0x0b	; 11
    2dce:	8c 91       	ld	r24, X
    2dd0:	84 fd       	sbrc	r24, 4
    2dd2:	5e c0       	rjmp	.+188    	; 0x2e90 <f_open+0x386>
			LEAVE_FF(dj.fs, FR_NO_FILE);
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    2dd4:	e1 ff       	sbrs	r30, 1
    2dd6:	02 c0       	rjmp	.+4      	; 0x2ddc <f_open+0x2d2>
    2dd8:	80 fd       	sbrc	r24, 0
    2dda:	57 c0       	rjmp	.+174    	; 0x2e8a <f_open+0x380>
			LEAVE_FF(dj.fs, FR_DENIED);
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    2ddc:	6d 85       	ldd	r22, Y+13	; 0x0d
    2dde:	7e 85       	ldd	r23, Y+14	; 0x0e
    2de0:	fb 01       	movw	r30, r22
    2de2:	26 a5       	ldd	r18, Z+46	; 0x2e
    2de4:	37 a5       	ldd	r19, Z+47	; 0x2f
    2de6:	40 a9       	ldd	r20, Z+48	; 0x30
    2de8:	51 a9       	ldd	r21, Z+49	; 0x31
    2dea:	ac a5       	ldd	r26, Y+44	; 0x2c
    2dec:	bd a5       	ldd	r27, Y+45	; 0x2d
    2dee:	5a 96       	adiw	r26, 0x1a	; 26
    2df0:	2d 93       	st	X+, r18
    2df2:	3d 93       	st	X+, r19
    2df4:	4d 93       	st	X+, r20
    2df6:	5c 93       	st	X, r21
    2df8:	5d 97       	sbiw	r26, 0x1d	; 29
	fp->dir_ptr = dj.dir;
    2dfa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2dfc:	98 a1       	ldd	r25, Y+32	; 0x20
    2dfe:	5f 96       	adiw	r26, 0x1f	; 31
    2e00:	9c 93       	st	X, r25
    2e02:	8e 93       	st	-X, r24
    2e04:	5e 97       	sbiw	r26, 0x1e	; 30
#endif
	fp->flag = mode;					/* File access mode */
    2e06:	ed a1       	ldd	r30, Y+37	; 0x25
    2e08:	14 96       	adiw	r26, 0x04	; 4
    2e0a:	ec 93       	st	X, r30
	fp->org_clust =						/* File start cluster */
    2e0c:	aa a5       	ldd	r26, Y+42	; 0x2a
    2e0e:	bb a5       	ldd	r27, Y+43	; 0x2b
    2e10:	54 96       	adiw	r26, 0x14	; 20
    2e12:	8d 91       	ld	r24, X+
    2e14:	9c 91       	ld	r25, X
    2e16:	55 97       	sbiw	r26, 0x15	; 21
    2e18:	a0 e0       	ldi	r26, 0x00	; 0
    2e1a:	b0 e0       	ldi	r27, 0x00	; 0
    2e1c:	dc 01       	movw	r26, r24
    2e1e:	99 27       	eor	r25, r25
    2e20:	88 27       	eor	r24, r24
    2e22:	ea a5       	ldd	r30, Y+42	; 0x2a
    2e24:	fb a5       	ldd	r31, Y+43	; 0x2b
    2e26:	22 8d       	ldd	r18, Z+26	; 0x1a
    2e28:	33 8d       	ldd	r19, Z+27	; 0x1b
    2e2a:	40 e0       	ldi	r20, 0x00	; 0
    2e2c:	50 e0       	ldi	r21, 0x00	; 0
    2e2e:	82 2b       	or	r24, r18
    2e30:	93 2b       	or	r25, r19
    2e32:	a4 2b       	or	r26, r20
    2e34:	b5 2b       	or	r27, r21
    2e36:	ec a5       	ldd	r30, Y+44	; 0x2c
    2e38:	fd a5       	ldd	r31, Y+45	; 0x2d
    2e3a:	86 87       	std	Z+14, r24	; 0x0e
    2e3c:	97 87       	std	Z+15, r25	; 0x0f
    2e3e:	a0 8b       	std	Z+16, r26	; 0x10
    2e40:	b1 8b       	std	Z+17, r27	; 0x11
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    2e42:	ea a5       	ldd	r30, Y+42	; 0x2a
    2e44:	fb a5       	ldd	r31, Y+43	; 0x2b
    2e46:	84 8d       	ldd	r24, Z+28	; 0x1c
    2e48:	95 8d       	ldd	r25, Z+29	; 0x1d
    2e4a:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2e4c:	b7 8d       	ldd	r27, Z+31	; 0x1f
    2e4e:	ec a5       	ldd	r30, Y+44	; 0x2c
    2e50:	fd a5       	ldd	r31, Y+45	; 0x2d
    2e52:	82 87       	std	Z+10, r24	; 0x0a
    2e54:	93 87       	std	Z+11, r25	; 0x0b
    2e56:	a4 87       	std	Z+12, r26	; 0x0c
    2e58:	b5 87       	std	Z+13, r27	; 0x0d
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
    2e5a:	16 82       	std	Z+6, r1	; 0x06
    2e5c:	17 82       	std	Z+7, r1	; 0x07
    2e5e:	10 86       	std	Z+8, r1	; 0x08
    2e60:	11 86       	std	Z+9, r1	; 0x09
    2e62:	8f ef       	ldi	r24, 0xFF	; 255
    2e64:	85 83       	std	Z+5, r24	; 0x05
	fp->dsect = 0;
    2e66:	ec a5       	ldd	r30, Y+44	; 0x2c
    2e68:	fd a5       	ldd	r31, Y+45	; 0x2d
    2e6a:	16 8a       	std	Z+22, r1	; 0x16
    2e6c:	17 8a       	std	Z+23, r1	; 0x17
    2e6e:	10 8e       	std	Z+24, r1	; 0x18
    2e70:	11 8e       	std	Z+25, r1	; 0x19
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
    2e72:	71 83       	std	Z+1, r23	; 0x01
    2e74:	60 83       	st	Z, r22
    2e76:	db 01       	movw	r26, r22
    2e78:	16 96       	adiw	r26, 0x06	; 6
    2e7a:	8d 91       	ld	r24, X+
    2e7c:	9c 91       	ld	r25, X
    2e7e:	17 97       	sbiw	r26, 0x07	; 7
    2e80:	93 83       	std	Z+3, r25	; 0x03
    2e82:	82 83       	std	Z+2, r24	; 0x02
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	05 c0       	rjmp	.+10     	; 0x2e94 <f_open+0x38a>

	LEAVE_FF(dj.fs, FR_OK);
    2e8a:	27 e0       	ldi	r18, 0x07	; 7
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	02 c0       	rjmp	.+4      	; 0x2e94 <f_open+0x38a>
    2e90:	24 e0       	ldi	r18, 0x04	; 4
    2e92:	30 e0       	ldi	r19, 0x00	; 0
}
    2e94:	c9 01       	movw	r24, r18
    2e96:	ad 96       	adiw	r28, 0x2d	; 45
    2e98:	e2 e1       	ldi	r30, 0x12	; 18
    2e9a:	0c 94 92 2d 	jmp	0x5b24	; 0x5b24 <__epilogue_restores__>
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
	fp->dsect = 0;
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */

	LEAVE_FF(dj.fs, FR_OK);
    2e9e:	21 e0       	ldi	r18, 0x01	; 1
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	f8 cf       	rjmp	.-16     	; 0x2e94 <f_open+0x38a>
    2ea4:	22 e0       	ldi	r18, 0x02	; 2
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	f5 cf       	rjmp	.-22     	; 0x2e94 <f_open+0x38a>
				dj.fs->wflag = 1;
				ps = dj.fs->winsect;			/* Remove the cluster chain */
				if (cl) {
					res = remove_chain(dj.fs, cl);
					if (res) LEAVE_FF(dj.fs, res);
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    2eaa:	ed 85       	ldd	r30, Y+13	; 0x0d
    2eac:	fe 85       	ldd	r31, Y+14	; 0x0e
    2eae:	08 94       	sec
    2eb0:	c1 08       	sbc	r12, r1
    2eb2:	d1 08       	sbc	r13, r1
    2eb4:	e1 08       	sbc	r14, r1
    2eb6:	f1 08       	sbc	r15, r1
    2eb8:	c2 86       	std	Z+10, r12	; 0x0a
    2eba:	d3 86       	std	Z+11, r13	; 0x0b
    2ebc:	e4 86       	std	Z+12, r14	; 0x0c
    2ebe:	f5 86       	std	Z+13, r15	; 0x0d
    2ec0:	56 cf       	rjmp	.-340    	; 0x2d6e <f_open+0x264>
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    2ec2:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2ec4:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2ec6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2ec8:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2eca:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ecc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ece:	0e 94 fd 04 	call	0x9fa	; 0x9fa <move_window>
    2ed2:	9c 01       	movw	r18, r24
		if (res == FR_OK) {
    2ed4:	00 97       	sbiw	r24, 0x00	; 0
    2ed6:	09 f4       	brne	.+2      	; 0x2eda <f_open+0x3d0>
    2ed8:	77 ce       	rjmp	.-786    	; 0x2bc8 <f_open+0xbe>
    2eda:	dc cf       	rjmp	.-72     	; 0x2e94 <f_open+0x38a>

00002edc <wait_ready>:
BYTE wait_ready (void)
{
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
    2edc:	82 e3       	ldi	r24, 0x32	; 50
    2ede:	80 93 28 01 	sts	0x0128, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    2ee2:	8f ef       	ldi	r24, 0xFF	; 255
    2ee4:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2ee6:	0d b4       	in	r0, 0x2d	; 45
    2ee8:	07 fe       	sbrs	r0, 7
    2eea:	fd cf       	rjmp	.-6      	; 0x2ee6 <wait_ready+0xa>
	return SPDR;
    2eec:	8e b5       	in	r24, 0x2e	; 46
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    2eee:	2f ef       	ldi	r18, 0xFF	; 255
    2ef0:	2e bd       	out	0x2e, r18	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2ef2:	0d b4       	in	r0, 0x2d	; 45
    2ef4:	07 fe       	sbrs	r0, 7
    2ef6:	fd cf       	rjmp	.-6      	; 0x2ef2 <wait_ready+0x16>
	return SPDR;
    2ef8:	9e b5       	in	r25, 0x2e	; 46

	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		res = rcvr_spi();
	while ((res != 0xFF) && Timer2);
    2efa:	9f 3f       	cpi	r25, 0xFF	; 255
    2efc:	21 f0       	breq	.+8      	; 0x2f06 <wait_ready+0x2a>
    2efe:	80 91 28 01 	lds	r24, 0x0128
    2f02:	88 23       	and	r24, r24
    2f04:	a9 f7       	brne	.-22     	; 0x2ef0 <wait_ready+0x14>

	return res;
}
    2f06:	89 2f       	mov	r24, r25
    2f08:	08 95       	ret

00002f0a <select>:
/*-----------------------------------------------------------------------*/

static
BOOL select (void)	/* TRUE:Successful, FALSE:Timeout */
{
	CS_LOW();
    2f0a:	28 98       	cbi	0x05, 0	; 5
	if (wait_ready() != 0xFF) {
    2f0c:	0e 94 6e 17 	call	0x2edc	; 0x2edc <wait_ready>
    2f10:	8f 3f       	cpi	r24, 0xFF	; 255
    2f12:	19 f4       	brne	.+6      	; 0x2f1a <select+0x10>
    2f14:	21 e0       	ldi	r18, 0x01	; 1
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	09 c0       	rjmp	.+18     	; 0x2f2c <select+0x22>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    2f1a:	28 9a       	sbi	0x05, 0	; 5
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    2f1c:	8f ef       	ldi	r24, 0xFF	; 255
    2f1e:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2f20:	0d b4       	in	r0, 0x2d	; 45
    2f22:	07 fe       	sbrs	r0, 7
    2f24:	fd cf       	rjmp	.-6      	; 0x2f20 <select+0x16>
	return SPDR;
    2f26:	8e b5       	in	r24, 0x2e	; 46
    2f28:	20 e0       	ldi	r18, 0x00	; 0
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
	if (wait_ready() != 0xFF) {
		deselect();
		return FALSE;
	}
	return TRUE;
}
    2f2c:	c9 01       	movw	r24, r18
    2f2e:	08 95       	ret

00002f30 <rcvr_datablock>:
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    2f30:	fc 01       	movw	r30, r24
	BYTE token;


	Timer1 = 20;
    2f32:	84 e1       	ldi	r24, 0x14	; 20
    2f34:	80 93 27 01 	sts	0x0127, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    2f38:	9f ef       	ldi	r25, 0xFF	; 255
    2f3a:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2f3c:	0d b4       	in	r0, 0x2d	; 45
    2f3e:	07 fe       	sbrs	r0, 7
    2f40:	fd cf       	rjmp	.-6      	; 0x2f3c <rcvr_datablock+0xc>
	return SPDR;
    2f42:	8e b5       	in	r24, 0x2e	; 46


	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
    2f44:	8f 3f       	cpi	r24, 0xFF	; 255
    2f46:	29 f4       	brne	.+10     	; 0x2f52 <rcvr_datablock+0x22>
    2f48:	80 91 27 01 	lds	r24, 0x0127
    2f4c:	88 23       	and	r24, r24
    2f4e:	a9 f7       	brne	.-22     	; 0x2f3a <rcvr_datablock+0xa>
    2f50:	2f c0       	rjmp	.+94     	; 0x2fb0 <rcvr_datablock+0x80>
	if(token != 0xFE) return FALSE;	/* If not valid data token, retutn with error */
    2f52:	8e 3f       	cpi	r24, 0xFE	; 254
    2f54:	69 f5       	brne	.+90     	; 0x2fb0 <rcvr_datablock+0x80>

	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
    2f56:	9f ef       	ldi	r25, 0xFF	; 255
    2f58:	9e bd       	out	0x2e, r25	; 46
    2f5a:	0d b4       	in	r0, 0x2d	; 45
    2f5c:	07 fe       	sbrs	r0, 7
    2f5e:	fd cf       	rjmp	.-6      	; 0x2f5a <rcvr_datablock+0x2a>
    2f60:	8e b5       	in	r24, 0x2e	; 46
    2f62:	80 83       	st	Z, r24
		rcvr_spi_m(buff++);
    2f64:	9e bd       	out	0x2e, r25	; 46
    2f66:	0d b4       	in	r0, 0x2d	; 45
    2f68:	07 fe       	sbrs	r0, 7
    2f6a:	fd cf       	rjmp	.-6      	; 0x2f66 <rcvr_datablock+0x36>
    2f6c:	8e b5       	in	r24, 0x2e	; 46
    2f6e:	81 83       	std	Z+1, r24	; 0x01
		rcvr_spi_m(buff++);
    2f70:	9e bd       	out	0x2e, r25	; 46
    2f72:	0d b4       	in	r0, 0x2d	; 45
    2f74:	07 fe       	sbrs	r0, 7
    2f76:	fd cf       	rjmp	.-6      	; 0x2f72 <rcvr_datablock+0x42>
    2f78:	8e b5       	in	r24, 0x2e	; 46
    2f7a:	82 83       	std	Z+2, r24	; 0x02
		rcvr_spi_m(buff++);
    2f7c:	9e bd       	out	0x2e, r25	; 46
    2f7e:	0d b4       	in	r0, 0x2d	; 45
    2f80:	07 fe       	sbrs	r0, 7
    2f82:	fd cf       	rjmp	.-6      	; 0x2f7e <rcvr_datablock+0x4e>
    2f84:	8e b5       	in	r24, 0x2e	; 46
    2f86:	83 83       	std	Z+3, r24	; 0x03
	} while (btr -= 4);
    2f88:	64 50       	subi	r22, 0x04	; 4
    2f8a:	70 40       	sbci	r23, 0x00	; 0
    2f8c:	11 f0       	breq	.+4      	; 0x2f92 <rcvr_datablock+0x62>
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    2f8e:	34 96       	adiw	r30, 0x04	; 4
    2f90:	e3 cf       	rjmp	.-58     	; 0x2f58 <rcvr_datablock+0x28>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    2f92:	8f ef       	ldi	r24, 0xFF	; 255
    2f94:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2f96:	0d b4       	in	r0, 0x2d	; 45
    2f98:	07 fe       	sbrs	r0, 7
    2f9a:	fd cf       	rjmp	.-6      	; 0x2f96 <rcvr_datablock+0x66>
	return SPDR;
    2f9c:	8e b5       	in	r24, 0x2e	; 46
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    2f9e:	8f ef       	ldi	r24, 0xFF	; 255
    2fa0:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2fa2:	0d b4       	in	r0, 0x2d	; 45
    2fa4:	07 fe       	sbrs	r0, 7
    2fa6:	fd cf       	rjmp	.-6      	; 0x2fa2 <rcvr_datablock+0x72>
	return SPDR;
    2fa8:	8e b5       	in	r24, 0x2e	; 46
    2faa:	21 e0       	ldi	r18, 0x01	; 1
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	02 c0       	rjmp	.+4      	; 0x2fb4 <rcvr_datablock+0x84>
		rcvr_spi_m(buff++);
	} while (btr -= 4);
	rcvr_spi();						/* Discard CRC */
	rcvr_spi();

	return TRUE;					/* Return with success */
    2fb0:	20 e0       	ldi	r18, 0x00	; 0
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
}
    2fb4:	c9 01       	movw	r24, r18
    2fb6:	08 95       	ret

00002fb8 <xmit_datablock>:
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    2fb8:	1f 93       	push	r17
    2fba:	cf 93       	push	r28
    2fbc:	df 93       	push	r29
    2fbe:	ec 01       	movw	r28, r24
    2fc0:	16 2f       	mov	r17, r22
	BYTE resp, wc;


	if (wait_ready() != 0xFF) return FALSE;
    2fc2:	0e 94 6e 17 	call	0x2edc	; 0x2edc <wait_ready>
    2fc6:	8f 3f       	cpi	r24, 0xFF	; 255
    2fc8:	19 f0       	breq	.+6      	; 0x2fd0 <xmit_datablock+0x18>
    2fca:	20 e0       	ldi	r18, 0x00	; 0
    2fcc:	30 e0       	ldi	r19, 0x00	; 0
    2fce:	31 c0       	rjmp	.+98     	; 0x3032 <xmit_datablock+0x7a>

	xmit_spi(token);					/* Xmit data token */
    2fd0:	1e bd       	out	0x2e, r17	; 46
    2fd2:	0d b4       	in	r0, 0x2d	; 45
    2fd4:	07 fe       	sbrs	r0, 7
    2fd6:	fd cf       	rjmp	.-6      	; 0x2fd2 <xmit_datablock+0x1a>
	if (token != 0xFD) {	/* Is data token */
    2fd8:	1d 3f       	cpi	r17, 0xFD	; 253
    2fda:	19 f4       	brne	.+6      	; 0x2fe2 <xmit_datablock+0x2a>
    2fdc:	21 e0       	ldi	r18, 0x01	; 1
    2fde:	30 e0       	ldi	r19, 0x00	; 0
    2fe0:	28 c0       	rjmp	.+80     	; 0x3032 <xmit_datablock+0x7a>
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
    2fe4:	88 81       	ld	r24, Y
    2fe6:	8e bd       	out	0x2e, r24	; 46
    2fe8:	0d b4       	in	r0, 0x2d	; 45
    2fea:	07 fe       	sbrs	r0, 7
    2fec:	fd cf       	rjmp	.-6      	; 0x2fe8 <xmit_datablock+0x30>
			xmit_spi(*buff++);
    2fee:	89 81       	ldd	r24, Y+1	; 0x01
    2ff0:	8e bd       	out	0x2e, r24	; 46
    2ff2:	0d b4       	in	r0, 0x2d	; 45
    2ff4:	07 fe       	sbrs	r0, 7
    2ff6:	fd cf       	rjmp	.-6      	; 0x2ff2 <xmit_datablock+0x3a>
		} while (--wc);
    2ff8:	91 50       	subi	r25, 0x01	; 1
    2ffa:	11 f0       	breq	.+4      	; 0x3000 <xmit_datablock+0x48>
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    2ffc:	22 96       	adiw	r28, 0x02	; 2
    2ffe:	f2 cf       	rjmp	.-28     	; 0x2fe4 <xmit_datablock+0x2c>
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
			xmit_spi(*buff++);
		} while (--wc);
		xmit_spi(0xFF);					/* CRC (Dummy) */
    3000:	8f ef       	ldi	r24, 0xFF	; 255
    3002:	8e bd       	out	0x2e, r24	; 46
    3004:	0d b4       	in	r0, 0x2d	; 45
    3006:	07 fe       	sbrs	r0, 7
    3008:	fd cf       	rjmp	.-6      	; 0x3004 <xmit_datablock+0x4c>
		xmit_spi(0xFF);
    300a:	8f ef       	ldi	r24, 0xFF	; 255
    300c:	8e bd       	out	0x2e, r24	; 46
    300e:	0d b4       	in	r0, 0x2d	; 45
    3010:	07 fe       	sbrs	r0, 7
    3012:	fd cf       	rjmp	.-6      	; 0x300e <xmit_datablock+0x56>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    3014:	8f ef       	ldi	r24, 0xFF	; 255
    3016:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    3018:	0d b4       	in	r0, 0x2d	; 45
    301a:	07 fe       	sbrs	r0, 7
    301c:	fd cf       	rjmp	.-6      	; 0x3018 <xmit_datablock+0x60>
	return SPDR;
    301e:	8e b5       	in	r24, 0x2e	; 46
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	8f 71       	andi	r24, 0x1F	; 31
    3024:	85 30       	cpi	r24, 0x05	; 5
    3026:	09 f0       	breq	.+2      	; 0x302a <xmit_datablock+0x72>
    3028:	91 e0       	ldi	r25, 0x01	; 1
    302a:	81 e0       	ldi	r24, 0x01	; 1
    302c:	98 27       	eor	r25, r24
    302e:	29 2f       	mov	r18, r25
    3030:	30 e0       	ldi	r19, 0x00	; 0
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return FALSE;
	}

	return TRUE;
}
    3032:	c9 01       	movw	r24, r18
    3034:	df 91       	pop	r29
    3036:	cf 91       	pop	r28
    3038:	1f 91       	pop	r17
    303a:	08 95       	ret

0000303c <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    303c:	df 92       	push	r13
    303e:	ef 92       	push	r14
    3040:	ff 92       	push	r15
    3042:	0f 93       	push	r16
    3044:	1f 93       	push	r17
    3046:	d8 2e       	mov	r13, r24
    3048:	7a 01       	movw	r14, r20
    304a:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    304c:	87 ff       	sbrs	r24, 7
    304e:	0c c0       	rjmp	.+24     	; 0x3068 <send_cmd+0x2c>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    3050:	87 e7       	ldi	r24, 0x77	; 119
    3052:	40 e0       	ldi	r20, 0x00	; 0
    3054:	50 e0       	ldi	r21, 0x00	; 0
    3056:	60 e0       	ldi	r22, 0x00	; 0
    3058:	70 e0       	ldi	r23, 0x00	; 0
    305a:	0e 94 1e 18 	call	0x303c	; 0x303c <send_cmd>
		if (res > 1) return res;
    305e:	82 30       	cpi	r24, 0x02	; 2
    3060:	08 f0       	brcs	.+2      	; 0x3064 <send_cmd+0x28>
    3062:	51 c0       	rjmp	.+162    	; 0x3106 <send_cmd+0xca>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    3064:	8f e7       	ldi	r24, 0x7F	; 127
    3066:	d8 22       	and	r13, r24
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    3068:	28 9a       	sbi	0x05, 0	; 5
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    306a:	8f ef       	ldi	r24, 0xFF	; 255
    306c:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    306e:	0d b4       	in	r0, 0x2d	; 45
    3070:	07 fe       	sbrs	r0, 7
    3072:	fd cf       	rjmp	.-6      	; 0x306e <send_cmd+0x32>
	return SPDR;
    3074:	8e b5       	in	r24, 0x2e	; 46
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
	if (!select()) return 0xFF;
    3076:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <select>
    307a:	89 2b       	or	r24, r25
    307c:	11 f4       	brne	.+4      	; 0x3082 <send_cmd+0x46>
    307e:	8f ef       	ldi	r24, 0xFF	; 255
    3080:	42 c0       	rjmp	.+132    	; 0x3106 <send_cmd+0xca>

	/* Send command packet */
	xmit_spi(cmd);						/* Start + Command index */
    3082:	de bc       	out	0x2e, r13	; 46
    3084:	0d b4       	in	r0, 0x2d	; 45
    3086:	07 fe       	sbrs	r0, 7
    3088:	fd cf       	rjmp	.-6      	; 0x3084 <send_cmd+0x48>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    308a:	81 2f       	mov	r24, r17
    308c:	99 27       	eor	r25, r25
    308e:	aa 27       	eor	r26, r26
    3090:	bb 27       	eor	r27, r27
    3092:	8e bd       	out	0x2e, r24	; 46
    3094:	0d b4       	in	r0, 0x2d	; 45
    3096:	07 fe       	sbrs	r0, 7
    3098:	fd cf       	rjmp	.-6      	; 0x3094 <send_cmd+0x58>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    309a:	c8 01       	movw	r24, r16
    309c:	aa 27       	eor	r26, r26
    309e:	bb 27       	eor	r27, r27
    30a0:	8e bd       	out	0x2e, r24	; 46
    30a2:	0d b4       	in	r0, 0x2d	; 45
    30a4:	07 fe       	sbrs	r0, 7
    30a6:	fd cf       	rjmp	.-6      	; 0x30a2 <send_cmd+0x66>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    30a8:	bb 27       	eor	r27, r27
    30aa:	a1 2f       	mov	r26, r17
    30ac:	90 2f       	mov	r25, r16
    30ae:	8f 2d       	mov	r24, r15
    30b0:	8e bd       	out	0x2e, r24	; 46
    30b2:	0d b4       	in	r0, 0x2d	; 45
    30b4:	07 fe       	sbrs	r0, 7
    30b6:	fd cf       	rjmp	.-6      	; 0x30b2 <send_cmd+0x76>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
    30b8:	ee bc       	out	0x2e, r14	; 46
    30ba:	0d b4       	in	r0, 0x2d	; 45
    30bc:	07 fe       	sbrs	r0, 7
    30be:	fd cf       	rjmp	.-6      	; 0x30ba <send_cmd+0x7e>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    30c0:	80 e4       	ldi	r24, 0x40	; 64
    30c2:	d8 16       	cp	r13, r24
    30c4:	11 f4       	brne	.+4      	; 0x30ca <send_cmd+0x8e>
    30c6:	85 e9       	ldi	r24, 0x95	; 149
    30c8:	06 c0       	rjmp	.+12     	; 0x30d6 <send_cmd+0x9a>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    30ca:	88 e4       	ldi	r24, 0x48	; 72
    30cc:	d8 16       	cp	r13, r24
    30ce:	11 f4       	brne	.+4      	; 0x30d4 <send_cmd+0x98>
    30d0:	87 e8       	ldi	r24, 0x87	; 135
    30d2:	01 c0       	rjmp	.+2      	; 0x30d6 <send_cmd+0x9a>
    30d4:	81 e0       	ldi	r24, 0x01	; 1
	xmit_spi(n);
    30d6:	8e bd       	out	0x2e, r24	; 46
    30d8:	0d b4       	in	r0, 0x2d	; 45
    30da:	07 fe       	sbrs	r0, 7
    30dc:	fd cf       	rjmp	.-6      	; 0x30d8 <send_cmd+0x9c>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
    30de:	8c e4       	ldi	r24, 0x4C	; 76
    30e0:	d8 16       	cp	r13, r24
    30e2:	31 f4       	brne	.+12     	; 0x30f0 <send_cmd+0xb4>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    30e4:	8f ef       	ldi	r24, 0xFF	; 255
    30e6:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    30e8:	0d b4       	in	r0, 0x2d	; 45
    30ea:	07 fe       	sbrs	r0, 7
    30ec:	fd cf       	rjmp	.-6      	; 0x30e8 <send_cmd+0xac>
	return SPDR;
    30ee:	8e b5       	in	r24, 0x2e	; 46
    30f0:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    30f2:	2f ef       	ldi	r18, 0xFF	; 255
    30f4:	2e bd       	out	0x2e, r18	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    30f6:	0d b4       	in	r0, 0x2d	; 45
    30f8:	07 fe       	sbrs	r0, 7
    30fa:	fd cf       	rjmp	.-6      	; 0x30f6 <send_cmd+0xba>
	return SPDR;
    30fc:	8e b5       	in	r24, 0x2e	; 46
	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = rcvr_spi();
	while ((res & 0x80) && --n);
    30fe:	87 ff       	sbrs	r24, 7
    3100:	02 c0       	rjmp	.+4      	; 0x3106 <send_cmd+0xca>
    3102:	91 50       	subi	r25, 0x01	; 1
    3104:	b9 f7       	brne	.-18     	; 0x30f4 <send_cmd+0xb8>

	return res;			/* Return with the response value */
}
    3106:	1f 91       	pop	r17
    3108:	0f 91       	pop	r16
    310a:	ff 90       	pop	r15
    310c:	ef 90       	pop	r14
    310e:	df 90       	pop	r13
    3110:	08 95       	ret

00003112 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
    3112:	a4 e0       	ldi	r26, 0x04	; 4
    3114:	b0 e0       	ldi	r27, 0x00	; 0
    3116:	ef e8       	ldi	r30, 0x8F	; 143
    3118:	f8 e1       	ldi	r31, 0x18	; 24
    311a:	0c 94 82 2d 	jmp	0x5b04	; 0x5b04 <__prologue_saves__+0x18>
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
    311e:	88 23       	and	r24, r24
    3120:	11 f0       	breq	.+4      	; 0x3126 <disk_initialize+0x14>
    3122:	81 e0       	ldi	r24, 0x01	; 1
    3124:	b5 c0       	rjmp	.+362    	; 0x3290 <disk_initialize+0x17e>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    3126:	80 91 0e 01 	lds	r24, 0x010E
    312a:	81 fd       	sbrc	r24, 1
    312c:	af c0       	rjmp	.+350    	; 0x328c <disk_initialize+0x17a>
#if (defined SD_PWR_PIN | defined SD_PWR_PORT)
   DDRC|=(1<<SD_PWR_PIN);          // Turns on PWR pin as output
   SD_PWR_PORT|=(1<<SD_PWR_PIN);   // Drives PWR pin high
#endif

   DDRC|=(1<<SD_CS_PIN);          // Turns on CS pin as output
    312e:	38 9a       	sbi	0x07, 0	; 7
   DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)| (1<<DD_SS);
    3130:	87 e0       	ldi	r24, 0x07	; 7
    3132:	84 b9       	out	0x04, r24	; 4
   SPCR = (1<<SPE)|(1<<MSTR); /* Initialize SPI port (Mode 0) */ 
    3134:	80 e5       	ldi	r24, 0x50	; 80
    3136:	8c bd       	out	0x2c, r24	; 44
    3138:	8a e0       	ldi	r24, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    313a:	9f ef       	ldi	r25, 0xFF	; 255
    313c:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    313e:	0d b4       	in	r0, 0x2d	; 45
    3140:	07 fe       	sbrs	r0, 7
    3142:	fd cf       	rjmp	.-6      	; 0x313e <disk_initialize+0x2c>
	return SPDR;
    3144:	2e b5       	in	r18, 0x2e	; 46
	if (drv) return STA_NOINIT;			/* Supports only single drive */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */

	power_on();							/* Force socket power on */
	FCLK_SLOW();
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
    3146:	81 50       	subi	r24, 0x01	; 1
    3148:	c9 f7       	brne	.-14     	; 0x313c <disk_initialize+0x2a>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    314a:	80 e4       	ldi	r24, 0x40	; 64
    314c:	40 e0       	ldi	r20, 0x00	; 0
    314e:	50 e0       	ldi	r21, 0x00	; 0
    3150:	60 e0       	ldi	r22, 0x00	; 0
    3152:	70 e0       	ldi	r23, 0x00	; 0
    3154:	0e 94 1e 18 	call	0x303c	; 0x303c <send_cmd>
    3158:	81 30       	cpi	r24, 0x01	; 1
    315a:	09 f0       	breq	.+2      	; 0x315e <disk_initialize+0x4c>
    315c:	7e c0       	rjmp	.+252    	; 0x325a <disk_initialize+0x148>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    315e:	84 e6       	ldi	r24, 0x64	; 100
    3160:	80 93 27 01 	sts	0x0127, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
    3164:	88 e4       	ldi	r24, 0x48	; 72
    3166:	4a ea       	ldi	r20, 0xAA	; 170
    3168:	51 e0       	ldi	r21, 0x01	; 1
    316a:	60 e0       	ldi	r22, 0x00	; 0
    316c:	70 e0       	ldi	r23, 0x00	; 0
    316e:	0e 94 1e 18 	call	0x303c	; 0x303c <send_cmd>
    3172:	81 30       	cpi	r24, 0x01	; 1
    3174:	09 f0       	breq	.+2      	; 0x3178 <disk_initialize+0x66>
    3176:	4a c0       	rjmp	.+148    	; 0x320c <disk_initialize+0xfa>
    3178:	7e 01       	movw	r14, r28
    317a:	08 94       	sec
    317c:	e1 1c       	adc	r14, r1
    317e:	f1 1c       	adc	r15, r1
    3180:	87 01       	movw	r16, r14
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    3182:	9f ef       	ldi	r25, 0xFF	; 255

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
    3184:	9e 01       	movw	r18, r28
    3186:	2b 5f       	subi	r18, 0xFB	; 251
    3188:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    318a:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    318c:	0d b4       	in	r0, 0x2d	; 45
    318e:	07 fe       	sbrs	r0, 7
    3190:	fd cf       	rjmp	.-6      	; 0x318c <disk_initialize+0x7a>
	return SPDR;
    3192:	8e b5       	in	r24, 0x2e	; 46

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
    3194:	f8 01       	movw	r30, r16
    3196:	81 93       	st	Z+, r24
    3198:	8f 01       	movw	r16, r30
    319a:	e2 17       	cp	r30, r18
    319c:	f3 07       	cpc	r31, r19
    319e:	a9 f7       	brne	.-22     	; 0x318a <disk_initialize+0x78>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    31a0:	8b 81       	ldd	r24, Y+3	; 0x03
    31a2:	81 30       	cpi	r24, 0x01	; 1
    31a4:	09 f0       	breq	.+2      	; 0x31a8 <disk_initialize+0x96>
    31a6:	59 c0       	rjmp	.+178    	; 0x325a <disk_initialize+0x148>
    31a8:	8c 81       	ldd	r24, Y+4	; 0x04
    31aa:	8a 3a       	cpi	r24, 0xAA	; 170
    31ac:	09 f0       	breq	.+2      	; 0x31b0 <disk_initialize+0x9e>
    31ae:	55 c0       	rjmp	.+170    	; 0x325a <disk_initialize+0x148>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    31b0:	80 91 27 01 	lds	r24, 0x0127
    31b4:	88 23       	and	r24, r24
    31b6:	49 f0       	breq	.+18     	; 0x31ca <disk_initialize+0xb8>
    31b8:	89 ee       	ldi	r24, 0xE9	; 233
    31ba:	40 e0       	ldi	r20, 0x00	; 0
    31bc:	50 e0       	ldi	r21, 0x00	; 0
    31be:	60 e0       	ldi	r22, 0x00	; 0
    31c0:	70 e4       	ldi	r23, 0x40	; 64
    31c2:	0e 94 1e 18 	call	0x303c	; 0x303c <send_cmd>
    31c6:	88 23       	and	r24, r24
    31c8:	99 f7       	brne	.-26     	; 0x31b0 <disk_initialize+0x9e>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    31ca:	80 91 27 01 	lds	r24, 0x0127
    31ce:	88 23       	and	r24, r24
    31d0:	09 f4       	brne	.+2      	; 0x31d4 <disk_initialize+0xc2>
    31d2:	43 c0       	rjmp	.+134    	; 0x325a <disk_initialize+0x148>
    31d4:	8a e7       	ldi	r24, 0x7A	; 122
    31d6:	40 e0       	ldi	r20, 0x00	; 0
    31d8:	50 e0       	ldi	r21, 0x00	; 0
    31da:	60 e0       	ldi	r22, 0x00	; 0
    31dc:	70 e0       	ldi	r23, 0x00	; 0
    31de:	0e 94 1e 18 	call	0x303c	; 0x303c <send_cmd>
    31e2:	88 23       	and	r24, r24
    31e4:	d1 f5       	brne	.+116    	; 0x325a <disk_initialize+0x148>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    31e6:	9f ef       	ldi	r25, 0xFF	; 255
    31e8:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    31ea:	0d b4       	in	r0, 0x2d	; 45
    31ec:	07 fe       	sbrs	r0, 7
    31ee:	fd cf       	rjmp	.-6      	; 0x31ea <disk_initialize+0xd8>
	return SPDR;
    31f0:	8e b5       	in	r24, 0x2e	; 46
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
    31f2:	f7 01       	movw	r30, r14
    31f4:	81 93       	st	Z+, r24
    31f6:	7f 01       	movw	r14, r30
    31f8:	e0 17       	cp	r30, r16
    31fa:	f1 07       	cpc	r31, r17
    31fc:	a9 f7       	brne	.-22     	; 0x31e8 <disk_initialize+0xd6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    31fe:	89 81       	ldd	r24, Y+1	; 0x01
    3200:	86 fd       	sbrc	r24, 6
    3202:	02 c0       	rjmp	.+4      	; 0x3208 <disk_initialize+0xf6>
    3204:	14 e0       	ldi	r17, 0x04	; 4
    3206:	2a c0       	rjmp	.+84     	; 0x325c <disk_initialize+0x14a>
    3208:	1c e0       	ldi	r17, 0x0C	; 12
    320a:	28 c0       	rjmp	.+80     	; 0x325c <disk_initialize+0x14a>
				}
			}
		} else {							/* SDSC or MMC */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    320c:	89 ee       	ldi	r24, 0xE9	; 233
    320e:	40 e0       	ldi	r20, 0x00	; 0
    3210:	50 e0       	ldi	r21, 0x00	; 0
    3212:	60 e0       	ldi	r22, 0x00	; 0
    3214:	70 e0       	ldi	r23, 0x00	; 0
    3216:	0e 94 1e 18 	call	0x303c	; 0x303c <send_cmd>
    321a:	82 30       	cpi	r24, 0x02	; 2
    321c:	18 f0       	brcs	.+6      	; 0x3224 <disk_initialize+0x112>
    321e:	01 e4       	ldi	r16, 0x41	; 65
    3220:	11 e0       	ldi	r17, 0x01	; 1
    3222:	02 c0       	rjmp	.+4      	; 0x3228 <disk_initialize+0x116>
    3224:	09 ee       	ldi	r16, 0xE9	; 233
    3226:	12 e0       	ldi	r17, 0x02	; 2
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    3228:	80 91 27 01 	lds	r24, 0x0127
    322c:	88 23       	and	r24, r24
    322e:	49 f0       	breq	.+18     	; 0x3242 <disk_initialize+0x130>
    3230:	80 2f       	mov	r24, r16
    3232:	40 e0       	ldi	r20, 0x00	; 0
    3234:	50 e0       	ldi	r21, 0x00	; 0
    3236:	60 e0       	ldi	r22, 0x00	; 0
    3238:	70 e0       	ldi	r23, 0x00	; 0
    323a:	0e 94 1e 18 	call	0x303c	; 0x303c <send_cmd>
    323e:	88 23       	and	r24, r24
    3240:	99 f7       	brne	.-26     	; 0x3228 <disk_initialize+0x116>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    3242:	80 91 27 01 	lds	r24, 0x0127
    3246:	88 23       	and	r24, r24
    3248:	41 f0       	breq	.+16     	; 0x325a <disk_initialize+0x148>
    324a:	80 e5       	ldi	r24, 0x50	; 80
    324c:	40 e0       	ldi	r20, 0x00	; 0
    324e:	52 e0       	ldi	r21, 0x02	; 2
    3250:	60 e0       	ldi	r22, 0x00	; 0
    3252:	70 e0       	ldi	r23, 0x00	; 0
    3254:	0e 94 1e 18 	call	0x303c	; 0x303c <send_cmd>
    3258:	81 11       	cpse	r24, r1
    325a:	10 e0       	ldi	r17, 0x00	; 0
				ty = 0;
		}
	}
	CardType = ty;
    325c:	10 93 29 01 	sts	0x0129, r17
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    3260:	28 9a       	sbi	0x05, 0	; 5
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    3262:	8f ef       	ldi	r24, 0xFF	; 255
    3264:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    3266:	0d b4       	in	r0, 0x2d	; 45
    3268:	07 fe       	sbrs	r0, 7
    326a:	fd cf       	rjmp	.-6      	; 0x3266 <disk_initialize+0x154>
	return SPDR;
    326c:	8e b5       	in	r24, 0x2e	; 46
		}
	}
	CardType = ty;
	deselect();

	if (ty) {			/* Initialization succeded */
    326e:	11 23       	and	r17, r17
    3270:	21 f0       	breq	.+8      	; 0x327a <disk_initialize+0x168>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    3272:	80 91 0e 01 	lds	r24, 0x010E
    3276:	8e 7f       	andi	r24, 0xFE	; 254
    3278:	07 c0       	rjmp	.+14     	; 0x3288 <disk_initialize+0x176>
}

static
void power_off (void)
{
   CS_LOW();            /* Wait for card ready */
    327a:	28 98       	cbi	0x05, 0	; 5
   wait_ready();
    327c:	0e 94 6e 17 	call	0x2edc	; 0x2edc <wait_ready>
   SPCR = 0;
    3280:	1c bc       	out	0x2c, r1	; 44
   Stat |= STA_NOINIT;      /* Set STA_NOINIT */
    3282:	80 91 0e 01 	lds	r24, 0x010E
    3286:	81 60       	ori	r24, 0x01	; 1
    3288:	80 93 0e 01 	sts	0x010E, r24
		FCLK_FAST();
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
    328c:	80 91 0e 01 	lds	r24, 0x010E
}
    3290:	24 96       	adiw	r28, 0x04	; 4
    3292:	e6 e0       	ldi	r30, 0x06	; 6
    3294:	0c 94 9e 2d 	jmp	0x5b3c	; 0x5b3c <__epilogue_restores__+0x18>

00003298 <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    3298:	88 23       	and	r24, r24
    329a:	11 f0       	breq	.+4      	; 0x32a0 <disk_status+0x8>
    329c:	81 e0       	ldi	r24, 0x01	; 1
    329e:	08 95       	ret
	return Stat;
    32a0:	80 91 0e 01 	lds	r24, 0x010E
}
    32a4:	08 95       	ret

000032a6 <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
    32a6:	0f 93       	push	r16
    32a8:	cf 93       	push	r28
    32aa:	df 93       	push	r29
    32ac:	eb 01       	movw	r28, r22
	if (drv || !count) return RES_PARERR;
    32ae:	88 23       	and	r24, r24
    32b0:	09 f0       	breq	.+2      	; 0x32b4 <disk_read+0xe>
    32b2:	50 c0       	rjmp	.+160    	; 0x3354 <disk_read+0xae>
    32b4:	00 23       	and	r16, r16
    32b6:	09 f4       	brne	.+2      	; 0x32ba <disk_read+0x14>
    32b8:	4d c0       	rjmp	.+154    	; 0x3354 <disk_read+0xae>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    32ba:	80 91 0e 01 	lds	r24, 0x010E
    32be:	80 ff       	sbrs	r24, 0
    32c0:	03 c0       	rjmp	.+6      	; 0x32c8 <disk_read+0x22>
    32c2:	23 e0       	ldi	r18, 0x03	; 3
    32c4:	30 e0       	ldi	r19, 0x00	; 0
    32c6:	48 c0       	rjmp	.+144    	; 0x3358 <disk_read+0xb2>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    32c8:	80 91 29 01 	lds	r24, 0x0129
    32cc:	83 fd       	sbrc	r24, 3
    32ce:	07 c0       	rjmp	.+14     	; 0x32de <disk_read+0x38>
    32d0:	69 e0       	ldi	r22, 0x09	; 9
    32d2:	22 0f       	add	r18, r18
    32d4:	33 1f       	adc	r19, r19
    32d6:	44 1f       	adc	r20, r20
    32d8:	55 1f       	adc	r21, r21
    32da:	6a 95       	dec	r22
    32dc:	d1 f7       	brne	.-12     	; 0x32d2 <disk_read+0x2c>

	if (count == 1) {	/* Single block read */
    32de:	01 30       	cpi	r16, 0x01	; 1
    32e0:	89 f4       	brne	.+34     	; 0x3304 <disk_read+0x5e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
    32e2:	81 e5       	ldi	r24, 0x51	; 81
    32e4:	ba 01       	movw	r22, r20
    32e6:	a9 01       	movw	r20, r18
    32e8:	0e 94 1e 18 	call	0x303c	; 0x303c <send_cmd>
    32ec:	88 23       	and	r24, r24
    32ee:	21 f5       	brne	.+72     	; 0x3338 <disk_read+0x92>
    32f0:	ce 01       	movw	r24, r28
    32f2:	60 e0       	ldi	r22, 0x00	; 0
    32f4:	72 e0       	ldi	r23, 0x02	; 2
    32f6:	0e 94 98 17 	call	0x2f30	; 0x2f30 <rcvr_datablock>
    32fa:	00 e0       	ldi	r16, 0x00	; 0
    32fc:	89 2b       	or	r24, r25
    32fe:	e1 f4       	brne	.+56     	; 0x3338 <disk_read+0x92>
    3300:	01 e0       	ldi	r16, 0x01	; 1
    3302:	1a c0       	rjmp	.+52     	; 0x3338 <disk_read+0x92>
			&& rcvr_datablock(buff, 512))
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
    3304:	82 e5       	ldi	r24, 0x52	; 82
    3306:	ba 01       	movw	r22, r20
    3308:	a9 01       	movw	r20, r18
    330a:	0e 94 1e 18 	call	0x303c	; 0x303c <send_cmd>
    330e:	88 23       	and	r24, r24
    3310:	99 f4       	brne	.+38     	; 0x3338 <disk_read+0x92>
			do {
				if (!rcvr_datablock(buff, 512)) break;
    3312:	ce 01       	movw	r24, r28
    3314:	60 e0       	ldi	r22, 0x00	; 0
    3316:	72 e0       	ldi	r23, 0x02	; 2
    3318:	0e 94 98 17 	call	0x2f30	; 0x2f30 <rcvr_datablock>
    331c:	89 2b       	or	r24, r25
    331e:	29 f0       	breq	.+10     	; 0x332a <disk_read+0x84>
				buff += 512;
			} while (--count);
    3320:	01 50       	subi	r16, 0x01	; 1
    3322:	19 f0       	breq	.+6      	; 0x332a <disk_read+0x84>
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
			do {
				if (!rcvr_datablock(buff, 512)) break;
				buff += 512;
    3324:	c0 50       	subi	r28, 0x00	; 0
    3326:	de 4f       	sbci	r29, 0xFE	; 254
    3328:	f4 cf       	rjmp	.-24     	; 0x3312 <disk_read+0x6c>
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
    332a:	8c e4       	ldi	r24, 0x4C	; 76
    332c:	40 e0       	ldi	r20, 0x00	; 0
    332e:	50 e0       	ldi	r21, 0x00	; 0
    3330:	60 e0       	ldi	r22, 0x00	; 0
    3332:	70 e0       	ldi	r23, 0x00	; 0
    3334:	0e 94 1e 18 	call	0x303c	; 0x303c <send_cmd>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    3338:	28 9a       	sbi	0x05, 0	; 5
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    333a:	8f ef       	ldi	r24, 0xFF	; 255
    333c:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    333e:	0d b4       	in	r0, 0x2d	; 45
    3340:	07 fe       	sbrs	r0, 7
    3342:	fd cf       	rjmp	.-6      	; 0x333e <disk_read+0x98>
	return SPDR;
    3344:	8e b5       	in	r24, 0x2e	; 46
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
    3346:	20 e0       	ldi	r18, 0x00	; 0
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	00 23       	and	r16, r16
    334c:	29 f0       	breq	.+10     	; 0x3358 <disk_read+0xb2>
    334e:	21 e0       	ldi	r18, 0x01	; 1
    3350:	30 e0       	ldi	r19, 0x00	; 0
    3352:	02 c0       	rjmp	.+4      	; 0x3358 <disk_read+0xb2>
    3354:	24 e0       	ldi	r18, 0x04	; 4
    3356:	30 e0       	ldi	r19, 0x00	; 0
}
    3358:	c9 01       	movw	r24, r18
    335a:	df 91       	pop	r29
    335c:	cf 91       	pop	r28
    335e:	0f 91       	pop	r16
    3360:	08 95       	ret

00003362 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
    3362:	cf 92       	push	r12
    3364:	df 92       	push	r13
    3366:	ef 92       	push	r14
    3368:	ff 92       	push	r15
    336a:	0f 93       	push	r16
    336c:	cf 93       	push	r28
    336e:	df 93       	push	r29
    3370:	eb 01       	movw	r28, r22
    3372:	69 01       	movw	r12, r18
    3374:	7a 01       	movw	r14, r20
	if (drv || !count) return RES_PARERR;
    3376:	88 23       	and	r24, r24
    3378:	09 f0       	breq	.+2      	; 0x337c <disk_write+0x1a>
    337a:	5f c0       	rjmp	.+190    	; 0x343a <disk_write+0xd8>
    337c:	00 23       	and	r16, r16
    337e:	09 f4       	brne	.+2      	; 0x3382 <disk_write+0x20>
    3380:	5c c0       	rjmp	.+184    	; 0x343a <disk_write+0xd8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    3382:	80 91 0e 01 	lds	r24, 0x010E
    3386:	80 ff       	sbrs	r24, 0
    3388:	03 c0       	rjmp	.+6      	; 0x3390 <disk_write+0x2e>
    338a:	23 e0       	ldi	r18, 0x03	; 3
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	57 c0       	rjmp	.+174    	; 0x343e <disk_write+0xdc>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    3390:	80 91 0e 01 	lds	r24, 0x010E
    3394:	82 ff       	sbrs	r24, 2
    3396:	03 c0       	rjmp	.+6      	; 0x339e <disk_write+0x3c>
    3398:	22 e0       	ldi	r18, 0x02	; 2
    339a:	30 e0       	ldi	r19, 0x00	; 0
    339c:	50 c0       	rjmp	.+160    	; 0x343e <disk_write+0xdc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    339e:	80 91 29 01 	lds	r24, 0x0129
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	83 fd       	sbrc	r24, 3
    33a6:	07 c0       	rjmp	.+14     	; 0x33b6 <disk_write+0x54>
    33a8:	79 e0       	ldi	r23, 0x09	; 9
    33aa:	cc 0c       	add	r12, r12
    33ac:	dd 1c       	adc	r13, r13
    33ae:	ee 1c       	adc	r14, r14
    33b0:	ff 1c       	adc	r15, r15
    33b2:	7a 95       	dec	r23
    33b4:	d1 f7       	brne	.-12     	; 0x33aa <disk_write+0x48>

	if (count == 1) {	/* Single block write */
    33b6:	01 30       	cpi	r16, 0x01	; 1
    33b8:	69 f4       	brne	.+26     	; 0x33d4 <disk_write+0x72>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    33ba:	88 e5       	ldi	r24, 0x58	; 88
    33bc:	b7 01       	movw	r22, r14
    33be:	a6 01       	movw	r20, r12
    33c0:	0e 94 1e 18 	call	0x303c	; 0x303c <send_cmd>
    33c4:	88 23       	and	r24, r24
    33c6:	59 f5       	brne	.+86     	; 0x341e <disk_write+0xbc>
    33c8:	ce 01       	movw	r24, r28
    33ca:	6e ef       	ldi	r22, 0xFE	; 254
    33cc:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <xmit_datablock>
    33d0:	00 e0       	ldi	r16, 0x00	; 0
    33d2:	22 c0       	rjmp	.+68     	; 0x3418 <disk_write+0xb6>
			&& xmit_datablock(buff, 0xFE))
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    33d4:	86 70       	andi	r24, 0x06	; 6
    33d6:	90 70       	andi	r25, 0x00	; 0
    33d8:	89 2b       	or	r24, r25
    33da:	39 f0       	breq	.+14     	; 0x33ea <disk_write+0x88>
    33dc:	40 2f       	mov	r20, r16
    33de:	50 e0       	ldi	r21, 0x00	; 0
    33e0:	60 e0       	ldi	r22, 0x00	; 0
    33e2:	70 e0       	ldi	r23, 0x00	; 0
    33e4:	87 ed       	ldi	r24, 0xD7	; 215
    33e6:	0e 94 1e 18 	call	0x303c	; 0x303c <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    33ea:	89 e5       	ldi	r24, 0x59	; 89
    33ec:	b7 01       	movw	r22, r14
    33ee:	a6 01       	movw	r20, r12
    33f0:	0e 94 1e 18 	call	0x303c	; 0x303c <send_cmd>
    33f4:	88 23       	and	r24, r24
    33f6:	99 f4       	brne	.+38     	; 0x341e <disk_write+0xbc>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    33f8:	ce 01       	movw	r24, r28
    33fa:	6c ef       	ldi	r22, 0xFC	; 252
    33fc:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <xmit_datablock>
    3400:	89 2b       	or	r24, r25
    3402:	29 f0       	breq	.+10     	; 0x340e <disk_write+0xac>
				buff += 512;
			} while (--count);
    3404:	01 50       	subi	r16, 0x01	; 1
    3406:	19 f0       	breq	.+6      	; 0x340e <disk_write+0xac>
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
    3408:	c0 50       	subi	r28, 0x00	; 0
    340a:	de 4f       	sbci	r29, 0xFE	; 254
    340c:	f5 cf       	rjmp	.-22     	; 0x33f8 <disk_write+0x96>
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    340e:	80 e0       	ldi	r24, 0x00	; 0
    3410:	90 e0       	ldi	r25, 0x00	; 0
    3412:	6d ef       	ldi	r22, 0xFD	; 253
    3414:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <xmit_datablock>
    3418:	89 2b       	or	r24, r25
    341a:	09 f4       	brne	.+2      	; 0x341e <disk_write+0xbc>
    341c:	01 e0       	ldi	r16, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    341e:	28 9a       	sbi	0x05, 0	; 5
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    3420:	8f ef       	ldi	r24, 0xFF	; 255
    3422:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    3424:	0d b4       	in	r0, 0x2d	; 45
    3426:	07 fe       	sbrs	r0, 7
    3428:	fd cf       	rjmp	.-6      	; 0x3424 <disk_write+0xc2>
	return SPDR;
    342a:	8e b5       	in	r24, 0x2e	; 46
				count = 1;
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
    342c:	20 e0       	ldi	r18, 0x00	; 0
    342e:	30 e0       	ldi	r19, 0x00	; 0
    3430:	00 23       	and	r16, r16
    3432:	29 f0       	breq	.+10     	; 0x343e <disk_write+0xdc>
    3434:	21 e0       	ldi	r18, 0x01	; 1
    3436:	30 e0       	ldi	r19, 0x00	; 0
    3438:	02 c0       	rjmp	.+4      	; 0x343e <disk_write+0xdc>
    343a:	24 e0       	ldi	r18, 0x04	; 4
    343c:	30 e0       	ldi	r19, 0x00	; 0
}
    343e:	c9 01       	movw	r24, r18
    3440:	df 91       	pop	r29
    3442:	cf 91       	pop	r28
    3444:	0f 91       	pop	r16
    3446:	ff 90       	pop	r15
    3448:	ef 90       	pop	r14
    344a:	df 90       	pop	r13
    344c:	cf 90       	pop	r12
    344e:	08 95       	ret

00003450 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    3450:	a0 e1       	ldi	r26, 0x10	; 16
    3452:	b0 e0       	ldi	r27, 0x00	; 0
    3454:	ee e2       	ldi	r30, 0x2E	; 46
    3456:	fa e1       	ldi	r31, 0x1A	; 26
    3458:	0c 94 83 2d 	jmp	0x5b06	; 0x5b06 <__prologue_saves__+0x1a>
    345c:	8a 01       	movw	r16, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
    345e:	88 23       	and	r24, r24
    3460:	09 f0       	breq	.+2      	; 0x3464 <disk_ioctl+0x14>
    3462:	8b c1       	rjmp	.+790    	; 0x377a <disk_ioctl+0x32a>

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
    3464:	64 30       	cpi	r22, 0x04	; 4
    3466:	01 f5       	brne	.+64     	; 0x34a8 <disk_ioctl+0x58>
		switch (*ptr) {
    3468:	fa 01       	movw	r30, r20
    346a:	80 81       	ld	r24, Z
    346c:	81 30       	cpi	r24, 0x01	; 1
    346e:	81 f0       	breq	.+32     	; 0x3490 <disk_ioctl+0x40>
    3470:	81 30       	cpi	r24, 0x01	; 1
    3472:	20 f0       	brcs	.+8      	; 0x347c <disk_ioctl+0x2c>
    3474:	82 30       	cpi	r24, 0x02	; 2
    3476:	09 f0       	breq	.+2      	; 0x347a <disk_ioctl+0x2a>
    3478:	80 c1       	rjmp	.+768    	; 0x377a <disk_ioctl+0x32a>
    347a:	10 c0       	rjmp	.+32     	; 0x349c <disk_ioctl+0x4c>
}

static
void power_off (void)
{
   CS_LOW();            /* Wait for card ready */
    347c:	28 98       	cbi	0x05, 0	; 5
   wait_ready();
    347e:	0e 94 6e 17 	call	0x2edc	; 0x2edc <wait_ready>
   SPCR = 0;
    3482:	1c bc       	out	0x2c, r1	; 44
   Stat |= STA_NOINIT;      /* Set STA_NOINIT */
    3484:	80 91 0e 01 	lds	r24, 0x010E
    3488:	81 60       	ori	r24, 0x01	; 1
    348a:	80 93 0e 01 	sts	0x010E, r24
    348e:	09 c0       	rjmp	.+18     	; 0x34a2 <disk_ioctl+0x52>
#if (defined SD_PWR_PIN | defined SD_PWR_PORT)
   DDRC|=(1<<SD_PWR_PIN);          // Turns on PWR pin as output
   SD_PWR_PORT|=(1<<SD_PWR_PIN);   // Drives PWR pin high
#endif

   DDRC|=(1<<SD_CS_PIN);          // Turns on CS pin as output
    3490:	38 9a       	sbi	0x07, 0	; 7
   DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)| (1<<DD_SS);
    3492:	87 e0       	ldi	r24, 0x07	; 7
    3494:	84 b9       	out	0x04, r24	; 4
   SPCR = (1<<SPE)|(1<<MSTR); /* Initialize SPI port (Mode 0) */ 
    3496:	80 e5       	ldi	r24, 0x50	; 80
    3498:	8c bd       	out	0x2c, r24	; 44
    349a:	03 c0       	rjmp	.+6      	; 0x34a2 <disk_ioctl+0x52>
		case 1:		/* Sub control code == 1 (POWER_ON) */
			power_on();				/* Power on */
			res = RES_OK;
			break;
		case 2:		/* Sub control code == 2 (POWER_GET) */
			*(ptr+1) = (BYTE)chk_power();
    349c:	81 e0       	ldi	r24, 0x01	; 1
    349e:	fa 01       	movw	r30, r20
    34a0:	81 83       	std	Z+1, r24	; 0x01
    34a2:	20 e0       	ldi	r18, 0x00	; 0
    34a4:	30 e0       	ldi	r19, 0x00	; 0
    34a6:	6b c1       	rjmp	.+726    	; 0x377e <disk_ioctl+0x32e>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
    34a8:	80 91 0e 01 	lds	r24, 0x010E
    34ac:	80 ff       	sbrs	r24, 0
    34ae:	03 c0       	rjmp	.+6      	; 0x34b6 <disk_ioctl+0x66>
    34b0:	23 e0       	ldi	r18, 0x03	; 3
    34b2:	30 e0       	ldi	r19, 0x00	; 0
    34b4:	64 c1       	rjmp	.+712    	; 0x377e <disk_ioctl+0x32e>

		switch (ctrl) {
    34b6:	e6 2f       	mov	r30, r22
    34b8:	f0 e0       	ldi	r31, 0x00	; 0
    34ba:	ef 30       	cpi	r30, 0x0F	; 15
    34bc:	f1 05       	cpc	r31, r1
    34be:	20 f4       	brcc	.+8      	; 0x34c8 <disk_ioctl+0x78>
    34c0:	e6 5b       	subi	r30, 0xB6	; 182
    34c2:	ff 4f       	sbci	r31, 0xFF	; 255
    34c4:	0c 94 ad 2d 	jmp	0x5b5a	; 0x5b5a <__tablejump2__>
    34c8:	24 e0       	ldi	r18, 0x04	; 4
    34ca:	30 e0       	ldi	r19, 0x00	; 0
    34cc:	4e c1       	rjmp	.+668    	; 0x376a <disk_ioctl+0x31a>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
    34ce:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <select>
    34d2:	89 2b       	or	r24, r25
    34d4:	09 f4       	brne	.+2      	; 0x34d8 <disk_ioctl+0x88>
    34d6:	47 c1       	rjmp	.+654    	; 0x3766 <disk_ioctl+0x316>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    34d8:	28 9a       	sbi	0x05, 0	; 5
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    34da:	8f ef       	ldi	r24, 0xFF	; 255
    34dc:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    34de:	0d b4       	in	r0, 0x2d	; 45
    34e0:	07 fe       	sbrs	r0, 7
    34e2:	fd cf       	rjmp	.-6      	; 0x34de <disk_ioctl+0x8e>
	return SPDR;
    34e4:	8e b5       	in	r24, 0x2e	; 46
    34e6:	f7 c0       	rjmp	.+494    	; 0x36d6 <disk_ioctl+0x286>
				deselect();
			}
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    34e8:	89 e4       	ldi	r24, 0x49	; 73
    34ea:	40 e0       	ldi	r20, 0x00	; 0
    34ec:	50 e0       	ldi	r21, 0x00	; 0
    34ee:	60 e0       	ldi	r22, 0x00	; 0
    34f0:	70 e0       	ldi	r23, 0x00	; 0
    34f2:	0e 94 1e 18 	call	0x303c	; 0x303c <send_cmd>
    34f6:	88 23       	and	r24, r24
    34f8:	09 f0       	breq	.+2      	; 0x34fc <disk_ioctl+0xac>
    34fa:	35 c1       	rjmp	.+618    	; 0x3766 <disk_ioctl+0x316>
    34fc:	ce 01       	movw	r24, r28
    34fe:	01 96       	adiw	r24, 0x01	; 1
    3500:	60 e1       	ldi	r22, 0x10	; 16
    3502:	70 e0       	ldi	r23, 0x00	; 0
    3504:	0e 94 98 17 	call	0x2f30	; 0x2f30 <rcvr_datablock>
    3508:	89 2b       	or	r24, r25
    350a:	09 f4       	brne	.+2      	; 0x350e <disk_ioctl+0xbe>
    350c:	2c c1       	rjmp	.+600    	; 0x3766 <disk_ioctl+0x316>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    350e:	89 81       	ldd	r24, Y+1	; 0x01
    3510:	82 95       	swap	r24
    3512:	86 95       	lsr	r24
    3514:	86 95       	lsr	r24
    3516:	83 70       	andi	r24, 0x03	; 3
    3518:	7a 85       	ldd	r23, Y+10	; 0x0a
    351a:	49 85       	ldd	r20, Y+9	; 0x09
    351c:	81 30       	cpi	r24, 0x01	; 1
    351e:	89 f4       	brne	.+34     	; 0x3542 <disk_ioctl+0xf2>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
    3520:	87 2f       	mov	r24, r23
    3522:	90 e0       	ldi	r25, 0x00	; 0
    3524:	01 96       	adiw	r24, 0x01	; 1
    3526:	34 2f       	mov	r19, r20
    3528:	20 e0       	ldi	r18, 0x00	; 0
    352a:	82 0f       	add	r24, r18
    352c:	93 1f       	adc	r25, r19
    352e:	a0 e0       	ldi	r26, 0x00	; 0
    3530:	b0 e0       	ldi	r27, 0x00	; 0
    3532:	2a e0       	ldi	r18, 0x0A	; 10
    3534:	88 0f       	add	r24, r24
    3536:	99 1f       	adc	r25, r25
    3538:	aa 1f       	adc	r26, r26
    353a:	bb 1f       	adc	r27, r27
    353c:	2a 95       	dec	r18
    353e:	d1 f7       	brne	.-12     	; 0x3534 <disk_ioctl+0xe4>
    3540:	c5 c0       	rjmp	.+394    	; 0x36cc <disk_ioctl+0x27c>
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
    3542:	42 95       	swap	r20
    3544:	46 95       	lsr	r20
    3546:	46 95       	lsr	r20
    3548:	43 70       	andi	r20, 0x03	; 3
    354a:	28 85       	ldd	r18, Y+8	; 0x08
    354c:	30 e0       	ldi	r19, 0x00	; 0
    354e:	22 0f       	add	r18, r18
    3550:	33 1f       	adc	r19, r19
    3552:	22 0f       	add	r18, r18
    3554:	33 1f       	adc	r19, r19
    3556:	24 0f       	add	r18, r20
    3558:	31 1d       	adc	r19, r1
    355a:	2f 5f       	subi	r18, 0xFF	; 255
    355c:	3f 4f       	sbci	r19, 0xFF	; 255
    355e:	8f 81       	ldd	r24, Y+7	; 0x07
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	83 70       	andi	r24, 0x03	; 3
    3564:	90 70       	andi	r25, 0x00	; 0
    3566:	98 2f       	mov	r25, r24
    3568:	88 27       	eor	r24, r24
    356a:	99 0f       	add	r25, r25
    356c:	99 0f       	add	r25, r25
    356e:	28 0f       	add	r18, r24
    3570:	39 1f       	adc	r19, r25
    3572:	40 e0       	ldi	r20, 0x00	; 0
    3574:	50 e0       	ldi	r21, 0x00	; 0
    3576:	8e 81       	ldd	r24, Y+6	; 0x06
    3578:	8f 70       	andi	r24, 0x0F	; 15
    357a:	6b 85       	ldd	r22, Y+11	; 0x0b
    357c:	66 1f       	adc	r22, r22
    357e:	66 27       	eor	r22, r22
    3580:	66 1f       	adc	r22, r22
    3582:	86 0f       	add	r24, r22
    3584:	8e 5f       	subi	r24, 0xFE	; 254
    3586:	73 70       	andi	r23, 0x03	; 3
    3588:	77 0f       	add	r23, r23
    358a:	87 0f       	add	r24, r23
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	09 97       	sbiw	r24, 0x09	; 9
    3590:	04 c0       	rjmp	.+8      	; 0x359a <disk_ioctl+0x14a>
    3592:	22 0f       	add	r18, r18
    3594:	33 1f       	adc	r19, r19
    3596:	44 1f       	adc	r20, r20
    3598:	55 1f       	adc	r21, r21
    359a:	8a 95       	dec	r24
    359c:	d2 f7       	brpl	.-12     	; 0x3592 <disk_ioctl+0x142>
    359e:	f8 01       	movw	r30, r16
    35a0:	20 83       	st	Z, r18
    35a2:	31 83       	std	Z+1, r19	; 0x01
    35a4:	42 83       	std	Z+2, r20	; 0x02
    35a6:	53 83       	std	Z+3, r21	; 0x03
    35a8:	96 c0       	rjmp	.+300    	; 0x36d6 <disk_ioctl+0x286>
				res = RES_OK;
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
    35aa:	80 e0       	ldi	r24, 0x00	; 0
    35ac:	92 e0       	ldi	r25, 0x02	; 2
    35ae:	fa 01       	movw	r30, r20
    35b0:	91 83       	std	Z+1, r25	; 0x01
    35b2:	80 83       	st	Z, r24
    35b4:	90 c0       	rjmp	.+288    	; 0x36d6 <disk_ioctl+0x286>
			res = RES_OK;
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
    35b6:	80 91 29 01 	lds	r24, 0x0129
    35ba:	f8 2e       	mov	r15, r24
    35bc:	82 ff       	sbrs	r24, 2
    35be:	31 c0       	rjmp	.+98     	; 0x3622 <disk_ioctl+0x1d2>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    35c0:	8d ec       	ldi	r24, 0xCD	; 205
    35c2:	40 e0       	ldi	r20, 0x00	; 0
    35c4:	50 e0       	ldi	r21, 0x00	; 0
    35c6:	60 e0       	ldi	r22, 0x00	; 0
    35c8:	70 e0       	ldi	r23, 0x00	; 0
    35ca:	0e 94 1e 18 	call	0x303c	; 0x303c <send_cmd>
    35ce:	88 23       	and	r24, r24
    35d0:	09 f0       	breq	.+2      	; 0x35d4 <disk_ioctl+0x184>
    35d2:	c9 c0       	rjmp	.+402    	; 0x3766 <disk_ioctl+0x316>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    35d4:	8f ef       	ldi	r24, 0xFF	; 255
    35d6:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    35d8:	0d b4       	in	r0, 0x2d	; 45
    35da:	07 fe       	sbrs	r0, 7
    35dc:	fd cf       	rjmp	.-6      	; 0x35d8 <disk_ioctl+0x188>
	return SPDR;
    35de:	8e b5       	in	r24, 0x2e	; 46

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    35e0:	ce 01       	movw	r24, r28
    35e2:	01 96       	adiw	r24, 0x01	; 1
    35e4:	60 e1       	ldi	r22, 0x10	; 16
    35e6:	70 e0       	ldi	r23, 0x00	; 0
    35e8:	0e 94 98 17 	call	0x2f30	; 0x2f30 <rcvr_datablock>
    35ec:	89 2b       	or	r24, r25
    35ee:	09 f4       	brne	.+2      	; 0x35f2 <disk_ioctl+0x1a2>
    35f0:	ba c0       	rjmp	.+372    	; 0x3766 <disk_ioctl+0x316>
    35f2:	80 e3       	ldi	r24, 0x30	; 48
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    35f4:	9f ef       	ldi	r25, 0xFF	; 255
    35f6:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    35f8:	0d b4       	in	r0, 0x2d	; 45
    35fa:	07 fe       	sbrs	r0, 7
    35fc:	fd cf       	rjmp	.-6      	; 0x35f8 <disk_ioctl+0x1a8>
	return SPDR;
    35fe:	2e b5       	in	r18, 0x2e	; 46
		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
						for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
    3600:	81 50       	subi	r24, 0x01	; 1
    3602:	c9 f7       	brne	.-14     	; 0x35f6 <disk_ioctl+0x1a6>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
    3604:	2b 85       	ldd	r18, Y+11	; 0x0b
    3606:	22 95       	swap	r18
    3608:	2f 70       	andi	r18, 0x0F	; 15
    360a:	80 e1       	ldi	r24, 0x10	; 16
    360c:	90 e0       	ldi	r25, 0x00	; 0
    360e:	a0 e0       	ldi	r26, 0x00	; 0
    3610:	b0 e0       	ldi	r27, 0x00	; 0
    3612:	04 c0       	rjmp	.+8      	; 0x361c <disk_ioctl+0x1cc>
    3614:	88 0f       	add	r24, r24
    3616:	99 1f       	adc	r25, r25
    3618:	aa 1f       	adc	r26, r26
    361a:	bb 1f       	adc	r27, r27
    361c:	2a 95       	dec	r18
    361e:	d2 f7       	brpl	.-12     	; 0x3614 <disk_ioctl+0x1c4>
    3620:	55 c0       	rjmp	.+170    	; 0x36cc <disk_ioctl+0x27c>
						res = RES_OK;
					}
				}
			} else {					/* SDC ver 1.XX or MMC */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    3622:	89 e4       	ldi	r24, 0x49	; 73
    3624:	40 e0       	ldi	r20, 0x00	; 0
    3626:	50 e0       	ldi	r21, 0x00	; 0
    3628:	60 e0       	ldi	r22, 0x00	; 0
    362a:	70 e0       	ldi	r23, 0x00	; 0
    362c:	0e 94 1e 18 	call	0x303c	; 0x303c <send_cmd>
    3630:	88 23       	and	r24, r24
    3632:	09 f0       	breq	.+2      	; 0x3636 <disk_ioctl+0x1e6>
    3634:	98 c0       	rjmp	.+304    	; 0x3766 <disk_ioctl+0x316>
    3636:	ce 01       	movw	r24, r28
    3638:	01 96       	adiw	r24, 0x01	; 1
    363a:	60 e1       	ldi	r22, 0x10	; 16
    363c:	70 e0       	ldi	r23, 0x00	; 0
    363e:	0e 94 98 17 	call	0x2f30	; 0x2f30 <rcvr_datablock>
    3642:	89 2b       	or	r24, r25
    3644:	09 f4       	brne	.+2      	; 0x3648 <disk_ioctl+0x1f8>
    3646:	8f c0       	rjmp	.+286    	; 0x3766 <disk_ioctl+0x316>
    3648:	4b 85       	ldd	r20, Y+11	; 0x0b
    364a:	8c 85       	ldd	r24, Y+12	; 0x0c
					if (CardType & CT_SD1) {	/* SDC ver 1.XX */
    364c:	f1 fe       	sbrs	r15, 1
    364e:	1b c0       	rjmp	.+54     	; 0x3686 <disk_ioctl+0x236>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    3650:	88 1f       	adc	r24, r24
    3652:	88 27       	eor	r24, r24
    3654:	88 1f       	adc	r24, r24
    3656:	90 e0       	ldi	r25, 0x00	; 0
    3658:	01 96       	adiw	r24, 0x01	; 1
    365a:	24 2f       	mov	r18, r20
    365c:	30 e0       	ldi	r19, 0x00	; 0
    365e:	2f 73       	andi	r18, 0x3F	; 63
    3660:	30 70       	andi	r19, 0x00	; 0
    3662:	22 0f       	add	r18, r18
    3664:	33 1f       	adc	r19, r19
    3666:	82 0f       	add	r24, r18
    3668:	93 1f       	adc	r25, r19
    366a:	2e 85       	ldd	r18, Y+14	; 0x0e
    366c:	22 95       	swap	r18
    366e:	26 95       	lsr	r18
    3670:	26 95       	lsr	r18
    3672:	23 70       	andi	r18, 0x03	; 3
    3674:	30 e0       	ldi	r19, 0x00	; 0
    3676:	21 50       	subi	r18, 0x01	; 1
    3678:	30 40       	sbci	r19, 0x00	; 0
    367a:	02 c0       	rjmp	.+4      	; 0x3680 <disk_ioctl+0x230>
    367c:	88 0f       	add	r24, r24
    367e:	99 1f       	adc	r25, r25
    3680:	2a 95       	dec	r18
    3682:	e2 f7       	brpl	.-8      	; 0x367c <disk_ioctl+0x22c>
    3684:	21 c0       	rjmp	.+66     	; 0x36c8 <disk_ioctl+0x278>
					} else {					/* MMC */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    3686:	28 2f       	mov	r18, r24
    3688:	30 e0       	ldi	r19, 0x00	; 0
    368a:	23 70       	andi	r18, 0x03	; 3
    368c:	30 70       	andi	r19, 0x00	; 0
    368e:	f3 e0       	ldi	r31, 0x03	; 3
    3690:	22 0f       	add	r18, r18
    3692:	33 1f       	adc	r19, r19
    3694:	fa 95       	dec	r31
    3696:	e1 f7       	brne	.-8      	; 0x3690 <disk_ioctl+0x240>
    3698:	82 95       	swap	r24
    369a:	86 95       	lsr	r24
    369c:	87 70       	andi	r24, 0x07	; 7
    369e:	28 0f       	add	r18, r24
    36a0:	31 1d       	adc	r19, r1
    36a2:	2f 5f       	subi	r18, 0xFF	; 255
    36a4:	3f 4f       	sbci	r19, 0xFF	; 255
    36a6:	84 2f       	mov	r24, r20
    36a8:	90 e0       	ldi	r25, 0x00	; 0
    36aa:	8c 77       	andi	r24, 0x7C	; 124
    36ac:	90 70       	andi	r25, 0x00	; 0
    36ae:	95 95       	asr	r25
    36b0:	87 95       	ror	r24
    36b2:	95 95       	asr	r25
    36b4:	87 95       	ror	r24
    36b6:	01 96       	adiw	r24, 0x01	; 1
    36b8:	ac 01       	movw	r20, r24
    36ba:	24 9f       	mul	r18, r20
    36bc:	c0 01       	movw	r24, r0
    36be:	25 9f       	mul	r18, r21
    36c0:	90 0d       	add	r25, r0
    36c2:	34 9f       	mul	r19, r20
    36c4:	90 0d       	add	r25, r0
    36c6:	11 24       	eor	r1, r1
    36c8:	a0 e0       	ldi	r26, 0x00	; 0
    36ca:	b0 e0       	ldi	r27, 0x00	; 0
    36cc:	f8 01       	movw	r30, r16
    36ce:	80 83       	st	Z, r24
    36d0:	91 83       	std	Z+1, r25	; 0x01
    36d2:	a2 83       	std	Z+2, r26	; 0x02
    36d4:	b3 83       	std	Z+3, r27	; 0x03
    36d6:	20 e0       	ldi	r18, 0x00	; 0
    36d8:	30 e0       	ldi	r19, 0x00	; 0
    36da:	47 c0       	rjmp	.+142    	; 0x376a <disk_ioctl+0x31a>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
    36dc:	80 91 29 01 	lds	r24, 0x0129
    36e0:	fa 01       	movw	r30, r20
    36e2:	80 83       	st	Z, r24
    36e4:	f8 cf       	rjmp	.-16     	; 0x36d6 <disk_ioctl+0x286>
			res = RES_OK;
			break;

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    36e6:	89 e4       	ldi	r24, 0x49	; 73
    36e8:	01 c0       	rjmp	.+2      	; 0x36ec <disk_ioctl+0x29c>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    36ea:	8a e4       	ldi	r24, 0x4A	; 74
    36ec:	40 e0       	ldi	r20, 0x00	; 0
    36ee:	50 e0       	ldi	r21, 0x00	; 0
    36f0:	60 e0       	ldi	r22, 0x00	; 0
    36f2:	70 e0       	ldi	r23, 0x00	; 0
    36f4:	0e 94 1e 18 	call	0x303c	; 0x303c <send_cmd>
    36f8:	88 23       	and	r24, r24
    36fa:	a9 f5       	brne	.+106    	; 0x3766 <disk_ioctl+0x316>
    36fc:	c8 01       	movw	r24, r16
    36fe:	60 e1       	ldi	r22, 0x10	; 16
    3700:	70 e0       	ldi	r23, 0x00	; 0
    3702:	2b c0       	rjmp	.+86     	; 0x375a <disk_ioctl+0x30a>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    3704:	8a e7       	ldi	r24, 0x7A	; 122
    3706:	40 e0       	ldi	r20, 0x00	; 0
    3708:	50 e0       	ldi	r21, 0x00	; 0
    370a:	60 e0       	ldi	r22, 0x00	; 0
    370c:	70 e0       	ldi	r23, 0x00	; 0
    370e:	0e 94 1e 18 	call	0x303c	; 0x303c <send_cmd>
    3712:	88 23       	and	r24, r24
    3714:	41 f5       	brne	.+80     	; 0x3766 <disk_ioctl+0x316>
    3716:	f8 01       	movw	r30, r16
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    3718:	9f ef       	ldi	r25, 0xFF	; 255
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    371a:	98 01       	movw	r18, r16
    371c:	2d 5f       	subi	r18, 0xFD	; 253
    371e:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    3720:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    3722:	0d b4       	in	r0, 0x2d	; 45
    3724:	07 fe       	sbrs	r0, 7
    3726:	fd cf       	rjmp	.-6      	; 0x3722 <disk_ioctl+0x2d2>
	return SPDR;
    3728:	8e b5       	in	r24, 0x2e	; 46
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    372a:	80 83       	st	Z, r24
    372c:	e2 17       	cp	r30, r18
    372e:	f3 07       	cpc	r31, r19
    3730:	91 f2       	breq	.-92     	; 0x36d6 <disk_ioctl+0x286>
    3732:	31 96       	adiw	r30, 0x01	; 1
    3734:	f5 cf       	rjmp	.-22     	; 0x3720 <disk_ioctl+0x2d0>
				res = RES_OK;
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    3736:	8d ec       	ldi	r24, 0xCD	; 205
    3738:	40 e0       	ldi	r20, 0x00	; 0
    373a:	50 e0       	ldi	r21, 0x00	; 0
    373c:	60 e0       	ldi	r22, 0x00	; 0
    373e:	70 e0       	ldi	r23, 0x00	; 0
    3740:	0e 94 1e 18 	call	0x303c	; 0x303c <send_cmd>
    3744:	88 23       	and	r24, r24
    3746:	79 f4       	brne	.+30     	; 0x3766 <disk_ioctl+0x316>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    3748:	8f ef       	ldi	r24, 0xFF	; 255
    374a:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    374c:	0d b4       	in	r0, 0x2d	; 45
    374e:	07 fe       	sbrs	r0, 7
    3750:	fd cf       	rjmp	.-6      	; 0x374c <disk_ioctl+0x2fc>
	return SPDR;
    3752:	8e b5       	in	r24, 0x2e	; 46
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
				rcvr_spi();
				if (rcvr_datablock(ptr, 64))
    3754:	c8 01       	movw	r24, r16
    3756:	60 e4       	ldi	r22, 0x40	; 64
    3758:	70 e0       	ldi	r23, 0x00	; 0
    375a:	0e 94 98 17 	call	0x2f30	; 0x2f30 <rcvr_datablock>
    375e:	20 e0       	ldi	r18, 0x00	; 0
    3760:	30 e0       	ldi	r19, 0x00	; 0
    3762:	89 2b       	or	r24, r25
    3764:	11 f4       	brne	.+4      	; 0x376a <disk_ioctl+0x31a>
    3766:	21 e0       	ldi	r18, 0x01	; 1
    3768:	30 e0       	ldi	r19, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    376a:	28 9a       	sbi	0x05, 0	; 5
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    376c:	8f ef       	ldi	r24, 0xFF	; 255
    376e:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    3770:	0d b4       	in	r0, 0x2d	; 45
    3772:	07 fe       	sbrs	r0, 7
    3774:	fd cf       	rjmp	.-6      	; 0x3770 <disk_ioctl+0x320>
	return SPDR;
    3776:	8e b5       	in	r24, 0x2e	; 46
    3778:	02 c0       	rjmp	.+4      	; 0x377e <disk_ioctl+0x32e>
    377a:	24 e0       	ldi	r18, 0x04	; 4
    377c:	30 e0       	ldi	r19, 0x00	; 0

		deselect();
	}

	return res;
}
    377e:	c9 01       	movw	r24, r18
    3780:	60 96       	adiw	r28, 0x10	; 16
    3782:	e5 e0       	ldi	r30, 0x05	; 5
    3784:	0c 94 9f 2d 	jmp	0x5b3e	; 0x5b3e <__epilogue_restores__+0x1a>

00003788 <disk_timerproc>:

void disk_timerproc (void)
{
   BYTE n;

   n=Timer1;                  /* 100Hz decrement timer */
    3788:	80 91 27 01 	lds	r24, 0x0127
   if(n)
    378c:	88 23       	and	r24, r24
    378e:	19 f0       	breq	.+6      	; 0x3796 <disk_timerproc+0xe>
      Timer1 = --n;
    3790:	81 50       	subi	r24, 0x01	; 1
    3792:	80 93 27 01 	sts	0x0127, r24
   n=Timer2;
    3796:	80 91 28 01 	lds	r24, 0x0128
   if(n)
    379a:	88 23       	and	r24, r24
    379c:	19 f0       	breq	.+6      	; 0x37a4 <disk_timerproc+0x1c>
      Timer2 = --n; 
    379e:	81 50       	subi	r24, 0x01	; 1
    37a0:	80 93 28 01 	sts	0x0128, r24
    37a4:	08 95       	ret

000037a6 <RTC_read>:
	char dev,		/* Device address */
	uint8_t adr,		/* Read start address */
	uint8_t cnt,		/* Read byte count */
	uint8_t *buff		/* Read data buffer */
)
{
    37a6:	a0 e0       	ldi	r26, 0x00	; 0
    37a8:	b0 e0       	ldi	r27, 0x00	; 0
    37aa:	e9 ed       	ldi	r30, 0xD9	; 217
    37ac:	fb e1       	ldi	r31, 0x1B	; 27
    37ae:	0c 94 81 2d 	jmp	0x5b02	; 0x5b02 <__prologue_saves__+0x16>
    37b2:	f8 2e       	mov	r15, r24
    37b4:	06 2f       	mov	r16, r22
    37b6:	14 2f       	mov	r17, r20
    37b8:	e2 2e       	mov	r14, r18
    37ba:	d3 2e       	mov	r13, r19
	uint8_t *rbuff = buff;
	uint8_t n;
	BOOL start = FALSE;
	uint8_t data;

	if (!cnt) return FALSE;
    37bc:	44 23       	and	r20, r20
    37be:	09 f4       	brne	.+2      	; 0x37c2 <RTC_read+0x1c>
    37c0:	45 c0       	rjmp	.+138    	; 0x384c <RTC_read+0xa6>
	/*
	 * Start in master write mode to transmit read start address to slave
	 */
	if (!(TWI_start())) return FALSE;	/* send start condition */				
    37c2:	0e 94 ba 26 	call	0x4d74	; 0x4d74 <TWI_start>
    37c6:	89 2b       	or	r24, r25
    37c8:	09 f4       	brne	.+2      	; 0x37cc <RTC_read+0x26>
    37ca:	40 c0       	rjmp	.+128    	; 0x384c <RTC_read+0xa6>

	TWI_send(dev | TW_WRITE);		/* Select device dev */
    37cc:	8f 2d       	mov	r24, r15
    37ce:	0e 94 d6 26 	call	0x4dac	; 0x4dac <TWI_send>
	if (!(TW_STATUS == TW_MT_SLA_ACK)) return FALSE;	/* Device could not be selected */
    37d2:	80 91 b9 00 	lds	r24, 0x00B9
    37d6:	88 7f       	andi	r24, 0xF8	; 248
    37d8:	88 31       	cpi	r24, 0x18	; 24
    37da:	c1 f5       	brne	.+112    	; 0x384c <RTC_read+0xa6>

	/* Send address for reading start position to slave device */	
	TWI_send(adr);
    37dc:	80 2f       	mov	r24, r16
    37de:	0e 94 d6 26 	call	0x4dac	; 0x4dac <TWI_send>
	if (!(TW_STATUS == TW_MT_DATA_ACK)) return FALSE;	/* No ACK from device return */
    37e2:	80 91 b9 00 	lds	r24, 0x00B9
    37e6:	88 7f       	andi	r24, 0xF8	; 248
    37e8:	88 32       	cpi	r24, 0x28	; 40
    37ea:	81 f5       	brne	.+96     	; 0x384c <RTC_read+0xa6>

	/*
	 * Switch to master read mode to recive data from slave 
	 */	
	if (!(TWI_start())) return FALSE;	/* send start condition */
    37ec:	0e 94 ba 26 	call	0x4d74	; 0x4d74 <TWI_start>
    37f0:	89 2b       	or	r24, r25
    37f2:	61 f1       	breq	.+88     	; 0x384c <RTC_read+0xa6>

	TWI_send(dev | TW_READ);		/* Select device dev */
    37f4:	8f 2d       	mov	r24, r15
    37f6:	81 60       	ori	r24, 0x01	; 1
    37f8:	0e 94 d6 26 	call	0x4dac	; 0x4dac <TWI_send>
	if (!(TW_STATUS == TW_MR_SLA_ACK)) return FALSE;	/* Device could not be selected */
    37fc:	80 91 b9 00 	lds	r24, 0x00B9
    3800:	88 7f       	andi	r24, 0xF8	; 248
    3802:	80 34       	cpi	r24, 0x40	; 64
    3804:	19 f5       	brne	.+70     	; 0x384c <RTC_read+0xa6>
    3806:	8e 2d       	mov	r24, r14
    3808:	9d 2d       	mov	r25, r13
    380a:	9c 01       	movw	r18, r24
    380c:	e9 01       	movw	r28, r18

	/* Device should start sending now and first stop when do not recive a ACK after data transmition */
	do {					/* Receive data */
		cnt--;
    380e:	11 50       	subi	r17, 0x01	; 1
		if (cnt > 0) {
    3810:	61 f0       	breq	.+24     	; 0x382a <RTC_read+0x84>
			data = TWI_rcvr(TRUE);		/* Send ACK after reviced data */
    3812:	81 e0       	ldi	r24, 0x01	; 1
    3814:	90 e0       	ldi	r25, 0x00	; 0
    3816:	0e 94 e0 26 	call	0x4dc0	; 0x4dc0 <TWI_rcvr>
    381a:	98 2f       	mov	r25, r24
			if (!(TW_STATUS == TW_MR_DATA_ACK)) return FALSE; /* Return if an ACK not where send after data recived */
    381c:	80 91 b9 00 	lds	r24, 0x00B9
    3820:	88 7f       	andi	r24, 0xF8	; 248
    3822:	80 35       	cpi	r24, 0x50	; 80
    3824:	99 f4       	brne	.+38     	; 0x384c <RTC_read+0xa6>
			*rbuff++ = data;
    3826:	99 93       	st	Y+, r25
    3828:	f2 cf       	rjmp	.-28     	; 0x380e <RTC_read+0x68>
		} else {
			data = TWI_rcvr(FALSE);		/* Send NACK after reviced data */
    382a:	80 e0       	ldi	r24, 0x00	; 0
    382c:	90 e0       	ldi	r25, 0x00	; 0
    382e:	0e 94 e0 26 	call	0x4dc0	; 0x4dc0 <TWI_rcvr>
			if (!(TW_STATUS == TW_MR_DATA_NACK)) return FALSE; /* Return if an NACK not where send after data recived */
    3832:	80 91 b9 00 	lds	r24, 0x00B9
    3836:	88 7f       	andi	r24, 0xF8	; 248
    3838:	88 35       	cpi	r24, 0x58	; 88
    383a:	41 f4       	brne	.+16     	; 0x384c <RTC_read+0xa6>
			*rbuff++ = TWDR;
    383c:	80 91 bb 00 	lds	r24, 0x00BB
    3840:	88 83       	st	Y, r24
		}
	} while (cnt);
	
	TWI_stop(); /* send stop condition */
    3842:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <TWI_stop>
    3846:	21 e0       	ldi	r18, 0x01	; 1
    3848:	30 e0       	ldi	r19, 0x00	; 0
    384a:	02 c0       	rjmp	.+4      	; 0x3850 <RTC_read+0xaa>
	return TRUE;
    384c:	20 e0       	ldi	r18, 0x00	; 0
    384e:	30 e0       	ldi	r19, 0x00	; 0
}
    3850:	c9 01       	movw	r24, r18
    3852:	cd b7       	in	r28, 0x3d	; 61
    3854:	de b7       	in	r29, 0x3e	; 62
    3856:	e7 e0       	ldi	r30, 0x07	; 7
    3858:	0c 94 9d 2d 	jmp	0x5b3a	; 0x5b3a <__epilogue_restores__+0x16>

0000385c <rtc_gettime>:

BOOL rtc_gettime (RTC *rtc)
{
    385c:	a7 e0       	ldi	r26, 0x07	; 7
    385e:	b0 e0       	ldi	r27, 0x00	; 0
    3860:	e4 e3       	ldi	r30, 0x34	; 52
    3862:	fc e1       	ldi	r31, 0x1C	; 28
    3864:	0c 94 84 2d 	jmp	0x5b08	; 0x5b08 <__prologue_saves__+0x1c>
    3868:	8c 01       	movw	r16, r24

	uint8_t buf[7];

	if (!RTC_read(0b11010000, 0x01, 7, buf)) return FALSE;
    386a:	80 ed       	ldi	r24, 0xD0	; 208
    386c:	61 e0       	ldi	r22, 0x01	; 1
    386e:	47 e0       	ldi	r20, 0x07	; 7
    3870:	9e 01       	movw	r18, r28
    3872:	2f 5f       	subi	r18, 0xFF	; 255
    3874:	3f 4f       	sbci	r19, 0xFF	; 255
    3876:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <RTC_read>
    387a:	89 2b       	or	r24, r25
    387c:	19 f4       	brne	.+6      	; 0x3884 <rtc_gettime+0x28>
    387e:	20 e0       	ldi	r18, 0x00	; 0
    3880:	30 e0       	ldi	r19, 0x00	; 0
    3882:	67 c0       	rjmp	.+206    	; 0x3952 <rtc_gettime+0xf6>

	rtc->sec = (buf[0] & 0x0F) + ((buf[0] >> 4) & 7) * 10;
    3884:	49 81       	ldd	r20, Y+1	; 0x01
    3886:	84 2f       	mov	r24, r20
    3888:	82 95       	swap	r24
    388a:	8f 70       	andi	r24, 0x0F	; 15
    388c:	90 e0       	ldi	r25, 0x00	; 0
    388e:	87 70       	andi	r24, 0x07	; 7
    3890:	90 70       	andi	r25, 0x00	; 0
    3892:	9c 01       	movw	r18, r24
    3894:	63 e0       	ldi	r22, 0x03	; 3
    3896:	22 0f       	add	r18, r18
    3898:	33 1f       	adc	r19, r19
    389a:	6a 95       	dec	r22
    389c:	e1 f7       	brne	.-8      	; 0x3896 <rtc_gettime+0x3a>
    389e:	88 0f       	add	r24, r24
    38a0:	99 1f       	adc	r25, r25
    38a2:	28 0f       	add	r18, r24
    38a4:	39 1f       	adc	r19, r25
    38a6:	4f 70       	andi	r20, 0x0F	; 15
    38a8:	42 0f       	add	r20, r18
    38aa:	f8 01       	movw	r30, r16
    38ac:	47 83       	std	Z+7, r20	; 0x07
	rtc->min = (buf[1] & 0x0F) + (buf[1] >> 4) * 10;
    38ae:	2a 81       	ldd	r18, Y+2	; 0x02
    38b0:	82 2f       	mov	r24, r18
    38b2:	82 95       	swap	r24
    38b4:	8f 70       	andi	r24, 0x0F	; 15
    38b6:	5a e0       	ldi	r21, 0x0A	; 10
    38b8:	85 9f       	mul	r24, r21
    38ba:	c0 01       	movw	r24, r0
    38bc:	11 24       	eor	r1, r1
    38be:	2f 70       	andi	r18, 0x0F	; 15
    38c0:	28 0f       	add	r18, r24
    38c2:	26 83       	std	Z+6, r18	; 0x06
	rtc->hour = (buf[2] & 0x0F) + ((buf[2] >> 4) & 3) * 10;
    38c4:	4b 81       	ldd	r20, Y+3	; 0x03
    38c6:	84 2f       	mov	r24, r20
    38c8:	82 95       	swap	r24
    38ca:	8f 70       	andi	r24, 0x0F	; 15
    38cc:	90 e0       	ldi	r25, 0x00	; 0
    38ce:	83 70       	andi	r24, 0x03	; 3
    38d0:	90 70       	andi	r25, 0x00	; 0
    38d2:	9c 01       	movw	r18, r24
    38d4:	b3 e0       	ldi	r27, 0x03	; 3
    38d6:	22 0f       	add	r18, r18
    38d8:	33 1f       	adc	r19, r19
    38da:	ba 95       	dec	r27
    38dc:	e1 f7       	brne	.-8      	; 0x38d6 <rtc_gettime+0x7a>
    38de:	88 0f       	add	r24, r24
    38e0:	99 1f       	adc	r25, r25
    38e2:	28 0f       	add	r18, r24
    38e4:	39 1f       	adc	r19, r25
    38e6:	4f 70       	andi	r20, 0x0F	; 15
    38e8:	42 0f       	add	r20, r18
    38ea:	45 83       	std	Z+5, r20	; 0x05
	rtc->wday = (buf[3] & 0x07);
    38ec:	8c 81       	ldd	r24, Y+4	; 0x04
    38ee:	87 70       	andi	r24, 0x07	; 7
    38f0:	84 83       	std	Z+4, r24	; 0x04
	rtc->mday = (buf[4] & 0x0F) + ((buf[4] >> 4) & 3) * 10;
    38f2:	4d 81       	ldd	r20, Y+5	; 0x05
    38f4:	84 2f       	mov	r24, r20
    38f6:	82 95       	swap	r24
    38f8:	8f 70       	andi	r24, 0x0F	; 15
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	83 70       	andi	r24, 0x03	; 3
    38fe:	90 70       	andi	r25, 0x00	; 0
    3900:	9c 01       	movw	r18, r24
    3902:	73 e0       	ldi	r23, 0x03	; 3
    3904:	22 0f       	add	r18, r18
    3906:	33 1f       	adc	r19, r19
    3908:	7a 95       	dec	r23
    390a:	e1 f7       	brne	.-8      	; 0x3904 <rtc_gettime+0xa8>
    390c:	88 0f       	add	r24, r24
    390e:	99 1f       	adc	r25, r25
    3910:	28 0f       	add	r18, r24
    3912:	39 1f       	adc	r19, r25
    3914:	4f 70       	andi	r20, 0x0F	; 15
    3916:	42 0f       	add	r20, r18
    3918:	43 83       	std	Z+3, r20	; 0x03
	rtc->month = (buf[5] & 0x0F) + (buf[5] >> 4) * 10;
    391a:	2e 81       	ldd	r18, Y+6	; 0x06
    391c:	82 2f       	mov	r24, r18
    391e:	82 95       	swap	r24
    3920:	8f 70       	andi	r24, 0x0F	; 15
    3922:	85 9f       	mul	r24, r21
    3924:	c0 01       	movw	r24, r0
    3926:	11 24       	eor	r1, r1
    3928:	2f 70       	andi	r18, 0x0F	; 15
    392a:	28 0f       	add	r18, r24
    392c:	22 83       	std	Z+2, r18	; 0x02
	rtc->year = 2000 + (buf[6] & 0x0F) + (buf[6] >> 4) * 10;
    392e:	2f 81       	ldd	r18, Y+7	; 0x07
    3930:	82 2f       	mov	r24, r18
    3932:	90 e0       	ldi	r25, 0x00	; 0
    3934:	8f 70       	andi	r24, 0x0F	; 15
    3936:	90 70       	andi	r25, 0x00	; 0
    3938:	80 53       	subi	r24, 0x30	; 48
    393a:	98 4f       	sbci	r25, 0xF8	; 248
    393c:	22 95       	swap	r18
    393e:	2f 70       	andi	r18, 0x0F	; 15
    3940:	25 9f       	mul	r18, r21
    3942:	90 01       	movw	r18, r0
    3944:	11 24       	eor	r1, r1
    3946:	82 0f       	add	r24, r18
    3948:	93 1f       	adc	r25, r19
    394a:	91 83       	std	Z+1, r25	; 0x01
    394c:	80 83       	st	Z, r24
    394e:	21 e0       	ldi	r18, 0x01	; 1
    3950:	30 e0       	ldi	r19, 0x00	; 0
/*   rtc->month = 5;*/
/*   rtc->year = 2006;*/


   return TRUE;
}
    3952:	c9 01       	movw	r24, r18
    3954:	27 96       	adiw	r28, 0x07	; 7
    3956:	e4 e0       	ldi	r30, 0x04	; 4
    3958:	0c 94 a0 2d 	jmp	0x5b40	; 0x5b40 <__epilogue_restores__+0x1c>

0000395c <RTC_write>:
	char dev,		/* Device address */
	uint8_t adr,		/* Write start address */
	uint8_t cnt,		/* Write byte count */
	uint8_t *buff		/* Write data buffer */
)
{
    395c:	a0 e0       	ldi	r26, 0x00	; 0
    395e:	b0 e0       	ldi	r27, 0x00	; 0
    3960:	e4 eb       	ldi	r30, 0xB4	; 180
    3962:	fc e1       	ldi	r31, 0x1C	; 28
    3964:	0c 94 81 2d 	jmp	0x5b02	; 0x5b02 <__prologue_saves__+0x16>
    3968:	08 2f       	mov	r16, r24
    396a:	f6 2e       	mov	r15, r22
    396c:	14 2f       	mov	r17, r20
    396e:	e2 2e       	mov	r14, r18
    3970:	d3 2e       	mov	r13, r19
	uint8_t *wbuff = buff;
	
	if (!cnt) return FALSE;	
    3972:	44 23       	and	r20, r20
    3974:	39 f1       	breq	.+78     	; 0x39c4 <RTC_write+0x68>
	/*
	 * Start in master write mode to transmit data to slave 
	 */
	if (!(TWI_start())) return FALSE;	/* send start condition */	
    3976:	0e 94 ba 26 	call	0x4d74	; 0x4d74 <TWI_start>
    397a:	89 2b       	or	r24, r25
    397c:	19 f1       	breq	.+70     	; 0x39c4 <RTC_write+0x68>

	TWI_send(dev | TW_WRITE);		/* Select device dev */
    397e:	80 2f       	mov	r24, r16
    3980:	0e 94 d6 26 	call	0x4dac	; 0x4dac <TWI_send>
	if (!(TW_STATUS == TW_MT_SLA_ACK)) return FALSE;	/* Device could not be selected */
    3984:	80 91 b9 00 	lds	r24, 0x00B9
    3988:	88 7f       	andi	r24, 0xF8	; 248
    398a:	88 31       	cpi	r24, 0x18	; 24
    398c:	d9 f4       	brne	.+54     	; 0x39c4 <RTC_write+0x68>

	/* Send address for writing start position to slave device */	
	TWI_send(adr);
    398e:	8f 2d       	mov	r24, r15
    3990:	0e 94 d6 26 	call	0x4dac	; 0x4dac <TWI_send>
	if (!(TW_STATUS == TW_MT_DATA_ACK)) return FALSE;	/* No ACK from device return */
    3994:	80 91 b9 00 	lds	r24, 0x00B9
    3998:	88 7f       	andi	r24, 0xF8	; 248
    399a:	88 32       	cpi	r24, 0x28	; 40
    399c:	99 f4       	brne	.+38     	; 0x39c4 <RTC_write+0x68>
    399e:	8e 2d       	mov	r24, r14
    39a0:	9d 2d       	mov	r25, r13
    39a2:	9c 01       	movw	r18, r24
    39a4:	e9 01       	movw	r28, r18

	/* send data */
	do {
		TWI_send(*wbuff++);
    39a6:	89 91       	ld	r24, Y+
    39a8:	0e 94 d6 26 	call	0x4dac	; 0x4dac <TWI_send>
		if (!(TW_STATUS == TW_MT_DATA_ACK)) return FALSE;	/* No ACK from device return */
    39ac:	80 91 b9 00 	lds	r24, 0x00B9
    39b0:	88 7f       	andi	r24, 0xF8	; 248
    39b2:	88 32       	cpi	r24, 0x28	; 40
    39b4:	39 f4       	brne	.+14     	; 0x39c4 <RTC_write+0x68>
	} while(--cnt);
    39b6:	11 50       	subi	r17, 0x01	; 1
    39b8:	b1 f7       	brne	.-20     	; 0x39a6 <RTC_write+0x4a>

	/* send stop */
	TWI_stop();
    39ba:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <TWI_stop>
    39be:	21 e0       	ldi	r18, 0x01	; 1
    39c0:	30 e0       	ldi	r19, 0x00	; 0
    39c2:	02 c0       	rjmp	.+4      	; 0x39c8 <RTC_write+0x6c>

	return TRUE;
    39c4:	20 e0       	ldi	r18, 0x00	; 0
    39c6:	30 e0       	ldi	r19, 0x00	; 0
}
    39c8:	c9 01       	movw	r24, r18
    39ca:	cd b7       	in	r28, 0x3d	; 61
    39cc:	de b7       	in	r29, 0x3e	; 62
    39ce:	e7 e0       	ldi	r30, 0x07	; 7
    39d0:	0c 94 9d 2d 	jmp	0x5b3a	; 0x5b3a <__epilogue_restores__+0x16>

000039d4 <rtc_settime>:

   return TRUE;
}

BOOL rtc_settime (const RTC *rtc)
{
    39d4:	a7 e0       	ldi	r26, 0x07	; 7
    39d6:	b0 e0       	ldi	r27, 0x00	; 0
    39d8:	e0 ef       	ldi	r30, 0xF0	; 240
    39da:	fc e1       	ldi	r31, 0x1C	; 28
    39dc:	0c 94 86 2d 	jmp	0x5b0c	; 0x5b0c <__prologue_saves__+0x20>
    39e0:	fc 01       	movw	r30, r24
	uint8_t buf[7];

	buf[0] = ((rtc->sec / 10) * 16 + rtc->sec % 10) & 0x7F;
    39e2:	47 81       	ldd	r20, Z+7	; 0x07
    39e4:	84 2f       	mov	r24, r20
    39e6:	6a e0       	ldi	r22, 0x0A	; 10
    39e8:	0e 94 34 2d 	call	0x5a68	; 0x5a68 <__udivmodqi4>
    39ec:	28 2f       	mov	r18, r24
    39ee:	30 e0       	ldi	r19, 0x00	; 0
    39f0:	54 e0       	ldi	r21, 0x04	; 4
    39f2:	22 0f       	add	r18, r18
    39f4:	33 1f       	adc	r19, r19
    39f6:	5a 95       	dec	r21
    39f8:	e1 f7       	brne	.-8      	; 0x39f2 <rtc_settime+0x1e>
    39fa:	84 2f       	mov	r24, r20
    39fc:	0e 94 34 2d 	call	0x5a68	; 0x5a68 <__udivmodqi4>
    3a00:	92 0f       	add	r25, r18
    3a02:	9f 77       	andi	r25, 0x7F	; 127
    3a04:	99 83       	std	Y+1, r25	; 0x01
	buf[1] = ((rtc->min / 10) * 16 + rtc->min % 10) & 0xF7;
    3a06:	46 81       	ldd	r20, Z+6	; 0x06
    3a08:	84 2f       	mov	r24, r20
    3a0a:	0e 94 34 2d 	call	0x5a68	; 0x5a68 <__udivmodqi4>
    3a0e:	28 2f       	mov	r18, r24
    3a10:	30 e0       	ldi	r19, 0x00	; 0
    3a12:	94 e0       	ldi	r25, 0x04	; 4
    3a14:	22 0f       	add	r18, r18
    3a16:	33 1f       	adc	r19, r19
    3a18:	9a 95       	dec	r25
    3a1a:	e1 f7       	brne	.-8      	; 0x3a14 <rtc_settime+0x40>
    3a1c:	84 2f       	mov	r24, r20
    3a1e:	0e 94 34 2d 	call	0x5a68	; 0x5a68 <__udivmodqi4>
    3a22:	92 0f       	add	r25, r18
    3a24:	97 7f       	andi	r25, 0xF7	; 247
    3a26:	9a 83       	std	Y+2, r25	; 0x02
	buf[2] = ((rtc->hour / 10) * 16 + rtc->hour % 10) & 0x3F;
    3a28:	45 81       	ldd	r20, Z+5	; 0x05
    3a2a:	84 2f       	mov	r24, r20
    3a2c:	0e 94 34 2d 	call	0x5a68	; 0x5a68 <__udivmodqi4>
    3a30:	28 2f       	mov	r18, r24
    3a32:	30 e0       	ldi	r19, 0x00	; 0
    3a34:	84 e0       	ldi	r24, 0x04	; 4
    3a36:	22 0f       	add	r18, r18
    3a38:	33 1f       	adc	r19, r19
    3a3a:	8a 95       	dec	r24
    3a3c:	e1 f7       	brne	.-8      	; 0x3a36 <rtc_settime+0x62>
    3a3e:	84 2f       	mov	r24, r20
    3a40:	0e 94 34 2d 	call	0x5a68	; 0x5a68 <__udivmodqi4>
    3a44:	92 0f       	add	r25, r18
    3a46:	9f 73       	andi	r25, 0x3F	; 63
    3a48:	9b 83       	std	Y+3, r25	; 0x03
	buf[3] = rtc->wday & 7;
    3a4a:	84 81       	ldd	r24, Z+4	; 0x04
    3a4c:	87 70       	andi	r24, 0x07	; 7
    3a4e:	8c 83       	std	Y+4, r24	; 0x04
	buf[4] = ((rtc->mday / 10) * 16 + rtc->mday % 10) & 0x3F;
    3a50:	43 81       	ldd	r20, Z+3	; 0x03
    3a52:	84 2f       	mov	r24, r20
    3a54:	0e 94 34 2d 	call	0x5a68	; 0x5a68 <__udivmodqi4>
    3a58:	28 2f       	mov	r18, r24
    3a5a:	30 e0       	ldi	r19, 0x00	; 0
    3a5c:	b4 e0       	ldi	r27, 0x04	; 4
    3a5e:	22 0f       	add	r18, r18
    3a60:	33 1f       	adc	r19, r19
    3a62:	ba 95       	dec	r27
    3a64:	e1 f7       	brne	.-8      	; 0x3a5e <rtc_settime+0x8a>
    3a66:	84 2f       	mov	r24, r20
    3a68:	0e 94 34 2d 	call	0x5a68	; 0x5a68 <__udivmodqi4>
    3a6c:	92 0f       	add	r25, r18
    3a6e:	9f 73       	andi	r25, 0x3F	; 63
    3a70:	9d 83       	std	Y+5, r25	; 0x05
	buf[5] = ((rtc->month / 10) * 16 + rtc->month % 10) & 0x1F;
    3a72:	42 81       	ldd	r20, Z+2	; 0x02
    3a74:	84 2f       	mov	r24, r20
    3a76:	0e 94 34 2d 	call	0x5a68	; 0x5a68 <__udivmodqi4>
    3a7a:	28 2f       	mov	r18, r24
    3a7c:	30 e0       	ldi	r19, 0x00	; 0
    3a7e:	a4 e0       	ldi	r26, 0x04	; 4
    3a80:	22 0f       	add	r18, r18
    3a82:	33 1f       	adc	r19, r19
    3a84:	aa 95       	dec	r26
    3a86:	e1 f7       	brne	.-8      	; 0x3a80 <rtc_settime+0xac>
    3a88:	84 2f       	mov	r24, r20
    3a8a:	0e 94 34 2d 	call	0x5a68	; 0x5a68 <__udivmodqi4>
    3a8e:	92 0f       	add	r25, r18
    3a90:	9f 71       	andi	r25, 0x1F	; 31
    3a92:	9e 83       	std	Y+6, r25	; 0x06
	buf[6] = ((rtc->year - 2000) / 10) * 16 + (rtc->year - 2000) % 10;
    3a94:	01 90       	ld	r0, Z+
    3a96:	f0 81       	ld	r31, Z
    3a98:	e0 2d       	mov	r30, r0
    3a9a:	e0 5d       	subi	r30, 0xD0	; 208
    3a9c:	f7 40       	sbci	r31, 0x07	; 7
    3a9e:	cf 01       	movw	r24, r30
    3aa0:	6a e0       	ldi	r22, 0x0A	; 10
    3aa2:	70 e0       	ldi	r23, 0x00	; 0
    3aa4:	0e 94 40 2d 	call	0x5a80	; 0x5a80 <__udivmodhi4>
    3aa8:	9b 01       	movw	r18, r22
    3aaa:	74 e0       	ldi	r23, 0x04	; 4
    3aac:	22 0f       	add	r18, r18
    3aae:	33 1f       	adc	r19, r19
    3ab0:	7a 95       	dec	r23
    3ab2:	e1 f7       	brne	.-8      	; 0x3aac <rtc_settime+0xd8>
    3ab4:	cf 01       	movw	r24, r30
    3ab6:	6a e0       	ldi	r22, 0x0A	; 10
    3ab8:	70 e0       	ldi	r23, 0x00	; 0
    3aba:	0e 94 40 2d 	call	0x5a80	; 0x5a80 <__udivmodhi4>
    3abe:	82 0f       	add	r24, r18
    3ac0:	8f 83       	std	Y+7, r24	; 0x07

	return RTC_write(0b11010000, 0x01, 7, buf);
    3ac2:	80 ed       	ldi	r24, 0xD0	; 208
    3ac4:	61 e0       	ldi	r22, 0x01	; 1
    3ac6:	47 e0       	ldi	r20, 0x07	; 7
    3ac8:	9e 01       	movw	r18, r28
    3aca:	2f 5f       	subi	r18, 0xFF	; 255
    3acc:	3f 4f       	sbci	r19, 0xFF	; 255
    3ace:	0e 94 ae 1c 	call	0x395c	; 0x395c <RTC_write>
}
    3ad2:	27 96       	adiw	r28, 0x07	; 7
    3ad4:	e2 e0       	ldi	r30, 0x02	; 2
    3ad6:	0c 94 a2 2d 	jmp	0x5b44	; 0x5b44 <__epilogue_restores__+0x20>

00003ada <rtc_clearHaltBit>:
#include <string.h>
#include "rtc.h"
#include "../twi/twi.h"

BOOL rtc_clearHaltBit(void)
{
    3ada:	a1 e0       	ldi	r26, 0x01	; 1
    3adc:	b0 e0       	ldi	r27, 0x00	; 0
    3ade:	e3 e7       	ldi	r30, 0x73	; 115
    3ae0:	fd e1       	ldi	r31, 0x1D	; 29
    3ae2:	0c 94 86 2d 	jmp	0x5b0c	; 0x5b0c <__prologue_saves__+0x20>
	uint8_t buf[1];
	buf[0] = 63;
    3ae6:	8f e3       	ldi	r24, 0x3F	; 63
    3ae8:	89 83       	std	Y+1, r24	; 0x01
	return RTC_write(0b11010000, 0x0C, 1, buf);
    3aea:	80 ed       	ldi	r24, 0xD0	; 208
    3aec:	6c e0       	ldi	r22, 0x0C	; 12
    3aee:	41 e0       	ldi	r20, 0x01	; 1
    3af0:	9e 01       	movw	r18, r28
    3af2:	2f 5f       	subi	r18, 0xFF	; 255
    3af4:	3f 4f       	sbci	r19, 0xFF	; 255
    3af6:	0e 94 ae 1c 	call	0x395c	; 0x395c <RTC_write>
}
    3afa:	21 96       	adiw	r28, 0x01	; 1
    3afc:	e2 e0       	ldi	r30, 0x02	; 2
    3afe:	0c 94 a2 2d 	jmp	0x5b44	; 0x5b44 <__epilogue_restores__+0x20>

00003b02 <rtc_init>:
}

BOOL rtc_init (void)
{
	/* This function should also test the RTC to ensure a valid clock is returned but this is work for the future */
	rtc_clearHaltBit();	/* Before this is cleared time read from RTC is time of last system power down */
    3b02:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <rtc_clearHaltBit>

	return TRUE;
} 
    3b06:	81 e0       	ldi	r24, 0x01	; 1
    3b08:	90 e0       	ldi	r25, 0x00	; 0
    3b0a:	08 95       	ret

00003b0c <can_clear_all_mob>:
//! @param none
//!
//! @return none
//------------------------------------------------------------------------------
void can_clear_all_mob(void)
{
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    U8  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        CANPAGE = (mob_number << 4);    //! Page index
    3b0e:	89 2f       	mov	r24, r25
    3b10:	82 95       	swap	r24
    3b12:	80 7f       	andi	r24, 0xF0	; 240
    3b14:	80 93 ed 00 	sts	0x00ED, r24
    3b18:	ee ee       	ldi	r30, 0xEE	; 238
    3b1a:	f0 e0       	ldi	r31, 0x00	; 0
        Can_clear_mob();                //! All MOb Registers=0
    3b1c:	11 92       	st	Z+, r1
    3b1e:	e8 3f       	cpi	r30, 0xF8	; 248
    3b20:	f1 05       	cpc	r31, r1
    3b22:	e1 f7       	brne	.-8      	; 0x3b1c <can_clear_all_mob+0x10>
U8  mob_number;
/*
    U8  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    3b24:	9f 5f       	subi	r25, 0xFF	; 255
    3b26:	9f 30       	cpi	r25, 0x0F	; 15
    3b28:	91 f7       	brne	.-28     	; 0x3b0e <can_clear_all_mob+0x2>
        {
            CANMSG = 0;                 //! MOb data FIFO
        }
*/
    }
}
    3b2a:	08 95       	ret

00003b2c <can_get_mob_free>:
//------------------------------------------------------------------------------
U8 can_get_mob_free(void)
{
    U8 mob_number, page_saved;

    page_saved = CANPAGE;
    3b2c:	20 91 ed 00 	lds	r18, 0x00ED
    3b30:	90 e0       	ldi	r25, 0x00	; 0
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        Can_set_mob(mob_number);
    3b32:	89 2f       	mov	r24, r25
    3b34:	82 95       	swap	r24
    3b36:	80 7f       	andi	r24, 0xF0	; 240
    3b38:	80 93 ed 00 	sts	0x00ED, r24
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
    3b3c:	80 91 ef 00 	lds	r24, 0x00EF
    3b40:	80 7c       	andi	r24, 0xC0	; 192
    3b42:	19 f4       	brne	.+6      	; 0x3b4a <can_get_mob_free+0x1e>
        {
            CANPAGE = page_saved;
    3b44:	20 93 ed 00 	sts	0x00ED, r18
    3b48:	06 c0       	rjmp	.+12     	; 0x3b56 <can_get_mob_free+0x2a>
U8 can_get_mob_free(void)
{
    U8 mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    3b4a:	9f 5f       	subi	r25, 0xFF	; 255
    3b4c:	9f 30       	cpi	r25, 0x0F	; 15
    3b4e:	89 f7       	brne	.-30     	; 0x3b32 <can_get_mob_free+0x6>
        {
            CANPAGE = page_saved;
            return (mob_number);
        }
    }
    CANPAGE = page_saved;
    3b50:	20 93 ed 00 	sts	0x00ED, r18
    3b54:	9f ef       	ldi	r25, 0xFF	; 255
    return (NO_MOB);
}
    3b56:	89 2f       	mov	r24, r25
    3b58:	08 95       	ret

00003b5a <can_get_mob_status>:
U8 can_get_mob_status(void)
{
    U8 mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
    3b5a:	80 91 ef 00 	lds	r24, 0x00EF
    3b5e:	80 7c       	andi	r24, 0xC0	; 192
    3b60:	11 f4       	brne	.+4      	; 0x3b66 <can_get_mob_status+0xc>
    3b62:	8f ef       	ldi	r24, 0xFF	; 255
    3b64:	08 95       	ret

    canstmob_copy = CANSTMOB; // Copy for test integrity
    3b66:	90 91 ee 00 	lds	r25, 0x00EE

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
    3b6a:	89 2f       	mov	r24, r25
    3b6c:	80 7e       	andi	r24, 0xE0	; 224
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
    3b6e:	80 32       	cpi	r24, 0x20	; 32
    3b70:	31 f0       	breq	.+12     	; 0x3b7e <can_get_mob_status+0x24>
    3b72:	80 34       	cpi	r24, 0x40	; 64
    3b74:	21 f0       	breq	.+8      	; 0x3b7e <can_get_mob_status+0x24>
    3b76:	80 3a       	cpi	r24, 0xA0	; 160
    3b78:	11 f0       	breq	.+4      	; 0x3b7e <can_get_mob_status+0x24>
    // - MOb Status bit_0 = MOB_ACK_ERROR
    // - MOb Status bit_1 = MOB_FORM_ERROR
    // - MOb Status bit_2 = MOB_CRC_ERROR
    // - MOb Status bit_3 = MOB_STUFF_ERROR
    // - MOb Status bit_4 = MOB_BIT_ERROR
    mob_status = canstmob_copy & ERR_MOB_MSK;
    3b7a:	89 2f       	mov	r24, r25
    3b7c:	8f 71       	andi	r24, 0x1F	; 31
    if (mob_status != 0) { return(mob_status); }

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
}
    3b7e:	08 95       	ret

00003b80 <can_get_data>:
//! @param CAN message data address.
//!
//! @return none.
//------------------------------------------------------------------------------
void can_get_data(U8* p_can_message_data)
{
    3b80:	ac 01       	movw	r20, r24
    3b82:	20 e0       	ldi	r18, 0x00	; 0
    3b84:	06 c0       	rjmp	.+12     	; 0x3b92 <can_get_data+0x12>
    U8 data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
    {
        *(p_can_message_data + data_index) = CANMSG;
    3b86:	80 91 fa 00 	lds	r24, 0x00FA
    3b8a:	e4 0f       	add	r30, r20
    3b8c:	f5 1f       	adc	r31, r21
    3b8e:	80 83       	st	Z, r24
//------------------------------------------------------------------------------
void can_get_data(U8* p_can_message_data)
{
    U8 data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
    3b90:	2f 5f       	subi	r18, 0xFF	; 255
    3b92:	80 91 ef 00 	lds	r24, 0x00EF
    3b96:	e2 2f       	mov	r30, r18
    3b98:	f0 e0       	ldi	r31, 0x00	; 0
    3b9a:	90 e0       	ldi	r25, 0x00	; 0
    3b9c:	8f 70       	andi	r24, 0x0F	; 15
    3b9e:	90 70       	andi	r25, 0x00	; 0
    3ba0:	e8 17       	cp	r30, r24
    3ba2:	f9 07       	cpc	r31, r25
    3ba4:	84 f3       	brlt	.-32     	; 0x3b86 <can_get_data+0x6>
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
    3ba6:	08 95       	ret

00003ba8 <can_auto_baudrate>:
//! @return Baudrate Status
//!         ==0: research of bit timing configuration failed
//!         ==1: baudrate performed
//------------------------------------------------------------------------------
U8 can_auto_baudrate (U8 mode)
{
    3ba8:	9f 92       	push	r9
    3baa:	af 92       	push	r10
    3bac:	bf 92       	push	r11
    3bae:	cf 92       	push	r12
    3bb0:	df 92       	push	r13
    3bb2:	ef 92       	push	r14
    3bb4:	ff 92       	push	r15
    3bb6:	0f 93       	push	r16
    3bb8:	1f 93       	push	r17
    conf_index = 0;
    bt_not_found = 1;

    //! --- Init segment variables with MIN values if mode=0
    //!     or init segment variables with CANBTx if mode=1
    if (mode==0)
    3bba:	88 23       	and	r24, r24
    3bbc:	61 f4       	brne	.+24     	; 0x3bd6 <can_auto_baudrate+0x2e>
    3bbe:	dd 24       	eor	r13, r13
    3bc0:	d3 94       	inc	r13
    3bc2:	b3 e0       	ldi	r27, 0x03	; 3
    3bc4:	a8 e0       	ldi	r26, 0x08	; 8
    3bc6:	62 e0       	ldi	r22, 0x02	; 2
    3bc8:	72 e0       	ldi	r23, 0x02	; 2
    3bca:	50 e0       	ldi	r21, 0x00	; 0
    3bcc:	11 e0       	ldi	r17, 0x01	; 1
    3bce:	40 e0       	ldi	r20, 0x00	; 0
    3bd0:	ff 24       	eor	r15, r15
    3bd2:	f3 94       	inc	r15
    3bd4:	54 c0       	rjmp	.+168    	; 0x3c7e <can_auto_baudrate+0xd6>
        try_conf = 1;       //! Try this configuration
        wait_for_rx = 1;    //! Enable "while (wait_for_rx ..." loop
    }
    else //! mode = 1
    {
        brp  = Max ((((CANBT1 &  BRP_MSK) >> 1) +1) , BRP_MIN );
    3bd6:	80 91 e2 00 	lds	r24, 0x00E2
    3bda:	8e 77       	andi	r24, 0x7E	; 126
    3bdc:	19 f4       	brne	.+6      	; 0x3be4 <can_auto_baudrate+0x3c>
    3bde:	dd 24       	eor	r13, r13
    3be0:	d3 94       	inc	r13
    3be2:	09 c0       	rjmp	.+18     	; 0x3bf6 <can_auto_baudrate+0x4e>
    3be4:	80 91 e2 00 	lds	r24, 0x00E2
    3be8:	90 e0       	ldi	r25, 0x00	; 0
    3bea:	8e 77       	andi	r24, 0x7E	; 126
    3bec:	90 70       	andi	r25, 0x00	; 0
    3bee:	95 95       	asr	r25
    3bf0:	87 95       	ror	r24
    3bf2:	d8 2e       	mov	r13, r24
    3bf4:	d3 94       	inc	r13
        prs  = Max ((((CANBT2 &  PRS_MSK) >> 1) +1) , PRS_MIN );
    3bf6:	80 91 e3 00 	lds	r24, 0x00E3
    3bfa:	8e 70       	andi	r24, 0x0E	; 14
    3bfc:	11 f4       	brne	.+4      	; 0x3c02 <can_auto_baudrate+0x5a>
    3bfe:	b1 e0       	ldi	r27, 0x01	; 1
    3c00:	09 c0       	rjmp	.+18     	; 0x3c14 <can_auto_baudrate+0x6c>
    3c02:	80 91 e3 00 	lds	r24, 0x00E3
    3c06:	90 e0       	ldi	r25, 0x00	; 0
    3c08:	8e 70       	andi	r24, 0x0E	; 14
    3c0a:	90 70       	andi	r25, 0x00	; 0
    3c0c:	95 95       	asr	r25
    3c0e:	87 95       	ror	r24
    3c10:	b8 2f       	mov	r27, r24
    3c12:	bf 5f       	subi	r27, 0xFF	; 255
        phs1 = Max ((((CANBT3 & PHS1_MSK) >> 1) +1) , PHS1_MIN);
    3c14:	80 91 e4 00 	lds	r24, 0x00E4
    3c18:	8e 70       	andi	r24, 0x0E	; 14
    3c1a:	83 30       	cpi	r24, 0x03	; 3
    3c1c:	10 f4       	brcc	.+4      	; 0x3c22 <can_auto_baudrate+0x7a>
    3c1e:	62 e0       	ldi	r22, 0x02	; 2
    3c20:	09 c0       	rjmp	.+18     	; 0x3c34 <can_auto_baudrate+0x8c>
    3c22:	80 91 e4 00 	lds	r24, 0x00E4
    3c26:	90 e0       	ldi	r25, 0x00	; 0
    3c28:	8e 70       	andi	r24, 0x0E	; 14
    3c2a:	90 70       	andi	r25, 0x00	; 0
    3c2c:	95 95       	asr	r25
    3c2e:	87 95       	ror	r24
    3c30:	68 2f       	mov	r22, r24
    3c32:	6f 5f       	subi	r22, 0xFF	; 255
        phs2 = Max ((((CANBT3 & PHS2_MSK) >> 4) +1) , PHS2_MIN);
    3c34:	80 91 e4 00 	lds	r24, 0x00E4
    3c38:	80 77       	andi	r24, 0x70	; 112
    3c3a:	81 31       	cpi	r24, 0x11	; 17
    3c3c:	10 f4       	brcc	.+4      	; 0x3c42 <can_auto_baudrate+0x9a>
    3c3e:	72 e0       	ldi	r23, 0x02	; 2
    3c40:	0c c0       	rjmp	.+24     	; 0x3c5a <can_auto_baudrate+0xb2>
    3c42:	80 91 e4 00 	lds	r24, 0x00E4
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	80 77       	andi	r24, 0x70	; 112
    3c4a:	90 70       	andi	r25, 0x00	; 0
    3c4c:	24 e0       	ldi	r18, 0x04	; 4
    3c4e:	95 95       	asr	r25
    3c50:	87 95       	ror	r24
    3c52:	2a 95       	dec	r18
    3c54:	e1 f7       	brne	.-8      	; 0x3c4e <can_auto_baudrate+0xa6>
    3c56:	78 2f       	mov	r23, r24
    3c58:	7f 5f       	subi	r23, 0xFF	; 255
        ntq  = Max ((prs + phs1 + phs2 + 1) , NTQ_MIN);
    3c5a:	8b 2f       	mov	r24, r27
    3c5c:	90 e0       	ldi	r25, 0x00	; 0
    3c5e:	86 0f       	add	r24, r22
    3c60:	91 1d       	adc	r25, r1
    3c62:	87 0f       	add	r24, r23
    3c64:	91 1d       	adc	r25, r1
    3c66:	08 97       	sbiw	r24, 0x08	; 8
    3c68:	14 f4       	brge	.+4      	; 0x3c6e <can_auto_baudrate+0xc6>
    3c6a:	a8 e0       	ldi	r26, 0x08	; 8
    3c6c:	04 c0       	rjmp	.+8      	; 0x3c76 <can_auto_baudrate+0xce>
    3c6e:	ab 2f       	mov	r26, r27
    3c70:	af 5f       	subi	r26, 0xFF	; 255
    3c72:	a6 0f       	add	r26, r22
    3c74:	a7 0f       	add	r26, r23
    3c76:	51 e0       	ldi	r21, 0x01	; 1
    3c78:	10 e0       	ldi	r17, 0x00	; 0
    3c7a:	41 e0       	ldi	r20, 0x01	; 1
    3c7c:	ff 24       	eor	r15, r15
    3c7e:	90 e0       	ldi	r25, 0x00	; 0
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
    {
        Can_set_mob(u8_temp0);  //! Page index
    3c80:	89 2f       	mov	r24, r25
    3c82:	82 95       	swap	r24
    3c84:	80 7f       	andi	r24, 0xF0	; 240
    3c86:	80 93 ed 00 	sts	0x00ED, r24
    3c8a:	ee ee       	ldi	r30, 0xEE	; 238
    3c8c:	f0 e0       	ldi	r31, 0x00	; 0
        Can_clear_mob();        //! All MOb Registers = 0x00
    3c8e:	11 92       	st	Z+, r1
    3c90:	e8 3f       	cpi	r30, 0xF8	; 248
    3c92:	f1 05       	cpc	r31, r1
    3c94:	e1 f7       	brne	.-8      	; 0x3c8e <can_auto_baudrate+0xe6>
        try_conf = 0;       //! Look for the next configuration
        wait_for_rx = 0;    //! Skip "while (wait_for_rx ..." loop
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
    3c96:	9f 5f       	subi	r25, 0xFF	; 255
    3c98:	9f 30       	cpi	r25, 0x0F	; 15
    3c9a:	91 f7       	brne	.-28     	; 0x3c80 <can_auto_baudrate+0xd8>
    3c9c:	ee 24       	eor	r14, r14
    3c9e:	e0 e0       	ldi	r30, 0x00	; 0
    3ca0:	f0 e0       	ldi	r31, 0x00	; 0
    3ca2:	cc 24       	eor	r12, r12
            CANTCON = (U8)(conf_index >> 3);

            //! --- MOb configuration
            Can_set_mob(MOB_0);                 //! Use MOb-0
            CANSTMOB = 0;                       //! Reset MOb status (undone by "Can_reset()")
            CANCDMOB = (MOB_Rx_ENA  << CONMOB); //! MOb 0 in receive mode
    3ca4:	90 e8       	ldi	r25, 0x80	; 128
    3ca6:	a9 2e       	mov	r10, r25

            //! CAN controller configuration
            CANGCON = (1<<LISTEN) | (1<<ENASTB);//! Enable CAN controller in "listen" mode
    3ca8:	8a e0       	ldi	r24, 0x0A	; 10
    3caa:	98 2e       	mov	r9, r24
            while ((CANGSTA & (1<<ENFG)) == 0); //! Wait for Enable OK
            CANGIT = 0xFF;                      //! Reset General errors and OVRTIM flag
    3cac:	bb 24       	eor	r11, r11
    3cae:	ba 94       	dec	r11
        Can_clear_mob();        //! All MOb Registers = 0x00
    }

    while (bt_not_found == 1)
    {
        if (try_conf == 1)
    3cb0:	81 e0       	ldi	r24, 0x01	; 1
    3cb2:	f8 16       	cp	r15, r24
    3cb4:	09 f0       	breq	.+2      	; 0x3cb8 <can_auto_baudrate+0x110>
    3cb6:	43 c0       	rjmp	.+134    	; 0x3d3e <can_auto_baudrate+0x196>
        {
            Can_reset();
    3cb8:	f0 92 d8 00 	sts	0x00D8, r15
            conf_index++;
    3cbc:	31 96       	adiw	r30, 0x01	; 1
            ovrtim_flag=0;

            //! --- CANBTx registers update (sjw = phs2/2, 3 sample points)
            CANBT1 = ((brp-1) << BRP);
    3cbe:	8d 2d       	mov	r24, r13
    3cc0:	81 50       	subi	r24, 0x01	; 1
    3cc2:	88 0f       	add	r24, r24
    3cc4:	80 93 e2 00 	sts	0x00E2, r24
            CANBT2 = (((phs2 >> 1)-1) << SJW) |((prs-1) << PRS);
    3cc8:	27 2f       	mov	r18, r23
    3cca:	26 95       	lsr	r18
    3ccc:	30 e0       	ldi	r19, 0x00	; 0
    3cce:	21 50       	subi	r18, 0x01	; 1
    3cd0:	30 40       	sbci	r19, 0x00	; 0
    3cd2:	05 e0       	ldi	r16, 0x05	; 5
    3cd4:	22 0f       	add	r18, r18
    3cd6:	33 1f       	adc	r19, r19
    3cd8:	0a 95       	dec	r16
    3cda:	e1 f7       	brne	.-8      	; 0x3cd4 <can_auto_baudrate+0x12c>
    3cdc:	8b 2f       	mov	r24, r27
    3cde:	90 e0       	ldi	r25, 0x00	; 0
    3ce0:	01 97       	sbiw	r24, 0x01	; 1
    3ce2:	88 0f       	add	r24, r24
    3ce4:	99 1f       	adc	r25, r25
    3ce6:	28 2b       	or	r18, r24
    3ce8:	20 93 e3 00 	sts	0x00E3, r18
            CANBT3 = (((phs2-1) << PHS2) | ((phs1-1) << PHS1) | (1<<SMP));
    3cec:	27 2f       	mov	r18, r23
    3cee:	30 e0       	ldi	r19, 0x00	; 0
    3cf0:	21 50       	subi	r18, 0x01	; 1
    3cf2:	30 40       	sbci	r19, 0x00	; 0
    3cf4:	04 e0       	ldi	r16, 0x04	; 4
    3cf6:	22 0f       	add	r18, r18
    3cf8:	33 1f       	adc	r19, r19
    3cfa:	0a 95       	dec	r16
    3cfc:	e1 f7       	brne	.-8      	; 0x3cf6 <can_auto_baudrate+0x14e>
    3cfe:	86 2f       	mov	r24, r22
    3d00:	90 e0       	ldi	r25, 0x00	; 0
    3d02:	01 97       	sbiw	r24, 0x01	; 1
    3d04:	88 0f       	add	r24, r24
    3d06:	99 1f       	adc	r25, r25
    3d08:	28 2b       	or	r18, r24
    3d0a:	21 60       	ori	r18, 0x01	; 1
    3d0c:	20 93 e4 00 	sts	0x00E4, r18

            //! --- Set CAN-Timer - Used for time-out
            //!     There are 641 (0x281) possible evaluations. The first one provides the faster
            //!         the faster bit timing, the last one gives the slower. It is necessary to
            //!         modulate the time-out versus bit timing (0x281>>3=0x50, matching an U8).
            CANTCON = (U8)(conf_index >> 3);
    3d10:	cf 01       	movw	r24, r30
    3d12:	23 e0       	ldi	r18, 0x03	; 3
    3d14:	96 95       	lsr	r25
    3d16:	87 95       	ror	r24
    3d18:	2a 95       	dec	r18
    3d1a:	e1 f7       	brne	.-8      	; 0x3d14 <can_auto_baudrate+0x16c>
    3d1c:	80 93 e5 00 	sts	0x00E5, r24

            //! --- MOb configuration
            Can_set_mob(MOB_0);                 //! Use MOb-0
    3d20:	10 92 ed 00 	sts	0x00ED, r1
            CANSTMOB = 0;                       //! Reset MOb status (undone by "Can_reset()")
    3d24:	10 92 ee 00 	sts	0x00EE, r1
            CANCDMOB = (MOB_Rx_ENA  << CONMOB); //! MOb 0 in receive mode
    3d28:	a0 92 ef 00 	sts	0x00EF, r10

            //! CAN controller configuration
            CANGCON = (1<<LISTEN) | (1<<ENASTB);//! Enable CAN controller in "listen" mode
    3d2c:	90 92 d8 00 	sts	0x00D8, r9
            while ((CANGSTA & (1<<ENFG)) == 0); //! Wait for Enable OK
    3d30:	80 91 d9 00 	lds	r24, 0x00D9
    3d34:	82 ff       	sbrs	r24, 2
    3d36:	fc cf       	rjmp	.-8      	; 0x3d30 <can_auto_baudrate+0x188>
            CANGIT = 0xFF;                      //! Reset General errors and OVRTIM flag
    3d38:	b0 92 da 00 	sts	0x00DA, r11
    3d3c:	ee 24       	eor	r14, r14
    3d3e:	01 e0       	ldi	r16, 0x01	; 1
    3d40:	3a c0       	rjmp	.+116    	; 0x3db6 <can_auto_baudrate+0x20e>
        //!     Try to perform a CAN message reception in "LISTEN" mode without error and
        //!     before a time_out done by CAN-Timer.
        //!     Else gives the hand to "EVALUATE LOOP" to have a new set of bit timing.
        while (wait_for_rx == 1)
        {
            u8_temp0 = CANSTMOB;
    3d42:	80 91 ee 00 	lds	r24, 0x00EE
            //! --- RxOK received ?
            if ((u8_temp0 & (1<<RXOK)) != 0)
    3d46:	90 e0       	ldi	r25, 0x00	; 0
    3d48:	85 ff       	sbrs	r24, 5
    3d4a:	10 c0       	rjmp	.+32     	; 0x3d6c <can_auto_baudrate+0x1c4>
            {   //! --- It is the successful output of "can_auto_baudrate" function
                wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
                evaluate = 0;       //! Will skip "while (evaluate ..." loop
                bt_not_found = 0;   //! Out of "while (bt_not_found ..." loop
                bt_performed = 1;   //! Return flag = TRUE
                DISABLE_MOB;        //! Disable MOb-0
    3d4c:	80 91 ef 00 	lds	r24, 0x00EF
    3d50:	8f 73       	andi	r24, 0x3F	; 63
    3d52:	80 93 ef 00 	sts	0x00EF, r24
                CANGCON = 0x00;     //! Disable CAN controller & reset "listen" mode
    3d56:	10 92 d8 00 	sts	0x00D8, r1
                while ((CANGSTA & (1<<ENFG)) != 0); //! Wait for Disable OK
    3d5a:	80 91 d9 00 	lds	r24, 0x00D9
    3d5e:	82 fd       	sbrc	r24, 2
    3d60:	fc cf       	rjmp	.-8      	; 0x3d5a <can_auto_baudrate+0x1b2>
    3d62:	00 e0       	ldi	r16, 0x00	; 0
    3d64:	10 e0       	ldi	r17, 0x00	; 0
    3d66:	cc 24       	eor	r12, r12
    3d68:	c3 94       	inc	r12
    3d6a:	81 c0       	rjmp	.+258    	; 0x3e6e <can_auto_baudrate+0x2c6>
            }
             //! --- Else stop if any errors
             else
            {
                //! --- MOb error ?
                if ((u8_temp0 & ((1<<BERR)|(1<<SERR)|(1<<CERR)|(1<<FERR)|(1<<AERR))) !=0)
    3d6c:	8f 71       	andi	r24, 0x1F	; 31
    3d6e:	90 70       	andi	r25, 0x00	; 0
    3d70:	89 2b       	or	r24, r25
    3d72:	11 f0       	breq	.+4      	; 0x3d78 <can_auto_baudrate+0x1d0>
    3d74:	10 e0       	ldi	r17, 0x00	; 0
    3d76:	41 e0       	ldi	r20, 0x01	; 1
                {
                    evaluate = 1;       //! Will enter in "while (evaluate ..." loop
                    wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
                }

                u8_temp0 = CANGIT;
    3d78:	80 91 da 00 	lds	r24, 0x00DA

                //! --- Time_out reached ?
                if ((u8_temp0 & (1<<OVRTIM)) !=0 )
    3d7c:	28 2f       	mov	r18, r24
    3d7e:	30 e0       	ldi	r19, 0x00	; 0
    3d80:	85 ff       	sbrs	r24, 5
    3d82:	11 c0       	rjmp	.+34     	; 0x3da6 <can_auto_baudrate+0x1fe>
                {
                    if (ovrtim_flag==0)
    3d84:	ee 20       	and	r14, r14
    3d86:	41 f4       	brne	.+16     	; 0x3d98 <can_auto_baudrate+0x1f0>
                    {
                        //! --- First Time_out
                        CANGIT |= (1<<OVRTIM);  // Reset OVRTIM
    3d88:	80 91 da 00 	lds	r24, 0x00DA
    3d8c:	80 62       	ori	r24, 0x20	; 32
    3d8e:	80 93 da 00 	sts	0x00DA, r24
    3d92:	ee 24       	eor	r14, r14
    3d94:	e3 94       	inc	r14
    3d96:	07 c0       	rjmp	.+14     	; 0x3da6 <can_auto_baudrate+0x1fe>
                        ovrtim_flag++;
                    }
                    else
                    {
                        //! --- Second Time_out
                        CANGIT |= (1<<OVRTIM);  // Reset OVRTIM
    3d98:	80 91 da 00 	lds	r24, 0x00DA
    3d9c:	80 62       	ori	r24, 0x20	; 32
    3d9e:	80 93 da 00 	sts	0x00DA, r24
    3da2:	10 e0       	ldi	r17, 0x00	; 0
    3da4:	41 e0       	ldi	r20, 0x01	; 1
                        wait_for_rx = 0;        //! Out of "while (wait_for_rx ..." loop
                    }
                }

                //! --- General error ?
                if ((u8_temp0 & ((1<<SERG)|(1<<CERG)|(1<<FERG)|(1<<AERG))) !=0)
    3da6:	2f 70       	andi	r18, 0x0F	; 15
    3da8:	30 70       	andi	r19, 0x00	; 0
    3daa:	23 2b       	or	r18, r19
    3dac:	21 f0       	breq	.+8      	; 0x3db6 <can_auto_baudrate+0x20e>
    3dae:	10 e0       	ldi	r17, 0x00	; 0
    3db0:	ff 24       	eor	r15, r15
    3db2:	f3 94       	inc	r15
    3db4:	03 c0       	rjmp	.+6      	; 0x3dbc <can_auto_baudrate+0x214>
        //! --- WAIT_FOR_RX LOOP:
        //!     ================
        //!     Try to perform a CAN message reception in "LISTEN" mode without error and
        //!     before a time_out done by CAN-Timer.
        //!     Else gives the hand to "EVALUATE LOOP" to have a new set of bit timing.
        while (wait_for_rx == 1)
    3db6:	11 30       	cpi	r17, 0x01	; 1
    3db8:	21 f2       	breq	.-120    	; 0x3d42 <can_auto_baudrate+0x19a>
    3dba:	56 c0       	rjmp	.+172    	; 0x3e68 <can_auto_baudrate+0x2c0>
        //!     limit and after it is the Prescaler. During the computing high (80%)
        //!     and low (75%) limits of sampling point location are tested. SJW and
        //!     the number of sampling points are not calculated in this loop.
        while (evaluate == 1)
        {
            if (phs1_inc != 0) phs1++;
    3dbc:	51 11       	cpse	r21, r1
    3dbe:	6f 5f       	subi	r22, 0xFF	; 255
            phs1_inc = 1;

            // --- The following test takes into account the previous incrementation of phs1
            if ((phs1 > PHS1_MAX) && (phs2 >= PHS2_MAX))
    3dc0:	69 30       	cpi	r22, 0x09	; 9
    3dc2:	f8 f0       	brcs	.+62     	; 0x3e02 <can_auto_baudrate+0x25a>
    3dc4:	78 30       	cpi	r23, 0x08	; 8
    3dc6:	e8 f0       	brcs	.+58     	; 0x3e02 <can_auto_baudrate+0x25a>
            {
                phs1 = PHS1_MIN;
                phs2 = PHS2_MIN;
                phs1_inc = 0;
                if (ntq != NTQ_MAX) ntq++;
    3dc8:	a9 31       	cpi	r26, 0x19	; 25
    3dca:	11 f0       	breq	.+4      	; 0x3dd0 <can_auto_baudrate+0x228>
    3dcc:	af 5f       	subi	r26, 0xFF	; 255
    3dce:	05 c0       	rjmp	.+10     	; 0x3dda <can_auto_baudrate+0x232>
                else
                {
                    ntq = NTQ_MIN;
                    if (brp != BRP_MAX) brp++;
    3dd0:	80 e4       	ldi	r24, 0x40	; 64
    3dd2:	d8 16       	cp	r13, r24
    3dd4:	21 f0       	breq	.+8      	; 0x3dde <can_auto_baudrate+0x236>
    3dd6:	d3 94       	inc	r13
    3dd8:	a8 e0       	ldi	r26, 0x08	; 8
    3dda:	62 e0       	ldi	r22, 0x02	; 2
    3ddc:	14 c0       	rjmp	.+40     	; 0x3e06 <can_auto_baudrate+0x25e>
                    {
                        //! --- It is the failing of "can_auto_baudrate" function
                        evaluate = 0;       //! Out of "while (evaluate ..." loop
                        bt_performed = 0;   //! Return flag = FALSE
                        bt_not_found = 0;   //! Out of "while (bt_not_found ..." loop
                        DISABLE_MOB;        //! Disable MOb-0
    3dde:	80 91 ef 00 	lds	r24, 0x00EF
    3de2:	8f 73       	andi	r24, 0x3F	; 63
    3de4:	80 93 ef 00 	sts	0x00EF, r24
                        CANGCON = 0x00;     //! Disable CAN controller & reset "listen" mode
    3de8:	10 92 d8 00 	sts	0x00D8, r1
                        while ((CANGSTA & (1<<ENFG)) != 0); //! Wait for Disable OK
    3dec:	80 91 d9 00 	lds	r24, 0x00D9
    3df0:	82 fd       	sbrc	r24, 2
    3df2:	fc cf       	rjmp	.-8      	; 0x3dec <can_auto_baudrate+0x244>
    3df4:	a8 e0       	ldi	r26, 0x08	; 8
    3df6:	62 e0       	ldi	r22, 0x02	; 2
    3df8:	72 e0       	ldi	r23, 0x02	; 2
    3dfa:	50 e0       	ldi	r21, 0x00	; 0
    3dfc:	00 e0       	ldi	r16, 0x00	; 0
    3dfe:	cc 24       	eor	r12, r12
    3e00:	36 c0       	rjmp	.+108    	; 0x3e6e <can_auto_baudrate+0x2c6>
                }
            }
            else    // if (phs1 > PHS1_MAX ...
            {
                //! --- If psh1 > 5 then phs1 =phs2 or =phs2+1, else phs1=phs2
                if (phs1>5)
    3e02:	66 30       	cpi	r22, 0x06	; 6
    3e04:	10 f4       	brcc	.+4      	; 0x3e0a <can_auto_baudrate+0x262>
    3e06:	76 2f       	mov	r23, r22
    3e08:	0a c0       	rjmp	.+20     	; 0x3e1e <can_auto_baudrate+0x276>
                {
                    if (phs1>(phs2+1)) phs1=(++phs2);
    3e0a:	26 2f       	mov	r18, r22
    3e0c:	30 e0       	ldi	r19, 0x00	; 0
    3e0e:	87 2f       	mov	r24, r23
    3e10:	90 e0       	ldi	r25, 0x00	; 0
    3e12:	01 96       	adiw	r24, 0x01	; 1
    3e14:	82 17       	cp	r24, r18
    3e16:	93 07       	cpc	r25, r19
    3e18:	14 f4       	brge	.+4      	; 0x3e1e <can_auto_baudrate+0x276>
    3e1a:	7f 5f       	subi	r23, 0xFF	; 255
    3e1c:	67 2f       	mov	r22, r23
                }
                else
                {
                phs2=phs1;
                }
                prs = ntq - ( phs1 + phs2 + 1 );
    3e1e:	b7 2f       	mov	r27, r23
    3e20:	b6 0f       	add	r27, r22
    3e22:	b0 95       	com	r27
    3e24:	ba 0f       	add	r27, r26

                //! --- Test PRS limits
                if ((prs <= PRS_MAX) && (prs >= PRS_MIN))
    3e26:	8b 2f       	mov	r24, r27
    3e28:	81 50       	subi	r24, 0x01	; 1
    3e2a:	88 30       	cpi	r24, 0x08	; 8
    3e2c:	40 f6       	brcc	.-112    	; 0x3dbe <can_auto_baudrate+0x216>
                {
                    //! --- Values  accepted if  80% >= sampling point >= 75%
                    if (((phs2<<2) >= (1+prs+phs1)) && ((phs2+phs2+phs2) <= (1+prs+phs1)))
    3e2e:	47 2f       	mov	r20, r23
    3e30:	50 e0       	ldi	r21, 0x00	; 0
    3e32:	26 2f       	mov	r18, r22
    3e34:	30 e0       	ldi	r19, 0x00	; 0
    3e36:	2f 5f       	subi	r18, 0xFF	; 255
    3e38:	3f 4f       	sbci	r19, 0xFF	; 255
    3e3a:	2b 0f       	add	r18, r27
    3e3c:	31 1d       	adc	r19, r1
    3e3e:	ca 01       	movw	r24, r20
    3e40:	88 0f       	add	r24, r24
    3e42:	99 1f       	adc	r25, r25
    3e44:	88 0f       	add	r24, r24
    3e46:	99 1f       	adc	r25, r25
    3e48:	82 17       	cp	r24, r18
    3e4a:	93 07       	cpc	r25, r19
    3e4c:	0c f4       	brge	.+2      	; 0x3e50 <can_auto_baudrate+0x2a8>
    3e4e:	b7 cf       	rjmp	.-146    	; 0x3dbe <can_auto_baudrate+0x216>
    3e50:	ca 01       	movw	r24, r20
    3e52:	88 0f       	add	r24, r24
    3e54:	99 1f       	adc	r25, r25
    3e56:	84 0f       	add	r24, r20
    3e58:	95 1f       	adc	r25, r21
    3e5a:	28 17       	cp	r18, r24
    3e5c:	39 07       	cpc	r19, r25
    3e5e:	0c f4       	brge	.+2      	; 0x3e62 <can_auto_baudrate+0x2ba>
    3e60:	ae cf       	rjmp	.-164    	; 0x3dbe <can_auto_baudrate+0x216>
    3e62:	51 e0       	ldi	r21, 0x01	; 1
    3e64:	11 e0       	ldi	r17, 0x01	; 1
    3e66:	03 c0       	rjmp	.+6      	; 0x3e6e <can_auto_baudrate+0x2c6>
        //!     then Phase2=Phase1 and if Phase1>5, Phase1 can be equal to Phase2 or
        //!     Phase2+1. After this, the number of TQ is increased up to its high
        //!     limit and after it is the Prescaler. During the computing high (80%)
        //!     and low (75%) limits of sampling point location are tested. SJW and
        //!     the number of sampling points are not calculated in this loop.
        while (evaluate == 1)
    3e68:	41 30       	cpi	r20, 0x01	; 1
    3e6a:	09 f4       	brne	.+2      	; 0x3e6e <can_auto_baudrate+0x2c6>
    3e6c:	a7 cf       	rjmp	.-178    	; 0x3dbc <can_auto_baudrate+0x214>
    3e6e:	40 e0       	ldi	r20, 0x00	; 0
    {
        Can_set_mob(u8_temp0);  //! Page index
        Can_clear_mob();        //! All MOb Registers = 0x00
    }

    while (bt_not_found == 1)
    3e70:	01 30       	cpi	r16, 0x01	; 1
    3e72:	09 f4       	brne	.+2      	; 0x3e76 <can_auto_baudrate+0x2ce>
    3e74:	1d cf       	rjmp	.-454    	; 0x3cb0 <can_auto_baudrate+0x108>
            }
        } // while (evaluate ...
    } // while (bt_not_found ...

    return (bt_performed);
}
    3e76:	8c 2d       	mov	r24, r12
    3e78:	1f 91       	pop	r17
    3e7a:	0f 91       	pop	r16
    3e7c:	ff 90       	pop	r15
    3e7e:	ef 90       	pop	r14
    3e80:	df 90       	pop	r13
    3e82:	cf 90       	pop	r12
    3e84:	bf 90       	pop	r11
    3e86:	af 90       	pop	r10
    3e88:	9f 90       	pop	r9
    3e8a:	08 95       	ret

00003e8c <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
U8 can_fixed_baudrate(U8 mode)
{
    Can_reset();
    3e8c:	81 e0       	ldi	r24, 0x01	; 1
    3e8e:	80 93 d8 00 	sts	0x00D8, r24
    Can_conf_bt();
    3e92:	86 e0       	ldi	r24, 0x06	; 6
    3e94:	80 93 e2 00 	sts	0x00E2, r24
    3e98:	80 93 e3 00 	sts	0x00E3, r24
    3e9c:	84 e2       	ldi	r24, 0x24	; 36
    3e9e:	80 93 e4 00 	sts	0x00E4, r24
    return 1;
}
    3ea2:	81 e0       	ldi	r24, 0x01	; 1
    3ea4:	08 95       	ret

00003ea6 <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
U8 can_get_status (st_cmd_t* cmd)
{
    3ea6:	1f 93       	push	r17
    3ea8:	cf 93       	push	r28
    3eaa:	df 93       	push	r29
    3eac:	ec 01       	movw	r28, r24
    U8 a_status, rtn_val;
     
    a_status = cmd->status;
    3eae:	8a 85       	ldd	r24, Y+10	; 0x0a
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    3eb0:	88 23       	and	r24, r24
    3eb2:	09 f4       	brne	.+2      	; 0x3eb6 <can_get_status+0x10>
    3eb4:	86 c0       	rjmp	.+268    	; 0x3fc2 <can_get_status+0x11c>
    3eb6:	8f 31       	cpi	r24, 0x1F	; 31
    3eb8:	09 f4       	brne	.+2      	; 0x3ebc <can_get_status+0x16>
    3eba:	83 c0       	rjmp	.+262    	; 0x3fc2 <can_get_status+0x11c>
    3ebc:	8f 3f       	cpi	r24, 0xFF	; 255
    3ebe:	09 f4       	brne	.+2      	; 0x3ec2 <can_get_status+0x1c>
    3ec0:	80 c0       	rjmp	.+256    	; 0x3fc2 <can_get_status+0x11c>
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(cmd->handle);
    3ec2:	88 81       	ld	r24, Y
    3ec4:	82 95       	swap	r24
    3ec6:	80 7f       	andi	r24, 0xF0	; 240
    3ec8:	80 93 ed 00 	sts	0x00ED, r24
    a_status = can_get_mob_status();
    3ecc:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <can_get_mob_status>
    3ed0:	18 2f       	mov	r17, r24
    
    switch (a_status)
    3ed2:	80 32       	cpi	r24, 0x20	; 32
    3ed4:	71 f0       	breq	.+28     	; 0x3ef2 <can_get_status+0x4c>
    3ed6:	81 32       	cpi	r24, 0x21	; 33
    3ed8:	18 f4       	brcc	.+6      	; 0x3ee0 <can_get_status+0x3a>
    3eda:	88 23       	and	r24, r24
    3edc:	41 f0       	breq	.+16     	; 0x3eee <can_get_status+0x48>
    3ede:	69 c0       	rjmp	.+210    	; 0x3fb2 <can_get_status+0x10c>
    3ee0:	80 34       	cpi	r24, 0x40	; 64
    3ee2:	09 f4       	brne	.+2      	; 0x3ee6 <can_get_status+0x40>
    3ee4:	5c c0       	rjmp	.+184    	; 0x3f9e <can_get_status+0xf8>
    3ee6:	80 3a       	cpi	r24, 0xA0	; 160
    3ee8:	09 f0       	breq	.+2      	; 0x3eec <can_get_status+0x46>
    3eea:	63 c0       	rjmp	.+198    	; 0x3fb2 <can_get_status+0x10c>
    3eec:	02 c0       	rjmp	.+4      	; 0x3ef2 <can_get_status+0x4c>
    3eee:	81 e0       	ldi	r24, 0x01	; 1
    3ef0:	69 c0       	rjmp	.+210    	; 0x3fc4 <can_get_status+0x11e>
            rtn_val = CAN_STATUS_NOT_COMPLETED;
            break;
        //---------------      
        case MOB_RX_COMPLETED:     
        case MOB_RX_COMPLETED_DLCW:
            cmd->dlc = Can_get_dlc();
    3ef2:	80 91 ef 00 	lds	r24, 0x00EF
    3ef6:	8f 70       	andi	r24, 0x0F	; 15
    3ef8:	8f 83       	std	Y+7, r24	; 0x07
            can_get_data(cmd->pt_data);
    3efa:	88 85       	ldd	r24, Y+8	; 0x08
    3efc:	99 85       	ldd	r25, Y+9	; 0x09
    3efe:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <can_get_data>
            cmd->ctrl.rtr = Can_get_rtr();
    3f02:	80 91 f0 00 	lds	r24, 0x00F0
    3f06:	90 e0       	ldi	r25, 0x00	; 0
    3f08:	84 70       	andi	r24, 0x04	; 4
    3f0a:	90 70       	andi	r25, 0x00	; 0
    3f0c:	95 95       	asr	r25
    3f0e:	87 95       	ror	r24
    3f10:	95 95       	asr	r25
    3f12:	87 95       	ror	r24
    3f14:	8b 87       	std	Y+11, r24	; 0x0b
            if (Can_get_ide()) // if extended frame
    3f16:	80 91 ef 00 	lds	r24, 0x00EF
    3f1a:	fe 01       	movw	r30, r28
    3f1c:	33 96       	adiw	r30, 0x03	; 3
    3f1e:	84 ff       	sbrs	r24, 4
    3f20:	2b c0       	rjmp	.+86     	; 0x3f78 <can_get_status+0xd2>
            {
                cmd->ctrl.ide = 1; // extended frame
    3f22:	81 e0       	ldi	r24, 0x01	; 1
    3f24:	8c 87       	std	Y+12, r24	; 0x0c
                Can_get_ext_id(cmd->id.ext);
    3f26:	80 91 f3 00 	lds	r24, 0x00F3
    3f2a:	86 95       	lsr	r24
    3f2c:	86 95       	lsr	r24
    3f2e:	86 95       	lsr	r24
    3f30:	83 83       	std	Z+3, r24	; 0x03
    3f32:	90 91 f2 00 	lds	r25, 0x00F2
    3f36:	80 91 f3 00 	lds	r24, 0x00F3
    3f3a:	82 95       	swap	r24
    3f3c:	88 0f       	add	r24, r24
    3f3e:	80 7e       	andi	r24, 0xE0	; 224
    3f40:	96 95       	lsr	r25
    3f42:	96 95       	lsr	r25
    3f44:	96 95       	lsr	r25
    3f46:	89 0f       	add	r24, r25
    3f48:	82 83       	std	Z+2, r24	; 0x02
    3f4a:	90 91 f1 00 	lds	r25, 0x00F1
    3f4e:	80 91 f2 00 	lds	r24, 0x00F2
    3f52:	82 95       	swap	r24
    3f54:	88 0f       	add	r24, r24
    3f56:	80 7e       	andi	r24, 0xE0	; 224
    3f58:	96 95       	lsr	r25
    3f5a:	96 95       	lsr	r25
    3f5c:	96 95       	lsr	r25
    3f5e:	89 0f       	add	r24, r25
    3f60:	81 83       	std	Z+1, r24	; 0x01
    3f62:	90 91 f0 00 	lds	r25, 0x00F0
    3f66:	80 91 f1 00 	lds	r24, 0x00F1
    3f6a:	82 95       	swap	r24
    3f6c:	88 0f       	add	r24, r24
    3f6e:	80 7e       	andi	r24, 0xE0	; 224
    3f70:	96 95       	lsr	r25
    3f72:	96 95       	lsr	r25
    3f74:	96 95       	lsr	r25
    3f76:	11 c0       	rjmp	.+34     	; 0x3f9a <can_get_status+0xf4>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    3f78:	1c 86       	std	Y+12, r1	; 0x0c
                    Can_get_std_id(cmd->id.std);
    3f7a:	80 91 f3 00 	lds	r24, 0x00F3
    3f7e:	82 95       	swap	r24
    3f80:	86 95       	lsr	r24
    3f82:	87 70       	andi	r24, 0x07	; 7
    3f84:	81 83       	std	Z+1, r24	; 0x01
    3f86:	90 91 f2 00 	lds	r25, 0x00F2
    3f8a:	80 91 f3 00 	lds	r24, 0x00F3
    3f8e:	88 0f       	add	r24, r24
    3f90:	88 0f       	add	r24, r24
    3f92:	88 0f       	add	r24, r24
    3f94:	92 95       	swap	r25
    3f96:	96 95       	lsr	r25
    3f98:	97 70       	andi	r25, 0x07	; 7
    3f9a:	89 0f       	add	r24, r25
    3f9c:	8b 83       	std	Y+3, r24	; 0x03
            rtn_val = CAN_STATUS_COMPLETED;
            break;
        //---------------      
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    3f9e:	1a 87       	std	Y+10, r17	; 0x0a
            Can_mob_abort();        // Freed the MOB
    3fa0:	80 91 ef 00 	lds	r24, 0x00EF
    3fa4:	8f 73       	andi	r24, 0x3F	; 63
    3fa6:	80 93 ef 00 	sts	0x00EF, r24
            Can_clear_status_mob(); //   and reset MOb status
    3faa:	10 92 ee 00 	sts	0x00EE, r1
    3fae:	80 e0       	ldi	r24, 0x00	; 0
    3fb0:	09 c0       	rjmp	.+18     	; 0x3fc4 <can_get_status+0x11e>
            rtn_val = CAN_STATUS_COMPLETED;
            break;
        //---------------      
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    3fb2:	1a 87       	std	Y+10, r17	; 0x0a
            Can_mob_abort();        // Freed the MOB
    3fb4:	80 91 ef 00 	lds	r24, 0x00EF
    3fb8:	8f 73       	andi	r24, 0x3F	; 63
    3fba:	80 93 ef 00 	sts	0x00EF, r24
            Can_clear_status_mob(); //   and reset MOb status
    3fbe:	10 92 ee 00 	sts	0x00EE, r1
    3fc2:	82 e0       	ldi	r24, 0x02	; 2
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
    3fc4:	df 91       	pop	r29
    3fc6:	cf 91       	pop	r28
    3fc8:	1f 91       	pop	r17
    3fca:	08 95       	ret

00003fcc <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
U8 can_cmd(st_cmd_t* cmd)
{
    3fcc:	a4 e0       	ldi	r26, 0x04	; 4
    3fce:	b0 e0       	ldi	r27, 0x00	; 0
    3fd0:	ec ee       	ldi	r30, 0xEC	; 236
    3fd2:	ff e1       	ldi	r31, 0x1F	; 31
    3fd4:	0c 94 84 2d 	jmp	0x5b08	; 0x5b08 <__prologue_saves__+0x1c>
    3fd8:	8c 01       	movw	r16, r24
  U8 mob_handle, cpt;
  U32 u32_temp;
  
  if (cmd->cmd == CMD_ABORT)
    3fda:	dc 01       	movw	r26, r24
    3fdc:	11 96       	adiw	r26, 0x01	; 1
    3fde:	8d 91       	ld	r24, X+
    3fe0:	9c 91       	ld	r25, X
    3fe2:	12 97       	sbiw	r26, 0x02	; 2
    3fe4:	0c 97       	sbiw	r24, 0x0c	; 12
    3fe6:	a9 f4       	brne	.+42     	; 0x4012 <can_cmd+0x46>
  {
    if (cmd->status == MOB_PENDING)
    3fe8:	1a 96       	adiw	r26, 0x0a	; 10
    3fea:	8c 91       	ld	r24, X
    3fec:	1a 97       	sbiw	r26, 0x0a	; 10
    3fee:	80 36       	cpi	r24, 0x60	; 96
    3ff0:	69 f4       	brne	.+26     	; 0x400c <can_cmd+0x40>
    {
      // Rx or Tx not yet performed
      Can_set_mob(cmd->handle);
    3ff2:	8c 91       	ld	r24, X
    3ff4:	82 95       	swap	r24
    3ff6:	80 7f       	andi	r24, 0xF0	; 240
    3ff8:	80 93 ed 00 	sts	0x00ED, r24
      Can_mob_abort();
    3ffc:	80 91 ef 00 	lds	r24, 0x00EF
    4000:	8f 73       	andi	r24, 0x3F	; 63
    4002:	80 93 ef 00 	sts	0x00EF, r24
      Can_clear_status_mob();       // To be sure !
    4006:	10 92 ee 00 	sts	0x00EE, r1
      cmd->handle = 0;
    400a:	1c 92       	st	X, r1
    }
    cmd->status = STATUS_CLEARED; 
    400c:	f8 01       	movw	r30, r16
    400e:	12 86       	std	Z+10, r1	; 0x0a
    4010:	0c c1       	rjmp	.+536    	; 0x422a <can_cmd+0x25e>
  }
  else
  {
    mob_handle = can_get_mob_free();
    4012:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <can_get_mob_free>
    4016:	98 2f       	mov	r25, r24
    if (mob_handle!= NO_MOB)
    4018:	8f 3f       	cpi	r24, 0xFF	; 255
    401a:	09 f4       	brne	.+2      	; 0x401e <can_cmd+0x52>
    401c:	d2 c4       	rjmp	.+2468   	; 0x49c2 <can_cmd+0x9f6>
    {
      cmd->status = MOB_PENDING; 
    401e:	80 e6       	ldi	r24, 0x60	; 96
    4020:	d8 01       	movw	r26, r16
    4022:	1a 96       	adiw	r26, 0x0a	; 10
    4024:	8c 93       	st	X, r24
    4026:	1a 97       	sbiw	r26, 0x0a	; 10
      cmd->handle = mob_handle;
    4028:	9c 93       	st	X, r25
      Can_set_mob(mob_handle);
    402a:	92 95       	swap	r25
    402c:	90 7f       	andi	r25, 0xF0	; 240
    402e:	90 93 ed 00 	sts	0x00ED, r25
    4032:	ee ee       	ldi	r30, 0xEE	; 238
    4034:	f0 e0       	ldi	r31, 0x00	; 0
      Can_clear_mob();
    4036:	11 92       	st	Z+, r1
    4038:	e8 3f       	cpi	r30, 0xF8	; 248
    403a:	f1 05       	cpc	r31, r1
    403c:	e1 f7       	brne	.-8      	; 0x4036 <can_cmd+0x6a>
          
      switch (cmd->cmd)
    403e:	d8 01       	movw	r26, r16
    4040:	11 96       	adiw	r26, 0x01	; 1
    4042:	ed 91       	ld	r30, X+
    4044:	fc 91       	ld	r31, X
    4046:	12 97       	sbiw	r26, 0x02	; 2
    4048:	31 97       	sbiw	r30, 0x01	; 1
    404a:	eb 30       	cpi	r30, 0x0B	; 11
    404c:	f1 05       	cpc	r31, r1
    404e:	08 f0       	brcs	.+2      	; 0x4052 <can_cmd+0x86>
    4050:	b4 c4       	rjmp	.+2408   	; 0x49ba <can_cmd+0x9ee>
    4052:	e7 5a       	subi	r30, 0xA7	; 167
    4054:	ff 4f       	sbci	r31, 0xFF	; 255
    4056:	0c 94 ad 2d 	jmp	0x5b5a	; 0x5b5a <__tablejump2__>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    405a:	f8 01       	movw	r30, r16
    405c:	47 81       	ldd	r20, Z+7	; 0x07
    405e:	90 e0       	ldi	r25, 0x00	; 0
    4060:	be c3       	rjmp	.+1916   	; 0x47de <can_cmd+0x812>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    4062:	d8 01       	movw	r26, r16
    4064:	1c 96       	adiw	r26, 0x0c	; 12
    4066:	8c 91       	ld	r24, X
    4068:	f8 01       	movw	r30, r16
    406a:	33 96       	adiw	r30, 0x03	; 3
    406c:	88 23       	and	r24, r24
    406e:	91 f1       	breq	.+100    	; 0x40d4 <can_cmd+0x108>
    4070:	32 81       	ldd	r19, Z+2	; 0x02
    4072:	93 2f       	mov	r25, r19
    4074:	92 95       	swap	r25
    4076:	96 95       	lsr	r25
    4078:	97 70       	andi	r25, 0x07	; 7
    407a:	83 81       	ldd	r24, Z+3	; 0x03
    407c:	88 0f       	add	r24, r24
    407e:	88 0f       	add	r24, r24
    4080:	88 0f       	add	r24, r24
    4082:	98 0f       	add	r25, r24
    4084:	90 93 f3 00 	sts	0x00F3, r25
    4088:	21 81       	ldd	r18, Z+1	; 0x01
    408a:	82 2f       	mov	r24, r18
    408c:	82 95       	swap	r24
    408e:	86 95       	lsr	r24
    4090:	87 70       	andi	r24, 0x07	; 7
    4092:	33 0f       	add	r19, r19
    4094:	33 0f       	add	r19, r19
    4096:	33 0f       	add	r19, r19
    4098:	83 0f       	add	r24, r19
    409a:	80 93 f2 00 	sts	0x00F2, r24
    409e:	f8 01       	movw	r30, r16
    40a0:	93 81       	ldd	r25, Z+3	; 0x03
    40a2:	22 0f       	add	r18, r18
    40a4:	22 0f       	add	r18, r18
    40a6:	22 0f       	add	r18, r18
    40a8:	89 2f       	mov	r24, r25
    40aa:	82 95       	swap	r24
    40ac:	86 95       	lsr	r24
    40ae:	87 70       	andi	r24, 0x07	; 7
    40b0:	28 0f       	add	r18, r24
    40b2:	20 93 f1 00 	sts	0x00F1, r18
    40b6:	99 0f       	add	r25, r25
    40b8:	99 0f       	add	r25, r25
    40ba:	99 0f       	add	r25, r25
    40bc:	90 93 f0 00 	sts	0x00F0, r25
    40c0:	80 91 ef 00 	lds	r24, 0x00EF
    40c4:	80 61       	ori	r24, 0x10	; 16
    40c6:	80 93 ef 00 	sts	0x00EF, r24
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    40ca:	d8 01       	movw	r26, r16
    40cc:	17 96       	adiw	r26, 0x07	; 7
    40ce:	2c 91       	ld	r18, X
    40d0:	90 e0       	ldi	r25, 0x00	; 0
    40d2:	22 c0       	rjmp	.+68     	; 0x4118 <can_cmd+0x14c>
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
    40d4:	d8 01       	movw	r26, r16
    40d6:	13 96       	adiw	r26, 0x03	; 3
    40d8:	2c 91       	ld	r18, X
    40da:	81 81       	ldd	r24, Z+1	; 0x01
    40dc:	82 95       	swap	r24
    40de:	88 0f       	add	r24, r24
    40e0:	80 7e       	andi	r24, 0xE0	; 224
    40e2:	92 2f       	mov	r25, r18
    40e4:	96 95       	lsr	r25
    40e6:	96 95       	lsr	r25
    40e8:	96 95       	lsr	r25
    40ea:	89 0f       	add	r24, r25
    40ec:	80 93 f3 00 	sts	0x00F3, r24
    40f0:	22 95       	swap	r18
    40f2:	22 0f       	add	r18, r18
    40f4:	20 7e       	andi	r18, 0xE0	; 224
    40f6:	20 93 f2 00 	sts	0x00F2, r18
    40fa:	80 91 ef 00 	lds	r24, 0x00EF
    40fe:	8f 7e       	andi	r24, 0xEF	; 239
    4100:	e2 cf       	rjmp	.-60     	; 0x40c6 <can_cmd+0xfa>
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    4102:	d8 01       	movw	r26, r16
    4104:	18 96       	adiw	r26, 0x08	; 8
    4106:	ed 91       	ld	r30, X+
    4108:	fc 91       	ld	r31, X
    410a:	19 97       	sbiw	r26, 0x09	; 9
    410c:	e9 0f       	add	r30, r25
    410e:	f1 1d       	adc	r31, r1
    4110:	80 81       	ld	r24, Z
    4112:	80 93 fa 00 	sts	0x00FA, r24
    4116:	9f 5f       	subi	r25, 0xFF	; 255
    4118:	92 17       	cp	r25, r18
    411a:	98 f3       	brcs	.-26     	; 0x4102 <can_cmd+0x136>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
    411c:	f8 01       	movw	r30, r16
    411e:	83 85       	ldd	r24, Z+11	; 0x0b
    4120:	88 23       	and	r24, r24
    4122:	21 f0       	breq	.+8      	; 0x412c <can_cmd+0x160>
    4124:	80 91 f0 00 	lds	r24, 0x00F0
    4128:	84 60       	ori	r24, 0x04	; 4
    412a:	03 c0       	rjmp	.+6      	; 0x4132 <can_cmd+0x166>
            else Can_clear_rtr();    
    412c:	80 91 f0 00 	lds	r24, 0x00F0
    4130:	8b 7f       	andi	r24, 0xFB	; 251
    4132:	80 93 f0 00 	sts	0x00F0, r24
          Can_set_dlc(cmd->dlc);
    4136:	80 91 ef 00 	lds	r24, 0x00EF
    413a:	28 2b       	or	r18, r24
    413c:	20 93 ef 00 	sts	0x00EF, r18
    4140:	6a c0       	rjmp	.+212    	; 0x4216 <can_cmd+0x24a>
          Can_config_tx();
          break;
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    4142:	d8 01       	movw	r26, r16
    4144:	1c 96       	adiw	r26, 0x0c	; 12
    4146:	8c 91       	ld	r24, X
    4148:	f8 01       	movw	r30, r16
    414a:	33 96       	adiw	r30, 0x03	; 3
    414c:	88 23       	and	r24, r24
    414e:	91 f1       	breq	.+100    	; 0x41b4 <can_cmd+0x1e8>
    4150:	32 81       	ldd	r19, Z+2	; 0x02
    4152:	93 2f       	mov	r25, r19
    4154:	92 95       	swap	r25
    4156:	96 95       	lsr	r25
    4158:	97 70       	andi	r25, 0x07	; 7
    415a:	83 81       	ldd	r24, Z+3	; 0x03
    415c:	88 0f       	add	r24, r24
    415e:	88 0f       	add	r24, r24
    4160:	88 0f       	add	r24, r24
    4162:	98 0f       	add	r25, r24
    4164:	90 93 f3 00 	sts	0x00F3, r25
    4168:	21 81       	ldd	r18, Z+1	; 0x01
    416a:	82 2f       	mov	r24, r18
    416c:	82 95       	swap	r24
    416e:	86 95       	lsr	r24
    4170:	87 70       	andi	r24, 0x07	; 7
    4172:	33 0f       	add	r19, r19
    4174:	33 0f       	add	r19, r19
    4176:	33 0f       	add	r19, r19
    4178:	83 0f       	add	r24, r19
    417a:	80 93 f2 00 	sts	0x00F2, r24
    417e:	f8 01       	movw	r30, r16
    4180:	93 81       	ldd	r25, Z+3	; 0x03
    4182:	22 0f       	add	r18, r18
    4184:	22 0f       	add	r18, r18
    4186:	22 0f       	add	r18, r18
    4188:	89 2f       	mov	r24, r25
    418a:	82 95       	swap	r24
    418c:	86 95       	lsr	r24
    418e:	87 70       	andi	r24, 0x07	; 7
    4190:	28 0f       	add	r18, r24
    4192:	20 93 f1 00 	sts	0x00F1, r18
    4196:	99 0f       	add	r25, r25
    4198:	99 0f       	add	r25, r25
    419a:	99 0f       	add	r25, r25
    419c:	90 93 f0 00 	sts	0x00F0, r25
    41a0:	80 91 ef 00 	lds	r24, 0x00EF
    41a4:	80 61       	ori	r24, 0x10	; 16
    41a6:	80 93 ef 00 	sts	0x00EF, r24
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    41aa:	d8 01       	movw	r26, r16
    41ac:	17 96       	adiw	r26, 0x07	; 7
    41ae:	2c 91       	ld	r18, X
    41b0:	90 e0       	ldi	r25, 0x00	; 0
    41b2:	22 c0       	rjmp	.+68     	; 0x41f8 <can_cmd+0x22c>
          Can_config_tx();
          break;
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
    41b4:	d8 01       	movw	r26, r16
    41b6:	13 96       	adiw	r26, 0x03	; 3
    41b8:	2c 91       	ld	r18, X
    41ba:	81 81       	ldd	r24, Z+1	; 0x01
    41bc:	82 95       	swap	r24
    41be:	88 0f       	add	r24, r24
    41c0:	80 7e       	andi	r24, 0xE0	; 224
    41c2:	92 2f       	mov	r25, r18
    41c4:	96 95       	lsr	r25
    41c6:	96 95       	lsr	r25
    41c8:	96 95       	lsr	r25
    41ca:	89 0f       	add	r24, r25
    41cc:	80 93 f3 00 	sts	0x00F3, r24
    41d0:	22 95       	swap	r18
    41d2:	22 0f       	add	r18, r18
    41d4:	20 7e       	andi	r18, 0xE0	; 224
    41d6:	20 93 f2 00 	sts	0x00F2, r18
    41da:	80 91 ef 00 	lds	r24, 0x00EF
    41de:	8f 7e       	andi	r24, 0xEF	; 239
    41e0:	e2 cf       	rjmp	.-60     	; 0x41a6 <can_cmd+0x1da>
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    41e2:	d8 01       	movw	r26, r16
    41e4:	18 96       	adiw	r26, 0x08	; 8
    41e6:	ed 91       	ld	r30, X+
    41e8:	fc 91       	ld	r31, X
    41ea:	19 97       	sbiw	r26, 0x09	; 9
    41ec:	e9 0f       	add	r30, r25
    41ee:	f1 1d       	adc	r31, r1
    41f0:	80 81       	ld	r24, Z
    41f2:	80 93 fa 00 	sts	0x00FA, r24
    41f6:	9f 5f       	subi	r25, 0xFF	; 255
    41f8:	92 17       	cp	r25, r18
    41fa:	98 f3       	brcs	.-26     	; 0x41e2 <can_cmd+0x216>
          cmd->ctrl.rtr=0; Can_clear_rtr();
    41fc:	f8 01       	movw	r30, r16
    41fe:	13 86       	std	Z+11, r1	; 0x0b
    4200:	80 91 f0 00 	lds	r24, 0x00F0
    4204:	8b 7f       	andi	r24, 0xFB	; 251
    4206:	80 93 f0 00 	sts	0x00F0, r24
          Can_set_dlc(cmd->dlc);
    420a:	80 91 ef 00 	lds	r24, 0x00EF
    420e:	97 81       	ldd	r25, Z+7	; 0x07
    4210:	89 2b       	or	r24, r25
    4212:	80 93 ef 00 	sts	0x00EF, r24
          Can_config_tx();
    4216:	80 91 ef 00 	lds	r24, 0x00EF
    421a:	8f 73       	andi	r24, 0x3F	; 63
    421c:	80 93 ef 00 	sts	0x00EF, r24
    4220:	80 91 ef 00 	lds	r24, 0x00EF
    4224:	80 64       	ori	r24, 0x40	; 64
    4226:	80 93 ef 00 	sts	0x00EF, r24
    422a:	80 e0       	ldi	r24, 0x00	; 0
    422c:	ce c3       	rjmp	.+1948   	; 0x49ca <can_cmd+0x9fe>
          break;
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    422e:	d8 01       	movw	r26, r16
    4230:	1c 96       	adiw	r26, 0x0c	; 12
    4232:	8c 91       	ld	r24, X
    4234:	f8 01       	movw	r30, r16
    4236:	33 96       	adiw	r30, 0x03	; 3
    4238:	88 23       	and	r24, r24
    423a:	61 f1       	breq	.+88     	; 0x4294 <can_cmd+0x2c8>
    423c:	32 81       	ldd	r19, Z+2	; 0x02
    423e:	93 2f       	mov	r25, r19
    4240:	92 95       	swap	r25
    4242:	96 95       	lsr	r25
    4244:	97 70       	andi	r25, 0x07	; 7
    4246:	83 81       	ldd	r24, Z+3	; 0x03
    4248:	88 0f       	add	r24, r24
    424a:	88 0f       	add	r24, r24
    424c:	88 0f       	add	r24, r24
    424e:	98 0f       	add	r25, r24
    4250:	90 93 f3 00 	sts	0x00F3, r25
    4254:	21 81       	ldd	r18, Z+1	; 0x01
    4256:	82 2f       	mov	r24, r18
    4258:	82 95       	swap	r24
    425a:	86 95       	lsr	r24
    425c:	87 70       	andi	r24, 0x07	; 7
    425e:	33 0f       	add	r19, r19
    4260:	33 0f       	add	r19, r19
    4262:	33 0f       	add	r19, r19
    4264:	83 0f       	add	r24, r19
    4266:	80 93 f2 00 	sts	0x00F2, r24
    426a:	f8 01       	movw	r30, r16
    426c:	93 81       	ldd	r25, Z+3	; 0x03
    426e:	22 0f       	add	r18, r18
    4270:	22 0f       	add	r18, r18
    4272:	22 0f       	add	r18, r18
    4274:	89 2f       	mov	r24, r25
    4276:	82 95       	swap	r24
    4278:	86 95       	lsr	r24
    427a:	87 70       	andi	r24, 0x07	; 7
    427c:	28 0f       	add	r18, r24
    427e:	20 93 f1 00 	sts	0x00F1, r18
    4282:	99 0f       	add	r25, r25
    4284:	99 0f       	add	r25, r25
    4286:	99 0f       	add	r25, r25
    4288:	90 93 f0 00 	sts	0x00F0, r25
    428c:	80 91 ef 00 	lds	r24, 0x00EF
    4290:	80 61       	ori	r24, 0x10	; 16
    4292:	16 c0       	rjmp	.+44     	; 0x42c0 <can_cmd+0x2f4>
          else              { Can_set_std_id(cmd->id.std);}
    4294:	d8 01       	movw	r26, r16
    4296:	13 96       	adiw	r26, 0x03	; 3
    4298:	2c 91       	ld	r18, X
    429a:	81 81       	ldd	r24, Z+1	; 0x01
    429c:	82 95       	swap	r24
    429e:	88 0f       	add	r24, r24
    42a0:	80 7e       	andi	r24, 0xE0	; 224
    42a2:	92 2f       	mov	r25, r18
    42a4:	96 95       	lsr	r25
    42a6:	96 95       	lsr	r25
    42a8:	96 95       	lsr	r25
    42aa:	89 0f       	add	r24, r25
    42ac:	80 93 f3 00 	sts	0x00F3, r24
    42b0:	22 95       	swap	r18
    42b2:	22 0f       	add	r18, r18
    42b4:	20 7e       	andi	r18, 0xE0	; 224
    42b6:	20 93 f2 00 	sts	0x00F2, r18
    42ba:	80 91 ef 00 	lds	r24, 0x00EF
    42be:	8f 7e       	andi	r24, 0xEF	; 239
    42c0:	80 93 ef 00 	sts	0x00EF, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
    42c4:	81 e0       	ldi	r24, 0x01	; 1
    42c6:	f8 01       	movw	r30, r16
    42c8:	83 87       	std	Z+11, r24	; 0x0b
    42ca:	80 91 f0 00 	lds	r24, 0x00F0
    42ce:	84 60       	ori	r24, 0x04	; 4
    42d0:	9a cf       	rjmp	.-204    	; 0x4206 <can_cmd+0x23a>
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
        //------------      
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    42d2:	19 82       	std	Y+1, r1	; 0x01
    42d4:	1a 82       	std	Y+2, r1	; 0x02
    42d6:	1b 82       	std	Y+3, r1	; 0x03
    42d8:	1c 82       	std	Y+4, r1	; 0x04
    42da:	fe 01       	movw	r30, r28
    42dc:	31 96       	adiw	r30, 0x01	; 1
    42de:	32 81       	ldd	r19, Z+2	; 0x02
    42e0:	93 2f       	mov	r25, r19
    42e2:	92 95       	swap	r25
    42e4:	96 95       	lsr	r25
    42e6:	97 70       	andi	r25, 0x07	; 7
    42e8:	83 81       	ldd	r24, Z+3	; 0x03
    42ea:	88 0f       	add	r24, r24
    42ec:	88 0f       	add	r24, r24
    42ee:	88 0f       	add	r24, r24
    42f0:	98 0f       	add	r25, r24
    42f2:	90 93 f7 00 	sts	0x00F7, r25
    42f6:	21 81       	ldd	r18, Z+1	; 0x01
    42f8:	82 2f       	mov	r24, r18
    42fa:	82 95       	swap	r24
    42fc:	86 95       	lsr	r24
    42fe:	87 70       	andi	r24, 0x07	; 7
    4300:	33 0f       	add	r19, r19
    4302:	33 0f       	add	r19, r19
    4304:	33 0f       	add	r19, r19
    4306:	83 0f       	add	r24, r19
    4308:	80 93 f6 00 	sts	0x00F6, r24
    430c:	99 81       	ldd	r25, Y+1	; 0x01
    430e:	22 0f       	add	r18, r18
    4310:	22 0f       	add	r18, r18
    4312:	22 0f       	add	r18, r18
    4314:	89 2f       	mov	r24, r25
    4316:	82 95       	swap	r24
    4318:	86 95       	lsr	r24
    431a:	87 70       	andi	r24, 0x07	; 7
    431c:	28 0f       	add	r18, r24
    431e:	20 93 f5 00 	sts	0x00F5, r18
    4322:	99 0f       	add	r25, r25
    4324:	99 0f       	add	r25, r25
    4326:	99 0f       	add	r25, r25
    4328:	90 93 f4 00 	sts	0x00F4, r25
          Can_set_dlc(cmd->dlc);
    432c:	80 91 ef 00 	lds	r24, 0x00EF
    4330:	d8 01       	movw	r26, r16
    4332:	17 96       	adiw	r26, 0x07	; 7
    4334:	9c 91       	ld	r25, X
    4336:	89 2b       	or	r24, r25
    4338:	80 93 ef 00 	sts	0x00EF, r24
          Can_clear_rtrmsk();
    433c:	80 91 f4 00 	lds	r24, 0x00F4
    4340:	8b 7f       	andi	r24, 0xFB	; 251
    4342:	80 93 f4 00 	sts	0x00F4, r24
    4346:	91 c2       	rjmp	.+1314   	; 0x486a <can_cmd+0x89e>
          Can_clear_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_RX_DATA:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    4348:	19 82       	std	Y+1, r1	; 0x01
    434a:	1a 82       	std	Y+2, r1	; 0x02
    434c:	1b 82       	std	Y+3, r1	; 0x03
    434e:	1c 82       	std	Y+4, r1	; 0x04
    4350:	fe 01       	movw	r30, r28
    4352:	31 96       	adiw	r30, 0x01	; 1
    4354:	32 81       	ldd	r19, Z+2	; 0x02
    4356:	93 2f       	mov	r25, r19
    4358:	92 95       	swap	r25
    435a:	96 95       	lsr	r25
    435c:	97 70       	andi	r25, 0x07	; 7
    435e:	83 81       	ldd	r24, Z+3	; 0x03
    4360:	88 0f       	add	r24, r24
    4362:	88 0f       	add	r24, r24
    4364:	88 0f       	add	r24, r24
    4366:	98 0f       	add	r25, r24
    4368:	90 93 f7 00 	sts	0x00F7, r25
    436c:	21 81       	ldd	r18, Z+1	; 0x01
    436e:	82 2f       	mov	r24, r18
    4370:	82 95       	swap	r24
    4372:	86 95       	lsr	r24
    4374:	87 70       	andi	r24, 0x07	; 7
    4376:	33 0f       	add	r19, r19
    4378:	33 0f       	add	r19, r19
    437a:	33 0f       	add	r19, r19
    437c:	83 0f       	add	r24, r19
    437e:	80 93 f6 00 	sts	0x00F6, r24
    4382:	99 81       	ldd	r25, Y+1	; 0x01
    4384:	22 0f       	add	r18, r18
    4386:	22 0f       	add	r18, r18
    4388:	22 0f       	add	r18, r18
    438a:	89 2f       	mov	r24, r25
    438c:	82 95       	swap	r24
    438e:	86 95       	lsr	r24
    4390:	87 70       	andi	r24, 0x07	; 7
    4392:	28 0f       	add	r18, r24
    4394:	20 93 f5 00 	sts	0x00F5, r18
    4398:	99 0f       	add	r25, r25
    439a:	99 0f       	add	r25, r25
    439c:	99 0f       	add	r25, r25
    439e:	90 93 f4 00 	sts	0x00F4, r25
          Can_set_dlc(cmd->dlc);
    43a2:	80 91 ef 00 	lds	r24, 0x00EF
    43a6:	f8 01       	movw	r30, r16
    43a8:	97 81       	ldd	r25, Z+7	; 0x07
    43aa:	89 2b       	or	r24, r25
    43ac:	80 93 ef 00 	sts	0x00EF, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    43b0:	13 86       	std	Z+11, r1	; 0x0b
    43b2:	80 91 f4 00 	lds	r24, 0x00F4
    43b6:	84 60       	ori	r24, 0x04	; 4
    43b8:	80 93 f4 00 	sts	0x00F4, r24
    43bc:	80 91 f0 00 	lds	r24, 0x00F0
    43c0:	8b 7f       	andi	r24, 0xFB	; 251
    43c2:	80 93 f0 00 	sts	0x00F0, r24
    43c6:	51 c2       	rjmp	.+1186   	; 0x486a <can_cmd+0x89e>
          Can_clear_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_RX_REMOTE:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    43c8:	19 82       	std	Y+1, r1	; 0x01
    43ca:	1a 82       	std	Y+2, r1	; 0x02
    43cc:	1b 82       	std	Y+3, r1	; 0x03
    43ce:	1c 82       	std	Y+4, r1	; 0x04
    43d0:	fe 01       	movw	r30, r28
    43d2:	31 96       	adiw	r30, 0x01	; 1
    43d4:	32 81       	ldd	r19, Z+2	; 0x02
    43d6:	93 2f       	mov	r25, r19
    43d8:	92 95       	swap	r25
    43da:	96 95       	lsr	r25
    43dc:	97 70       	andi	r25, 0x07	; 7
    43de:	83 81       	ldd	r24, Z+3	; 0x03
    43e0:	88 0f       	add	r24, r24
    43e2:	88 0f       	add	r24, r24
    43e4:	88 0f       	add	r24, r24
    43e6:	98 0f       	add	r25, r24
    43e8:	90 93 f7 00 	sts	0x00F7, r25
    43ec:	21 81       	ldd	r18, Z+1	; 0x01
    43ee:	82 2f       	mov	r24, r18
    43f0:	82 95       	swap	r24
    43f2:	86 95       	lsr	r24
    43f4:	87 70       	andi	r24, 0x07	; 7
    43f6:	33 0f       	add	r19, r19
    43f8:	33 0f       	add	r19, r19
    43fa:	33 0f       	add	r19, r19
    43fc:	83 0f       	add	r24, r19
    43fe:	80 93 f6 00 	sts	0x00F6, r24
    4402:	99 81       	ldd	r25, Y+1	; 0x01
    4404:	22 0f       	add	r18, r18
    4406:	22 0f       	add	r18, r18
    4408:	22 0f       	add	r18, r18
    440a:	89 2f       	mov	r24, r25
    440c:	82 95       	swap	r24
    440e:	86 95       	lsr	r24
    4410:	87 70       	andi	r24, 0x07	; 7
    4412:	28 0f       	add	r18, r24
    4414:	20 93 f5 00 	sts	0x00F5, r18
    4418:	99 0f       	add	r25, r25
    441a:	99 0f       	add	r25, r25
    441c:	99 0f       	add	r25, r25
    441e:	90 93 f4 00 	sts	0x00F4, r25
          Can_set_dlc(cmd->dlc);
    4422:	80 91 ef 00 	lds	r24, 0x00EF
    4426:	d8 01       	movw	r26, r16
    4428:	17 96       	adiw	r26, 0x07	; 7
    442a:	9c 91       	ld	r25, X
    442c:	17 97       	sbiw	r26, 0x07	; 7
    442e:	89 2b       	or	r24, r25
    4430:	80 93 ef 00 	sts	0x00EF, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    4434:	81 e0       	ldi	r24, 0x01	; 1
    4436:	1b 96       	adiw	r26, 0x0b	; 11
    4438:	8c 93       	st	X, r24
    443a:	80 91 f4 00 	lds	r24, 0x00F4
    443e:	84 60       	ori	r24, 0x04	; 4
    4440:	80 93 f4 00 	sts	0x00F4, r24
    4444:	80 91 f0 00 	lds	r24, 0x00F0
    4448:	84 60       	ori	r24, 0x04	; 4
    444a:	80 93 f0 00 	sts	0x00F0, r24
          Can_clear_rplv();
    444e:	80 91 ef 00 	lds	r24, 0x00EF
    4452:	8f 7d       	andi	r24, 0xDF	; 223
    4454:	08 c2       	rjmp	.+1040   	; 0x4866 <can_cmd+0x89a>
          Can_clear_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    4456:	f8 01       	movw	r30, r16
    4458:	84 85       	ldd	r24, Z+12	; 0x0c
    445a:	33 96       	adiw	r30, 0x03	; 3
    445c:	88 23       	and	r24, r24
    445e:	69 f1       	breq	.+90     	; 0x44ba <can_cmd+0x4ee>
    4460:	32 81       	ldd	r19, Z+2	; 0x02
    4462:	93 2f       	mov	r25, r19
    4464:	92 95       	swap	r25
    4466:	96 95       	lsr	r25
    4468:	97 70       	andi	r25, 0x07	; 7
    446a:	83 81       	ldd	r24, Z+3	; 0x03
    446c:	88 0f       	add	r24, r24
    446e:	88 0f       	add	r24, r24
    4470:	88 0f       	add	r24, r24
    4472:	98 0f       	add	r25, r24
    4474:	90 93 f3 00 	sts	0x00F3, r25
    4478:	21 81       	ldd	r18, Z+1	; 0x01
    447a:	82 2f       	mov	r24, r18
    447c:	82 95       	swap	r24
    447e:	86 95       	lsr	r24
    4480:	87 70       	andi	r24, 0x07	; 7
    4482:	33 0f       	add	r19, r19
    4484:	33 0f       	add	r19, r19
    4486:	33 0f       	add	r19, r19
    4488:	83 0f       	add	r24, r19
    448a:	80 93 f2 00 	sts	0x00F2, r24
    448e:	d8 01       	movw	r26, r16
    4490:	13 96       	adiw	r26, 0x03	; 3
    4492:	9c 91       	ld	r25, X
    4494:	22 0f       	add	r18, r18
    4496:	22 0f       	add	r18, r18
    4498:	22 0f       	add	r18, r18
    449a:	89 2f       	mov	r24, r25
    449c:	82 95       	swap	r24
    449e:	86 95       	lsr	r24
    44a0:	87 70       	andi	r24, 0x07	; 7
    44a2:	28 0f       	add	r18, r24
    44a4:	20 93 f1 00 	sts	0x00F1, r18
    44a8:	99 0f       	add	r25, r25
    44aa:	99 0f       	add	r25, r25
    44ac:	99 0f       	add	r25, r25
    44ae:	90 93 f0 00 	sts	0x00F0, r25
    44b2:	80 91 ef 00 	lds	r24, 0x00EF
    44b6:	80 61       	ori	r24, 0x10	; 16
    44b8:	16 c0       	rjmp	.+44     	; 0x44e6 <can_cmd+0x51a>
          else              { Can_set_std_id(cmd->id.std);}
    44ba:	d8 01       	movw	r26, r16
    44bc:	13 96       	adiw	r26, 0x03	; 3
    44be:	2c 91       	ld	r18, X
    44c0:	81 81       	ldd	r24, Z+1	; 0x01
    44c2:	82 95       	swap	r24
    44c4:	88 0f       	add	r24, r24
    44c6:	80 7e       	andi	r24, 0xE0	; 224
    44c8:	92 2f       	mov	r25, r18
    44ca:	96 95       	lsr	r25
    44cc:	96 95       	lsr	r25
    44ce:	96 95       	lsr	r25
    44d0:	89 0f       	add	r24, r25
    44d2:	80 93 f3 00 	sts	0x00F3, r24
    44d6:	22 95       	swap	r18
    44d8:	22 0f       	add	r18, r18
    44da:	20 7e       	andi	r18, 0xE0	; 224
    44dc:	20 93 f2 00 	sts	0x00F2, r18
    44e0:	80 91 ef 00 	lds	r24, 0x00EF
    44e4:	8f 7e       	andi	r24, 0xEF	; 239
    44e6:	80 93 ef 00 	sts	0x00EF, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    44ea:	8f ef       	ldi	r24, 0xFF	; 255
    44ec:	9f ef       	ldi	r25, 0xFF	; 255
    44ee:	af ef       	ldi	r26, 0xFF	; 255
    44f0:	bf ef       	ldi	r27, 0xFF	; 255
    44f2:	89 83       	std	Y+1, r24	; 0x01
    44f4:	9a 83       	std	Y+2, r25	; 0x02
    44f6:	ab 83       	std	Y+3, r26	; 0x03
    44f8:	bc 83       	std	Y+4, r27	; 0x04
    44fa:	fe 01       	movw	r30, r28
    44fc:	31 96       	adiw	r30, 0x01	; 1
    44fe:	32 81       	ldd	r19, Z+2	; 0x02
    4500:	93 2f       	mov	r25, r19
    4502:	92 95       	swap	r25
    4504:	96 95       	lsr	r25
    4506:	97 70       	andi	r25, 0x07	; 7
    4508:	83 81       	ldd	r24, Z+3	; 0x03
    450a:	88 0f       	add	r24, r24
    450c:	88 0f       	add	r24, r24
    450e:	88 0f       	add	r24, r24
    4510:	98 0f       	add	r25, r24
    4512:	90 93 f7 00 	sts	0x00F7, r25
    4516:	21 81       	ldd	r18, Z+1	; 0x01
    4518:	82 2f       	mov	r24, r18
    451a:	82 95       	swap	r24
    451c:	86 95       	lsr	r24
    451e:	87 70       	andi	r24, 0x07	; 7
    4520:	33 0f       	add	r19, r19
    4522:	33 0f       	add	r19, r19
    4524:	33 0f       	add	r19, r19
    4526:	83 0f       	add	r24, r19
    4528:	80 93 f6 00 	sts	0x00F6, r24
    452c:	99 81       	ldd	r25, Y+1	; 0x01
    452e:	22 0f       	add	r18, r18
    4530:	22 0f       	add	r18, r18
    4532:	22 0f       	add	r18, r18
    4534:	89 2f       	mov	r24, r25
    4536:	82 95       	swap	r24
    4538:	86 95       	lsr	r24
    453a:	87 70       	andi	r24, 0x07	; 7
    453c:	28 0f       	add	r18, r24
    453e:	20 93 f5 00 	sts	0x00F5, r18
    4542:	99 0f       	add	r25, r25
    4544:	99 0f       	add	r25, r25
    4546:	99 0f       	add	r25, r25
    4548:	90 93 f4 00 	sts	0x00F4, r25
          Can_set_dlc(cmd->dlc);
    454c:	80 91 ef 00 	lds	r24, 0x00EF
    4550:	f8 01       	movw	r30, r16
    4552:	97 81       	ldd	r25, Z+7	; 0x07
    4554:	89 2b       	or	r24, r25
    4556:	80 93 ef 00 	sts	0x00EF, r24
          Can_clear_rtrmsk();
    455a:	80 91 f4 00 	lds	r24, 0x00F4
    455e:	8b 7f       	andi	r24, 0xFB	; 251
    4560:	80 93 f4 00 	sts	0x00F4, r24
          Can_set_idemsk();
    4564:	80 91 f4 00 	lds	r24, 0x00F4
    4568:	81 60       	ori	r24, 0x01	; 1
    456a:	80 93 f4 00 	sts	0x00F4, r24
          Can_config_rx();       
    456e:	80 91 ef 00 	lds	r24, 0x00EF
    4572:	8f 73       	andi	r24, 0x3F	; 63
    4574:	80 93 ef 00 	sts	0x00EF, r24
    4578:	80 91 ef 00 	lds	r24, 0x00EF
    457c:	80 68       	ori	r24, 0x80	; 128
    457e:	53 ce       	rjmp	.-858    	; 0x4226 <can_cmd+0x25a>
          break;
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    4580:	d8 01       	movw	r26, r16
    4582:	1c 96       	adiw	r26, 0x0c	; 12
    4584:	8c 91       	ld	r24, X
    4586:	f8 01       	movw	r30, r16
    4588:	33 96       	adiw	r30, 0x03	; 3
    458a:	88 23       	and	r24, r24
    458c:	61 f1       	breq	.+88     	; 0x45e6 <can_cmd+0x61a>
    458e:	32 81       	ldd	r19, Z+2	; 0x02
    4590:	93 2f       	mov	r25, r19
    4592:	92 95       	swap	r25
    4594:	96 95       	lsr	r25
    4596:	97 70       	andi	r25, 0x07	; 7
    4598:	83 81       	ldd	r24, Z+3	; 0x03
    459a:	88 0f       	add	r24, r24
    459c:	88 0f       	add	r24, r24
    459e:	88 0f       	add	r24, r24
    45a0:	98 0f       	add	r25, r24
    45a2:	90 93 f3 00 	sts	0x00F3, r25
    45a6:	21 81       	ldd	r18, Z+1	; 0x01
    45a8:	82 2f       	mov	r24, r18
    45aa:	82 95       	swap	r24
    45ac:	86 95       	lsr	r24
    45ae:	87 70       	andi	r24, 0x07	; 7
    45b0:	33 0f       	add	r19, r19
    45b2:	33 0f       	add	r19, r19
    45b4:	33 0f       	add	r19, r19
    45b6:	83 0f       	add	r24, r19
    45b8:	80 93 f2 00 	sts	0x00F2, r24
    45bc:	f8 01       	movw	r30, r16
    45be:	93 81       	ldd	r25, Z+3	; 0x03
    45c0:	22 0f       	add	r18, r18
    45c2:	22 0f       	add	r18, r18
    45c4:	22 0f       	add	r18, r18
    45c6:	89 2f       	mov	r24, r25
    45c8:	82 95       	swap	r24
    45ca:	86 95       	lsr	r24
    45cc:	87 70       	andi	r24, 0x07	; 7
    45ce:	28 0f       	add	r18, r24
    45d0:	20 93 f1 00 	sts	0x00F1, r18
    45d4:	99 0f       	add	r25, r25
    45d6:	99 0f       	add	r25, r25
    45d8:	99 0f       	add	r25, r25
    45da:	90 93 f0 00 	sts	0x00F0, r25
    45de:	80 91 ef 00 	lds	r24, 0x00EF
    45e2:	80 61       	ori	r24, 0x10	; 16
    45e4:	16 c0       	rjmp	.+44     	; 0x4612 <can_cmd+0x646>
          else              { Can_set_std_id(cmd->id.std);}
    45e6:	d8 01       	movw	r26, r16
    45e8:	13 96       	adiw	r26, 0x03	; 3
    45ea:	2c 91       	ld	r18, X
    45ec:	81 81       	ldd	r24, Z+1	; 0x01
    45ee:	82 95       	swap	r24
    45f0:	88 0f       	add	r24, r24
    45f2:	80 7e       	andi	r24, 0xE0	; 224
    45f4:	92 2f       	mov	r25, r18
    45f6:	96 95       	lsr	r25
    45f8:	96 95       	lsr	r25
    45fa:	96 95       	lsr	r25
    45fc:	89 0f       	add	r24, r25
    45fe:	80 93 f3 00 	sts	0x00F3, r24
    4602:	22 95       	swap	r18
    4604:	22 0f       	add	r18, r18
    4606:	20 7e       	andi	r18, 0xE0	; 224
    4608:	20 93 f2 00 	sts	0x00F2, r18
    460c:	80 91 ef 00 	lds	r24, 0x00EF
    4610:	8f 7e       	andi	r24, 0xEF	; 239
    4612:	80 93 ef 00 	sts	0x00EF, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    4616:	8f ef       	ldi	r24, 0xFF	; 255
    4618:	9f ef       	ldi	r25, 0xFF	; 255
    461a:	af ef       	ldi	r26, 0xFF	; 255
    461c:	bf ef       	ldi	r27, 0xFF	; 255
    461e:	89 83       	std	Y+1, r24	; 0x01
    4620:	9a 83       	std	Y+2, r25	; 0x02
    4622:	ab 83       	std	Y+3, r26	; 0x03
    4624:	bc 83       	std	Y+4, r27	; 0x04
    4626:	fe 01       	movw	r30, r28
    4628:	31 96       	adiw	r30, 0x01	; 1
    462a:	32 81       	ldd	r19, Z+2	; 0x02
    462c:	93 2f       	mov	r25, r19
    462e:	92 95       	swap	r25
    4630:	96 95       	lsr	r25
    4632:	97 70       	andi	r25, 0x07	; 7
    4634:	83 81       	ldd	r24, Z+3	; 0x03
    4636:	88 0f       	add	r24, r24
    4638:	88 0f       	add	r24, r24
    463a:	88 0f       	add	r24, r24
    463c:	98 0f       	add	r25, r24
    463e:	90 93 f7 00 	sts	0x00F7, r25
    4642:	21 81       	ldd	r18, Z+1	; 0x01
    4644:	82 2f       	mov	r24, r18
    4646:	82 95       	swap	r24
    4648:	86 95       	lsr	r24
    464a:	87 70       	andi	r24, 0x07	; 7
    464c:	33 0f       	add	r19, r19
    464e:	33 0f       	add	r19, r19
    4650:	33 0f       	add	r19, r19
    4652:	83 0f       	add	r24, r19
    4654:	80 93 f6 00 	sts	0x00F6, r24
    4658:	99 81       	ldd	r25, Y+1	; 0x01
    465a:	22 0f       	add	r18, r18
    465c:	22 0f       	add	r18, r18
    465e:	22 0f       	add	r18, r18
    4660:	89 2f       	mov	r24, r25
    4662:	82 95       	swap	r24
    4664:	86 95       	lsr	r24
    4666:	87 70       	andi	r24, 0x07	; 7
    4668:	28 0f       	add	r18, r24
    466a:	20 93 f5 00 	sts	0x00F5, r18
    466e:	99 0f       	add	r25, r25
    4670:	99 0f       	add	r25, r25
    4672:	99 0f       	add	r25, r25
    4674:	90 93 f4 00 	sts	0x00F4, r25
          Can_set_dlc(cmd->dlc);
    4678:	80 91 ef 00 	lds	r24, 0x00EF
    467c:	f8 01       	movw	r30, r16
    467e:	97 81       	ldd	r25, Z+7	; 0x07
    4680:	89 2b       	or	r24, r25
    4682:	80 93 ef 00 	sts	0x00EF, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    4686:	13 86       	std	Z+11, r1	; 0x0b
    4688:	80 91 f4 00 	lds	r24, 0x00F4
    468c:	84 60       	ori	r24, 0x04	; 4
    468e:	80 93 f4 00 	sts	0x00F4, r24
    4692:	80 91 f0 00 	lds	r24, 0x00F0
    4696:	8b 7f       	andi	r24, 0xFB	; 251
    4698:	80 93 f0 00 	sts	0x00F0, r24
    469c:	63 cf       	rjmp	.-314    	; 0x4564 <can_cmd+0x598>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    469e:	d8 01       	movw	r26, r16
    46a0:	1c 96       	adiw	r26, 0x0c	; 12
    46a2:	8c 91       	ld	r24, X
    46a4:	f8 01       	movw	r30, r16
    46a6:	33 96       	adiw	r30, 0x03	; 3
    46a8:	88 23       	and	r24, r24
    46aa:	61 f1       	breq	.+88     	; 0x4704 <can_cmd+0x738>
    46ac:	32 81       	ldd	r19, Z+2	; 0x02
    46ae:	93 2f       	mov	r25, r19
    46b0:	92 95       	swap	r25
    46b2:	96 95       	lsr	r25
    46b4:	97 70       	andi	r25, 0x07	; 7
    46b6:	83 81       	ldd	r24, Z+3	; 0x03
    46b8:	88 0f       	add	r24, r24
    46ba:	88 0f       	add	r24, r24
    46bc:	88 0f       	add	r24, r24
    46be:	98 0f       	add	r25, r24
    46c0:	90 93 f3 00 	sts	0x00F3, r25
    46c4:	21 81       	ldd	r18, Z+1	; 0x01
    46c6:	82 2f       	mov	r24, r18
    46c8:	82 95       	swap	r24
    46ca:	86 95       	lsr	r24
    46cc:	87 70       	andi	r24, 0x07	; 7
    46ce:	33 0f       	add	r19, r19
    46d0:	33 0f       	add	r19, r19
    46d2:	33 0f       	add	r19, r19
    46d4:	83 0f       	add	r24, r19
    46d6:	80 93 f2 00 	sts	0x00F2, r24
    46da:	f8 01       	movw	r30, r16
    46dc:	93 81       	ldd	r25, Z+3	; 0x03
    46de:	22 0f       	add	r18, r18
    46e0:	22 0f       	add	r18, r18
    46e2:	22 0f       	add	r18, r18
    46e4:	89 2f       	mov	r24, r25
    46e6:	82 95       	swap	r24
    46e8:	86 95       	lsr	r24
    46ea:	87 70       	andi	r24, 0x07	; 7
    46ec:	28 0f       	add	r18, r24
    46ee:	20 93 f1 00 	sts	0x00F1, r18
    46f2:	99 0f       	add	r25, r25
    46f4:	99 0f       	add	r25, r25
    46f6:	99 0f       	add	r25, r25
    46f8:	90 93 f0 00 	sts	0x00F0, r25
    46fc:	80 91 ef 00 	lds	r24, 0x00EF
    4700:	80 61       	ori	r24, 0x10	; 16
    4702:	16 c0       	rjmp	.+44     	; 0x4730 <can_cmd+0x764>
          else              { Can_set_std_id(cmd->id.std);}
    4704:	d8 01       	movw	r26, r16
    4706:	13 96       	adiw	r26, 0x03	; 3
    4708:	2c 91       	ld	r18, X
    470a:	81 81       	ldd	r24, Z+1	; 0x01
    470c:	82 95       	swap	r24
    470e:	88 0f       	add	r24, r24
    4710:	80 7e       	andi	r24, 0xE0	; 224
    4712:	92 2f       	mov	r25, r18
    4714:	96 95       	lsr	r25
    4716:	96 95       	lsr	r25
    4718:	96 95       	lsr	r25
    471a:	89 0f       	add	r24, r25
    471c:	80 93 f3 00 	sts	0x00F3, r24
    4720:	22 95       	swap	r18
    4722:	22 0f       	add	r18, r18
    4724:	20 7e       	andi	r18, 0xE0	; 224
    4726:	20 93 f2 00 	sts	0x00F2, r18
    472a:	80 91 ef 00 	lds	r24, 0x00EF
    472e:	8f 7e       	andi	r24, 0xEF	; 239
    4730:	80 93 ef 00 	sts	0x00EF, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    4734:	8f ef       	ldi	r24, 0xFF	; 255
    4736:	9f ef       	ldi	r25, 0xFF	; 255
    4738:	af ef       	ldi	r26, 0xFF	; 255
    473a:	bf ef       	ldi	r27, 0xFF	; 255
    473c:	89 83       	std	Y+1, r24	; 0x01
    473e:	9a 83       	std	Y+2, r25	; 0x02
    4740:	ab 83       	std	Y+3, r26	; 0x03
    4742:	bc 83       	std	Y+4, r27	; 0x04
    4744:	fe 01       	movw	r30, r28
    4746:	31 96       	adiw	r30, 0x01	; 1
    4748:	32 81       	ldd	r19, Z+2	; 0x02
    474a:	93 2f       	mov	r25, r19
    474c:	92 95       	swap	r25
    474e:	96 95       	lsr	r25
    4750:	97 70       	andi	r25, 0x07	; 7
    4752:	83 81       	ldd	r24, Z+3	; 0x03
    4754:	88 0f       	add	r24, r24
    4756:	88 0f       	add	r24, r24
    4758:	88 0f       	add	r24, r24
    475a:	98 0f       	add	r25, r24
    475c:	90 93 f7 00 	sts	0x00F7, r25
    4760:	21 81       	ldd	r18, Z+1	; 0x01
    4762:	82 2f       	mov	r24, r18
    4764:	82 95       	swap	r24
    4766:	86 95       	lsr	r24
    4768:	87 70       	andi	r24, 0x07	; 7
    476a:	33 0f       	add	r19, r19
    476c:	33 0f       	add	r19, r19
    476e:	33 0f       	add	r19, r19
    4770:	83 0f       	add	r24, r19
    4772:	80 93 f6 00 	sts	0x00F6, r24
    4776:	99 81       	ldd	r25, Y+1	; 0x01
    4778:	22 0f       	add	r18, r18
    477a:	22 0f       	add	r18, r18
    477c:	22 0f       	add	r18, r18
    477e:	89 2f       	mov	r24, r25
    4780:	82 95       	swap	r24
    4782:	86 95       	lsr	r24
    4784:	87 70       	andi	r24, 0x07	; 7
    4786:	28 0f       	add	r18, r24
    4788:	20 93 f5 00 	sts	0x00F5, r18
    478c:	99 0f       	add	r25, r25
    478e:	99 0f       	add	r25, r25
    4790:	99 0f       	add	r25, r25
    4792:	90 93 f4 00 	sts	0x00F4, r25
          Can_set_dlc(cmd->dlc);
    4796:	80 91 ef 00 	lds	r24, 0x00EF
    479a:	f8 01       	movw	r30, r16
    479c:	97 81       	ldd	r25, Z+7	; 0x07
    479e:	89 2b       	or	r24, r25
    47a0:	80 93 ef 00 	sts	0x00EF, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    47a4:	81 e0       	ldi	r24, 0x01	; 1
    47a6:	83 87       	std	Z+11, r24	; 0x0b
    47a8:	80 91 f4 00 	lds	r24, 0x00F4
    47ac:	84 60       	ori	r24, 0x04	; 4
    47ae:	80 93 f4 00 	sts	0x00F4, r24
    47b2:	80 91 f0 00 	lds	r24, 0x00F0
    47b6:	84 60       	ori	r24, 0x04	; 4
    47b8:	80 93 f0 00 	sts	0x00F0, r24
          Can_clear_rplv();
    47bc:	80 91 ef 00 	lds	r24, 0x00EF
    47c0:	8f 7d       	andi	r24, 0xDF	; 223
    47c2:	80 93 ef 00 	sts	0x00EF, r24
    47c6:	ce ce       	rjmp	.-612    	; 0x4564 <can_cmd+0x598>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    47c8:	d8 01       	movw	r26, r16
    47ca:	18 96       	adiw	r26, 0x08	; 8
    47cc:	ed 91       	ld	r30, X+
    47ce:	fc 91       	ld	r31, X
    47d0:	19 97       	sbiw	r26, 0x09	; 9
    47d2:	e9 0f       	add	r30, r25
    47d4:	f1 1d       	adc	r31, r1
    47d6:	80 81       	ld	r24, Z
    47d8:	80 93 fa 00 	sts	0x00FA, r24
    47dc:	9f 5f       	subi	r25, 0xFF	; 255
    47de:	94 17       	cp	r25, r20
    47e0:	98 f3       	brcs	.-26     	; 0x47c8 <can_cmd+0x7fc>
          u32_temp=0; Can_set_ext_msk(u32_temp);
    47e2:	19 82       	std	Y+1, r1	; 0x01
    47e4:	1a 82       	std	Y+2, r1	; 0x02
    47e6:	1b 82       	std	Y+3, r1	; 0x03
    47e8:	1c 82       	std	Y+4, r1	; 0x04
    47ea:	fe 01       	movw	r30, r28
    47ec:	31 96       	adiw	r30, 0x01	; 1
    47ee:	32 81       	ldd	r19, Z+2	; 0x02
    47f0:	93 2f       	mov	r25, r19
    47f2:	92 95       	swap	r25
    47f4:	96 95       	lsr	r25
    47f6:	97 70       	andi	r25, 0x07	; 7
    47f8:	83 81       	ldd	r24, Z+3	; 0x03
    47fa:	88 0f       	add	r24, r24
    47fc:	88 0f       	add	r24, r24
    47fe:	88 0f       	add	r24, r24
    4800:	98 0f       	add	r25, r24
    4802:	90 93 f7 00 	sts	0x00F7, r25
    4806:	21 81       	ldd	r18, Z+1	; 0x01
    4808:	82 2f       	mov	r24, r18
    480a:	82 95       	swap	r24
    480c:	86 95       	lsr	r24
    480e:	87 70       	andi	r24, 0x07	; 7
    4810:	33 0f       	add	r19, r19
    4812:	33 0f       	add	r19, r19
    4814:	33 0f       	add	r19, r19
    4816:	83 0f       	add	r24, r19
    4818:	80 93 f6 00 	sts	0x00F6, r24
    481c:	99 81       	ldd	r25, Y+1	; 0x01
    481e:	22 0f       	add	r18, r18
    4820:	22 0f       	add	r18, r18
    4822:	22 0f       	add	r18, r18
    4824:	89 2f       	mov	r24, r25
    4826:	82 95       	swap	r24
    4828:	86 95       	lsr	r24
    482a:	87 70       	andi	r24, 0x07	; 7
    482c:	28 0f       	add	r18, r24
    482e:	20 93 f5 00 	sts	0x00F5, r18
    4832:	99 0f       	add	r25, r25
    4834:	99 0f       	add	r25, r25
    4836:	99 0f       	add	r25, r25
    4838:	90 93 f4 00 	sts	0x00F4, r25
          Can_set_dlc(cmd->dlc);
    483c:	80 91 ef 00 	lds	r24, 0x00EF
    4840:	48 2b       	or	r20, r24
    4842:	40 93 ef 00 	sts	0x00EF, r20
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    4846:	81 e0       	ldi	r24, 0x01	; 1
    4848:	f8 01       	movw	r30, r16
    484a:	83 87       	std	Z+11, r24	; 0x0b
    484c:	80 91 f4 00 	lds	r24, 0x00F4
    4850:	84 60       	ori	r24, 0x04	; 4
    4852:	80 93 f4 00 	sts	0x00F4, r24
    4856:	80 91 f0 00 	lds	r24, 0x00F0
    485a:	84 60       	ori	r24, 0x04	; 4
    485c:	80 93 f0 00 	sts	0x00F0, r24
          Can_set_rplv();
    4860:	80 91 ef 00 	lds	r24, 0x00EF
    4864:	80 62       	ori	r24, 0x20	; 32
    4866:	80 93 ef 00 	sts	0x00EF, r24
          Can_clear_idemsk();
    486a:	80 91 f4 00 	lds	r24, 0x00F4
    486e:	8e 7f       	andi	r24, 0xFE	; 254
    4870:	7c ce       	rjmp	.-776    	; 0x456a <can_cmd+0x59e>
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    4872:	d8 01       	movw	r26, r16
    4874:	1c 96       	adiw	r26, 0x0c	; 12
    4876:	8c 91       	ld	r24, X
    4878:	f8 01       	movw	r30, r16
    487a:	33 96       	adiw	r30, 0x03	; 3
    487c:	88 23       	and	r24, r24
    487e:	91 f1       	breq	.+100    	; 0x48e4 <can_cmd+0x918>
    4880:	32 81       	ldd	r19, Z+2	; 0x02
    4882:	93 2f       	mov	r25, r19
    4884:	92 95       	swap	r25
    4886:	96 95       	lsr	r25
    4888:	97 70       	andi	r25, 0x07	; 7
    488a:	83 81       	ldd	r24, Z+3	; 0x03
    488c:	88 0f       	add	r24, r24
    488e:	88 0f       	add	r24, r24
    4890:	88 0f       	add	r24, r24
    4892:	98 0f       	add	r25, r24
    4894:	90 93 f3 00 	sts	0x00F3, r25
    4898:	21 81       	ldd	r18, Z+1	; 0x01
    489a:	82 2f       	mov	r24, r18
    489c:	82 95       	swap	r24
    489e:	86 95       	lsr	r24
    48a0:	87 70       	andi	r24, 0x07	; 7
    48a2:	33 0f       	add	r19, r19
    48a4:	33 0f       	add	r19, r19
    48a6:	33 0f       	add	r19, r19
    48a8:	83 0f       	add	r24, r19
    48aa:	80 93 f2 00 	sts	0x00F2, r24
    48ae:	f8 01       	movw	r30, r16
    48b0:	93 81       	ldd	r25, Z+3	; 0x03
    48b2:	22 0f       	add	r18, r18
    48b4:	22 0f       	add	r18, r18
    48b6:	22 0f       	add	r18, r18
    48b8:	89 2f       	mov	r24, r25
    48ba:	82 95       	swap	r24
    48bc:	86 95       	lsr	r24
    48be:	87 70       	andi	r24, 0x07	; 7
    48c0:	28 0f       	add	r18, r24
    48c2:	20 93 f1 00 	sts	0x00F1, r18
    48c6:	99 0f       	add	r25, r25
    48c8:	99 0f       	add	r25, r25
    48ca:	99 0f       	add	r25, r25
    48cc:	90 93 f0 00 	sts	0x00F0, r25
    48d0:	80 91 ef 00 	lds	r24, 0x00EF
    48d4:	80 61       	ori	r24, 0x10	; 16
    48d6:	80 93 ef 00 	sts	0x00EF, r24
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    48da:	d8 01       	movw	r26, r16
    48dc:	17 96       	adiw	r26, 0x07	; 7
    48de:	4c 91       	ld	r20, X
    48e0:	90 e0       	ldi	r25, 0x00	; 0
    48e2:	22 c0       	rjmp	.+68     	; 0x4928 <can_cmd+0x95c>
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
    48e4:	d8 01       	movw	r26, r16
    48e6:	13 96       	adiw	r26, 0x03	; 3
    48e8:	2c 91       	ld	r18, X
    48ea:	81 81       	ldd	r24, Z+1	; 0x01
    48ec:	82 95       	swap	r24
    48ee:	88 0f       	add	r24, r24
    48f0:	80 7e       	andi	r24, 0xE0	; 224
    48f2:	92 2f       	mov	r25, r18
    48f4:	96 95       	lsr	r25
    48f6:	96 95       	lsr	r25
    48f8:	96 95       	lsr	r25
    48fa:	89 0f       	add	r24, r25
    48fc:	80 93 f3 00 	sts	0x00F3, r24
    4900:	22 95       	swap	r18
    4902:	22 0f       	add	r18, r18
    4904:	20 7e       	andi	r18, 0xE0	; 224
    4906:	20 93 f2 00 	sts	0x00F2, r18
    490a:	80 91 ef 00 	lds	r24, 0x00EF
    490e:	8f 7e       	andi	r24, 0xEF	; 239
    4910:	e2 cf       	rjmp	.-60     	; 0x48d6 <can_cmd+0x90a>
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    4912:	d8 01       	movw	r26, r16
    4914:	18 96       	adiw	r26, 0x08	; 8
    4916:	ed 91       	ld	r30, X+
    4918:	fc 91       	ld	r31, X
    491a:	19 97       	sbiw	r26, 0x09	; 9
    491c:	e9 0f       	add	r30, r25
    491e:	f1 1d       	adc	r31, r1
    4920:	80 81       	ld	r24, Z
    4922:	80 93 fa 00 	sts	0x00FA, r24
    4926:	9f 5f       	subi	r25, 0xFF	; 255
    4928:	94 17       	cp	r25, r20
    492a:	98 f3       	brcs	.-26     	; 0x4912 <can_cmd+0x946>
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    492c:	8f ef       	ldi	r24, 0xFF	; 255
    492e:	9f ef       	ldi	r25, 0xFF	; 255
    4930:	af ef       	ldi	r26, 0xFF	; 255
    4932:	bf ef       	ldi	r27, 0xFF	; 255
    4934:	89 83       	std	Y+1, r24	; 0x01
    4936:	9a 83       	std	Y+2, r25	; 0x02
    4938:	ab 83       	std	Y+3, r26	; 0x03
    493a:	bc 83       	std	Y+4, r27	; 0x04
    493c:	fe 01       	movw	r30, r28
    493e:	31 96       	adiw	r30, 0x01	; 1
    4940:	32 81       	ldd	r19, Z+2	; 0x02
    4942:	93 2f       	mov	r25, r19
    4944:	92 95       	swap	r25
    4946:	96 95       	lsr	r25
    4948:	97 70       	andi	r25, 0x07	; 7
    494a:	83 81       	ldd	r24, Z+3	; 0x03
    494c:	88 0f       	add	r24, r24
    494e:	88 0f       	add	r24, r24
    4950:	88 0f       	add	r24, r24
    4952:	98 0f       	add	r25, r24
    4954:	90 93 f7 00 	sts	0x00F7, r25
    4958:	21 81       	ldd	r18, Z+1	; 0x01
    495a:	82 2f       	mov	r24, r18
    495c:	82 95       	swap	r24
    495e:	86 95       	lsr	r24
    4960:	87 70       	andi	r24, 0x07	; 7
    4962:	33 0f       	add	r19, r19
    4964:	33 0f       	add	r19, r19
    4966:	33 0f       	add	r19, r19
    4968:	83 0f       	add	r24, r19
    496a:	80 93 f6 00 	sts	0x00F6, r24
    496e:	99 81       	ldd	r25, Y+1	; 0x01
    4970:	22 0f       	add	r18, r18
    4972:	22 0f       	add	r18, r18
    4974:	22 0f       	add	r18, r18
    4976:	89 2f       	mov	r24, r25
    4978:	82 95       	swap	r24
    497a:	86 95       	lsr	r24
    497c:	87 70       	andi	r24, 0x07	; 7
    497e:	28 0f       	add	r18, r24
    4980:	20 93 f5 00 	sts	0x00F5, r18
    4984:	99 0f       	add	r25, r25
    4986:	99 0f       	add	r25, r25
    4988:	99 0f       	add	r25, r25
    498a:	90 93 f4 00 	sts	0x00F4, r25
          Can_set_dlc(cmd->dlc);
    498e:	80 91 ef 00 	lds	r24, 0x00EF
    4992:	48 2b       	or	r20, r24
    4994:	40 93 ef 00 	sts	0x00EF, r20
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    4998:	81 e0       	ldi	r24, 0x01	; 1
    499a:	f8 01       	movw	r30, r16
    499c:	83 87       	std	Z+11, r24	; 0x0b
    499e:	80 91 f4 00 	lds	r24, 0x00F4
    49a2:	84 60       	ori	r24, 0x04	; 4
    49a4:	80 93 f4 00 	sts	0x00F4, r24
    49a8:	80 91 f0 00 	lds	r24, 0x00F0
    49ac:	84 60       	ori	r24, 0x04	; 4
    49ae:	80 93 f0 00 	sts	0x00F0, r24
          Can_set_rplv();
    49b2:	80 91 ef 00 	lds	r24, 0x00EF
    49b6:	80 62       	ori	r24, 0x20	; 32
    49b8:	04 cf       	rjmp	.-504    	; 0x47c2 <can_cmd+0x7f6>
          Can_config_rx();       
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    49ba:	d8 01       	movw	r26, r16
    49bc:	1a 96       	adiw	r26, 0x0a	; 10
    49be:	1c 92       	st	X, r1
    49c0:	34 cc       	rjmp	.-1944   	; 0x422a <can_cmd+0x25e>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    49c2:	8f e1       	ldi	r24, 0x1F	; 31
    49c4:	f8 01       	movw	r30, r16
    49c6:	82 87       	std	Z+10, r24	; 0x0a
    49c8:	8f ef       	ldi	r24, 0xFF	; 255
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
    49ca:	24 96       	adiw	r28, 0x04	; 4
    49cc:	e4 e0       	ldi	r30, 0x04	; 4
    49ce:	0c 94 a0 2d 	jmp	0x5b40	; 0x5b40 <__epilogue_restores__+0x1c>

000049d2 <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
U8 can_init(U8 mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
    49d2:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <can_fixed_baudrate>
    49d6:	88 23       	and	r24, r24
    49d8:	41 f0       	breq	.+16     	; 0x49ea <can_init+0x18>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
    49da:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <can_clear_all_mob>
    Can_enable();                               // c.f. macro in "can_drv.h" 
    49de:	80 91 d8 00 	lds	r24, 0x00D8
    49e2:	82 60       	ori	r24, 0x02	; 2
    49e4:	80 93 d8 00 	sts	0x00D8, r24
    49e8:	81 e0       	ldi	r24, 0x01	; 1
    return (1);
}
    49ea:	08 95       	ret

000049ec <init_can_data_mobs>:

U8 tx_remote_buffer[8];
st_cmd_t tx_remote_msg;

void init_can_data_mobs(void)
{
    49ec:	a6 ea       	ldi	r26, 0xA6	; 166
    49ee:	b8 e0       	ldi	r27, 0x08	; 8
    49f0:	41 e7       	ldi	r20, 0x71	; 113
    49f2:	58 e0       	ldi	r21, 0x08	; 8
    49f4:	20 e0       	ldi	r18, 0x00	; 0
    49f6:	30 e0       	ldi	r19, 0x00	; 0
    U8 i,j;

    for (i=0; i<num_of_response_mobs; i++) {
        response_msg[i].pt_data = &response_buffer[i][0];
    49f8:	11 96       	adiw	r26, 0x01	; 1
    49fa:	5c 93       	st	X, r21
    49fc:	4e 93       	st	-X, r20
        response_msg[i].status = 0;
    49fe:	12 96       	adiw	r26, 0x02	; 2
    4a00:	1c 92       	st	X, r1
    4a02:	12 97       	sbiw	r26, 0x02	; 2
    4a04:	f9 01       	movw	r30, r18
    4a06:	83 e0       	ldi	r24, 0x03	; 3
    4a08:	ee 0f       	add	r30, r30
    4a0a:	ff 1f       	adc	r31, r31
    4a0c:	8a 95       	dec	r24
    4a0e:	e1 f7       	brne	.-8      	; 0x4a08 <init_can_data_mobs+0x1c>
    4a10:	ef 58       	subi	r30, 0x8F	; 143
    4a12:	f7 4f       	sbci	r31, 0xF7	; 247
    4a14:	80 e0       	ldi	r24, 0x00	; 0
        for (j=0; j<9; j++) {
                response_buffer[i][j] = 0;
    4a16:	11 92       	st	Z+, r1
    U8 i,j;

    for (i=0; i<num_of_response_mobs; i++) {
        response_msg[i].pt_data = &response_buffer[i][0];
        response_msg[i].status = 0;
        for (j=0; j<9; j++) {
    4a18:	8f 5f       	subi	r24, 0xFF	; 255
    4a1a:	89 30       	cpi	r24, 0x09	; 9
    4a1c:	e1 f7       	brne	.-8      	; 0x4a16 <init_can_data_mobs+0x2a>
    4a1e:	2f 5f       	subi	r18, 0xFF	; 255
    4a20:	3f 4f       	sbci	r19, 0xFF	; 255
    4a22:	1d 96       	adiw	r26, 0x0d	; 13
    4a24:	48 5f       	subi	r20, 0xF8	; 248
    4a26:	5f 4f       	sbci	r21, 0xFF	; 255

void init_can_data_mobs(void)
{
    U8 i,j;

    for (i=0; i<num_of_response_mobs; i++) {
    4a28:	22 30       	cpi	r18, 0x02	; 2
    4a2a:	31 05       	cpc	r19, r1
    4a2c:	29 f7       	brne	.-54     	; 0x49f8 <init_can_data_mobs+0xc>
        response_msg[i].status = 0;
        for (j=0; j<9; j++) {
                response_buffer[i][j] = 0;
        }
    }
}
    4a2e:	08 95       	ret

00004a30 <can_update_rx_msg>:

    while (can_get_status(&tx_remote_msg) == CAN_STATUS_NOT_COMPLETED);
}

unsigned short int can_update_rx_msg(st_cmd_t* msg, U8 msg_id, U8 dlc)
{
    4a30:	cf 93       	push	r28
    4a32:	df 93       	push	r29
    4a34:	ec 01       	movw	r28, r24
        U8 i;
        
        msg->id.std = msg_id;
    4a36:	6b 83       	std	Y+3, r22	; 0x03
    4a38:	1c 82       	std	Y+4, r1	; 0x04
        msg->ctrl.ide = 0;
    4a3a:	1c 86       	std	Y+12, r1	; 0x0c
        msg->ctrl.rtr = 0;
    4a3c:	1b 86       	std	Y+11, r1	; 0x0b
        msg->dlc = dlc;
    4a3e:	4f 83       	std	Y+7, r20	; 0x07
        msg->cmd = CMD_RX_DATA_MASKED;
    4a40:	88 e0       	ldi	r24, 0x08	; 8
    4a42:	90 e0       	ldi	r25, 0x00	; 0
    4a44:	9a 83       	std	Y+2, r25	; 0x02
    4a46:	89 83       	std	Y+1, r24	; 0x01

        while(can_cmd(msg) != CAN_CMD_ACCEPTED);
    4a48:	ce 01       	movw	r24, r28
    4a4a:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <can_cmd>
    4a4e:	88 23       	and	r24, r24
    4a50:	d9 f7       	brne	.-10     	; 0x4a48 <can_update_rx_msg+0x18>
}
    4a52:	df 91       	pop	r29
    4a54:	cf 91       	pop	r28
    4a56:	08 95       	ret

00004a58 <can_data_mob_setup>:
        }
    }
}

void can_data_mob_setup(U8 mob_num)
{
    4a58:	cf 93       	push	r28
    4a5a:	df 93       	push	r29
    response_msg[mob_num].id.std = 128;
    4a5c:	48 2f       	mov	r20, r24
    4a5e:	50 e0       	ldi	r21, 0x00	; 0
    4a60:	2d e0       	ldi	r18, 0x0D	; 13
    4a62:	30 e0       	ldi	r19, 0x00	; 0
    4a64:	42 9f       	mul	r20, r18
    4a66:	f0 01       	movw	r30, r0
    4a68:	43 9f       	mul	r20, r19
    4a6a:	f0 0d       	add	r31, r0
    4a6c:	52 9f       	mul	r21, r18
    4a6e:	f0 0d       	add	r31, r0
    4a70:	11 24       	eor	r1, r1
    4a72:	e2 56       	subi	r30, 0x62	; 98
    4a74:	f7 4f       	sbci	r31, 0xF7	; 247
    4a76:	20 e8       	ldi	r18, 0x80	; 128
    4a78:	30 e0       	ldi	r19, 0x00	; 0
    4a7a:	34 83       	std	Z+4, r19	; 0x04
    4a7c:	23 83       	std	Z+3, r18	; 0x03
    response_msg[mob_num].ctrl.ide = 0;
    4a7e:	14 86       	std	Z+12, r1	; 0x0c
    response_msg[mob_num].ctrl.rtr = 0;
    4a80:	13 86       	std	Z+11, r1	; 0x0b
    response_msg[mob_num].dlc = 8;
    4a82:	98 e0       	ldi	r25, 0x08	; 8
    4a84:	97 83       	std	Z+7, r25	; 0x07
    response_msg[mob_num].cmd = CMD_RX_DATA_MASKED;
    4a86:	28 e0       	ldi	r18, 0x08	; 8
    4a88:	30 e0       	ldi	r19, 0x00	; 0
    4a8a:	32 83       	std	Z+2, r19	; 0x02
    4a8c:	21 83       	std	Z+1, r18	; 0x01
    
    while (can_cmd(&response_msg[mob_num]) != CAN_CMD_ACCEPTED);
    4a8e:	9d e0       	ldi	r25, 0x0D	; 13
    4a90:	89 9f       	mul	r24, r25
    4a92:	e0 01       	movw	r28, r0
    4a94:	11 24       	eor	r1, r1
    4a96:	c2 56       	subi	r28, 0x62	; 98
    4a98:	d7 4f       	sbci	r29, 0xF7	; 247
    4a9a:	ce 01       	movw	r24, r28
    4a9c:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <can_cmd>
    4aa0:	88 23       	and	r24, r24
    4aa2:	d9 f7       	brne	.-10     	; 0x4a9a <can_data_mob_setup+0x42>
}
    4aa4:	df 91       	pop	r29
    4aa6:	cf 91       	pop	r28
    4aa8:	08 95       	ret

00004aaa <can_send>:

/* funktion til at sende en besked der er 1 byte lang */
void can_send(U8 msg_id, U8 msg, U8 dlc)
{
    tx_remote_buffer[0] = msg; 
    4aaa:	60 93 69 08 	sts	0x0869, r22

    tx_remote_msg.id.std = msg_id;
    4aae:	80 93 84 08 	sts	0x0884, r24
    4ab2:	10 92 85 08 	sts	0x0885, r1
    tx_remote_msg.ctrl.ide = 0;
    4ab6:	10 92 8d 08 	sts	0x088D, r1
    tx_remote_msg.ctrl.rtr = 1;
    4aba:	81 e0       	ldi	r24, 0x01	; 1
    4abc:	80 93 8c 08 	sts	0x088C, r24
    tx_remote_msg.dlc = dlc;
    4ac0:	40 93 88 08 	sts	0x0888, r20
    tx_remote_msg.cmd = CMD_TX_DATA;
    4ac4:	82 e0       	ldi	r24, 0x02	; 2
    4ac6:	90 e0       	ldi	r25, 0x00	; 0
    4ac8:	90 93 83 08 	sts	0x0883, r25
    4acc:	80 93 82 08 	sts	0x0882, r24

    while (can_cmd(&tx_remote_msg) != CAN_CMD_ACCEPTED);
    4ad0:	81 e8       	ldi	r24, 0x81	; 129
    4ad2:	98 e0       	ldi	r25, 0x08	; 8
    4ad4:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <can_cmd>
    4ad8:	88 23       	and	r24, r24
    4ada:	d1 f7       	brne	.-12     	; 0x4ad0 <can_send+0x26>

    while (can_get_status(&tx_remote_msg) == CAN_STATUS_NOT_COMPLETED);
    4adc:	81 e8       	ldi	r24, 0x81	; 129
    4ade:	98 e0       	ldi	r25, 0x08	; 8
    4ae0:	0e 94 53 1f 	call	0x3ea6	; 0x3ea6 <can_get_status>
    4ae4:	81 30       	cpi	r24, 0x01	; 1
    4ae6:	d1 f3       	breq	.-12     	; 0x4adc <can_send+0x32>
}
    4ae8:	08 95       	ret

00004aea <__vector_21>:
	}
}

/* Funktion til at læse data fra ECU */
ISR(USART0_RX_vect)
{
    4aea:	1f 92       	push	r1
    4aec:	0f 92       	push	r0
    4aee:	0f b6       	in	r0, 0x3f	; 63
    4af0:	0f 92       	push	r0
    4af2:	0b b6       	in	r0, 0x3b	; 59
    4af4:	0f 92       	push	r0
    4af6:	11 24       	eor	r1, r1
    4af8:	2f 93       	push	r18
    4afa:	3f 93       	push	r19
    4afc:	8f 93       	push	r24
    4afe:	ef 93       	push	r30
    4b00:	ff 93       	push	r31
	if (RecIndex <= 114) {			// Der skal modtages 228 bytes fra ECU'en
    4b02:	20 91 2b 01 	lds	r18, 0x012B
    4b06:	30 91 2c 01 	lds	r19, 0x012C
    4b0a:	23 37       	cpi	r18, 0x73	; 115
    4b0c:	31 05       	cpc	r19, r1
    4b0e:	64 f4       	brge	.+24     	; 0x4b28 <__vector_21+0x3e>
		EcuData[RecIndex] = UDR0;	// Gem data fra ECU
    4b10:	80 91 c6 00 	lds	r24, 0x00C6
    4b14:	f9 01       	movw	r30, r18
    4b16:	ef 57       	subi	r30, 0x7F	; 127
    4b18:	fc 4f       	sbci	r31, 0xFC	; 252
    4b1a:	80 83       	st	Z, r24
		RecIndex++;
    4b1c:	2f 5f       	subi	r18, 0xFF	; 255
    4b1e:	3f 4f       	sbci	r19, 0xFF	; 255
    4b20:	30 93 2c 01 	sts	0x012C, r19
    4b24:	20 93 2b 01 	sts	0x012B, r18
	}
}
    4b28:	ff 91       	pop	r31
    4b2a:	ef 91       	pop	r30
    4b2c:	8f 91       	pop	r24
    4b2e:	3f 91       	pop	r19
    4b30:	2f 91       	pop	r18
    4b32:	0f 90       	pop	r0
    4b34:	0b be       	out	0x3b, r0	; 59
    4b36:	0f 90       	pop	r0
    4b38:	0f be       	out	0x3f, r0	; 63
    4b3a:	0f 90       	pop	r0
    4b3c:	1f 90       	pop	r1
    4b3e:	18 95       	reti

00004b40 <__vector_16>:
int RecIndex = 0;	// Bruges til at tælle hvor mange bytes der er modtaget fra ECU'en
int testvar = 0;	// Tmp var for at køre TIMER0_COMP_vect langsommere

/* Funktion der sender data req til ECU */
ISR(TIMER0_COMP_vect)
{
    4b40:	1f 92       	push	r1
    4b42:	0f 92       	push	r0
    4b44:	0f b6       	in	r0, 0x3f	; 63
    4b46:	0f 92       	push	r0
    4b48:	0b b6       	in	r0, 0x3b	; 59
    4b4a:	0f 92       	push	r0
    4b4c:	11 24       	eor	r1, r1
    4b4e:	2f 93       	push	r18
    4b50:	3f 93       	push	r19
    4b52:	4f 93       	push	r20
    4b54:	5f 93       	push	r21
    4b56:	6f 93       	push	r22
    4b58:	7f 93       	push	r23
    4b5a:	8f 93       	push	r24
    4b5c:	9f 93       	push	r25
    4b5e:	af 93       	push	r26
    4b60:	bf 93       	push	r27
    4b62:	cf 93       	push	r28
    4b64:	df 93       	push	r29
    4b66:	ef 93       	push	r30
    4b68:	ff 93       	push	r31
	int i;
	testvar++;
    4b6a:	80 91 2d 01 	lds	r24, 0x012D
    4b6e:	90 91 2e 01 	lds	r25, 0x012E
    4b72:	01 96       	adiw	r24, 0x01	; 1
    4b74:	90 93 2e 01 	sts	0x012E, r25
    4b78:	80 93 2d 01 	sts	0x012D, r24
	if (testvar == 4) {
    4b7c:	04 97       	sbiw	r24, 0x04	; 4
    4b7e:	a1 f5       	brne	.+104    	; 0x4be8 <__vector_16+0xa8>
		if (RecIndex != 114 && EcuErrorTmp < 5) { // Test for fejl
    4b80:	20 91 2b 01 	lds	r18, 0x012B
    4b84:	30 91 2c 01 	lds	r19, 0x012C
    4b88:	22 37       	cpi	r18, 0x72	; 114
    4b8a:	31 05       	cpc	r19, r1
    4b8c:	69 f0       	breq	.+26     	; 0x4ba8 <__vector_16+0x68>
    4b8e:	80 91 30 01 	lds	r24, 0x0130
    4b92:	85 30       	cpi	r24, 0x05	; 5
    4b94:	48 f4       	brcc	.+18     	; 0x4ba8 <__vector_16+0x68>
			EcuErrorTmp++;
    4b96:	8f 5f       	subi	r24, 0xFF	; 255
    4b98:	80 93 30 01 	sts	0x0130, r24
			if (EcuErrorTmp == 5) {
    4b9c:	85 30       	cpi	r24, 0x05	; 5
    4b9e:	81 f4       	brne	.+32     	; 0x4bc0 <__vector_16+0x80>
				EcuCommError = 1;
    4ba0:	81 e0       	ldi	r24, 0x01	; 1
    4ba2:	80 93 2f 01 	sts	0x012F, r24
    4ba6:	0c c0       	rjmp	.+24     	; 0x4bc0 <__vector_16+0x80>
			}
		} else if (EcuErrorTmp > 0 && RecIndex == 114) {
    4ba8:	80 91 30 01 	lds	r24, 0x0130
    4bac:	88 23       	and	r24, r24
    4bae:	41 f0       	breq	.+16     	; 0x4bc0 <__vector_16+0x80>
    4bb0:	22 37       	cpi	r18, 0x72	; 114
    4bb2:	31 05       	cpc	r19, r1
    4bb4:	29 f4       	brne	.+10     	; 0x4bc0 <__vector_16+0x80>
			EcuErrorTmp--;
    4bb6:	81 50       	subi	r24, 0x01	; 1
    4bb8:	80 93 30 01 	sts	0x0130, r24
			EcuCommError = 0;
    4bbc:	10 92 2f 01 	sts	0x012F, r1
		}
		testvar=0;
    4bc0:	10 92 2e 01 	sts	0x012E, r1
    4bc4:	10 92 2d 01 	sts	0x012D, r1
		RecIndex = 0;
    4bc8:	10 92 2c 01 	sts	0x012C, r1
    4bcc:	10 92 2b 01 	sts	0x012B, r1
    4bd0:	cf e0       	ldi	r28, 0x0F	; 15
    4bd2:	d1 e0       	ldi	r29, 0x01	; 1
		for (i=0;i<=9;i++) {		// Send data req streng
			USART0_Transmit(ecu_data[i]); 
    4bd4:	89 91       	ld	r24, Y+
    4bd6:	99 27       	eor	r25, r25
    4bd8:	87 fd       	sbrc	r24, 7
    4bda:	90 95       	com	r25
    4bdc:	0e 94 a5 03 	call	0x74a	; 0x74a <USART0_Transmit>
			EcuErrorTmp--;
			EcuCommError = 0;
		}
		testvar=0;
		RecIndex = 0;
		for (i=0;i<=9;i++) {		// Send data req streng
    4be0:	81 e0       	ldi	r24, 0x01	; 1
    4be2:	c9 31       	cpi	r28, 0x19	; 25
    4be4:	d8 07       	cpc	r29, r24
    4be6:	b1 f7       	brne	.-20     	; 0x4bd4 <__vector_16+0x94>
			USART0_Transmit(ecu_data[i]); 
		}
	}
}
    4be8:	ff 91       	pop	r31
    4bea:	ef 91       	pop	r30
    4bec:	df 91       	pop	r29
    4bee:	cf 91       	pop	r28
    4bf0:	bf 91       	pop	r27
    4bf2:	af 91       	pop	r26
    4bf4:	9f 91       	pop	r25
    4bf6:	8f 91       	pop	r24
    4bf8:	7f 91       	pop	r23
    4bfa:	6f 91       	pop	r22
    4bfc:	5f 91       	pop	r21
    4bfe:	4f 91       	pop	r20
    4c00:	3f 91       	pop	r19
    4c02:	2f 91       	pop	r18
    4c04:	0f 90       	pop	r0
    4c06:	0b be       	out	0x3b, r0	; 59
    4c08:	0f 90       	pop	r0
    4c0a:	0f be       	out	0x3f, r0	; 63
    4c0c:	0f 90       	pop	r0
    4c0e:	1f 90       	pop	r1
    4c10:	18 95       	reti

00004c12 <send_status>:
#include "ecu.h"
#include "error.h"

void send_status( void )
{
	USART1_Transmit((U8)123);	// Pakke start
    4c12:	8b e7       	ldi	r24, 0x7B	; 123
    4c14:	90 e0       	ldi	r25, 0x00	; 0
    4c16:	0e 94 ad 03 	call	0x75a	; 0x75a <USART1_Transmit>
	USART1_Transmit((U8)255);
    4c1a:	8f ef       	ldi	r24, 0xFF	; 255
    4c1c:	90 e0       	ldi	r25, 0x00	; 0
    4c1e:	0e 94 ad 03 	call	0x75a	; 0x75a <USART1_Transmit>
	USART1_Transmit((U8)10);
    4c22:	8a e0       	ldi	r24, 0x0A	; 10
    4c24:	90 e0       	ldi	r25, 0x00	; 0
    4c26:	0e 94 ad 03 	call	0x75a	; 0x75a <USART1_Transmit>
	USART1_Transmit((U8)EcuCommError);	// Ecu error var
    4c2a:	80 91 2f 01 	lds	r24, 0x012F
    4c2e:	90 e0       	ldi	r25, 0x00	; 0
    4c30:	0e 94 ad 03 	call	0x75a	; 0x75a <USART1_Transmit>
	USART1_Transmit((U8)EcuData[RPMSTART]);		// Send RPM
    4c34:	80 91 b7 03 	lds	r24, 0x03B7
    4c38:	90 e0       	ldi	r25, 0x00	; 0
    4c3a:	0e 94 ad 03 	call	0x75a	; 0x75a <USART1_Transmit>
	USART1_Transmit((U8)EcuData[RPMSTART+RPMLENGTH-1]);
    4c3e:	80 91 b8 03 	lds	r24, 0x03B8
    4c42:	90 e0       	ldi	r25, 0x00	; 0
    4c44:	0e 94 ad 03 	call	0x75a	; 0x75a <USART1_Transmit>
	USART1_Transmit((U8)EcuData[SPEEDSTART]);	// Send Hastighed
    4c48:	80 91 bf 03 	lds	r24, 0x03BF
    4c4c:	90 e0       	ldi	r25, 0x00	; 0
    4c4e:	0e 94 ad 03 	call	0x75a	; 0x75a <USART1_Transmit>
	USART1_Transmit((U8)EcuData[SPEEDSTART+SPEEDLENGTH-1]);
    4c52:	80 91 c0 03 	lds	r24, 0x03C0
    4c56:	90 e0       	ldi	r25, 0x00	; 0
    4c58:	0e 94 ad 03 	call	0x75a	; 0x75a <USART1_Transmit>
	USART1_Transmit((U8)EcuData[46]);	// Vand temp
    4c5c:	80 91 af 03 	lds	r24, 0x03AF
    4c60:	90 e0       	ldi	r25, 0x00	; 0
    4c62:	0e 94 ad 03 	call	0x75a	; 0x75a <USART1_Transmit>
	USART1_Transmit((U8)EcuData[47]);
    4c66:	80 91 b0 03 	lds	r24, 0x03B0
    4c6a:	90 e0       	ldi	r25, 0x00	; 0
    4c6c:	0e 94 ad 03 	call	0x75a	; 0x75a <USART1_Transmit>
	USART1_Transmit((U8)EcuData[48]);	// Luft temp
    4c70:	80 91 b1 03 	lds	r24, 0x03B1
    4c74:	90 e0       	ldi	r25, 0x00	; 0
    4c76:	0e 94 ad 03 	call	0x75a	; 0x75a <USART1_Transmit>
	USART1_Transmit((U8)EcuData[49]);
    4c7a:	80 91 b2 03 	lds	r24, 0x03B2
    4c7e:	90 e0       	ldi	r25, 0x00	; 0
    4c80:	0e 94 ad 03 	call	0x75a	; 0x75a <USART1_Transmit>
	USART1_Transmit((U8)EcuData[66]);	// Batt V
    4c84:	80 91 c3 03 	lds	r24, 0x03C3
    4c88:	90 e0       	ldi	r25, 0x00	; 0
    4c8a:	0e 94 ad 03 	call	0x75a	; 0x75a <USART1_Transmit>
	USART1_Transmit((U8)EcuData[67]);		
    4c8e:	80 91 c4 03 	lds	r24, 0x03C4
    4c92:	90 e0       	ldi	r25, 0x00	; 0
    4c94:	0e 94 ad 03 	call	0x75a	; 0x75a <USART1_Transmit>
	USART1_Transmit((U8)EcuData[POTSTART]);	// Pot 
    4c98:	80 91 b3 03 	lds	r24, 0x03B3
    4c9c:	90 e0       	ldi	r25, 0x00	; 0
    4c9e:	0e 94 ad 03 	call	0x75a	; 0x75a <USART1_Transmit>
	USART1_Transmit((U8)EcuData[POTSTART+POTLENGTH-1]);		
    4ca2:	80 91 b4 03 	lds	r24, 0x03B4
    4ca6:	90 e0       	ldi	r25, 0x00	; 0
    4ca8:	0e 94 ad 03 	call	0x75a	; 0x75a <USART1_Transmit>
	USART1_Transmit((U8)EcuData[MAPSTART]);	// Map 
    4cac:	80 91 c1 03 	lds	r24, 0x03C1
    4cb0:	90 e0       	ldi	r25, 0x00	; 0
    4cb2:	0e 94 ad 03 	call	0x75a	; 0x75a <USART1_Transmit>
	USART1_Transmit((U8)EcuData[MAPSTART+MAPLENGTH-1]);	
    4cb6:	80 91 c2 03 	lds	r24, 0x03C2
    4cba:	90 e0       	ldi	r25, 0x00	; 0
    4cbc:	0e 94 ad 03 	call	0x75a	; 0x75a <USART1_Transmit>
	USART1_Transmit((U8)EcuData[96]);	// gX (acc)
    4cc0:	80 91 e1 03 	lds	r24, 0x03E1
    4cc4:	90 e0       	ldi	r25, 0x00	; 0
    4cc6:	0e 94 ad 03 	call	0x75a	; 0x75a <USART1_Transmit>
	USART1_Transmit((U8)EcuData[97]);		
    4cca:	80 91 e2 03 	lds	r24, 0x03E2
    4cce:	90 e0       	ldi	r25, 0x00	; 0
    4cd0:	0e 94 ad 03 	call	0x75a	; 0x75a <USART1_Transmit>
	USART1_Transmit((U8)EcuData[98]);	// gy (acc)
    4cd4:	80 91 e3 03 	lds	r24, 0x03E3
    4cd8:	90 e0       	ldi	r25, 0x00	; 0
    4cda:	0e 94 ad 03 	call	0x75a	; 0x75a <USART1_Transmit>
	USART1_Transmit((U8)EcuData[99]);		
    4cde:	80 91 e4 03 	lds	r24, 0x03E4
    4ce2:	90 e0       	ldi	r25, 0x00	; 0
    4ce4:	0e 94 ad 03 	call	0x75a	; 0x75a <USART1_Transmit>
	USART1_Transmit((U8)EcuData[100]);	// gz (acc)
    4ce8:	80 91 e5 03 	lds	r24, 0x03E5
    4cec:	90 e0       	ldi	r25, 0x00	; 0
    4cee:	0e 94 ad 03 	call	0x75a	; 0x75a <USART1_Transmit>
	USART1_Transmit((U8)EcuData[101]);		
    4cf2:	80 91 e6 03 	lds	r24, 0x03E6
    4cf6:	90 e0       	ldi	r25, 0x00	; 0
    4cf8:	0e 94 ad 03 	call	0x75a	; 0x75a <USART1_Transmit>
	USART1_Transmit((U8)EcuData[68]);	// lambda
    4cfc:	80 91 c5 03 	lds	r24, 0x03C5
    4d00:	90 e0       	ldi	r25, 0x00	; 0
    4d02:	0e 94 ad 03 	call	0x75a	; 0x75a <USART1_Transmit>
	USART1_Transmit((U8)EcuData[69]);		
    4d06:	80 91 c6 03 	lds	r24, 0x03C6
    4d0a:	90 e0       	ldi	r25, 0x00	; 0
    4d0c:	0e 94 ad 03 	call	0x75a	; 0x75a <USART1_Transmit>
	USART1_Transmit((U8)EcuData[78]);	// injectorTime
    4d10:	80 91 cf 03 	lds	r24, 0x03CF
    4d14:	90 e0       	ldi	r25, 0x00	; 0
    4d16:	0e 94 ad 03 	call	0x75a	; 0x75a <USART1_Transmit>
	USART1_Transmit((U8)EcuData[79]);		
    4d1a:	80 91 d0 03 	lds	r24, 0x03D0
    4d1e:	90 e0       	ldi	r25, 0x00	; 0
    4d20:	0e 94 ad 03 	call	0x75a	; 0x75a <USART1_Transmit>
	USART1_Transmit((U8)EcuData[82]);	// ignitionTime
    4d24:	80 91 d3 03 	lds	r24, 0x03D3
    4d28:	90 e0       	ldi	r25, 0x00	; 0
    4d2a:	0e 94 ad 03 	call	0x75a	; 0x75a <USART1_Transmit>
	USART1_Transmit((U8)EcuData[83]);		
    4d2e:	80 91 d4 03 	lds	r24, 0x03D4
    4d32:	90 e0       	ldi	r25, 0x00	; 0
    4d34:	0e 94 ad 03 	call	0x75a	; 0x75a <USART1_Transmit>
	USART1_Transmit((U8)EcuData[74]);	// engine load
    4d38:	80 91 cb 03 	lds	r24, 0x03CB
    4d3c:	90 e0       	ldi	r25, 0x00	; 0
    4d3e:	0e 94 ad 03 	call	0x75a	; 0x75a <USART1_Transmit>
	USART1_Transmit((U8)EcuData[75]);		
    4d42:	80 91 cc 03 	lds	r24, 0x03CC
    4d46:	90 e0       	ldi	r25, 0x00	; 0
    4d48:	0e 94 ad 03 	call	0x75a	; 0x75a <USART1_Transmit>
	USART1_Transmit((U8)EcuData[56]);	// trigger error
    4d4c:	80 91 b9 03 	lds	r24, 0x03B9
    4d50:	90 e0       	ldi	r25, 0x00	; 0
    4d52:	0e 94 ad 03 	call	0x75a	; 0x75a <USART1_Transmit>
	USART1_Transmit((U8)EcuData[57]);		
    4d56:	80 91 ba 03 	lds	r24, 0x03BA
    4d5a:	90 e0       	ldi	r25, 0x00	; 0
    4d5c:	0e 94 ad 03 	call	0x75a	; 0x75a <USART1_Transmit>
}
    4d60:	08 95       	ret

00004d62 <TWI_init>:
#include <util/twi.h>
#include "twi.h"

void TWI_init(void)
{
	PORTD |= (1<<PORTD0)|(1<<PORTD1);	/* Enable pull-up on TWI pins */
    4d62:	8b b1       	in	r24, 0x0b	; 11
    4d64:	83 60       	ori	r24, 0x03	; 3
    4d66:	8b b9       	out	0x0b, r24	; 11

	/* Set TWI clock */
	TWSR = 0;	/* Set prescaler to 1 */
    4d68:	10 92 b9 00 	sts	0x00B9, r1
	TWBR = (F_CPU/TWI_CLOCK-16)/2;	/* Calculate TWBR value */
    4d6c:	8f e2       	ldi	r24, 0x2F	; 47
    4d6e:	80 93 b8 00 	sts	0x00B8, r24
}
    4d72:	08 95       	ret

00004d74 <TWI_start>:

BOOL TWI_start(void)
{
	TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);	/* send start condition */
    4d74:	84 ea       	ldi	r24, 0xA4	; 164
    4d76:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    4d7a:	80 91 bc 00 	lds	r24, 0x00BC
    4d7e:	87 ff       	sbrs	r24, 7
    4d80:	fc cf       	rjmp	.-8      	; 0x4d7a <TWI_start+0x6>
	if (!((TW_STATUS == TW_REP_START) || (TW_STATUS == TW_START))) return FALSE; /* Return if communication could not be started */
    4d82:	80 91 b9 00 	lds	r24, 0x00B9
    4d86:	88 7f       	andi	r24, 0xF8	; 248
    4d88:	80 31       	cpi	r24, 0x10	; 16
    4d8a:	19 f4       	brne	.+6      	; 0x4d92 <TWI_start+0x1e>
    4d8c:	21 e0       	ldi	r18, 0x01	; 1
    4d8e:	30 e0       	ldi	r19, 0x00	; 0
    4d90:	0b c0       	rjmp	.+22     	; 0x4da8 <TWI_start+0x34>
    4d92:	80 91 b9 00 	lds	r24, 0x00B9
    4d96:	90 e0       	ldi	r25, 0x00	; 0
    4d98:	88 7f       	andi	r24, 0xF8	; 248
    4d9a:	88 30       	cpi	r24, 0x08	; 8
    4d9c:	09 f0       	breq	.+2      	; 0x4da0 <TWI_start+0x2c>
    4d9e:	91 e0       	ldi	r25, 0x01	; 1
    4da0:	81 e0       	ldi	r24, 0x01	; 1
    4da2:	98 27       	eor	r25, r24
    4da4:	29 2f       	mov	r18, r25
    4da6:	30 e0       	ldi	r19, 0x00	; 0
	return TRUE;
}
    4da8:	c9 01       	movw	r24, r18
    4daa:	08 95       	ret

00004dac <TWI_send>:

/* Send a byte to the TWI bus */
void TWI_send(uint8_t data)
{
	TWDR = data;
    4dac:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    4db0:	84 e8       	ldi	r24, 0x84	; 132
    4db2:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    4db6:	80 91 bc 00 	lds	r24, 0x00BC
    4dba:	87 ff       	sbrs	r24, 7
    4dbc:	fc cf       	rjmp	.-8      	; 0x4db6 <TWI_send+0xa>
}	
    4dbe:	08 95       	ret

00004dc0 <TWI_rcvr>:

/* Read a byte from the TWI bus */
uint8_t TWI_rcvr(BOOL ack)
{
	if (ack) {
    4dc0:	89 2b       	or	r24, r25
    4dc2:	11 f0       	breq	.+4      	; 0x4dc8 <TWI_rcvr+0x8>
		TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA); 	/* send ACK after data recived */
    4dc4:	84 ec       	ldi	r24, 0xC4	; 196
    4dc6:	01 c0       	rjmp	.+2      	; 0x4dca <TWI_rcvr+0xa>
	} else {
		TWCR = _BV(TWINT) | _BV(TWEN);			/* send NACK after data recived */
    4dc8:	84 e8       	ldi	r24, 0x84	; 132
    4dca:	80 93 bc 00 	sts	0x00BC, r24
	}		 
	while ((TWCR & _BV(TWINT)) == 0) ; 			/* wait for transmission */	
    4dce:	80 91 bc 00 	lds	r24, 0x00BC
    4dd2:	87 ff       	sbrs	r24, 7
    4dd4:	fc cf       	rjmp	.-8      	; 0x4dce <TWI_rcvr+0xe>
	return 	TWDR;
    4dd6:	80 91 bb 00 	lds	r24, 0x00BB
}
    4dda:	08 95       	ret

00004ddc <TWI_stop>:
		
void TWI_stop(void)
{
	TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */
    4ddc:	84 e9       	ldi	r24, 0x94	; 148
    4dde:	80 93 bc 00 	sts	0x00BC, r24
}
    4de2:	08 95       	ret

00004de4 <get_free_log_number>:
#if _USE_LFN
char Lfname[_MAX_LFN+1];
#endif

int get_free_log_number( DIR *dir )
{
    4de4:	0f 93       	push	r16
    4de6:	1f 93       	push	r17
    4de8:	cf 93       	push	r28
    4dea:	df 93       	push	r29
    4dec:	8c 01       	movw	r16, r24
    4dee:	c0 e0       	ldi	r28, 0x00	; 0
    4df0:	d0 e0       	ldi	r29, 0x00	; 0
#if _USE_LFN
	Finfo.lfname = Lfname;
	Finfo.lfsize = sizeof(Lfname);
#endif
	for(;;) {
		res = f_readdir(dir, &Finfo);
    4df2:	c8 01       	movw	r24, r16
    4df4:	65 e6       	ldi	r22, 0x65	; 101
    4df6:	73 e0       	ldi	r23, 0x03	; 3
    4df8:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <f_readdir>
		if ((res != FR_OK) || !Finfo.fname[0]) break;
    4dfc:	88 23       	and	r24, r24
    4dfe:	89 f4       	brne	.+34     	; 0x4e22 <get_free_log_number+0x3e>
    4e00:	80 91 6e 03 	lds	r24, 0x036E
    4e04:	88 23       	and	r24, r24
    4e06:	69 f0       	breq	.+26     	; 0x4e22 <get_free_log_number+0x3e>
		if ( atoi(&(Finfo.fname[0])) > maxname )
    4e08:	8e e6       	ldi	r24, 0x6E	; 110
    4e0a:	93 e0       	ldi	r25, 0x03	; 3
    4e0c:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <atoi>
    4e10:	c8 17       	cp	r28, r24
    4e12:	d9 07       	cpc	r29, r25
    4e14:	70 f7       	brcc	.-36     	; 0x4df2 <get_free_log_number+0xe>
			maxname = atoi(&(Finfo.fname[0]));
    4e16:	8e e6       	ldi	r24, 0x6E	; 110
    4e18:	93 e0       	ldi	r25, 0x03	; 3
    4e1a:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <atoi>
    4e1e:	ec 01       	movw	r28, r24
    4e20:	e8 cf       	rjmp	.-48     	; 0x4df2 <get_free_log_number+0xe>
    4e22:	9e 01       	movw	r18, r28
    4e24:	2f 5f       	subi	r18, 0xFF	; 255
    4e26:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	return maxname + 1;
}
    4e28:	c9 01       	movw	r24, r18
    4e2a:	df 91       	pop	r29
    4e2c:	cf 91       	pop	r28
    4e2e:	1f 91       	pop	r17
    4e30:	0f 91       	pop	r16
    4e32:	08 95       	ret

00004e34 <xputc>:

.global xputc
.func xputc
xputc:
#ifdef CR_CRLF
	cpi	r24, 10		;LF --> CRLF
    4e34:	8a 30       	cpi	r24, 0x0A	; 10
	brne	1f		;
    4e36:	19 f4       	brne	.+6      	; 0x4e3e <xputc+0xa>
	ldi	r24, 13		;
    4e38:	8d e0       	ldi	r24, 0x0D	; 13
	rcall	1f		;
    4e3a:	01 d0       	rcall	.+2      	; 0x4e3e <xputc+0xa>
	ldi	r24, 10		;/
    4e3c:	8a e0       	ldi	r24, 0x0A	; 10
1:
#endif
	push	ZH
    4e3e:	ff 93       	push	r31
	push	ZL
    4e40:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
    4e42:	e0 91 31 01 	lds	r30, 0x0131
	lds	ZH, xfunc_out+1	;/
    4e46:	f0 91 32 01 	lds	r31, 0x0132
	icall
    4e4a:	09 95       	icall
	pop	ZL
    4e4c:	ef 91       	pop	r30
	pop	ZH
    4e4e:	ff 91       	pop	r31
	ret
    4e50:	08 95       	ret

00004e52 <xputs>:

#ifdef USE_XPUTS
.global xputs
.func xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
    4e52:	fc 01       	movw	r30, r24
1:	_LPMI	r24
    4e54:	85 91       	lpm	r24, Z+
	cpi	r24, 0
    4e56:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
    4e58:	11 f0       	breq	.+4      	; 0x4e5e <xputs+0xc>
	rcall	xputc
    4e5a:	ec df       	rcall	.-40     	; 0x4e34 <xputc>
	rjmp	1b
    4e5c:	fb cf       	rjmp	.-10     	; 0x4e54 <xputs+0x2>
2:	ret
    4e5e:	08 95       	ret

00004e60 <xitoa>:
#ifdef USE_XITOA
.global xitoa
.func xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
    4e60:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
    4e62:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
    4e64:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
    4e66:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
    4e68:	0c c0       	rjmp	.+24     	; 0x4e82 <xitoa+0x22>
	neg	r20		;
    4e6a:	41 95       	neg	r20
	sbrs	r25, 7		;
    4e6c:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
    4e6e:	09 c0       	rjmp	.+18     	; 0x4e82 <xitoa+0x22>
	ldi	r30, '-'	;
    4e70:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
    4e72:	60 95       	com	r22
	com	r23		;
    4e74:	70 95       	com	r23
	com	r24		;
    4e76:	80 95       	com	r24
	com	r25		;
    4e78:	90 95       	com	r25
	adc	r22, r1		;
    4e7a:	61 1d       	adc	r22, r1
	adc	r23, r1		;
    4e7c:	71 1d       	adc	r23, r1
	adc	r24, r1		;
    4e7e:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
    4e80:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
    4e82:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
    4e84:	02 c0       	rjmp	.+4      	; 0x4e8a <xitoa+0x2a>
	neg	r18		;
    4e86:	21 95       	neg	r18
	ldi	r19, '0'	;/
    4e88:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
    4e8a:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
    4e8c:	aa 27       	eor	r26, r26
2:	lsl	r22		;
    4e8e:	66 0f       	add	r22, r22
	rol	r23		;
    4e90:	77 1f       	adc	r23, r23
	rol	r24		;
    4e92:	88 1f       	adc	r24, r24
	rol	r25		;
    4e94:	99 1f       	adc	r25, r25
	rol	r26		;
    4e96:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
    4e98:	a4 17       	cp	r26, r20
	brcs	3f		;
    4e9a:	10 f0       	brcs	.+4      	; 0x4ea0 <xitoa+0x40>
	sub	r26, r20	;
    4e9c:	a4 1b       	sub	r26, r20
	inc	r22		;
    4e9e:	63 95       	inc	r22
3:	dec	r21		;
    4ea0:	5a 95       	dec	r21
	brne	2b		;/
    4ea2:	a9 f7       	brne	.-22     	; 0x4e8e <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
    4ea4:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
    4ea6:	08 f0       	brcs	.+2      	; 0x4eaa <xitoa+0x4a>
	subi	r26, -7		;
    4ea8:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
    4eaa:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
    4eac:	af 93       	push	r26
	inc	r31		;/
    4eae:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
    4eb0:	61 15       	cp	r22, r1
	cpc	r23, r1		;
    4eb2:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
    4eb4:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
    4eb6:	91 05       	cpc	r25, r1
	brne	1b		;/
    4eb8:	41 f7       	brne	.-48     	; 0x4e8a <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
    4eba:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
    4ebc:	11 f4       	brne	.+4      	; 0x4ec2 <xitoa+0x62>
	push	r30		;
    4ebe:	ef 93       	push	r30
	inc	r31		;/
    4ec0:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
    4ec2:	f2 17       	cp	r31, r18
	brcc	6f		;
    4ec4:	18 f4       	brcc	.+6      	; 0x4ecc <xitoa+0x6c>
	push	r19		;
    4ec6:	3f 93       	push	r19
	inc	r31		;
    4ec8:	f3 95       	inc	r31
	rjmp	5b		;/
    4eca:	fb cf       	rjmp	.-10     	; 0x4ec2 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
    4ecc:	8f 91       	pop	r24
	rcall	xputc		;
    4ece:	b2 df       	rcall	.-156    	; 0x4e34 <xputc>
	dec	r31		;
    4ed0:	fa 95       	dec	r31
	brne	6b		;/
    4ed2:	e1 f7       	brne	.-8      	; 0x4ecc <xitoa+0x6c>

	ret
    4ed4:	08 95       	ret

00004ed6 <xprintf>:

#ifdef USE_XPRINTF
.global xprintf
.func xprintf
xprintf:
	push	YH
    4ed6:	df 93       	push	r29
	push	YL
    4ed8:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
    4eda:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
    4edc:	de b7       	in	r29, 0x3e	; 62
	clr	YH
#endif
#if FLASHEND > 0x1FFFF
	adiw	YL, 6		;Y = pointer to arguments
#else
	adiw	YL, 5		;Y = pointer to arguments
    4ede:	25 96       	adiw	r28, 0x05	; 5
#endif
	ld	ZL, Y+		;Z = pointer to format string
    4ee0:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
    4ee2:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
    4ee4:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
    4ee6:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
    4ee8:	21 f0       	breq	.+8      	; 0x4ef2 <xprintf+0x1c>
	cpi	r24, '%'	;Is format?
    4eea:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
    4eec:	29 f0       	breq	.+10     	; 0x4ef8 <xprintf+0x22>
1:	rcall	xputc		;Put a normal character
    4eee:	a2 df       	rcall	.-188    	; 0x4e34 <xputc>
	rjmp	0b		;/
    4ef0:	f9 cf       	rjmp	.-14     	; 0x4ee4 <xprintf+0xe>
90:	pop	YL
    4ef2:	cf 91       	pop	r28
	pop	YH
    4ef4:	df 91       	pop	r29
	ret
    4ef6:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
    4ef8:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
    4efa:	e8 94       	clt
	_LPMI	r21		;Get flags
    4efc:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
    4efe:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
    4f00:	b1 f3       	breq	.-20     	; 0x4eee <xprintf+0x18>
	cpi	r21, '0'	;Zero filled?
    4f02:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
    4f04:	11 f4       	brne	.+4      	; 0x4f0a <xprintf+0x34>
	set			;/
    4f06:	68 94       	set
22:	_LPMI	r21		;Get width
    4f08:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
    4f0a:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
    4f0c:	48 f4       	brcc	.+18     	; 0x4f20 <xprintf+0x4a>
	subi	r21, '0'	;
    4f0e:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
    4f10:	80 f3       	brcs	.-32     	; 0x4ef2 <xprintf+0x1c>
	lsl	r18		;
    4f12:	22 0f       	add	r18, r18
	mov	r0, r18		;
    4f14:	02 2e       	mov	r0, r18
	lsl	r18		;
    4f16:	22 0f       	add	r18, r18
	lsl	r18		;
    4f18:	22 0f       	add	r18, r18
	add	r18, r0		;
    4f1a:	20 0d       	add	r18, r0
	add	r18, r21	;
    4f1c:	25 0f       	add	r18, r21
	rjmp	22b		;/
    4f1e:	f4 cf       	rjmp	.-24     	; 0x4f08 <xprintf+0x32>

24:	brtc	25f		;get value (low word)
    4f20:	0e f4       	brtc	.+2      	; 0x4f24 <xprintf+0x4e>
	neg	r18		;
    4f22:	21 95       	neg	r18
25:	ld	r24, Y+		;
    4f24:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
    4f26:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
    4f28:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
    4f2a:	09 f3       	breq	.-62     	; 0x4eee <xprintf+0x18>
	cpi	r21, 's'	;Is type RAM string?
    4f2c:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
    4f2e:	29 f1       	breq	.+74     	; 0x4f7a <xprintf+0xa4>
	cpi	r21, 'S'	;Is type ROM string?
    4f30:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
    4f32:	59 f1       	breq	.+86     	; 0x4f8a <xprintf+0xb4>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
    4f34:	bc 01       	movw	r22, r24
	clr	r24		;
    4f36:	88 27       	eor	r24, r24
	clr	r25		;
    4f38:	99 27       	eor	r25, r25
	clt			;/
    4f3a:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
    4f3c:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
    4f3e:	21 f4       	brne	.+8      	; 0x4f48 <xprintf+0x72>
	ld	r24, Y+		;get value (high word)
    4f40:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
    4f42:	99 91       	ld	r25, Y+
	set			;
    4f44:	68 94       	set
	_LPMI	r21		;/
    4f46:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
    4f48:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
    4f4a:	39 f4       	brne	.+14     	; 0x4f5a <xprintf+0x84>
	ldi	r20, -10	;
    4f4c:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
    4f4e:	7e f0       	brts	.+30     	; 0x4f6e <xprintf+0x98>
	sbrs	r23, 7		;
    4f50:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
    4f52:	0d c0       	rjmp	.+26     	; 0x4f6e <xprintf+0x98>
	ldi	r24, -1		;
    4f54:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
    4f56:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
    4f58:	0a c0       	rjmp	.+20     	; 0x4f6e <xprintf+0x98>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
    4f5a:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
    4f5c:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
    4f5e:	39 f0       	breq	.+14     	; 0x4f6e <xprintf+0x98>
	cpi	r21, 'X'	;Is type hexdecimal?
    4f60:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
    4f62:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
    4f64:	21 f0       	breq	.+8      	; 0x4f6e <xprintf+0x98>
	cpi	r21, 'b'	;Is type binary?
    4f66:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
    4f68:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
    4f6a:	09 f0       	breq	.+2      	; 0x4f6e <xprintf+0x98>
	rjmp	90b		;abort
    4f6c:	c2 cf       	rjmp	.-124    	; 0x4ef2 <xprintf+0x1c>
40:	push	ZH		;Output the value
    4f6e:	ff 93       	push	r31
	push	ZL		;
    4f70:	ef 93       	push	r30
	rcall	xitoa		;
    4f72:	76 df       	rcall	.-276    	; 0x4e60 <xitoa>
42:	pop	ZL		;
    4f74:	ef 91       	pop	r30
	pop	ZH		;
    4f76:	ff 91       	pop	r31
	rjmp	0b		;/
    4f78:	b5 cf       	rjmp	.-150    	; 0x4ee4 <xprintf+0xe>

50:	push	ZH		;Put a string on the RAM
    4f7a:	ff 93       	push	r31
	push	ZL
    4f7c:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
    4f7e:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
    4f80:	81 91       	ld	r24, Z+
	cpi	r24, 0
    4f82:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
    4f84:	b9 f3       	breq	.-18     	; 0x4f74 <xprintf+0x9e>
	rcall	xputc
    4f86:	56 df       	rcall	.-340    	; 0x4e34 <xputc>
	rjmp	51b
    4f88:	fb cf       	rjmp	.-10     	; 0x4f80 <xprintf+0xaa>

60:	push	ZH		;Put a string on the ROM
    4f8a:	ff 93       	push	r31
	push	ZL
    4f8c:	ef 93       	push	r30
	rcall	xputs
    4f8e:	61 df       	rcall	.-318    	; 0x4e52 <xputs>
	rjmp	42b
    4f90:	f1 cf       	rjmp	.-30     	; 0x4f74 <xprintf+0x9e>

00004f92 <xatoi>:

#ifdef USE_XATOI
.global xatoi
.func xatoi
xatoi:
	_MOVW	r1, r0, r23, r22
    4f92:	0b 01       	movw	r0, r22
	_MOVW	XH, XL, r25, r24
    4f94:	dc 01       	movw	r26, r24
	ld	ZL, X+
    4f96:	ed 91       	ld	r30, X+
	ld	ZH, X+
    4f98:	fd 91       	ld	r31, X+
	clr	r18		;r21:r18 = 0;
    4f9a:	22 27       	eor	r18, r18
	clr	r19		;
    4f9c:	33 27       	eor	r19, r19
	clr	r20		;
    4f9e:	44 27       	eor	r20, r20
	clr	r21		;/
    4fa0:	55 27       	eor	r21, r21
	clt			;T = 0;
    4fa2:	e8 94       	clt

	ldi	r25, 10		;r25 = 10;
    4fa4:	9a e0       	ldi	r25, 0x0A	; 10
	rjmp	41f		;/
    4fa6:	01 c0       	rjmp	.+2      	; 0x4faa <xatoi+0x18>
40:	adiw	ZL, 1		;Z++;
    4fa8:	31 96       	adiw	r30, 0x01	; 1
41:	ld	r22, Z		;r22 = *Z;
    4faa:	60 81       	ld	r22, Z
	cpi	r22, ' '	;if(r22 == ' ') continue
    4fac:	60 32       	cpi	r22, 0x20	; 32
	breq	40b		;/
    4fae:	e1 f3       	breq	.-8      	; 0x4fa8 <xatoi+0x16>
	brcs	70f		;if(r22 < ' ') error;
    4fb0:	a8 f1       	brcs	.+106    	; 0x501c <xatoi+0x8a>
	cpi	r22, '-'	;if(r22 == '-') {
    4fb2:	6d 32       	cpi	r22, 0x2D	; 45
	brne	42f		; T = 1;
    4fb4:	11 f4       	brne	.+4      	; 0x4fba <xatoi+0x28>
	set			; continue;
    4fb6:	68 94       	set
	rjmp	40b		;}
    4fb8:	f7 cf       	rjmp	.-18     	; 0x4fa8 <xatoi+0x16>
42:	cpi	r22, '9'+1	;if(r22 > '9') error;
    4fba:	6a 33       	cpi	r22, 0x3A	; 58
	brcc	70f		;/
    4fbc:	78 f5       	brcc	.+94     	; 0x501c <xatoi+0x8a>
	cpi	r22, '0'	;if(r22 < '0') error;
    4fbe:	60 33       	cpi	r22, 0x30	; 48
	brcs	70f		;/
    4fc0:	68 f1       	brcs	.+90     	; 0x501c <xatoi+0x8a>
	brne	51f		;if(r22 > '0') cv_start;
    4fc2:	71 f4       	brne	.+28     	; 0x4fe0 <xatoi+0x4e>
	ldi	r25, 8		;r25 = 8;
    4fc4:	98 e0       	ldi	r25, 0x08	; 8
	adiw	ZL, 1		;r22 = *(++Z);
    4fc6:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;/
    4fc8:	60 81       	ld	r22, Z
	cpi	r22, ' '+1	;if(r22 <= ' ') exit;
    4fca:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    4fcc:	48 f1       	brcs	.+82     	; 0x5020 <xatoi+0x8e>
	cpi	r22, 'b'	;if(r22 == 'b') {
    4fce:	62 36       	cpi	r22, 0x62	; 98
	brne	43f		; r25 = 2;
    4fd0:	11 f4       	brne	.+4      	; 0x4fd6 <xatoi+0x44>
	ldi	r25, 2		; cv_start;
    4fd2:	92 e0       	ldi	r25, 0x02	; 2
	rjmp	50f		;}
    4fd4:	03 c0       	rjmp	.+6      	; 0x4fdc <xatoi+0x4a>
43:	cpi	r22, 'x'	;if(r22 != 'x') error;
    4fd6:	68 37       	cpi	r22, 0x78	; 120
	brne	51f		;/
    4fd8:	19 f4       	brne	.+6      	; 0x4fe0 <xatoi+0x4e>
	ldi	r25, 16		;r25 = 16;
    4fda:	90 e1       	ldi	r25, 0x10	; 16

50:	adiw	ZL, 1		;Z++;
    4fdc:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;r22 = *Z;
    4fde:	60 81       	ld	r22, Z
51:	cpi	r22, ' '+1	;if(r22 <= ' ') break;
    4fe0:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    4fe2:	f0 f0       	brcs	.+60     	; 0x5020 <xatoi+0x8e>
	cpi	r22, 'a'	;if(r22 >= 'a') r22 =- 0x20;
    4fe4:	61 36       	cpi	r22, 0x61	; 97
	brcs	52f		;
    4fe6:	08 f0       	brcs	.+2      	; 0x4fea <xatoi+0x58>
	subi	r22, 0x20	;/
    4fe8:	60 52       	subi	r22, 0x20	; 32
52:	subi	r22, '0'	;if((r22 -= '0') < 0) error;
    4fea:	60 53       	subi	r22, 0x30	; 48
	brcs	70f		;/
    4fec:	b8 f0       	brcs	.+46     	; 0x501c <xatoi+0x8a>
	cpi	r22, 10		;if(r22 >= 10) {
    4fee:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	53f		; r22 -= 7;
    4ff0:	18 f0       	brcs	.+6      	; 0x4ff8 <xatoi+0x66>
	subi	r22, 7		; if(r22 < 10) 
    4ff2:	67 50       	subi	r22, 0x07	; 7
	cpi	r22, 10		;
    4ff4:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	70f		;}
    4ff6:	90 f0       	brcs	.+36     	; 0x501c <xatoi+0x8a>
53:	cp	r22, r25	;if(r22 >= r25) error;
    4ff8:	69 17       	cp	r22, r25
	brcc	70f		;/
    4ffa:	80 f4       	brcc	.+32     	; 0x501c <xatoi+0x8a>
60:	ldi	r24, 33		;r21:r18 *= r25;
    4ffc:	81 e2       	ldi	r24, 0x21	; 33
	sub	r23, r23	;
    4ffe:	77 1b       	sub	r23, r23
61:	brcc	62f		;
    5000:	08 f4       	brcc	.+2      	; 0x5004 <xatoi+0x72>
	add	r23, r25	;
    5002:	79 0f       	add	r23, r25
62:	lsr	r23		;
    5004:	76 95       	lsr	r23
	ror	r21		;
    5006:	57 95       	ror	r21
	ror	r20		;
    5008:	47 95       	ror	r20
	ror	r19		;
    500a:	37 95       	ror	r19
	ror	r18		;
    500c:	27 95       	ror	r18
	dec	r24		;
    500e:	8a 95       	dec	r24
	brne	61b		;/
    5010:	b9 f7       	brne	.-18     	; 0x5000 <xatoi+0x6e>
	add	r18, r22	;r21:r18 += r22;
    5012:	26 0f       	add	r18, r22
	adc	r19, r24	;
    5014:	38 1f       	adc	r19, r24
	adc	r20, r24	;
    5016:	48 1f       	adc	r20, r24
	adc	r21, r24	;/
    5018:	58 1f       	adc	r21, r24
	rjmp	50b		;repeat
    501a:	e0 cf       	rjmp	.-64     	; 0x4fdc <xatoi+0x4a>

70:	ldi	r24, 0
    501c:	80 e0       	ldi	r24, 0x00	; 0
	rjmp	81f
    501e:	01 c0       	rjmp	.+2      	; 0x5022 <xatoi+0x90>
80:	ldi	r24, 1
    5020:	81 e0       	ldi	r24, 0x01	; 1
81:	brtc	82f
    5022:	4e f4       	brtc	.+18     	; 0x5036 <xatoi+0xa4>
	clr	r22
    5024:	66 27       	eor	r22, r22
	com	r18
    5026:	20 95       	com	r18
	com	r19
    5028:	30 95       	com	r19
	com	r20
    502a:	40 95       	com	r20
	com	r21
    502c:	50 95       	com	r21
	adc	r18, r22
    502e:	26 1f       	adc	r18, r22
	adc	r19, r22
    5030:	36 1f       	adc	r19, r22
	adc	r20, r22
    5032:	46 1f       	adc	r20, r22
	adc	r21, r22
    5034:	56 1f       	adc	r21, r22
82:	st	-X, ZH
    5036:	fe 93       	st	-X, r31
	st	-X, ZL
    5038:	ee 93       	st	-X, r30
	_MOVW	XH, XL, r1, r0
    503a:	d0 01       	movw	r26, r0
	st	X+, r18
    503c:	2d 93       	st	X+, r18
	st	X+, r19
    503e:	3d 93       	st	X+, r19
	st	X+, r20
    5040:	4d 93       	st	X+, r20
	st	X+, r21
    5042:	5d 93       	st	X+, r21
	clr	r1
    5044:	11 24       	eor	r1, r1
	ret
    5046:	08 95       	ret

00005048 <_fpadd_parts>:
    5048:	a0 e0       	ldi	r26, 0x00	; 0
    504a:	b0 e0       	ldi	r27, 0x00	; 0
    504c:	ea e2       	ldi	r30, 0x2A	; 42
    504e:	f8 e2       	ldi	r31, 0x28	; 40
    5050:	0c 94 76 2d 	jmp	0x5aec	; 0x5aec <__prologue_saves__>
    5054:	dc 01       	movw	r26, r24
    5056:	2b 01       	movw	r4, r22
    5058:	fa 01       	movw	r30, r20
    505a:	9c 91       	ld	r25, X
    505c:	92 30       	cpi	r25, 0x02	; 2
    505e:	08 f4       	brcc	.+2      	; 0x5062 <_fpadd_parts+0x1a>
    5060:	39 c1       	rjmp	.+626    	; 0x52d4 <_fpadd_parts+0x28c>
    5062:	eb 01       	movw	r28, r22
    5064:	88 81       	ld	r24, Y
    5066:	82 30       	cpi	r24, 0x02	; 2
    5068:	08 f4       	brcc	.+2      	; 0x506c <_fpadd_parts+0x24>
    506a:	33 c1       	rjmp	.+614    	; 0x52d2 <_fpadd_parts+0x28a>
    506c:	94 30       	cpi	r25, 0x04	; 4
    506e:	69 f4       	brne	.+26     	; 0x508a <_fpadd_parts+0x42>
    5070:	84 30       	cpi	r24, 0x04	; 4
    5072:	09 f0       	breq	.+2      	; 0x5076 <_fpadd_parts+0x2e>
    5074:	2f c1       	rjmp	.+606    	; 0x52d4 <_fpadd_parts+0x28c>
    5076:	11 96       	adiw	r26, 0x01	; 1
    5078:	9c 91       	ld	r25, X
    507a:	11 97       	sbiw	r26, 0x01	; 1
    507c:	89 81       	ldd	r24, Y+1	; 0x01
    507e:	98 17       	cp	r25, r24
    5080:	09 f4       	brne	.+2      	; 0x5084 <_fpadd_parts+0x3c>
    5082:	28 c1       	rjmp	.+592    	; 0x52d4 <_fpadd_parts+0x28c>
    5084:	a9 e1       	ldi	r26, 0x19	; 25
    5086:	b1 e0       	ldi	r27, 0x01	; 1
    5088:	25 c1       	rjmp	.+586    	; 0x52d4 <_fpadd_parts+0x28c>
    508a:	84 30       	cpi	r24, 0x04	; 4
    508c:	09 f4       	brne	.+2      	; 0x5090 <_fpadd_parts+0x48>
    508e:	21 c1       	rjmp	.+578    	; 0x52d2 <_fpadd_parts+0x28a>
    5090:	82 30       	cpi	r24, 0x02	; 2
    5092:	a9 f4       	brne	.+42     	; 0x50be <_fpadd_parts+0x76>
    5094:	92 30       	cpi	r25, 0x02	; 2
    5096:	09 f0       	breq	.+2      	; 0x509a <_fpadd_parts+0x52>
    5098:	1d c1       	rjmp	.+570    	; 0x52d4 <_fpadd_parts+0x28c>
    509a:	9a 01       	movw	r18, r20
    509c:	ad 01       	movw	r20, r26
    509e:	88 e0       	ldi	r24, 0x08	; 8
    50a0:	ea 01       	movw	r28, r20
    50a2:	09 90       	ld	r0, Y+
    50a4:	ae 01       	movw	r20, r28
    50a6:	e9 01       	movw	r28, r18
    50a8:	09 92       	st	Y+, r0
    50aa:	9e 01       	movw	r18, r28
    50ac:	81 50       	subi	r24, 0x01	; 1
    50ae:	c1 f7       	brne	.-16     	; 0x50a0 <_fpadd_parts+0x58>
    50b0:	e2 01       	movw	r28, r4
    50b2:	89 81       	ldd	r24, Y+1	; 0x01
    50b4:	11 96       	adiw	r26, 0x01	; 1
    50b6:	9c 91       	ld	r25, X
    50b8:	89 23       	and	r24, r25
    50ba:	81 83       	std	Z+1, r24	; 0x01
    50bc:	08 c1       	rjmp	.+528    	; 0x52ce <_fpadd_parts+0x286>
    50be:	92 30       	cpi	r25, 0x02	; 2
    50c0:	09 f4       	brne	.+2      	; 0x50c4 <_fpadd_parts+0x7c>
    50c2:	07 c1       	rjmp	.+526    	; 0x52d2 <_fpadd_parts+0x28a>
    50c4:	12 96       	adiw	r26, 0x02	; 2
    50c6:	2d 90       	ld	r2, X+
    50c8:	3c 90       	ld	r3, X
    50ca:	13 97       	sbiw	r26, 0x03	; 3
    50cc:	eb 01       	movw	r28, r22
    50ce:	8a 81       	ldd	r24, Y+2	; 0x02
    50d0:	9b 81       	ldd	r25, Y+3	; 0x03
    50d2:	14 96       	adiw	r26, 0x04	; 4
    50d4:	ad 90       	ld	r10, X+
    50d6:	bd 90       	ld	r11, X+
    50d8:	cd 90       	ld	r12, X+
    50da:	dc 90       	ld	r13, X
    50dc:	17 97       	sbiw	r26, 0x07	; 7
    50de:	ec 80       	ldd	r14, Y+4	; 0x04
    50e0:	fd 80       	ldd	r15, Y+5	; 0x05
    50e2:	0e 81       	ldd	r16, Y+6	; 0x06
    50e4:	1f 81       	ldd	r17, Y+7	; 0x07
    50e6:	91 01       	movw	r18, r2
    50e8:	28 1b       	sub	r18, r24
    50ea:	39 0b       	sbc	r19, r25
    50ec:	b9 01       	movw	r22, r18
    50ee:	37 ff       	sbrs	r19, 7
    50f0:	04 c0       	rjmp	.+8      	; 0x50fa <_fpadd_parts+0xb2>
    50f2:	66 27       	eor	r22, r22
    50f4:	77 27       	eor	r23, r23
    50f6:	62 1b       	sub	r22, r18
    50f8:	73 0b       	sbc	r23, r19
    50fa:	60 32       	cpi	r22, 0x20	; 32
    50fc:	71 05       	cpc	r23, r1
    50fe:	0c f0       	brlt	.+2      	; 0x5102 <_fpadd_parts+0xba>
    5100:	61 c0       	rjmp	.+194    	; 0x51c4 <_fpadd_parts+0x17c>
    5102:	12 16       	cp	r1, r18
    5104:	13 06       	cpc	r1, r19
    5106:	6c f5       	brge	.+90     	; 0x5162 <_fpadd_parts+0x11a>
    5108:	37 01       	movw	r6, r14
    510a:	48 01       	movw	r8, r16
    510c:	06 2e       	mov	r0, r22
    510e:	04 c0       	rjmp	.+8      	; 0x5118 <_fpadd_parts+0xd0>
    5110:	96 94       	lsr	r9
    5112:	87 94       	ror	r8
    5114:	77 94       	ror	r7
    5116:	67 94       	ror	r6
    5118:	0a 94       	dec	r0
    511a:	d2 f7       	brpl	.-12     	; 0x5110 <_fpadd_parts+0xc8>
    511c:	21 e0       	ldi	r18, 0x01	; 1
    511e:	30 e0       	ldi	r19, 0x00	; 0
    5120:	40 e0       	ldi	r20, 0x00	; 0
    5122:	50 e0       	ldi	r21, 0x00	; 0
    5124:	04 c0       	rjmp	.+8      	; 0x512e <_fpadd_parts+0xe6>
    5126:	22 0f       	add	r18, r18
    5128:	33 1f       	adc	r19, r19
    512a:	44 1f       	adc	r20, r20
    512c:	55 1f       	adc	r21, r21
    512e:	6a 95       	dec	r22
    5130:	d2 f7       	brpl	.-12     	; 0x5126 <_fpadd_parts+0xde>
    5132:	21 50       	subi	r18, 0x01	; 1
    5134:	30 40       	sbci	r19, 0x00	; 0
    5136:	40 40       	sbci	r20, 0x00	; 0
    5138:	50 40       	sbci	r21, 0x00	; 0
    513a:	2e 21       	and	r18, r14
    513c:	3f 21       	and	r19, r15
    513e:	40 23       	and	r20, r16
    5140:	51 23       	and	r21, r17
    5142:	21 15       	cp	r18, r1
    5144:	31 05       	cpc	r19, r1
    5146:	41 05       	cpc	r20, r1
    5148:	51 05       	cpc	r21, r1
    514a:	21 f0       	breq	.+8      	; 0x5154 <_fpadd_parts+0x10c>
    514c:	21 e0       	ldi	r18, 0x01	; 1
    514e:	30 e0       	ldi	r19, 0x00	; 0
    5150:	40 e0       	ldi	r20, 0x00	; 0
    5152:	50 e0       	ldi	r21, 0x00	; 0
    5154:	79 01       	movw	r14, r18
    5156:	8a 01       	movw	r16, r20
    5158:	e6 28       	or	r14, r6
    515a:	f7 28       	or	r15, r7
    515c:	08 29       	or	r16, r8
    515e:	19 29       	or	r17, r9
    5160:	3c c0       	rjmp	.+120    	; 0x51da <_fpadd_parts+0x192>
    5162:	23 2b       	or	r18, r19
    5164:	d1 f1       	breq	.+116    	; 0x51da <_fpadd_parts+0x192>
    5166:	26 0e       	add	r2, r22
    5168:	37 1e       	adc	r3, r23
    516a:	35 01       	movw	r6, r10
    516c:	46 01       	movw	r8, r12
    516e:	06 2e       	mov	r0, r22
    5170:	04 c0       	rjmp	.+8      	; 0x517a <_fpadd_parts+0x132>
    5172:	96 94       	lsr	r9
    5174:	87 94       	ror	r8
    5176:	77 94       	ror	r7
    5178:	67 94       	ror	r6
    517a:	0a 94       	dec	r0
    517c:	d2 f7       	brpl	.-12     	; 0x5172 <_fpadd_parts+0x12a>
    517e:	21 e0       	ldi	r18, 0x01	; 1
    5180:	30 e0       	ldi	r19, 0x00	; 0
    5182:	40 e0       	ldi	r20, 0x00	; 0
    5184:	50 e0       	ldi	r21, 0x00	; 0
    5186:	04 c0       	rjmp	.+8      	; 0x5190 <_fpadd_parts+0x148>
    5188:	22 0f       	add	r18, r18
    518a:	33 1f       	adc	r19, r19
    518c:	44 1f       	adc	r20, r20
    518e:	55 1f       	adc	r21, r21
    5190:	6a 95       	dec	r22
    5192:	d2 f7       	brpl	.-12     	; 0x5188 <_fpadd_parts+0x140>
    5194:	21 50       	subi	r18, 0x01	; 1
    5196:	30 40       	sbci	r19, 0x00	; 0
    5198:	40 40       	sbci	r20, 0x00	; 0
    519a:	50 40       	sbci	r21, 0x00	; 0
    519c:	2a 21       	and	r18, r10
    519e:	3b 21       	and	r19, r11
    51a0:	4c 21       	and	r20, r12
    51a2:	5d 21       	and	r21, r13
    51a4:	21 15       	cp	r18, r1
    51a6:	31 05       	cpc	r19, r1
    51a8:	41 05       	cpc	r20, r1
    51aa:	51 05       	cpc	r21, r1
    51ac:	21 f0       	breq	.+8      	; 0x51b6 <_fpadd_parts+0x16e>
    51ae:	21 e0       	ldi	r18, 0x01	; 1
    51b0:	30 e0       	ldi	r19, 0x00	; 0
    51b2:	40 e0       	ldi	r20, 0x00	; 0
    51b4:	50 e0       	ldi	r21, 0x00	; 0
    51b6:	59 01       	movw	r10, r18
    51b8:	6a 01       	movw	r12, r20
    51ba:	a6 28       	or	r10, r6
    51bc:	b7 28       	or	r11, r7
    51be:	c8 28       	or	r12, r8
    51c0:	d9 28       	or	r13, r9
    51c2:	0b c0       	rjmp	.+22     	; 0x51da <_fpadd_parts+0x192>
    51c4:	82 15       	cp	r24, r2
    51c6:	93 05       	cpc	r25, r3
    51c8:	2c f0       	brlt	.+10     	; 0x51d4 <_fpadd_parts+0x18c>
    51ca:	1c 01       	movw	r2, r24
    51cc:	aa 24       	eor	r10, r10
    51ce:	bb 24       	eor	r11, r11
    51d0:	65 01       	movw	r12, r10
    51d2:	03 c0       	rjmp	.+6      	; 0x51da <_fpadd_parts+0x192>
    51d4:	ee 24       	eor	r14, r14
    51d6:	ff 24       	eor	r15, r15
    51d8:	87 01       	movw	r16, r14
    51da:	11 96       	adiw	r26, 0x01	; 1
    51dc:	9c 91       	ld	r25, X
    51de:	d2 01       	movw	r26, r4
    51e0:	11 96       	adiw	r26, 0x01	; 1
    51e2:	8c 91       	ld	r24, X
    51e4:	98 17       	cp	r25, r24
    51e6:	09 f4       	brne	.+2      	; 0x51ea <_fpadd_parts+0x1a2>
    51e8:	45 c0       	rjmp	.+138    	; 0x5274 <_fpadd_parts+0x22c>
    51ea:	99 23       	and	r25, r25
    51ec:	39 f0       	breq	.+14     	; 0x51fc <_fpadd_parts+0x1b4>
    51ee:	a8 01       	movw	r20, r16
    51f0:	97 01       	movw	r18, r14
    51f2:	2a 19       	sub	r18, r10
    51f4:	3b 09       	sbc	r19, r11
    51f6:	4c 09       	sbc	r20, r12
    51f8:	5d 09       	sbc	r21, r13
    51fa:	06 c0       	rjmp	.+12     	; 0x5208 <_fpadd_parts+0x1c0>
    51fc:	a6 01       	movw	r20, r12
    51fe:	95 01       	movw	r18, r10
    5200:	2e 19       	sub	r18, r14
    5202:	3f 09       	sbc	r19, r15
    5204:	40 0b       	sbc	r20, r16
    5206:	51 0b       	sbc	r21, r17
    5208:	57 fd       	sbrc	r21, 7
    520a:	08 c0       	rjmp	.+16     	; 0x521c <_fpadd_parts+0x1d4>
    520c:	11 82       	std	Z+1, r1	; 0x01
    520e:	33 82       	std	Z+3, r3	; 0x03
    5210:	22 82       	std	Z+2, r2	; 0x02
    5212:	24 83       	std	Z+4, r18	; 0x04
    5214:	35 83       	std	Z+5, r19	; 0x05
    5216:	46 83       	std	Z+6, r20	; 0x06
    5218:	57 83       	std	Z+7, r21	; 0x07
    521a:	1d c0       	rjmp	.+58     	; 0x5256 <_fpadd_parts+0x20e>
    521c:	81 e0       	ldi	r24, 0x01	; 1
    521e:	81 83       	std	Z+1, r24	; 0x01
    5220:	33 82       	std	Z+3, r3	; 0x03
    5222:	22 82       	std	Z+2, r2	; 0x02
    5224:	88 27       	eor	r24, r24
    5226:	99 27       	eor	r25, r25
    5228:	dc 01       	movw	r26, r24
    522a:	82 1b       	sub	r24, r18
    522c:	93 0b       	sbc	r25, r19
    522e:	a4 0b       	sbc	r26, r20
    5230:	b5 0b       	sbc	r27, r21
    5232:	84 83       	std	Z+4, r24	; 0x04
    5234:	95 83       	std	Z+5, r25	; 0x05
    5236:	a6 83       	std	Z+6, r26	; 0x06
    5238:	b7 83       	std	Z+7, r27	; 0x07
    523a:	0d c0       	rjmp	.+26     	; 0x5256 <_fpadd_parts+0x20e>
    523c:	22 0f       	add	r18, r18
    523e:	33 1f       	adc	r19, r19
    5240:	44 1f       	adc	r20, r20
    5242:	55 1f       	adc	r21, r21
    5244:	24 83       	std	Z+4, r18	; 0x04
    5246:	35 83       	std	Z+5, r19	; 0x05
    5248:	46 83       	std	Z+6, r20	; 0x06
    524a:	57 83       	std	Z+7, r21	; 0x07
    524c:	82 81       	ldd	r24, Z+2	; 0x02
    524e:	93 81       	ldd	r25, Z+3	; 0x03
    5250:	01 97       	sbiw	r24, 0x01	; 1
    5252:	93 83       	std	Z+3, r25	; 0x03
    5254:	82 83       	std	Z+2, r24	; 0x02
    5256:	24 81       	ldd	r18, Z+4	; 0x04
    5258:	35 81       	ldd	r19, Z+5	; 0x05
    525a:	46 81       	ldd	r20, Z+6	; 0x06
    525c:	57 81       	ldd	r21, Z+7	; 0x07
    525e:	da 01       	movw	r26, r20
    5260:	c9 01       	movw	r24, r18
    5262:	01 97       	sbiw	r24, 0x01	; 1
    5264:	a1 09       	sbc	r26, r1
    5266:	b1 09       	sbc	r27, r1
    5268:	8f 5f       	subi	r24, 0xFF	; 255
    526a:	9f 4f       	sbci	r25, 0xFF	; 255
    526c:	af 4f       	sbci	r26, 0xFF	; 255
    526e:	bf 43       	sbci	r27, 0x3F	; 63
    5270:	28 f3       	brcs	.-54     	; 0x523c <_fpadd_parts+0x1f4>
    5272:	0b c0       	rjmp	.+22     	; 0x528a <_fpadd_parts+0x242>
    5274:	91 83       	std	Z+1, r25	; 0x01
    5276:	33 82       	std	Z+3, r3	; 0x03
    5278:	22 82       	std	Z+2, r2	; 0x02
    527a:	ea 0c       	add	r14, r10
    527c:	fb 1c       	adc	r15, r11
    527e:	0c 1d       	adc	r16, r12
    5280:	1d 1d       	adc	r17, r13
    5282:	e4 82       	std	Z+4, r14	; 0x04
    5284:	f5 82       	std	Z+5, r15	; 0x05
    5286:	06 83       	std	Z+6, r16	; 0x06
    5288:	17 83       	std	Z+7, r17	; 0x07
    528a:	83 e0       	ldi	r24, 0x03	; 3
    528c:	80 83       	st	Z, r24
    528e:	24 81       	ldd	r18, Z+4	; 0x04
    5290:	35 81       	ldd	r19, Z+5	; 0x05
    5292:	46 81       	ldd	r20, Z+6	; 0x06
    5294:	57 81       	ldd	r21, Z+7	; 0x07
    5296:	57 ff       	sbrs	r21, 7
    5298:	1a c0       	rjmp	.+52     	; 0x52ce <_fpadd_parts+0x286>
    529a:	c9 01       	movw	r24, r18
    529c:	aa 27       	eor	r26, r26
    529e:	97 fd       	sbrc	r25, 7
    52a0:	a0 95       	com	r26
    52a2:	ba 2f       	mov	r27, r26
    52a4:	81 70       	andi	r24, 0x01	; 1
    52a6:	90 70       	andi	r25, 0x00	; 0
    52a8:	a0 70       	andi	r26, 0x00	; 0
    52aa:	b0 70       	andi	r27, 0x00	; 0
    52ac:	56 95       	lsr	r21
    52ae:	47 95       	ror	r20
    52b0:	37 95       	ror	r19
    52b2:	27 95       	ror	r18
    52b4:	82 2b       	or	r24, r18
    52b6:	93 2b       	or	r25, r19
    52b8:	a4 2b       	or	r26, r20
    52ba:	b5 2b       	or	r27, r21
    52bc:	84 83       	std	Z+4, r24	; 0x04
    52be:	95 83       	std	Z+5, r25	; 0x05
    52c0:	a6 83       	std	Z+6, r26	; 0x06
    52c2:	b7 83       	std	Z+7, r27	; 0x07
    52c4:	82 81       	ldd	r24, Z+2	; 0x02
    52c6:	93 81       	ldd	r25, Z+3	; 0x03
    52c8:	01 96       	adiw	r24, 0x01	; 1
    52ca:	93 83       	std	Z+3, r25	; 0x03
    52cc:	82 83       	std	Z+2, r24	; 0x02
    52ce:	df 01       	movw	r26, r30
    52d0:	01 c0       	rjmp	.+2      	; 0x52d4 <_fpadd_parts+0x28c>
    52d2:	d2 01       	movw	r26, r4
    52d4:	cd 01       	movw	r24, r26
    52d6:	cd b7       	in	r28, 0x3d	; 61
    52d8:	de b7       	in	r29, 0x3e	; 62
    52da:	e2 e1       	ldi	r30, 0x12	; 18
    52dc:	0c 94 92 2d 	jmp	0x5b24	; 0x5b24 <__epilogue_restores__>

000052e0 <__subsf3>:
    52e0:	a0 e2       	ldi	r26, 0x20	; 32
    52e2:	b0 e0       	ldi	r27, 0x00	; 0
    52e4:	e6 e7       	ldi	r30, 0x76	; 118
    52e6:	f9 e2       	ldi	r31, 0x29	; 41
    52e8:	0c 94 82 2d 	jmp	0x5b04	; 0x5b04 <__prologue_saves__+0x18>
    52ec:	69 83       	std	Y+1, r22	; 0x01
    52ee:	7a 83       	std	Y+2, r23	; 0x02
    52f0:	8b 83       	std	Y+3, r24	; 0x03
    52f2:	9c 83       	std	Y+4, r25	; 0x04
    52f4:	2d 83       	std	Y+5, r18	; 0x05
    52f6:	3e 83       	std	Y+6, r19	; 0x06
    52f8:	4f 83       	std	Y+7, r20	; 0x07
    52fa:	58 87       	std	Y+8, r21	; 0x08
    52fc:	e9 e0       	ldi	r30, 0x09	; 9
    52fe:	ee 2e       	mov	r14, r30
    5300:	f1 2c       	mov	r15, r1
    5302:	ec 0e       	add	r14, r28
    5304:	fd 1e       	adc	r15, r29
    5306:	ce 01       	movw	r24, r28
    5308:	01 96       	adiw	r24, 0x01	; 1
    530a:	b7 01       	movw	r22, r14
    530c:	0e 94 9d 2c 	call	0x593a	; 0x593a <__unpack_f>
    5310:	8e 01       	movw	r16, r28
    5312:	0f 5e       	subi	r16, 0xEF	; 239
    5314:	1f 4f       	sbci	r17, 0xFF	; 255
    5316:	ce 01       	movw	r24, r28
    5318:	05 96       	adiw	r24, 0x05	; 5
    531a:	b8 01       	movw	r22, r16
    531c:	0e 94 9d 2c 	call	0x593a	; 0x593a <__unpack_f>
    5320:	8a 89       	ldd	r24, Y+18	; 0x12
    5322:	91 e0       	ldi	r25, 0x01	; 1
    5324:	89 27       	eor	r24, r25
    5326:	8a 8b       	std	Y+18, r24	; 0x12
    5328:	c7 01       	movw	r24, r14
    532a:	b8 01       	movw	r22, r16
    532c:	ae 01       	movw	r20, r28
    532e:	47 5e       	subi	r20, 0xE7	; 231
    5330:	5f 4f       	sbci	r21, 0xFF	; 255
    5332:	0e 94 24 28 	call	0x5048	; 0x5048 <_fpadd_parts>
    5336:	0e 94 c8 2b 	call	0x5790	; 0x5790 <__pack_f>
    533a:	a0 96       	adiw	r28, 0x20	; 32
    533c:	e6 e0       	ldi	r30, 0x06	; 6
    533e:	0c 94 9e 2d 	jmp	0x5b3c	; 0x5b3c <__epilogue_restores__+0x18>

00005342 <__addsf3>:
    5342:	a0 e2       	ldi	r26, 0x20	; 32
    5344:	b0 e0       	ldi	r27, 0x00	; 0
    5346:	e7 ea       	ldi	r30, 0xA7	; 167
    5348:	f9 e2       	ldi	r31, 0x29	; 41
    534a:	0c 94 82 2d 	jmp	0x5b04	; 0x5b04 <__prologue_saves__+0x18>
    534e:	69 83       	std	Y+1, r22	; 0x01
    5350:	7a 83       	std	Y+2, r23	; 0x02
    5352:	8b 83       	std	Y+3, r24	; 0x03
    5354:	9c 83       	std	Y+4, r25	; 0x04
    5356:	2d 83       	std	Y+5, r18	; 0x05
    5358:	3e 83       	std	Y+6, r19	; 0x06
    535a:	4f 83       	std	Y+7, r20	; 0x07
    535c:	58 87       	std	Y+8, r21	; 0x08
    535e:	f9 e0       	ldi	r31, 0x09	; 9
    5360:	ef 2e       	mov	r14, r31
    5362:	f1 2c       	mov	r15, r1
    5364:	ec 0e       	add	r14, r28
    5366:	fd 1e       	adc	r15, r29
    5368:	ce 01       	movw	r24, r28
    536a:	01 96       	adiw	r24, 0x01	; 1
    536c:	b7 01       	movw	r22, r14
    536e:	0e 94 9d 2c 	call	0x593a	; 0x593a <__unpack_f>
    5372:	8e 01       	movw	r16, r28
    5374:	0f 5e       	subi	r16, 0xEF	; 239
    5376:	1f 4f       	sbci	r17, 0xFF	; 255
    5378:	ce 01       	movw	r24, r28
    537a:	05 96       	adiw	r24, 0x05	; 5
    537c:	b8 01       	movw	r22, r16
    537e:	0e 94 9d 2c 	call	0x593a	; 0x593a <__unpack_f>
    5382:	c7 01       	movw	r24, r14
    5384:	b8 01       	movw	r22, r16
    5386:	ae 01       	movw	r20, r28
    5388:	47 5e       	subi	r20, 0xE7	; 231
    538a:	5f 4f       	sbci	r21, 0xFF	; 255
    538c:	0e 94 24 28 	call	0x5048	; 0x5048 <_fpadd_parts>
    5390:	0e 94 c8 2b 	call	0x5790	; 0x5790 <__pack_f>
    5394:	a0 96       	adiw	r28, 0x20	; 32
    5396:	e6 e0       	ldi	r30, 0x06	; 6
    5398:	0c 94 9e 2d 	jmp	0x5b3c	; 0x5b3c <__epilogue_restores__+0x18>

0000539c <__mulsf3>:
    539c:	a0 e2       	ldi	r26, 0x20	; 32
    539e:	b0 e0       	ldi	r27, 0x00	; 0
    53a0:	e4 ed       	ldi	r30, 0xD4	; 212
    53a2:	f9 e2       	ldi	r31, 0x29	; 41
    53a4:	0c 94 76 2d 	jmp	0x5aec	; 0x5aec <__prologue_saves__>
    53a8:	69 83       	std	Y+1, r22	; 0x01
    53aa:	7a 83       	std	Y+2, r23	; 0x02
    53ac:	8b 83       	std	Y+3, r24	; 0x03
    53ae:	9c 83       	std	Y+4, r25	; 0x04
    53b0:	2d 83       	std	Y+5, r18	; 0x05
    53b2:	3e 83       	std	Y+6, r19	; 0x06
    53b4:	4f 83       	std	Y+7, r20	; 0x07
    53b6:	58 87       	std	Y+8, r21	; 0x08
    53b8:	ce 01       	movw	r24, r28
    53ba:	01 96       	adiw	r24, 0x01	; 1
    53bc:	be 01       	movw	r22, r28
    53be:	67 5f       	subi	r22, 0xF7	; 247
    53c0:	7f 4f       	sbci	r23, 0xFF	; 255
    53c2:	0e 94 9d 2c 	call	0x593a	; 0x593a <__unpack_f>
    53c6:	ce 01       	movw	r24, r28
    53c8:	05 96       	adiw	r24, 0x05	; 5
    53ca:	be 01       	movw	r22, r28
    53cc:	6f 5e       	subi	r22, 0xEF	; 239
    53ce:	7f 4f       	sbci	r23, 0xFF	; 255
    53d0:	0e 94 9d 2c 	call	0x593a	; 0x593a <__unpack_f>
    53d4:	99 85       	ldd	r25, Y+9	; 0x09
    53d6:	92 30       	cpi	r25, 0x02	; 2
    53d8:	88 f0       	brcs	.+34     	; 0x53fc <__mulsf3+0x60>
    53da:	89 89       	ldd	r24, Y+17	; 0x11
    53dc:	82 30       	cpi	r24, 0x02	; 2
    53de:	c8 f0       	brcs	.+50     	; 0x5412 <__mulsf3+0x76>
    53e0:	94 30       	cpi	r25, 0x04	; 4
    53e2:	19 f4       	brne	.+6      	; 0x53ea <__mulsf3+0x4e>
    53e4:	82 30       	cpi	r24, 0x02	; 2
    53e6:	51 f4       	brne	.+20     	; 0x53fc <__mulsf3+0x60>
    53e8:	04 c0       	rjmp	.+8      	; 0x53f2 <__mulsf3+0x56>
    53ea:	84 30       	cpi	r24, 0x04	; 4
    53ec:	29 f4       	brne	.+10     	; 0x53f8 <__mulsf3+0x5c>
    53ee:	92 30       	cpi	r25, 0x02	; 2
    53f0:	81 f4       	brne	.+32     	; 0x5412 <__mulsf3+0x76>
    53f2:	89 e1       	ldi	r24, 0x19	; 25
    53f4:	91 e0       	ldi	r25, 0x01	; 1
    53f6:	c6 c0       	rjmp	.+396    	; 0x5584 <__mulsf3+0x1e8>
    53f8:	92 30       	cpi	r25, 0x02	; 2
    53fa:	49 f4       	brne	.+18     	; 0x540e <__mulsf3+0x72>
    53fc:	20 e0       	ldi	r18, 0x00	; 0
    53fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    5400:	8a 89       	ldd	r24, Y+18	; 0x12
    5402:	98 13       	cpse	r25, r24
    5404:	21 e0       	ldi	r18, 0x01	; 1
    5406:	2a 87       	std	Y+10, r18	; 0x0a
    5408:	ce 01       	movw	r24, r28
    540a:	09 96       	adiw	r24, 0x09	; 9
    540c:	bb c0       	rjmp	.+374    	; 0x5584 <__mulsf3+0x1e8>
    540e:	82 30       	cpi	r24, 0x02	; 2
    5410:	49 f4       	brne	.+18     	; 0x5424 <__mulsf3+0x88>
    5412:	20 e0       	ldi	r18, 0x00	; 0
    5414:	9a 85       	ldd	r25, Y+10	; 0x0a
    5416:	8a 89       	ldd	r24, Y+18	; 0x12
    5418:	98 13       	cpse	r25, r24
    541a:	21 e0       	ldi	r18, 0x01	; 1
    541c:	2a 8b       	std	Y+18, r18	; 0x12
    541e:	ce 01       	movw	r24, r28
    5420:	41 96       	adiw	r24, 0x11	; 17
    5422:	b0 c0       	rjmp	.+352    	; 0x5584 <__mulsf3+0x1e8>
    5424:	2d 84       	ldd	r2, Y+13	; 0x0d
    5426:	3e 84       	ldd	r3, Y+14	; 0x0e
    5428:	4f 84       	ldd	r4, Y+15	; 0x0f
    542a:	58 88       	ldd	r5, Y+16	; 0x10
    542c:	6d 88       	ldd	r6, Y+21	; 0x15
    542e:	7e 88       	ldd	r7, Y+22	; 0x16
    5430:	8f 88       	ldd	r8, Y+23	; 0x17
    5432:	98 8c       	ldd	r9, Y+24	; 0x18
    5434:	ee 24       	eor	r14, r14
    5436:	ff 24       	eor	r15, r15
    5438:	87 01       	movw	r16, r14
    543a:	aa 24       	eor	r10, r10
    543c:	bb 24       	eor	r11, r11
    543e:	65 01       	movw	r12, r10
    5440:	40 e0       	ldi	r20, 0x00	; 0
    5442:	50 e0       	ldi	r21, 0x00	; 0
    5444:	60 e0       	ldi	r22, 0x00	; 0
    5446:	70 e0       	ldi	r23, 0x00	; 0
    5448:	e0 e0       	ldi	r30, 0x00	; 0
    544a:	f0 e0       	ldi	r31, 0x00	; 0
    544c:	c1 01       	movw	r24, r2
    544e:	81 70       	andi	r24, 0x01	; 1
    5450:	90 70       	andi	r25, 0x00	; 0
    5452:	89 2b       	or	r24, r25
    5454:	e9 f0       	breq	.+58     	; 0x5490 <__mulsf3+0xf4>
    5456:	e6 0c       	add	r14, r6
    5458:	f7 1c       	adc	r15, r7
    545a:	08 1d       	adc	r16, r8
    545c:	19 1d       	adc	r17, r9
    545e:	9a 01       	movw	r18, r20
    5460:	ab 01       	movw	r20, r22
    5462:	2a 0d       	add	r18, r10
    5464:	3b 1d       	adc	r19, r11
    5466:	4c 1d       	adc	r20, r12
    5468:	5d 1d       	adc	r21, r13
    546a:	80 e0       	ldi	r24, 0x00	; 0
    546c:	90 e0       	ldi	r25, 0x00	; 0
    546e:	a0 e0       	ldi	r26, 0x00	; 0
    5470:	b0 e0       	ldi	r27, 0x00	; 0
    5472:	e6 14       	cp	r14, r6
    5474:	f7 04       	cpc	r15, r7
    5476:	08 05       	cpc	r16, r8
    5478:	19 05       	cpc	r17, r9
    547a:	20 f4       	brcc	.+8      	; 0x5484 <__mulsf3+0xe8>
    547c:	81 e0       	ldi	r24, 0x01	; 1
    547e:	90 e0       	ldi	r25, 0x00	; 0
    5480:	a0 e0       	ldi	r26, 0x00	; 0
    5482:	b0 e0       	ldi	r27, 0x00	; 0
    5484:	ba 01       	movw	r22, r20
    5486:	a9 01       	movw	r20, r18
    5488:	48 0f       	add	r20, r24
    548a:	59 1f       	adc	r21, r25
    548c:	6a 1f       	adc	r22, r26
    548e:	7b 1f       	adc	r23, r27
    5490:	aa 0c       	add	r10, r10
    5492:	bb 1c       	adc	r11, r11
    5494:	cc 1c       	adc	r12, r12
    5496:	dd 1c       	adc	r13, r13
    5498:	97 fe       	sbrs	r9, 7
    549a:	08 c0       	rjmp	.+16     	; 0x54ac <__mulsf3+0x110>
    549c:	81 e0       	ldi	r24, 0x01	; 1
    549e:	90 e0       	ldi	r25, 0x00	; 0
    54a0:	a0 e0       	ldi	r26, 0x00	; 0
    54a2:	b0 e0       	ldi	r27, 0x00	; 0
    54a4:	a8 2a       	or	r10, r24
    54a6:	b9 2a       	or	r11, r25
    54a8:	ca 2a       	or	r12, r26
    54aa:	db 2a       	or	r13, r27
    54ac:	31 96       	adiw	r30, 0x01	; 1
    54ae:	e0 32       	cpi	r30, 0x20	; 32
    54b0:	f1 05       	cpc	r31, r1
    54b2:	49 f0       	breq	.+18     	; 0x54c6 <__mulsf3+0x12a>
    54b4:	66 0c       	add	r6, r6
    54b6:	77 1c       	adc	r7, r7
    54b8:	88 1c       	adc	r8, r8
    54ba:	99 1c       	adc	r9, r9
    54bc:	56 94       	lsr	r5
    54be:	47 94       	ror	r4
    54c0:	37 94       	ror	r3
    54c2:	27 94       	ror	r2
    54c4:	c3 cf       	rjmp	.-122    	; 0x544c <__mulsf3+0xb0>
    54c6:	fa 85       	ldd	r31, Y+10	; 0x0a
    54c8:	ea 89       	ldd	r30, Y+18	; 0x12
    54ca:	2b 89       	ldd	r18, Y+19	; 0x13
    54cc:	3c 89       	ldd	r19, Y+20	; 0x14
    54ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    54d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    54d2:	28 0f       	add	r18, r24
    54d4:	39 1f       	adc	r19, r25
    54d6:	2e 5f       	subi	r18, 0xFE	; 254
    54d8:	3f 4f       	sbci	r19, 0xFF	; 255
    54da:	17 c0       	rjmp	.+46     	; 0x550a <__mulsf3+0x16e>
    54dc:	ca 01       	movw	r24, r20
    54de:	81 70       	andi	r24, 0x01	; 1
    54e0:	90 70       	andi	r25, 0x00	; 0
    54e2:	89 2b       	or	r24, r25
    54e4:	61 f0       	breq	.+24     	; 0x54fe <__mulsf3+0x162>
    54e6:	16 95       	lsr	r17
    54e8:	07 95       	ror	r16
    54ea:	f7 94       	ror	r15
    54ec:	e7 94       	ror	r14
    54ee:	80 e0       	ldi	r24, 0x00	; 0
    54f0:	90 e0       	ldi	r25, 0x00	; 0
    54f2:	a0 e0       	ldi	r26, 0x00	; 0
    54f4:	b0 e8       	ldi	r27, 0x80	; 128
    54f6:	e8 2a       	or	r14, r24
    54f8:	f9 2a       	or	r15, r25
    54fa:	0a 2b       	or	r16, r26
    54fc:	1b 2b       	or	r17, r27
    54fe:	76 95       	lsr	r23
    5500:	67 95       	ror	r22
    5502:	57 95       	ror	r21
    5504:	47 95       	ror	r20
    5506:	2f 5f       	subi	r18, 0xFF	; 255
    5508:	3f 4f       	sbci	r19, 0xFF	; 255
    550a:	77 fd       	sbrc	r23, 7
    550c:	e7 cf       	rjmp	.-50     	; 0x54dc <__mulsf3+0x140>
    550e:	0c c0       	rjmp	.+24     	; 0x5528 <__mulsf3+0x18c>
    5510:	44 0f       	add	r20, r20
    5512:	55 1f       	adc	r21, r21
    5514:	66 1f       	adc	r22, r22
    5516:	77 1f       	adc	r23, r23
    5518:	17 fd       	sbrc	r17, 7
    551a:	41 60       	ori	r20, 0x01	; 1
    551c:	ee 0c       	add	r14, r14
    551e:	ff 1c       	adc	r15, r15
    5520:	00 1f       	adc	r16, r16
    5522:	11 1f       	adc	r17, r17
    5524:	21 50       	subi	r18, 0x01	; 1
    5526:	30 40       	sbci	r19, 0x00	; 0
    5528:	40 30       	cpi	r20, 0x00	; 0
    552a:	90 e0       	ldi	r25, 0x00	; 0
    552c:	59 07       	cpc	r21, r25
    552e:	90 e0       	ldi	r25, 0x00	; 0
    5530:	69 07       	cpc	r22, r25
    5532:	90 e4       	ldi	r25, 0x40	; 64
    5534:	79 07       	cpc	r23, r25
    5536:	60 f3       	brcs	.-40     	; 0x5510 <__mulsf3+0x174>
    5538:	2b 8f       	std	Y+27, r18	; 0x1b
    553a:	3c 8f       	std	Y+28, r19	; 0x1c
    553c:	db 01       	movw	r26, r22
    553e:	ca 01       	movw	r24, r20
    5540:	8f 77       	andi	r24, 0x7F	; 127
    5542:	90 70       	andi	r25, 0x00	; 0
    5544:	a0 70       	andi	r26, 0x00	; 0
    5546:	b0 70       	andi	r27, 0x00	; 0
    5548:	80 34       	cpi	r24, 0x40	; 64
    554a:	91 05       	cpc	r25, r1
    554c:	a1 05       	cpc	r26, r1
    554e:	b1 05       	cpc	r27, r1
    5550:	61 f4       	brne	.+24     	; 0x556a <__mulsf3+0x1ce>
    5552:	47 fd       	sbrc	r20, 7
    5554:	0a c0       	rjmp	.+20     	; 0x556a <__mulsf3+0x1ce>
    5556:	e1 14       	cp	r14, r1
    5558:	f1 04       	cpc	r15, r1
    555a:	01 05       	cpc	r16, r1
    555c:	11 05       	cpc	r17, r1
    555e:	29 f0       	breq	.+10     	; 0x556a <__mulsf3+0x1ce>
    5560:	40 5c       	subi	r20, 0xC0	; 192
    5562:	5f 4f       	sbci	r21, 0xFF	; 255
    5564:	6f 4f       	sbci	r22, 0xFF	; 255
    5566:	7f 4f       	sbci	r23, 0xFF	; 255
    5568:	40 78       	andi	r20, 0x80	; 128
    556a:	1a 8e       	std	Y+26, r1	; 0x1a
    556c:	fe 17       	cp	r31, r30
    556e:	11 f0       	breq	.+4      	; 0x5574 <__mulsf3+0x1d8>
    5570:	81 e0       	ldi	r24, 0x01	; 1
    5572:	8a 8f       	std	Y+26, r24	; 0x1a
    5574:	4d 8f       	std	Y+29, r20	; 0x1d
    5576:	5e 8f       	std	Y+30, r21	; 0x1e
    5578:	6f 8f       	std	Y+31, r22	; 0x1f
    557a:	78 a3       	std	Y+32, r23	; 0x20
    557c:	83 e0       	ldi	r24, 0x03	; 3
    557e:	89 8f       	std	Y+25, r24	; 0x19
    5580:	ce 01       	movw	r24, r28
    5582:	49 96       	adiw	r24, 0x19	; 25
    5584:	0e 94 c8 2b 	call	0x5790	; 0x5790 <__pack_f>
    5588:	a0 96       	adiw	r28, 0x20	; 32
    558a:	e2 e1       	ldi	r30, 0x12	; 18
    558c:	0c 94 92 2d 	jmp	0x5b24	; 0x5b24 <__epilogue_restores__>

00005590 <__divsf3>:
    5590:	a8 e1       	ldi	r26, 0x18	; 24
    5592:	b0 e0       	ldi	r27, 0x00	; 0
    5594:	ee ec       	ldi	r30, 0xCE	; 206
    5596:	fa e2       	ldi	r31, 0x2A	; 42
    5598:	0c 94 7e 2d 	jmp	0x5afc	; 0x5afc <__prologue_saves__+0x10>
    559c:	69 83       	std	Y+1, r22	; 0x01
    559e:	7a 83       	std	Y+2, r23	; 0x02
    55a0:	8b 83       	std	Y+3, r24	; 0x03
    55a2:	9c 83       	std	Y+4, r25	; 0x04
    55a4:	2d 83       	std	Y+5, r18	; 0x05
    55a6:	3e 83       	std	Y+6, r19	; 0x06
    55a8:	4f 83       	std	Y+7, r20	; 0x07
    55aa:	58 87       	std	Y+8, r21	; 0x08
    55ac:	b9 e0       	ldi	r27, 0x09	; 9
    55ae:	eb 2e       	mov	r14, r27
    55b0:	f1 2c       	mov	r15, r1
    55b2:	ec 0e       	add	r14, r28
    55b4:	fd 1e       	adc	r15, r29
    55b6:	ce 01       	movw	r24, r28
    55b8:	01 96       	adiw	r24, 0x01	; 1
    55ba:	b7 01       	movw	r22, r14
    55bc:	0e 94 9d 2c 	call	0x593a	; 0x593a <__unpack_f>
    55c0:	8e 01       	movw	r16, r28
    55c2:	0f 5e       	subi	r16, 0xEF	; 239
    55c4:	1f 4f       	sbci	r17, 0xFF	; 255
    55c6:	ce 01       	movw	r24, r28
    55c8:	05 96       	adiw	r24, 0x05	; 5
    55ca:	b8 01       	movw	r22, r16
    55cc:	0e 94 9d 2c 	call	0x593a	; 0x593a <__unpack_f>
    55d0:	29 85       	ldd	r18, Y+9	; 0x09
    55d2:	22 30       	cpi	r18, 0x02	; 2
    55d4:	08 f4       	brcc	.+2      	; 0x55d8 <__divsf3+0x48>
    55d6:	7e c0       	rjmp	.+252    	; 0x56d4 <__divsf3+0x144>
    55d8:	39 89       	ldd	r19, Y+17	; 0x11
    55da:	32 30       	cpi	r19, 0x02	; 2
    55dc:	10 f4       	brcc	.+4      	; 0x55e2 <__divsf3+0x52>
    55de:	b8 01       	movw	r22, r16
    55e0:	7c c0       	rjmp	.+248    	; 0x56da <__divsf3+0x14a>
    55e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    55e4:	9a 89       	ldd	r25, Y+18	; 0x12
    55e6:	89 27       	eor	r24, r25
    55e8:	8a 87       	std	Y+10, r24	; 0x0a
    55ea:	24 30       	cpi	r18, 0x04	; 4
    55ec:	11 f0       	breq	.+4      	; 0x55f2 <__divsf3+0x62>
    55ee:	22 30       	cpi	r18, 0x02	; 2
    55f0:	31 f4       	brne	.+12     	; 0x55fe <__divsf3+0x6e>
    55f2:	23 17       	cp	r18, r19
    55f4:	09 f0       	breq	.+2      	; 0x55f8 <__divsf3+0x68>
    55f6:	6e c0       	rjmp	.+220    	; 0x56d4 <__divsf3+0x144>
    55f8:	69 e1       	ldi	r22, 0x19	; 25
    55fa:	71 e0       	ldi	r23, 0x01	; 1
    55fc:	6e c0       	rjmp	.+220    	; 0x56da <__divsf3+0x14a>
    55fe:	34 30       	cpi	r19, 0x04	; 4
    5600:	39 f4       	brne	.+14     	; 0x5610 <__divsf3+0x80>
    5602:	1d 86       	std	Y+13, r1	; 0x0d
    5604:	1e 86       	std	Y+14, r1	; 0x0e
    5606:	1f 86       	std	Y+15, r1	; 0x0f
    5608:	18 8a       	std	Y+16, r1	; 0x10
    560a:	1c 86       	std	Y+12, r1	; 0x0c
    560c:	1b 86       	std	Y+11, r1	; 0x0b
    560e:	04 c0       	rjmp	.+8      	; 0x5618 <__divsf3+0x88>
    5610:	32 30       	cpi	r19, 0x02	; 2
    5612:	21 f4       	brne	.+8      	; 0x561c <__divsf3+0x8c>
    5614:	84 e0       	ldi	r24, 0x04	; 4
    5616:	89 87       	std	Y+9, r24	; 0x09
    5618:	b7 01       	movw	r22, r14
    561a:	5f c0       	rjmp	.+190    	; 0x56da <__divsf3+0x14a>
    561c:	2b 85       	ldd	r18, Y+11	; 0x0b
    561e:	3c 85       	ldd	r19, Y+12	; 0x0c
    5620:	8b 89       	ldd	r24, Y+19	; 0x13
    5622:	9c 89       	ldd	r25, Y+20	; 0x14
    5624:	28 1b       	sub	r18, r24
    5626:	39 0b       	sbc	r19, r25
    5628:	3c 87       	std	Y+12, r19	; 0x0c
    562a:	2b 87       	std	Y+11, r18	; 0x0b
    562c:	ed 84       	ldd	r14, Y+13	; 0x0d
    562e:	fe 84       	ldd	r15, Y+14	; 0x0e
    5630:	0f 85       	ldd	r16, Y+15	; 0x0f
    5632:	18 89       	ldd	r17, Y+16	; 0x10
    5634:	ad 88       	ldd	r10, Y+21	; 0x15
    5636:	be 88       	ldd	r11, Y+22	; 0x16
    5638:	cf 88       	ldd	r12, Y+23	; 0x17
    563a:	d8 8c       	ldd	r13, Y+24	; 0x18
    563c:	ea 14       	cp	r14, r10
    563e:	fb 04       	cpc	r15, r11
    5640:	0c 05       	cpc	r16, r12
    5642:	1d 05       	cpc	r17, r13
    5644:	40 f4       	brcc	.+16     	; 0x5656 <__divsf3+0xc6>
    5646:	ee 0c       	add	r14, r14
    5648:	ff 1c       	adc	r15, r15
    564a:	00 1f       	adc	r16, r16
    564c:	11 1f       	adc	r17, r17
    564e:	21 50       	subi	r18, 0x01	; 1
    5650:	30 40       	sbci	r19, 0x00	; 0
    5652:	3c 87       	std	Y+12, r19	; 0x0c
    5654:	2b 87       	std	Y+11, r18	; 0x0b
    5656:	20 e0       	ldi	r18, 0x00	; 0
    5658:	30 e0       	ldi	r19, 0x00	; 0
    565a:	40 e0       	ldi	r20, 0x00	; 0
    565c:	50 e0       	ldi	r21, 0x00	; 0
    565e:	80 e0       	ldi	r24, 0x00	; 0
    5660:	90 e0       	ldi	r25, 0x00	; 0
    5662:	a0 e0       	ldi	r26, 0x00	; 0
    5664:	b0 e4       	ldi	r27, 0x40	; 64
    5666:	60 e0       	ldi	r22, 0x00	; 0
    5668:	70 e0       	ldi	r23, 0x00	; 0
    566a:	ea 14       	cp	r14, r10
    566c:	fb 04       	cpc	r15, r11
    566e:	0c 05       	cpc	r16, r12
    5670:	1d 05       	cpc	r17, r13
    5672:	40 f0       	brcs	.+16     	; 0x5684 <__divsf3+0xf4>
    5674:	28 2b       	or	r18, r24
    5676:	39 2b       	or	r19, r25
    5678:	4a 2b       	or	r20, r26
    567a:	5b 2b       	or	r21, r27
    567c:	ea 18       	sub	r14, r10
    567e:	fb 08       	sbc	r15, r11
    5680:	0c 09       	sbc	r16, r12
    5682:	1d 09       	sbc	r17, r13
    5684:	b6 95       	lsr	r27
    5686:	a7 95       	ror	r26
    5688:	97 95       	ror	r25
    568a:	87 95       	ror	r24
    568c:	ee 0c       	add	r14, r14
    568e:	ff 1c       	adc	r15, r15
    5690:	00 1f       	adc	r16, r16
    5692:	11 1f       	adc	r17, r17
    5694:	6f 5f       	subi	r22, 0xFF	; 255
    5696:	7f 4f       	sbci	r23, 0xFF	; 255
    5698:	6f 31       	cpi	r22, 0x1F	; 31
    569a:	71 05       	cpc	r23, r1
    569c:	31 f7       	brne	.-52     	; 0x566a <__divsf3+0xda>
    569e:	da 01       	movw	r26, r20
    56a0:	c9 01       	movw	r24, r18
    56a2:	8f 77       	andi	r24, 0x7F	; 127
    56a4:	90 70       	andi	r25, 0x00	; 0
    56a6:	a0 70       	andi	r26, 0x00	; 0
    56a8:	b0 70       	andi	r27, 0x00	; 0
    56aa:	80 34       	cpi	r24, 0x40	; 64
    56ac:	91 05       	cpc	r25, r1
    56ae:	a1 05       	cpc	r26, r1
    56b0:	b1 05       	cpc	r27, r1
    56b2:	61 f4       	brne	.+24     	; 0x56cc <__divsf3+0x13c>
    56b4:	27 fd       	sbrc	r18, 7
    56b6:	0a c0       	rjmp	.+20     	; 0x56cc <__divsf3+0x13c>
    56b8:	e1 14       	cp	r14, r1
    56ba:	f1 04       	cpc	r15, r1
    56bc:	01 05       	cpc	r16, r1
    56be:	11 05       	cpc	r17, r1
    56c0:	29 f0       	breq	.+10     	; 0x56cc <__divsf3+0x13c>
    56c2:	20 5c       	subi	r18, 0xC0	; 192
    56c4:	3f 4f       	sbci	r19, 0xFF	; 255
    56c6:	4f 4f       	sbci	r20, 0xFF	; 255
    56c8:	5f 4f       	sbci	r21, 0xFF	; 255
    56ca:	20 78       	andi	r18, 0x80	; 128
    56cc:	2d 87       	std	Y+13, r18	; 0x0d
    56ce:	3e 87       	std	Y+14, r19	; 0x0e
    56d0:	4f 87       	std	Y+15, r20	; 0x0f
    56d2:	58 8b       	std	Y+16, r21	; 0x10
    56d4:	be 01       	movw	r22, r28
    56d6:	67 5f       	subi	r22, 0xF7	; 247
    56d8:	7f 4f       	sbci	r23, 0xFF	; 255
    56da:	cb 01       	movw	r24, r22
    56dc:	0e 94 c8 2b 	call	0x5790	; 0x5790 <__pack_f>
    56e0:	68 96       	adiw	r28, 0x18	; 24
    56e2:	ea e0       	ldi	r30, 0x0A	; 10
    56e4:	0c 94 9a 2d 	jmp	0x5b34	; 0x5b34 <__epilogue_restores__+0x10>

000056e8 <__fixsfsi>:
    56e8:	ac e0       	ldi	r26, 0x0C	; 12
    56ea:	b0 e0       	ldi	r27, 0x00	; 0
    56ec:	ea e7       	ldi	r30, 0x7A	; 122
    56ee:	fb e2       	ldi	r31, 0x2B	; 43
    56f0:	0c 94 86 2d 	jmp	0x5b0c	; 0x5b0c <__prologue_saves__+0x20>
    56f4:	69 83       	std	Y+1, r22	; 0x01
    56f6:	7a 83       	std	Y+2, r23	; 0x02
    56f8:	8b 83       	std	Y+3, r24	; 0x03
    56fa:	9c 83       	std	Y+4, r25	; 0x04
    56fc:	ce 01       	movw	r24, r28
    56fe:	01 96       	adiw	r24, 0x01	; 1
    5700:	be 01       	movw	r22, r28
    5702:	6b 5f       	subi	r22, 0xFB	; 251
    5704:	7f 4f       	sbci	r23, 0xFF	; 255
    5706:	0e 94 9d 2c 	call	0x593a	; 0x593a <__unpack_f>
    570a:	8d 81       	ldd	r24, Y+5	; 0x05
    570c:	82 30       	cpi	r24, 0x02	; 2
    570e:	61 f1       	breq	.+88     	; 0x5768 <__fixsfsi+0x80>
    5710:	82 30       	cpi	r24, 0x02	; 2
    5712:	50 f1       	brcs	.+84     	; 0x5768 <__fixsfsi+0x80>
    5714:	84 30       	cpi	r24, 0x04	; 4
    5716:	21 f4       	brne	.+8      	; 0x5720 <__fixsfsi+0x38>
    5718:	8e 81       	ldd	r24, Y+6	; 0x06
    571a:	88 23       	and	r24, r24
    571c:	51 f1       	breq	.+84     	; 0x5772 <__fixsfsi+0x8a>
    571e:	2e c0       	rjmp	.+92     	; 0x577c <__fixsfsi+0x94>
    5720:	2f 81       	ldd	r18, Y+7	; 0x07
    5722:	38 85       	ldd	r19, Y+8	; 0x08
    5724:	37 fd       	sbrc	r19, 7
    5726:	20 c0       	rjmp	.+64     	; 0x5768 <__fixsfsi+0x80>
    5728:	6e 81       	ldd	r22, Y+6	; 0x06
    572a:	2f 31       	cpi	r18, 0x1F	; 31
    572c:	31 05       	cpc	r19, r1
    572e:	1c f0       	brlt	.+6      	; 0x5736 <__fixsfsi+0x4e>
    5730:	66 23       	and	r22, r22
    5732:	f9 f0       	breq	.+62     	; 0x5772 <__fixsfsi+0x8a>
    5734:	23 c0       	rjmp	.+70     	; 0x577c <__fixsfsi+0x94>
    5736:	8e e1       	ldi	r24, 0x1E	; 30
    5738:	90 e0       	ldi	r25, 0x00	; 0
    573a:	82 1b       	sub	r24, r18
    573c:	93 0b       	sbc	r25, r19
    573e:	29 85       	ldd	r18, Y+9	; 0x09
    5740:	3a 85       	ldd	r19, Y+10	; 0x0a
    5742:	4b 85       	ldd	r20, Y+11	; 0x0b
    5744:	5c 85       	ldd	r21, Y+12	; 0x0c
    5746:	04 c0       	rjmp	.+8      	; 0x5750 <__fixsfsi+0x68>
    5748:	56 95       	lsr	r21
    574a:	47 95       	ror	r20
    574c:	37 95       	ror	r19
    574e:	27 95       	ror	r18
    5750:	8a 95       	dec	r24
    5752:	d2 f7       	brpl	.-12     	; 0x5748 <__fixsfsi+0x60>
    5754:	66 23       	and	r22, r22
    5756:	b1 f0       	breq	.+44     	; 0x5784 <__fixsfsi+0x9c>
    5758:	50 95       	com	r21
    575a:	40 95       	com	r20
    575c:	30 95       	com	r19
    575e:	21 95       	neg	r18
    5760:	3f 4f       	sbci	r19, 0xFF	; 255
    5762:	4f 4f       	sbci	r20, 0xFF	; 255
    5764:	5f 4f       	sbci	r21, 0xFF	; 255
    5766:	0e c0       	rjmp	.+28     	; 0x5784 <__fixsfsi+0x9c>
    5768:	20 e0       	ldi	r18, 0x00	; 0
    576a:	30 e0       	ldi	r19, 0x00	; 0
    576c:	40 e0       	ldi	r20, 0x00	; 0
    576e:	50 e0       	ldi	r21, 0x00	; 0
    5770:	09 c0       	rjmp	.+18     	; 0x5784 <__fixsfsi+0x9c>
    5772:	2f ef       	ldi	r18, 0xFF	; 255
    5774:	3f ef       	ldi	r19, 0xFF	; 255
    5776:	4f ef       	ldi	r20, 0xFF	; 255
    5778:	5f e7       	ldi	r21, 0x7F	; 127
    577a:	04 c0       	rjmp	.+8      	; 0x5784 <__fixsfsi+0x9c>
    577c:	20 e0       	ldi	r18, 0x00	; 0
    577e:	30 e0       	ldi	r19, 0x00	; 0
    5780:	40 e0       	ldi	r20, 0x00	; 0
    5782:	50 e8       	ldi	r21, 0x80	; 128
    5784:	b9 01       	movw	r22, r18
    5786:	ca 01       	movw	r24, r20
    5788:	2c 96       	adiw	r28, 0x0c	; 12
    578a:	e2 e0       	ldi	r30, 0x02	; 2
    578c:	0c 94 a2 2d 	jmp	0x5b44	; 0x5b44 <__epilogue_restores__+0x20>

00005790 <__pack_f>:
    5790:	df 92       	push	r13
    5792:	ef 92       	push	r14
    5794:	ff 92       	push	r15
    5796:	0f 93       	push	r16
    5798:	1f 93       	push	r17
    579a:	fc 01       	movw	r30, r24
    579c:	e4 80       	ldd	r14, Z+4	; 0x04
    579e:	f5 80       	ldd	r15, Z+5	; 0x05
    57a0:	06 81       	ldd	r16, Z+6	; 0x06
    57a2:	17 81       	ldd	r17, Z+7	; 0x07
    57a4:	d1 80       	ldd	r13, Z+1	; 0x01
    57a6:	80 81       	ld	r24, Z
    57a8:	82 30       	cpi	r24, 0x02	; 2
    57aa:	48 f4       	brcc	.+18     	; 0x57be <__pack_f+0x2e>
    57ac:	80 e0       	ldi	r24, 0x00	; 0
    57ae:	90 e0       	ldi	r25, 0x00	; 0
    57b0:	a0 e1       	ldi	r26, 0x10	; 16
    57b2:	b0 e0       	ldi	r27, 0x00	; 0
    57b4:	e8 2a       	or	r14, r24
    57b6:	f9 2a       	or	r15, r25
    57b8:	0a 2b       	or	r16, r26
    57ba:	1b 2b       	or	r17, r27
    57bc:	a5 c0       	rjmp	.+330    	; 0x5908 <__pack_f+0x178>
    57be:	84 30       	cpi	r24, 0x04	; 4
    57c0:	09 f4       	brne	.+2      	; 0x57c4 <__pack_f+0x34>
    57c2:	9f c0       	rjmp	.+318    	; 0x5902 <__pack_f+0x172>
    57c4:	82 30       	cpi	r24, 0x02	; 2
    57c6:	21 f4       	brne	.+8      	; 0x57d0 <__pack_f+0x40>
    57c8:	ee 24       	eor	r14, r14
    57ca:	ff 24       	eor	r15, r15
    57cc:	87 01       	movw	r16, r14
    57ce:	05 c0       	rjmp	.+10     	; 0x57da <__pack_f+0x4a>
    57d0:	e1 14       	cp	r14, r1
    57d2:	f1 04       	cpc	r15, r1
    57d4:	01 05       	cpc	r16, r1
    57d6:	11 05       	cpc	r17, r1
    57d8:	19 f4       	brne	.+6      	; 0x57e0 <__pack_f+0x50>
    57da:	e0 e0       	ldi	r30, 0x00	; 0
    57dc:	f0 e0       	ldi	r31, 0x00	; 0
    57de:	96 c0       	rjmp	.+300    	; 0x590c <__pack_f+0x17c>
    57e0:	62 81       	ldd	r22, Z+2	; 0x02
    57e2:	73 81       	ldd	r23, Z+3	; 0x03
    57e4:	9f ef       	ldi	r25, 0xFF	; 255
    57e6:	62 38       	cpi	r22, 0x82	; 130
    57e8:	79 07       	cpc	r23, r25
    57ea:	0c f0       	brlt	.+2      	; 0x57ee <__pack_f+0x5e>
    57ec:	5b c0       	rjmp	.+182    	; 0x58a4 <__pack_f+0x114>
    57ee:	22 e8       	ldi	r18, 0x82	; 130
    57f0:	3f ef       	ldi	r19, 0xFF	; 255
    57f2:	26 1b       	sub	r18, r22
    57f4:	37 0b       	sbc	r19, r23
    57f6:	2a 31       	cpi	r18, 0x1A	; 26
    57f8:	31 05       	cpc	r19, r1
    57fa:	2c f0       	brlt	.+10     	; 0x5806 <__pack_f+0x76>
    57fc:	20 e0       	ldi	r18, 0x00	; 0
    57fe:	30 e0       	ldi	r19, 0x00	; 0
    5800:	40 e0       	ldi	r20, 0x00	; 0
    5802:	50 e0       	ldi	r21, 0x00	; 0
    5804:	2a c0       	rjmp	.+84     	; 0x585a <__pack_f+0xca>
    5806:	b8 01       	movw	r22, r16
    5808:	a7 01       	movw	r20, r14
    580a:	02 2e       	mov	r0, r18
    580c:	04 c0       	rjmp	.+8      	; 0x5816 <__pack_f+0x86>
    580e:	76 95       	lsr	r23
    5810:	67 95       	ror	r22
    5812:	57 95       	ror	r21
    5814:	47 95       	ror	r20
    5816:	0a 94       	dec	r0
    5818:	d2 f7       	brpl	.-12     	; 0x580e <__pack_f+0x7e>
    581a:	81 e0       	ldi	r24, 0x01	; 1
    581c:	90 e0       	ldi	r25, 0x00	; 0
    581e:	a0 e0       	ldi	r26, 0x00	; 0
    5820:	b0 e0       	ldi	r27, 0x00	; 0
    5822:	04 c0       	rjmp	.+8      	; 0x582c <__pack_f+0x9c>
    5824:	88 0f       	add	r24, r24
    5826:	99 1f       	adc	r25, r25
    5828:	aa 1f       	adc	r26, r26
    582a:	bb 1f       	adc	r27, r27
    582c:	2a 95       	dec	r18
    582e:	d2 f7       	brpl	.-12     	; 0x5824 <__pack_f+0x94>
    5830:	01 97       	sbiw	r24, 0x01	; 1
    5832:	a1 09       	sbc	r26, r1
    5834:	b1 09       	sbc	r27, r1
    5836:	8e 21       	and	r24, r14
    5838:	9f 21       	and	r25, r15
    583a:	a0 23       	and	r26, r16
    583c:	b1 23       	and	r27, r17
    583e:	00 97       	sbiw	r24, 0x00	; 0
    5840:	a1 05       	cpc	r26, r1
    5842:	b1 05       	cpc	r27, r1
    5844:	21 f0       	breq	.+8      	; 0x584e <__pack_f+0xbe>
    5846:	81 e0       	ldi	r24, 0x01	; 1
    5848:	90 e0       	ldi	r25, 0x00	; 0
    584a:	a0 e0       	ldi	r26, 0x00	; 0
    584c:	b0 e0       	ldi	r27, 0x00	; 0
    584e:	9a 01       	movw	r18, r20
    5850:	ab 01       	movw	r20, r22
    5852:	28 2b       	or	r18, r24
    5854:	39 2b       	or	r19, r25
    5856:	4a 2b       	or	r20, r26
    5858:	5b 2b       	or	r21, r27
    585a:	da 01       	movw	r26, r20
    585c:	c9 01       	movw	r24, r18
    585e:	8f 77       	andi	r24, 0x7F	; 127
    5860:	90 70       	andi	r25, 0x00	; 0
    5862:	a0 70       	andi	r26, 0x00	; 0
    5864:	b0 70       	andi	r27, 0x00	; 0
    5866:	80 34       	cpi	r24, 0x40	; 64
    5868:	91 05       	cpc	r25, r1
    586a:	a1 05       	cpc	r26, r1
    586c:	b1 05       	cpc	r27, r1
    586e:	39 f4       	brne	.+14     	; 0x587e <__pack_f+0xee>
    5870:	27 ff       	sbrs	r18, 7
    5872:	09 c0       	rjmp	.+18     	; 0x5886 <__pack_f+0xf6>
    5874:	20 5c       	subi	r18, 0xC0	; 192
    5876:	3f 4f       	sbci	r19, 0xFF	; 255
    5878:	4f 4f       	sbci	r20, 0xFF	; 255
    587a:	5f 4f       	sbci	r21, 0xFF	; 255
    587c:	04 c0       	rjmp	.+8      	; 0x5886 <__pack_f+0xf6>
    587e:	21 5c       	subi	r18, 0xC1	; 193
    5880:	3f 4f       	sbci	r19, 0xFF	; 255
    5882:	4f 4f       	sbci	r20, 0xFF	; 255
    5884:	5f 4f       	sbci	r21, 0xFF	; 255
    5886:	e0 e0       	ldi	r30, 0x00	; 0
    5888:	f0 e0       	ldi	r31, 0x00	; 0
    588a:	20 30       	cpi	r18, 0x00	; 0
    588c:	a0 e0       	ldi	r26, 0x00	; 0
    588e:	3a 07       	cpc	r19, r26
    5890:	a0 e0       	ldi	r26, 0x00	; 0
    5892:	4a 07       	cpc	r20, r26
    5894:	a0 e4       	ldi	r26, 0x40	; 64
    5896:	5a 07       	cpc	r21, r26
    5898:	10 f0       	brcs	.+4      	; 0x589e <__pack_f+0x10e>
    589a:	e1 e0       	ldi	r30, 0x01	; 1
    589c:	f0 e0       	ldi	r31, 0x00	; 0
    589e:	79 01       	movw	r14, r18
    58a0:	8a 01       	movw	r16, r20
    58a2:	27 c0       	rjmp	.+78     	; 0x58f2 <__pack_f+0x162>
    58a4:	60 38       	cpi	r22, 0x80	; 128
    58a6:	71 05       	cpc	r23, r1
    58a8:	64 f5       	brge	.+88     	; 0x5902 <__pack_f+0x172>
    58aa:	fb 01       	movw	r30, r22
    58ac:	e1 58       	subi	r30, 0x81	; 129
    58ae:	ff 4f       	sbci	r31, 0xFF	; 255
    58b0:	d8 01       	movw	r26, r16
    58b2:	c7 01       	movw	r24, r14
    58b4:	8f 77       	andi	r24, 0x7F	; 127
    58b6:	90 70       	andi	r25, 0x00	; 0
    58b8:	a0 70       	andi	r26, 0x00	; 0
    58ba:	b0 70       	andi	r27, 0x00	; 0
    58bc:	80 34       	cpi	r24, 0x40	; 64
    58be:	91 05       	cpc	r25, r1
    58c0:	a1 05       	cpc	r26, r1
    58c2:	b1 05       	cpc	r27, r1
    58c4:	39 f4       	brne	.+14     	; 0x58d4 <__pack_f+0x144>
    58c6:	e7 fe       	sbrs	r14, 7
    58c8:	0d c0       	rjmp	.+26     	; 0x58e4 <__pack_f+0x154>
    58ca:	80 e4       	ldi	r24, 0x40	; 64
    58cc:	90 e0       	ldi	r25, 0x00	; 0
    58ce:	a0 e0       	ldi	r26, 0x00	; 0
    58d0:	b0 e0       	ldi	r27, 0x00	; 0
    58d2:	04 c0       	rjmp	.+8      	; 0x58dc <__pack_f+0x14c>
    58d4:	8f e3       	ldi	r24, 0x3F	; 63
    58d6:	90 e0       	ldi	r25, 0x00	; 0
    58d8:	a0 e0       	ldi	r26, 0x00	; 0
    58da:	b0 e0       	ldi	r27, 0x00	; 0
    58dc:	e8 0e       	add	r14, r24
    58de:	f9 1e       	adc	r15, r25
    58e0:	0a 1f       	adc	r16, r26
    58e2:	1b 1f       	adc	r17, r27
    58e4:	17 ff       	sbrs	r17, 7
    58e6:	05 c0       	rjmp	.+10     	; 0x58f2 <__pack_f+0x162>
    58e8:	16 95       	lsr	r17
    58ea:	07 95       	ror	r16
    58ec:	f7 94       	ror	r15
    58ee:	e7 94       	ror	r14
    58f0:	31 96       	adiw	r30, 0x01	; 1
    58f2:	87 e0       	ldi	r24, 0x07	; 7
    58f4:	16 95       	lsr	r17
    58f6:	07 95       	ror	r16
    58f8:	f7 94       	ror	r15
    58fa:	e7 94       	ror	r14
    58fc:	8a 95       	dec	r24
    58fe:	d1 f7       	brne	.-12     	; 0x58f4 <__pack_f+0x164>
    5900:	05 c0       	rjmp	.+10     	; 0x590c <__pack_f+0x17c>
    5902:	ee 24       	eor	r14, r14
    5904:	ff 24       	eor	r15, r15
    5906:	87 01       	movw	r16, r14
    5908:	ef ef       	ldi	r30, 0xFF	; 255
    590a:	f0 e0       	ldi	r31, 0x00	; 0
    590c:	6e 2f       	mov	r22, r30
    590e:	67 95       	ror	r22
    5910:	66 27       	eor	r22, r22
    5912:	67 95       	ror	r22
    5914:	90 2f       	mov	r25, r16
    5916:	9f 77       	andi	r25, 0x7F	; 127
    5918:	d7 94       	ror	r13
    591a:	dd 24       	eor	r13, r13
    591c:	d7 94       	ror	r13
    591e:	8e 2f       	mov	r24, r30
    5920:	86 95       	lsr	r24
    5922:	49 2f       	mov	r20, r25
    5924:	46 2b       	or	r20, r22
    5926:	58 2f       	mov	r21, r24
    5928:	5d 29       	or	r21, r13
    592a:	b7 01       	movw	r22, r14
    592c:	ca 01       	movw	r24, r20
    592e:	1f 91       	pop	r17
    5930:	0f 91       	pop	r16
    5932:	ff 90       	pop	r15
    5934:	ef 90       	pop	r14
    5936:	df 90       	pop	r13
    5938:	08 95       	ret

0000593a <__unpack_f>:
    593a:	fc 01       	movw	r30, r24
    593c:	db 01       	movw	r26, r22
    593e:	40 81       	ld	r20, Z
    5940:	51 81       	ldd	r21, Z+1	; 0x01
    5942:	22 81       	ldd	r18, Z+2	; 0x02
    5944:	62 2f       	mov	r22, r18
    5946:	6f 77       	andi	r22, 0x7F	; 127
    5948:	70 e0       	ldi	r23, 0x00	; 0
    594a:	22 1f       	adc	r18, r18
    594c:	22 27       	eor	r18, r18
    594e:	22 1f       	adc	r18, r18
    5950:	93 81       	ldd	r25, Z+3	; 0x03
    5952:	89 2f       	mov	r24, r25
    5954:	88 0f       	add	r24, r24
    5956:	82 2b       	or	r24, r18
    5958:	28 2f       	mov	r18, r24
    595a:	30 e0       	ldi	r19, 0x00	; 0
    595c:	99 1f       	adc	r25, r25
    595e:	99 27       	eor	r25, r25
    5960:	99 1f       	adc	r25, r25
    5962:	11 96       	adiw	r26, 0x01	; 1
    5964:	9c 93       	st	X, r25
    5966:	11 97       	sbiw	r26, 0x01	; 1
    5968:	21 15       	cp	r18, r1
    596a:	31 05       	cpc	r19, r1
    596c:	a9 f5       	brne	.+106    	; 0x59d8 <__unpack_f+0x9e>
    596e:	41 15       	cp	r20, r1
    5970:	51 05       	cpc	r21, r1
    5972:	61 05       	cpc	r22, r1
    5974:	71 05       	cpc	r23, r1
    5976:	11 f4       	brne	.+4      	; 0x597c <__unpack_f+0x42>
    5978:	82 e0       	ldi	r24, 0x02	; 2
    597a:	37 c0       	rjmp	.+110    	; 0x59ea <__unpack_f+0xb0>
    597c:	82 e8       	ldi	r24, 0x82	; 130
    597e:	9f ef       	ldi	r25, 0xFF	; 255
    5980:	13 96       	adiw	r26, 0x03	; 3
    5982:	9c 93       	st	X, r25
    5984:	8e 93       	st	-X, r24
    5986:	12 97       	sbiw	r26, 0x02	; 2
    5988:	9a 01       	movw	r18, r20
    598a:	ab 01       	movw	r20, r22
    598c:	67 e0       	ldi	r22, 0x07	; 7
    598e:	22 0f       	add	r18, r18
    5990:	33 1f       	adc	r19, r19
    5992:	44 1f       	adc	r20, r20
    5994:	55 1f       	adc	r21, r21
    5996:	6a 95       	dec	r22
    5998:	d1 f7       	brne	.-12     	; 0x598e <__unpack_f+0x54>
    599a:	83 e0       	ldi	r24, 0x03	; 3
    599c:	8c 93       	st	X, r24
    599e:	0d c0       	rjmp	.+26     	; 0x59ba <__unpack_f+0x80>
    59a0:	22 0f       	add	r18, r18
    59a2:	33 1f       	adc	r19, r19
    59a4:	44 1f       	adc	r20, r20
    59a6:	55 1f       	adc	r21, r21
    59a8:	12 96       	adiw	r26, 0x02	; 2
    59aa:	8d 91       	ld	r24, X+
    59ac:	9c 91       	ld	r25, X
    59ae:	13 97       	sbiw	r26, 0x03	; 3
    59b0:	01 97       	sbiw	r24, 0x01	; 1
    59b2:	13 96       	adiw	r26, 0x03	; 3
    59b4:	9c 93       	st	X, r25
    59b6:	8e 93       	st	-X, r24
    59b8:	12 97       	sbiw	r26, 0x02	; 2
    59ba:	20 30       	cpi	r18, 0x00	; 0
    59bc:	80 e0       	ldi	r24, 0x00	; 0
    59be:	38 07       	cpc	r19, r24
    59c0:	80 e0       	ldi	r24, 0x00	; 0
    59c2:	48 07       	cpc	r20, r24
    59c4:	80 e4       	ldi	r24, 0x40	; 64
    59c6:	58 07       	cpc	r21, r24
    59c8:	58 f3       	brcs	.-42     	; 0x59a0 <__unpack_f+0x66>
    59ca:	14 96       	adiw	r26, 0x04	; 4
    59cc:	2d 93       	st	X+, r18
    59ce:	3d 93       	st	X+, r19
    59d0:	4d 93       	st	X+, r20
    59d2:	5c 93       	st	X, r21
    59d4:	17 97       	sbiw	r26, 0x07	; 7
    59d6:	08 95       	ret
    59d8:	2f 3f       	cpi	r18, 0xFF	; 255
    59da:	31 05       	cpc	r19, r1
    59dc:	79 f4       	brne	.+30     	; 0x59fc <__unpack_f+0xc2>
    59de:	41 15       	cp	r20, r1
    59e0:	51 05       	cpc	r21, r1
    59e2:	61 05       	cpc	r22, r1
    59e4:	71 05       	cpc	r23, r1
    59e6:	19 f4       	brne	.+6      	; 0x59ee <__unpack_f+0xb4>
    59e8:	84 e0       	ldi	r24, 0x04	; 4
    59ea:	8c 93       	st	X, r24
    59ec:	08 95       	ret
    59ee:	64 ff       	sbrs	r22, 4
    59f0:	03 c0       	rjmp	.+6      	; 0x59f8 <__unpack_f+0xbe>
    59f2:	81 e0       	ldi	r24, 0x01	; 1
    59f4:	8c 93       	st	X, r24
    59f6:	12 c0       	rjmp	.+36     	; 0x5a1c <__unpack_f+0xe2>
    59f8:	1c 92       	st	X, r1
    59fa:	10 c0       	rjmp	.+32     	; 0x5a1c <__unpack_f+0xe2>
    59fc:	2f 57       	subi	r18, 0x7F	; 127
    59fe:	30 40       	sbci	r19, 0x00	; 0
    5a00:	13 96       	adiw	r26, 0x03	; 3
    5a02:	3c 93       	st	X, r19
    5a04:	2e 93       	st	-X, r18
    5a06:	12 97       	sbiw	r26, 0x02	; 2
    5a08:	83 e0       	ldi	r24, 0x03	; 3
    5a0a:	8c 93       	st	X, r24
    5a0c:	87 e0       	ldi	r24, 0x07	; 7
    5a0e:	44 0f       	add	r20, r20
    5a10:	55 1f       	adc	r21, r21
    5a12:	66 1f       	adc	r22, r22
    5a14:	77 1f       	adc	r23, r23
    5a16:	8a 95       	dec	r24
    5a18:	d1 f7       	brne	.-12     	; 0x5a0e <__unpack_f+0xd4>
    5a1a:	70 64       	ori	r23, 0x40	; 64
    5a1c:	14 96       	adiw	r26, 0x04	; 4
    5a1e:	4d 93       	st	X+, r20
    5a20:	5d 93       	st	X+, r21
    5a22:	6d 93       	st	X+, r22
    5a24:	7c 93       	st	X, r23
    5a26:	17 97       	sbiw	r26, 0x07	; 7
    5a28:	08 95       	ret

00005a2a <__mulsi3>:
    5a2a:	62 9f       	mul	r22, r18
    5a2c:	d0 01       	movw	r26, r0
    5a2e:	73 9f       	mul	r23, r19
    5a30:	f0 01       	movw	r30, r0
    5a32:	82 9f       	mul	r24, r18
    5a34:	e0 0d       	add	r30, r0
    5a36:	f1 1d       	adc	r31, r1
    5a38:	64 9f       	mul	r22, r20
    5a3a:	e0 0d       	add	r30, r0
    5a3c:	f1 1d       	adc	r31, r1
    5a3e:	92 9f       	mul	r25, r18
    5a40:	f0 0d       	add	r31, r0
    5a42:	83 9f       	mul	r24, r19
    5a44:	f0 0d       	add	r31, r0
    5a46:	74 9f       	mul	r23, r20
    5a48:	f0 0d       	add	r31, r0
    5a4a:	65 9f       	mul	r22, r21
    5a4c:	f0 0d       	add	r31, r0
    5a4e:	99 27       	eor	r25, r25
    5a50:	72 9f       	mul	r23, r18
    5a52:	b0 0d       	add	r27, r0
    5a54:	e1 1d       	adc	r30, r1
    5a56:	f9 1f       	adc	r31, r25
    5a58:	63 9f       	mul	r22, r19
    5a5a:	b0 0d       	add	r27, r0
    5a5c:	e1 1d       	adc	r30, r1
    5a5e:	f9 1f       	adc	r31, r25
    5a60:	bd 01       	movw	r22, r26
    5a62:	cf 01       	movw	r24, r30
    5a64:	11 24       	eor	r1, r1
    5a66:	08 95       	ret

00005a68 <__udivmodqi4>:
    5a68:	99 1b       	sub	r25, r25
    5a6a:	79 e0       	ldi	r23, 0x09	; 9
    5a6c:	04 c0       	rjmp	.+8      	; 0x5a76 <__udivmodqi4_ep>

00005a6e <__udivmodqi4_loop>:
    5a6e:	99 1f       	adc	r25, r25
    5a70:	96 17       	cp	r25, r22
    5a72:	08 f0       	brcs	.+2      	; 0x5a76 <__udivmodqi4_ep>
    5a74:	96 1b       	sub	r25, r22

00005a76 <__udivmodqi4_ep>:
    5a76:	88 1f       	adc	r24, r24
    5a78:	7a 95       	dec	r23
    5a7a:	c9 f7       	brne	.-14     	; 0x5a6e <__udivmodqi4_loop>
    5a7c:	80 95       	com	r24
    5a7e:	08 95       	ret

00005a80 <__udivmodhi4>:
    5a80:	aa 1b       	sub	r26, r26
    5a82:	bb 1b       	sub	r27, r27
    5a84:	51 e1       	ldi	r21, 0x11	; 17
    5a86:	07 c0       	rjmp	.+14     	; 0x5a96 <__udivmodhi4_ep>

00005a88 <__udivmodhi4_loop>:
    5a88:	aa 1f       	adc	r26, r26
    5a8a:	bb 1f       	adc	r27, r27
    5a8c:	a6 17       	cp	r26, r22
    5a8e:	b7 07       	cpc	r27, r23
    5a90:	10 f0       	brcs	.+4      	; 0x5a96 <__udivmodhi4_ep>
    5a92:	a6 1b       	sub	r26, r22
    5a94:	b7 0b       	sbc	r27, r23

00005a96 <__udivmodhi4_ep>:
    5a96:	88 1f       	adc	r24, r24
    5a98:	99 1f       	adc	r25, r25
    5a9a:	5a 95       	dec	r21
    5a9c:	a9 f7       	brne	.-22     	; 0x5a88 <__udivmodhi4_loop>
    5a9e:	80 95       	com	r24
    5aa0:	90 95       	com	r25
    5aa2:	bc 01       	movw	r22, r24
    5aa4:	cd 01       	movw	r24, r26
    5aa6:	08 95       	ret

00005aa8 <__udivmodsi4>:
    5aa8:	a1 e2       	ldi	r26, 0x21	; 33
    5aaa:	1a 2e       	mov	r1, r26
    5aac:	aa 1b       	sub	r26, r26
    5aae:	bb 1b       	sub	r27, r27
    5ab0:	fd 01       	movw	r30, r26
    5ab2:	0d c0       	rjmp	.+26     	; 0x5ace <__udivmodsi4_ep>

00005ab4 <__udivmodsi4_loop>:
    5ab4:	aa 1f       	adc	r26, r26
    5ab6:	bb 1f       	adc	r27, r27
    5ab8:	ee 1f       	adc	r30, r30
    5aba:	ff 1f       	adc	r31, r31
    5abc:	a2 17       	cp	r26, r18
    5abe:	b3 07       	cpc	r27, r19
    5ac0:	e4 07       	cpc	r30, r20
    5ac2:	f5 07       	cpc	r31, r21
    5ac4:	20 f0       	brcs	.+8      	; 0x5ace <__udivmodsi4_ep>
    5ac6:	a2 1b       	sub	r26, r18
    5ac8:	b3 0b       	sbc	r27, r19
    5aca:	e4 0b       	sbc	r30, r20
    5acc:	f5 0b       	sbc	r31, r21

00005ace <__udivmodsi4_ep>:
    5ace:	66 1f       	adc	r22, r22
    5ad0:	77 1f       	adc	r23, r23
    5ad2:	88 1f       	adc	r24, r24
    5ad4:	99 1f       	adc	r25, r25
    5ad6:	1a 94       	dec	r1
    5ad8:	69 f7       	brne	.-38     	; 0x5ab4 <__udivmodsi4_loop>
    5ada:	60 95       	com	r22
    5adc:	70 95       	com	r23
    5ade:	80 95       	com	r24
    5ae0:	90 95       	com	r25
    5ae2:	9b 01       	movw	r18, r22
    5ae4:	ac 01       	movw	r20, r24
    5ae6:	bd 01       	movw	r22, r26
    5ae8:	cf 01       	movw	r24, r30
    5aea:	08 95       	ret

00005aec <__prologue_saves__>:
    5aec:	2f 92       	push	r2
    5aee:	3f 92       	push	r3
    5af0:	4f 92       	push	r4
    5af2:	5f 92       	push	r5
    5af4:	6f 92       	push	r6
    5af6:	7f 92       	push	r7
    5af8:	8f 92       	push	r8
    5afa:	9f 92       	push	r9
    5afc:	af 92       	push	r10
    5afe:	bf 92       	push	r11
    5b00:	cf 92       	push	r12
    5b02:	df 92       	push	r13
    5b04:	ef 92       	push	r14
    5b06:	ff 92       	push	r15
    5b08:	0f 93       	push	r16
    5b0a:	1f 93       	push	r17
    5b0c:	cf 93       	push	r28
    5b0e:	df 93       	push	r29
    5b10:	cd b7       	in	r28, 0x3d	; 61
    5b12:	de b7       	in	r29, 0x3e	; 62
    5b14:	ca 1b       	sub	r28, r26
    5b16:	db 0b       	sbc	r29, r27
    5b18:	0f b6       	in	r0, 0x3f	; 63
    5b1a:	f8 94       	cli
    5b1c:	de bf       	out	0x3e, r29	; 62
    5b1e:	0f be       	out	0x3f, r0	; 63
    5b20:	cd bf       	out	0x3d, r28	; 61
    5b22:	09 94       	ijmp

00005b24 <__epilogue_restores__>:
    5b24:	2a 88       	ldd	r2, Y+18	; 0x12
    5b26:	39 88       	ldd	r3, Y+17	; 0x11
    5b28:	48 88       	ldd	r4, Y+16	; 0x10
    5b2a:	5f 84       	ldd	r5, Y+15	; 0x0f
    5b2c:	6e 84       	ldd	r6, Y+14	; 0x0e
    5b2e:	7d 84       	ldd	r7, Y+13	; 0x0d
    5b30:	8c 84       	ldd	r8, Y+12	; 0x0c
    5b32:	9b 84       	ldd	r9, Y+11	; 0x0b
    5b34:	aa 84       	ldd	r10, Y+10	; 0x0a
    5b36:	b9 84       	ldd	r11, Y+9	; 0x09
    5b38:	c8 84       	ldd	r12, Y+8	; 0x08
    5b3a:	df 80       	ldd	r13, Y+7	; 0x07
    5b3c:	ee 80       	ldd	r14, Y+6	; 0x06
    5b3e:	fd 80       	ldd	r15, Y+5	; 0x05
    5b40:	0c 81       	ldd	r16, Y+4	; 0x04
    5b42:	1b 81       	ldd	r17, Y+3	; 0x03
    5b44:	aa 81       	ldd	r26, Y+2	; 0x02
    5b46:	b9 81       	ldd	r27, Y+1	; 0x01
    5b48:	ce 0f       	add	r28, r30
    5b4a:	d1 1d       	adc	r29, r1
    5b4c:	0f b6       	in	r0, 0x3f	; 63
    5b4e:	f8 94       	cli
    5b50:	de bf       	out	0x3e, r29	; 62
    5b52:	0f be       	out	0x3f, r0	; 63
    5b54:	cd bf       	out	0x3d, r28	; 61
    5b56:	ed 01       	movw	r28, r26
    5b58:	08 95       	ret

00005b5a <__tablejump2__>:
    5b5a:	ee 0f       	add	r30, r30
    5b5c:	ff 1f       	adc	r31, r31

00005b5e <__tablejump__>:
    5b5e:	05 90       	lpm	r0, Z+
    5b60:	f4 91       	lpm	r31, Z+
    5b62:	e0 2d       	mov	r30, r0
    5b64:	09 94       	ijmp

00005b66 <atoi>:
    5b66:	fc 01       	movw	r30, r24
    5b68:	88 27       	eor	r24, r24
    5b6a:	99 27       	eor	r25, r25
    5b6c:	e8 94       	clt
    5b6e:	21 91       	ld	r18, Z+
    5b70:	20 32       	cpi	r18, 0x20	; 32
    5b72:	e9 f3       	breq	.-6      	; 0x5b6e <atoi+0x8>
    5b74:	29 30       	cpi	r18, 0x09	; 9
    5b76:	10 f0       	brcs	.+4      	; 0x5b7c <atoi+0x16>
    5b78:	2e 30       	cpi	r18, 0x0E	; 14
    5b7a:	c8 f3       	brcs	.-14     	; 0x5b6e <atoi+0x8>
    5b7c:	2b 32       	cpi	r18, 0x2B	; 43
    5b7e:	41 f0       	breq	.+16     	; 0x5b90 <atoi+0x2a>
    5b80:	2d 32       	cpi	r18, 0x2D	; 45
    5b82:	39 f4       	brne	.+14     	; 0x5b92 <atoi+0x2c>
    5b84:	68 94       	set
    5b86:	04 c0       	rjmp	.+8      	; 0x5b90 <atoi+0x2a>
    5b88:	0e 94 f2 2d 	call	0x5be4	; 0x5be4 <__mulhi_const_10>
    5b8c:	82 0f       	add	r24, r18
    5b8e:	91 1d       	adc	r25, r1
    5b90:	21 91       	ld	r18, Z+
    5b92:	20 53       	subi	r18, 0x30	; 48
    5b94:	2a 30       	cpi	r18, 0x0A	; 10
    5b96:	c0 f3       	brcs	.-16     	; 0x5b88 <atoi+0x22>
    5b98:	1e f4       	brtc	.+6      	; 0x5ba0 <atoi+0x3a>
    5b9a:	90 95       	com	r25
    5b9c:	81 95       	neg	r24
    5b9e:	9f 4f       	sbci	r25, 0xFF	; 255
    5ba0:	08 95       	ret

00005ba2 <itoa>:
    5ba2:	fb 01       	movw	r30, r22
    5ba4:	9f 01       	movw	r18, r30
    5ba6:	e8 94       	clt
    5ba8:	42 30       	cpi	r20, 0x02	; 2
    5baa:	c4 f0       	brlt	.+48     	; 0x5bdc <itoa+0x3a>
    5bac:	45 32       	cpi	r20, 0x25	; 37
    5bae:	b4 f4       	brge	.+44     	; 0x5bdc <itoa+0x3a>
    5bb0:	4a 30       	cpi	r20, 0x0A	; 10
    5bb2:	29 f4       	brne	.+10     	; 0x5bbe <itoa+0x1c>
    5bb4:	97 fb       	bst	r25, 7
    5bb6:	1e f4       	brtc	.+6      	; 0x5bbe <itoa+0x1c>
    5bb8:	90 95       	com	r25
    5bba:	81 95       	neg	r24
    5bbc:	9f 4f       	sbci	r25, 0xFF	; 255
    5bbe:	64 2f       	mov	r22, r20
    5bc0:	77 27       	eor	r23, r23
    5bc2:	0e 94 40 2d 	call	0x5a80	; 0x5a80 <__udivmodhi4>
    5bc6:	80 5d       	subi	r24, 0xD0	; 208
    5bc8:	8a 33       	cpi	r24, 0x3A	; 58
    5bca:	0c f0       	brlt	.+2      	; 0x5bce <itoa+0x2c>
    5bcc:	89 5d       	subi	r24, 0xD9	; 217
    5bce:	81 93       	st	Z+, r24
    5bd0:	cb 01       	movw	r24, r22
    5bd2:	00 97       	sbiw	r24, 0x00	; 0
    5bd4:	a1 f7       	brne	.-24     	; 0x5bbe <itoa+0x1c>
    5bd6:	16 f4       	brtc	.+4      	; 0x5bdc <itoa+0x3a>
    5bd8:	5d e2       	ldi	r21, 0x2D	; 45
    5bda:	51 93       	st	Z+, r21
    5bdc:	10 82       	st	Z, r1
    5bde:	c9 01       	movw	r24, r18
    5be0:	0c 94 fa 2d 	jmp	0x5bf4	; 0x5bf4 <strrev>

00005be4 <__mulhi_const_10>:
    5be4:	7a e0       	ldi	r23, 0x0A	; 10
    5be6:	97 9f       	mul	r25, r23
    5be8:	90 2d       	mov	r25, r0
    5bea:	87 9f       	mul	r24, r23
    5bec:	80 2d       	mov	r24, r0
    5bee:	91 0d       	add	r25, r1
    5bf0:	11 24       	eor	r1, r1
    5bf2:	08 95       	ret

00005bf4 <strrev>:
    5bf4:	dc 01       	movw	r26, r24
    5bf6:	fc 01       	movw	r30, r24
    5bf8:	67 2f       	mov	r22, r23
    5bfa:	71 91       	ld	r23, Z+
    5bfc:	77 23       	and	r23, r23
    5bfe:	e1 f7       	brne	.-8      	; 0x5bf8 <strrev+0x4>
    5c00:	32 97       	sbiw	r30, 0x02	; 2
    5c02:	04 c0       	rjmp	.+8      	; 0x5c0c <strrev+0x18>
    5c04:	7c 91       	ld	r23, X
    5c06:	6d 93       	st	X+, r22
    5c08:	70 83       	st	Z, r23
    5c0a:	62 91       	ld	r22, -Z
    5c0c:	ae 17       	cp	r26, r30
    5c0e:	bf 07       	cpc	r27, r31
    5c10:	c8 f3       	brcs	.-14     	; 0x5c04 <strrev+0x10>
    5c12:	08 95       	ret

00005c14 <_exit>:
    5c14:	f8 94       	cli

00005c16 <__stop_program>:
    5c16:	ff cf       	rjmp	.-2      	; 0x5c16 <__stop_program>
