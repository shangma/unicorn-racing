
node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002b2  00800100  00005cc2  00005d56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005cc2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000007cb  008003b2  008003b2  00006008  2**0
                  ALLOC
  3 .stab         0000183c  00000000  00000000  00006008  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000152  00000000  00000000  00007844  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007996  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000718  00000000  00000000  00007b36  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004ef9  00000000  00000000  0000824e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001417  00000000  00000000  0000d147  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000040df  00000000  00000000  0000e55e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000610  00000000  00000000  00012640  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000f49  00000000  00000000  00012c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003eca  00000000  00000000  00013b99  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000611  00000000  00000000  00017a63  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000001a0  00000000  00000000  00018074  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c4 00 	jmp	0x188	; 0x188 <__ctors_end>
       4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
       8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
       c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      10:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      14:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      18:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      1c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      20:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      24:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__vector_9>
      28:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      2c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      30:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      34:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      38:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      3c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      40:	0c 94 07 22 	jmp	0x440e	; 0x440e <__vector_16>
      44:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      48:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__vector_18>
      4c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      50:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      54:	0c 94 79 22 	jmp	0x44f2	; 0x44f2 <__vector_21>
      58:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      5c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      60:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      64:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      68:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      6c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      70:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      74:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      78:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      7c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      80:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      84:	0c 94 9f 23 	jmp	0x473e	; 0x473e <__vector_33>
      88:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      8c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      90:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      94:	94 17       	cp	r25, r20
      96:	9c 17       	cp	r25, r28
      98:	f1 17       	cp	r31, r17
      9a:	f7 17       	cp	r31, r23
      9c:	b4 18       	sub	r11, r4
      9e:	b4 18       	sub	r11, r4
      a0:	b4 18       	sub	r11, r4
      a2:	b4 18       	sub	r11, r4
      a4:	b4 18       	sub	r11, r4
      a6:	b4 18       	sub	r11, r4
      a8:	7c 18       	sub	r7, r12
      aa:	81 18       	sub	r8, r1
      ac:	83 18       	sub	r8, r3
      ae:	8f 18       	sub	r8, r15
      b0:	a2 18       	sub	r10, r2
      b2:	53 1c       	adc	r5, r3
      b4:	d0 1c       	adc	r13, r0
      b6:	48 1d       	adc	r20, r8
      b8:	ab 1d       	adc	r26, r11
      ba:	e5 1d       	adc	r30, r5
      bc:	36 1e       	adc	r3, r22
      be:	7a 1e       	adc	r7, r26
      c0:	12 1f       	adc	r17, r18
      c2:	c3 1f       	adc	r28, r19
      c4:	51 1c       	adc	r5, r1
      c6:	bf 20       	and	r11, r15

000000c8 <__c.2144>:
      c8:	72 63 3d 25 64 0a 00                                rc=%d..

000000cf <__c.2142>:
      cf:	4f 70 65 6e 69 6e 67 20 66 69 6c 65 20 25 73 0a     Opening file %s.
	...

000000e0 <__c.2140>:
      e0:	46 72 65 65 20 6c 6f 67 20 6e 72 20 25 64 0a 00     Free log nr %d..

000000f0 <__c.2138>:
      f0:	72 63 3d 25 64 0a 00                                rc=%d..

000000f7 <__c.2136>:
      f7:	6f 70 65 6e 20 64 69 72 20 0a 00                    open dir ..

00000102 <__c.2134>:
     102:	72 63 3d 25 64 0a 00                                rc=%d..

00000109 <__c.2132>:
     109:	49 6e 69 74 69 61 6c 69 7a 65 20 6c 6f 67 69 63     Initialize logic
     119:	61 6c 20 64 72 69 63 65 20 30 0a 00                 al drice 0..

00000125 <__c.2130>:
     125:	72 63 3d 25 64 0a 00                                rc=%d..

0000012c <__c.2128>:
     12c:	74 65 73 74 32 20 25 64 20 25 64 20 25 64 20 25     test2 %d %d %d %
     13c:	64 0a 00                                            d..

0000013f <__c.2126>:
     13f:	74 65 73 74 20 25 64 20 25 64 20 25 64 20 25 64     test %d %d %d %d
     14f:	0a 00                                               ..

00000151 <__c.2124>:
     151:	49 6e 69 74 69 61 6c 69 7a 65 20 64 69 73 6b 20     Initialize disk 
     161:	30 0a 00                                            0..

00000164 <__c.2122>:
     164:	25 64 2d 25 64 2d 25 64 54 25 64 3a 25 64 3a 25     %d-%d-%dT%d:%d:%
     174:	64 0a 00                                            d..

00000177 <__c.2120>:
     177:	53 79 73 74 65 6d 20 73 74 61 72 74 65 74 0a 00     System startet..
	...

00000188 <__ctors_end>:
     188:	11 24       	eor	r1, r1
     18a:	1f be       	out	0x3f, r1	; 63
     18c:	cf ef       	ldi	r28, 0xFF	; 255
     18e:	d0 e1       	ldi	r29, 0x10	; 16
     190:	de bf       	out	0x3e, r29	; 62
     192:	cd bf       	out	0x3d, r28	; 61

00000194 <__do_copy_data>:
     194:	13 e0       	ldi	r17, 0x03	; 3
     196:	a0 e0       	ldi	r26, 0x00	; 0
     198:	b1 e0       	ldi	r27, 0x01	; 1
     19a:	e2 ec       	ldi	r30, 0xC2	; 194
     19c:	fc e5       	ldi	r31, 0x5C	; 92
     19e:	00 e0       	ldi	r16, 0x00	; 0
     1a0:	0b bf       	out	0x3b, r16	; 59
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <__do_copy_data+0x14>
     1a4:	07 90       	elpm	r0, Z+
     1a6:	0d 92       	st	X+, r0
     1a8:	a2 3b       	cpi	r26, 0xB2	; 178
     1aa:	b1 07       	cpc	r27, r17
     1ac:	d9 f7       	brne	.-10     	; 0x1a4 <__do_copy_data+0x10>

000001ae <__do_clear_bss>:
     1ae:	1b e0       	ldi	r17, 0x0B	; 11
     1b0:	a2 eb       	ldi	r26, 0xB2	; 178
     1b2:	b3 e0       	ldi	r27, 0x03	; 3
     1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <.do_clear_bss_start>

000001b6 <.do_clear_bss_loop>:
     1b6:	1d 92       	st	X+, r1

000001b8 <.do_clear_bss_start>:
     1b8:	ad 37       	cpi	r26, 0x7D	; 125
     1ba:	b1 07       	cpc	r27, r17
     1bc:	e1 f7       	brne	.-8      	; 0x1b6 <.do_clear_bss_loop>
     1be:	0e 94 74 01 	call	0x2e8	; 0x2e8 <main>
     1c2:	0c 94 5f 2e 	jmp	0x5cbe	; 0x5cbe <_exit>

000001c6 <__bad_interrupt>:
     1c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ca <__vector_9>:
/*---------------------------------------------------------*/
/* 100Hz timer interrupt generated by OC2                  */
/*---------------------------------------------------------*/

ISR(TIMER2_COMP_vect)
{
     1ca:	1f 92       	push	r1
     1cc:	0f 92       	push	r0
     1ce:	0f b6       	in	r0, 0x3f	; 63
     1d0:	0f 92       	push	r0
     1d2:	0b b6       	in	r0, 0x3b	; 59
     1d4:	0f 92       	push	r0
     1d6:	11 24       	eor	r1, r1
     1d8:	2f 93       	push	r18
     1da:	3f 93       	push	r19
     1dc:	4f 93       	push	r20
     1de:	5f 93       	push	r21
     1e0:	6f 93       	push	r22
     1e2:	7f 93       	push	r23
     1e4:	8f 93       	push	r24
     1e6:	9f 93       	push	r25
     1e8:	af 93       	push	r26
     1ea:	bf 93       	push	r27
     1ec:	ef 93       	push	r30
     1ee:	ff 93       	push	r31
	Timer++;			/* Performance counter for this module */
     1f0:	80 91 19 06 	lds	r24, 0x0619
     1f4:	90 91 1a 06 	lds	r25, 0x061A
     1f8:	01 96       	adiw	r24, 0x01	; 1
     1fa:	90 93 1a 06 	sts	0x061A, r25
     1fe:	80 93 19 06 	sts	0x0619, r24
	disk_timerproc();	/* Drive timer procedure of low level disk I/O module */
     202:	0e 94 c9 18 	call	0x3192	; 0x3192 <disk_timerproc>
}
     206:	ff 91       	pop	r31
     208:	ef 91       	pop	r30
     20a:	bf 91       	pop	r27
     20c:	af 91       	pop	r26
     20e:	9f 91       	pop	r25
     210:	8f 91       	pop	r24
     212:	7f 91       	pop	r23
     214:	6f 91       	pop	r22
     216:	5f 91       	pop	r21
     218:	4f 91       	pop	r20
     21a:	3f 91       	pop	r19
     21c:	2f 91       	pop	r18
     21e:	0f 90       	pop	r0
     220:	0b be       	out	0x3b, r0	; 59
     222:	0f 90       	pop	r0
     224:	0f be       	out	0x3f, r0	; 63
     226:	0f 90       	pop	r0
     228:	1f 90       	pop	r1
     22a:	18 95       	reti

0000022c <get_fattime>:
/* the system does not support a real time clock.          */
/* This is not required in read-only configuration.        */
/*---------------------------------------------------------*/

DWORD get_fattime ()
{
     22c:	a8 e0       	ldi	r26, 0x08	; 8
     22e:	b0 e0       	ldi	r27, 0x00	; 0
     230:	ec e1       	ldi	r30, 0x1C	; 28
     232:	f1 e0       	ldi	r31, 0x01	; 1
     234:	0c 94 db 2d 	jmp	0x5bb6	; 0x5bb6 <__prologue_saves__+0x20>
	RTC rtc;

	/* Get local time */
	rtc_gettime(&rtc);
     238:	ce 01       	movw	r24, r28
     23a:	01 96       	adiw	r24, 0x01	; 1
     23c:	0e 94 86 19 	call	0x330c	; 0x330c <rtc_gettime>

	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)(rtc.year - 1980) << 25)
			| ((DWORD)rtc.month << 21)
			| ((DWORD)rtc.mday << 16)
     240:	2c 81       	ldd	r18, Y+4	; 0x04
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	a9 01       	movw	r20, r18
     24a:	33 27       	eor	r19, r19
     24c:	22 27       	eor	r18, r18
	/* Get local time */
	rtc_gettime(&rtc);

	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)(rtc.year - 1980) << 25)
			| ((DWORD)rtc.month << 21)
     24e:	8b 81       	ldd	r24, Y+3	; 0x03
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	a0 e0       	ldi	r26, 0x00	; 0
     254:	b0 e0       	ldi	r27, 0x00	; 0
     256:	f5 e1       	ldi	r31, 0x15	; 21
     258:	88 0f       	add	r24, r24
     25a:	99 1f       	adc	r25, r25
     25c:	aa 1f       	adc	r26, r26
     25e:	bb 1f       	adc	r27, r27
     260:	fa 95       	dec	r31
     262:	d1 f7       	brne	.-12     	; 0x258 <get_fattime+0x2c>
     264:	28 2b       	or	r18, r24
     266:	39 2b       	or	r19, r25
     268:	4a 2b       	or	r20, r26
     26a:	5b 2b       	or	r21, r27
			| ((DWORD)rtc.mday << 16)
			| ((DWORD)rtc.hour << 11)
     26c:	8e 81       	ldd	r24, Y+6	; 0x06
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	a0 e0       	ldi	r26, 0x00	; 0
     272:	b0 e0       	ldi	r27, 0x00	; 0
     274:	eb e0       	ldi	r30, 0x0B	; 11
     276:	88 0f       	add	r24, r24
     278:	99 1f       	adc	r25, r25
     27a:	aa 1f       	adc	r26, r26
     27c:	bb 1f       	adc	r27, r27
     27e:	ea 95       	dec	r30
     280:	d1 f7       	brne	.-12     	; 0x276 <get_fattime+0x4a>
	rtc_gettime(&rtc);

	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)(rtc.year - 1980) << 25)
			| ((DWORD)rtc.month << 21)
			| ((DWORD)rtc.mday << 16)
     282:	28 2b       	or	r18, r24
     284:	39 2b       	or	r19, r25
     286:	4a 2b       	or	r20, r26
     288:	5b 2b       	or	r21, r27
			| ((DWORD)rtc.hour << 11)
			| ((DWORD)rtc.min << 5)
     28a:	8f 81       	ldd	r24, Y+7	; 0x07
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	a0 e0       	ldi	r26, 0x00	; 0
     290:	b0 e0       	ldi	r27, 0x00	; 0
     292:	75 e0       	ldi	r23, 0x05	; 5
     294:	88 0f       	add	r24, r24
     296:	99 1f       	adc	r25, r25
     298:	aa 1f       	adc	r26, r26
     29a:	bb 1f       	adc	r27, r27
     29c:	7a 95       	dec	r23
     29e:	d1 f7       	brne	.-12     	; 0x294 <get_fattime+0x68>

	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)(rtc.year - 1980) << 25)
			| ((DWORD)rtc.month << 21)
			| ((DWORD)rtc.mday << 16)
			| ((DWORD)rtc.hour << 11)
     2a0:	28 2b       	or	r18, r24
     2a2:	39 2b       	or	r19, r25
     2a4:	4a 2b       	or	r20, r26
     2a6:	5b 2b       	or	r21, r27
			| ((DWORD)rtc.min << 5)
			| ((DWORD)rtc.sec >> 1);
     2a8:	88 85       	ldd	r24, Y+8	; 0x08
     2aa:	86 95       	lsr	r24
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	a0 e0       	ldi	r26, 0x00	; 0
     2b0:	b0 e0       	ldi	r27, 0x00	; 0
	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)(rtc.year - 1980) << 25)
			| ((DWORD)rtc.month << 21)
			| ((DWORD)rtc.mday << 16)
			| ((DWORD)rtc.hour << 11)
			| ((DWORD)rtc.min << 5)
     2b2:	28 2b       	or	r18, r24
     2b4:	39 2b       	or	r19, r25
     2b6:	4a 2b       	or	r20, r26
     2b8:	5b 2b       	or	r21, r27

	/* Get local time */
	rtc_gettime(&rtc);

	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)(rtc.year - 1980) << 25)
     2ba:	89 81       	ldd	r24, Y+1	; 0x01
     2bc:	9a 81       	ldd	r25, Y+2	; 0x02
     2be:	8c 5b       	subi	r24, 0xBC	; 188
     2c0:	97 40       	sbci	r25, 0x07	; 7
     2c2:	a0 e0       	ldi	r26, 0x00	; 0
     2c4:	b0 e0       	ldi	r27, 0x00	; 0
     2c6:	69 e1       	ldi	r22, 0x19	; 25
     2c8:	88 0f       	add	r24, r24
     2ca:	99 1f       	adc	r25, r25
     2cc:	aa 1f       	adc	r26, r26
     2ce:	bb 1f       	adc	r27, r27
     2d0:	6a 95       	dec	r22
     2d2:	d1 f7       	brne	.-12     	; 0x2c8 <get_fattime+0x9c>
     2d4:	28 2b       	or	r18, r24
     2d6:	39 2b       	or	r19, r25
     2d8:	4a 2b       	or	r20, r26
     2da:	5b 2b       	or	r21, r27
			| ((DWORD)rtc.month << 21)
			| ((DWORD)rtc.mday << 16)
			| ((DWORD)rtc.hour << 11)
			| ((DWORD)rtc.min << 5)
			| ((DWORD)rtc.sec >> 1);
}
     2dc:	b9 01       	movw	r22, r18
     2de:	ca 01       	movw	r24, r20
     2e0:	28 96       	adiw	r28, 0x08	; 8
     2e2:	e2 e0       	ldi	r30, 0x02	; 2
     2e4:	0c 94 f7 2d 	jmp	0x5bee	; 0x5bee <__epilogue_restores__+0x20>

000002e8 <main>:
}

/*-----------------------------------------------------------------------*/
/* Main                                                                  */
int main (void)
{
     2e8:	ae e5       	ldi	r26, 0x5E	; 94
     2ea:	b0 e0       	ldi	r27, 0x00	; 0
     2ec:	ea e7       	ldi	r30, 0x7A	; 122
     2ee:	f1 e0       	ldi	r31, 0x01	; 1
     2f0:	0c 94 d7 2d 	jmp	0x5bae	; 0x5bae <__prologue_saves__+0x18>
	int i;
	// Recieve buffer
	U8 rpm_response_buffer[8];
	st_cmd_t rpm_msg;
	
	TWI_init();	/* Init TWI interface */
     2f4:	0e 94 2d 24 	call	0x485a	; 0x485a <TWI_init>

static
void IoInit ()
{
	/* Timer2 used for filesystem functions */
	OCR2A = 90-1;      // Timer2: 100Hz interval (OC2)
     2f8:	89 e5       	ldi	r24, 0x59	; 89
     2fa:	80 93 b3 00 	sts	0x00B3, r24
	TCCR2A = 0b00001101;
     2fe:	8d e0       	ldi	r24, 0x0D	; 13
     300:	80 93 b0 00 	sts	0x00B0, r24
	TIMSK2 = 0b00000010;   // Enable TC2.oc interrupt
     304:	82 e0       	ldi	r24, 0x02	; 2
     306:	80 93 70 00 	sts	0x0070, r24

	/* Timer0 bruges til at sende data req til ECU */
	OCR0A = 100;			// Sæt start værdi
     30a:	84 e6       	ldi	r24, 0x64	; 100
     30c:	87 bd       	out	0x27, r24	; 39
	TCCR0A |= 1<<CS02 | 1<<CS00;    // prescaler til 1024
     30e:	84 b5       	in	r24, 0x24	; 36
     310:	85 60       	ori	r24, 0x05	; 5
     312:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= 1<<OCIE0A; 		// Slår timer compare match interrupt til
     314:	80 91 6e 00 	lds	r24, 0x006E
     318:	82 60       	ori	r24, 0x02	; 2
     31a:	80 93 6e 00 	sts	0x006E, r24

	rtc_init();         // Initialize RTC
     31e:	0e 94 42 1a 	call	0x3484	; 0x3484 <rtc_init>
	can_init(0);		/* Initialize can controllor */
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <can_init>
	uart_init();		/* Initialize uart 0 and 1 for ecu and xbee */
     328:	0e 94 a6 03 	call	0x74c	; 0x74c <uart_init>
	
	TWI_init();	/* Init TWI interface */
	IoInit();

	/* Join xitoa module to uart module */
	xfunc_out = (void (*)(char))uart_put;		/* xprintf writes to uart connected to the xbee */
     32c:	8f ec       	ldi	r24, 0xCF	; 207
     32e:	93 e0       	ldi	r25, 0x03	; 3
     330:	90 93 cc 03 	sts	0x03CC, r25
     334:	80 93 cb 03 	sts	0x03CB, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     338:	8f ef       	ldi	r24, 0xFF	; 255
     33a:	9f ed       	ldi	r25, 0xDF	; 223
     33c:	a0 e1       	ldi	r26, 0x10	; 16
     33e:	81 50       	subi	r24, 0x01	; 1
     340:	90 40       	sbci	r25, 0x00	; 0
     342:	a0 40       	sbci	r26, 0x00	; 0
     344:	e1 f7       	brne	.-8      	; 0x33e <main+0x56>
     346:	00 c0       	rjmp	.+0      	; 0x348 <main+0x60>
     348:	00 00       	nop

	_delay_ms(500);
	xprintf(PSTR("System startet\n"));
     34a:	00 d0       	rcall	.+0      	; 0x34c <main+0x64>
     34c:	87 e7       	ldi	r24, 0x77	; 119
     34e:	91 e0       	ldi	r25, 0x01	; 1
     350:	ad b7       	in	r26, 0x3d	; 61
     352:	be b7       	in	r27, 0x3e	; 62
     354:	12 96       	adiw	r26, 0x02	; 2
     356:	9c 93       	st	X, r25
     358:	8e 93       	st	-X, r24
     35a:	11 97       	sbiw	r26, 0x01	; 1
     35c:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <xprintf>

	/* SD-card */
	res = rtc_gettime(&rtc);
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	ce 01       	movw	r24, r28
     366:	01 96       	adiw	r24, 0x01	; 1
     368:	0e 94 86 19 	call	0x330c	; 0x330c <rtc_gettime>
	xprintf(PSTR("%d-%d-%dT%d:%d:%d\n"), rtc.year, rtc.month, rtc.mday, rtc.hour, rtc.min, rtc.sec);
     36c:	ed b7       	in	r30, 0x3d	; 61
     36e:	fe b7       	in	r31, 0x3e	; 62
     370:	3e 97       	sbiw	r30, 0x0e	; 14
     372:	0f b6       	in	r0, 0x3f	; 63
     374:	f8 94       	cli
     376:	fe bf       	out	0x3e, r31	; 62
     378:	0f be       	out	0x3f, r0	; 63
     37a:	ed bf       	out	0x3d, r30	; 61
     37c:	31 96       	adiw	r30, 0x01	; 1
     37e:	84 e6       	ldi	r24, 0x64	; 100
     380:	91 e0       	ldi	r25, 0x01	; 1
     382:	ad b7       	in	r26, 0x3d	; 61
     384:	be b7       	in	r27, 0x3e	; 62
     386:	12 96       	adiw	r26, 0x02	; 2
     388:	9c 93       	st	X, r25
     38a:	8e 93       	st	-X, r24
     38c:	11 97       	sbiw	r26, 0x01	; 1
     38e:	89 81       	ldd	r24, Y+1	; 0x01
     390:	9a 81       	ldd	r25, Y+2	; 0x02
     392:	93 83       	std	Z+3, r25	; 0x03
     394:	82 83       	std	Z+2, r24	; 0x02
     396:	8b 81       	ldd	r24, Y+3	; 0x03
     398:	84 83       	std	Z+4, r24	; 0x04
     39a:	15 82       	std	Z+5, r1	; 0x05
     39c:	8c 81       	ldd	r24, Y+4	; 0x04
     39e:	86 83       	std	Z+6, r24	; 0x06
     3a0:	17 82       	std	Z+7, r1	; 0x07
     3a2:	8e 81       	ldd	r24, Y+6	; 0x06
     3a4:	80 87       	std	Z+8, r24	; 0x08
     3a6:	11 86       	std	Z+9, r1	; 0x09
     3a8:	8f 81       	ldd	r24, Y+7	; 0x07
     3aa:	82 87       	std	Z+10, r24	; 0x0a
     3ac:	13 86       	std	Z+11, r1	; 0x0b
     3ae:	88 85       	ldd	r24, Y+8	; 0x08
     3b0:	84 87       	std	Z+12, r24	; 0x0c
     3b2:	15 86       	std	Z+13, r1	; 0x0d
     3b4:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <xprintf>

	xprintf(PSTR("Initialize disk 0\n"));
     3b8:	ed b7       	in	r30, 0x3d	; 61
     3ba:	fe b7       	in	r31, 0x3e	; 62
     3bc:	3c 96       	adiw	r30, 0x0c	; 12
     3be:	0f b6       	in	r0, 0x3f	; 63
     3c0:	f8 94       	cli
     3c2:	fe bf       	out	0x3e, r31	; 62
     3c4:	0f be       	out	0x3f, r0	; 63
     3c6:	ed bf       	out	0x3d, r30	; 61
     3c8:	81 e5       	ldi	r24, 0x51	; 81
     3ca:	91 e0       	ldi	r25, 0x01	; 1
     3cc:	92 83       	std	Z+2, r25	; 0x02
     3ce:	81 83       	std	Z+1, r24	; 0x01
     3d0:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <xprintf>
	xprintf(PSTR("test %d %d %d %d\n"), ECUObjects[0].length, ECUObjects[0].id, ECUObjects[1].length, ECUObjects[1].id);
     3d4:	8d b7       	in	r24, 0x3d	; 61
     3d6:	9e b7       	in	r25, 0x3e	; 62
     3d8:	08 97       	sbiw	r24, 0x08	; 8
     3da:	0f b6       	in	r0, 0x3f	; 63
     3dc:	f8 94       	cli
     3de:	9e bf       	out	0x3e, r25	; 62
     3e0:	0f be       	out	0x3f, r0	; 63
     3e2:	8d bf       	out	0x3d, r24	; 61
     3e4:	ed b7       	in	r30, 0x3d	; 61
     3e6:	fe b7       	in	r31, 0x3e	; 62
     3e8:	31 96       	adiw	r30, 0x01	; 1
     3ea:	8f e3       	ldi	r24, 0x3F	; 63
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	ad b7       	in	r26, 0x3d	; 61
     3f0:	be b7       	in	r27, 0x3e	; 62
     3f2:	12 96       	adiw	r26, 0x02	; 2
     3f4:	9c 93       	st	X, r25
     3f6:	8e 93       	st	-X, r24
     3f8:	11 97       	sbiw	r26, 0x01	; 1
     3fa:	82 e0       	ldi	r24, 0x02	; 2
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	93 83       	std	Z+3, r25	; 0x03
     400:	82 83       	std	Z+2, r24	; 0x02
     402:	21 e0       	ldi	r18, 0x01	; 1
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	35 83       	std	Z+5, r19	; 0x05
     408:	24 83       	std	Z+4, r18	; 0x04
     40a:	97 83       	std	Z+7, r25	; 0x07
     40c:	86 83       	std	Z+6, r24	; 0x06
     40e:	91 87       	std	Z+9, r25	; 0x09
     410:	80 87       	std	Z+8, r24	; 0x08
     412:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <xprintf>
	xprintf(PSTR("test2 %d %d %d %d\n"), valueObjects[ECUObjects[0].id].length, valueObjects[ECUObjects[0].id].action, valueObjects[ECUObjects[1].id].length, valueObjects[ECUObjects[1].id].action);
     416:	ed b7       	in	r30, 0x3d	; 61
     418:	fe b7       	in	r31, 0x3e	; 62
     41a:	31 96       	adiw	r30, 0x01	; 1
     41c:	8c e2       	ldi	r24, 0x2C	; 44
     41e:	91 e0       	ldi	r25, 0x01	; 1
     420:	ad b7       	in	r26, 0x3d	; 61
     422:	be b7       	in	r27, 0x3e	; 62
     424:	12 96       	adiw	r26, 0x02	; 2
     426:	9c 93       	st	X, r25
     428:	8e 93       	st	-X, r24
     42a:	11 97       	sbiw	r26, 0x01	; 1
     42c:	80 e1       	ldi	r24, 0x10	; 16
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	93 83       	std	Z+3, r25	; 0x03
     432:	82 83       	std	Z+2, r24	; 0x02
     434:	15 82       	std	Z+5, r1	; 0x05
     436:	14 82       	std	Z+4, r1	; 0x04
     438:	97 83       	std	Z+7, r25	; 0x07
     43a:	86 83       	std	Z+6, r24	; 0x06
     43c:	11 86       	std	Z+9, r1	; 0x09
     43e:	10 86       	std	Z+8, r1	; 0x08
     440:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <xprintf>
	xprintf(PSTR("rc=%d\n"), (WORD)disk_initialize(0));		/* initialize filesystem */
     444:	ed b7       	in	r30, 0x3d	; 61
     446:	fe b7       	in	r31, 0x3e	; 62
     448:	3a 96       	adiw	r30, 0x0a	; 10
     44a:	0f b6       	in	r0, 0x3f	; 63
     44c:	f8 94       	cli
     44e:	fe bf       	out	0x3e, r31	; 62
     450:	0f be       	out	0x3f, r0	; 63
     452:	ed bf       	out	0x3d, r30	; 61
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	0e 94 e7 15 	call	0x2bce	; 0x2bce <disk_initialize>
     45a:	00 d0       	rcall	.+0      	; 0x45c <main+0x174>
     45c:	00 d0       	rcall	.+0      	; 0x45e <main+0x176>
     45e:	ed b7       	in	r30, 0x3d	; 61
     460:	fe b7       	in	r31, 0x3e	; 62
     462:	31 96       	adiw	r30, 0x01	; 1
     464:	25 e2       	ldi	r18, 0x25	; 37
     466:	31 e0       	ldi	r19, 0x01	; 1
     468:	ad b7       	in	r26, 0x3d	; 61
     46a:	be b7       	in	r27, 0x3e	; 62
     46c:	12 96       	adiw	r26, 0x02	; 2
     46e:	3c 93       	st	X, r19
     470:	2e 93       	st	-X, r18
     472:	11 97       	sbiw	r26, 0x01	; 1
     474:	82 83       	std	Z+2, r24	; 0x02
     476:	13 82       	std	Z+3, r1	; 0x03
     478:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <xprintf>
	xprintf(PSTR("Initialize logical drice 0\n"));	
     47c:	0f 90       	pop	r0
     47e:	0f 90       	pop	r0
     480:	89 e0       	ldi	r24, 0x09	; 9
     482:	91 e0       	ldi	r25, 0x01	; 1
     484:	ed b7       	in	r30, 0x3d	; 61
     486:	fe b7       	in	r31, 0x3e	; 62
     488:	92 83       	std	Z+2, r25	; 0x02
     48a:	81 83       	std	Z+1, r24	; 0x01
     48c:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <xprintf>
	xprintf(PSTR("rc=%d\n"), (WORD)f_mount(0, &Fatfs[0]));		/* mount filesystem */
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	6d ec       	ldi	r22, 0xCD	; 205
     498:	73 e0       	ldi	r23, 0x03	; 3
     49a:	0e 94 2f 0c 	call	0x185e	; 0x185e <f_mount>
     49e:	00 d0       	rcall	.+0      	; 0x4a0 <main+0x1b8>
     4a0:	00 d0       	rcall	.+0      	; 0x4a2 <main+0x1ba>
     4a2:	22 e0       	ldi	r18, 0x02	; 2
     4a4:	31 e0       	ldi	r19, 0x01	; 1
     4a6:	ad b7       	in	r26, 0x3d	; 61
     4a8:	be b7       	in	r27, 0x3e	; 62
     4aa:	12 96       	adiw	r26, 0x02	; 2
     4ac:	3c 93       	st	X, r19
     4ae:	2e 93       	st	-X, r18
     4b0:	11 97       	sbiw	r26, 0x01	; 1
     4b2:	14 96       	adiw	r26, 0x04	; 4
     4b4:	9c 93       	st	X, r25
     4b6:	8e 93       	st	-X, r24
     4b8:	13 97       	sbiw	r26, 0x03	; 3
     4ba:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <xprintf>
	xprintf(PSTR("open dir \n")); 
     4be:	0f 90       	pop	r0
     4c0:	0f 90       	pop	r0
     4c2:	87 ef       	ldi	r24, 0xF7	; 247
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	ed b7       	in	r30, 0x3d	; 61
     4c8:	fe b7       	in	r31, 0x3e	; 62
     4ca:	92 83       	std	Z+2, r25	; 0x02
     4cc:	81 83       	std	Z+1, r24	; 0x01
     4ce:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <xprintf>
	xprintf(PSTR("rc=%d\n"), f_opendir(&dir, "0:"));	/* open root dir on fs */
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
     4d6:	8e 01       	movw	r16, r28
     4d8:	07 5d       	subi	r16, 0xD7	; 215
     4da:	1f 4f       	sbci	r17, 0xFF	; 255
     4dc:	c8 01       	movw	r24, r16
     4de:	60 e0       	ldi	r22, 0x00	; 0
     4e0:	71 e0       	ldi	r23, 0x01	; 1
     4e2:	0e 94 b3 13 	call	0x2766	; 0x2766 <f_opendir>
     4e6:	00 d0       	rcall	.+0      	; 0x4e8 <main+0x200>
     4e8:	00 d0       	rcall	.+0      	; 0x4ea <main+0x202>
     4ea:	20 ef       	ldi	r18, 0xF0	; 240
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	ad b7       	in	r26, 0x3d	; 61
     4f0:	be b7       	in	r27, 0x3e	; 62
     4f2:	12 96       	adiw	r26, 0x02	; 2
     4f4:	3c 93       	st	X, r19
     4f6:	2e 93       	st	-X, r18
     4f8:	11 97       	sbiw	r26, 0x01	; 1
     4fa:	14 96       	adiw	r26, 0x04	; 4
     4fc:	9c 93       	st	X, r25
     4fe:	8e 93       	st	-X, r24
     500:	13 97       	sbiw	r26, 0x03	; 3
     502:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <xprintf>
	freelognumber = get_free_log_number(&dir);		/* Get lowest free log number */
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	c8 01       	movw	r24, r16
     510:	0e 94 6c 24 	call	0x48d8	; 0x48d8 <get_free_log_number>
     514:	8c 01       	movw	r16, r24
	xprintf(PSTR("Free log nr %d\n"), freelognumber);
     516:	00 d0       	rcall	.+0      	; 0x518 <main+0x230>
     518:	00 d0       	rcall	.+0      	; 0x51a <main+0x232>
     51a:	80 ee       	ldi	r24, 0xE0	; 224
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	ed b7       	in	r30, 0x3d	; 61
     520:	fe b7       	in	r31, 0x3e	; 62
     522:	92 83       	std	Z+2, r25	; 0x02
     524:	81 83       	std	Z+1, r24	; 0x01
     526:	14 83       	std	Z+4, r17	; 0x04
     528:	03 83       	std	Z+3, r16	; 0x03
     52a:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <xprintf>
	itoa(freelognumber, filename, 10);			/* Convert to string for use in f_open() */
     52e:	0f 90       	pop	r0
     530:	0f 90       	pop	r0
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
     536:	b1 e1       	ldi	r27, 0x11	; 17
     538:	eb 2e       	mov	r14, r27
     53a:	f1 2c       	mov	r15, r1
     53c:	ec 0e       	add	r14, r28
     53e:	fd 1e       	adc	r15, r29
     540:	c8 01       	movw	r24, r16
     542:	b7 01       	movw	r22, r14
     544:	4a e0       	ldi	r20, 0x0A	; 10
     546:	50 e0       	ldi	r21, 0x00	; 0
     548:	0e 94 26 2e 	call	0x5c4c	; 0x5c4c <itoa>
	xprintf(PSTR("Opening file %s\n"), filename);
     54c:	00 d0       	rcall	.+0      	; 0x54e <main+0x266>
     54e:	00 d0       	rcall	.+0      	; 0x550 <main+0x268>
     550:	8f ec       	ldi	r24, 0xCF	; 207
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	ad b7       	in	r26, 0x3d	; 61
     556:	be b7       	in	r27, 0x3e	; 62
     558:	12 96       	adiw	r26, 0x02	; 2
     55a:	9c 93       	st	X, r25
     55c:	8e 93       	st	-X, r24
     55e:	11 97       	sbiw	r26, 0x01	; 1
     560:	14 96       	adiw	r26, 0x04	; 4
     562:	fc 92       	st	X, r15
     564:	ee 92       	st	-X, r14
     566:	13 97       	sbiw	r26, 0x03	; 3
     568:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <xprintf>
	xprintf(PSTR("rc=%d\n"), (WORD)f_open(&file1, filename, FA_CREATE_NEW | FA_WRITE));	/* Create new logfile for writing */
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	0f 90       	pop	r0
     574:	8e 01       	movw	r16, r28
     576:	01 5c       	subi	r16, 0xC1	; 193
     578:	1f 4f       	sbci	r17, 0xFF	; 255
     57a:	c8 01       	movw	r24, r16
     57c:	b7 01       	movw	r22, r14
     57e:	46 e0       	ldi	r20, 0x06	; 6
     580:	0e 94 48 0c 	call	0x1890	; 0x1890 <f_open>
     584:	00 d0       	rcall	.+0      	; 0x586 <main+0x29e>
     586:	00 d0       	rcall	.+0      	; 0x588 <main+0x2a0>
     588:	28 ec       	ldi	r18, 0xC8	; 200
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	ed b7       	in	r30, 0x3d	; 61
     58e:	fe b7       	in	r31, 0x3e	; 62
     590:	32 83       	std	Z+2, r19	; 0x02
     592:	21 83       	std	Z+1, r18	; 0x01
     594:	94 83       	std	Z+4, r25	; 0x04
     596:	83 83       	std	Z+3, r24	; 0x03
     598:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <xprintf>
	f_sync(&file1);			/* Sync filesystem to write changes to disk */
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	c8 01       	movw	r24, r16
     5a6:	0e 94 de 10 	call	0x21bc	; 0x21bc <f_sync>
     5aa:	8f ef       	ldi	r24, 0xFF	; 255
     5ac:	9f eb       	ldi	r25, 0xBF	; 191
     5ae:	a1 e2       	ldi	r26, 0x21	; 33
     5b0:	81 50       	subi	r24, 0x01	; 1
     5b2:	90 40       	sbci	r25, 0x00	; 0
     5b4:	a0 40       	sbci	r26, 0x00	; 0
     5b6:	e1 f7       	brne	.-8      	; 0x5b0 <main+0x2c8>
     5b8:	00 c0       	rjmp	.+0      	; 0x5ba <main+0x2d2>
     5ba:	00 00       	nop
	_delay_ms(1000);

	/*
	 *	Kode til hurtig test af can 
	 */
	rpm_msg.pt_data = rpm_response_buffer;
     5bc:	ce 01       	movw	r24, r28
     5be:	09 96       	adiw	r24, 0x09	; 9
     5c0:	9c a3       	std	Y+36, r25	; 0x24
     5c2:	8b a3       	std	Y+35, r24	; 0x23
	rpm_msg.status = 0;
     5c4:	1d a2       	std	Y+37, r1	; 0x25

	can_update_rx_msg(&rpm_msg, rpm_msgid, 8);
     5c6:	ce 01       	movw	r24, r28
     5c8:	4b 96       	adiw	r24, 0x1b	; 27
     5ca:	65 e8       	ldi	r22, 0x85	; 133
     5cc:	48 e0       	ldi	r20, 0x08	; 8
     5ce:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <can_update_rx_msg>

	/* Init queues */
	QUEUE_INIT(xbee_q);	// For xbee
     5d2:	10 92 22 0a 	sts	0x0A22, r1
     5d6:	10 92 21 0a 	sts	0x0A21, r1
     5da:	ef e1       	ldi	r30, 0x1F	; 31
     5dc:	fa e0       	ldi	r31, 0x0A	; 10
     5de:	10 92 20 0a 	sts	0x0A20, r1
     5e2:	10 92 1f 0a 	sts	0x0A1F, r1
     5e6:	16 82       	std	Z+6, r1	; 0x06
     5e8:	89 e7       	ldi	r24, 0x79	; 121
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	95 83       	std	Z+5, r25	; 0x05
     5ee:	84 83       	std	Z+4, r24	; 0x04

	sei();			/* Enable interrupt */
     5f0:	78 94       	sei
	Can_sei();		/* Enable general can interrupt */
     5f2:	80 91 db 00 	lds	r24, 0x00DB
     5f6:	80 68       	ori	r24, 0x80	; 128
     5f8:	80 93 db 00 	sts	0x00DB, r24
	Can_set_tx_int();	/* Enable can tx interrupt */
     5fc:	80 91 db 00 	lds	r24, 0x00DB
     600:	80 61       	ori	r24, 0x10	; 16
     602:	80 93 db 00 	sts	0x00DB, r24
	Can_set_rx_int();	/* Enable can rx interrupt */
     606:	80 91 db 00 	lds	r24, 0x00DB
     60a:	80 62       	ori	r24, 0x20	; 32
     60c:	80 93 db 00 	sts	0x00DB, r24
		if (QUEUE_GET_NUM_ELE(xbee_q) >= 40) {
		
			//xprintf(PSTR("More than 20 elements\n"));
			xbee_send_trigger();
		}
		sd_log_check(&file1);
     610:	e0 2e       	mov	r14, r16
     612:	01 2f       	mov	r16, r17
     614:	8f ef       	ldi	r24, 0xFF	; 255
     616:	9f e5       	ldi	r25, 0x5F	; 95
     618:	a3 e0       	ldi	r26, 0x03	; 3
     61a:	81 50       	subi	r24, 0x01	; 1
     61c:	90 40       	sbci	r25, 0x00	; 0
     61e:	a0 40       	sbci	r26, 0x00	; 0
     620:	e1 f7       	brne	.-8      	; 0x61a <main+0x332>
     622:	00 c0       	rjmp	.+0      	; 0x624 <main+0x33c>
     624:	00 00       	nop
	Can_set_rx_int();	/* Enable can rx interrupt */

	while(1) {
		_delay_ms(100);
		
		if (QUEUE_GET_NUM_ELE(xbee_q) >= 40) {
     626:	80 91 25 0a 	lds	r24, 0x0A25
     62a:	88 32       	cpi	r24, 0x28	; 40
     62c:	10 f0       	brcs	.+4      	; 0x632 <main+0x34a>
		
			//xprintf(PSTR("More than 20 elements\n"));
			xbee_send_trigger();
     62e:	0e 94 0e 24 	call	0x481c	; 0x481c <xbee_send_trigger>
		}
		sd_log_check(&file1);
     632:	8e 2d       	mov	r24, r14
     634:	90 2f       	mov	r25, r16
     636:	0e 94 da 24 	call	0x49b4	; 0x49b4 <sd_log_check>
		f_sync(&file1);
     63a:	8e 2d       	mov	r24, r14
     63c:	90 2f       	mov	r25, r16
     63e:	0e 94 de 10 	call	0x21bc	; 0x21bc <f_sync>
//		ecu_data_handler();
/*		f_write(&file1, test, 13, e);*/
/*		f_sync(&file1);	*/
	}
     642:	e8 cf       	rjmp	.-48     	; 0x614 <main+0x32c>

00000644 <USART0_Transmit>:
#include "uart.h"

void USART0_Transmit( unsigned char txData )
{
   /* Wait for empty transmit buffer */
   while ( !( UCSR0A & (1<<UDRE0)) );
     644:	90 91 c0 00 	lds	r25, 0x00C0
     648:	95 ff       	sbrs	r25, 5
     64a:	fc cf       	rjmp	.-8      	; 0x644 <USART0_Transmit>
   /* Put data into buffer, sends the data */
   UDR0 = txData;
     64c:	80 93 c6 00 	sts	0x00C6, r24
}
     650:	08 95       	ret

00000652 <USART1_Transmit>:

void USART1_Transmit( unsigned char txData )
{
   /* Wait for empty transmit buffer */
   while ( !( UCSR1A & (1<<UDRE1)) );
     652:	90 91 c8 00 	lds	r25, 0x00C8
     656:	95 ff       	sbrs	r25, 5
     658:	fc cf       	rjmp	.-8      	; 0x652 <USART1_Transmit>
   /* Put data into buffer, sends the data */
   UDR1 = txData;
     65a:	80 93 ce 00 	sts	0x00CE, r24
}
     65e:	08 95       	ret

00000660 <USART_set_baud_rate>:

void USART_set_baud_rate(double baudrate0, double baudrate1)
{
     660:	6f 92       	push	r6
     662:	7f 92       	push	r7
     664:	8f 92       	push	r8
     666:	9f 92       	push	r9
     668:	af 92       	push	r10
     66a:	bf 92       	push	r11
     66c:	cf 92       	push	r12
     66e:	df 92       	push	r13
     670:	ef 92       	push	r14
     672:	ff 92       	push	r15
     674:	0f 93       	push	r16
     676:	1f 93       	push	r17
     678:	7b 01       	movw	r14, r22
     67a:	8c 01       	movw	r16, r24
     67c:	59 01       	movw	r10, r18
     67e:	6a 01       	movw	r12, r20
   // calculate division factor for requested baud rate, and set it
   int bauddiv0 = ((F_CPU+(baudrate0*8L))/(baudrate0*16L)-1);
     680:	20 e0       	ldi	r18, 0x00	; 0
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	40 e0       	ldi	r20, 0x00	; 0
     686:	51 e4       	ldi	r21, 0x41	; 65
     688:	0e 94 26 2a 	call	0x544c	; 0x544c <__mulsf3>
     68c:	20 e0       	ldi	r18, 0x00	; 0
     68e:	30 ec       	ldi	r19, 0xC0	; 192
     690:	48 e2       	ldi	r20, 0x28	; 40
     692:	5b e4       	ldi	r21, 0x4B	; 75
     694:	0e 94 c8 29 	call	0x5390	; 0x5390 <__addsf3>
     698:	3b 01       	movw	r6, r22
     69a:	4c 01       	movw	r8, r24
     69c:	c8 01       	movw	r24, r16
     69e:	b7 01       	movw	r22, r14
     6a0:	20 e0       	ldi	r18, 0x00	; 0
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	40 e8       	ldi	r20, 0x80	; 128
     6a6:	51 e4       	ldi	r21, 0x41	; 65
     6a8:	0e 94 26 2a 	call	0x544c	; 0x544c <__mulsf3>
     6ac:	9b 01       	movw	r18, r22
     6ae:	ac 01       	movw	r20, r24
     6b0:	c4 01       	movw	r24, r8
     6b2:	b3 01       	movw	r22, r6
     6b4:	0e 94 20 2b 	call	0x5640	; 0x5640 <__divsf3>
     6b8:	20 e0       	ldi	r18, 0x00	; 0
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	40 e8       	ldi	r20, 0x80	; 128
     6be:	5f e3       	ldi	r21, 0x3F	; 63
     6c0:	0e 94 f5 29 	call	0x53ea	; 0x53ea <__subsf3>
     6c4:	0e 94 ce 2b 	call	0x579c	; 0x579c <__fixsfsi>
     6c8:	7b 01       	movw	r14, r22
   int bauddiv1 = ((F_CPU+(baudrate1*8L))/(baudrate1*16L)-1);
     6ca:	c6 01       	movw	r24, r12
     6cc:	b5 01       	movw	r22, r10
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	40 e0       	ldi	r20, 0x00	; 0
     6d4:	51 e4       	ldi	r21, 0x41	; 65
     6d6:	0e 94 26 2a 	call	0x544c	; 0x544c <__mulsf3>
     6da:	20 e0       	ldi	r18, 0x00	; 0
     6dc:	30 ec       	ldi	r19, 0xC0	; 192
     6de:	48 e2       	ldi	r20, 0x28	; 40
     6e0:	5b e4       	ldi	r21, 0x4B	; 75
     6e2:	0e 94 c8 29 	call	0x5390	; 0x5390 <__addsf3>
     6e6:	3b 01       	movw	r6, r22
     6e8:	4c 01       	movw	r8, r24
     6ea:	c6 01       	movw	r24, r12
     6ec:	b5 01       	movw	r22, r10
     6ee:	20 e0       	ldi	r18, 0x00	; 0
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	40 e8       	ldi	r20, 0x80	; 128
     6f4:	51 e4       	ldi	r21, 0x41	; 65
     6f6:	0e 94 26 2a 	call	0x544c	; 0x544c <__mulsf3>
     6fa:	9b 01       	movw	r18, r22
     6fc:	ac 01       	movw	r20, r24
     6fe:	c4 01       	movw	r24, r8
     700:	b3 01       	movw	r22, r6
     702:	0e 94 20 2b 	call	0x5640	; 0x5640 <__divsf3>
     706:	20 e0       	ldi	r18, 0x00	; 0
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	40 e8       	ldi	r20, 0x80	; 128
     70c:	5f e3       	ldi	r21, 0x3F	; 63
     70e:	0e 94 f5 29 	call	0x53ea	; 0x53ea <__subsf3>
     712:	0e 94 ce 2b 	call	0x579c	; 0x579c <__fixsfsi>
   UBRR0L= bauddiv0;
     716:	e0 92 c4 00 	sts	0x00C4, r14
#ifdef UBRR0H
   UBRR0H= (bauddiv0>>8);
     71a:	ef 2c       	mov	r14, r15
     71c:	ff 0c       	add	r15, r15
     71e:	ff 08       	sbc	r15, r15
     720:	e0 92 c5 00 	sts	0x00C5, r14
#endif

   UBRR1L= bauddiv1;
     724:	60 93 cc 00 	sts	0x00CC, r22
#ifdef UBRR1H
   UBRR1H= (bauddiv1>>8);
     728:	67 2f       	mov	r22, r23
     72a:	77 0f       	add	r23, r23
     72c:	77 0b       	sbc	r23, r23
     72e:	60 93 cd 00 	sts	0x00CD, r22
#endif
}
     732:	1f 91       	pop	r17
     734:	0f 91       	pop	r16
     736:	ff 90       	pop	r15
     738:	ef 90       	pop	r14
     73a:	df 90       	pop	r13
     73c:	cf 90       	pop	r12
     73e:	bf 90       	pop	r11
     740:	af 90       	pop	r10
     742:	9f 90       	pop	r9
     744:	8f 90       	pop	r8
     746:	7f 90       	pop	r7
     748:	6f 90       	pop	r6
     74a:	08 95       	ret

0000074c <uart_init>:

/* Initialize UART */
void uart_init()
{
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);  // Turn on U(S)ART port og sæt rec interrupt
     74c:	88 e9       	ldi	r24, 0x98	; 152
     74e:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);   // Set frame format: 8 data bits, 1 stop bit, no parity
     752:	86 e0       	ldi	r24, 0x06	; 6
     754:	80 93 c2 00 	sts	0x00C2, r24

	UCSR1B = (1<<RXEN0)|(1<<TXEN0);      // Turn on U(S)ART port
     758:	98 e1       	ldi	r25, 0x18	; 24
     75a:	90 93 c9 00 	sts	0x00C9, r25
	UCSR1C = (1<<UCSZ01)|(1<<UCSZ00);   // Set frame format: 8 data bits, 1 stop bit, no parity
     75e:	80 93 ca 00 	sts	0x00CA, r24
   
	USART_set_baud_rate(BAUD0, BAUD1); //Set baud rate
     762:	60 e0       	ldi	r22, 0x00	; 0
     764:	70 e0       	ldi	r23, 0x00	; 0
     766:	86 e9       	ldi	r24, 0x96	; 150
     768:	96 e4       	ldi	r25, 0x46	; 70
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	41 ee       	ldi	r20, 0xE1	; 225
     770:	57 e4       	ldi	r21, 0x47	; 71
     772:	0e 94 30 03 	call	0x660	; 0x660 <USART_set_baud_rate>
}
     776:	08 95       	ret

00000778 <uart_get>:

/* Get a received character */
uint8_t uart_get ()
{
   unsigned char d;
   while ((UCSR0A & (1 << RXC0)) == 0) {}; // Do nothing until data have been recieved and is ready to be read from UDR
     778:	80 91 c0 00 	lds	r24, 0x00C0
     77c:	87 ff       	sbrs	r24, 7
     77e:	fc cf       	rjmp	.-8      	; 0x778 <uart_get>
   d=UDR0;
     780:	80 91 c6 00 	lds	r24, 0x00C6
   return d;
}
     784:	08 95       	ret

00000786 <uart_put_test>:

/* Transmit a character */
void uart_put_test( uint8_t device, uint8_t d)
{
     786:	98 2f       	mov	r25, r24
     788:	86 2f       	mov	r24, r22
	switch (device) {
     78a:	99 23       	and	r25, r25
     78c:	29 f0       	breq	.+10     	; 0x798 <uart_put_test+0x12>
     78e:	91 30       	cpi	r25, 0x01	; 1
     790:	29 f4       	brne	.+10     	; 0x79c <uart_put_test+0x16>
		case XBEE:
			USART1_Transmit( d );
     792:	0e 94 29 03 	call	0x652	; 0x652 <USART1_Transmit>
			break;
     796:	08 95       	ret
		case ECU:
			USART0_Transmit( d);
     798:	0e 94 22 03 	call	0x644	; 0x644 <USART0_Transmit>
     79c:	08 95       	ret

0000079e <uart_put>:
}

/* Transmit a character */
void uart_put(uint8_t d)
{
   USART1_Transmit( d );
     79e:	0e 94 29 03 	call	0x652	; 0x652 <USART1_Transmit>
}
     7a2:	08 95       	ret

000007a4 <uart_puts>:

/* Transmit a string */
void uart_puts(const char *s)
{
     7a4:	ef 92       	push	r14
     7a6:	ff 92       	push	r15
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	e8 2e       	mov	r14, r24
     7ae:	e7 01       	movw	r28, r14
     7b0:	7e 01       	movw	r14, r28
     7b2:	f9 2e       	mov	r15, r25
     7b4:	e7 01       	movw	r28, r14
   while (*s)
     7b6:	02 c0       	rjmp	.+4      	; 0x7bc <uart_puts+0x18>
      USART0_Transmit( *s++ );
     7b8:	0e 94 22 03 	call	0x644	; 0x644 <USART0_Transmit>
}

/* Transmit a string */
void uart_puts(const char *s)
{
   while (*s)
     7bc:	89 91       	ld	r24, Y+
     7be:	88 23       	and	r24, r24
     7c0:	d9 f7       	brne	.-10     	; 0x7b8 <uart_puts+0x14>
      USART0_Transmit( *s++ );
}
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	ff 90       	pop	r15
     7c8:	ef 90       	pop	r14
     7ca:	08 95       	ret

000007cc <uart1_put>:

void uart1_put(uint8_t d)
{
        USART1_Transmit(d);
     7cc:	0e 94 29 03 	call	0x652	; 0x652 <USART1_Transmit>
}
     7d0:	08 95       	ret

000007d2 <uart1_puts>:

void uart1_puts(const char *s)
{
     7d2:	ef 92       	push	r14
     7d4:	ff 92       	push	r15
     7d6:	cf 93       	push	r28
     7d8:	df 93       	push	r29
     7da:	e8 2e       	mov	r14, r24
     7dc:	e7 01       	movw	r28, r14
     7de:	7e 01       	movw	r14, r28
     7e0:	f9 2e       	mov	r15, r25
     7e2:	e7 01       	movw	r28, r14
    while (*s)
     7e4:	02 c0       	rjmp	.+4      	; 0x7ea <uart1_puts+0x18>
            USART1_Transmit(*s++);
     7e6:	0e 94 29 03 	call	0x652	; 0x652 <USART1_Transmit>
        USART1_Transmit(d);
}

void uart1_puts(const char *s)
{
    while (*s)
     7ea:	89 91       	ld	r24, Y+
     7ec:	88 23       	and	r24, r24
     7ee:	d9 f7       	brne	.-10     	; 0x7e6 <uart1_puts+0x14>
            USART1_Transmit(*s++);
}
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	ff 90       	pop	r15
     7f6:	ef 90       	pop	r14
     7f8:	08 95       	ret

000007fa <mem_cpy>:
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
     7fa:	28 2f       	mov	r18, r24
     7fc:	39 2f       	mov	r19, r25
     7fe:	d9 01       	movw	r26, r18
     800:	86 2f       	mov	r24, r22
     802:	97 2f       	mov	r25, r23
     804:	fc 01       	movw	r30, r24
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
     806:	02 c0       	rjmp	.+4      	; 0x80c <mem_cpy+0x12>
     808:	81 91       	ld	r24, Z+
     80a:	8d 93       	st	X+, r24
     80c:	41 50       	subi	r20, 0x01	; 1
     80e:	50 40       	sbci	r21, 0x00	; 0
     810:	8f ef       	ldi	r24, 0xFF	; 255
     812:	4f 3f       	cpi	r20, 0xFF	; 255
     814:	58 07       	cpc	r21, r24
     816:	c1 f7       	brne	.-16     	; 0x808 <mem_cpy+0xe>
}
     818:	08 95       	ret

0000081a <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
     81a:	fc 01       	movw	r30, r24
	if (!fs || !fs->fs_type || fs->id != id)
     81c:	00 97       	sbiw	r24, 0x00	; 0
     81e:	81 f0       	breq	.+32     	; 0x840 <validate+0x26>
     820:	80 81       	ld	r24, Z
     822:	88 23       	and	r24, r24
     824:	69 f0       	breq	.+26     	; 0x840 <validate+0x26>
     826:	86 81       	ldd	r24, Z+6	; 0x06
     828:	97 81       	ldd	r25, Z+7	; 0x07
     82a:	86 17       	cp	r24, r22
     82c:	97 07       	cpc	r25, r23
     82e:	41 f4       	brne	.+16     	; 0x840 <validate+0x26>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drive) & STA_NOINIT)
     830:	81 81       	ldd	r24, Z+1	; 0x01
     832:	0e 94 90 16 	call	0x2d20	; 0x2d20 <disk_status>
     836:	80 ff       	sbrs	r24, 0
     838:	06 c0       	rjmp	.+12     	; 0x846 <validate+0x2c>
		return FR_NOT_READY;
     83a:	23 e0       	ldi	r18, 0x03	; 3
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	05 c0       	rjmp	.+10     	; 0x84a <validate+0x30>
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
		return FR_INVALID_OBJECT;
     840:	29 e0       	ldi	r18, 0x09	; 9
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	02 c0       	rjmp	.+4      	; 0x84a <validate+0x30>
	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drive) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
     846:	20 e0       	ldi	r18, 0x00	; 0
     848:	30 e0       	ldi	r19, 0x00	; 0
}
     84a:	c9 01       	movw	r24, r18
     84c:	08 95       	ret

0000084e <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make apperance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
     84e:	a0 e0       	ldi	r26, 0x00	; 0
     850:	b0 e0       	ldi	r27, 0x00	; 0
     852:	ed e2       	ldi	r30, 0x2D	; 45
     854:	f4 e0       	ldi	r31, 0x04	; 4
     856:	0c 94 cf 2d 	jmp	0x5b9e	; 0x5b9e <__prologue_saves__+0x8>
     85a:	ec 01       	movw	r28, r24
     85c:	4a 01       	movw	r8, r20
     85e:	5b 01       	movw	r10, r22
	DWORD wsect;


	wsect = fs->winsect;
     860:	ce a4       	ldd	r12, Y+46	; 0x2e
     862:	df a4       	ldd	r13, Y+47	; 0x2f
     864:	e8 a8       	ldd	r14, Y+48	; 0x30
     866:	f9 a8       	ldd	r15, Y+49	; 0x31
	if (wsect != sector) {	/* Changed current window */
     868:	c4 16       	cp	r12, r20
     86a:	d5 06       	cpc	r13, r21
     86c:	e6 06       	cpc	r14, r22
     86e:	f7 06       	cpc	r15, r23
     870:	09 f4       	brne	.+2      	; 0x874 <move_window+0x26>
     872:	4b c0       	rjmp	.+150    	; 0x90a <move_window+0xbc>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
     874:	8c 81       	ldd	r24, Y+4	; 0x04
     876:	88 23       	and	r24, r24
     878:	a1 f1       	breq	.+104    	; 0x8e2 <move_window+0x94>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
     87a:	82 e3       	ldi	r24, 0x32	; 50
     87c:	68 2e       	mov	r6, r24
     87e:	71 2c       	mov	r7, r1
     880:	6c 0e       	add	r6, r28
     882:	7d 1e       	adc	r7, r29
     884:	89 81       	ldd	r24, Y+1	; 0x01
     886:	b3 01       	movw	r22, r6
     888:	a7 01       	movw	r20, r14
     88a:	96 01       	movw	r18, r12
     88c:	01 e0       	ldi	r16, 0x01	; 1
     88e:	0e 94 ed 16 	call	0x2dda	; 0x2dda <disk_write>
     892:	00 97       	sbiw	r24, 0x00	; 0
     894:	e9 f5       	brne	.+122    	; 0x910 <move_window+0xc2>
				return FR_DISK_ERR;
			fs->wflag = 0;
     896:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
     898:	8a 8d       	ldd	r24, Y+26	; 0x1a
     89a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     89c:	ac 8d       	ldd	r26, Y+28	; 0x1c
     89e:	bd 8d       	ldd	r27, Y+29	; 0x1d
     8a0:	2a a1       	ldd	r18, Y+34	; 0x22
     8a2:	3b a1       	ldd	r19, Y+35	; 0x23
     8a4:	4c a1       	ldd	r20, Y+36	; 0x24
     8a6:	5d a1       	ldd	r21, Y+37	; 0x25
     8a8:	82 0f       	add	r24, r18
     8aa:	93 1f       	adc	r25, r19
     8ac:	a4 1f       	adc	r26, r20
     8ae:	b5 1f       	adc	r27, r21
     8b0:	c8 16       	cp	r12, r24
     8b2:	d9 06       	cpc	r13, r25
     8b4:	ea 06       	cpc	r14, r26
     8b6:	fb 06       	cpc	r15, r27
     8b8:	a0 f4       	brcc	.+40     	; 0x8e2 <move_window+0x94>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
     8ba:	1b 81       	ldd	r17, Y+3	; 0x03
     8bc:	10 c0       	rjmp	.+32     	; 0x8de <move_window+0x90>
					wsect += fs->sects_fat;
     8be:	8a 8d       	ldd	r24, Y+26	; 0x1a
     8c0:	9b 8d       	ldd	r25, Y+27	; 0x1b
     8c2:	ac 8d       	ldd	r26, Y+28	; 0x1c
     8c4:	bd 8d       	ldd	r27, Y+29	; 0x1d
     8c6:	c8 0e       	add	r12, r24
     8c8:	d9 1e       	adc	r13, r25
     8ca:	ea 1e       	adc	r14, r26
     8cc:	fb 1e       	adc	r15, r27
					disk_write(fs->drive, fs->win, wsect, 1);
     8ce:	89 81       	ldd	r24, Y+1	; 0x01
     8d0:	b3 01       	movw	r22, r6
     8d2:	a7 01       	movw	r20, r14
     8d4:	96 01       	movw	r18, r12
     8d6:	01 e0       	ldi	r16, 0x01	; 1
     8d8:	0e 94 ed 16 	call	0x2dda	; 0x2dda <disk_write>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
     8dc:	11 50       	subi	r17, 0x01	; 1
     8de:	12 30       	cpi	r17, 0x02	; 2
     8e0:	70 f7       	brcc	.-36     	; 0x8be <move_window+0x70>
					disk_write(fs->drive, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
     8e2:	81 14       	cp	r8, r1
     8e4:	91 04       	cpc	r9, r1
     8e6:	a1 04       	cpc	r10, r1
     8e8:	b1 04       	cpc	r11, r1
     8ea:	79 f0       	breq	.+30     	; 0x90a <move_window+0xbc>
			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
     8ec:	be 01       	movw	r22, r28
     8ee:	6e 5c       	subi	r22, 0xCE	; 206
     8f0:	7f 4f       	sbci	r23, 0xFF	; 255
     8f2:	89 81       	ldd	r24, Y+1	; 0x01
     8f4:	a5 01       	movw	r20, r10
     8f6:	94 01       	movw	r18, r8
     8f8:	01 e0       	ldi	r16, 0x01	; 1
     8fa:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <disk_read>
     8fe:	00 97       	sbiw	r24, 0x00	; 0
     900:	39 f4       	brne	.+14     	; 0x910 <move_window+0xc2>
				return FR_DISK_ERR;
			fs->winsect = sector;
     902:	8e a6       	std	Y+46, r8	; 0x2e
     904:	9f a6       	std	Y+47, r9	; 0x2f
     906:	a8 aa       	std	Y+48, r10	; 0x30
     908:	b9 aa       	std	Y+49, r11	; 0x31
		}
	}

	return FR_OK;
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	02 c0       	rjmp	.+4      	; 0x914 <move_window+0xc6>
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
				return FR_DISK_ERR;
     910:	21 e0       	ldi	r18, 0x01	; 1
     912:	30 e0       	ldi	r19, 0x00	; 0
			fs->winsect = sector;
		}
	}

	return FR_OK;
}
     914:	c9 01       	movw	r24, r18
     916:	cd b7       	in	r28, 0x3d	; 61
     918:	de b7       	in	r29, 0x3e	; 62
     91a:	ee e0       	ldi	r30, 0x0E	; 14
     91c:	0c 94 eb 2d 	jmp	0x5bd6	; 0x5bd6 <__epilogue_restores__+0x8>

00000920 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
     920:	ef 92       	push	r14
     922:	ff 92       	push	r15
     924:	0f 93       	push	r16
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
     92a:	ec 01       	movw	r28, r24
     92c:	9a 01       	movw	r18, r20
     92e:	ab 01       	movw	r20, r22
	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
     930:	92 e3       	ldi	r25, 0x32	; 50
     932:	e9 2e       	mov	r14, r25
     934:	f1 2c       	mov	r15, r1
     936:	ec 0e       	add	r14, r28
     938:	fd 1e       	adc	r15, r29
     93a:	89 81       	ldd	r24, Y+1	; 0x01
     93c:	b7 01       	movw	r22, r14
     93e:	01 e0       	ldi	r16, 0x01	; 1
     940:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <disk_read>
     944:	00 97       	sbiw	r24, 0x00	; 0
     946:	41 f5       	brne	.+80     	; 0x998 <check_fs+0x78>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
     948:	fe 01       	movw	r30, r28
     94a:	e0 5d       	subi	r30, 0xD0	; 208
     94c:	fd 4f       	sbci	r31, 0xFD	; 253
     94e:	80 81       	ld	r24, Z
     950:	91 81       	ldd	r25, Z+1	; 0x01
     952:	2a ea       	ldi	r18, 0xAA	; 170
     954:	85 35       	cpi	r24, 0x55	; 85
     956:	92 07       	cpc	r25, r18
     958:	09 f5       	brne	.+66     	; 0x99c <check_fs+0x7c>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
     95a:	f7 01       	movw	r30, r14
     95c:	86 a9       	ldd	r24, Z+54	; 0x36
     95e:	97 a9       	ldd	r25, Z+55	; 0x37
     960:	a0 ad       	ldd	r26, Z+56	; 0x38
     962:	b1 ad       	ldd	r27, Z+57	; 0x39
     964:	b0 70       	andi	r27, 0x00	; 0
     966:	86 34       	cpi	r24, 0x46	; 70
     968:	f1 e4       	ldi	r31, 0x41	; 65
     96a:	9f 07       	cpc	r25, r31
     96c:	f4 e5       	ldi	r31, 0x54	; 84
     96e:	af 07       	cpc	r26, r31
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	bf 07       	cpc	r27, r31
     974:	a9 f0       	breq	.+42     	; 0x9a0 <check_fs+0x80>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
     976:	cc 57       	subi	r28, 0x7C	; 124
     978:	df 4f       	sbci	r29, 0xFF	; 255
     97a:	28 81       	ld	r18, Y
     97c:	39 81       	ldd	r19, Y+1	; 0x01
     97e:	4a 81       	ldd	r20, Y+2	; 0x02
     980:	5b 81       	ldd	r21, Y+3	; 0x03
     982:	50 70       	andi	r21, 0x00	; 0
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
		return 3;
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	26 34       	cpi	r18, 0x46	; 70
     988:	91 e4       	ldi	r25, 0x41	; 65
     98a:	39 07       	cpc	r19, r25
     98c:	94 e5       	ldi	r25, 0x54	; 84
     98e:	49 07       	cpc	r20, r25
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	59 07       	cpc	r21, r25
     994:	31 f4       	brne	.+12     	; 0x9a2 <check_fs+0x82>
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <check_fs+0x80>
     998:	83 e0       	ldi	r24, 0x03	; 3
     99a:	03 c0       	rjmp	.+6      	; 0x9a2 <check_fs+0x82>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
     99c:	82 e0       	ldi	r24, 0x02	; 2
     99e:	01 c0       	rjmp	.+2      	; 0x9a2 <check_fs+0x82>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
		return 0;
     9a0:	80 e0       	ldi	r24, 0x00	; 0
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	0f 91       	pop	r16
     9a8:	ff 90       	pop	r15
     9aa:	ef 90       	pop	r14
     9ac:	08 95       	ret

000009ae <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Interal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
     9ae:	a0 e0       	ldi	r26, 0x00	; 0
     9b0:	b0 e0       	ldi	r27, 0x00	; 0
     9b2:	ed ed       	ldi	r30, 0xDD	; 221
     9b4:	f4 e0       	ldi	r31, 0x04	; 4
     9b6:	0c 94 d0 2d 	jmp	0x5ba0	; 0x5ba0 <__prologue_saves__+0xa>
     9ba:	ec 01       	movw	r28, r24
     9bc:	7a 01       	movw	r14, r20
     9be:	8b 01       	movw	r16, r22
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
     9c0:	42 30       	cpi	r20, 0x02	; 2
     9c2:	51 05       	cpc	r21, r1
     9c4:	61 05       	cpc	r22, r1
     9c6:	71 05       	cpc	r23, r1
     9c8:	08 f4       	brcc	.+2      	; 0x9cc <get_fat+0x1e>
     9ca:	97 c0       	rjmp	.+302    	; 0xafa <get_fat+0x14c>
     9cc:	8e 8d       	ldd	r24, Y+30	; 0x1e
     9ce:	9f 8d       	ldd	r25, Y+31	; 0x1f
     9d0:	a8 a1       	ldd	r26, Y+32	; 0x20
     9d2:	b9 a1       	ldd	r27, Y+33	; 0x21
     9d4:	48 17       	cp	r20, r24
     9d6:	59 07       	cpc	r21, r25
     9d8:	6a 07       	cpc	r22, r26
     9da:	7b 07       	cpc	r23, r27
     9dc:	08 f0       	brcs	.+2      	; 0x9e0 <get_fat+0x32>
     9de:	8d c0       	rjmp	.+282    	; 0xafa <get_fat+0x14c>
		return 1;

	fsect = fs->fatbase;
     9e0:	8a a0       	ldd	r8, Y+34	; 0x22
     9e2:	9b a0       	ldd	r9, Y+35	; 0x23
     9e4:	ac a0       	ldd	r10, Y+36	; 0x24
     9e6:	bd a0       	ldd	r11, Y+37	; 0x25
	switch (fs->fs_type) {
     9e8:	88 81       	ld	r24, Y
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	09 f4       	brne	.+2      	; 0x9f0 <get_fat+0x42>
     9ee:	4f c0       	rjmp	.+158    	; 0xa8e <get_fat+0xe0>
     9f0:	83 30       	cpi	r24, 0x03	; 3
     9f2:	09 f4       	brne	.+2      	; 0x9f6 <get_fat+0x48>
     9f4:	64 c0       	rjmp	.+200    	; 0xabe <get_fat+0x110>
     9f6:	81 30       	cpi	r24, 0x01	; 1
     9f8:	09 f0       	breq	.+2      	; 0x9fc <get_fat+0x4e>
     9fa:	84 c0       	rjmp	.+264    	; 0xb04 <get_fat+0x156>
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
     9fc:	6a 01       	movw	r12, r20
     9fe:	d6 94       	lsr	r13
     a00:	c7 94       	ror	r12
     a02:	c4 0e       	add	r12, r20
     a04:	d5 1e       	adc	r13, r21
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
     a06:	a6 01       	movw	r20, r12
     a08:	45 2f       	mov	r20, r21
     a0a:	55 27       	eor	r21, r21
     a0c:	46 95       	lsr	r20
     a0e:	60 e0       	ldi	r22, 0x00	; 0
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	48 0d       	add	r20, r8
     a14:	59 1d       	adc	r21, r9
     a16:	6a 1d       	adc	r22, r10
     a18:	7b 1d       	adc	r23, r11
     a1a:	ce 01       	movw	r24, r28
     a1c:	0e 94 27 04 	call	0x84e	; 0x84e <move_window>
     a20:	00 97       	sbiw	r24, 0x00	; 0
     a22:	09 f0       	breq	.+2      	; 0xa26 <get_fat+0x78>
     a24:	6f c0       	rjmp	.+222    	; 0xb04 <get_fat+0x156>
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
     a26:	f6 01       	movw	r30, r12
     a28:	f1 70       	andi	r31, 0x01	; 1
     a2a:	ec 0f       	add	r30, r28
     a2c:	fd 1f       	adc	r31, r29
     a2e:	72 a8       	ldd	r7, Z+50	; 0x32
     a30:	08 94       	sec
     a32:	c1 1c       	adc	r12, r1
     a34:	d1 1c       	adc	r13, r1
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
     a36:	a6 01       	movw	r20, r12
     a38:	45 2f       	mov	r20, r21
     a3a:	55 27       	eor	r21, r21
     a3c:	46 95       	lsr	r20
     a3e:	60 e0       	ldi	r22, 0x00	; 0
     a40:	70 e0       	ldi	r23, 0x00	; 0
     a42:	48 0d       	add	r20, r8
     a44:	59 1d       	adc	r21, r9
     a46:	6a 1d       	adc	r22, r10
     a48:	7b 1d       	adc	r23, r11
     a4a:	ce 01       	movw	r24, r28
     a4c:	0e 94 27 04 	call	0x84e	; 0x84e <move_window>
     a50:	00 97       	sbiw	r24, 0x00	; 0
     a52:	09 f0       	breq	.+2      	; 0xa56 <get_fat+0xa8>
     a54:	57 c0       	rjmp	.+174    	; 0xb04 <get_fat+0x156>
	fsect = fs->fatbase;
	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
     a56:	27 2d       	mov	r18, r7
     a58:	30 e0       	ldi	r19, 0x00	; 0
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
     a5a:	f6 01       	movw	r30, r12
     a5c:	f1 70       	andi	r31, 0x01	; 1
     a5e:	ec 0f       	add	r30, r28
     a60:	fd 1f       	adc	r31, r29
     a62:	92 a9       	ldd	r25, Z+50	; 0x32
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	28 2b       	or	r18, r24
     a68:	39 2b       	or	r19, r25
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	e8 22       	and	r14, r24
     a6e:	ff 24       	eor	r15, r15
     a70:	e1 14       	cp	r14, r1
     a72:	f1 04       	cpc	r15, r1
     a74:	31 f0       	breq	.+12     	; 0xa82 <get_fat+0xd4>
     a76:	64 e0       	ldi	r22, 0x04	; 4
     a78:	36 95       	lsr	r19
     a7a:	27 95       	ror	r18
     a7c:	6a 95       	dec	r22
     a7e:	e1 f7       	brne	.-8      	; 0xa78 <get_fat+0xca>
     a80:	1b c0       	rjmp	.+54     	; 0xab8 <get_fat+0x10a>
     a82:	40 e0       	ldi	r20, 0x00	; 0
     a84:	50 e0       	ldi	r21, 0x00	; 0
     a86:	3f 70       	andi	r19, 0x0F	; 15
     a88:	40 70       	andi	r20, 0x00	; 0
     a8a:	50 70       	andi	r21, 0x00	; 0
     a8c:	3e c0       	rjmp	.+124    	; 0xb0a <get_fat+0x15c>

	case FS_FAT16 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
     a8e:	77 27       	eor	r23, r23
     a90:	61 2f       	mov	r22, r17
     a92:	50 2f       	mov	r21, r16
     a94:	4f 2d       	mov	r20, r15
     a96:	48 0d       	add	r20, r8
     a98:	59 1d       	adc	r21, r9
     a9a:	6a 1d       	adc	r22, r10
     a9c:	7b 1d       	adc	r23, r11
     a9e:	ce 01       	movw	r24, r28
     aa0:	0e 94 27 04 	call	0x84e	; 0x84e <move_window>
     aa4:	00 97       	sbiw	r24, 0x00	; 0
     aa6:	71 f5       	brne	.+92     	; 0xb04 <get_fat+0x156>
		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
     aa8:	f7 01       	movw	r30, r14
     aaa:	ee 0f       	add	r30, r30
     aac:	ff 1f       	adc	r31, r31
     aae:	f1 70       	andi	r31, 0x01	; 1
     ab0:	ec 0f       	add	r30, r28
     ab2:	fd 1f       	adc	r31, r29
     ab4:	22 a9       	ldd	r18, Z+50	; 0x32
     ab6:	33 a9       	ldd	r19, Z+51	; 0x33
     ab8:	40 e0       	ldi	r20, 0x00	; 0
     aba:	50 e0       	ldi	r21, 0x00	; 0
     abc:	26 c0       	rjmp	.+76     	; 0xb0a <get_fat+0x15c>

	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
     abe:	37 e0       	ldi	r19, 0x07	; 7
     ac0:	76 95       	lsr	r23
     ac2:	67 95       	ror	r22
     ac4:	57 95       	ror	r21
     ac6:	47 95       	ror	r20
     ac8:	3a 95       	dec	r19
     aca:	d1 f7       	brne	.-12     	; 0xac0 <get_fat+0x112>
     acc:	48 0d       	add	r20, r8
     ace:	59 1d       	adc	r21, r9
     ad0:	6a 1d       	adc	r22, r10
     ad2:	7b 1d       	adc	r23, r11
     ad4:	ce 01       	movw	r24, r28
     ad6:	0e 94 27 04 	call	0x84e	; 0x84e <move_window>
     ada:	00 97       	sbiw	r24, 0x00	; 0
     adc:	99 f4       	brne	.+38     	; 0xb04 <get_fat+0x156>
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
     ade:	f7 01       	movw	r30, r14
     ae0:	ee 0f       	add	r30, r30
     ae2:	ff 1f       	adc	r31, r31
     ae4:	ee 0f       	add	r30, r30
     ae6:	ff 1f       	adc	r31, r31
     ae8:	f1 70       	andi	r31, 0x01	; 1
     aea:	ec 0f       	add	r30, r28
     aec:	fd 1f       	adc	r31, r29
     aee:	22 a9       	ldd	r18, Z+50	; 0x32
     af0:	33 a9       	ldd	r19, Z+51	; 0x33
     af2:	44 a9       	ldd	r20, Z+52	; 0x34
     af4:	55 a9       	ldd	r21, Z+53	; 0x35
     af6:	5f 70       	andi	r21, 0x0F	; 15
     af8:	08 c0       	rjmp	.+16     	; 0xb0a <get_fat+0x15c>
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
		return 1;
     afa:	21 e0       	ldi	r18, 0x01	; 1
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	40 e0       	ldi	r20, 0x00	; 0
     b00:	50 e0       	ldi	r21, 0x00	; 0
     b02:	03 c0       	rjmp	.+6      	; 0xb0a <get_fat+0x15c>
	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
	}

	return 0xFFFFFFFF;	/* An error occured at the disk I/O layer */
     b04:	2f ef       	ldi	r18, 0xFF	; 255
     b06:	3f ef       	ldi	r19, 0xFF	; 255
     b08:	a9 01       	movw	r20, r18
}
     b0a:	b9 01       	movw	r22, r18
     b0c:	ca 01       	movw	r24, r20
     b0e:	cd b7       	in	r28, 0x3d	; 61
     b10:	de b7       	in	r29, 0x3e	; 62
     b12:	ed e0       	ldi	r30, 0x0D	; 13
     b14:	0c 94 ec 2d 	jmp	0x5bd8	; 0x5bd8 <__epilogue_restores__+0xa>

00000b18 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->max_clust - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
     b18:	a0 e0       	ldi	r26, 0x00	; 0
     b1a:	b0 e0       	ldi	r27, 0x00	; 0
     b1c:	e2 e9       	ldi	r30, 0x92	; 146
     b1e:	f5 e0       	ldi	r31, 0x05	; 5
     b20:	0c 94 cd 2d 	jmp	0x5b9a	; 0x5b9a <__prologue_saves__+0x4>
     b24:	ec 01       	movw	r28, r24
     b26:	6a 01       	movw	r12, r20
     b28:	7b 01       	movw	r14, r22
     b2a:	28 01       	movw	r4, r16
     b2c:	39 01       	movw	r6, r18
	BYTE *p;
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
     b2e:	42 30       	cpi	r20, 0x02	; 2
     b30:	51 05       	cpc	r21, r1
     b32:	61 05       	cpc	r22, r1
     b34:	71 05       	cpc	r23, r1
     b36:	08 f4       	brcc	.+2      	; 0xb3a <put_fat+0x22>
     b38:	ae c0       	rjmp	.+348    	; 0xc96 <put_fat+0x17e>
     b3a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b3c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     b3e:	a8 a1       	ldd	r26, Y+32	; 0x20
     b40:	b9 a1       	ldd	r27, Y+33	; 0x21
     b42:	48 17       	cp	r20, r24
     b44:	59 07       	cpc	r21, r25
     b46:	6a 07       	cpc	r22, r26
     b48:	7b 07       	cpc	r23, r27
     b4a:	08 f0       	brcs	.+2      	; 0xb4e <put_fat+0x36>
     b4c:	a4 c0       	rjmp	.+328    	; 0xc96 <put_fat+0x17e>
		res = FR_INT_ERR;

	} else {
		fsect = fs->fatbase;
     b4e:	8a a0       	ldd	r8, Y+34	; 0x22
     b50:	9b a0       	ldd	r9, Y+35	; 0x23
     b52:	ac a0       	ldd	r10, Y+36	; 0x24
     b54:	bd a0       	ldd	r11, Y+37	; 0x25
		switch (fs->fs_type) {
     b56:	88 81       	ld	r24, Y
     b58:	82 30       	cpi	r24, 0x02	; 2
     b5a:	09 f4       	brne	.+2      	; 0xb5e <put_fat+0x46>
     b5c:	62 c0       	rjmp	.+196    	; 0xc22 <put_fat+0x10a>
     b5e:	83 30       	cpi	r24, 0x03	; 3
     b60:	09 f4       	brne	.+2      	; 0xb64 <put_fat+0x4c>
     b62:	76 c0       	rjmp	.+236    	; 0xc50 <put_fat+0x138>
     b64:	81 30       	cpi	r24, 0x01	; 1
     b66:	09 f0       	breq	.+2      	; 0xb6a <put_fat+0x52>
     b68:	91 c0       	rjmp	.+290    	; 0xc8c <put_fat+0x174>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
     b6a:	8a 01       	movw	r16, r20
     b6c:	16 95       	lsr	r17
     b6e:	07 95       	ror	r16
     b70:	04 0f       	add	r16, r20
     b72:	15 1f       	adc	r17, r21
			res = move_window(fs, fsect + (bc / SS(fs)));
     b74:	a8 01       	movw	r20, r16
     b76:	45 2f       	mov	r20, r21
     b78:	55 27       	eor	r21, r21
     b7a:	46 95       	lsr	r20
     b7c:	60 e0       	ldi	r22, 0x00	; 0
     b7e:	70 e0       	ldi	r23, 0x00	; 0
     b80:	48 0d       	add	r20, r8
     b82:	59 1d       	adc	r21, r9
     b84:	6a 1d       	adc	r22, r10
     b86:	7b 1d       	adc	r23, r11
     b88:	ce 01       	movw	r24, r28
     b8a:	0e 94 27 04 	call	0x84e	; 0x84e <move_window>
     b8e:	9c 01       	movw	r18, r24
			if (res != FR_OK) break;
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	09 f0       	breq	.+2      	; 0xb96 <put_fat+0x7e>
     b94:	7d c0       	rjmp	.+250    	; 0xc90 <put_fat+0x178>
			p = &fs->win[bc & (SS(fs) - 1)];
     b96:	c8 01       	movw	r24, r16
     b98:	91 70       	andi	r25, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
     b9a:	e1 e0       	ldi	r30, 0x01	; 1
     b9c:	ce 22       	and	r12, r30
     b9e:	dd 24       	eor	r13, r13
     ba0:	c1 14       	cp	r12, r1
     ba2:	d1 04       	cpc	r13, r1
     ba4:	51 f0       	breq	.+20     	; 0xbba <put_fat+0xa2>
     ba6:	fe 01       	movw	r30, r28
     ba8:	e8 0f       	add	r30, r24
     baa:	f9 1f       	adc	r31, r25
     bac:	32 a9       	ldd	r19, Z+50	; 0x32
     bae:	3f 70       	andi	r19, 0x0F	; 15
     bb0:	24 2d       	mov	r18, r4
     bb2:	22 95       	swap	r18
     bb4:	20 7f       	andi	r18, 0xF0	; 240
     bb6:	23 2b       	or	r18, r19
     bb8:	01 c0       	rjmp	.+2      	; 0xbbc <put_fat+0xa4>
     bba:	24 2d       	mov	r18, r4
     bbc:	8c 0f       	add	r24, r28
     bbe:	9d 1f       	adc	r25, r29
     bc0:	fc 01       	movw	r30, r24
     bc2:	22 ab       	std	Z+50, r18	; 0x32
			bc++;
     bc4:	0f 5f       	subi	r16, 0xFF	; 255
     bc6:	1f 4f       	sbci	r17, 0xFF	; 255
			fs->wflag = 1;
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	8c 83       	std	Y+4, r24	; 0x04
			res = move_window(fs, fsect + (bc / SS(fs)));
     bcc:	a8 01       	movw	r20, r16
     bce:	45 2f       	mov	r20, r21
     bd0:	55 27       	eor	r21, r21
     bd2:	46 95       	lsr	r20
     bd4:	60 e0       	ldi	r22, 0x00	; 0
     bd6:	70 e0       	ldi	r23, 0x00	; 0
     bd8:	48 0d       	add	r20, r8
     bda:	59 1d       	adc	r21, r9
     bdc:	6a 1d       	adc	r22, r10
     bde:	7b 1d       	adc	r23, r11
     be0:	ce 01       	movw	r24, r28
     be2:	0e 94 27 04 	call	0x84e	; 0x84e <move_window>
     be6:	9c 01       	movw	r18, r24
			if (res != FR_OK) break;
     be8:	00 97       	sbiw	r24, 0x00	; 0
     bea:	09 f0       	breq	.+2      	; 0xbee <put_fat+0xd6>
     bec:	51 c0       	rjmp	.+162    	; 0xc90 <put_fat+0x178>
			p = &fs->win[bc & (SS(fs) - 1)];
     bee:	11 70       	andi	r17, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
     bf0:	c1 14       	cp	r12, r1
     bf2:	d1 04       	cpc	r13, r1
     bf4:	49 f0       	breq	.+18     	; 0xc08 <put_fat+0xf0>
     bf6:	44 e0       	ldi	r20, 0x04	; 4
     bf8:	76 94       	lsr	r7
     bfa:	67 94       	ror	r6
     bfc:	57 94       	ror	r5
     bfe:	47 94       	ror	r4
     c00:	4a 95       	dec	r20
     c02:	d1 f7       	brne	.-12     	; 0xbf8 <put_fat+0xe0>
     c04:	84 2d       	mov	r24, r4
     c06:	08 c0       	rjmp	.+16     	; 0xc18 <put_fat+0x100>
     c08:	fe 01       	movw	r30, r28
     c0a:	e0 0f       	add	r30, r16
     c0c:	f1 1f       	adc	r31, r17
     c0e:	82 a9       	ldd	r24, Z+50	; 0x32
     c10:	80 7f       	andi	r24, 0xF0	; 240
     c12:	95 2d       	mov	r25, r5
     c14:	9f 70       	andi	r25, 0x0F	; 15
     c16:	89 2b       	or	r24, r25
     c18:	0c 0f       	add	r16, r28
     c1a:	1d 1f       	adc	r17, r29
     c1c:	f8 01       	movw	r30, r16
     c1e:	82 ab       	std	Z+50, r24	; 0x32
			break;
     c20:	37 c0       	rjmp	.+110    	; 0xc90 <put_fat+0x178>

		case FS_FAT16 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
     c22:	45 2f       	mov	r20, r21
     c24:	56 2f       	mov	r21, r22
     c26:	67 2f       	mov	r22, r23
     c28:	77 27       	eor	r23, r23
     c2a:	48 0d       	add	r20, r8
     c2c:	59 1d       	adc	r21, r9
     c2e:	6a 1d       	adc	r22, r10
     c30:	7b 1d       	adc	r23, r11
     c32:	ce 01       	movw	r24, r28
     c34:	0e 94 27 04 	call	0x84e	; 0x84e <move_window>
     c38:	9c 01       	movw	r18, r24
			if (res != FR_OK) break;
     c3a:	00 97       	sbiw	r24, 0x00	; 0
     c3c:	49 f5       	brne	.+82     	; 0xc90 <put_fat+0x178>
			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
     c3e:	f6 01       	movw	r30, r12
     c40:	ee 0f       	add	r30, r30
     c42:	ff 1f       	adc	r31, r31
     c44:	f1 70       	andi	r31, 0x01	; 1
     c46:	ec 0f       	add	r30, r28
     c48:	fd 1f       	adc	r31, r29
     c4a:	53 aa       	std	Z+51, r5	; 0x33
     c4c:	42 aa       	std	Z+50, r4	; 0x32
			break;
     c4e:	20 c0       	rjmp	.+64     	; 0xc90 <put_fat+0x178>

		case FS_FAT32 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
     c50:	b7 e0       	ldi	r27, 0x07	; 7
     c52:	76 95       	lsr	r23
     c54:	67 95       	ror	r22
     c56:	57 95       	ror	r21
     c58:	47 95       	ror	r20
     c5a:	ba 95       	dec	r27
     c5c:	d1 f7       	brne	.-12     	; 0xc52 <put_fat+0x13a>
     c5e:	48 0d       	add	r20, r8
     c60:	59 1d       	adc	r21, r9
     c62:	6a 1d       	adc	r22, r10
     c64:	7b 1d       	adc	r23, r11
     c66:	ce 01       	movw	r24, r28
     c68:	0e 94 27 04 	call	0x84e	; 0x84e <move_window>
     c6c:	9c 01       	movw	r18, r24
			if (res != FR_OK) break;
     c6e:	00 97       	sbiw	r24, 0x00	; 0
     c70:	79 f4       	brne	.+30     	; 0xc90 <put_fat+0x178>
			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
     c72:	f6 01       	movw	r30, r12
     c74:	ee 0f       	add	r30, r30
     c76:	ff 1f       	adc	r31, r31
     c78:	ee 0f       	add	r30, r30
     c7a:	ff 1f       	adc	r31, r31
     c7c:	f1 70       	andi	r31, 0x01	; 1
     c7e:	ec 0f       	add	r30, r28
     c80:	fd 1f       	adc	r31, r29
     c82:	42 aa       	std	Z+50, r4	; 0x32
     c84:	53 aa       	std	Z+51, r5	; 0x33
     c86:	64 aa       	std	Z+52, r6	; 0x34
     c88:	75 aa       	std	Z+53, r7	; 0x35
			break;
     c8a:	02 c0       	rjmp	.+4      	; 0xc90 <put_fat+0x178>

		default :
			res = FR_INT_ERR;
     c8c:	22 e0       	ldi	r18, 0x02	; 2
     c8e:	30 e0       	ldi	r19, 0x00	; 0
		}
		fs->wflag = 1;
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	8c 83       	std	Y+4, r24	; 0x04
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <put_fat+0x182>
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
		res = FR_INT_ERR;
     c96:	22 e0       	ldi	r18, 0x02	; 2
     c98:	30 e0       	ldi	r19, 0x00	; 0
		}
		fs->wflag = 1;
	}

	return res;
}
     c9a:	c9 01       	movw	r24, r18
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	e0 e1       	ldi	r30, 0x10	; 16
     ca2:	0c 94 e9 2d 	jmp	0x5bd2	; 0x5bd2 <__epilogue_restores__+0x4>

00000ca6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
     ca6:	a4 e0       	ldi	r26, 0x04	; 4
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e9 e5       	ldi	r30, 0x59	; 89
     cac:	f6 e0       	ldi	r31, 0x06	; 6
     cae:	0c 94 cb 2d 	jmp	0x5b96	; 0x5b96 <__prologue_saves__>
     cb2:	1c 01       	movw	r2, r24
     cb4:	2a 01       	movw	r4, r20
     cb6:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl, mcl;


	mcl = fs->max_clust;
     cb8:	dc 01       	movw	r26, r24
     cba:	5e 96       	adiw	r26, 0x1e	; 30
     cbc:	8d 91       	ld	r24, X+
     cbe:	9d 91       	ld	r25, X+
     cc0:	0d 90       	ld	r0, X+
     cc2:	bc 91       	ld	r27, X
     cc4:	a0 2d       	mov	r26, r0
     cc6:	89 83       	std	Y+1, r24	; 0x01
     cc8:	9a 83       	std	Y+2, r25	; 0x02
     cca:	ab 83       	std	Y+3, r26	; 0x03
     ccc:	bc 83       	std	Y+4, r27	; 0x04
	if (clst == 0) {		/* Create new chain */
     cce:	41 15       	cp	r20, r1
     cd0:	51 05       	cpc	r21, r1
     cd2:	61 05       	cpc	r22, r1
     cd4:	71 05       	cpc	r23, r1
     cd6:	81 f4       	brne	.+32     	; 0xcf8 <create_chain+0x52>
		scl = fs->last_clust;			/* Get suggested start point */
     cd8:	f1 01       	movw	r30, r2
     cda:	82 84       	ldd	r8, Z+10	; 0x0a
     cdc:	93 84       	ldd	r9, Z+11	; 0x0b
     cde:	a4 84       	ldd	r10, Z+12	; 0x0c
     ce0:	b5 84       	ldd	r11, Z+13	; 0x0d
		if (scl == 0 || scl >= mcl) scl = 1;
     ce2:	81 14       	cp	r8, r1
     ce4:	91 04       	cpc	r9, r1
     ce6:	a1 04       	cpc	r10, r1
     ce8:	b1 04       	cpc	r11, r1
     cea:	f1 f0       	breq	.+60     	; 0xd28 <create_chain+0x82>
     cec:	88 16       	cp	r8, r24
     cee:	99 06       	cpc	r9, r25
     cf0:	aa 06       	cpc	r10, r26
     cf2:	bb 06       	cpc	r11, r27
     cf4:	c8 f4       	brcc	.+50     	; 0xd28 <create_chain+0x82>
     cf6:	1d c0       	rjmp	.+58     	; 0xd32 <create_chain+0x8c>
	}
	else {					/* Stretch existing chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
     cf8:	c1 01       	movw	r24, r2
     cfa:	0e 94 d7 04 	call	0x9ae	; 0x9ae <get_fat>
     cfe:	9b 01       	movw	r18, r22
     d00:	ac 01       	movw	r20, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
     d02:	62 30       	cpi	r22, 0x02	; 2
     d04:	71 05       	cpc	r23, r1
     d06:	81 05       	cpc	r24, r1
     d08:	91 05       	cpc	r25, r1
     d0a:	08 f4       	brcc	.+2      	; 0xd0e <create_chain+0x68>
     d0c:	88 c0       	rjmp	.+272    	; 0xe1e <create_chain+0x178>
		if (cs < mcl) return cs;		/* It is already followed by next cluster */
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	9a 81       	ldd	r25, Y+2	; 0x02
     d12:	ab 81       	ldd	r26, Y+3	; 0x03
     d14:	bc 81       	ldd	r27, Y+4	; 0x04
     d16:	28 17       	cp	r18, r24
     d18:	39 07       	cpc	r19, r25
     d1a:	4a 07       	cpc	r20, r26
     d1c:	5b 07       	cpc	r21, r27
     d1e:	08 f4       	brcc	.+2      	; 0xd22 <create_chain+0x7c>
     d20:	8d c0       	rjmp	.+282    	; 0xe3c <create_chain+0x196>
     d22:	53 01       	movw	r10, r6
     d24:	42 01       	movw	r8, r4
     d26:	05 c0       	rjmp	.+10     	; 0xd32 <create_chain+0x8c>


	mcl = fs->max_clust;
	if (clst == 0) {		/* Create new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (scl == 0 || scl >= mcl) scl = 1;
     d28:	a1 e0       	ldi	r26, 0x01	; 1
     d2a:	8a 2e       	mov	r8, r26
     d2c:	91 2c       	mov	r9, r1
     d2e:	a1 2c       	mov	r10, r1
     d30:	b1 2c       	mov	r11, r1
     d32:	75 01       	movw	r14, r10
     d34:	64 01       	movw	r12, r8
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
     d36:	08 94       	sec
     d38:	c1 1c       	adc	r12, r1
     d3a:	d1 1c       	adc	r13, r1
     d3c:	e1 1c       	adc	r14, r1
     d3e:	f1 1c       	adc	r15, r1
		if (ncl >= mcl) {				/* Wrap around */
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	9a 81       	ldd	r25, Y+2	; 0x02
     d44:	ab 81       	ldd	r26, Y+3	; 0x03
     d46:	bc 81       	ldd	r27, Y+4	; 0x04
     d48:	c8 16       	cp	r12, r24
     d4a:	d9 06       	cpc	r13, r25
     d4c:	ea 06       	cpc	r14, r26
     d4e:	fb 06       	cpc	r15, r27
     d50:	60 f0       	brcs	.+24     	; 0xd6a <create_chain+0xc4>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free custer */
     d52:	92 e0       	ldi	r25, 0x02	; 2
     d54:	89 16       	cp	r8, r25
     d56:	91 04       	cpc	r9, r1
     d58:	a1 04       	cpc	r10, r1
     d5a:	b1 04       	cpc	r11, r1
     d5c:	08 f4       	brcc	.+2      	; 0xd60 <create_chain+0xba>
     d5e:	64 c0       	rjmp	.+200    	; 0xe28 <create_chain+0x182>

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= mcl) {				/* Wrap around */
			ncl = 2;
     d60:	f2 e0       	ldi	r31, 0x02	; 2
     d62:	cf 2e       	mov	r12, r31
     d64:	d1 2c       	mov	r13, r1
     d66:	e1 2c       	mov	r14, r1
     d68:	f1 2c       	mov	r15, r1
			if (ncl > scl) return 0;	/* No free custer */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
     d6a:	c1 01       	movw	r24, r2
     d6c:	b7 01       	movw	r22, r14
     d6e:	a6 01       	movw	r20, r12
     d70:	0e 94 d7 04 	call	0x9ae	; 0x9ae <get_fat>
     d74:	9b 01       	movw	r18, r22
     d76:	ac 01       	movw	r20, r24
		if (cs == 0) break;				/* Found a free cluster */
     d78:	61 15       	cp	r22, r1
     d7a:	71 05       	cpc	r23, r1
     d7c:	81 05       	cpc	r24, r1
     d7e:	91 05       	cpc	r25, r1
     d80:	a9 f0       	breq	.+42     	; 0xdac <create_chain+0x106>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
     d82:	6f 3f       	cpi	r22, 0xFF	; 255
     d84:	af ef       	ldi	r26, 0xFF	; 255
     d86:	7a 07       	cpc	r23, r26
     d88:	af ef       	ldi	r26, 0xFF	; 255
     d8a:	8a 07       	cpc	r24, r26
     d8c:	af ef       	ldi	r26, 0xFF	; 255
     d8e:	9a 07       	cpc	r25, r26
     d90:	09 f4       	brne	.+2      	; 0xd94 <create_chain+0xee>
     d92:	54 c0       	rjmp	.+168    	; 0xe3c <create_chain+0x196>
     d94:	61 30       	cpi	r22, 0x01	; 1
     d96:	71 05       	cpc	r23, r1
     d98:	81 05       	cpc	r24, r1
     d9a:	91 05       	cpc	r25, r1
     d9c:	09 f4       	brne	.+2      	; 0xda0 <create_chain+0xfa>
     d9e:	4e c0       	rjmp	.+156    	; 0xe3c <create_chain+0x196>
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
     da0:	c8 14       	cp	r12, r8
     da2:	d9 04       	cpc	r13, r9
     da4:	ea 04       	cpc	r14, r10
     da6:	fb 04       	cpc	r15, r11
     da8:	31 f6       	brne	.-116    	; 0xd36 <create_chain+0x90>
     daa:	3e c0       	rjmp	.+124    	; 0xe28 <create_chain+0x182>
		if (ncl >= mcl) {				/* Wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free custer */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
     dac:	8c 2c       	mov	r8, r12
     dae:	bd 2c       	mov	r11, r13
     db0:	ae 2c       	mov	r10, r14
     db2:	9f 2c       	mov	r9, r15
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
     db4:	c1 01       	movw	r24, r2
     db6:	a6 01       	movw	r20, r12
     db8:	b7 01       	movw	r22, r14
     dba:	0f ef       	ldi	r16, 0xFF	; 255
     dbc:	1f ef       	ldi	r17, 0xFF	; 255
     dbe:	2f ef       	ldi	r18, 0xFF	; 255
     dc0:	3f e0       	ldi	r19, 0x0F	; 15
     dc2:	0e 94 8c 05 	call	0xb18	; 0xb18 <put_fat>
     dc6:	00 97       	sbiw	r24, 0x00	; 0
     dc8:	99 f5       	brne	.+102    	; 0xe30 <create_chain+0x18a>
		return 0xFFFFFFFF;
	if (clst != 0) {					/* Link it to the previous one if needed */
     dca:	41 14       	cp	r4, r1
     dcc:	51 04       	cpc	r5, r1
     dce:	61 04       	cpc	r6, r1
     dd0:	71 04       	cpc	r7, r1
     dd2:	49 f0       	breq	.+18     	; 0xde6 <create_chain+0x140>
		if (put_fat(fs, clst, ncl))
     dd4:	c1 01       	movw	r24, r2
     dd6:	b3 01       	movw	r22, r6
     dd8:	a2 01       	movw	r20, r4
     dda:	86 01       	movw	r16, r12
     ddc:	97 01       	movw	r18, r14
     dde:	0e 94 8c 05 	call	0xb18	; 0xb18 <put_fat>
     de2:	00 97       	sbiw	r24, 0x00	; 0
     de4:	29 f5       	brne	.+74     	; 0xe30 <create_chain+0x18a>
			return 0xFFFFFFFF;
	}

	fs->last_clust = ncl;				/* Update FSINFO */
     de6:	f1 01       	movw	r30, r2
     de8:	82 86       	std	Z+10, r8	; 0x0a
     dea:	b3 86       	std	Z+11, r11	; 0x0b
     dec:	a4 86       	std	Z+12, r10	; 0x0c
     dee:	95 86       	std	Z+13, r9	; 0x0d
	if (fs->free_clust != 0xFFFFFFFF) {
     df0:	86 85       	ldd	r24, Z+14	; 0x0e
     df2:	97 85       	ldd	r25, Z+15	; 0x0f
     df4:	a0 89       	ldd	r26, Z+16	; 0x10
     df6:	b1 89       	ldd	r27, Z+17	; 0x11
     df8:	8f 3f       	cpi	r24, 0xFF	; 255
     dfa:	ff ef       	ldi	r31, 0xFF	; 255
     dfc:	9f 07       	cpc	r25, r31
     dfe:	ff ef       	ldi	r31, 0xFF	; 255
     e00:	af 07       	cpc	r26, r31
     e02:	ff ef       	ldi	r31, 0xFF	; 255
     e04:	bf 07       	cpc	r27, r31
     e06:	c1 f0       	breq	.+48     	; 0xe38 <create_chain+0x192>
		fs->free_clust--;
     e08:	01 97       	sbiw	r24, 0x01	; 1
     e0a:	a1 09       	sbc	r26, r1
     e0c:	b1 09       	sbc	r27, r1
     e0e:	f1 01       	movw	r30, r2
     e10:	86 87       	std	Z+14, r24	; 0x0e
     e12:	97 87       	std	Z+15, r25	; 0x0f
     e14:	a0 8b       	std	Z+16, r26	; 0x10
     e16:	b1 8b       	std	Z+17, r27	; 0x11
		fs->fsi_flag = 1;
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	85 83       	std	Z+5, r24	; 0x05
     e1c:	0d c0       	rjmp	.+26     	; 0xe38 <create_chain+0x192>
		scl = fs->last_clust;			/* Get suggested start point */
		if (scl == 0 || scl >= mcl) scl = 1;
	}
	else {					/* Stretch existing chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
		if (cs < 2) return 1;			/* It is an invalid cluster */
     e1e:	21 e0       	ldi	r18, 0x01	; 1
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	40 e0       	ldi	r20, 0x00	; 0
     e24:	50 e0       	ldi	r21, 0x00	; 0
     e26:	0a c0       	rjmp	.+20     	; 0xe3c <create_chain+0x196>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
     e28:	20 e0       	ldi	r18, 0x00	; 0
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	a9 01       	movw	r20, r18
     e2e:	06 c0       	rjmp	.+12     	; 0xe3c <create_chain+0x196>

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
		return 0xFFFFFFFF;
	if (clst != 0) {					/* Link it to the previous one if needed */
		if (put_fat(fs, clst, ncl))
			return 0xFFFFFFFF;
     e30:	2f ef       	ldi	r18, 0xFF	; 255
     e32:	3f ef       	ldi	r19, 0xFF	; 255
     e34:	a9 01       	movw	r20, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <create_chain+0x196>
	}

	fs->last_clust = ncl;				/* Update FSINFO */
	if (fs->free_clust != 0xFFFFFFFF) {
     e38:	a7 01       	movw	r20, r14
     e3a:	96 01       	movw	r18, r12
		fs->free_clust--;
		fs->fsi_flag = 1;
	}

	return ncl;		/* Return new cluster number */
}
     e3c:	b9 01       	movw	r22, r18
     e3e:	ca 01       	movw	r24, r20
     e40:	24 96       	adiw	r28, 0x04	; 4
     e42:	e2 e1       	ldi	r30, 0x12	; 18
     e44:	0c 94 e7 2d 	jmp	0x5bce	; 0x5bce <__epilogue_restores__>

00000e48 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
     e4c:	ec 01       	movw	r28, r24
     e4e:	cb 01       	movw	r24, r22
     e50:	ba 01       	movw	r22, r20
	clst -= 2;
     e52:	62 50       	subi	r22, 0x02	; 2
     e54:	70 40       	sbci	r23, 0x00	; 0
     e56:	80 40       	sbci	r24, 0x00	; 0
     e58:	90 40       	sbci	r25, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
     e5a:	2e 8d       	ldd	r18, Y+30	; 0x1e
     e5c:	3f 8d       	ldd	r19, Y+31	; 0x1f
     e5e:	48 a1       	ldd	r20, Y+32	; 0x20
     e60:	59 a1       	ldd	r21, Y+33	; 0x21
     e62:	22 50       	subi	r18, 0x02	; 2
     e64:	30 40       	sbci	r19, 0x00	; 0
     e66:	40 40       	sbci	r20, 0x00	; 0
     e68:	50 40       	sbci	r21, 0x00	; 0
     e6a:	62 17       	cp	r22, r18
     e6c:	73 07       	cpc	r23, r19
     e6e:	84 07       	cpc	r24, r20
     e70:	95 07       	cpc	r25, r21
     e72:	88 f4       	brcc	.+34     	; 0xe96 <clust2sect+0x4e>
	return clst * fs->csize + fs->database;
     e74:	2a 81       	ldd	r18, Y+2	; 0x02
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	40 e0       	ldi	r20, 0x00	; 0
     e7a:	50 e0       	ldi	r21, 0x00	; 0
     e7c:	0e 94 57 2d 	call	0x5aae	; 0x5aae <__mulsi3>
     e80:	9b 01       	movw	r18, r22
     e82:	ac 01       	movw	r20, r24
     e84:	8a a5       	ldd	r24, Y+42	; 0x2a
     e86:	9b a5       	ldd	r25, Y+43	; 0x2b
     e88:	ac a5       	ldd	r26, Y+44	; 0x2c
     e8a:	bd a5       	ldd	r27, Y+45	; 0x2d
     e8c:	28 0f       	add	r18, r24
     e8e:	39 1f       	adc	r19, r25
     e90:	4a 1f       	adc	r20, r26
     e92:	5b 1f       	adc	r21, r27
     e94:	03 c0       	rjmp	.+6      	; 0xe9c <clust2sect+0x54>
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	a9 01       	movw	r20, r18
	return clst * fs->csize + fs->database;
}
     e9c:	b9 01       	movw	r22, r18
     e9e:	ca 01       	movw	r24, r20
     ea0:	df 91       	pop	r29
     ea2:	cf 91       	pop	r28
     ea4:	08 95       	ret

00000ea6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
	DIR *dj,		/* Pointer to directory object */
	BOOL streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
)
{
     ea6:	a0 e0       	ldi	r26, 0x00	; 0
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e9 e5       	ldi	r30, 0x59	; 89
     eac:	f7 e0       	ldi	r31, 0x07	; 7
     eae:	0c 94 d1 2d 	jmp	0x5ba2	; 0x5ba2 <__prologue_saves__+0xc>
     eb2:	ec 01       	movw	r28, r24
     eb4:	5b 01       	movw	r10, r22
	DWORD clst;
	WORD i;


	i = dj->index + 1;
     eb6:	cc 80       	ldd	r12, Y+4	; 0x04
     eb8:	dd 80       	ldd	r13, Y+5	; 0x05
     eba:	08 94       	sec
     ebc:	c1 1c       	adc	r12, r1
     ebe:	d1 1c       	adc	r13, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
     ec0:	c1 14       	cp	r12, r1
     ec2:	d1 04       	cpc	r13, r1
     ec4:	09 f4       	brne	.+2      	; 0xec8 <dir_next+0x22>
     ec6:	ee c0       	rjmp	.+476    	; 0x10a4 <dir_next+0x1fe>
     ec8:	8e 85       	ldd	r24, Y+14	; 0x0e
     eca:	9f 85       	ldd	r25, Y+15	; 0x0f
     ecc:	a8 89       	ldd	r26, Y+16	; 0x10
     ece:	b9 89       	ldd	r27, Y+17	; 0x11
     ed0:	00 97       	sbiw	r24, 0x00	; 0
     ed2:	a1 05       	cpc	r26, r1
     ed4:	b1 05       	cpc	r27, r1
     ed6:	09 f4       	brne	.+2      	; 0xeda <dir_next+0x34>
     ed8:	e5 c0       	rjmp	.+458    	; 0x10a4 <dir_next+0x1fe>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
     eda:	2f e0       	ldi	r18, 0x0F	; 15
     edc:	82 2e       	mov	r8, r18
     ede:	91 2c       	mov	r9, r1
     ee0:	8c 20       	and	r8, r12
     ee2:	9d 20       	and	r9, r13
     ee4:	81 14       	cp	r8, r1
     ee6:	91 04       	cpc	r9, r1
     ee8:	09 f0       	breq	.+2      	; 0xeec <dir_next+0x46>
     eea:	cb c0       	rjmp	.+406    	; 0x1082 <dir_next+0x1dc>
		dj->sect++;					/* Next sector */
     eec:	01 96       	adiw	r24, 0x01	; 1
     eee:	a1 1d       	adc	r26, r1
     ef0:	b1 1d       	adc	r27, r1
     ef2:	8e 87       	std	Y+14, r24	; 0x0e
     ef4:	9f 87       	std	Y+15, r25	; 0x0f
     ef6:	a8 8b       	std	Y+16, r26	; 0x10
     ef8:	b9 8b       	std	Y+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
     efa:	4a 85       	ldd	r20, Y+10	; 0x0a
     efc:	5b 85       	ldd	r21, Y+11	; 0x0b
     efe:	6c 85       	ldd	r22, Y+12	; 0x0c
     f00:	7d 85       	ldd	r23, Y+13	; 0x0d
     f02:	88 81       	ld	r24, Y
     f04:	99 81       	ldd	r25, Y+1	; 0x01
     f06:	41 15       	cp	r20, r1
     f08:	51 05       	cpc	r21, r1
     f0a:	61 05       	cpc	r22, r1
     f0c:	71 05       	cpc	r23, r1
     f0e:	41 f4       	brne	.+16     	; 0xf20 <dir_next+0x7a>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
     f10:	fc 01       	movw	r30, r24
     f12:	80 85       	ldd	r24, Z+8	; 0x08
     f14:	91 85       	ldd	r25, Z+9	; 0x09
     f16:	c8 16       	cp	r12, r24
     f18:	d9 06       	cpc	r13, r25
     f1a:	08 f4       	brcc	.+2      	; 0xf1e <dir_next+0x78>
     f1c:	b2 c0       	rjmp	.+356    	; 0x1082 <dir_next+0x1dc>
     f1e:	c2 c0       	rjmp	.+388    	; 0x10a4 <dir_next+0x1fe>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
     f20:	fc 01       	movw	r30, r24
     f22:	22 81       	ldd	r18, Z+2	; 0x02
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	21 50       	subi	r18, 0x01	; 1
     f28:	30 40       	sbci	r19, 0x00	; 0
     f2a:	f6 01       	movw	r30, r12
     f2c:	a4 e0       	ldi	r26, 0x04	; 4
     f2e:	f6 95       	lsr	r31
     f30:	e7 95       	ror	r30
     f32:	aa 95       	dec	r26
     f34:	e1 f7       	brne	.-8      	; 0xf2e <dir_next+0x88>
     f36:	2e 23       	and	r18, r30
     f38:	3f 23       	and	r19, r31
     f3a:	21 15       	cp	r18, r1
     f3c:	31 05       	cpc	r19, r1
     f3e:	09 f0       	breq	.+2      	; 0xf42 <dir_next+0x9c>
     f40:	a0 c0       	rjmp	.+320    	; 0x1082 <dir_next+0x1dc>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
     f42:	0e 94 d7 04 	call	0x9ae	; 0x9ae <get_fat>
     f46:	7b 01       	movw	r14, r22
     f48:	8c 01       	movw	r16, r24
				if (clst <= 1) return FR_INT_ERR;
     f4a:	62 30       	cpi	r22, 0x02	; 2
     f4c:	71 05       	cpc	r23, r1
     f4e:	81 05       	cpc	r24, r1
     f50:	91 05       	cpc	r25, r1
     f52:	08 f4       	brcc	.+2      	; 0xf56 <dir_next+0xb0>
     f54:	ad c0       	rjmp	.+346    	; 0x10b0 <dir_next+0x20a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
     f56:	8f ef       	ldi	r24, 0xFF	; 255
     f58:	e8 16       	cp	r14, r24
     f5a:	8f ef       	ldi	r24, 0xFF	; 255
     f5c:	f8 06       	cpc	r15, r24
     f5e:	8f ef       	ldi	r24, 0xFF	; 255
     f60:	08 07       	cpc	r16, r24
     f62:	8f ef       	ldi	r24, 0xFF	; 255
     f64:	18 07       	cpc	r17, r24
     f66:	09 f4       	brne	.+2      	; 0xf6a <dir_next+0xc4>
     f68:	a6 c0       	rjmp	.+332    	; 0x10b6 <dir_next+0x210>
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
     f6a:	88 81       	ld	r24, Y
     f6c:	99 81       	ldd	r25, Y+1	; 0x01
     f6e:	fc 01       	movw	r30, r24
     f70:	26 8d       	ldd	r18, Z+30	; 0x1e
     f72:	37 8d       	ldd	r19, Z+31	; 0x1f
     f74:	40 a1       	ldd	r20, Z+32	; 0x20
     f76:	51 a1       	ldd	r21, Z+33	; 0x21
     f78:	e2 16       	cp	r14, r18
     f7a:	f3 06       	cpc	r15, r19
     f7c:	04 07       	cpc	r16, r20
     f7e:	15 07       	cpc	r17, r21
     f80:	08 f4       	brcc	.+2      	; 0xf84 <dir_next+0xde>
     f82:	71 c0       	rjmp	.+226    	; 0x1066 <dir_next+0x1c0>
#if !_FS_READONLY
					BYTE c;
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
     f84:	a1 14       	cp	r10, r1
     f86:	b1 04       	cpc	r11, r1
     f88:	09 f4       	brne	.+2      	; 0xf8c <dir_next+0xe6>
     f8a:	8c c0       	rjmp	.+280    	; 0x10a4 <dir_next+0x1fe>
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
     f8c:	4a 85       	ldd	r20, Y+10	; 0x0a
     f8e:	5b 85       	ldd	r21, Y+11	; 0x0b
     f90:	6c 85       	ldd	r22, Y+12	; 0x0c
     f92:	7d 85       	ldd	r23, Y+13	; 0x0d
     f94:	0e 94 53 06 	call	0xca6	; 0xca6 <create_chain>
     f98:	7b 01       	movw	r14, r22
     f9a:	8c 01       	movw	r16, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
     f9c:	61 15       	cp	r22, r1
     f9e:	71 05       	cpc	r23, r1
     fa0:	81 05       	cpc	r24, r1
     fa2:	91 05       	cpc	r25, r1
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <dir_next+0x102>
     fa6:	81 c0       	rjmp	.+258    	; 0x10aa <dir_next+0x204>
					if (clst == 1) return FR_INT_ERR;
     fa8:	61 30       	cpi	r22, 0x01	; 1
     faa:	71 05       	cpc	r23, r1
     fac:	81 05       	cpc	r24, r1
     fae:	91 05       	cpc	r25, r1
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <dir_next+0x10e>
     fb2:	7e c0       	rjmp	.+252    	; 0x10b0 <dir_next+0x20a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
     fb4:	8f ef       	ldi	r24, 0xFF	; 255
     fb6:	e8 16       	cp	r14, r24
     fb8:	8f ef       	ldi	r24, 0xFF	; 255
     fba:	f8 06       	cpc	r15, r24
     fbc:	8f ef       	ldi	r24, 0xFF	; 255
     fbe:	08 07       	cpc	r16, r24
     fc0:	8f ef       	ldi	r24, 0xFF	; 255
     fc2:	18 07       	cpc	r17, r24
     fc4:	09 f4       	brne	.+2      	; 0xfc8 <dir_next+0x122>
     fc6:	77 c0       	rjmp	.+238    	; 0x10b6 <dir_next+0x210>
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
     fc8:	88 81       	ld	r24, Y
     fca:	99 81       	ldd	r25, Y+1	; 0x01
     fcc:	40 e0       	ldi	r20, 0x00	; 0
     fce:	50 e0       	ldi	r21, 0x00	; 0
     fd0:	ba 01       	movw	r22, r20
     fd2:	0e 94 27 04 	call	0x84e	; 0x84e <move_window>
     fd6:	00 97       	sbiw	r24, 0x00	; 0
     fd8:	09 f0       	breq	.+2      	; 0xfdc <dir_next+0x136>
     fda:	6d c0       	rjmp	.+218    	; 0x10b6 <dir_next+0x210>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
     fdc:	88 81       	ld	r24, Y
     fde:	99 81       	ldd	r25, Y+1	; 0x01
     fe0:	fc 01       	movw	r30, r24
     fe2:	f2 96       	adiw	r30, 0x32	; 50
/*-----------------------------------------------------------------------*/
/* Directory handling - Move directory index next                        */
/*-----------------------------------------------------------------------*/

static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
     fe4:	8e 5c       	subi	r24, 0xCE	; 206
     fe6:	9d 4f       	sbci	r25, 0xFD	; 253
     fe8:	01 c0       	rjmp	.+2      	; 0xfec <dir_next+0x146>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
     fea:	11 92       	st	Z+, r1
     fec:	e8 17       	cp	r30, r24
     fee:	f9 07       	cpc	r31, r25
     ff0:	e1 f7       	brne	.-8      	; 0xfea <dir_next+0x144>
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
     ff2:	a8 80       	ld	r10, Y
     ff4:	b9 80       	ldd	r11, Y+1	; 0x01
     ff6:	c5 01       	movw	r24, r10
     ff8:	b8 01       	movw	r22, r16
     ffa:	a7 01       	movw	r20, r14
     ffc:	0e 94 24 07 	call	0xe48	; 0xe48 <clust2sect>
    1000:	f5 01       	movw	r30, r10
    1002:	66 a7       	std	Z+46, r22	; 0x2e
    1004:	77 a7       	std	Z+47, r23	; 0x2f
    1006:	80 ab       	std	Z+48, r24	; 0x30
    1008:	91 ab       	std	Z+49, r25	; 0x31
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    100a:	bb 24       	eor	r11, r11
						dj->fs->wflag = 1;
    100c:	aa 24       	eor	r10, r10
    100e:	a3 94       	inc	r10
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    1010:	19 c0       	rjmp	.+50     	; 0x1044 <dir_next+0x19e>
						dj->fs->wflag = 1;
    1012:	a4 82       	std	Z+4, r10	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    1014:	88 81       	ld	r24, Y
    1016:	99 81       	ldd	r25, Y+1	; 0x01
    1018:	40 e0       	ldi	r20, 0x00	; 0
    101a:	50 e0       	ldi	r21, 0x00	; 0
    101c:	ba 01       	movw	r22, r20
    101e:	0e 94 27 04 	call	0x84e	; 0x84e <move_window>
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	09 f0       	breq	.+2      	; 0x1028 <dir_next+0x182>
    1026:	47 c0       	rjmp	.+142    	; 0x10b6 <dir_next+0x210>
						dj->fs->winsect++;
    1028:	e8 81       	ld	r30, Y
    102a:	f9 81       	ldd	r31, Y+1	; 0x01
    102c:	86 a5       	ldd	r24, Z+46	; 0x2e
    102e:	97 a5       	ldd	r25, Z+47	; 0x2f
    1030:	a0 a9       	ldd	r26, Z+48	; 0x30
    1032:	b1 a9       	ldd	r27, Z+49	; 0x31
    1034:	01 96       	adiw	r24, 0x01	; 1
    1036:	a1 1d       	adc	r26, r1
    1038:	b1 1d       	adc	r27, r1
    103a:	86 a7       	std	Z+46, r24	; 0x2e
    103c:	97 a7       	std	Z+47, r25	; 0x2f
    103e:	a0 ab       	std	Z+48, r26	; 0x30
    1040:	b1 ab       	std	Z+49, r27	; 0x31
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    1042:	b3 94       	inc	r11
    1044:	e8 81       	ld	r30, Y
    1046:	f9 81       	ldd	r31, Y+1	; 0x01
    1048:	82 81       	ldd	r24, Z+2	; 0x02
    104a:	b8 16       	cp	r11, r24
    104c:	10 f3       	brcs	.-60     	; 0x1012 <dir_next+0x16c>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    104e:	86 a5       	ldd	r24, Z+46	; 0x2e
    1050:	97 a5       	ldd	r25, Z+47	; 0x2f
    1052:	a0 a9       	ldd	r26, Z+48	; 0x30
    1054:	b1 a9       	ldd	r27, Z+49	; 0x31
    1056:	8b 19       	sub	r24, r11
    1058:	91 09       	sbc	r25, r1
    105a:	a1 09       	sbc	r26, r1
    105c:	b1 09       	sbc	r27, r1
    105e:	86 a7       	std	Z+46, r24	; 0x2e
    1060:	97 a7       	std	Z+47, r25	; 0x2f
    1062:	a0 ab       	std	Z+48, r26	; 0x30
    1064:	b1 ab       	std	Z+49, r27	; 0x31
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    1066:	ea 86       	std	Y+10, r14	; 0x0a
    1068:	fb 86       	std	Y+11, r15	; 0x0b
    106a:	0c 87       	std	Y+12, r16	; 0x0c
    106c:	1d 87       	std	Y+13, r17	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    106e:	88 81       	ld	r24, Y
    1070:	99 81       	ldd	r25, Y+1	; 0x01
    1072:	b8 01       	movw	r22, r16
    1074:	a7 01       	movw	r20, r14
    1076:	0e 94 24 07 	call	0xe48	; 0xe48 <clust2sect>
    107a:	6e 87       	std	Y+14, r22	; 0x0e
    107c:	7f 87       	std	Y+15, r23	; 0x0f
    107e:	88 8b       	std	Y+16, r24	; 0x10
    1080:	99 8b       	std	Y+17, r25	; 0x11
			}
		}
	}

	dj->index = i;
    1082:	dd 82       	std	Y+5, r13	; 0x05
    1084:	cc 82       	std	Y+4, r12	; 0x04
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
    1086:	88 81       	ld	r24, Y
    1088:	99 81       	ldd	r25, Y+1	; 0x01
    108a:	c2 96       	adiw	r24, 0x32	; 50
    108c:	b5 e0       	ldi	r27, 0x05	; 5
    108e:	88 0c       	add	r8, r8
    1090:	99 1c       	adc	r9, r9
    1092:	ba 95       	dec	r27
    1094:	e1 f7       	brne	.-8      	; 0x108e <dir_next+0x1e8>
    1096:	88 0d       	add	r24, r8
    1098:	99 1d       	adc	r25, r9
    109a:	9b 8b       	std	Y+19, r25	; 0x13
    109c:	8a 8b       	std	Y+18, r24	; 0x12

	return FR_OK;
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	0b c0       	rjmp	.+22     	; 0x10ba <dir_next+0x214>
				if (clst <= 1) return FR_INT_ERR;
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
#if !_FS_READONLY
					BYTE c;
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
    10a4:	24 e0       	ldi	r18, 0x04	; 4
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	08 c0       	rjmp	.+16     	; 0x10ba <dir_next+0x214>
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    10aa:	27 e0       	ldi	r18, 0x07	; 7
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	05 c0       	rjmp	.+10     	; 0x10ba <dir_next+0x214>
					if (clst == 1) return FR_INT_ERR;
    10b0:	22 e0       	ldi	r18, 0x02	; 2
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <dir_next+0x214>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    10b6:	21 e0       	ldi	r18, 0x01	; 1
    10b8:	30 e0       	ldi	r19, 0x00	; 0

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;

	return FR_OK;
}
    10ba:	c9 01       	movw	r24, r18
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
    10c0:	ec e0       	ldi	r30, 0x0C	; 12
    10c2:	0c 94 ed 2d 	jmp	0x5bda	; 0x5bda <__epilogue_restores__+0xc>

000010c6 <dir_seek.clone.1>:
/*-----------------------------------------------------------------------*/
/* Directory handling - Seek directory index                             */
/*-----------------------------------------------------------------------*/

static
FRESULT dir_seek (
    10c6:	0f 93       	push	r16
    10c8:	1f 93       	push	r17
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
    10ce:	ec 01       	movw	r28, r24
{
	DWORD clst;
	WORD ic;


	dj->index = idx;
    10d0:	1d 82       	std	Y+5, r1	; 0x05
    10d2:	1c 82       	std	Y+4, r1	; 0x04
	clst = dj->sclust;
    10d4:	4e 81       	ldd	r20, Y+6	; 0x06
    10d6:	5f 81       	ldd	r21, Y+7	; 0x07
    10d8:	68 85       	ldd	r22, Y+8	; 0x08
    10da:	79 85       	ldd	r23, Y+9	; 0x09
	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
    10dc:	41 30       	cpi	r20, 0x01	; 1
    10de:	51 05       	cpc	r21, r1
    10e0:	61 05       	cpc	r22, r1
    10e2:	71 05       	cpc	r23, r1
    10e4:	09 f4       	brne	.+2      	; 0x10e8 <dir_seek.clone.1+0x22>
    10e6:	69 c0       	rjmp	.+210    	; 0x11ba <__stack+0xbb>
    10e8:	08 81       	ld	r16, Y
    10ea:	19 81       	ldd	r17, Y+1	; 0x01
    10ec:	f8 01       	movw	r30, r16
    10ee:	86 8d       	ldd	r24, Z+30	; 0x1e
    10f0:	97 8d       	ldd	r25, Z+31	; 0x1f
    10f2:	a0 a1       	ldd	r26, Z+32	; 0x20
    10f4:	b1 a1       	ldd	r27, Z+33	; 0x21
    10f6:	48 17       	cp	r20, r24
    10f8:	59 07       	cpc	r21, r25
    10fa:	6a 07       	cpc	r22, r26
    10fc:	7b 07       	cpc	r23, r27
    10fe:	08 f0       	brcs	.+2      	; 0x1102 <__stack+0x3>
    1100:	5c c0       	rjmp	.+184    	; 0x11ba <__stack+0xbb>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    1102:	41 15       	cp	r20, r1
    1104:	51 05       	cpc	r21, r1
    1106:	61 05       	cpc	r22, r1
    1108:	71 05       	cpc	r23, r1
    110a:	f9 f4       	brne	.+62     	; 0x114a <__stack+0x4b>
    110c:	80 81       	ld	r24, Z
    110e:	83 30       	cpi	r24, 0x03	; 3
    1110:	49 f4       	brne	.+18     	; 0x1124 <__stack+0x25>
		clst = dj->fs->dirbase;
    1112:	46 a1       	ldd	r20, Z+38	; 0x26
    1114:	57 a1       	ldd	r21, Z+39	; 0x27
    1116:	60 a5       	ldd	r22, Z+40	; 0x28
    1118:	71 a5       	ldd	r23, Z+41	; 0x29

	if (clst == 0) {	/* Static table */
    111a:	41 15       	cp	r20, r1
    111c:	51 05       	cpc	r21, r1
    111e:	61 05       	cpc	r22, r1
    1120:	71 05       	cpc	r23, r1
    1122:	99 f4       	brne	.+38     	; 0x114a <__stack+0x4b>
		dj->clust = clst;
    1124:	1a 86       	std	Y+10, r1	; 0x0a
    1126:	1b 86       	std	Y+11, r1	; 0x0b
    1128:	1c 86       	std	Y+12, r1	; 0x0c
    112a:	1d 86       	std	Y+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    112c:	f8 01       	movw	r30, r16
    112e:	80 85       	ldd	r24, Z+8	; 0x08
    1130:	91 85       	ldd	r25, Z+9	; 0x09
    1132:	00 97       	sbiw	r24, 0x00	; 0
    1134:	09 f4       	brne	.+2      	; 0x1138 <__stack+0x39>
    1136:	41 c0       	rjmp	.+130    	; 0x11ba <__stack+0xbb>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
    1138:	86 a1       	ldd	r24, Z+38	; 0x26
    113a:	97 a1       	ldd	r25, Z+39	; 0x27
    113c:	a0 a5       	ldd	r26, Z+40	; 0x28
    113e:	b1 a5       	ldd	r27, Z+41	; 0x29
    1140:	8e 87       	std	Y+14, r24	; 0x0e
    1142:	9f 87       	std	Y+15, r25	; 0x0f
    1144:	a8 8b       	std	Y+16, r26	; 0x10
    1146:	b9 8b       	std	Y+17, r27	; 0x11
    1148:	2e c0       	rjmp	.+92     	; 0x11a6 <__stack+0xa7>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
    114a:	f8 01       	movw	r30, r16
    114c:	82 81       	ldd	r24, Z+2	; 0x02
		while (idx >= ic) {	/* Follow cluster chain */
    114e:	88 23       	and	r24, r24
    1150:	f9 f4       	brne	.+62     	; 0x1190 <__stack+0x91>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    1152:	88 81       	ld	r24, Y
    1154:	99 81       	ldd	r25, Y+1	; 0x01
    1156:	0e 94 d7 04 	call	0x9ae	; 0x9ae <get_fat>
    115a:	ab 01       	movw	r20, r22
    115c:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    115e:	4f 3f       	cpi	r20, 0xFF	; 255
    1160:	ff ef       	ldi	r31, 0xFF	; 255
    1162:	5f 07       	cpc	r21, r31
    1164:	ff ef       	ldi	r31, 0xFF	; 255
    1166:	6f 07       	cpc	r22, r31
    1168:	ff ef       	ldi	r31, 0xFF	; 255
    116a:	7f 07       	cpc	r23, r31
    116c:	19 f1       	breq	.+70     	; 0x11b4 <__stack+0xb5>
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
    116e:	42 30       	cpi	r20, 0x02	; 2
    1170:	51 05       	cpc	r21, r1
    1172:	61 05       	cpc	r22, r1
    1174:	71 05       	cpc	r23, r1
    1176:	08 f1       	brcs	.+66     	; 0x11ba <__stack+0xbb>
    1178:	e8 81       	ld	r30, Y
    117a:	f9 81       	ldd	r31, Y+1	; 0x01
    117c:	86 8d       	ldd	r24, Z+30	; 0x1e
    117e:	97 8d       	ldd	r25, Z+31	; 0x1f
    1180:	a0 a1       	ldd	r26, Z+32	; 0x20
    1182:	b1 a1       	ldd	r27, Z+33	; 0x21
    1184:	48 17       	cp	r20, r24
    1186:	59 07       	cpc	r21, r25
    1188:	6a 07       	cpc	r22, r26
    118a:	7b 07       	cpc	r23, r27
    118c:	10 f3       	brcs	.-60     	; 0x1152 <__stack+0x53>
    118e:	15 c0       	rjmp	.+42     	; 0x11ba <__stack+0xbb>
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    1190:	4a 87       	std	Y+10, r20	; 0x0a
    1192:	5b 87       	std	Y+11, r21	; 0x0b
    1194:	6c 87       	std	Y+12, r22	; 0x0c
    1196:	7d 87       	std	Y+13, r23	; 0x0d
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
    1198:	c8 01       	movw	r24, r16
    119a:	0e 94 24 07 	call	0xe48	; 0xe48 <clust2sect>
    119e:	6e 87       	std	Y+14, r22	; 0x0e
    11a0:	7f 87       	std	Y+15, r23	; 0x0f
    11a2:	88 8b       	std	Y+16, r24	; 0x10
    11a4:	99 8b       	std	Y+17, r25	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
    11a6:	0e 5c       	subi	r16, 0xCE	; 206
    11a8:	1f 4f       	sbci	r17, 0xFF	; 255
    11aa:	1b 8b       	std	Y+19, r17	; 0x13
    11ac:	0a 8b       	std	Y+18, r16	; 0x12

	return FR_OK;	/* Seek succeeded */
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	05 c0       	rjmp	.+10     	; 0x11be <__stack+0xbf>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    11b4:	21 e0       	ldi	r18, 0x01	; 1
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <__stack+0xbf>
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
    11ba:	22 e0       	ldi	r18, 0x02	; 2
    11bc:	30 e0       	ldi	r19, 0x00	; 0
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */

	return FR_OK;	/* Seek succeeded */
}
    11be:	c9 01       	movw	r24, r18
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	1f 91       	pop	r17
    11c6:	0f 91       	pop	r16
    11c8:	08 95       	ret

000011ca <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const XCHAR *path	/* Full-path string to find a file or directory */
)
{
    11ca:	a0 e0       	ldi	r26, 0x00	; 0
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	eb ee       	ldi	r30, 0xEB	; 235
    11d0:	f8 e0       	ldi	r31, 0x08	; 8
    11d2:	0c 94 d3 2d 	jmp	0x5ba6	; 0x5ba6 <__prologue_saves__+0x10>
    11d6:	ec 01       	movw	r28, r24
#endif
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    11d8:	86 2f       	mov	r24, r22
    11da:	97 2f       	mov	r25, r23
{
	FRESULT res;
	BYTE *dir, last;


	while (!_USE_LFN && *path == ' ') path++;	/* Skip leading spaces */
    11dc:	8c 01       	movw	r16, r24
    11de:	dc 01       	movw	r26, r24
    11e0:	2c 91       	ld	r18, X
    11e2:	01 96       	adiw	r24, 0x01	; 1
    11e4:	20 32       	cpi	r18, 0x20	; 32
    11e6:	d1 f3       	breq	.-12     	; 0x11dc <follow_path+0x12>
#if _FS_RPATH
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
    11e8:	2f 32       	cpi	r18, 0x2F	; 47
    11ea:	11 f0       	breq	.+4      	; 0x11f0 <follow_path+0x26>
    11ec:	2c 35       	cpi	r18, 0x5C	; 92
    11ee:	39 f4       	brne	.+14     	; 0x11fe <follow_path+0x34>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
    11f0:	0f 5f       	subi	r16, 0xFF	; 255
    11f2:	1f 4f       	sbci	r17, 0xFF	; 255
    11f4:	1e 82       	std	Y+6, r1	; 0x06
    11f6:	1f 82       	std	Y+7, r1	; 0x07
    11f8:	18 86       	std	Y+8, r1	; 0x08
    11fa:	19 86       	std	Y+9, r1	; 0x09
    11fc:	0a c0       	rjmp	.+20     	; 0x1212 <follow_path+0x48>
	} else {							/* No heading saparator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
    11fe:	e8 81       	ld	r30, Y
    1200:	f9 81       	ldd	r31, Y+1	; 0x01
    1202:	86 89       	ldd	r24, Z+22	; 0x16
    1204:	97 89       	ldd	r25, Z+23	; 0x17
    1206:	a0 8d       	ldd	r26, Z+24	; 0x18
    1208:	b1 8d       	ldd	r27, Z+25	; 0x19
    120a:	8e 83       	std	Y+6, r24	; 0x06
    120c:	9f 83       	std	Y+7, r25	; 0x07
    120e:	a8 87       	std	Y+8, r26	; 0x08
    1210:	b9 87       	std	Y+9, r27	; 0x09
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
		path++;
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
    1212:	f8 01       	movw	r30, r16
    1214:	80 81       	ld	r24, Z
    1216:	80 32       	cpi	r24, 0x20	; 32
    1218:	38 f4       	brcc	.+14     	; 0x1228 <follow_path+0x5e>
		res = dir_seek(dj, 0);
    121a:	ce 01       	movw	r24, r28
    121c:	0e 94 63 08 	call	0x10c6	; 0x10c6 <dir_seek.clone.1>
    1220:	9c 01       	movw	r18, r24
		dj->dir = NULL;
    1222:	1b 8a       	std	Y+19, r1	; 0x13
    1224:	1a 8a       	std	Y+18, r1	; 0x12
    1226:	20 c1       	rjmp	.+576    	; 0x1468 <follow_path+0x29e>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    1228:	50 e2       	ldi	r21, 0x20	; 32
    122a:	b5 2e       	mov	r11, r21
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    122c:	45 e0       	ldi	r20, 0x05	; 5
    122e:	a4 2e       	mov	r10, r20
			}
		}
	}

	LEAVE_FF(dj->fs, res);
}
    1230:	ec 89       	ldd	r30, Y+20	; 0x14
    1232:	fd 89       	ldd	r31, Y+21	; 0x15
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    1234:	df 01       	movw	r26, r30
/*-----------------------------------------------------------------------*/
/* Follow a file path                                                    */
/*-----------------------------------------------------------------------*/

static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
    1236:	cf 01       	movw	r24, r30
    1238:	0b 96       	adiw	r24, 0x0b	; 11
    123a:	01 c0       	rjmp	.+2      	; 0x123e <follow_path+0x74>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    123c:	bd 92       	st	X+, r11
    123e:	a8 17       	cp	r26, r24
    1240:	b9 07       	cpc	r27, r25
    1242:	e1 f7       	brne	.-8      	; 0x123c <follow_path+0x72>
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
	p = *path;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
    1244:	d8 01       	movw	r26, r16
    1246:	8c 91       	ld	r24, X
    1248:	8e 32       	cpi	r24, 0x2E	; 46
    124a:	41 f0       	breq	.+16     	; 0x125c <follow_path+0x92>
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	48 e0       	ldi	r20, 0x08	; 8
    1256:	50 e0       	ldi	r21, 0x00	; 0
    1258:	dd 24       	eor	r13, r13
    125a:	20 c0       	rjmp	.+64     	; 0x129c <follow_path+0xd2>
		for (;;) {
			c = p[si++];
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
    125c:	80 83       	st	Z, r24
	si = i = b = 0; ni = 8;
	p = *path;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
		for (;;) {
			c = p[si++];
    125e:	d8 01       	movw	r26, r16
    1260:	11 96       	adiw	r26, 0x01	; 1
    1262:	2c 91       	ld	r18, X
    1264:	11 97       	sbiw	r26, 0x01	; 1
			if (c != '.' || si >= 3) break;
    1266:	2e 32       	cpi	r18, 0x2E	; 46
    1268:	39 f4       	brne	.+14     	; 0x1278 <follow_path+0xae>
			sfn[i++] = c;
    126a:	21 83       	std	Z+1, r18	; 0x01
	si = i = b = 0; ni = 8;
	p = *path;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
		for (;;) {
			c = p[si++];
    126c:	12 96       	adiw	r26, 0x02	; 2
    126e:	2c 91       	ld	r18, X
    1270:	12 97       	sbiw	r26, 0x02	; 2
    1272:	83 e0       	ldi	r24, 0x03	; 3
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	02 c0       	rjmp	.+4      	; 0x127c <follow_path+0xb2>
    1278:	82 e0       	ldi	r24, 0x02	; 2
    127a:	90 e0       	ldi	r25, 0x00	; 0
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
    127c:	2f 32       	cpi	r18, 0x2F	; 47
    127e:	29 f0       	breq	.+10     	; 0x128a <follow_path+0xc0>
    1280:	2c 35       	cpi	r18, 0x5C	; 92
    1282:	19 f0       	breq	.+6      	; 0x128a <follow_path+0xc0>
    1284:	21 32       	cpi	r18, 0x21	; 33
    1286:	08 f0       	brcs	.+2      	; 0x128a <follow_path+0xc0>
    1288:	ea c0       	rjmp	.+468    	; 0x145e <follow_path+0x294>
		*path = &p[si];									/* Rerurn pointer to the next segment */
    128a:	08 0f       	add	r16, r24
    128c:	19 1f       	adc	r17, r25
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    128e:	21 32       	cpi	r18, 0x21	; 33
    1290:	10 f4       	brcc	.+4      	; 0x1296 <follow_path+0xcc>
    1292:	84 e2       	ldi	r24, 0x24	; 36
    1294:	01 c0       	rjmp	.+2      	; 0x1298 <follow_path+0xce>
    1296:	80 e2       	ldi	r24, 0x20	; 32
    1298:	83 87       	std	Z+11, r24	; 0x0b
    129a:	ec c0       	rjmp	.+472    	; 0x1474 <follow_path+0x2aa>
		return FR_OK;
	}
#endif
	for (;;) {
		c = p[si++];
    129c:	d8 01       	movw	r26, r16
    129e:	a2 0f       	add	r26, r18
    12a0:	b3 1f       	adc	r27, r19
    12a2:	cc 90       	ld	r12, X
    12a4:	2f 5f       	subi	r18, 0xFF	; 255
    12a6:	3f 4f       	sbci	r19, 0xFF	; 255
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    12a8:	bc 2d       	mov	r27, r12
    12aa:	b1 32       	cpi	r27, 0x21	; 33
    12ac:	08 f4       	brcc	.+2      	; 0x12b0 <follow_path+0xe6>
    12ae:	67 c0       	rjmp	.+206    	; 0x137e <follow_path+0x1b4>
    12b0:	bf 32       	cpi	r27, 0x2F	; 47
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <follow_path+0xec>
    12b4:	66 c0       	rjmp	.+204    	; 0x1382 <follow_path+0x1b8>
    12b6:	bc 35       	cpi	r27, 0x5C	; 92
    12b8:	09 f4       	brne	.+2      	; 0x12bc <follow_path+0xf2>
    12ba:	63 c0       	rjmp	.+198    	; 0x1382 <follow_path+0x1b8>
		if (c == '.' || i >= ni) {
    12bc:	be 32       	cpi	r27, 0x2E	; 46
    12be:	19 f0       	breq	.+6      	; 0x12c6 <follow_path+0xfc>
    12c0:	84 17       	cp	r24, r20
    12c2:	95 07       	cpc	r25, r21
    12c4:	7c f0       	brlt	.+30     	; 0x12e4 <follow_path+0x11a>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    12c6:	48 30       	cpi	r20, 0x08	; 8
    12c8:	51 05       	cpc	r21, r1
    12ca:	09 f0       	breq	.+2      	; 0x12ce <follow_path+0x104>
    12cc:	c8 c0       	rjmp	.+400    	; 0x145e <follow_path+0x294>
    12ce:	6c 2d       	mov	r22, r12
    12d0:	6e 32       	cpi	r22, 0x2E	; 46
    12d2:	09 f0       	breq	.+2      	; 0x12d6 <follow_path+0x10c>
    12d4:	c4 c0       	rjmp	.+392    	; 0x145e <follow_path+0x294>
			i = 8; ni = 11;
			b <<= 2; continue;
    12d6:	dd 0c       	add	r13, r13
    12d8:	dd 0c       	add	r13, r13
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    12da:	88 e0       	ldi	r24, 0x08	; 8
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	4b e0       	ldi	r20, 0x0B	; 11
    12e0:	50 e0       	ldi	r21, 0x00	; 0
    12e2:	dc cf       	rjmp	.-72     	; 0x129c <follow_path+0xd2>
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended char */
    12e4:	c7 fe       	sbrs	r12, 7
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <follow_path+0x122>
#ifdef _EXCVT
			c = cvt[c - 0x80];			/* Convert extend char (SBCS) */
#else
			b |= 3;						/* Eliminate NT flag if ext char is exist */
    12e8:	a3 e0       	ldi	r26, 0x03	; 3
    12ea:	da 2a       	or	r13, r26
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
    12ec:	6c 2d       	mov	r22, r12
    12ee:	61 58       	subi	r22, 0x81	; 129
    12f0:	6f 31       	cpi	r22, 0x1F	; 31
    12f2:	18 f0       	brcs	.+6      	; 0x12fa <follow_path+0x130>
    12f4:	6f 55       	subi	r22, 0x5F	; 95
    12f6:	6d 31       	cpi	r22, 0x1D	; 29
    12f8:	f8 f4       	brcc	.+62     	; 0x1338 <follow_path+0x16e>
			d = p[si++];				/* Get 2nd byte */
    12fa:	d8 01       	movw	r26, r16
    12fc:	a2 0f       	add	r26, r18
    12fe:	b3 1f       	adc	r27, r19
    1300:	ec 90       	ld	r14, X
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    1302:	6e 2d       	mov	r22, r14
    1304:	60 54       	subi	r22, 0x40	; 64
    1306:	6f 33       	cpi	r22, 0x3F	; 63
    1308:	20 f0       	brcs	.+8      	; 0x1312 <follow_path+0x148>
    130a:	60 54       	subi	r22, 0x40	; 64
    130c:	6d 37       	cpi	r22, 0x7D	; 125
    130e:	08 f0       	brcs	.+2      	; 0x1312 <follow_path+0x148>
    1310:	a6 c0       	rjmp	.+332    	; 0x145e <follow_path+0x294>
    1312:	ba 01       	movw	r22, r20
    1314:	61 50       	subi	r22, 0x01	; 1
    1316:	70 40       	sbci	r23, 0x00	; 0
    1318:	86 17       	cp	r24, r22
    131a:	97 07       	cpc	r25, r23
    131c:	0c f0       	brlt	.+2      	; 0x1320 <follow_path+0x156>
    131e:	9f c0       	rjmp	.+318    	; 0x145e <follow_path+0x294>
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
    1320:	2f 5f       	subi	r18, 0xFF	; 255
    1322:	3f 4f       	sbci	r19, 0xFF	; 255
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
    1324:	df 01       	movw	r26, r30
    1326:	a8 0f       	add	r26, r24
    1328:	b9 1f       	adc	r27, r25
    132a:	cc 92       	st	X, r12
    132c:	01 96       	adiw	r24, 0x01	; 1
			sfn[i++] = d;
    132e:	df 01       	movw	r26, r30
    1330:	a8 0f       	add	r26, r24
    1332:	b9 1f       	adc	r27, r25
    1334:	ec 92       	st	X, r14
    1336:	21 c0       	rjmp	.+66     	; 0x137a <follow_path+0x1b0>
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
    1338:	ec 2c       	mov	r14, r12
    133a:	ff 24       	eor	r15, r15
    133c:	a3 e0       	ldi	r26, 0x03	; 3
    133e:	b1 e0       	ldi	r27, 0x01	; 1
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    1340:	6d 91       	ld	r22, X+
    1342:	66 23       	and	r22, r22
    1344:	39 f0       	breq	.+14     	; 0x1354 <follow_path+0x18a>
    1346:	77 27       	eor	r23, r23
    1348:	67 fd       	sbrc	r22, 7
    134a:	70 95       	com	r23
    134c:	6e 15       	cp	r22, r14
    134e:	7f 05       	cpc	r23, r15
    1350:	b9 f7       	brne	.-18     	; 0x1340 <follow_path+0x176>
    1352:	85 c0       	rjmp	.+266    	; 0x145e <follow_path+0x294>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    1354:	6c 2d       	mov	r22, r12
    1356:	61 54       	subi	r22, 0x41	; 65
    1358:	6a 31       	cpi	r22, 0x1A	; 26
    135a:	18 f4       	brcc	.+6      	; 0x1362 <follow_path+0x198>
				b |= 2;
    135c:	b2 e0       	ldi	r27, 0x02	; 2
    135e:	db 2a       	or	r13, r27
    1360:	08 c0       	rjmp	.+16     	; 0x1372 <follow_path+0x1a8>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    1362:	6c 2d       	mov	r22, r12
    1364:	61 56       	subi	r22, 0x61	; 97
    1366:	6a 31       	cpi	r22, 0x1A	; 26
    1368:	20 f4       	brcc	.+8      	; 0x1372 <follow_path+0x1a8>
					b |= 1; c -= 0x20;
    136a:	61 e0       	ldi	r22, 0x01	; 1
    136c:	d6 2a       	or	r13, r22
    136e:	a0 ee       	ldi	r26, 0xE0	; 224
    1370:	ca 0e       	add	r12, r26
				}
			}
			sfn[i++] = c;
    1372:	df 01       	movw	r26, r30
    1374:	a8 0f       	add	r26, r24
    1376:	b9 1f       	adc	r27, r25
    1378:	cc 92       	st	X, r12
    137a:	01 96       	adiw	r24, 0x01	; 1
    137c:	8f cf       	rjmp	.-226    	; 0x129c <follow_path+0xd2>
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    137e:	64 e0       	ldi	r22, 0x04	; 4
    1380:	01 c0       	rjmp	.+2      	; 0x1384 <follow_path+0x1ba>
    1382:	60 e0       	ldi	r22, 0x00	; 0

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	09 f4       	brne	.+2      	; 0x138a <follow_path+0x1c0>
    1388:	6a c0       	rjmp	.+212    	; 0x145e <follow_path+0x294>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    138a:	80 81       	ld	r24, Z
    138c:	85 3e       	cpi	r24, 0xE5	; 229
    138e:	09 f4       	brne	.+2      	; 0x1392 <follow_path+0x1c8>
    1390:	a0 82       	st	Z, r10

	if (ni == 8) b <<= 2;
    1392:	48 30       	cpi	r20, 0x08	; 8
    1394:	51 05       	cpc	r21, r1
    1396:	11 f4       	brne	.+4      	; 0x139c <follow_path+0x1d2>
    1398:	dd 0c       	add	r13, r13
    139a:	dd 0c       	add	r13, r13
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
    139c:	8d 2d       	mov	r24, r13
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	ac 01       	movw	r20, r24
    13a2:	43 70       	andi	r20, 0x03	; 3
    13a4:	50 70       	andi	r21, 0x00	; 0
    13a6:	41 30       	cpi	r20, 0x01	; 1
    13a8:	51 05       	cpc	r21, r1
    13aa:	09 f4       	brne	.+2      	; 0x13ae <follow_path+0x1e4>
    13ac:	60 61       	ori	r22, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
    13ae:	8c 70       	andi	r24, 0x0C	; 12
    13b0:	90 70       	andi	r25, 0x00	; 0
    13b2:	84 30       	cpi	r24, 0x04	; 4
    13b4:	91 05       	cpc	r25, r1
    13b6:	09 f4       	brne	.+2      	; 0x13ba <follow_path+0x1f0>
    13b8:	68 60       	ori	r22, 0x08	; 8
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    13ba:	02 0f       	add	r16, r18
    13bc:	13 1f       	adc	r17, r19

	if (ni == 8) b <<= 2;
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */

	sfn[NS] = c;		/* Store NT flag, File name is created */
    13be:	63 87       	std	Z+11, r22	; 0x0b
    13c0:	59 c0       	rjmp	.+178    	; 0x1474 <follow_path+0x2aa>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    13c2:	4e 85       	ldd	r20, Y+14	; 0x0e
    13c4:	5f 85       	ldd	r21, Y+15	; 0x0f
    13c6:	68 89       	ldd	r22, Y+16	; 0x10
    13c8:	79 89       	ldd	r23, Y+17	; 0x11
    13ca:	88 81       	ld	r24, Y
    13cc:	99 81       	ldd	r25, Y+1	; 0x01
    13ce:	0e 94 27 04 	call	0x84e	; 0x84e <move_window>
    13d2:	9c 01       	movw	r18, r24
		if (res != FR_OK) break;
    13d4:	00 97       	sbiw	r24, 0x00	; 0
    13d6:	d9 f4       	brne	.+54     	; 0x140e <follow_path+0x244>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    13d8:	ea 89       	ldd	r30, Y+18	; 0x12
    13da:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    13dc:	80 81       	ld	r24, Z
    13de:	88 23       	and	r24, r24
    13e0:	a1 f0       	breq	.+40     	; 0x140a <follow_path+0x240>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    13e2:	83 85       	ldd	r24, Z+11	; 0x0b
    13e4:	83 fd       	sbrc	r24, 3
    13e6:	0b c0       	rjmp	.+22     	; 0x13fe <follow_path+0x234>
    13e8:	ac 89       	ldd	r26, Y+20	; 0x14
    13ea:	bd 89       	ldd	r27, Y+21	; 0x15
/*-----------------------------------------------------------------------*/
/* Follow a file path                                                    */
/*-----------------------------------------------------------------------*/

static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
    13ec:	cf 01       	movw	r24, r30
    13ee:	0b 96       	adiw	r24, 0x0b	; 11
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    13f0:	e8 17       	cp	r30, r24
    13f2:	f9 07       	cpc	r31, r25
    13f4:	61 f0       	breq	.+24     	; 0x140e <follow_path+0x244>
    13f6:	51 91       	ld	r21, Z+
    13f8:	4d 91       	ld	r20, X+
    13fa:	54 17       	cp	r21, r20
    13fc:	c9 f3       	breq	.-14     	; 0x13f0 <follow_path+0x226>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, FALSE);		/* Next entry */
    13fe:	ce 01       	movw	r24, r28
    1400:	60 e0       	ldi	r22, 0x00	; 0
    1402:	70 e0       	ldi	r23, 0x00	; 0
    1404:	0e 94 53 07 	call	0xea6	; 0xea6 <dir_next>
    1408:	38 c0       	rjmp	.+112    	; 0x147a <follow_path+0x2b0>
	do {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    140a:	24 e0       	ldi	r18, 0x04	; 4
    140c:	30 e0       	ldi	r19, 0x00	; 0
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			last = *(dj->fn+NS) & NS_LAST;
    140e:	ec 89       	ldd	r30, Y+20	; 0x14
    1410:	fd 89       	ldd	r31, Y+21	; 0x15
    1412:	83 85       	ldd	r24, Z+11	; 0x0b
    1414:	84 70       	andi	r24, 0x04	; 4
			if (res != FR_OK) {				/* Could not find the object */
    1416:	21 15       	cp	r18, r1
    1418:	31 05       	cpc	r19, r1
    141a:	31 f0       	breq	.+12     	; 0x1428 <follow_path+0x25e>
				if (res == FR_NO_FILE && !last)
    141c:	24 30       	cpi	r18, 0x04	; 4
    141e:	31 05       	cpc	r19, r1
    1420:	19 f5       	brne	.+70     	; 0x1468 <follow_path+0x29e>
    1422:	88 23       	and	r24, r24
    1424:	f9 f0       	breq	.+62     	; 0x1464 <follow_path+0x29a>
    1426:	20 c0       	rjmp	.+64     	; 0x1468 <follow_path+0x29e>
					res = FR_NO_PATH;
				break;
			}
			if (last) break;				/* Last segment match. Function completed. */
    1428:	88 23       	and	r24, r24
    142a:	f1 f4       	brne	.+60     	; 0x1468 <follow_path+0x29e>
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
    142c:	ea 89       	ldd	r30, Y+18	; 0x12
    142e:	fb 89       	ldd	r31, Y+19	; 0x13
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    1430:	83 85       	ldd	r24, Z+11	; 0x0b
    1432:	84 ff       	sbrs	r24, 4
    1434:	17 c0       	rjmp	.+46     	; 0x1464 <follow_path+0x29a>
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    1436:	84 89       	ldd	r24, Z+20	; 0x14
    1438:	95 89       	ldd	r25, Z+21	; 0x15
    143a:	a0 e0       	ldi	r26, 0x00	; 0
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	dc 01       	movw	r26, r24
    1440:	99 27       	eor	r25, r25
    1442:	88 27       	eor	r24, r24
    1444:	22 8d       	ldd	r18, Z+26	; 0x1a
    1446:	33 8d       	ldd	r19, Z+27	; 0x1b
    1448:	40 e0       	ldi	r20, 0x00	; 0
    144a:	50 e0       	ldi	r21, 0x00	; 0
    144c:	82 2b       	or	r24, r18
    144e:	93 2b       	or	r25, r19
    1450:	a4 2b       	or	r26, r20
    1452:	b5 2b       	or	r27, r21
    1454:	8e 83       	std	Y+6, r24	; 0x06
    1456:	9f 83       	std	Y+7, r25	; 0x07
    1458:	a8 87       	std	Y+8, r26	; 0x08
    145a:	b9 87       	std	Y+9, r27	; 0x09
		}
    145c:	e9 ce       	rjmp	.-558    	; 0x1230 <follow_path+0x66>
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
    145e:	26 e0       	ldi	r18, 0x06	; 6
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <follow_path+0x29e>
				break;
			}
			if (last) break;				/* Last segment match. Function completed. */
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
    1464:	25 e0       	ldi	r18, 0x05	; 5
    1466:	30 e0       	ldi	r19, 0x00	; 0
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
		}
	}

	return res;
}
    1468:	c9 01       	movw	r24, r18
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
    146e:	ea e0       	ldi	r30, 0x0A	; 10
    1470:	0c 94 ef 2d 	jmp	0x5bde	; 0x5bde <__epilogue_restores__+0x10>
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_seek(dj, 0);			/* Rewind directory object */
    1474:	ce 01       	movw	r24, r28
    1476:	0e 94 63 08 	call	0x10c6	; 0x10c6 <dir_seek.clone.1>
    147a:	9c 01       	movw	r18, r24
	if (res != FR_OK) return res;
    147c:	00 97       	sbiw	r24, 0x00	; 0
    147e:	09 f4       	brne	.+2      	; 0x1482 <follow_path+0x2b8>
    1480:	a0 cf       	rjmp	.-192    	; 0x13c2 <follow_path+0x1f8>
    1482:	c5 cf       	rjmp	.-118    	; 0x140e <follow_path+0x244>

00001484 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occured */
	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    1484:	a6 e0       	ldi	r26, 0x06	; 6
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e8 e4       	ldi	r30, 0x48	; 72
    148a:	fa e0       	ldi	r31, 0x0A	; 10
    148c:	0c 94 cb 2d 	jmp	0x5b96	; 0x5b96 <__prologue_saves__>
    1490:	fc 01       	movw	r30, r24
    1492:	14 2f       	mov	r17, r20
	BYTE fmt, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fsize, tsect, mclst;
	const XCHAR *p = *path;
    1494:	a0 81       	ld	r26, Z
    1496:	b1 81       	ldd	r27, Z+1	; 0x01
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';				/* Is there a drive number? */
    1498:	8c 91       	ld	r24, X
    149a:	99 27       	eor	r25, r25
    149c:	87 fd       	sbrc	r24, 7
    149e:	90 95       	com	r25
    14a0:	c0 97       	sbiw	r24, 0x30	; 48
	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
    14a2:	8a 30       	cpi	r24, 0x0A	; 10
    14a4:	91 05       	cpc	r25, r1
    14a6:	48 f4       	brcc	.+18     	; 0x14ba <chk_mounted+0x36>
    14a8:	11 96       	adiw	r26, 0x01	; 1
    14aa:	2c 91       	ld	r18, X
    14ac:	11 97       	sbiw	r26, 0x01	; 1
    14ae:	2a 33       	cpi	r18, 0x3A	; 58
    14b0:	21 f4       	brne	.+8      	; 0x14ba <chk_mounted+0x36>
		p += 2; *path = p;			/* Return pointer to the path name */
    14b2:	12 96       	adiw	r26, 0x02	; 2
    14b4:	b1 83       	std	Z+1, r27	; 0x01
    14b6:	a0 83       	st	Z, r26
    14b8:	03 c0       	rjmp	.+6      	; 0x14c0 <chk_mounted+0x3c>
	} else {						/* No drive number is given */
#if _FS_RPATH
		vol = Drive;				/* Use current drive */
    14ba:	80 91 b2 03 	lds	r24, 0x03B2
    14be:	90 e0       	ldi	r25, 0x00	; 0
		vol = 0;					/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
    14c0:	00 97       	sbiw	r24, 0x00	; 0
    14c2:	09 f0       	breq	.+2      	; 0x14c6 <chk_mounted+0x42>
    14c4:	a6 c1       	rjmp	.+844    	; 0x1812 <chk_mounted+0x38e>
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
    14c6:	20 91 b3 03 	lds	r18, 0x03B3
    14ca:	30 91 b4 03 	lds	r19, 0x03B4
    14ce:	3e 83       	std	Y+6, r19	; 0x06
    14d0:	2d 83       	std	Y+5, r18	; 0x05
    14d2:	db 01       	movw	r26, r22
    14d4:	11 96       	adiw	r26, 0x01	; 1
    14d6:	3c 93       	st	X, r19
    14d8:	2e 93       	st	-X, r18
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
    14da:	21 15       	cp	r18, r1
    14dc:	31 05       	cpc	r19, r1
    14de:	09 f4       	brne	.+2      	; 0x14e2 <chk_mounted+0x5e>
    14e0:	9b c1       	rjmp	.+822    	; 0x1818 <chk_mounted+0x394>

	ENTER_FF(fs);					/* Lock file system */

	if (fs->fs_type) {				/* If the logical drive has been mounted */
    14e2:	f9 01       	movw	r30, r18
    14e4:	80 81       	ld	r24, Z
    14e6:	88 23       	and	r24, r24
    14e8:	59 f0       	breq	.+22     	; 0x1500 <chk_mounted+0x7c>
		stat = disk_status(fs->drive);
    14ea:	81 81       	ldd	r24, Z+1	; 0x01
    14ec:	0e 94 90 16 	call	0x2d20	; 0x2d20 <disk_status>
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
    14f0:	80 fd       	sbrc	r24, 0
    14f2:	06 c0       	rjmp	.+12     	; 0x1500 <chk_mounted+0x7c>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    14f4:	11 23       	and	r17, r17
    14f6:	09 f4       	brne	.+2      	; 0x14fa <chk_mounted+0x76>
    14f8:	92 c1       	rjmp	.+804    	; 0x181e <chk_mounted+0x39a>
    14fa:	82 ff       	sbrs	r24, 2
    14fc:	90 c1       	rjmp	.+800    	; 0x181e <chk_mounted+0x39a>
    14fe:	95 c1       	rjmp	.+810    	; 0x182a <chk_mounted+0x3a6>
		}
	}

	/* The logical drive must be mounted. Following code attempts to mount the volume */

	fs->fs_type = 0;					/* Clear the file system object */
    1500:	ad 81       	ldd	r26, Y+5	; 0x05
    1502:	be 81       	ldd	r27, Y+6	; 0x06
    1504:	1c 92       	st	X, r1
	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
    1506:	11 96       	adiw	r26, 0x01	; 1
    1508:	1c 92       	st	X, r1
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	0e 94 e7 15 	call	0x2bce	; 0x2bce <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
    1510:	80 fd       	sbrc	r24, 0
    1512:	88 c1       	rjmp	.+784    	; 0x1824 <chk_mounted+0x3a0>
#if _MAX_SS != 512						/* Get disk sector size if needed */
	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    1514:	11 23       	and	r17, r17
    1516:	11 f0       	breq	.+4      	; 0x151c <chk_mounted+0x98>
    1518:	82 fd       	sbrc	r24, 2
    151a:	87 c1       	rjmp	.+782    	; 0x182a <chk_mounted+0x3a6>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
    151c:	8d 81       	ldd	r24, Y+5	; 0x05
    151e:	9e 81       	ldd	r25, Y+6	; 0x06
    1520:	40 e0       	ldi	r20, 0x00	; 0
    1522:	50 e0       	ldi	r21, 0x00	; 0
    1524:	ba 01       	movw	r22, r20
    1526:	0e 94 90 04 	call	0x920	; 0x920 <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	b9 f4       	brne	.+46     	; 0x155c <chk_mounted+0xd8>
		/* Check a partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
		if (tbl[4]) {									/* Is the partition existing? */
    152e:	ed 81       	ldd	r30, Y+5	; 0x05
    1530:	fe 81       	ldd	r31, Y+6	; 0x06
    1532:	ec 50       	subi	r30, 0x0C	; 12
    1534:	fe 4f       	sbci	r31, 0xFE	; 254
    1536:	80 81       	ld	r24, Z
    1538:	88 23       	and	r24, r24
    153a:	09 f4       	brne	.+2      	; 0x153e <chk_mounted+0xba>
    153c:	7c c1       	rjmp	.+760    	; 0x1836 <chk_mounted+0x3b2>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
    153e:	ed 81       	ldd	r30, Y+5	; 0x05
    1540:	fe 81       	ldd	r31, Y+6	; 0x06
    1542:	e8 50       	subi	r30, 0x08	; 8
    1544:	fe 4f       	sbci	r31, 0xFE	; 254
    1546:	60 80       	ld	r6, Z
    1548:	71 80       	ldd	r7, Z+1	; 0x01
    154a:	82 80       	ldd	r8, Z+2	; 0x02
    154c:	93 80       	ldd	r9, Z+3	; 0x03
			fmt = check_fs(fs, bsect);					/* Check the partition */
    154e:	8d 81       	ldd	r24, Y+5	; 0x05
    1550:	9e 81       	ldd	r25, Y+6	; 0x06
    1552:	b4 01       	movw	r22, r8
    1554:	a3 01       	movw	r20, r6
    1556:	0e 94 90 04 	call	0x920	; 0x920 <check_fs>
    155a:	03 c0       	rjmp	.+6      	; 0x1562 <chk_mounted+0xde>
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
    155c:	66 24       	eor	r6, r6
    155e:	77 24       	eor	r7, r7
    1560:	43 01       	movw	r8, r6
		if (tbl[4]) {									/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);					/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    1562:	83 30       	cpi	r24, 0x03	; 3
    1564:	09 f4       	brne	.+2      	; 0x1568 <chk_mounted+0xe4>
    1566:	64 c1       	rjmp	.+712    	; 0x1830 <chk_mounted+0x3ac>
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
    1568:	88 23       	and	r24, r24
    156a:	09 f0       	breq	.+2      	; 0x156e <chk_mounted+0xea>
    156c:	64 c1       	rjmp	.+712    	; 0x1836 <chk_mounted+0x3b2>
    156e:	a2 e3       	ldi	r26, 0x32	; 50
    1570:	ea 2e       	mov	r14, r26
    1572:	f1 2c       	mov	r15, r1
    1574:	ed 81       	ldd	r30, Y+5	; 0x05
    1576:	fe 81       	ldd	r31, Y+6	; 0x06
    1578:	ee 0e       	add	r14, r30
    157a:	ff 1e       	adc	r15, r31
    157c:	d7 01       	movw	r26, r14
    157e:	1b 96       	adiw	r26, 0x0b	; 11
    1580:	8d 91       	ld	r24, X+
    1582:	9c 91       	ld	r25, X
    1584:	1c 97       	sbiw	r26, 0x0c	; 12
    1586:	b2 e0       	ldi	r27, 0x02	; 2
    1588:	80 30       	cpi	r24, 0x00	; 0
    158a:	9b 07       	cpc	r25, r27
    158c:	09 f0       	breq	.+2      	; 0x1590 <chk_mounted+0x10c>
    158e:	53 c1       	rjmp	.+678    	; 0x1836 <chk_mounted+0x3b2>
		return FR_NO_FILESYSTEM;

	/* Initialize the file system object */
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    1590:	f7 01       	movw	r30, r14
    1592:	66 89       	ldd	r22, Z+22	; 0x16
    1594:	77 89       	ldd	r23, Z+23	; 0x17
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	90 e0       	ldi	r25, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
    159a:	61 15       	cp	r22, r1
    159c:	71 05       	cpc	r23, r1
    159e:	81 05       	cpc	r24, r1
    15a0:	91 05       	cpc	r25, r1
    15a2:	21 f4       	brne	.+8      	; 0x15ac <chk_mounted+0x128>
    15a4:	64 a1       	ldd	r22, Z+36	; 0x24
    15a6:	75 a1       	ldd	r23, Z+37	; 0x25
    15a8:	86 a1       	ldd	r24, Z+38	; 0x26
    15aa:	97 a1       	ldd	r25, Z+39	; 0x27
	fs->sects_fat = fsize;
    15ac:	ad 81       	ldd	r26, Y+5	; 0x05
    15ae:	be 81       	ldd	r27, Y+6	; 0x06
    15b0:	5a 96       	adiw	r26, 0x1a	; 26
    15b2:	6d 93       	st	X+, r22
    15b4:	7d 93       	st	X+, r23
    15b6:	8d 93       	st	X+, r24
    15b8:	9c 93       	st	X, r25
    15ba:	5d 97       	sbiw	r26, 0x1d	; 29
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
    15bc:	fd 01       	movw	r30, r26
    15be:	ee 5b       	subi	r30, 0xBE	; 190
    15c0:	ff 4f       	sbci	r31, 0xFF	; 255
    15c2:	20 81       	ld	r18, Z
    15c4:	13 96       	adiw	r26, 0x03	; 3
    15c6:	2c 93       	st	X, r18
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	40 e0       	ldi	r20, 0x00	; 0
    15cc:	50 e0       	ldi	r21, 0x00	; 0
    15ce:	0e 94 57 2d 	call	0x5aae	; 0x5aae <__mulsi3>
    15d2:	1b 01       	movw	r2, r22
    15d4:	2c 01       	movw	r4, r24
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
    15d6:	f7 01       	movw	r30, r14
    15d8:	a6 84       	ldd	r10, Z+14	; 0x0e
    15da:	b7 84       	ldd	r11, Z+15	; 0x0f
    15dc:	cc 24       	eor	r12, r12
    15de:	dd 24       	eor	r13, r13
    15e0:	a6 0c       	add	r10, r6
    15e2:	b7 1c       	adc	r11, r7
    15e4:	c8 1c       	adc	r12, r8
    15e6:	d9 1c       	adc	r13, r9
    15e8:	ad 81       	ldd	r26, Y+5	; 0x05
    15ea:	be 81       	ldd	r27, Y+6	; 0x06
    15ec:	92 96       	adiw	r26, 0x22	; 34
    15ee:	ad 92       	st	X+, r10
    15f0:	bd 92       	st	X+, r11
    15f2:	cd 92       	st	X+, r12
    15f4:	dc 92       	st	X, r13
    15f6:	95 97       	sbiw	r26, 0x25	; 37
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
    15f8:	df 96       	adiw	r26, 0x3f	; 63
    15fa:	ec 91       	ld	r30, X
    15fc:	df 97       	sbiw	r26, 0x3f	; 63
    15fe:	12 96       	adiw	r26, 0x02	; 2
    1600:	ec 93       	st	X, r30
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
    1602:	d7 01       	movw	r26, r14
    1604:	51 96       	adiw	r26, 0x11	; 17
    1606:	4d 91       	ld	r20, X+
    1608:	5c 91       	ld	r21, X
    160a:	52 97       	sbiw	r26, 0x12	; 18
    160c:	ad 81       	ldd	r26, Y+5	; 0x05
    160e:	be 81       	ldd	r27, Y+6	; 0x06
    1610:	19 96       	adiw	r26, 0x09	; 9
    1612:	5c 93       	st	X, r21
    1614:	4e 93       	st	-X, r20
    1616:	18 97       	sbiw	r26, 0x08	; 8
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    1618:	d7 01       	movw	r26, r14
    161a:	53 96       	adiw	r26, 0x13	; 19
    161c:	6d 91       	ld	r22, X+
    161e:	7c 91       	ld	r23, X
    1620:	54 97       	sbiw	r26, 0x14	; 20
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	90 e0       	ldi	r25, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    1626:	61 15       	cp	r22, r1
    1628:	71 05       	cpc	r23, r1
    162a:	81 05       	cpc	r24, r1
    162c:	91 05       	cpc	r25, r1
    162e:	31 f4       	brne	.+12     	; 0x163c <chk_mounted+0x1b8>
    1630:	90 96       	adiw	r26, 0x20	; 32
    1632:	6d 91       	ld	r22, X+
    1634:	7d 91       	ld	r23, X+
    1636:	8d 91       	ld	r24, X+
    1638:	9c 91       	ld	r25, X
    163a:	93 97       	sbiw	r26, 0x23	; 35
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
    163c:	f4 e0       	ldi	r31, 0x04	; 4
    163e:	56 95       	lsr	r21
    1640:	47 95       	ror	r20
    1642:	fa 95       	dec	r31
    1644:	e1 f7       	brne	.-8      	; 0x163e <chk_mounted+0x1ba>
    1646:	8a 01       	movw	r16, r20
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	09 83       	std	Y+1, r16	; 0x01
    164e:	1a 83       	std	Y+2, r17	; 0x02
    1650:	2b 83       	std	Y+3, r18	; 0x03
    1652:	3c 83       	std	Y+4, r19	; 0x04
    1654:	d7 01       	movw	r26, r14
    1656:	1e 96       	adiw	r26, 0x0e	; 14
    1658:	0d 91       	ld	r16, X+
    165a:	1c 91       	ld	r17, X
    165c:	1f 97       	sbiw	r26, 0x0f	; 15
    165e:	20 e0       	ldi	r18, 0x00	; 0
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	60 1b       	sub	r22, r16
    1664:	71 0b       	sbc	r23, r17
    1666:	82 0b       	sbc	r24, r18
    1668:	93 0b       	sbc	r25, r19
    166a:	62 19       	sub	r22, r2
    166c:	73 09       	sbc	r23, r3
    166e:	84 09       	sbc	r24, r4
    1670:	95 09       	sbc	r25, r5
    1672:	09 81       	ldd	r16, Y+1	; 0x01
    1674:	1a 81       	ldd	r17, Y+2	; 0x02
    1676:	2b 81       	ldd	r18, Y+3	; 0x03
    1678:	3c 81       	ldd	r19, Y+4	; 0x04
    167a:	60 1b       	sub	r22, r16
    167c:	71 0b       	sbc	r23, r17
    167e:	82 0b       	sbc	r24, r18
    1680:	93 0b       	sbc	r25, r19
		) / fs->csize + 2;
    1682:	2e 2f       	mov	r18, r30
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	40 e0       	ldi	r20, 0x00	; 0
    1688:	50 e0       	ldi	r21, 0x00	; 0
    168a:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__udivmodsi4>
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
    168e:	2e 5f       	subi	r18, 0xFE	; 254
    1690:	3f 4f       	sbci	r19, 0xFF	; 255
    1692:	4f 4f       	sbci	r20, 0xFF	; 255
    1694:	5f 4f       	sbci	r21, 0xFF	; 255
    1696:	ad 81       	ldd	r26, Y+5	; 0x05
    1698:	be 81       	ldd	r27, Y+6	; 0x06
    169a:	5e 96       	adiw	r26, 0x1e	; 30
    169c:	2d 93       	st	X+, r18
    169e:	3d 93       	st	X+, r19
    16a0:	4d 93       	st	X+, r20
    16a2:	5c 93       	st	X, r21
    16a4:	91 97       	sbiw	r26, 0x21	; 33
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
    16a6:	27 3f       	cpi	r18, 0xF7	; 247
    16a8:	bf e0       	ldi	r27, 0x0F	; 15
    16aa:	3b 07       	cpc	r19, r27
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	4b 07       	cpc	r20, r27
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	5b 07       	cpc	r21, r27
    16b4:	58 f0       	brcs	.+22     	; 0x16cc <chk_mounted+0x248>
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
    16b6:	27 3f       	cpi	r18, 0xF7	; 247
    16b8:	ef ef       	ldi	r30, 0xFF	; 255
    16ba:	3e 07       	cpc	r19, r30
    16bc:	e0 e0       	ldi	r30, 0x00	; 0
    16be:	4e 07       	cpc	r20, r30
    16c0:	e0 e0       	ldi	r30, 0x00	; 0
    16c2:	5e 07       	cpc	r21, r30
    16c4:	08 f0       	brcs	.+2      	; 0x16c8 <chk_mounted+0x244>
    16c6:	be c0       	rjmp	.+380    	; 0x1844 <chk_mounted+0x3c0>
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
    16c8:	12 e0       	ldi	r17, 0x02	; 2
    16ca:	01 c0       	rjmp	.+2      	; 0x16ce <chk_mounted+0x24a>
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
    16cc:	11 e0       	ldi	r17, 0x01	; 1
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    16ce:	d2 01       	movw	r26, r4
    16d0:	c1 01       	movw	r24, r2
    16d2:	8a 0d       	add	r24, r10
    16d4:	9b 1d       	adc	r25, r11
    16d6:	ac 1d       	adc	r26, r12
    16d8:	bd 1d       	adc	r27, r13
    16da:	ed 81       	ldd	r30, Y+5	; 0x05
    16dc:	fe 81       	ldd	r31, Y+6	; 0x06
    16de:	86 a3       	std	Z+38, r24	; 0x26
    16e0:	97 a3       	std	Z+39, r25	; 0x27
    16e2:	a0 a7       	std	Z+40, r26	; 0x28
    16e4:	b1 a7       	std	Z+41, r27	; 0x29
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
    16e6:	29 81       	ldd	r18, Y+1	; 0x01
    16e8:	3a 81       	ldd	r19, Y+2	; 0x02
    16ea:	4b 81       	ldd	r20, Y+3	; 0x03
    16ec:	5c 81       	ldd	r21, Y+4	; 0x04
    16ee:	a2 0e       	add	r10, r18
    16f0:	b3 1e       	adc	r11, r19
    16f2:	c4 1e       	adc	r12, r20
    16f4:	d5 1e       	adc	r13, r21
    16f6:	a2 0c       	add	r10, r2
    16f8:	b3 1c       	adc	r11, r3
    16fa:	c4 1c       	adc	r12, r4
    16fc:	d5 1c       	adc	r13, r5
    16fe:	ad 81       	ldd	r26, Y+5	; 0x05
    1700:	be 81       	ldd	r27, Y+6	; 0x06
    1702:	9a 96       	adiw	r26, 0x2a	; 42
    1704:	ad 92       	st	X+, r10
    1706:	bd 92       	st	X+, r11
    1708:	cd 92       	st	X+, r12
    170a:	dc 92       	st	X, r13
    170c:	9d 97       	sbiw	r26, 0x2d	; 45

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
    170e:	8f ef       	ldi	r24, 0xFF	; 255
    1710:	9f ef       	ldi	r25, 0xFF	; 255
    1712:	dc 01       	movw	r26, r24
    1714:	ed 81       	ldd	r30, Y+5	; 0x05
    1716:	fe 81       	ldd	r31, Y+6	; 0x06
    1718:	86 87       	std	Z+14, r24	; 0x0e
    171a:	97 87       	std	Z+15, r25	; 0x0f
    171c:	a0 8b       	std	Z+16, r26	; 0x10
    171e:	b1 8b       	std	Z+17, r27	; 0x11
	fs->wflag = 0;
    1720:	14 82       	std	Z+4, r1	; 0x04
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
    1722:	13 30       	cpi	r17, 0x03	; 3
    1724:	09 f0       	breq	.+2      	; 0x1728 <chk_mounted+0x2a4>
    1726:	5c c0       	rjmp	.+184    	; 0x17e0 <chk_mounted+0x35c>
	 	fs->fsi_flag = 0;
    1728:	15 82       	std	Z+5, r1	; 0x05
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    172a:	d7 01       	movw	r26, r14
    172c:	d0 96       	adiw	r26, 0x30	; 48
    172e:	2d 91       	ld	r18, X+
    1730:	3c 91       	ld	r19, X
    1732:	d1 97       	sbiw	r26, 0x31	; 49
    1734:	40 e0       	ldi	r20, 0x00	; 0
    1736:	50 e0       	ldi	r21, 0x00	; 0
    1738:	26 0d       	add	r18, r6
    173a:	37 1d       	adc	r19, r7
    173c:	48 1d       	adc	r20, r8
    173e:	59 1d       	adc	r21, r9
    1740:	ed 81       	ldd	r30, Y+5	; 0x05
    1742:	fe 81       	ldd	r31, Y+6	; 0x06
    1744:	22 8b       	std	Z+18, r18	; 0x12
    1746:	33 8b       	std	Z+19, r19	; 0x13
    1748:	44 8b       	std	Z+20, r20	; 0x14
    174a:	55 8b       	std	Z+21, r21	; 0x15
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
    174c:	bf 01       	movw	r22, r30
    174e:	6e 5c       	subi	r22, 0xCE	; 206
    1750:	7f 4f       	sbci	r23, 0xFF	; 255
    1752:	81 81       	ldd	r24, Z+1	; 0x01
    1754:	01 e0       	ldi	r16, 0x01	; 1
    1756:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <disk_read>
    175a:	00 97       	sbiw	r24, 0x00	; 0
    175c:	09 f0       	breq	.+2      	; 0x1760 <chk_mounted+0x2dc>
    175e:	40 c0       	rjmp	.+128    	; 0x17e0 <chk_mounted+0x35c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    1760:	f7 01       	movw	r30, r14
    1762:	e2 50       	subi	r30, 0x02	; 2
    1764:	fe 4f       	sbci	r31, 0xFE	; 254
	fs->wflag = 0;
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
    1766:	80 81       	ld	r24, Z
    1768:	91 81       	ldd	r25, Z+1	; 0x01
    176a:	fa ea       	ldi	r31, 0xAA	; 170
    176c:	85 35       	cpi	r24, 0x55	; 85
    176e:	9f 07       	cpc	r25, r31
    1770:	b9 f5       	brne	.+110    	; 0x17e0 <chk_mounted+0x35c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    1772:	ed 81       	ldd	r30, Y+5	; 0x05
    1774:	fe 81       	ldd	r31, Y+6	; 0x06
    1776:	82 a9       	ldd	r24, Z+50	; 0x32
    1778:	93 a9       	ldd	r25, Z+51	; 0x33
    177a:	a4 a9       	ldd	r26, Z+52	; 0x34
    177c:	b5 a9       	ldd	r27, Z+53	; 0x35
    177e:	82 35       	cpi	r24, 0x52	; 82
    1780:	f2 e5       	ldi	r31, 0x52	; 82
    1782:	9f 07       	cpc	r25, r31
    1784:	f1 e6       	ldi	r31, 0x61	; 97
    1786:	af 07       	cpc	r26, r31
    1788:	f1 e4       	ldi	r31, 0x41	; 65
    178a:	bf 07       	cpc	r27, r31
    178c:	49 f5       	brne	.+82     	; 0x17e0 <chk_mounted+0x35c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    178e:	f7 01       	movw	r30, r14
    1790:	ec 51       	subi	r30, 0x1C	; 28
    1792:	fe 4f       	sbci	r31, 0xFE	; 254
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    1794:	80 81       	ld	r24, Z
    1796:	91 81       	ldd	r25, Z+1	; 0x01
    1798:	a2 81       	ldd	r26, Z+2	; 0x02
    179a:	b3 81       	ldd	r27, Z+3	; 0x03
    179c:	82 37       	cpi	r24, 0x72	; 114
    179e:	02 e7       	ldi	r16, 0x72	; 114
    17a0:	90 07       	cpc	r25, r16
    17a2:	01 e4       	ldi	r16, 0x41	; 65
    17a4:	a0 07       	cpc	r26, r16
    17a6:	01 e6       	ldi	r16, 0x61	; 97
    17a8:	b0 07       	cpc	r27, r16
    17aa:	d1 f4       	brne	.+52     	; 0x17e0 <chk_mounted+0x35c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    17ac:	f7 01       	movw	r30, r14
    17ae:	e4 51       	subi	r30, 0x14	; 20
    17b0:	fe 4f       	sbci	r31, 0xFE	; 254
    17b2:	80 81       	ld	r24, Z
    17b4:	91 81       	ldd	r25, Z+1	; 0x01
    17b6:	a2 81       	ldd	r26, Z+2	; 0x02
    17b8:	b3 81       	ldd	r27, Z+3	; 0x03
    17ba:	ed 81       	ldd	r30, Y+5	; 0x05
    17bc:	fe 81       	ldd	r31, Y+6	; 0x06
    17be:	82 87       	std	Z+10, r24	; 0x0a
    17c0:	93 87       	std	Z+11, r25	; 0x0b
    17c2:	a4 87       	std	Z+12, r26	; 0x0c
    17c4:	b5 87       	std	Z+13, r27	; 0x0d
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    17c6:	f7 01       	movw	r30, r14
    17c8:	e8 51       	subi	r30, 0x18	; 24
    17ca:	fe 4f       	sbci	r31, 0xFE	; 254
    17cc:	80 81       	ld	r24, Z
    17ce:	91 81       	ldd	r25, Z+1	; 0x01
    17d0:	a2 81       	ldd	r26, Z+2	; 0x02
    17d2:	b3 81       	ldd	r27, Z+3	; 0x03
    17d4:	ed 81       	ldd	r30, Y+5	; 0x05
    17d6:	fe 81       	ldd	r31, Y+6	; 0x06
    17d8:	86 87       	std	Z+14, r24	; 0x0e
    17da:	97 87       	std	Z+15, r25	; 0x0f
    17dc:	a0 8b       	std	Z+16, r26	; 0x10
    17de:	b1 8b       	std	Z+17, r27	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    17e0:	ad 81       	ldd	r26, Y+5	; 0x05
    17e2:	be 81       	ldd	r27, Y+6	; 0x06
    17e4:	1c 93       	st	X, r17
	fs->winsect = 0;		/* Invalidate sector cache */
    17e6:	ed 81       	ldd	r30, Y+5	; 0x05
    17e8:	fe 81       	ldd	r31, Y+6	; 0x06
    17ea:	16 a6       	std	Z+46, r1	; 0x2e
    17ec:	17 a6       	std	Z+47, r1	; 0x2f
    17ee:	10 aa       	std	Z+48, r1	; 0x30
    17f0:	11 aa       	std	Z+49, r1	; 0x31
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
    17f2:	16 8a       	std	Z+22, r1	; 0x16
    17f4:	17 8a       	std	Z+23, r1	; 0x17
    17f6:	10 8e       	std	Z+24, r1	; 0x18
    17f8:	11 8e       	std	Z+25, r1	; 0x19
#endif
	fs->id = ++Fsid;		/* File system mount ID */
    17fa:	80 91 b5 03 	lds	r24, 0x03B5
    17fe:	90 91 b6 03 	lds	r25, 0x03B6
    1802:	01 96       	adiw	r24, 0x01	; 1
    1804:	90 93 b6 03 	sts	0x03B6, r25
    1808:	80 93 b5 03 	sts	0x03B5, r24
    180c:	97 83       	std	Z+7, r25	; 0x07
    180e:	86 83       	std	Z+6, r24	; 0x06
    1810:	06 c0       	rjmp	.+12     	; 0x181e <chk_mounted+0x39a>
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
    1812:	2b e0       	ldi	r18, 0x0B	; 11
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	11 c0       	rjmp	.+34     	; 0x183a <chk_mounted+0x3b6>
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
    1818:	2c e0       	ldi	r18, 0x0C	; 12
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	0e c0       	rjmp	.+28     	; 0x183a <chk_mounted+0x3b6>
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
#endif
			return FR_OK;			/* The file system object is valid */
    181e:	20 e0       	ldi	r18, 0x00	; 0
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	0b c0       	rjmp	.+22     	; 0x183a <chk_mounted+0x3b6>

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
		return FR_NOT_READY;
    1824:	23 e0       	ldi	r18, 0x03	; 3
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	08 c0       	rjmp	.+16     	; 0x183a <chk_mounted+0x3b6>
	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
    182a:	2a e0       	ldi	r18, 0x0A	; 10
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	05 c0       	rjmp	.+10     	; 0x183a <chk_mounted+0x3b6>
		if (tbl[4]) {									/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);					/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    1830:	21 e0       	ldi	r18, 0x01	; 1
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	02 c0       	rjmp	.+4      	; 0x183a <chk_mounted+0x3b6>
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
		return FR_NO_FILESYSTEM;
    1836:	2d e0       	ldi	r18, 0x0D	; 13
    1838:	30 e0       	ldi	r19, 0x00	; 0
	fs->cdir = 0;			/* Current directory (root dir) */
#endif
	fs->id = ++Fsid;		/* File system mount ID */

	return FR_OK;
}
    183a:	c9 01       	movw	r24, r18
    183c:	26 96       	adiw	r28, 0x06	; 6
    183e:	e2 e1       	ldi	r30, 0x12	; 18
    1840:	0c 94 e7 2d 	jmp	0x5bce	; 0x5bce <__epilogue_restores__>
	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    1844:	f7 01       	movw	r30, r14
    1846:	84 a5       	ldd	r24, Z+44	; 0x2c
    1848:	95 a5       	ldd	r25, Z+45	; 0x2d
    184a:	a6 a5       	ldd	r26, Z+46	; 0x2e
    184c:	b7 a5       	ldd	r27, Z+47	; 0x2f
    184e:	ed 81       	ldd	r30, Y+5	; 0x05
    1850:	fe 81       	ldd	r31, Y+6	; 0x06
    1852:	86 a3       	std	Z+38, r24	; 0x26
    1854:	97 a3       	std	Z+39, r25	; 0x27
    1856:	a0 a7       	std	Z+40, r26	; 0x28
    1858:	b1 a7       	std	Z+41, r27	; 0x29
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
    185a:	13 e0       	ldi	r17, 0x03	; 3
    185c:	44 cf       	rjmp	.-376    	; 0x16e6 <chk_mounted+0x262>

0000185e <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
    185e:	88 23       	and	r24, r24
    1860:	99 f4       	brne	.+38     	; 0x1888 <f_mount+0x2a>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
    1862:	e0 91 b3 03 	lds	r30, 0x03B3
    1866:	f0 91 b4 03 	lds	r31, 0x03B4

	if (rfs) {
    186a:	30 97       	sbiw	r30, 0x00	; 0
    186c:	09 f0       	breq	.+2      	; 0x1870 <f_mount+0x12>
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
    186e:	10 82       	st	Z, r1
	}

	if (fs) {
    1870:	61 15       	cp	r22, r1
    1872:	71 05       	cpc	r23, r1
    1874:	11 f0       	breq	.+4      	; 0x187a <f_mount+0x1c>
		fs->fs_type = 0;			/* Clear new fs object */
    1876:	fb 01       	movw	r30, r22
    1878:	10 82       	st	Z, r1
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
    187a:	70 93 b4 03 	sts	0x03B4, r23
    187e:	60 93 b3 03 	sts	0x03B3, r22

	return FR_OK;
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	02 c0       	rjmp	.+4      	; 0x188c <f_mount+0x2e>
{
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    1888:	2b e0       	ldi	r18, 0x0B	; 11
    188a:	30 e0       	ldi	r19, 0x00	; 0
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */

	return FR_OK;
}
    188c:	c9 01       	movw	r24, r18
    188e:	08 95       	ret

00001890 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const XCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    1890:	ad e2       	ldi	r26, 0x2D	; 45
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	ee e4       	ldi	r30, 0x4E	; 78
    1896:	fc e0       	ldi	r31, 0x0C	; 12
    1898:	0c 94 cb 2d 	jmp	0x5b96	; 0x5b96 <__prologue_saves__>
    189c:	6c 01       	movw	r12, r24
    189e:	7c a3       	std	Y+36, r23	; 0x24
    18a0:	6b a3       	std	Y+35, r22	; 0x23
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	fp->fs = NULL;		/* Clear file object */
    18a2:	dc 01       	movw	r26, r24
    18a4:	1d 92       	st	X+, r1
    18a6:	1c 92       	st	X, r1
#if !_FS_READONLY
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
    18a8:	b4 2f       	mov	r27, r20
    18aa:	bf 71       	andi	r27, 0x1F	; 31
    18ac:	bd a3       	std	Y+37, r27	; 0x25
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
    18ae:	8e 01       	movw	r16, r28
    18b0:	03 5f       	subi	r16, 0xF3	; 243
    18b2:	1f 4f       	sbci	r17, 0xFF	; 255
    18b4:	4e 71       	andi	r20, 0x1E	; 30
    18b6:	ce 01       	movw	r24, r28
    18b8:	83 96       	adiw	r24, 0x23	; 35
    18ba:	b8 01       	movw	r22, r16
    18bc:	0e 94 42 0a 	call	0x1484	; 0x1484 <chk_mounted>
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    18c0:	00 97       	sbiw	r24, 0x00	; 0
    18c2:	09 f0       	breq	.+2      	; 0x18c6 <f_open+0x36>
    18c4:	96 c1       	rjmp	.+812    	; 0x1bf2 <f_open+0x362>
	INITBUF(dj, sfn, lfn);
    18c6:	ce 01       	movw	r24, r28
    18c8:	01 96       	adiw	r24, 0x01	; 1
    18ca:	9a a3       	std	Y+34, r25	; 0x22
    18cc:	89 a3       	std	Y+33, r24	; 0x21
	res = follow_path(&dj, path);	/* Follow the file path */
    18ce:	6b a1       	ldd	r22, Y+35	; 0x23
    18d0:	7c a1       	ldd	r23, Y+36	; 0x24
    18d2:	c8 01       	movw	r24, r16
    18d4:	0e 94 e5 08 	call	0x11ca	; 0x11ca <follow_path>
    18d8:	9c 01       	movw	r18, r24

#if !_FS_READONLY
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    18da:	ed a1       	ldd	r30, Y+37	; 0x25
    18dc:	8e 2f       	mov	r24, r30
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	ac 01       	movw	r20, r24
    18e2:	4c 71       	andi	r20, 0x1C	; 28
    18e4:	50 70       	andi	r21, 0x00	; 0
    18e6:	41 15       	cp	r20, r1
    18e8:	51 05       	cpc	r21, r1
    18ea:	09 f4       	brne	.+2      	; 0x18ee <f_open+0x5e>
    18ec:	1b c1       	rjmp	.+566    	; 0x1b24 <f_open+0x294>
		DWORD ps, cl;

		if (res != FR_OK) {			/* No file, create new */
    18ee:	21 15       	cp	r18, r1
    18f0:	31 05       	cpc	r19, r1
    18f2:	09 f4       	brne	.+2      	; 0x18f6 <f_open+0x66>
    18f4:	4e c0       	rjmp	.+156    	; 0x1992 <f_open+0x102>
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
    18f6:	24 30       	cpi	r18, 0x04	; 4
    18f8:	31 05       	cpc	r19, r1
    18fa:	09 f0       	breq	.+2      	; 0x18fe <f_open+0x6e>
    18fc:	84 c1       	rjmp	.+776    	; 0x1c06 <f_open+0x376>
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_seek(dj, 0);
    18fe:	c8 01       	movw	r24, r16
    1900:	0e 94 63 08 	call	0x10c6	; 0x10c6 <dir_seek.clone.1>
    1904:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    1906:	00 97       	sbiw	r24, 0x00	; 0
    1908:	09 f0       	breq	.+2      	; 0x190c <f_open+0x7c>
    190a:	7d c1       	rjmp	.+762    	; 0x1c06 <f_open+0x376>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
		DWORD ps, cl;

		if (res != FR_OK) {			/* No file, create new */
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
				res = dir_register(&dj);
    190c:	e0 2e       	mov	r14, r16
    190e:	01 2f       	mov	r16, r17

#else	/* Non LFN configuration */
	res = dir_seek(dj, 0);
	if (res == FR_OK) {
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    1910:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1912:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1914:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1916:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1918:	8d 85       	ldd	r24, Y+13	; 0x0d
    191a:	9e 85       	ldd	r25, Y+14	; 0x0e
    191c:	0e 94 27 04 	call	0x84e	; 0x84e <move_window>
    1920:	9c 01       	movw	r18, r24
			if (res != FR_OK) break;
    1922:	00 97       	sbiw	r24, 0x00	; 0
    1924:	09 f0       	breq	.+2      	; 0x1928 <f_open+0x98>
    1926:	6f c1       	rjmp	.+734    	; 0x1c06 <f_open+0x376>
			c = *dj->dir;
    1928:	ef 8d       	ldd	r30, Y+31	; 0x1f
    192a:	f8 a1       	ldd	r31, Y+32	; 0x20
    192c:	80 81       	ld	r24, Z
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
    192e:	85 3e       	cpi	r24, 0xE5	; 229
    1930:	09 f4       	brne	.+2      	; 0x1934 <f_open+0xa4>
    1932:	6e c1       	rjmp	.+732    	; 0x1c10 <f_open+0x380>
    1934:	88 23       	and	r24, r24
    1936:	09 f4       	brne	.+2      	; 0x193a <f_open+0xaa>
    1938:	6b c1       	rjmp	.+726    	; 0x1c10 <f_open+0x380>
			res = dir_next(dj, TRUE);		/* Next entry with table streach */
    193a:	8e 2d       	mov	r24, r14
    193c:	90 2f       	mov	r25, r16
    193e:	61 e0       	ldi	r22, 0x01	; 1
    1940:	70 e0       	ldi	r23, 0x00	; 0
    1942:	0e 94 53 07 	call	0xea6	; 0xea6 <dir_next>
    1946:	9c 01       	movw	r18, r24
		} while (res == FR_OK);
    1948:	00 97       	sbiw	r24, 0x00	; 0
    194a:	11 f3       	breq	.-60     	; 0x1910 <f_open+0x80>
    194c:	5c c1       	rjmp	.+696    	; 0x1c06 <f_open+0x376>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    194e:	0f 8d       	ldd	r16, Y+31	; 0x1f
    1950:	18 a1       	ldd	r17, Y+32	; 0x20
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    1952:	f8 01       	movw	r30, r16

/*-----------------------------------------------------------------------*/
/* Open or Create a File                                                 */
/*-----------------------------------------------------------------------*/

FRESULT f_open (
    1954:	c8 01       	movw	r24, r16
    1956:	80 96       	adiw	r24, 0x20	; 32
    1958:	01 c0       	rjmp	.+2      	; 0x195c <f_open+0xcc>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    195a:	11 92       	st	Z+, r1
    195c:	e8 17       	cp	r30, r24
    195e:	f9 07       	cpc	r31, r25
    1960:	e1 f7       	brne	.-8      	; 0x195a <f_open+0xca>
	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    1962:	69 a1       	ldd	r22, Y+33	; 0x21
    1964:	7a a1       	ldd	r23, Y+34	; 0x22
    1966:	c8 01       	movw	r24, r16
    1968:	4b e0       	ldi	r20, 0x0B	; 11
    196a:	50 e0       	ldi	r21, 0x00	; 0
    196c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <mem_cpy>
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    1970:	e9 a1       	ldd	r30, Y+33	; 0x21
    1972:	fa a1       	ldd	r31, Y+34	; 0x22
    1974:	83 85       	ldd	r24, Z+11	; 0x0b
    1976:	88 71       	andi	r24, 0x18	; 24
    1978:	d8 01       	movw	r26, r16
    197a:	1c 96       	adiw	r26, 0x0c	; 12
    197c:	8c 93       	st	X, r24
			dj->fs->wflag = 1;
    197e:	ed 85       	ldd	r30, Y+13	; 0x0d
    1980:	fe 85       	ldd	r31, Y+14	; 0x0e
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	84 83       	std	Z+4, r24	; 0x04

		if (res != FR_OK) {			/* No file, create new */
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
				res = dir_register(&dj);
			if (res != FR_OK) LEAVE_FF(dj.fs, res);
			mode |= FA_CREATE_ALWAYS;
    1986:	bd a1       	ldd	r27, Y+37	; 0x25
    1988:	b8 60       	ori	r27, 0x08	; 8
    198a:	bd a3       	std	Y+37, r27	; 0x25
			dir = dj.dir;			/* Created entry (SFN entry) */
    198c:	ef 8c       	ldd	r14, Y+31	; 0x1f
    198e:	f8 a0       	ldd	r15, Y+32	; 0x20
    1990:	b4 c0       	rjmp	.+360    	; 0x1afa <f_open+0x26a>
		}
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
    1992:	e2 fd       	sbrc	r30, 2
    1994:	30 c1       	rjmp	.+608    	; 0x1bf6 <f_open+0x366>
				LEAVE_FF(dj.fs, FR_EXIST);
			dir = dj.dir;
    1996:	ef 8c       	ldd	r14, Y+31	; 0x1f
    1998:	f8 a0       	ldd	r15, Y+32	; 0x20
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
    199a:	e1 14       	cp	r14, r1
    199c:	f1 04       	cpc	r15, r1
    199e:	09 f4       	brne	.+2      	; 0x19a2 <f_open+0x112>
    19a0:	30 c1       	rjmp	.+608    	; 0x1c02 <f_open+0x372>
    19a2:	f7 01       	movw	r30, r14
    19a4:	23 85       	ldd	r18, Z+11	; 0x0b
    19a6:	21 71       	andi	r18, 0x11	; 17
    19a8:	09 f0       	breq	.+2      	; 0x19ac <f_open+0x11c>
    19aa:	2b c1       	rjmp	.+598    	; 0x1c02 <f_open+0x372>
				LEAVE_FF(dj.fs, FR_DENIED);
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
    19ac:	83 ff       	sbrs	r24, 3
    19ae:	a5 c0       	rjmp	.+330    	; 0x1afa <f_open+0x26a>
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
    19b0:	24 88       	ldd	r2, Z+20	; 0x14
    19b2:	35 88       	ldd	r3, Z+21	; 0x15
    19b4:	44 24       	eor	r4, r4
    19b6:	55 24       	eor	r5, r5
    19b8:	21 01       	movw	r4, r2
    19ba:	33 24       	eor	r3, r3
    19bc:	22 24       	eor	r2, r2
    19be:	82 8d       	ldd	r24, Z+26	; 0x1a
    19c0:	93 8d       	ldd	r25, Z+27	; 0x1b
    19c2:	a0 e0       	ldi	r26, 0x00	; 0
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	28 2a       	or	r2, r24
    19c8:	39 2a       	or	r3, r25
    19ca:	4a 2a       	or	r4, r26
    19cc:	5b 2a       	or	r5, r27
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
    19ce:	15 8a       	std	Z+21, r1	; 0x15
    19d0:	14 8a       	std	Z+20, r1	; 0x14
				ST_WORD(dir+DIR_FstClusLO, 0);
    19d2:	13 8e       	std	Z+27, r1	; 0x1b
    19d4:	12 8e       	std	Z+26, r1	; 0x1a
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
    19d6:	d7 01       	movw	r26, r14
    19d8:	5c 96       	adiw	r26, 0x1c	; 28
    19da:	1d 92       	st	X+, r1
    19dc:	1d 92       	st	X+, r1
    19de:	1d 92       	st	X+, r1
    19e0:	1c 92       	st	X, r1
    19e2:	5f 97       	sbiw	r26, 0x1f	; 31
				dj.fs->wflag = 1;
    19e4:	ad 84       	ldd	r10, Y+13	; 0x0d
    19e6:	be 84       	ldd	r11, Y+14	; 0x0e
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	f5 01       	movw	r30, r10
    19ec:	84 83       	std	Z+4, r24	; 0x04
				ps = dj.fs->winsect;			/* Remove the cluster chain */
    19ee:	d5 01       	movw	r26, r10
    19f0:	9e 96       	adiw	r26, 0x2e	; 46
    19f2:	8d 91       	ld	r24, X+
    19f4:	9d 91       	ld	r25, X+
    19f6:	0d 90       	ld	r0, X+
    19f8:	bc 91       	ld	r27, X
    19fa:	a0 2d       	mov	r26, r0
    19fc:	8a a7       	std	Y+42, r24	; 0x2a
    19fe:	9b a7       	std	Y+43, r25	; 0x2b
    1a00:	ac a7       	std	Y+44, r26	; 0x2c
    1a02:	bd a7       	std	Y+45, r27	; 0x2d
				if (cl) {
    1a04:	21 14       	cp	r2, r1
    1a06:	31 04       	cpc	r3, r1
    1a08:	41 04       	cpc	r4, r1
    1a0a:	51 04       	cpc	r5, r1
    1a0c:	09 f4       	brne	.+2      	; 0x1a10 <f_open+0x180>
    1a0e:	69 c0       	rjmp	.+210    	; 0x1ae2 <f_open+0x252>
{
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
    1a10:	b1 e0       	ldi	r27, 0x01	; 1
    1a12:	2b 16       	cp	r2, r27
    1a14:	31 04       	cpc	r3, r1
    1a16:	41 04       	cpc	r4, r1
    1a18:	51 04       	cpc	r5, r1
    1a1a:	09 f4       	brne	.+2      	; 0x1a1e <f_open+0x18e>
    1a1c:	5c c0       	rjmp	.+184    	; 0x1ad6 <f_open+0x246>
    1a1e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1a20:	97 8d       	ldd	r25, Z+31	; 0x1f
    1a22:	a0 a1       	ldd	r26, Z+32	; 0x20
    1a24:	b1 a1       	ldd	r27, Z+33	; 0x21
    1a26:	28 16       	cp	r2, r24
    1a28:	39 06       	cpc	r3, r25
    1a2a:	4a 06       	cpc	r4, r26
    1a2c:	5b 06       	cpc	r5, r27
    1a2e:	08 f0       	brcs	.+2      	; 0x1a32 <f_open+0x1a2>
    1a30:	52 c0       	rjmp	.+164    	; 0x1ad6 <f_open+0x246>
    1a32:	42 01       	movw	r8, r4
    1a34:	31 01       	movw	r6, r2
    1a36:	43 c0       	rjmp	.+134    	; 0x1abe <f_open+0x22e>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    1a38:	c5 01       	movw	r24, r10
    1a3a:	b4 01       	movw	r22, r8
    1a3c:	a3 01       	movw	r20, r6
    1a3e:	0e 94 d7 04 	call	0x9ae	; 0x9ae <get_fat>
    1a42:	6e a3       	std	Y+38, r22	; 0x26
    1a44:	7f a3       	std	Y+39, r23	; 0x27
    1a46:	88 a7       	std	Y+40, r24	; 0x28
    1a48:	99 a7       	std	Y+41, r25	; 0x29
			if (nxt == 0) break;				/* Empty cluster? */
    1a4a:	61 15       	cp	r22, r1
    1a4c:	71 05       	cpc	r23, r1
    1a4e:	81 05       	cpc	r24, r1
    1a50:	91 05       	cpc	r25, r1
    1a52:	09 f4       	brne	.+2      	; 0x1a56 <f_open+0x1c6>
    1a54:	ea c0       	rjmp	.+468    	; 0x1c2a <f_open+0x39a>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    1a56:	61 30       	cpi	r22, 0x01	; 1
    1a58:	71 05       	cpc	r23, r1
    1a5a:	81 05       	cpc	r24, r1
    1a5c:	91 05       	cpc	r25, r1
    1a5e:	d9 f1       	breq	.+118    	; 0x1ad6 <f_open+0x246>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    1a60:	6f 3f       	cpi	r22, 0xFF	; 255
    1a62:	ff ef       	ldi	r31, 0xFF	; 255
    1a64:	7f 07       	cpc	r23, r31
    1a66:	ff ef       	ldi	r31, 0xFF	; 255
    1a68:	8f 07       	cpc	r24, r31
    1a6a:	ff ef       	ldi	r31, 0xFF	; 255
    1a6c:	9f 07       	cpc	r25, r31
    1a6e:	b1 f1       	breq	.+108    	; 0x1adc <f_open+0x24c>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    1a70:	c5 01       	movw	r24, r10
    1a72:	b4 01       	movw	r22, r8
    1a74:	a3 01       	movw	r20, r6
    1a76:	00 e0       	ldi	r16, 0x00	; 0
    1a78:	10 e0       	ldi	r17, 0x00	; 0
    1a7a:	98 01       	movw	r18, r16
    1a7c:	0e 94 8c 05 	call	0xb18	; 0xb18 <put_fat>
    1a80:	9c 01       	movw	r18, r24
			if (res != FR_OK) break;
    1a82:	00 97       	sbiw	r24, 0x00	; 0
    1a84:	09 f0       	breq	.+2      	; 0x1a88 <f_open+0x1f8>
    1a86:	bf c0       	rjmp	.+382    	; 0x1c06 <f_open+0x376>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    1a88:	f5 01       	movw	r30, r10
    1a8a:	86 85       	ldd	r24, Z+14	; 0x0e
    1a8c:	97 85       	ldd	r25, Z+15	; 0x0f
    1a8e:	a0 89       	ldd	r26, Z+16	; 0x10
    1a90:	b1 89       	ldd	r27, Z+17	; 0x11
    1a92:	8f 3f       	cpi	r24, 0xFF	; 255
    1a94:	ff ef       	ldi	r31, 0xFF	; 255
    1a96:	9f 07       	cpc	r25, r31
    1a98:	ff ef       	ldi	r31, 0xFF	; 255
    1a9a:	af 07       	cpc	r26, r31
    1a9c:	ff ef       	ldi	r31, 0xFF	; 255
    1a9e:	bf 07       	cpc	r27, r31
    1aa0:	51 f0       	breq	.+20     	; 0x1ab6 <f_open+0x226>
				fs->free_clust++;
    1aa2:	01 96       	adiw	r24, 0x01	; 1
    1aa4:	a1 1d       	adc	r26, r1
    1aa6:	b1 1d       	adc	r27, r1
    1aa8:	f5 01       	movw	r30, r10
    1aaa:	86 87       	std	Z+14, r24	; 0x0e
    1aac:	97 87       	std	Z+15, r25	; 0x0f
    1aae:	a0 8b       	std	Z+16, r26	; 0x10
    1ab0:	b1 8b       	std	Z+17, r27	; 0x11
				fs->fsi_flag = 1;
    1ab2:	21 e0       	ldi	r18, 0x01	; 1
    1ab4:	25 83       	std	Z+5, r18	; 0x05
{
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
    1ab6:	6e a0       	ldd	r6, Y+38	; 0x26
    1ab8:	7f a0       	ldd	r7, Y+39	; 0x27
    1aba:	88 a4       	ldd	r8, Y+40	; 0x28
    1abc:	99 a4       	ldd	r9, Y+41	; 0x29
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
    1abe:	f5 01       	movw	r30, r10
    1ac0:	86 8d       	ldd	r24, Z+30	; 0x1e
    1ac2:	97 8d       	ldd	r25, Z+31	; 0x1f
    1ac4:	a0 a1       	ldd	r26, Z+32	; 0x20
    1ac6:	b1 a1       	ldd	r27, Z+33	; 0x21
    1ac8:	68 16       	cp	r6, r24
    1aca:	79 06       	cpc	r7, r25
    1acc:	8a 06       	cpc	r8, r26
    1ace:	9b 06       	cpc	r9, r27
    1ad0:	08 f4       	brcc	.+2      	; 0x1ad4 <f_open+0x244>
    1ad2:	b2 cf       	rjmp	.-156    	; 0x1a38 <f_open+0x1a8>
    1ad4:	aa c0       	rjmp	.+340    	; 0x1c2a <f_open+0x39a>
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    1ad6:	22 e0       	ldi	r18, 0x02	; 2
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	95 c0       	rjmp	.+298    	; 0x1c06 <f_open+0x376>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    1adc:	21 e0       	ldi	r18, 0x01	; 1
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	92 c0       	rjmp	.+292    	; 0x1c06 <f_open+0x376>
				if (cl) {
					res = remove_chain(dj.fs, cl);
					if (res) LEAVE_FF(dj.fs, res);
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
				}
				res = move_window(dj.fs, ps);
    1ae2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ae4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ae6:	4a a5       	ldd	r20, Y+42	; 0x2a
    1ae8:	5b a5       	ldd	r21, Y+43	; 0x2b
    1aea:	6c a5       	ldd	r22, Y+44	; 0x2c
    1aec:	7d a5       	ldd	r23, Y+45	; 0x2d
    1aee:	0e 94 27 04 	call	0x84e	; 0x84e <move_window>
    1af2:	9c 01       	movw	r18, r24
				if (res != FR_OK) LEAVE_FF(dj.fs, res);
    1af4:	00 97       	sbiw	r24, 0x00	; 0
    1af6:	09 f0       	breq	.+2      	; 0x1afa <f_open+0x26a>
    1af8:	86 c0       	rjmp	.+268    	; 0x1c06 <f_open+0x376>
			}
		}
		if (mode & FA_CREATE_ALWAYS) {
    1afa:	fd a1       	ldd	r31, Y+37	; 0x25
    1afc:	f3 ff       	sbrs	r31, 3
    1afe:	26 c0       	rjmp	.+76     	; 0x1b4c <f_open+0x2bc>
			dir[DIR_Attr] = 0;					/* Reset attribute */
    1b00:	d7 01       	movw	r26, r14
    1b02:	1b 96       	adiw	r26, 0x0b	; 11
    1b04:	1c 92       	st	X, r1
			ps = get_fattime();
    1b06:	0e 94 16 01 	call	0x22c	; 0x22c <get_fattime>
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
    1b0a:	f7 01       	movw	r30, r14
    1b0c:	66 87       	std	Z+14, r22	; 0x0e
    1b0e:	77 87       	std	Z+15, r23	; 0x0f
    1b10:	80 8b       	std	Z+16, r24	; 0x10
    1b12:	91 8b       	std	Z+17, r25	; 0x11
			dj.fs->wflag = 1;
    1b14:	ed 85       	ldd	r30, Y+13	; 0x0d
    1b16:	fe 85       	ldd	r31, Y+14	; 0x0e
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	84 83       	std	Z+4, r24	; 0x04
			mode |= FA__WRITTEN;				/* Set file changed flag */
    1b1c:	fd a1       	ldd	r31, Y+37	; 0x25
    1b1e:	f0 62       	ori	r31, 0x20	; 32
    1b20:	fd a3       	std	Y+37, r31	; 0x25
    1b22:	14 c0       	rjmp	.+40     	; 0x1b4c <f_open+0x2bc>
		}
	}
	/* Open an existing file */
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
    1b24:	21 15       	cp	r18, r1
    1b26:	31 05       	cpc	r19, r1
    1b28:	09 f0       	breq	.+2      	; 0x1b2c <f_open+0x29c>
    1b2a:	6d c0       	rjmp	.+218    	; 0x1c06 <f_open+0x376>
		dir = dj.dir;
    1b2c:	ef 8c       	ldd	r14, Y+31	; 0x1f
    1b2e:	f8 a0       	ldd	r15, Y+32	; 0x20
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    1b30:	e1 14       	cp	r14, r1
    1b32:	f1 04       	cpc	r15, r1
    1b34:	09 f4       	brne	.+2      	; 0x1b38 <f_open+0x2a8>
    1b36:	62 c0       	rjmp	.+196    	; 0x1bfc <f_open+0x36c>
    1b38:	d7 01       	movw	r26, r14
    1b3a:	1b 96       	adiw	r26, 0x0b	; 11
    1b3c:	2c 91       	ld	r18, X
    1b3e:	1b 97       	sbiw	r26, 0x0b	; 11
    1b40:	24 fd       	sbrc	r18, 4
    1b42:	5c c0       	rjmp	.+184    	; 0x1bfc <f_open+0x36c>
			LEAVE_FF(dj.fs, FR_NO_FILE);
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    1b44:	e1 ff       	sbrs	r30, 1
    1b46:	02 c0       	rjmp	.+4      	; 0x1b4c <f_open+0x2bc>
    1b48:	20 fd       	sbrc	r18, 0
    1b4a:	5b c0       	rjmp	.+182    	; 0x1c02 <f_open+0x372>
			LEAVE_FF(dj.fs, FR_DENIED);
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    1b4c:	6d 85       	ldd	r22, Y+13	; 0x0d
    1b4e:	7e 85       	ldd	r23, Y+14	; 0x0e
    1b50:	fb 01       	movw	r30, r22
    1b52:	26 a5       	ldd	r18, Z+46	; 0x2e
    1b54:	37 a5       	ldd	r19, Z+47	; 0x2f
    1b56:	40 a9       	ldd	r20, Z+48	; 0x30
    1b58:	51 a9       	ldd	r21, Z+49	; 0x31
    1b5a:	d6 01       	movw	r26, r12
    1b5c:	5a 96       	adiw	r26, 0x1a	; 26
    1b5e:	2d 93       	st	X+, r18
    1b60:	3d 93       	st	X+, r19
    1b62:	4d 93       	st	X+, r20
    1b64:	5c 93       	st	X, r21
    1b66:	5d 97       	sbiw	r26, 0x1d	; 29
	fp->dir_ptr = dj.dir;
    1b68:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b6a:	98 a1       	ldd	r25, Y+32	; 0x20
    1b6c:	5f 96       	adiw	r26, 0x1f	; 31
    1b6e:	9c 93       	st	X, r25
    1b70:	8e 93       	st	-X, r24
    1b72:	5e 97       	sbiw	r26, 0x1e	; 30
#endif
	fp->flag = mode;					/* File access mode */
    1b74:	ed a1       	ldd	r30, Y+37	; 0x25
    1b76:	14 96       	adiw	r26, 0x04	; 4
    1b78:	ec 93       	st	X, r30
	fp->org_clust =						/* File start cluster */
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    1b7a:	d7 01       	movw	r26, r14
    1b7c:	54 96       	adiw	r26, 0x14	; 20
    1b7e:	8d 91       	ld	r24, X+
    1b80:	9c 91       	ld	r25, X
    1b82:	55 97       	sbiw	r26, 0x15	; 21
    1b84:	a0 e0       	ldi	r26, 0x00	; 0
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	dc 01       	movw	r26, r24
    1b8a:	99 27       	eor	r25, r25
    1b8c:	88 27       	eor	r24, r24
    1b8e:	f7 01       	movw	r30, r14
    1b90:	22 8d       	ldd	r18, Z+26	; 0x1a
    1b92:	33 8d       	ldd	r19, Z+27	; 0x1b
    1b94:	40 e0       	ldi	r20, 0x00	; 0
    1b96:	50 e0       	ldi	r21, 0x00	; 0
    1b98:	82 2b       	or	r24, r18
    1b9a:	93 2b       	or	r25, r19
    1b9c:	a4 2b       	or	r26, r20
    1b9e:	b5 2b       	or	r27, r21
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
	fp->dir_ptr = dj.dir;
#endif
	fp->flag = mode;					/* File access mode */
	fp->org_clust =						/* File start cluster */
    1ba0:	f6 01       	movw	r30, r12
    1ba2:	86 87       	std	Z+14, r24	; 0x0e
    1ba4:	97 87       	std	Z+15, r25	; 0x0f
    1ba6:	a0 8b       	std	Z+16, r26	; 0x10
    1ba8:	b1 8b       	std	Z+17, r27	; 0x11
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    1baa:	f7 01       	movw	r30, r14
    1bac:	84 8d       	ldd	r24, Z+28	; 0x1c
    1bae:	95 8d       	ldd	r25, Z+29	; 0x1d
    1bb0:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1bb2:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1bb4:	f6 01       	movw	r30, r12
    1bb6:	82 87       	std	Z+10, r24	; 0x0a
    1bb8:	93 87       	std	Z+11, r25	; 0x0b
    1bba:	a4 87       	std	Z+12, r26	; 0x0c
    1bbc:	b5 87       	std	Z+13, r27	; 0x0d
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
    1bbe:	d6 01       	movw	r26, r12
    1bc0:	16 96       	adiw	r26, 0x06	; 6
    1bc2:	1d 92       	st	X+, r1
    1bc4:	1d 92       	st	X+, r1
    1bc6:	1d 92       	st	X+, r1
    1bc8:	1c 92       	st	X, r1
    1bca:	19 97       	sbiw	r26, 0x09	; 9
    1bcc:	8f ef       	ldi	r24, 0xFF	; 255
    1bce:	15 96       	adiw	r26, 0x05	; 5
    1bd0:	8c 93       	st	X, r24
	fp->dsect = 0;
    1bd2:	16 8a       	std	Z+22, r1	; 0x16
    1bd4:	17 8a       	std	Z+23, r1	; 0x17
    1bd6:	10 8e       	std	Z+24, r1	; 0x18
    1bd8:	11 8e       	std	Z+25, r1	; 0x19
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
    1bda:	71 83       	std	Z+1, r23	; 0x01
    1bdc:	60 83       	st	Z, r22
    1bde:	db 01       	movw	r26, r22
    1be0:	16 96       	adiw	r26, 0x06	; 6
    1be2:	8d 91       	ld	r24, X+
    1be4:	9c 91       	ld	r25, X
    1be6:	17 97       	sbiw	r26, 0x07	; 7
    1be8:	93 83       	std	Z+3, r25	; 0x03
    1bea:	82 83       	std	Z+2, r24	; 0x02

	LEAVE_FF(dj.fs, FR_OK);
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	0a c0       	rjmp	.+20     	; 0x1c06 <f_open+0x376>
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    1bf2:	9c 01       	movw	r18, r24
    1bf4:	08 c0       	rjmp	.+16     	; 0x1c06 <f_open+0x376>
			mode |= FA_CREATE_ALWAYS;
			dir = dj.dir;			/* Created entry (SFN entry) */
		}
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
				LEAVE_FF(dj.fs, FR_EXIST);
    1bf6:	28 e0       	ldi	r18, 0x08	; 8
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	05 c0       	rjmp	.+10     	; 0x1c06 <f_open+0x376>
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
		dir = dj.dir;
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
			LEAVE_FF(dj.fs, FR_NO_FILE);
    1bfc:	24 e0       	ldi	r18, 0x04	; 4
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	02 c0       	rjmp	.+4      	; 0x1c06 <f_open+0x376>
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
			LEAVE_FF(dj.fs, FR_DENIED);
    1c02:	27 e0       	ldi	r18, 0x07	; 7
    1c04:	30 e0       	ldi	r19, 0x00	; 0
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
	fp->dsect = 0;
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */

	LEAVE_FF(dj.fs, FR_OK);
}
    1c06:	c9 01       	movw	r24, r18
    1c08:	ad 96       	adiw	r28, 0x2d	; 45
    1c0a:	e2 e1       	ldi	r30, 0x12	; 18
    1c0c:	0c 94 e7 2d 	jmp	0x5bce	; 0x5bce <__epilogue_restores__>
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    1c10:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1c12:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1c14:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1c16:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1c18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c1c:	0e 94 27 04 	call	0x84e	; 0x84e <move_window>
    1c20:	9c 01       	movw	r18, r24
		if (res == FR_OK) {
    1c22:	00 97       	sbiw	r24, 0x00	; 0
    1c24:	09 f4       	brne	.+2      	; 0x1c28 <f_open+0x398>
    1c26:	93 ce       	rjmp	.-730    	; 0x194e <f_open+0xbe>
    1c28:	ee cf       	rjmp	.-36     	; 0x1c06 <f_open+0x376>
				dj.fs->wflag = 1;
				ps = dj.fs->winsect;			/* Remove the cluster chain */
				if (cl) {
					res = remove_chain(dj.fs, cl);
					if (res) LEAVE_FF(dj.fs, res);
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    1c2a:	ed 85       	ldd	r30, Y+13	; 0x0d
    1c2c:	fe 85       	ldd	r31, Y+14	; 0x0e
    1c2e:	08 94       	sec
    1c30:	21 08       	sbc	r2, r1
    1c32:	31 08       	sbc	r3, r1
    1c34:	41 08       	sbc	r4, r1
    1c36:	51 08       	sbc	r5, r1
    1c38:	22 86       	std	Z+10, r2	; 0x0a
    1c3a:	33 86       	std	Z+11, r3	; 0x0b
    1c3c:	44 86       	std	Z+12, r4	; 0x0c
    1c3e:	55 86       	std	Z+13, r5	; 0x0d
    1c40:	50 cf       	rjmp	.-352    	; 0x1ae2 <f_open+0x252>

00001c42 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    1c42:	a0 e0       	ldi	r26, 0x00	; 0
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	e7 e2       	ldi	r30, 0x27	; 39
    1c48:	fe e0       	ldi	r31, 0x0E	; 14
    1c4a:	0c 94 cb 2d 	jmp	0x5b96	; 0x5b96 <__prologue_saves__>
    1c4e:	ec 01       	movw	r28, r24
    1c50:	06 2f       	mov	r16, r22
    1c52:	c7 2e       	mov	r12, r23
    1c54:	3a 01       	movw	r6, r20
    1c56:	19 01       	movw	r2, r18
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;


	*br = 0;	/* Initialize bytes read */
    1c58:	f9 01       	movw	r30, r18
    1c5a:	11 82       	std	Z+1, r1	; 0x01
    1c5c:	10 82       	st	Z, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    1c5e:	6a 81       	ldd	r22, Y+2	; 0x02
    1c60:	7b 81       	ldd	r23, Y+3	; 0x03
    1c62:	88 81       	ld	r24, Y
    1c64:	99 81       	ldd	r25, Y+1	; 0x01
    1c66:	0e 94 0d 04 	call	0x81a	; 0x81a <validate>
    1c6a:	7c 01       	movw	r14, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    1c6c:	00 97       	sbiw	r24, 0x00	; 0
    1c6e:	09 f0       	breq	.+2      	; 0x1c72 <f_read+0x30>
    1c70:	10 c1       	rjmp	.+544    	; 0x1e92 <f_read+0x250>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    1c72:	8c 81       	ldd	r24, Y+4	; 0x04
    1c74:	87 fd       	sbrc	r24, 7
    1c76:	06 c1       	rjmp	.+524    	; 0x1e84 <f_read+0x242>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
    1c78:	80 ff       	sbrs	r24, 0
    1c7a:	08 c1       	rjmp	.+528    	; 0x1e8c <f_read+0x24a>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    1c7c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c7e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c80:	ac 85       	ldd	r26, Y+12	; 0x0c
    1c82:	bd 85       	ldd	r27, Y+13	; 0x0d
    1c84:	2e 81       	ldd	r18, Y+6	; 0x06
    1c86:	3f 81       	ldd	r19, Y+7	; 0x07
    1c88:	48 85       	ldd	r20, Y+8	; 0x08
    1c8a:	59 85       	ldd	r21, Y+9	; 0x09
    1c8c:	82 1b       	sub	r24, r18
    1c8e:	93 0b       	sbc	r25, r19
    1c90:	a4 0b       	sbc	r26, r20
    1c92:	b5 0b       	sbc	r27, r21
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
    1c94:	93 01       	movw	r18, r6
    1c96:	40 e0       	ldi	r20, 0x00	; 0
    1c98:	50 e0       	ldi	r21, 0x00	; 0
    1c9a:	82 17       	cp	r24, r18
    1c9c:	93 07       	cpc	r25, r19
    1c9e:	a4 07       	cpc	r26, r20
    1ca0:	b5 07       	cpc	r27, r21
    1ca2:	08 f4       	brcc	.+2      	; 0x1ca6 <f_read+0x64>
    1ca4:	3c 01       	movw	r6, r24
)
{
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;
    1ca6:	40 2e       	mov	r4, r16
    1ca8:	5c 2c       	mov	r5, r12
    1caa:	e7 c0       	rjmp	.+462    	; 0x1e7a <f_read+0x238>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    1cac:	2e 81       	ldd	r18, Y+6	; 0x06
    1cae:	3f 81       	ldd	r19, Y+7	; 0x07
    1cb0:	48 85       	ldd	r20, Y+8	; 0x08
    1cb2:	59 85       	ldd	r21, Y+9	; 0x09
    1cb4:	da 01       	movw	r26, r20
    1cb6:	c9 01       	movw	r24, r18
    1cb8:	91 70       	andi	r25, 0x01	; 1
    1cba:	a0 70       	andi	r26, 0x00	; 0
    1cbc:	b0 70       	andi	r27, 0x00	; 0
    1cbe:	00 97       	sbiw	r24, 0x00	; 0
    1cc0:	a1 05       	cpc	r26, r1
    1cc2:	b1 05       	cpc	r27, r1
    1cc4:	09 f0       	breq	.+2      	; 0x1cc8 <f_read+0x86>
    1cc6:	92 c0       	rjmp	.+292    	; 0x1dec <f_read+0x1aa>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    1cc8:	88 81       	ld	r24, Y
    1cca:	99 81       	ldd	r25, Y+1	; 0x01
    1ccc:	7d 81       	ldd	r23, Y+5	; 0x05
    1cce:	fc 01       	movw	r30, r24
    1cd0:	62 81       	ldd	r22, Z+2	; 0x02
    1cd2:	76 17       	cp	r23, r22
    1cd4:	18 f1       	brcs	.+70     	; 0x1d1c <f_read+0xda>
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
    1cd6:	21 15       	cp	r18, r1
    1cd8:	31 05       	cpc	r19, r1
    1cda:	41 05       	cpc	r20, r1
    1cdc:	51 05       	cpc	r21, r1
    1cde:	29 f4       	brne	.+10     	; 0x1cea <f_read+0xa8>
    1ce0:	6e 85       	ldd	r22, Y+14	; 0x0e
    1ce2:	7f 85       	ldd	r23, Y+15	; 0x0f
    1ce4:	88 89       	ldd	r24, Y+16	; 0x10
    1ce6:	99 89       	ldd	r25, Y+17	; 0x11
    1ce8:	06 c0       	rjmp	.+12     	; 0x1cf6 <f_read+0xb4>
    1cea:	4a 89       	ldd	r20, Y+18	; 0x12
    1cec:	5b 89       	ldd	r21, Y+19	; 0x13
    1cee:	6c 89       	ldd	r22, Y+20	; 0x14
    1cf0:	7d 89       	ldd	r23, Y+21	; 0x15
    1cf2:	0e 94 d7 04 	call	0x9ae	; 0x9ae <get_fat>
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
    1cf6:	62 30       	cpi	r22, 0x02	; 2
    1cf8:	71 05       	cpc	r23, r1
    1cfa:	81 05       	cpc	r24, r1
    1cfc:	91 05       	cpc	r25, r1
    1cfe:	e0 f0       	brcs	.+56     	; 0x1d38 <f_read+0xf6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    1d00:	6f 3f       	cpi	r22, 0xFF	; 255
    1d02:	ff ef       	ldi	r31, 0xFF	; 255
    1d04:	7f 07       	cpc	r23, r31
    1d06:	ff ef       	ldi	r31, 0xFF	; 255
    1d08:	8f 07       	cpc	r24, r31
    1d0a:	ff ef       	ldi	r31, 0xFF	; 255
    1d0c:	9f 07       	cpc	r25, r31
    1d0e:	09 f4       	brne	.+2      	; 0x1d12 <f_read+0xd0>
    1d10:	7b c0       	rjmp	.+246    	; 0x1e08 <f_read+0x1c6>
				fp->curr_clust = clst;				/* Update current cluster */
    1d12:	6a 8b       	std	Y+18, r22	; 0x12
    1d14:	7b 8b       	std	Y+19, r23	; 0x13
    1d16:	8c 8b       	std	Y+20, r24	; 0x14
    1d18:	9d 8b       	std	Y+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector offset in the cluster */
    1d1a:	1d 82       	std	Y+5, r1	; 0x05
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    1d1c:	08 81       	ld	r16, Y
    1d1e:	19 81       	ldd	r17, Y+1	; 0x01
    1d20:	4a 89       	ldd	r20, Y+18	; 0x12
    1d22:	5b 89       	ldd	r21, Y+19	; 0x13
    1d24:	6c 89       	ldd	r22, Y+20	; 0x14
    1d26:	7d 89       	ldd	r23, Y+21	; 0x15
    1d28:	c8 01       	movw	r24, r16
    1d2a:	0e 94 24 07 	call	0xe48	; 0xe48 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    1d2e:	61 15       	cp	r22, r1
    1d30:	71 05       	cpc	r23, r1
    1d32:	81 05       	cpc	r24, r1
    1d34:	91 05       	cpc	r25, r1
    1d36:	21 f4       	brne	.+8      	; 0x1d40 <f_read+0xfe>
    1d38:	8c 81       	ldd	r24, Y+4	; 0x04
    1d3a:	80 68       	ori	r24, 0x80	; 128
    1d3c:	8c 83       	std	Y+4, r24	; 0x04
    1d3e:	a2 c0       	rjmp	.+324    	; 0x1e84 <f_read+0x242>
			sect += fp->csect;
    1d40:	3d 81       	ldd	r19, Y+5	; 0x05
    1d42:	4b 01       	movw	r8, r22
    1d44:	5c 01       	movw	r10, r24
    1d46:	83 0e       	add	r8, r19
    1d48:	91 1c       	adc	r9, r1
    1d4a:	a1 1c       	adc	r10, r1
    1d4c:	b1 1c       	adc	r11, r1
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
    1d4e:	63 01       	movw	r12, r6
    1d50:	cd 2c       	mov	r12, r13
    1d52:	dd 24       	eor	r13, r13
    1d54:	c6 94       	lsr	r12
			if (cc) {								/* Read maximum contiguous sectors directly */
    1d56:	c1 14       	cp	r12, r1
    1d58:	d1 04       	cpc	r13, r1
    1d5a:	09 f4       	brne	.+2      	; 0x1d5e <f_read+0x11c>
    1d5c:	41 c0       	rjmp	.+130    	; 0x1de0 <f_read+0x19e>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    1d5e:	f8 01       	movw	r30, r16
    1d60:	22 81       	ldd	r18, Z+2	; 0x02
    1d62:	83 2f       	mov	r24, r19
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	a6 01       	movw	r20, r12
    1d68:	48 0f       	add	r20, r24
    1d6a:	59 1f       	adc	r21, r25
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	24 17       	cp	r18, r20
    1d70:	35 07       	cpc	r19, r21
    1d72:	18 f4       	brcc	.+6      	; 0x1d7a <f_read+0x138>
					cc = fp->fs->csize - fp->csect;
    1d74:	69 01       	movw	r12, r18
    1d76:	c8 1a       	sub	r12, r24
    1d78:	d9 0a       	sbc	r13, r25
				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
    1d7a:	f8 01       	movw	r30, r16
    1d7c:	81 81       	ldd	r24, Z+1	; 0x01
    1d7e:	b2 01       	movw	r22, r4
    1d80:	a5 01       	movw	r20, r10
    1d82:	94 01       	movw	r18, r8
    1d84:	0c 2d       	mov	r16, r12
    1d86:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <disk_read>
    1d8a:	00 97       	sbiw	r24, 0x00	; 0
    1d8c:	e9 f5       	brne	.+122    	; 0x1e08 <f_read+0x1c6>
					ABORT(fp->fs, FR_DISK_ERR);
#if !_FS_READONLY && _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)		/* Replace one of the read sectors with cached data if it contains a dirty sector */
    1d8e:	e8 81       	ld	r30, Y
    1d90:	f9 81       	ldd	r31, Y+1	; 0x01
    1d92:	84 81       	ldd	r24, Z+4	; 0x04
    1d94:	88 23       	and	r24, r24
    1d96:	e1 f0       	breq	.+56     	; 0x1dd0 <f_read+0x18e>
    1d98:	86 a5       	ldd	r24, Z+46	; 0x2e
    1d9a:	97 a5       	ldd	r25, Z+47	; 0x2f
    1d9c:	a0 a9       	ldd	r26, Z+48	; 0x30
    1d9e:	b1 a9       	ldd	r27, Z+49	; 0x31
    1da0:	88 19       	sub	r24, r8
    1da2:	99 09       	sbc	r25, r9
    1da4:	aa 09       	sbc	r26, r10
    1da6:	bb 09       	sbc	r27, r11
    1da8:	96 01       	movw	r18, r12
    1daa:	40 e0       	ldi	r20, 0x00	; 0
    1dac:	50 e0       	ldi	r21, 0x00	; 0
    1dae:	82 17       	cp	r24, r18
    1db0:	93 07       	cpc	r25, r19
    1db2:	a4 07       	cpc	r26, r20
    1db4:	b5 07       	cpc	r27, r21
    1db6:	60 f4       	brcc	.+24     	; 0x1dd0 <f_read+0x18e>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
    1db8:	98 2f       	mov	r25, r24
    1dba:	88 27       	eor	r24, r24
    1dbc:	99 0f       	add	r25, r25
    1dbe:	bf 01       	movw	r22, r30
    1dc0:	6e 5c       	subi	r22, 0xCE	; 206
    1dc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc4:	84 0d       	add	r24, r4
    1dc6:	95 1d       	adc	r25, r5
    1dc8:	40 e0       	ldi	r20, 0x00	; 0
    1dca:	52 e0       	ldi	r21, 0x02	; 2
    1dcc:	0e 94 fd 03 	call	0x7fa	; 0x7fa <mem_cpy>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    1dd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd2:	8c 0d       	add	r24, r12
    1dd4:	8d 83       	std	Y+5, r24	; 0x05
				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    1dd6:	86 01       	movw	r16, r12
    1dd8:	10 2f       	mov	r17, r16
    1dda:	00 27       	eor	r16, r16
    1ddc:	11 0f       	add	r17, r17
				continue;
    1dde:	33 c0       	rjmp	.+102    	; 0x1e46 <f_read+0x204>
			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    1de0:	8e 8a       	std	Y+22, r8	; 0x16
    1de2:	9f 8a       	std	Y+23, r9	; 0x17
    1de4:	a8 8e       	std	Y+24, r10	; 0x18
    1de6:	b9 8e       	std	Y+25, r11	; 0x19
			fp->csect++;							/* Next sector address in the cluster */
    1de8:	3f 5f       	subi	r19, 0xFF	; 255
    1dea:	3d 83       	std	Y+5, r19	; 0x05
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    1dec:	8e 80       	ldd	r8, Y+6	; 0x06
    1dee:	9f 80       	ldd	r9, Y+7	; 0x07
    1df0:	a8 84       	ldd	r10, Y+8	; 0x08
    1df2:	b9 84       	ldd	r11, Y+9	; 0x09
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
    1df4:	4e 89       	ldd	r20, Y+22	; 0x16
    1df6:	5f 89       	ldd	r21, Y+23	; 0x17
    1df8:	68 8d       	ldd	r22, Y+24	; 0x18
    1dfa:	79 8d       	ldd	r23, Y+25	; 0x19
    1dfc:	88 81       	ld	r24, Y
    1dfe:	99 81       	ldd	r25, Y+1	; 0x01
    1e00:	0e 94 27 04 	call	0x84e	; 0x84e <move_window>
    1e04:	00 97       	sbiw	r24, 0x00	; 0
    1e06:	39 f0       	breq	.+14     	; 0x1e16 <f_read+0x1d4>
			ABORT(fp->fs, FR_DISK_ERR);
    1e08:	8c 81       	ldd	r24, Y+4	; 0x04
    1e0a:	80 68       	ori	r24, 0x80	; 128
    1e0c:	8c 83       	std	Y+4, r24	; 0x04
    1e0e:	61 e0       	ldi	r22, 0x01	; 1
    1e10:	e6 2e       	mov	r14, r22
    1e12:	f1 2c       	mov	r15, r1
    1e14:	3e c0       	rjmp	.+124    	; 0x1e92 <f_read+0x250>
			}
#endif
			fp->dsect = sect;
			fp->csect++;							/* Next sector address in the cluster */
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    1e16:	c4 01       	movw	r24, r8
    1e18:	91 70       	andi	r25, 0x01	; 1
    1e1a:	20 e0       	ldi	r18, 0x00	; 0
    1e1c:	32 e0       	ldi	r19, 0x02	; 2
    1e1e:	28 1b       	sub	r18, r24
    1e20:	39 0b       	sbc	r19, r25
    1e22:	83 01       	movw	r16, r6
    1e24:	26 15       	cp	r18, r6
    1e26:	37 05       	cpc	r19, r7
    1e28:	08 f4       	brcc	.+2      	; 0x1e2c <f_read+0x1ea>
    1e2a:	89 01       	movw	r16, r18
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    1e2c:	68 81       	ld	r22, Y
    1e2e:	79 81       	ldd	r23, Y+1	; 0x01
    1e30:	6e 5c       	subi	r22, 0xCE	; 206
    1e32:	7f 4f       	sbci	r23, 0xFF	; 255
    1e34:	8e 81       	ldd	r24, Y+6	; 0x06
    1e36:	9f 81       	ldd	r25, Y+7	; 0x07
    1e38:	91 70       	andi	r25, 0x01	; 1
    1e3a:	68 0f       	add	r22, r24
    1e3c:	79 1f       	adc	r23, r25
    1e3e:	c2 01       	movw	r24, r4
    1e40:	a8 01       	movw	r20, r16
    1e42:	0e 94 fd 03 	call	0x7fa	; 0x7fa <mem_cpy>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    1e46:	40 0e       	add	r4, r16
    1e48:	51 1e       	adc	r5, r17
    1e4a:	98 01       	movw	r18, r16
    1e4c:	40 e0       	ldi	r20, 0x00	; 0
    1e4e:	50 e0       	ldi	r21, 0x00	; 0
    1e50:	8e 81       	ldd	r24, Y+6	; 0x06
    1e52:	9f 81       	ldd	r25, Y+7	; 0x07
    1e54:	a8 85       	ldd	r26, Y+8	; 0x08
    1e56:	b9 85       	ldd	r27, Y+9	; 0x09
    1e58:	82 0f       	add	r24, r18
    1e5a:	93 1f       	adc	r25, r19
    1e5c:	a4 1f       	adc	r26, r20
    1e5e:	b5 1f       	adc	r27, r21
    1e60:	8e 83       	std	Y+6, r24	; 0x06
    1e62:	9f 83       	std	Y+7, r25	; 0x07
    1e64:	a8 87       	std	Y+8, r26	; 0x08
    1e66:	b9 87       	std	Y+9, r27	; 0x09
    1e68:	f1 01       	movw	r30, r2
    1e6a:	80 81       	ld	r24, Z
    1e6c:	91 81       	ldd	r25, Z+1	; 0x01
    1e6e:	80 0f       	add	r24, r16
    1e70:	91 1f       	adc	r25, r17
    1e72:	91 83       	std	Z+1, r25	; 0x01
    1e74:	80 83       	st	Z, r24
    1e76:	60 1a       	sub	r6, r16
    1e78:	71 0a       	sbc	r7, r17
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
    1e7a:	61 14       	cp	r6, r1
    1e7c:	71 04       	cpc	r7, r1
    1e7e:	09 f0       	breq	.+2      	; 0x1e82 <f_read+0x240>
    1e80:	15 cf       	rjmp	.-470    	; 0x1cac <f_read+0x6a>
    1e82:	07 c0       	rjmp	.+14     	; 0x1e92 <f_read+0x250>
	*br = 0;	/* Initialize bytes read */

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)						/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    1e84:	52 e0       	ldi	r21, 0x02	; 2
    1e86:	e5 2e       	mov	r14, r21
    1e88:	f1 2c       	mov	r15, r1
    1e8a:	03 c0       	rjmp	.+6      	; 0x1e92 <f_read+0x250>
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    1e8c:	47 e0       	ldi	r20, 0x07	; 7
    1e8e:	e4 2e       	mov	r14, r20
    1e90:	f1 2c       	mov	r15, r1
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    1e92:	c7 01       	movw	r24, r14
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
    1e98:	e2 e1       	ldi	r30, 0x12	; 18
    1e9a:	0c 94 e7 2d 	jmp	0x5bce	; 0x5bce <__epilogue_restores__>

00001e9e <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    1e9e:	a0 e0       	ldi	r26, 0x00	; 0
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	e5 e5       	ldi	r30, 0x55	; 85
    1ea4:	ff e0       	ldi	r31, 0x0F	; 15
    1ea6:	0c 94 cb 2d 	jmp	0x5b96	; 0x5b96 <__prologue_saves__>
    1eaa:	ec 01       	movw	r28, r24
    1eac:	06 2f       	mov	r16, r22
    1eae:	c7 2e       	mov	r12, r23
    1eb0:	3a 01       	movw	r6, r20
    1eb2:	19 01       	movw	r2, r18
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;


	*bw = 0;	/* Initialize bytes written */
    1eb4:	f9 01       	movw	r30, r18
    1eb6:	11 82       	std	Z+1, r1	; 0x01
    1eb8:	10 82       	st	Z, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    1eba:	6a 81       	ldd	r22, Y+2	; 0x02
    1ebc:	7b 81       	ldd	r23, Y+3	; 0x03
    1ebe:	88 81       	ld	r24, Y
    1ec0:	99 81       	ldd	r25, Y+1	; 0x01
    1ec2:	0e 94 0d 04 	call	0x81a	; 0x81a <validate>
    1ec6:	7c 01       	movw	r14, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    1ec8:	00 97       	sbiw	r24, 0x00	; 0
    1eca:	09 f0       	breq	.+2      	; 0x1ece <f_write+0x30>
    1ecc:	71 c1       	rjmp	.+738    	; 0x21b0 <f_write+0x312>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    1ece:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed0:	87 fd       	sbrc	r24, 7
    1ed2:	67 c1       	rjmp	.+718    	; 0x21a2 <f_write+0x304>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
    1ed4:	81 ff       	sbrs	r24, 1
    1ed6:	69 c1       	rjmp	.+722    	; 0x21aa <f_write+0x30c>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
    1ed8:	2a 85       	ldd	r18, Y+10	; 0x0a
    1eda:	3b 85       	ldd	r19, Y+11	; 0x0b
    1edc:	4c 85       	ldd	r20, Y+12	; 0x0c
    1ede:	5d 85       	ldd	r21, Y+13	; 0x0d
    1ee0:	c3 01       	movw	r24, r6
    1ee2:	a0 e0       	ldi	r26, 0x00	; 0
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	82 0f       	add	r24, r18
    1ee8:	93 1f       	adc	r25, r19
    1eea:	a4 1f       	adc	r26, r20
    1eec:	b5 1f       	adc	r27, r21
    1eee:	82 17       	cp	r24, r18
    1ef0:	93 07       	cpc	r25, r19
    1ef2:	a4 07       	cpc	r26, r20
    1ef4:	b5 07       	cpc	r27, r21
    1ef6:	10 f4       	brcc	.+4      	; 0x1efc <f_write+0x5e>
    1ef8:	66 24       	eor	r6, r6
    1efa:	77 24       	eor	r7, r7
)
{
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    1efc:	40 2e       	mov	r4, r16
    1efe:	5c 2c       	mov	r5, r12
    1f00:	37 c1       	rjmp	.+622    	; 0x2170 <f_write+0x2d2>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    1f02:	2e 81       	ldd	r18, Y+6	; 0x06
    1f04:	3f 81       	ldd	r19, Y+7	; 0x07
    1f06:	48 85       	ldd	r20, Y+8	; 0x08
    1f08:	59 85       	ldd	r21, Y+9	; 0x09
    1f0a:	da 01       	movw	r26, r20
    1f0c:	c9 01       	movw	r24, r18
    1f0e:	91 70       	andi	r25, 0x01	; 1
    1f10:	a0 70       	andi	r26, 0x00	; 0
    1f12:	b0 70       	andi	r27, 0x00	; 0
    1f14:	00 97       	sbiw	r24, 0x00	; 0
    1f16:	a1 05       	cpc	r26, r1
    1f18:	b1 05       	cpc	r27, r1
    1f1a:	09 f0       	breq	.+2      	; 0x1f1e <f_write+0x80>
    1f1c:	de c0       	rjmp	.+444    	; 0x20da <f_write+0x23c>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    1f1e:	88 81       	ld	r24, Y
    1f20:	99 81       	ldd	r25, Y+1	; 0x01
    1f22:	7d 81       	ldd	r23, Y+5	; 0x05
    1f24:	fc 01       	movw	r30, r24
    1f26:	62 81       	ldd	r22, Z+2	; 0x02
    1f28:	76 17       	cp	r23, r22
    1f2a:	d8 f1       	brcs	.+118    	; 0x1fa2 <f_write+0x104>
				if (fp->fptr == 0) {				/* On the top of the file? */
    1f2c:	21 15       	cp	r18, r1
    1f2e:	31 05       	cpc	r19, r1
    1f30:	41 05       	cpc	r20, r1
    1f32:	51 05       	cpc	r21, r1
    1f34:	a9 f4       	brne	.+42     	; 0x1f60 <f_write+0xc2>
					clst = fp->org_clust;			/* Follow from the origin */
    1f36:	2e 85       	ldd	r18, Y+14	; 0x0e
    1f38:	3f 85       	ldd	r19, Y+15	; 0x0f
    1f3a:	48 89       	ldd	r20, Y+16	; 0x10
    1f3c:	59 89       	ldd	r21, Y+17	; 0x11
					if (clst == 0)					/* When there is no cluster chain, */
    1f3e:	21 15       	cp	r18, r1
    1f40:	31 05       	cpc	r19, r1
    1f42:	41 05       	cpc	r20, r1
    1f44:	51 05       	cpc	r21, r1
    1f46:	d1 f4       	brne	.+52     	; 0x1f7c <f_write+0xde>
						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    1f48:	40 e0       	ldi	r20, 0x00	; 0
    1f4a:	50 e0       	ldi	r21, 0x00	; 0
    1f4c:	ba 01       	movw	r22, r20
    1f4e:	0e 94 53 06 	call	0xca6	; 0xca6 <create_chain>
    1f52:	9b 01       	movw	r18, r22
    1f54:	ac 01       	movw	r20, r24
    1f56:	6e 87       	std	Y+14, r22	; 0x0e
    1f58:	7f 87       	std	Y+15, r23	; 0x0f
    1f5a:	88 8b       	std	Y+16, r24	; 0x10
    1f5c:	99 8b       	std	Y+17, r25	; 0x11
    1f5e:	08 c0       	rjmp	.+16     	; 0x1f70 <f_write+0xd2>
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
    1f60:	4a 89       	ldd	r20, Y+18	; 0x12
    1f62:	5b 89       	ldd	r21, Y+19	; 0x13
    1f64:	6c 89       	ldd	r22, Y+20	; 0x14
    1f66:	7d 89       	ldd	r23, Y+21	; 0x15
    1f68:	0e 94 53 06 	call	0xca6	; 0xca6 <create_chain>
    1f6c:	9b 01       	movw	r18, r22
    1f6e:	ac 01       	movw	r20, r24
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
    1f70:	21 15       	cp	r18, r1
    1f72:	31 05       	cpc	r19, r1
    1f74:	41 05       	cpc	r20, r1
    1f76:	51 05       	cpc	r21, r1
    1f78:	09 f4       	brne	.+2      	; 0x1f7c <f_write+0xde>
    1f7a:	fe c0       	rjmp	.+508    	; 0x2178 <f_write+0x2da>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    1f7c:	21 30       	cpi	r18, 0x01	; 1
    1f7e:	31 05       	cpc	r19, r1
    1f80:	41 05       	cpc	r20, r1
    1f82:	51 05       	cpc	r21, r1
    1f84:	a1 f1       	breq	.+104    	; 0x1fee <f_write+0x150>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    1f86:	2f 3f       	cpi	r18, 0xFF	; 255
    1f88:	ff ef       	ldi	r31, 0xFF	; 255
    1f8a:	3f 07       	cpc	r19, r31
    1f8c:	ff ef       	ldi	r31, 0xFF	; 255
    1f8e:	4f 07       	cpc	r20, r31
    1f90:	ff ef       	ldi	r31, 0xFF	; 255
    1f92:	5f 07       	cpc	r21, r31
    1f94:	09 f4       	brne	.+2      	; 0x1f98 <f_write+0xfa>
    1f96:	af c0       	rjmp	.+350    	; 0x20f6 <f_write+0x258>
				fp->curr_clust = clst;				/* Update current cluster */
    1f98:	2a 8b       	std	Y+18, r18	; 0x12
    1f9a:	3b 8b       	std	Y+19, r19	; 0x13
    1f9c:	4c 8b       	std	Y+20, r20	; 0x14
    1f9e:	5d 8b       	std	Y+21, r21	; 0x15
				fp->csect = 0;						/* Reset sector address in the cluster */
    1fa0:	1d 82       	std	Y+5, r1	; 0x05
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
    1fa2:	e8 81       	ld	r30, Y
    1fa4:	f9 81       	ldd	r31, Y+1	; 0x01
    1fa6:	66 a5       	ldd	r22, Z+46	; 0x2e
    1fa8:	77 a5       	ldd	r23, Z+47	; 0x2f
    1faa:	80 a9       	ldd	r24, Z+48	; 0x30
    1fac:	91 a9       	ldd	r25, Z+49	; 0x31
    1fae:	2e 89       	ldd	r18, Y+22	; 0x16
    1fb0:	3f 89       	ldd	r19, Y+23	; 0x17
    1fb2:	48 8d       	ldd	r20, Y+24	; 0x18
    1fb4:	59 8d       	ldd	r21, Y+25	; 0x19
    1fb6:	62 17       	cp	r22, r18
    1fb8:	73 07       	cpc	r23, r19
    1fba:	84 07       	cpc	r24, r20
    1fbc:	95 07       	cpc	r25, r21
    1fbe:	49 f4       	brne	.+18     	; 0x1fd2 <f_write+0x134>
    1fc0:	cf 01       	movw	r24, r30
    1fc2:	40 e0       	ldi	r20, 0x00	; 0
    1fc4:	50 e0       	ldi	r21, 0x00	; 0
    1fc6:	ba 01       	movw	r22, r20
    1fc8:	0e 94 27 04 	call	0x84e	; 0x84e <move_window>
    1fcc:	00 97       	sbiw	r24, 0x00	; 0
    1fce:	09 f0       	breq	.+2      	; 0x1fd2 <f_write+0x134>
    1fd0:	92 c0       	rjmp	.+292    	; 0x20f6 <f_write+0x258>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    1fd2:	08 81       	ld	r16, Y
    1fd4:	19 81       	ldd	r17, Y+1	; 0x01
    1fd6:	4a 89       	ldd	r20, Y+18	; 0x12
    1fd8:	5b 89       	ldd	r21, Y+19	; 0x13
    1fda:	6c 89       	ldd	r22, Y+20	; 0x14
    1fdc:	7d 89       	ldd	r23, Y+21	; 0x15
    1fde:	c8 01       	movw	r24, r16
    1fe0:	0e 94 24 07 	call	0xe48	; 0xe48 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    1fe4:	61 15       	cp	r22, r1
    1fe6:	71 05       	cpc	r23, r1
    1fe8:	81 05       	cpc	r24, r1
    1fea:	91 05       	cpc	r25, r1
    1fec:	21 f4       	brne	.+8      	; 0x1ff6 <f_write+0x158>
    1fee:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff0:	80 68       	ori	r24, 0x80	; 128
    1ff2:	8c 83       	std	Y+4, r24	; 0x04
    1ff4:	d6 c0       	rjmp	.+428    	; 0x21a2 <f_write+0x304>
			sect += fp->csect;
    1ff6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ff8:	4b 01       	movw	r8, r22
    1ffa:	5c 01       	movw	r10, r24
    1ffc:	83 0e       	add	r8, r19
    1ffe:	91 1c       	adc	r9, r1
    2000:	a1 1c       	adc	r10, r1
    2002:	b1 1c       	adc	r11, r1
			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
    2004:	63 01       	movw	r12, r6
    2006:	cd 2c       	mov	r12, r13
    2008:	dd 24       	eor	r13, r13
    200a:	c6 94       	lsr	r12
			if (cc) {								/* Write maximum contiguous sectors directly */
    200c:	c1 14       	cp	r12, r1
    200e:	d1 04       	cpc	r13, r1
    2010:	09 f4       	brne	.+2      	; 0x2014 <f_write+0x176>
    2012:	41 c0       	rjmp	.+130    	; 0x2096 <f_write+0x1f8>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    2014:	f8 01       	movw	r30, r16
    2016:	22 81       	ldd	r18, Z+2	; 0x02
    2018:	83 2f       	mov	r24, r19
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	a6 01       	movw	r20, r12
    201e:	48 0f       	add	r20, r24
    2020:	59 1f       	adc	r21, r25
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	24 17       	cp	r18, r20
    2026:	35 07       	cpc	r19, r21
    2028:	18 f4       	brcc	.+6      	; 0x2030 <f_write+0x192>
					cc = fp->fs->csize - fp->csect;
    202a:	69 01       	movw	r12, r18
    202c:	c8 1a       	sub	r12, r24
    202e:	d9 0a       	sbc	r13, r25
				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
    2030:	f8 01       	movw	r30, r16
    2032:	81 81       	ldd	r24, Z+1	; 0x01
    2034:	b2 01       	movw	r22, r4
    2036:	a5 01       	movw	r20, r10
    2038:	94 01       	movw	r18, r8
    203a:	0c 2d       	mov	r16, r12
    203c:	0e 94 ed 16 	call	0x2dda	; 0x2dda <disk_write>
    2040:	00 97       	sbiw	r24, 0x00	; 0
    2042:	09 f0       	breq	.+2      	; 0x2046 <f_write+0x1a8>
    2044:	58 c0       	rjmp	.+176    	; 0x20f6 <f_write+0x258>
					ABORT(fp->fs, FR_DISK_ERR);
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
    2046:	e8 81       	ld	r30, Y
    2048:	f9 81       	ldd	r31, Y+1	; 0x01
    204a:	66 a5       	ldd	r22, Z+46	; 0x2e
    204c:	77 a5       	ldd	r23, Z+47	; 0x2f
    204e:	80 a9       	ldd	r24, Z+48	; 0x30
    2050:	91 a9       	ldd	r25, Z+49	; 0x31
    2052:	68 19       	sub	r22, r8
    2054:	79 09       	sbc	r23, r9
    2056:	8a 09       	sbc	r24, r10
    2058:	9b 09       	sbc	r25, r11
    205a:	96 01       	movw	r18, r12
    205c:	40 e0       	ldi	r20, 0x00	; 0
    205e:	50 e0       	ldi	r21, 0x00	; 0
    2060:	62 17       	cp	r22, r18
    2062:	73 07       	cpc	r23, r19
    2064:	84 07       	cpc	r24, r20
    2066:	95 07       	cpc	r25, r21
    2068:	70 f4       	brcc	.+28     	; 0x2086 <f_write+0x1e8>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    206a:	76 2f       	mov	r23, r22
    206c:	66 27       	eor	r22, r22
    206e:	77 0f       	add	r23, r23
    2070:	64 0d       	add	r22, r4
    2072:	75 1d       	adc	r23, r5
    2074:	cf 01       	movw	r24, r30
    2076:	c2 96       	adiw	r24, 0x32	; 50
    2078:	40 e0       	ldi	r20, 0x00	; 0
    207a:	52 e0       	ldi	r21, 0x02	; 2
    207c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <mem_cpy>
					fp->fs->wflag = 0;
    2080:	e8 81       	ld	r30, Y
    2082:	f9 81       	ldd	r31, Y+1	; 0x01
    2084:	14 82       	std	Z+4, r1	; 0x04
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    2086:	8d 81       	ldd	r24, Y+5	; 0x05
    2088:	8c 0d       	add	r24, r12
    208a:	8d 83       	std	Y+5, r24	; 0x05
				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    208c:	86 01       	movw	r16, r12
    208e:	10 2f       	mov	r17, r16
    2090:	00 27       	eor	r16, r16
    2092:	11 0f       	add	r17, r17
				continue;
    2094:	53 c0       	rjmp	.+166    	; 0x213c <f_write+0x29e>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
    2096:	2e 81       	ldd	r18, Y+6	; 0x06
    2098:	3f 81       	ldd	r19, Y+7	; 0x07
    209a:	48 85       	ldd	r20, Y+8	; 0x08
    209c:	59 85       	ldd	r21, Y+9	; 0x09
    209e:	8a 85       	ldd	r24, Y+10	; 0x0a
    20a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    20a2:	ac 85       	ldd	r26, Y+12	; 0x0c
    20a4:	bd 85       	ldd	r27, Y+13	; 0x0d
    20a6:	28 17       	cp	r18, r24
    20a8:	39 07       	cpc	r19, r25
    20aa:	4a 07       	cpc	r20, r26
    20ac:	5b 07       	cpc	r21, r27
    20ae:	70 f0       	brcs	.+28     	; 0x20cc <f_write+0x22e>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    20b0:	c8 01       	movw	r24, r16
    20b2:	40 e0       	ldi	r20, 0x00	; 0
    20b4:	50 e0       	ldi	r21, 0x00	; 0
    20b6:	ba 01       	movw	r22, r20
    20b8:	0e 94 27 04 	call	0x84e	; 0x84e <move_window>
    20bc:	00 97       	sbiw	r24, 0x00	; 0
    20be:	d9 f4       	brne	.+54     	; 0x20f6 <f_write+0x258>
				fp->fs->winsect = sect;
    20c0:	e8 81       	ld	r30, Y
    20c2:	f9 81       	ldd	r31, Y+1	; 0x01
    20c4:	86 a6       	std	Z+46, r8	; 0x2e
    20c6:	97 a6       	std	Z+47, r9	; 0x2f
    20c8:	a0 aa       	std	Z+48, r10	; 0x30
    20ca:	b1 aa       	std	Z+49, r11	; 0x31
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    20cc:	8e 8a       	std	Y+22, r8	; 0x16
    20ce:	9f 8a       	std	Y+23, r9	; 0x17
    20d0:	a8 8e       	std	Y+24, r10	; 0x18
    20d2:	b9 8e       	std	Y+25, r11	; 0x19
			fp->csect++;							/* Next sector address in the cluster */
    20d4:	8d 81       	ldd	r24, Y+5	; 0x05
    20d6:	8f 5f       	subi	r24, 0xFF	; 255
    20d8:	8d 83       	std	Y+5, r24	; 0x05
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    20da:	8e 80       	ldd	r8, Y+6	; 0x06
    20dc:	9f 80       	ldd	r9, Y+7	; 0x07
    20de:	a8 84       	ldd	r10, Y+8	; 0x08
    20e0:	b9 84       	ldd	r11, Y+9	; 0x09
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
    20e2:	4e 89       	ldd	r20, Y+22	; 0x16
    20e4:	5f 89       	ldd	r21, Y+23	; 0x17
    20e6:	68 8d       	ldd	r22, Y+24	; 0x18
    20e8:	79 8d       	ldd	r23, Y+25	; 0x19
    20ea:	88 81       	ld	r24, Y
    20ec:	99 81       	ldd	r25, Y+1	; 0x01
    20ee:	0e 94 27 04 	call	0x84e	; 0x84e <move_window>
    20f2:	00 97       	sbiw	r24, 0x00	; 0
    20f4:	39 f0       	breq	.+14     	; 0x2104 <f_write+0x266>
			ABORT(fp->fs, FR_DISK_ERR);
    20f6:	8c 81       	ldd	r24, Y+4	; 0x04
    20f8:	80 68       	ori	r24, 0x80	; 128
    20fa:	8c 83       	std	Y+4, r24	; 0x04
    20fc:	21 e0       	ldi	r18, 0x01	; 1
    20fe:	e2 2e       	mov	r14, r18
    2100:	f1 2c       	mov	r15, r1
    2102:	56 c0       	rjmp	.+172    	; 0x21b0 <f_write+0x312>
			}
#endif
			fp->dsect = sect;
			fp->csect++;							/* Next sector address in the cluster */
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    2104:	c4 01       	movw	r24, r8
    2106:	91 70       	andi	r25, 0x01	; 1
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	32 e0       	ldi	r19, 0x02	; 2
    210c:	28 1b       	sub	r18, r24
    210e:	39 0b       	sbc	r19, r25
    2110:	83 01       	movw	r16, r6
    2112:	26 15       	cp	r18, r6
    2114:	37 05       	cpc	r19, r7
    2116:	08 f4       	brcc	.+2      	; 0x211a <f_write+0x27c>
    2118:	89 01       	movw	r16, r18
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    211a:	28 81       	ld	r18, Y
    211c:	39 81       	ldd	r19, Y+1	; 0x01
    211e:	2e 5c       	subi	r18, 0xCE	; 206
    2120:	3f 4f       	sbci	r19, 0xFF	; 255
    2122:	8e 81       	ldd	r24, Y+6	; 0x06
    2124:	9f 81       	ldd	r25, Y+7	; 0x07
    2126:	91 70       	andi	r25, 0x01	; 1
    2128:	82 0f       	add	r24, r18
    212a:	93 1f       	adc	r25, r19
    212c:	b2 01       	movw	r22, r4
    212e:	a8 01       	movw	r20, r16
    2130:	0e 94 fd 03 	call	0x7fa	; 0x7fa <mem_cpy>
		fp->fs->wflag = 1;
    2134:	e8 81       	ld	r30, Y
    2136:	f9 81       	ldd	r31, Y+1	; 0x01
    2138:	31 e0       	ldi	r19, 0x01	; 1
    213a:	34 83       	std	Z+4, r19	; 0x04
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    213c:	40 0e       	add	r4, r16
    213e:	51 1e       	adc	r5, r17
    2140:	98 01       	movw	r18, r16
    2142:	40 e0       	ldi	r20, 0x00	; 0
    2144:	50 e0       	ldi	r21, 0x00	; 0
    2146:	8e 81       	ldd	r24, Y+6	; 0x06
    2148:	9f 81       	ldd	r25, Y+7	; 0x07
    214a:	a8 85       	ldd	r26, Y+8	; 0x08
    214c:	b9 85       	ldd	r27, Y+9	; 0x09
    214e:	82 0f       	add	r24, r18
    2150:	93 1f       	adc	r25, r19
    2152:	a4 1f       	adc	r26, r20
    2154:	b5 1f       	adc	r27, r21
    2156:	8e 83       	std	Y+6, r24	; 0x06
    2158:	9f 83       	std	Y+7, r25	; 0x07
    215a:	a8 87       	std	Y+8, r26	; 0x08
    215c:	b9 87       	std	Y+9, r27	; 0x09
    215e:	f1 01       	movw	r30, r2
    2160:	80 81       	ld	r24, Z
    2162:	91 81       	ldd	r25, Z+1	; 0x01
    2164:	80 0f       	add	r24, r16
    2166:	91 1f       	adc	r25, r17
    2168:	91 83       	std	Z+1, r25	; 0x01
    216a:	80 83       	st	Z, r24
    216c:	60 1a       	sub	r6, r16
    216e:	71 0a       	sbc	r7, r17
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
    2170:	61 14       	cp	r6, r1
    2172:	71 04       	cpc	r7, r1
    2174:	09 f0       	breq	.+2      	; 0x2178 <f_write+0x2da>
    2176:	c5 ce       	rjmp	.-630    	; 0x1f02 <f_write+0x64>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    2178:	8e 81       	ldd	r24, Y+6	; 0x06
    217a:	9f 81       	ldd	r25, Y+7	; 0x07
    217c:	a8 85       	ldd	r26, Y+8	; 0x08
    217e:	b9 85       	ldd	r27, Y+9	; 0x09
    2180:	2a 85       	ldd	r18, Y+10	; 0x0a
    2182:	3b 85       	ldd	r19, Y+11	; 0x0b
    2184:	4c 85       	ldd	r20, Y+12	; 0x0c
    2186:	5d 85       	ldd	r21, Y+13	; 0x0d
    2188:	28 17       	cp	r18, r24
    218a:	39 07       	cpc	r19, r25
    218c:	4a 07       	cpc	r20, r26
    218e:	5b 07       	cpc	r21, r27
    2190:	20 f4       	brcc	.+8      	; 0x219a <f_write+0x2fc>
    2192:	8a 87       	std	Y+10, r24	; 0x0a
    2194:	9b 87       	std	Y+11, r25	; 0x0b
    2196:	ac 87       	std	Y+12, r26	; 0x0c
    2198:	bd 87       	std	Y+13, r27	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
    219a:	8c 81       	ldd	r24, Y+4	; 0x04
    219c:	80 62       	ori	r24, 0x20	; 32
    219e:	8c 83       	std	Y+4, r24	; 0x04

	LEAVE_FF(fp->fs, FR_OK);
    21a0:	07 c0       	rjmp	.+14     	; 0x21b0 <f_write+0x312>
	*bw = 0;	/* Initialize bytes written */

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)						/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    21a2:	92 e0       	ldi	r25, 0x02	; 2
    21a4:	e9 2e       	mov	r14, r25
    21a6:	f1 2c       	mov	r15, r1
    21a8:	03 c0       	rjmp	.+6      	; 0x21b0 <f_write+0x312>
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    21aa:	87 e0       	ldi	r24, 0x07	; 7
    21ac:	e8 2e       	mov	r14, r24
    21ae:	f1 2c       	mov	r15, r1

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    21b0:	c7 01       	movw	r24, r14
    21b2:	cd b7       	in	r28, 0x3d	; 61
    21b4:	de b7       	in	r29, 0x3e	; 62
    21b6:	e2 e1       	ldi	r30, 0x12	; 18
    21b8:	0c 94 e7 2d 	jmp	0x5bce	; 0x5bce <__epilogue_restores__>

000021bc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    21bc:	0f 93       	push	r16
    21be:	1f 93       	push	r17
    21c0:	cf 93       	push	r28
    21c2:	df 93       	push	r29
    21c4:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    21c6:	6a 81       	ldd	r22, Y+2	; 0x02
    21c8:	7b 81       	ldd	r23, Y+3	; 0x03
    21ca:	88 81       	ld	r24, Y
    21cc:	99 81       	ldd	r25, Y+1	; 0x01
    21ce:	0e 94 0d 04 	call	0x81a	; 0x81a <validate>
    21d2:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    21d4:	00 97       	sbiw	r24, 0x00	; 0
    21d6:	09 f0       	breq	.+2      	; 0x21da <f_sync+0x1e>
    21d8:	a0 c0       	rjmp	.+320    	; 0x231a <f_sync+0x15e>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    21da:	8c 81       	ldd	r24, Y+4	; 0x04
    21dc:	85 ff       	sbrs	r24, 5
    21de:	9d c0       	rjmp	.+314    	; 0x231a <f_sync+0x15e>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    21e0:	4a 8d       	ldd	r20, Y+26	; 0x1a
    21e2:	5b 8d       	ldd	r21, Y+27	; 0x1b
    21e4:	6c 8d       	ldd	r22, Y+28	; 0x1c
    21e6:	7d 8d       	ldd	r23, Y+29	; 0x1d
    21e8:	88 81       	ld	r24, Y
    21ea:	99 81       	ldd	r25, Y+1	; 0x01
    21ec:	0e 94 27 04 	call	0x84e	; 0x84e <move_window>
    21f0:	9c 01       	movw	r18, r24
			if (res == FR_OK) {
    21f2:	00 97       	sbiw	r24, 0x00	; 0
    21f4:	09 f0       	breq	.+2      	; 0x21f8 <f_sync+0x3c>
    21f6:	91 c0       	rjmp	.+290    	; 0x231a <f_sync+0x15e>
				dir = fp->dir_ptr;
    21f8:	0e 8d       	ldd	r16, Y+30	; 0x1e
    21fa:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    21fc:	f8 01       	movw	r30, r16
    21fe:	83 85       	ldd	r24, Z+11	; 0x0b
    2200:	80 62       	ori	r24, 0x20	; 32
    2202:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    2204:	8a 85       	ldd	r24, Y+10	; 0x0a
    2206:	9b 85       	ldd	r25, Y+11	; 0x0b
    2208:	ac 85       	ldd	r26, Y+12	; 0x0c
    220a:	bd 85       	ldd	r27, Y+13	; 0x0d
    220c:	84 8f       	std	Z+28, r24	; 0x1c
    220e:	95 8f       	std	Z+29, r25	; 0x1d
    2210:	a6 8f       	std	Z+30, r26	; 0x1e
    2212:	b7 8f       	std	Z+31, r27	; 0x1f
				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
    2214:	8e 85       	ldd	r24, Y+14	; 0x0e
    2216:	9f 85       	ldd	r25, Y+15	; 0x0f
    2218:	a8 89       	ldd	r26, Y+16	; 0x10
    221a:	b9 89       	ldd	r27, Y+17	; 0x11
    221c:	93 8f       	std	Z+27, r25	; 0x1b
    221e:	82 8f       	std	Z+26, r24	; 0x1a
				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
    2220:	b5 8b       	std	Z+21, r27	; 0x15
    2222:	a4 8b       	std	Z+20, r26	; 0x14
				tim = get_fattime();			/* Updated time */
    2224:	0e 94 16 01 	call	0x22c	; 0x22c <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
    2228:	f8 01       	movw	r30, r16
    222a:	66 8b       	std	Z+22, r22	; 0x16
    222c:	77 8b       	std	Z+23, r23	; 0x17
    222e:	80 8f       	std	Z+24, r24	; 0x18
    2230:	91 8f       	std	Z+25, r25	; 0x19
				fp->flag &= ~FA__WRITTEN;
    2232:	8c 81       	ldd	r24, Y+4	; 0x04
    2234:	8f 7d       	andi	r24, 0xDF	; 223
    2236:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    2238:	e8 81       	ld	r30, Y
    223a:	f9 81       	ldd	r31, Y+1	; 0x01
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    2240:	09 90       	ld	r0, Y+
    2242:	d8 81       	ld	r29, Y
    2244:	c0 2d       	mov	r28, r0
)
{
	FRESULT res;


	res = move_window(fs, 0);
    2246:	ce 01       	movw	r24, r28
    2248:	40 e0       	ldi	r20, 0x00	; 0
    224a:	50 e0       	ldi	r21, 0x00	; 0
    224c:	ba 01       	movw	r22, r20
    224e:	0e 94 27 04 	call	0x84e	; 0x84e <move_window>
    2252:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    2254:	00 97       	sbiw	r24, 0x00	; 0
    2256:	09 f0       	breq	.+2      	; 0x225a <f_sync+0x9e>
    2258:	60 c0       	rjmp	.+192    	; 0x231a <f_sync+0x15e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    225a:	88 81       	ld	r24, Y
    225c:	83 30       	cpi	r24, 0x03	; 3
    225e:	09 f0       	breq	.+2      	; 0x2262 <f_sync+0xa6>
    2260:	50 c0       	rjmp	.+160    	; 0x2302 <f_sync+0x146>
    2262:	8d 81       	ldd	r24, Y+5	; 0x05
    2264:	88 23       	and	r24, r24
    2266:	09 f4       	brne	.+2      	; 0x226a <f_sync+0xae>
    2268:	4c c0       	rjmp	.+152    	; 0x2302 <f_sync+0x146>
			fs->winsect = 0;
    226a:	1e a6       	std	Y+46, r1	; 0x2e
    226c:	1f a6       	std	Y+47, r1	; 0x2f
    226e:	18 aa       	std	Y+48, r1	; 0x30
    2270:	19 aa       	std	Y+49, r1	; 0x31
			mem_set(fs->win, 0, 512);
    2272:	9e 01       	movw	r18, r28
    2274:	2e 5c       	subi	r18, 0xCE	; 206
    2276:	3f 4f       	sbci	r19, 0xFF	; 255
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    2278:	f9 01       	movw	r30, r18

/*-----------------------------------------------------------------------*/
/* Synchronize the File Object                                           */
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
    227a:	ce 01       	movw	r24, r28
    227c:	8e 5c       	subi	r24, 0xCE	; 206
    227e:	9d 4f       	sbci	r25, 0xFD	; 253
    2280:	01 c0       	rjmp	.+2      	; 0x2284 <f_sync+0xc8>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    2282:	11 92       	st	Z+, r1
    2284:	e8 17       	cp	r30, r24
    2286:	f9 07       	cpc	r31, r25
    2288:	e1 f7       	brne	.-8      	; 0x2282 <f_sync+0xc6>
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    228a:	f9 01       	movw	r30, r18
    228c:	e2 50       	subi	r30, 0x02	; 2
    228e:	fe 4f       	sbci	r31, 0xFE	; 254
    2290:	85 e5       	ldi	r24, 0x55	; 85
    2292:	9a ea       	ldi	r25, 0xAA	; 170
    2294:	91 83       	std	Z+1, r25	; 0x01
    2296:	80 83       	st	Z, r24
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    2298:	82 e5       	ldi	r24, 0x52	; 82
    229a:	92 e5       	ldi	r25, 0x52	; 82
    229c:	a1 e6       	ldi	r26, 0x61	; 97
    229e:	b1 e4       	ldi	r27, 0x41	; 65
    22a0:	8a ab       	std	Y+50, r24	; 0x32
    22a2:	9b ab       	std	Y+51, r25	; 0x33
    22a4:	ac ab       	std	Y+52, r26	; 0x34
    22a6:	bd ab       	std	Y+53, r27	; 0x35
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    22a8:	f9 01       	movw	r30, r18
    22aa:	ec 51       	subi	r30, 0x1C	; 28
    22ac:	fe 4f       	sbci	r31, 0xFE	; 254
    22ae:	82 e7       	ldi	r24, 0x72	; 114
    22b0:	92 e7       	ldi	r25, 0x72	; 114
    22b2:	a1 e4       	ldi	r26, 0x41	; 65
    22b4:	b1 e6       	ldi	r27, 0x61	; 97
    22b6:	80 83       	st	Z, r24
    22b8:	91 83       	std	Z+1, r25	; 0x01
    22ba:	a2 83       	std	Z+2, r26	; 0x02
    22bc:	b3 83       	std	Z+3, r27	; 0x03
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    22be:	f9 01       	movw	r30, r18
    22c0:	e8 51       	subi	r30, 0x18	; 24
    22c2:	fe 4f       	sbci	r31, 0xFE	; 254
    22c4:	8e 85       	ldd	r24, Y+14	; 0x0e
    22c6:	9f 85       	ldd	r25, Y+15	; 0x0f
    22c8:	a8 89       	ldd	r26, Y+16	; 0x10
    22ca:	b9 89       	ldd	r27, Y+17	; 0x11
    22cc:	80 83       	st	Z, r24
    22ce:	91 83       	std	Z+1, r25	; 0x01
    22d0:	a2 83       	std	Z+2, r26	; 0x02
    22d2:	b3 83       	std	Z+3, r27	; 0x03
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    22d4:	24 51       	subi	r18, 0x14	; 20
    22d6:	3e 4f       	sbci	r19, 0xFE	; 254
    22d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    22da:	9b 85       	ldd	r25, Y+11	; 0x0b
    22dc:	ac 85       	ldd	r26, Y+12	; 0x0c
    22de:	bd 85       	ldd	r27, Y+13	; 0x0d
    22e0:	f9 01       	movw	r30, r18
    22e2:	80 83       	st	Z, r24
    22e4:	91 83       	std	Z+1, r25	; 0x01
    22e6:	a2 83       	std	Z+2, r26	; 0x02
    22e8:	b3 83       	std	Z+3, r27	; 0x03
			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
    22ea:	be 01       	movw	r22, r28
    22ec:	6e 5c       	subi	r22, 0xCE	; 206
    22ee:	7f 4f       	sbci	r23, 0xFF	; 255
    22f0:	2a 89       	ldd	r18, Y+18	; 0x12
    22f2:	3b 89       	ldd	r19, Y+19	; 0x13
    22f4:	4c 89       	ldd	r20, Y+20	; 0x14
    22f6:	5d 89       	ldd	r21, Y+21	; 0x15
    22f8:	89 81       	ldd	r24, Y+1	; 0x01
    22fa:	01 e0       	ldi	r16, 0x01	; 1
    22fc:	0e 94 ed 16 	call	0x2dda	; 0x2dda <disk_write>
			fs->fsi_flag = 0;
    2300:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drive, CTRL_SYNC, (void*)NULL) != RES_OK)
    2302:	89 81       	ldd	r24, Y+1	; 0x01
    2304:	60 e0       	ldi	r22, 0x00	; 0
    2306:	40 e0       	ldi	r20, 0x00	; 0
    2308:	50 e0       	ldi	r21, 0x00	; 0
    230a:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <disk_ioctl>
    230e:	21 e0       	ldi	r18, 0x01	; 1
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	11 f4       	brne	.+4      	; 0x231a <f_sync+0x15e>
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    231a:	c9 01       	movw	r24, r18
    231c:	df 91       	pop	r29
    231e:	cf 91       	pop	r28
    2320:	1f 91       	pop	r17
    2322:	0f 91       	pop	r16
    2324:	08 95       	ret

00002326 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    2326:	cf 93       	push	r28
    2328:	df 93       	push	r29
    232a:	ec 01       	movw	r28, r24
#if _FS_READONLY
	res = validate(fp->fs, fp->id);
	if (res == FR_OK) fp->fs = NULL;
	LEAVE_FF(fp->fs, res);
#else
	res = f_sync(fp);
    232c:	0e 94 de 10 	call	0x21bc	; 0x21bc <f_sync>
    2330:	9c 01       	movw	r18, r24
	if (res == FR_OK) fp->fs = NULL;
    2332:	00 97       	sbiw	r24, 0x00	; 0
    2334:	11 f4       	brne	.+4      	; 0x233a <f_close+0x14>
    2336:	19 82       	std	Y+1, r1	; 0x01
    2338:	18 82       	st	Y, r1
	return res;
#endif
}
    233a:	c9 01       	movw	r24, r18
    233c:	df 91       	pop	r29
    233e:	cf 91       	pop	r28
    2340:	08 95       	ret

00002342 <f_chdrive>:

FRESULT f_chdrive (
	BYTE drv		/* Drive number */
)
{
	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
    2342:	88 23       	and	r24, r24
    2344:	29 f4       	brne	.+10     	; 0x2350 <f_chdrive+0xe>

	Drive = drv;
    2346:	10 92 b2 03 	sts	0x03B2, r1

	return FR_OK;
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	02 c0       	rjmp	.+4      	; 0x2354 <f_chdrive+0x12>

FRESULT f_chdrive (
	BYTE drv		/* Drive number */
)
{
	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
    2350:	2b e0       	ldi	r18, 0x0B	; 11
    2352:	30 e0       	ldi	r19, 0x00	; 0

	Drive = drv;

	return FR_OK;
}
    2354:	c9 01       	movw	r24, r18
    2356:	08 95       	ret

00002358 <f_chdir>:


FRESULT f_chdir (
	const XCHAR *path	/* Pointer to the directory path */
)
{
    2358:	a4 e2       	ldi	r26, 0x24	; 36
    235a:	b0 e0       	ldi	r27, 0x00	; 0
    235c:	e2 eb       	ldi	r30, 0xB2	; 178
    235e:	f1 e1       	ldi	r31, 0x11	; 17
    2360:	0c 94 d9 2d 	jmp	0x5bb2	; 0x5bb2 <__prologue_saves__+0x1c>
    2364:	9c a3       	std	Y+36, r25	; 0x24
    2366:	8b a3       	std	Y+35, r24	; 0x23
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj.fs, 0);
    2368:	8e 01       	movw	r16, r28
    236a:	03 5f       	subi	r16, 0xF3	; 243
    236c:	1f 4f       	sbci	r17, 0xFF	; 255
    236e:	ce 01       	movw	r24, r28
    2370:	83 96       	adiw	r24, 0x23	; 35
    2372:	b8 01       	movw	r22, r16
    2374:	40 e0       	ldi	r20, 0x00	; 0
    2376:	0e 94 42 0a 	call	0x1484	; 0x1484 <chk_mounted>
    237a:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    237c:	00 97       	sbiw	r24, 0x00	; 0
    237e:	e9 f5       	brne	.+122    	; 0x23fa <f_chdir+0xa2>
		INITBUF(dj, sfn, lfn);
    2380:	ce 01       	movw	r24, r28
    2382:	01 96       	adiw	r24, 0x01	; 1
    2384:	9a a3       	std	Y+34, r25	; 0x22
    2386:	89 a3       	std	Y+33, r24	; 0x21
		res = follow_path(&dj, path);		/* Follow the file path */
    2388:	6b a1       	ldd	r22, Y+35	; 0x23
    238a:	7c a1       	ldd	r23, Y+36	; 0x24
    238c:	c8 01       	movw	r24, r16
    238e:	0e 94 e5 08 	call	0x11ca	; 0x11ca <follow_path>
    2392:	9c 01       	movw	r18, r24
		if (res == FR_OK) {					/* Follow completed */
    2394:	00 97       	sbiw	r24, 0x00	; 0
    2396:	61 f5       	brne	.+88     	; 0x23f0 <f_chdir+0x98>
			dir = dj.dir;					/* Pointer to the entry */
    2398:	4f 8d       	ldd	r20, Y+31	; 0x1f
    239a:	58 a1       	ldd	r21, Y+32	; 0x20
			if (!dir) {
    239c:	41 15       	cp	r20, r1
    239e:	51 05       	cpc	r21, r1
    23a0:	39 f4       	brne	.+14     	; 0x23b0 <f_chdir+0x58>
				dj.fs->cdir = 0;			/* No entry (root dir) */
    23a2:	ed 85       	ldd	r30, Y+13	; 0x0d
    23a4:	fe 85       	ldd	r31, Y+14	; 0x0e
    23a6:	16 8a       	std	Z+22, r1	; 0x16
    23a8:	17 8a       	std	Z+23, r1	; 0x17
    23aa:	10 8e       	std	Z+24, r1	; 0x18
    23ac:	11 8e       	std	Z+25, r1	; 0x19
    23ae:	25 c0       	rjmp	.+74     	; 0x23fa <f_chdir+0xa2>
			} else {
				if (dir[DIR_Attr] & AM_DIR)	/* Reached to the dir */
    23b0:	da 01       	movw	r26, r20
    23b2:	1b 96       	adiw	r26, 0x0b	; 11
    23b4:	8c 91       	ld	r24, X
    23b6:	1b 97       	sbiw	r26, 0x0b	; 11
    23b8:	84 ff       	sbrs	r24, 4
    23ba:	1d c0       	rjmp	.+58     	; 0x23f6 <f_chdir+0x9e>
					dj.fs->cdir = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    23bc:	0d 85       	ldd	r16, Y+13	; 0x0d
    23be:	1e 85       	ldd	r17, Y+14	; 0x0e
    23c0:	54 96       	adiw	r26, 0x14	; 20
    23c2:	8d 91       	ld	r24, X+
    23c4:	9c 91       	ld	r25, X
    23c6:	55 97       	sbiw	r26, 0x15	; 21
    23c8:	a0 e0       	ldi	r26, 0x00	; 0
    23ca:	b0 e0       	ldi	r27, 0x00	; 0
    23cc:	dc 01       	movw	r26, r24
    23ce:	99 27       	eor	r25, r25
    23d0:	88 27       	eor	r24, r24
    23d2:	fa 01       	movw	r30, r20
    23d4:	42 8d       	ldd	r20, Z+26	; 0x1a
    23d6:	53 8d       	ldd	r21, Z+27	; 0x1b
    23d8:	60 e0       	ldi	r22, 0x00	; 0
    23da:	70 e0       	ldi	r23, 0x00	; 0
    23dc:	84 2b       	or	r24, r20
    23de:	95 2b       	or	r25, r21
    23e0:	a6 2b       	or	r26, r22
    23e2:	b7 2b       	or	r27, r23
    23e4:	f8 01       	movw	r30, r16
    23e6:	86 8b       	std	Z+22, r24	; 0x16
    23e8:	97 8b       	std	Z+23, r25	; 0x17
    23ea:	a0 8f       	std	Z+24, r26	; 0x18
    23ec:	b1 8f       	std	Z+25, r27	; 0x19
    23ee:	05 c0       	rjmp	.+10     	; 0x23fa <f_chdir+0xa2>
				else
					res = FR_NO_PATH;		/* Could not reach the dir (it is a file) */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    23f0:	84 30       	cpi	r24, 0x04	; 4
    23f2:	91 05       	cpc	r25, r1
    23f4:	11 f4       	brne	.+4      	; 0x23fa <f_chdir+0xa2>
    23f6:	25 e0       	ldi	r18, 0x05	; 5
    23f8:	30 e0       	ldi	r19, 0x00	; 0
	}

	LEAVE_FF(dj.fs, res);
}
    23fa:	c9 01       	movw	r24, r18
    23fc:	a4 96       	adiw	r28, 0x24	; 36
    23fe:	e4 e0       	ldi	r30, 0x04	; 4
    2400:	0c 94 f5 2d 	jmp	0x5bea	; 0x5bea <__epilogue_restores__+0x1c>

00002404 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    2404:	a6 e0       	ldi	r26, 0x06	; 6
    2406:	b0 e0       	ldi	r27, 0x00	; 0
    2408:	e8 e0       	ldi	r30, 0x08	; 8
    240a:	f2 e1       	ldi	r31, 0x12	; 18
    240c:	0c 94 cb 2d 	jmp	0x5b96	; 0x5b96 <__prologue_saves__>
    2410:	9e 83       	std	Y+6, r25	; 0x06
    2412:	8d 83       	std	Y+5, r24	; 0x05
    2414:	7a 01       	movw	r14, r20
    2416:	8b 01       	movw	r16, r22
	FRESULT res;
	DWORD clst, bcs, nsect, ifptr;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    2418:	dc 01       	movw	r26, r24
    241a:	12 96       	adiw	r26, 0x02	; 2
    241c:	6d 91       	ld	r22, X+
    241e:	7c 91       	ld	r23, X
    2420:	13 97       	sbiw	r26, 0x03	; 3
    2422:	8d 91       	ld	r24, X+
    2424:	9c 91       	ld	r25, X
    2426:	0e 94 0d 04 	call	0x81a	; 0x81a <validate>
    242a:	4c 01       	movw	r8, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    242c:	00 97       	sbiw	r24, 0x00	; 0
    242e:	09 f0       	breq	.+2      	; 0x2432 <f_lseek+0x2e>
    2430:	95 c1       	rjmp	.+810    	; 0x275c <f_lseek+0x358>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    2432:	ed 81       	ldd	r30, Y+5	; 0x05
    2434:	fe 81       	ldd	r31, Y+6	; 0x06
    2436:	24 81       	ldd	r18, Z+4	; 0x04
    2438:	27 fd       	sbrc	r18, 7
    243a:	8d c1       	rjmp	.+794    	; 0x2756 <f_lseek+0x352>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    243c:	82 85       	ldd	r24, Z+10	; 0x0a
    243e:	93 85       	ldd	r25, Z+11	; 0x0b
    2440:	a4 85       	ldd	r26, Z+12	; 0x0c
    2442:	b5 85       	ldd	r27, Z+13	; 0x0d
    2444:	8e 15       	cp	r24, r14
    2446:	9f 05       	cpc	r25, r15
    2448:	a0 07       	cpc	r26, r16
    244a:	b1 07       	cpc	r27, r17
    244c:	20 f4       	brcc	.+8      	; 0x2456 <f_lseek+0x52>
#if !_FS_READONLY
		 && !(fp->flag & FA_WRITE)
    244e:	21 fd       	sbrc	r18, 1
    2450:	02 c0       	rjmp	.+4      	; 0x2456 <f_lseek+0x52>
    2452:	7c 01       	movw	r14, r24
    2454:	8d 01       	movw	r16, r26
#endif
		) ofs = fp->fsize;

	ifptr = fp->fptr;
    2456:	ed 81       	ldd	r30, Y+5	; 0x05
    2458:	fe 81       	ldd	r31, Y+6	; 0x06
    245a:	86 81       	ldd	r24, Z+6	; 0x06
    245c:	97 81       	ldd	r25, Z+7	; 0x07
    245e:	a0 85       	ldd	r26, Z+8	; 0x08
    2460:	b1 85       	ldd	r27, Z+9	; 0x09
	fp->fptr = nsect = 0; fp->csect = 255;
    2462:	16 82       	std	Z+6, r1	; 0x06
    2464:	17 82       	std	Z+7, r1	; 0x07
    2466:	10 86       	std	Z+8, r1	; 0x08
    2468:	11 86       	std	Z+9, r1	; 0x09
    246a:	2f ef       	ldi	r18, 0xFF	; 255
    246c:	25 83       	std	Z+5, r18	; 0x05
	if (ofs > 0) {
    246e:	e1 14       	cp	r14, r1
    2470:	f1 04       	cpc	r15, r1
    2472:	01 05       	cpc	r16, r1
    2474:	11 05       	cpc	r17, r1
    2476:	09 f4       	brne	.+2      	; 0x247a <f_lseek+0x76>
    2478:	36 c1       	rjmp	.+620    	; 0x26e6 <f_lseek+0x2e2>
		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    247a:	20 80       	ld	r2, Z
    247c:	31 80       	ldd	r3, Z+1	; 0x01
    247e:	f1 01       	movw	r30, r2
    2480:	a2 80       	ldd	r10, Z+2	; 0x02
    2482:	bb 24       	eor	r11, r11
    2484:	cc 24       	eor	r12, r12
    2486:	dd 24       	eor	r13, r13
    2488:	49 e0       	ldi	r20, 0x09	; 9
    248a:	aa 0c       	add	r10, r10
    248c:	bb 1c       	adc	r11, r11
    248e:	cc 1c       	adc	r12, r12
    2490:	dd 1c       	adc	r13, r13
    2492:	4a 95       	dec	r20
    2494:	d1 f7       	brne	.-12     	; 0x248a <f_lseek+0x86>
		if (ifptr > 0 &&
    2496:	00 97       	sbiw	r24, 0x00	; 0
    2498:	a1 05       	cpc	r26, r1
    249a:	b1 05       	cpc	r27, r1
    249c:	f1 f1       	breq	.+124    	; 0x251a <f_lseek+0x116>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    249e:	2c 01       	movw	r4, r24
    24a0:	3d 01       	movw	r6, r26
    24a2:	08 94       	sec
    24a4:	41 08       	sbc	r4, r1
    24a6:	51 08       	sbc	r5, r1
    24a8:	61 08       	sbc	r6, r1
    24aa:	71 08       	sbc	r7, r1
    24ac:	c8 01       	movw	r24, r16
    24ae:	b7 01       	movw	r22, r14
    24b0:	61 50       	subi	r22, 0x01	; 1
    24b2:	70 40       	sbci	r23, 0x00	; 0
    24b4:	80 40       	sbci	r24, 0x00	; 0
    24b6:	90 40       	sbci	r25, 0x00	; 0
    24b8:	a6 01       	movw	r20, r12
    24ba:	95 01       	movw	r18, r10
    24bc:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__udivmodsi4>
    24c0:	29 83       	std	Y+1, r18	; 0x01
    24c2:	3a 83       	std	Y+2, r19	; 0x02
    24c4:	4b 83       	std	Y+3, r20	; 0x03
    24c6:	5c 83       	std	Y+4, r21	; 0x04
    24c8:	c3 01       	movw	r24, r6
    24ca:	b2 01       	movw	r22, r4
    24cc:	a6 01       	movw	r20, r12
    24ce:	95 01       	movw	r18, r10
    24d0:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <__udivmodsi4>

	ifptr = fp->fptr;
	fp->fptr = nsect = 0; fp->csect = 255;
	if (ofs > 0) {
		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
		if (ifptr > 0 &&
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
    24d6:	9a 81       	ldd	r25, Y+2	; 0x02
    24d8:	ab 81       	ldd	r26, Y+3	; 0x03
    24da:	bc 81       	ldd	r27, Y+4	; 0x04
    24dc:	82 17       	cp	r24, r18
    24de:	93 07       	cpc	r25, r19
    24e0:	a4 07       	cpc	r26, r20
    24e2:	b5 07       	cpc	r27, r21
    24e4:	d0 f0       	brcs	.+52     	; 0x251a <f_lseek+0x116>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    24e6:	88 27       	eor	r24, r24
    24e8:	99 27       	eor	r25, r25
    24ea:	dc 01       	movw	r26, r24
    24ec:	8a 19       	sub	r24, r10
    24ee:	9b 09       	sbc	r25, r11
    24f0:	ac 09       	sbc	r26, r12
    24f2:	bd 09       	sbc	r27, r13
    24f4:	84 21       	and	r24, r4
    24f6:	95 21       	and	r25, r5
    24f8:	a6 21       	and	r26, r6
    24fa:	b7 21       	and	r27, r7
    24fc:	ed 81       	ldd	r30, Y+5	; 0x05
    24fe:	fe 81       	ldd	r31, Y+6	; 0x06
    2500:	86 83       	std	Z+6, r24	; 0x06
    2502:	97 83       	std	Z+7, r25	; 0x07
    2504:	a0 87       	std	Z+8, r26	; 0x08
    2506:	b1 87       	std	Z+9, r27	; 0x09
			ofs -= fp->fptr;
    2508:	e8 1a       	sub	r14, r24
    250a:	f9 0a       	sbc	r15, r25
    250c:	0a 0b       	sbc	r16, r26
    250e:	1b 0b       	sbc	r17, r27
			clst = fp->curr_clust;
    2510:	42 89       	ldd	r20, Z+18	; 0x12
    2512:	53 89       	ldd	r21, Z+19	; 0x13
    2514:	64 89       	ldd	r22, Z+20	; 0x14
    2516:	75 89       	ldd	r23, Z+21	; 0x15
    2518:	36 c0       	rjmp	.+108    	; 0x2586 <f_lseek+0x182>
		} else {									/* When seek to back cluster, */
			clst = fp->org_clust;					/* start from the first cluster */
    251a:	ad 81       	ldd	r26, Y+5	; 0x05
    251c:	be 81       	ldd	r27, Y+6	; 0x06
    251e:	1e 96       	adiw	r26, 0x0e	; 14
    2520:	4d 91       	ld	r20, X+
    2522:	5d 91       	ld	r21, X+
    2524:	6d 91       	ld	r22, X+
    2526:	7c 91       	ld	r23, X
    2528:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
			if (clst == 0) {						/* If no cluster chain, create a new chain */
    252a:	41 15       	cp	r20, r1
    252c:	51 05       	cpc	r21, r1
    252e:	61 05       	cpc	r22, r1
    2530:	71 05       	cpc	r23, r1
    2532:	09 f5       	brne	.+66     	; 0x2576 <f_lseek+0x172>
				clst = create_chain(fp->fs, 0);
    2534:	c1 01       	movw	r24, r2
    2536:	40 e0       	ldi	r20, 0x00	; 0
    2538:	50 e0       	ldi	r21, 0x00	; 0
    253a:	ba 01       	movw	r22, r20
    253c:	0e 94 53 06 	call	0xca6	; 0xca6 <create_chain>
    2540:	ab 01       	movw	r20, r22
    2542:	bc 01       	movw	r22, r24
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    2544:	41 30       	cpi	r20, 0x01	; 1
    2546:	51 05       	cpc	r21, r1
    2548:	61 05       	cpc	r22, r1
    254a:	71 05       	cpc	r23, r1
    254c:	19 f4       	brne	.+6      	; 0x2554 <f_lseek+0x150>
    254e:	ed 81       	ldd	r30, Y+5	; 0x05
    2550:	fe 81       	ldd	r31, Y+6	; 0x06
    2552:	60 c0       	rjmp	.+192    	; 0x2614 <f_lseek+0x210>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2554:	4f 3f       	cpi	r20, 0xFF	; 255
    2556:	ff ef       	ldi	r31, 0xFF	; 255
    2558:	5f 07       	cpc	r21, r31
    255a:	ff ef       	ldi	r31, 0xFF	; 255
    255c:	6f 07       	cpc	r22, r31
    255e:	ff ef       	ldi	r31, 0xFF	; 255
    2560:	7f 07       	cpc	r23, r31
    2562:	19 f4       	brne	.+6      	; 0x256a <f_lseek+0x166>
    2564:	ad 81       	ldd	r26, Y+5	; 0x05
    2566:	be 81       	ldd	r27, Y+6	; 0x06
    2568:	36 c0       	rjmp	.+108    	; 0x25d6 <f_lseek+0x1d2>
				fp->org_clust = clst;
    256a:	ed 81       	ldd	r30, Y+5	; 0x05
    256c:	fe 81       	ldd	r31, Y+6	; 0x06
    256e:	46 87       	std	Z+14, r20	; 0x0e
    2570:	57 87       	std	Z+15, r21	; 0x0f
    2572:	60 8b       	std	Z+16, r22	; 0x10
    2574:	71 8b       	std	Z+17, r23	; 0x11
			}
#endif
			fp->curr_clust = clst;
    2576:	ad 81       	ldd	r26, Y+5	; 0x05
    2578:	be 81       	ldd	r27, Y+6	; 0x06
    257a:	52 96       	adiw	r26, 0x12	; 18
    257c:	4d 93       	st	X+, r20
    257e:	5d 93       	st	X+, r21
    2580:	6d 93       	st	X+, r22
    2582:	7c 93       	st	X, r23
    2584:	55 97       	sbiw	r26, 0x15	; 21
		}
		if (clst != 0) {
    2586:	41 15       	cp	r20, r1
    2588:	51 05       	cpc	r21, r1
    258a:	61 05       	cpc	r22, r1
    258c:	71 05       	cpc	r23, r1
    258e:	09 f4       	brne	.+2      	; 0x2592 <f_lseek+0x18e>
    2590:	aa c0       	rjmp	.+340    	; 0x26e6 <f_lseek+0x2e2>
    2592:	4d 80       	ldd	r4, Y+5	; 0x05
    2594:	5e 80       	ldd	r5, Y+6	; 0x06
    2596:	5c c0       	rjmp	.+184    	; 0x2650 <f_lseek+0x24c>
			while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    2598:	f2 01       	movw	r30, r4
    259a:	24 81       	ldd	r18, Z+4	; 0x04
    259c:	80 81       	ld	r24, Z
    259e:	91 81       	ldd	r25, Z+1	; 0x01
    25a0:	21 ff       	sbrs	r18, 1
    25a2:	0a c0       	rjmp	.+20     	; 0x25b8 <f_lseek+0x1b4>
					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
    25a4:	0e 94 53 06 	call	0xca6	; 0xca6 <create_chain>
    25a8:	ab 01       	movw	r20, r22
    25aa:	bc 01       	movw	r22, r24
					if (clst == 0) {				/* When disk gets full, clip file size */
    25ac:	41 15       	cp	r20, r1
    25ae:	51 05       	cpc	r21, r1
    25b0:	61 05       	cpc	r22, r1
    25b2:	71 05       	cpc	r23, r1
    25b4:	29 f4       	brne	.+10     	; 0x25c0 <f_lseek+0x1bc>
    25b6:	55 c0       	rjmp	.+170    	; 0x2662 <f_lseek+0x25e>
						ofs = bcs; break;
					}
				} else
#endif
					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    25b8:	0e 94 d7 04 	call	0x9ae	; 0x9ae <get_fat>
    25bc:	ab 01       	movw	r20, r22
    25be:	bc 01       	movw	r22, r24
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    25c0:	4f 3f       	cpi	r20, 0xFF	; 255
    25c2:	ff ef       	ldi	r31, 0xFF	; 255
    25c4:	5f 07       	cpc	r21, r31
    25c6:	ff ef       	ldi	r31, 0xFF	; 255
    25c8:	6f 07       	cpc	r22, r31
    25ca:	ff ef       	ldi	r31, 0xFF	; 255
    25cc:	7f 07       	cpc	r23, r31
    25ce:	71 f4       	brne	.+28     	; 0x25ec <f_lseek+0x1e8>
    25d0:	5e 82       	std	Y+6, r5	; 0x06
    25d2:	4d 82       	std	Y+5, r4	; 0x05
    25d4:	d2 01       	movw	r26, r4
    25d6:	14 96       	adiw	r26, 0x04	; 4
    25d8:	8c 91       	ld	r24, X
    25da:	14 97       	sbiw	r26, 0x04	; 4
    25dc:	80 68       	ori	r24, 0x80	; 128
    25de:	14 96       	adiw	r26, 0x04	; 4
    25e0:	8c 93       	st	X, r24
    25e2:	14 97       	sbiw	r26, 0x04	; 4
    25e4:	31 e0       	ldi	r19, 0x01	; 1
    25e6:	83 2e       	mov	r8, r19
    25e8:	91 2c       	mov	r9, r1
    25ea:	b8 c0       	rjmp	.+368    	; 0x275c <f_lseek+0x358>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
    25ec:	42 30       	cpi	r20, 0x02	; 2
    25ee:	51 05       	cpc	r21, r1
    25f0:	61 05       	cpc	r22, r1
    25f2:	71 05       	cpc	r23, r1
    25f4:	60 f0       	brcs	.+24     	; 0x260e <f_lseek+0x20a>
    25f6:	d2 01       	movw	r26, r4
    25f8:	ed 91       	ld	r30, X+
    25fa:	fc 91       	ld	r31, X
    25fc:	86 8d       	ldd	r24, Z+30	; 0x1e
    25fe:	97 8d       	ldd	r25, Z+31	; 0x1f
    2600:	a0 a1       	ldd	r26, Z+32	; 0x20
    2602:	b1 a1       	ldd	r27, Z+33	; 0x21
    2604:	48 17       	cp	r20, r24
    2606:	59 07       	cpc	r21, r25
    2608:	6a 07       	cpc	r22, r26
    260a:	7b 07       	cpc	r23, r27
    260c:	38 f0       	brcs	.+14     	; 0x261c <f_lseek+0x218>
    260e:	5e 82       	std	Y+6, r5	; 0x06
    2610:	4d 82       	std	Y+5, r4	; 0x05
    2612:	f2 01       	movw	r30, r4
    2614:	84 81       	ldd	r24, Z+4	; 0x04
    2616:	80 68       	ori	r24, 0x80	; 128
    2618:	84 83       	std	Z+4, r24	; 0x04
    261a:	9d c0       	rjmp	.+314    	; 0x2756 <f_lseek+0x352>
				fp->curr_clust = clst;
    261c:	d2 01       	movw	r26, r4
    261e:	52 96       	adiw	r26, 0x12	; 18
    2620:	4d 93       	st	X+, r20
    2622:	5d 93       	st	X+, r21
    2624:	6d 93       	st	X+, r22
    2626:	7c 93       	st	X, r23
    2628:	55 97       	sbiw	r26, 0x15	; 21
				fp->fptr += bcs;
    262a:	16 96       	adiw	r26, 0x06	; 6
    262c:	8d 91       	ld	r24, X+
    262e:	9d 91       	ld	r25, X+
    2630:	0d 90       	ld	r0, X+
    2632:	bc 91       	ld	r27, X
    2634:	a0 2d       	mov	r26, r0
    2636:	8a 0d       	add	r24, r10
    2638:	9b 1d       	adc	r25, r11
    263a:	ac 1d       	adc	r26, r12
    263c:	bd 1d       	adc	r27, r13
    263e:	f2 01       	movw	r30, r4
    2640:	86 83       	std	Z+6, r24	; 0x06
    2642:	97 83       	std	Z+7, r25	; 0x07
    2644:	a0 87       	std	Z+8, r26	; 0x08
    2646:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= bcs;
    2648:	ea 18       	sub	r14, r10
    264a:	fb 08       	sbc	r15, r11
    264c:	0c 09       	sbc	r16, r12
    264e:	1d 09       	sbc	r17, r13
			}
#endif
			fp->curr_clust = clst;
		}
		if (clst != 0) {
			while (ofs > bcs) {						/* Cluster following loop */
    2650:	ae 14       	cp	r10, r14
    2652:	bf 04       	cpc	r11, r15
    2654:	c0 06       	cpc	r12, r16
    2656:	d1 06       	cpc	r13, r17
    2658:	08 f4       	brcc	.+2      	; 0x265c <f_lseek+0x258>
    265a:	9e cf       	rjmp	.-196    	; 0x2598 <f_lseek+0x194>
    265c:	5e 82       	std	Y+6, r5	; 0x06
    265e:	4d 82       	std	Y+5, r4	; 0x05
    2660:	04 c0       	rjmp	.+8      	; 0x266a <f_lseek+0x266>
    2662:	5e 82       	std	Y+6, r5	; 0x06
    2664:	4d 82       	std	Y+5, r4	; 0x05
#if !_FS_READONLY
				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
					if (clst == 0) {				/* When disk gets full, clip file size */
    2666:	86 01       	movw	r16, r12
    2668:	75 01       	movw	r14, r10
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
				fp->curr_clust = clst;
				fp->fptr += bcs;
				ofs -= bcs;
			}
			fp->fptr += ofs;
    266a:	ed 81       	ldd	r30, Y+5	; 0x05
    266c:	fe 81       	ldd	r31, Y+6	; 0x06
    266e:	86 81       	ldd	r24, Z+6	; 0x06
    2670:	97 81       	ldd	r25, Z+7	; 0x07
    2672:	a0 85       	ldd	r26, Z+8	; 0x08
    2674:	b1 85       	ldd	r27, Z+9	; 0x09
    2676:	8e 0d       	add	r24, r14
    2678:	9f 1d       	adc	r25, r15
    267a:	a0 1f       	adc	r26, r16
    267c:	b1 1f       	adc	r27, r17
    267e:	86 83       	std	Z+6, r24	; 0x06
    2680:	97 83       	std	Z+7, r25	; 0x07
    2682:	a0 87       	std	Z+8, r26	; 0x08
    2684:	b1 87       	std	Z+9, r27	; 0x09
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
    2686:	d8 01       	movw	r26, r16
    2688:	c7 01       	movw	r24, r14
    268a:	29 e0       	ldi	r18, 0x09	; 9
    268c:	b6 95       	lsr	r27
    268e:	a7 95       	ror	r26
    2690:	97 95       	ror	r25
    2692:	87 95       	ror	r24
    2694:	2a 95       	dec	r18
    2696:	d1 f7       	brne	.-12     	; 0x268c <f_lseek+0x288>
    2698:	a8 2e       	mov	r10, r24
    269a:	85 83       	std	Z+5, r24	; 0x05
			if (ofs % SS(fp->fs)) {
    269c:	d8 01       	movw	r26, r16
    269e:	c7 01       	movw	r24, r14
    26a0:	91 70       	andi	r25, 0x01	; 1
    26a2:	a0 70       	andi	r26, 0x00	; 0
    26a4:	b0 70       	andi	r27, 0x00	; 0
    26a6:	00 97       	sbiw	r24, 0x00	; 0
    26a8:	a1 05       	cpc	r26, r1
    26aa:	b1 05       	cpc	r27, r1
    26ac:	e1 f0       	breq	.+56     	; 0x26e6 <f_lseek+0x2e2>
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
    26ae:	80 81       	ld	r24, Z
    26b0:	91 81       	ldd	r25, Z+1	; 0x01
    26b2:	0e 94 24 07 	call	0xe48	; 0xe48 <clust2sect>
				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    26b6:	61 15       	cp	r22, r1
    26b8:	71 05       	cpc	r23, r1
    26ba:	81 05       	cpc	r24, r1
    26bc:	91 05       	cpc	r25, r1
    26be:	51 f4       	brne	.+20     	; 0x26d4 <f_lseek+0x2d0>
    26c0:	ad 81       	ldd	r26, Y+5	; 0x05
    26c2:	be 81       	ldd	r27, Y+6	; 0x06
    26c4:	14 96       	adiw	r26, 0x04	; 4
    26c6:	8c 91       	ld	r24, X
    26c8:	14 97       	sbiw	r26, 0x04	; 4
    26ca:	80 68       	ori	r24, 0x80	; 128
    26cc:	14 96       	adiw	r26, 0x04	; 4
    26ce:	8c 93       	st	X, r24
    26d0:	14 97       	sbiw	r26, 0x04	; 4
    26d2:	41 c0       	rjmp	.+130    	; 0x2756 <f_lseek+0x352>
				nsect += fp->csect;
    26d4:	6a 0d       	add	r22, r10
    26d6:	71 1d       	adc	r23, r1
    26d8:	81 1d       	adc	r24, r1
    26da:	91 1d       	adc	r25, r1
				fp->csect++;
    26dc:	a3 94       	inc	r10
    26de:	ed 81       	ldd	r30, Y+5	; 0x05
    26e0:	fe 81       	ldd	r31, Y+6	; 0x06
    26e2:	a5 82       	std	Z+5, r10	; 0x05
    26e4:	03 c0       	rjmp	.+6      	; 0x26ec <f_lseek+0x2e8>
		 && !(fp->flag & FA_WRITE)
#endif
		) ofs = fp->fsize;

	ifptr = fp->fptr;
	fp->fptr = nsect = 0; fp->csect = 255;
    26e6:	60 e0       	ldi	r22, 0x00	; 0
    26e8:	70 e0       	ldi	r23, 0x00	; 0
    26ea:	cb 01       	movw	r24, r22
				nsect += fp->csect;
				fp->csect++;
			}
		}
	}
	if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
    26ec:	ad 81       	ldd	r26, Y+5	; 0x05
    26ee:	be 81       	ldd	r27, Y+6	; 0x06
    26f0:	16 96       	adiw	r26, 0x06	; 6
    26f2:	ed 90       	ld	r14, X+
    26f4:	fd 90       	ld	r15, X+
    26f6:	0d 91       	ld	r16, X+
    26f8:	1c 91       	ld	r17, X
    26fa:	19 97       	sbiw	r26, 0x09	; 9
    26fc:	a8 01       	movw	r20, r16
    26fe:	97 01       	movw	r18, r14
    2700:	31 70       	andi	r19, 0x01	; 1
    2702:	40 70       	andi	r20, 0x00	; 0
    2704:	50 70       	andi	r21, 0x00	; 0
    2706:	21 15       	cp	r18, r1
    2708:	31 05       	cpc	r19, r1
    270a:	41 05       	cpc	r20, r1
    270c:	51 05       	cpc	r21, r1
    270e:	81 f0       	breq	.+32     	; 0x2730 <f_lseek+0x32c>
    2710:	56 96       	adiw	r26, 0x16	; 22
    2712:	2d 91       	ld	r18, X+
    2714:	3d 91       	ld	r19, X+
    2716:	4d 91       	ld	r20, X+
    2718:	5c 91       	ld	r21, X
    271a:	59 97       	sbiw	r26, 0x19	; 25
    271c:	62 17       	cp	r22, r18
    271e:	73 07       	cpc	r23, r19
    2720:	84 07       	cpc	r24, r20
    2722:	95 07       	cpc	r25, r21
    2724:	29 f0       	breq	.+10     	; 0x2730 <f_lseek+0x32c>
		}
#endif
		if (disk_read(fp->fs->drive, fp->buf, nsect, 1) != RES_OK)
			ABORT(fp->fs, FR_DISK_ERR);
#endif
		fp->dsect = nsect;
    2726:	fd 01       	movw	r30, r26
    2728:	66 8b       	std	Z+22, r22	; 0x16
    272a:	77 8b       	std	Z+23, r23	; 0x17
    272c:	80 8f       	std	Z+24, r24	; 0x18
    272e:	91 8f       	std	Z+25, r25	; 0x19
	}
#if !_FS_READONLY
	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
    2730:	ed 81       	ldd	r30, Y+5	; 0x05
    2732:	fe 81       	ldd	r31, Y+6	; 0x06
    2734:	82 85       	ldd	r24, Z+10	; 0x0a
    2736:	93 85       	ldd	r25, Z+11	; 0x0b
    2738:	a4 85       	ldd	r26, Z+12	; 0x0c
    273a:	b5 85       	ldd	r27, Z+13	; 0x0d
    273c:	8e 15       	cp	r24, r14
    273e:	9f 05       	cpc	r25, r15
    2740:	a0 07       	cpc	r26, r16
    2742:	b1 07       	cpc	r27, r17
    2744:	58 f4       	brcc	.+22     	; 0x275c <f_lseek+0x358>
		fp->fsize = fp->fptr;
    2746:	e2 86       	std	Z+10, r14	; 0x0a
    2748:	f3 86       	std	Z+11, r15	; 0x0b
    274a:	04 87       	std	Z+12, r16	; 0x0c
    274c:	15 87       	std	Z+13, r17	; 0x0d
		fp->flag |= FA__WRITTEN;
    274e:	84 81       	ldd	r24, Z+4	; 0x04
    2750:	80 62       	ori	r24, 0x20	; 32
    2752:	84 83       	std	Z+4, r24	; 0x04
    2754:	03 c0       	rjmp	.+6      	; 0x275c <f_lseek+0x358>


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)			/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    2756:	72 e0       	ldi	r23, 0x02	; 2
    2758:	87 2e       	mov	r8, r23
    275a:	91 2c       	mov	r9, r1
		fp->flag |= FA__WRITTEN;
	}
#endif

	LEAVE_FF(fp->fs, res);
}
    275c:	c4 01       	movw	r24, r8
    275e:	26 96       	adiw	r28, 0x06	; 6
    2760:	e2 e1       	ldi	r30, 0x12	; 18
    2762:	0c 94 e7 2d 	jmp	0x5bce	; 0x5bce <__epilogue_restores__>

00002766 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const XCHAR *path	/* Pointer to the directory path */
)
{
    2766:	ae e0       	ldi	r26, 0x0E	; 14
    2768:	b0 e0       	ldi	r27, 0x00	; 0
    276a:	e9 eb       	ldi	r30, 0xB9	; 185
    276c:	f3 e1       	ldi	r31, 0x13	; 19
    276e:	0c 94 d9 2d 	jmp	0x5bb2	; 0x5bb2 <__prologue_saves__+0x1c>
    2772:	8c 01       	movw	r16, r24
    2774:	7e 87       	std	Y+14, r23	; 0x0e
    2776:	6d 87       	std	Y+13, r22	; 0x0d
	FRESULT res;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj->fs, 0);
    2778:	ce 01       	movw	r24, r28
    277a:	0d 96       	adiw	r24, 0x0d	; 13
    277c:	b8 01       	movw	r22, r16
    277e:	40 e0       	ldi	r20, 0x00	; 0
    2780:	0e 94 42 0a 	call	0x1484	; 0x1484 <chk_mounted>
    2784:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    2786:	00 97       	sbiw	r24, 0x00	; 0
    2788:	09 f0       	breq	.+2      	; 0x278c <f_opendir+0x26>
    278a:	40 c0       	rjmp	.+128    	; 0x280c <f_opendir+0xa6>
		INITBUF((*dj), sfn, lfn);
    278c:	ce 01       	movw	r24, r28
    278e:	01 96       	adiw	r24, 0x01	; 1
    2790:	d8 01       	movw	r26, r16
    2792:	55 96       	adiw	r26, 0x15	; 21
    2794:	9c 93       	st	X, r25
    2796:	8e 93       	st	-X, r24
    2798:	54 97       	sbiw	r26, 0x14	; 20
		res = follow_path(dj, path);			/* Follow the path to the directory */
    279a:	6d 85       	ldd	r22, Y+13	; 0x0d
    279c:	7e 85       	ldd	r23, Y+14	; 0x0e
    279e:	c8 01       	movw	r24, r16
    27a0:	0e 94 e5 08 	call	0x11ca	; 0x11ca <follow_path>
    27a4:	9c 01       	movw	r18, r24
		if (res == FR_OK) {						/* Follow completed */
    27a6:	00 97       	sbiw	r24, 0x00	; 0
    27a8:	61 f5       	brne	.+88     	; 0x2802 <f_opendir+0x9c>
			dir = dj->dir;
    27aa:	d8 01       	movw	r26, r16
    27ac:	52 96       	adiw	r26, 0x12	; 18
    27ae:	ed 91       	ld	r30, X+
    27b0:	fc 91       	ld	r31, X
    27b2:	53 97       	sbiw	r26, 0x13	; 19
			if (dir) {							/* It is not the root dir */
    27b4:	30 97       	sbiw	r30, 0x00	; 0
    27b6:	b9 f0       	breq	.+46     	; 0x27e6 <f_opendir+0x80>
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    27b8:	83 85       	ldd	r24, Z+11	; 0x0b
    27ba:	84 ff       	sbrs	r24, 4
    27bc:	25 c0       	rjmp	.+74     	; 0x2808 <f_opendir+0xa2>
					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    27be:	84 89       	ldd	r24, Z+20	; 0x14
    27c0:	95 89       	ldd	r25, Z+21	; 0x15
    27c2:	a0 e0       	ldi	r26, 0x00	; 0
    27c4:	b0 e0       	ldi	r27, 0x00	; 0
    27c6:	dc 01       	movw	r26, r24
    27c8:	99 27       	eor	r25, r25
    27ca:	88 27       	eor	r24, r24
    27cc:	22 8d       	ldd	r18, Z+26	; 0x1a
    27ce:	33 8d       	ldd	r19, Z+27	; 0x1b
    27d0:	40 e0       	ldi	r20, 0x00	; 0
    27d2:	50 e0       	ldi	r21, 0x00	; 0
    27d4:	82 2b       	or	r24, r18
    27d6:	93 2b       	or	r25, r19
    27d8:	a4 2b       	or	r26, r20
    27da:	b5 2b       	or	r27, r21
    27dc:	f8 01       	movw	r30, r16
    27de:	86 83       	std	Z+6, r24	; 0x06
    27e0:	97 83       	std	Z+7, r25	; 0x07
    27e2:	a0 87       	std	Z+8, r26	; 0x08
    27e4:	b1 87       	std	Z+9, r27	; 0x09
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
    27e6:	d8 01       	movw	r26, r16
    27e8:	ed 91       	ld	r30, X+
    27ea:	fc 91       	ld	r31, X
    27ec:	11 97       	sbiw	r26, 0x01	; 1
    27ee:	86 81       	ldd	r24, Z+6	; 0x06
    27f0:	97 81       	ldd	r25, Z+7	; 0x07
    27f2:	13 96       	adiw	r26, 0x03	; 3
    27f4:	9c 93       	st	X, r25
    27f6:	8e 93       	st	-X, r24
    27f8:	12 97       	sbiw	r26, 0x02	; 2
				res = dir_seek(dj, 0);			/* Rewind dir */
    27fa:	c8 01       	movw	r24, r16
    27fc:	0e 94 63 08 	call	0x10c6	; 0x10c6 <dir_seek.clone.1>
    2800:	9c 01       	movw	r18, r24
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    2802:	24 30       	cpi	r18, 0x04	; 4
    2804:	31 05       	cpc	r19, r1
    2806:	11 f4       	brne	.+4      	; 0x280c <f_opendir+0xa6>
    2808:	25 e0       	ldi	r18, 0x05	; 5
    280a:	30 e0       	ldi	r19, 0x00	; 0
	}

	LEAVE_FF(dj->fs, res);
}
    280c:	c9 01       	movw	r24, r18
    280e:	2e 96       	adiw	r28, 0x0e	; 14
    2810:	e4 e0       	ldi	r30, 0x04	; 4
    2812:	0c 94 f5 2d 	jmp	0x5bea	; 0x5bea <__epilogue_restores__+0x1c>

00002816 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    2816:	ac e0       	ldi	r26, 0x0C	; 12
    2818:	b0 e0       	ldi	r27, 0x00	; 0
    281a:	e1 e1       	ldi	r30, 0x11	; 17
    281c:	f4 e1       	ldi	r31, 0x14	; 20
    281e:	0c 94 d3 2d 	jmp	0x5ba6	; 0x5ba6 <__prologue_saves__+0x10>
    2822:	8c 01       	movw	r16, r24
    2824:	7b 01       	movw	r14, r22
	FRESULT res;
	NAMEBUF(sfn, lfn);


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    2826:	dc 01       	movw	r26, r24
    2828:	12 96       	adiw	r26, 0x02	; 2
    282a:	6d 91       	ld	r22, X+
    282c:	7c 91       	ld	r23, X
    282e:	13 97       	sbiw	r26, 0x03	; 3
    2830:	8d 91       	ld	r24, X+
    2832:	9c 91       	ld	r25, X
    2834:	0e 94 0d 04 	call	0x81a	; 0x81a <validate>
    2838:	6c 01       	movw	r12, r24
	if (res == FR_OK) {
    283a:	00 97       	sbiw	r24, 0x00	; 0
    283c:	09 f0       	breq	.+2      	; 0x2840 <f_readdir+0x2a>
    283e:	ab c0       	rjmp	.+342    	; 0x2996 <f_readdir+0x180>
		INITBUF((*dj), sfn, lfn);
    2840:	ce 01       	movw	r24, r28
    2842:	01 96       	adiw	r24, 0x01	; 1
    2844:	f8 01       	movw	r30, r16
    2846:	95 8b       	std	Z+21, r25	; 0x15
    2848:	84 8b       	std	Z+20, r24	; 0x14
		if (!fno) {
    284a:	e1 14       	cp	r14, r1
    284c:	f1 04       	cpc	r15, r1
    284e:	09 f5       	brne	.+66     	; 0x2892 <f_readdir+0x7c>
			res = dir_seek(dj, 0);
    2850:	c8 01       	movw	r24, r16
    2852:	0e 94 63 08 	call	0x10c6	; 0x10c6 <dir_seek.clone.1>
    2856:	9e c0       	rjmp	.+316    	; 0x2994 <f_readdir+0x17e>
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
    2858:	d8 01       	movw	r26, r16
    285a:	8d 91       	ld	r24, X+
    285c:	9c 91       	ld	r25, X
    285e:	0e 94 27 04 	call	0x84e	; 0x84e <move_window>
		if (res != FR_OK) break;
    2862:	00 97       	sbiw	r24, 0x00	; 0
    2864:	21 f5       	brne	.+72     	; 0x28ae <f_readdir+0x98>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    2866:	d8 01       	movw	r26, r16
    2868:	52 96       	adiw	r26, 0x12	; 18
    286a:	ed 91       	ld	r30, X+
    286c:	fc 91       	ld	r31, X
    286e:	53 97       	sbiw	r26, 0x13	; 19
		c = dir[DIR_Name];
    2870:	80 81       	ld	r24, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    2872:	88 23       	and	r24, r24
    2874:	09 f4       	brne	.+2      	; 0x2878 <f_readdir+0x62>
    2876:	94 c0       	rjmp	.+296    	; 0x29a0 <f_readdir+0x18a>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    2878:	85 3e       	cpi	r24, 0xE5	; 229
    287a:	19 f0       	breq	.+6      	; 0x2882 <f_readdir+0x6c>
    287c:	83 85       	ldd	r24, Z+11	; 0x0b
    287e:	83 ff       	sbrs	r24, 3
    2880:	21 c0       	rjmp	.+66     	; 0x28c4 <f_readdir+0xae>
			break;
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
    2882:	c8 01       	movw	r24, r16
    2884:	60 e0       	ldi	r22, 0x00	; 0
    2886:	70 e0       	ldi	r23, 0x00	; 0
    2888:	0e 94 53 07 	call	0xea6	; 0xea6 <dir_next>
		if (res != FR_OK) break;
    288c:	00 97       	sbiw	r24, 0x00	; 0
    288e:	19 f0       	breq	.+6      	; 0x2896 <f_readdir+0x80>
    2890:	0e c0       	rjmp	.+28     	; 0x28ae <f_readdir+0x98>


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
	if (res == FR_OK) {
		INITBUF((*dj), sfn, lfn);
		if (!fno) {
    2892:	84 e0       	ldi	r24, 0x04	; 4
    2894:	90 e0       	ldi	r25, 0x00	; 0
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
    2896:	f8 01       	movw	r30, r16
    2898:	46 85       	ldd	r20, Z+14	; 0x0e
    289a:	57 85       	ldd	r21, Z+15	; 0x0f
    289c:	60 89       	ldd	r22, Z+16	; 0x10
    289e:	71 89       	ldd	r23, Z+17	; 0x11
    28a0:	41 15       	cp	r20, r1
    28a2:	51 05       	cpc	r21, r1
    28a4:	61 05       	cpc	r22, r1
    28a6:	71 05       	cpc	r23, r1
    28a8:	b9 f6       	brne	.-82     	; 0x2858 <f_readdir+0x42>
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    28aa:	00 97       	sbiw	r24, 0x00	; 0
    28ac:	59 f0       	breq	.+22     	; 0x28c4 <f_readdir+0xae>
    28ae:	d8 01       	movw	r26, r16
    28b0:	1e 96       	adiw	r26, 0x0e	; 14
    28b2:	1d 92       	st	X+, r1
    28b4:	1d 92       	st	X+, r1
    28b6:	1d 92       	st	X+, r1
    28b8:	1c 92       	st	X, r1
    28ba:	51 97       	sbiw	r26, 0x11	; 17
		INITBUF((*dj), sfn, lfn);
		if (!fno) {
			res = dir_seek(dj, 0);
		} else {
			res = dir_read(dj);
			if (res == FR_NO_FILE) {
    28bc:	84 30       	cpi	r24, 0x04	; 4
    28be:	91 05       	cpc	r25, r1
    28c0:	09 f0       	breq	.+2      	; 0x28c4 <f_readdir+0xae>
    28c2:	68 c0       	rjmp	.+208    	; 0x2994 <f_readdir+0x17e>
	int i;
	BYTE c, nt, *dir;
	char *p;


	p = fno->fname;
    28c4:	97 01       	movw	r18, r14
    28c6:	27 5f       	subi	r18, 0xF7	; 247
    28c8:	3f 4f       	sbci	r19, 0xFF	; 255
	if (dj->sect) {
    28ca:	f8 01       	movw	r30, r16
    28cc:	86 85       	ldd	r24, Z+14	; 0x0e
    28ce:	97 85       	ldd	r25, Z+15	; 0x0f
    28d0:	a0 89       	ldd	r26, Z+16	; 0x10
    28d2:	b1 89       	ldd	r27, Z+17	; 0x11
    28d4:	00 97       	sbiw	r24, 0x00	; 0
    28d6:	a1 05       	cpc	r26, r1
    28d8:	b1 05       	cpc	r27, r1
    28da:	09 f4       	brne	.+2      	; 0x28de <f_readdir+0xc8>
    28dc:	49 c0       	rjmp	.+146    	; 0x2970 <f_readdir+0x15a>
		dir = dj->dir;
    28de:	a2 88       	ldd	r10, Z+18	; 0x12
    28e0:	b3 88       	ldd	r11, Z+19	; 0x13
    28e2:	f5 01       	movw	r30, r10
    28e4:	c9 01       	movw	r24, r18
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
    28e6:	40 e0       	ldi	r20, 0x00	; 0
    28e8:	50 e0       	ldi	r21, 0x00	; 0
	char *p;


	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
    28ea:	9c 01       	movw	r18, r24
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
    28ec:	61 91       	ld	r22, Z+
			if (c == ' ') break;
    28ee:	60 32       	cpi	r22, 0x20	; 32
    28f0:	61 f0       	breq	.+24     	; 0x290a <f_readdir+0xf4>
			if (c == 0x05) c = 0xE5;
    28f2:	65 30       	cpi	r22, 0x05	; 5
    28f4:	09 f4       	brne	.+2      	; 0x28f8 <f_readdir+0xe2>
    28f6:	65 ee       	ldi	r22, 0xE5	; 229
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
    28f8:	dc 01       	movw	r26, r24
    28fa:	6d 93       	st	X+, r22
    28fc:	cd 01       	movw	r24, r26
    28fe:	9d 01       	movw	r18, r26

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
    2900:	4f 5f       	subi	r20, 0xFF	; 255
    2902:	5f 4f       	sbci	r21, 0xFF	; 255
    2904:	48 30       	cpi	r20, 0x08	; 8
    2906:	51 05       	cpc	r21, r1
    2908:	81 f7       	brne	.-32     	; 0x28ea <f_readdir+0xd4>
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
    290a:	a5 01       	movw	r20, r10
    290c:	48 5f       	subi	r20, 0xF8	; 248
    290e:	5f 4f       	sbci	r21, 0xFF	; 255
    2910:	f5 01       	movw	r30, r10
    2912:	60 85       	ldd	r22, Z+8	; 0x08
    2914:	60 32       	cpi	r22, 0x20	; 32
    2916:	79 f0       	breq	.+30     	; 0x2936 <f_readdir+0x120>
			*p++ = '.';
    2918:	dc 01       	movw	r26, r24
    291a:	2e e2       	ldi	r18, 0x2E	; 46
    291c:	2d 93       	st	X+, r18

/*-----------------------------------------------------------------------*/
/* Read Directory Entry in Sequense                                      */
/*-----------------------------------------------------------------------*/

FRESULT f_readdir (
    291e:	04 96       	adiw	r24, 0x04	; 4
    2920:	9d 01       	movw	r18, r26
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
    2922:	fa 01       	movw	r30, r20
    2924:	61 91       	ld	r22, Z+
    2926:	af 01       	movw	r20, r30
				if (c == ' ') break;
    2928:	60 32       	cpi	r22, 0x20	; 32
    292a:	29 f0       	breq	.+10     	; 0x2936 <f_readdir+0x120>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
    292c:	6d 93       	st	X+, r22
    292e:	9d 01       	movw	r18, r26
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    2930:	a8 17       	cp	r26, r24
    2932:	b9 07       	cpc	r27, r25
    2934:	a9 f7       	brne	.-22     	; 0x2920 <f_readdir+0x10a>
				if (c == ' ') break;
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    2936:	d5 01       	movw	r26, r10
    2938:	1b 96       	adiw	r26, 0x0b	; 11
    293a:	8c 91       	ld	r24, X
    293c:	1b 97       	sbiw	r26, 0x0b	; 11
    293e:	f7 01       	movw	r30, r14
    2940:	80 87       	std	Z+8, r24	; 0x08
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    2942:	5c 96       	adiw	r26, 0x1c	; 28
    2944:	8d 91       	ld	r24, X+
    2946:	9d 91       	ld	r25, X+
    2948:	0d 90       	ld	r0, X+
    294a:	bc 91       	ld	r27, X
    294c:	a0 2d       	mov	r26, r0
    294e:	80 83       	st	Z, r24
    2950:	91 83       	std	Z+1, r25	; 0x01
    2952:	a2 83       	std	Z+2, r26	; 0x02
    2954:	b3 83       	std	Z+3, r27	; 0x03
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    2956:	d5 01       	movw	r26, r10
    2958:	58 96       	adiw	r26, 0x18	; 24
    295a:	8d 91       	ld	r24, X+
    295c:	9c 91       	ld	r25, X
    295e:	59 97       	sbiw	r26, 0x19	; 25
    2960:	95 83       	std	Z+5, r25	; 0x05
    2962:	84 83       	std	Z+4, r24	; 0x04
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    2964:	56 96       	adiw	r26, 0x16	; 22
    2966:	8d 91       	ld	r24, X+
    2968:	9c 91       	ld	r25, X
    296a:	57 97       	sbiw	r26, 0x17	; 23
    296c:	97 83       	std	Z+7, r25	; 0x07
    296e:	86 83       	std	Z+6, r24	; 0x06
	}
	*p = 0;
    2970:	f9 01       	movw	r30, r18
    2972:	10 82       	st	Z, r1
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj, FALSE);	/* Increment index for next */
    2974:	c8 01       	movw	r24, r16
    2976:	60 e0       	ldi	r22, 0x00	; 0
    2978:	70 e0       	ldi	r23, 0x00	; 0
    297a:	0e 94 53 07 	call	0xea6	; 0xea6 <dir_next>
				if (res == FR_NO_FILE) {
    297e:	84 30       	cpi	r24, 0x04	; 4
    2980:	91 05       	cpc	r25, r1
    2982:	41 f4       	brne	.+16     	; 0x2994 <f_readdir+0x17e>
					dj->sect = 0;
    2984:	d8 01       	movw	r26, r16
    2986:	1e 96       	adiw	r26, 0x0e	; 14
    2988:	1d 92       	st	X+, r1
    298a:	1d 92       	st	X+, r1
    298c:	1d 92       	st	X+, r1
    298e:	1c 92       	st	X, r1
    2990:	51 97       	sbiw	r26, 0x11	; 17
    2992:	01 c0       	rjmp	.+2      	; 0x2996 <f_readdir+0x180>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj, FALSE);	/* Increment index for next */
				if (res == FR_NO_FILE) {
    2994:	6c 01       	movw	r12, r24
			}
		}
	}

	LEAVE_FF(dj->fs, res);
}
    2996:	c6 01       	movw	r24, r12
    2998:	2c 96       	adiw	r28, 0x0c	; 12
    299a:	ea e0       	ldi	r30, 0x0A	; 10
    299c:	0c 94 ef 2d 	jmp	0x5bde	; 0x5bde <__epilogue_restores__+0x10>
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    29a0:	84 e0       	ldi	r24, 0x04	; 4
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	84 cf       	rjmp	.-248    	; 0x28ae <f_readdir+0x98>

000029a6 <rcvr_spi>:
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    29a6:	8f ef       	ldi	r24, 0xFF	; 255
    29a8:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    29aa:	0d b4       	in	r0, 0x2d	; 45
    29ac:	07 fe       	sbrs	r0, 7
    29ae:	fd cf       	rjmp	.-6      	; 0x29aa <rcvr_spi+0x4>
	return SPDR;
    29b0:	8e b5       	in	r24, 0x2e	; 46
}
    29b2:	08 95       	ret

000029b4 <wait_ready>:
BYTE wait_ready (void)
{
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
    29b4:	82 e3       	ldi	r24, 0x32	; 50
    29b6:	80 93 b8 03 	sts	0x03B8, r24
	rcvr_spi();
    29ba:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <rcvr_spi>
	do
		res = rcvr_spi();
    29be:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <rcvr_spi>
	while ((res != 0xFF) && Timer2);
    29c2:	8f 3f       	cpi	r24, 0xFF	; 255
    29c4:	21 f0       	breq	.+8      	; 0x29ce <wait_ready+0x1a>
    29c6:	90 91 b8 03 	lds	r25, 0x03B8
    29ca:	99 23       	and	r25, r25
    29cc:	c1 f7       	brne	.-16     	; 0x29be <wait_ready+0xa>

	return res;
}
    29ce:	08 95       	ret

000029d0 <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    29d0:	28 9a       	sbi	0x05, 0	; 5
	rcvr_spi();
    29d2:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <rcvr_spi>
}
    29d6:	08 95       	ret

000029d8 <select>:
/*-----------------------------------------------------------------------*/

static
BOOL select (void)	/* TRUE:Successful, FALSE:Timeout */
{
	CS_LOW();
    29d8:	28 98       	cbi	0x05, 0	; 5
	if (wait_ready() != 0xFF) {
    29da:	0e 94 da 14 	call	0x29b4	; 0x29b4 <wait_ready>
    29de:	8f 3f       	cpi	r24, 0xFF	; 255
    29e0:	29 f0       	breq	.+10     	; 0x29ec <select+0x14>
		deselect();
    29e2:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <deselect>
		return FALSE;
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	02 c0       	rjmp	.+4      	; 0x29f0 <select+0x18>
	}
	return TRUE;
    29ec:	21 e0       	ldi	r18, 0x01	; 1
    29ee:	30 e0       	ldi	r19, 0x00	; 0
}
    29f0:	c9 01       	movw	r24, r18
    29f2:	08 95       	ret

000029f4 <power_on>:
#if (defined SD_PWR_PIN | defined SD_PWR_PORT)
   DDRC|=(1<<SD_PWR_PIN);          // Turns on PWR pin as output
   SD_PWR_PORT|=(1<<SD_PWR_PIN);   // Drives PWR pin high
#endif

   DDRC|=(1<<SD_CS_PIN);          // Turns on CS pin as output
    29f4:	38 9a       	sbi	0x07, 0	; 7
   DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)| (1<<DD_SS);
    29f6:	87 e0       	ldi	r24, 0x07	; 7
    29f8:	84 b9       	out	0x04, r24	; 4
   SPCR = (1<<SPE)|(1<<MSTR); /* Initialize SPI port (Mode 0) */ 
    29fa:	80 e5       	ldi	r24, 0x50	; 80
    29fc:	8c bd       	out	0x2c, r24	; 44
}
    29fe:	08 95       	ret

00002a00 <power_off>:

static
void power_off (void)
{
   CS_LOW();            /* Wait for card ready */
    2a00:	28 98       	cbi	0x05, 0	; 5
   wait_ready();
    2a02:	0e 94 da 14 	call	0x29b4	; 0x29b4 <wait_ready>
   SPCR = 0;
    2a06:	1c bc       	out	0x2c, r1	; 44
   Stat |= STA_NOINIT;      /* Set STA_NOINIT */
    2a08:	80 91 0e 01 	lds	r24, 0x010E
    2a0c:	81 60       	ori	r24, 0x01	; 1
    2a0e:	80 93 0e 01 	sts	0x010E, r24
}
    2a12:	08 95       	ret

00002a14 <rcvr_datablock>:
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    2a14:	0f 93       	push	r16
    2a16:	1f 93       	push	r17
    2a18:	cf 93       	push	r28
    2a1a:	df 93       	push	r29
    2a1c:	ec 01       	movw	r28, r24
    2a1e:	8b 01       	movw	r16, r22
	BYTE token;


	Timer1 = 20;
    2a20:	84 e1       	ldi	r24, 0x14	; 20
    2a22:	80 93 b7 03 	sts	0x03B7, r24
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
    2a26:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <rcvr_spi>
	} while ((token == 0xFF) && Timer1);
    2a2a:	8f 3f       	cpi	r24, 0xFF	; 255
    2a2c:	29 f4       	brne	.+10     	; 0x2a38 <rcvr_datablock+0x24>
    2a2e:	80 91 b7 03 	lds	r24, 0x03B7
    2a32:	88 23       	and	r24, r24
    2a34:	c1 f7       	brne	.-16     	; 0x2a26 <rcvr_datablock+0x12>
    2a36:	27 c0       	rjmp	.+78     	; 0x2a86 <rcvr_datablock+0x72>
	if(token != 0xFE) return FALSE;	/* If not valid data token, retutn with error */
    2a38:	8e 3f       	cpi	r24, 0xFE	; 254
    2a3a:	29 f5       	brne	.+74     	; 0x2a86 <rcvr_datablock+0x72>

	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
    2a3c:	8f ef       	ldi	r24, 0xFF	; 255
    2a3e:	8e bd       	out	0x2e, r24	; 46
    2a40:	0d b4       	in	r0, 0x2d	; 45
    2a42:	07 fe       	sbrs	r0, 7
    2a44:	fd cf       	rjmp	.-6      	; 0x2a40 <rcvr_datablock+0x2c>
    2a46:	9e b5       	in	r25, 0x2e	; 46
    2a48:	98 83       	st	Y, r25
		rcvr_spi_m(buff++);
    2a4a:	8e bd       	out	0x2e, r24	; 46
    2a4c:	0d b4       	in	r0, 0x2d	; 45
    2a4e:	07 fe       	sbrs	r0, 7
    2a50:	fd cf       	rjmp	.-6      	; 0x2a4c <rcvr_datablock+0x38>
    2a52:	9e b5       	in	r25, 0x2e	; 46
    2a54:	99 83       	std	Y+1, r25	; 0x01
		rcvr_spi_m(buff++);
    2a56:	8e bd       	out	0x2e, r24	; 46
    2a58:	0d b4       	in	r0, 0x2d	; 45
    2a5a:	07 fe       	sbrs	r0, 7
    2a5c:	fd cf       	rjmp	.-6      	; 0x2a58 <rcvr_datablock+0x44>
    2a5e:	9e b5       	in	r25, 0x2e	; 46
    2a60:	9a 83       	std	Y+2, r25	; 0x02
		rcvr_spi_m(buff++);
    2a62:	8e bd       	out	0x2e, r24	; 46
    2a64:	0d b4       	in	r0, 0x2d	; 45
    2a66:	07 fe       	sbrs	r0, 7
    2a68:	fd cf       	rjmp	.-6      	; 0x2a64 <rcvr_datablock+0x50>
    2a6a:	9e b5       	in	r25, 0x2e	; 46
    2a6c:	9b 83       	std	Y+3, r25	; 0x03
	} while (btr -= 4);
    2a6e:	04 50       	subi	r16, 0x04	; 4
    2a70:	10 40       	sbci	r17, 0x00	; 0
    2a72:	11 f0       	breq	.+4      	; 0x2a78 <rcvr_datablock+0x64>
/*-----------------------------------------------------------------------*/
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static
BOOL rcvr_datablock (
    2a74:	24 96       	adiw	r28, 0x04	; 4
    2a76:	e3 cf       	rjmp	.-58     	; 0x2a3e <rcvr_datablock+0x2a>
		rcvr_spi_m(buff++);
		rcvr_spi_m(buff++);
		rcvr_spi_m(buff++);
		rcvr_spi_m(buff++);
	} while (btr -= 4);
	rcvr_spi();						/* Discard CRC */
    2a78:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <rcvr_spi>
	rcvr_spi();
    2a7c:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <rcvr_spi>

	return TRUE;					/* Return with success */
    2a80:	21 e0       	ldi	r18, 0x01	; 1
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	02 c0       	rjmp	.+4      	; 0x2a8a <rcvr_datablock+0x76>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
	if(token != 0xFE) return FALSE;	/* If not valid data token, retutn with error */
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	30 e0       	ldi	r19, 0x00	; 0
	} while (btr -= 4);
	rcvr_spi();						/* Discard CRC */
	rcvr_spi();

	return TRUE;					/* Return with success */
}
    2a8a:	c9 01       	movw	r24, r18
    2a8c:	df 91       	pop	r29
    2a8e:	cf 91       	pop	r28
    2a90:	1f 91       	pop	r17
    2a92:	0f 91       	pop	r16
    2a94:	08 95       	ret

00002a96 <xmit_datablock>:
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    2a96:	a1 e0       	ldi	r26, 0x01	; 1
    2a98:	b0 e0       	ldi	r27, 0x00	; 0
    2a9a:	e1 e5       	ldi	r30, 0x51	; 81
    2a9c:	f5 e1       	ldi	r31, 0x15	; 21
    2a9e:	0c 94 d9 2d 	jmp	0x5bb2	; 0x5bb2 <__prologue_saves__+0x1c>
    2aa2:	8c 01       	movw	r16, r24
	BYTE resp, wc;


	if (wait_ready() != 0xFF) return FALSE;
    2aa4:	69 83       	std	Y+1, r22	; 0x01
    2aa6:	0e 94 da 14 	call	0x29b4	; 0x29b4 <wait_ready>
    2aaa:	69 81       	ldd	r22, Y+1	; 0x01
    2aac:	8f 3f       	cpi	r24, 0xFF	; 255
    2aae:	49 f5       	brne	.+82     	; 0x2b02 <xmit_datablock+0x6c>

	xmit_spi(token);					/* Xmit data token */
    2ab0:	6e bd       	out	0x2e, r22	; 46
    2ab2:	0d b4       	in	r0, 0x2d	; 45
    2ab4:	07 fe       	sbrs	r0, 7
    2ab6:	fd cf       	rjmp	.-6      	; 0x2ab2 <xmit_datablock+0x1c>
	if (token != 0xFD) {	/* Is data token */
    2ab8:	6d 3f       	cpi	r22, 0xFD	; 253
    2aba:	31 f1       	breq	.+76     	; 0x2b08 <xmit_datablock+0x72>
    2abc:	80 e0       	ldi	r24, 0x00	; 0
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
    2abe:	f8 01       	movw	r30, r16
    2ac0:	90 81       	ld	r25, Z
    2ac2:	9e bd       	out	0x2e, r25	; 46
    2ac4:	0d b4       	in	r0, 0x2d	; 45
    2ac6:	07 fe       	sbrs	r0, 7
    2ac8:	fd cf       	rjmp	.-6      	; 0x2ac4 <xmit_datablock+0x2e>
			xmit_spi(*buff++);
    2aca:	f8 01       	movw	r30, r16
    2acc:	91 81       	ldd	r25, Z+1	; 0x01
    2ace:	9e bd       	out	0x2e, r25	; 46
    2ad0:	0d b4       	in	r0, 0x2d	; 45
    2ad2:	07 fe       	sbrs	r0, 7
    2ad4:	fd cf       	rjmp	.-6      	; 0x2ad0 <xmit_datablock+0x3a>
		} while (--wc);
    2ad6:	81 50       	subi	r24, 0x01	; 1
    2ad8:	19 f0       	breq	.+6      	; 0x2ae0 <xmit_datablock+0x4a>
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static
BOOL xmit_datablock (
    2ada:	0e 5f       	subi	r16, 0xFE	; 254
    2adc:	1f 4f       	sbci	r17, 0xFF	; 255
    2ade:	ef cf       	rjmp	.-34     	; 0x2abe <xmit_datablock+0x28>
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
			xmit_spi(*buff++);
		} while (--wc);
		xmit_spi(0xFF);					/* CRC (Dummy) */
    2ae0:	8f ef       	ldi	r24, 0xFF	; 255
    2ae2:	8e bd       	out	0x2e, r24	; 46
    2ae4:	0d b4       	in	r0, 0x2d	; 45
    2ae6:	07 fe       	sbrs	r0, 7
    2ae8:	fd cf       	rjmp	.-6      	; 0x2ae4 <xmit_datablock+0x4e>
		xmit_spi(0xFF);
    2aea:	8f ef       	ldi	r24, 0xFF	; 255
    2aec:	8e bd       	out	0x2e, r24	; 46
    2aee:	0d b4       	in	r0, 0x2d	; 45
    2af0:	07 fe       	sbrs	r0, 7
    2af2:	fd cf       	rjmp	.-6      	; 0x2aee <xmit_datablock+0x58>
		resp = rcvr_spi();				/* Reveive data response */
    2af4:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <rcvr_spi>
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
    2af8:	8f 71       	andi	r24, 0x1F	; 31
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static
BOOL xmit_datablock (
    2afa:	21 e0       	ldi	r18, 0x01	; 1
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	85 30       	cpi	r24, 0x05	; 5
    2b00:	29 f0       	breq	.+10     	; 0x2b0c <xmit_datablock+0x76>
)
{
	BYTE resp, wc;


	if (wait_ready() != 0xFF) return FALSE;
    2b02:	20 e0       	ldi	r18, 0x00	; 0
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	02 c0       	rjmp	.+4      	; 0x2b0c <xmit_datablock+0x76>
		resp = rcvr_spi();				/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return FALSE;
	}

	return TRUE;
    2b08:	21 e0       	ldi	r18, 0x01	; 1
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
}
    2b0c:	c9 01       	movw	r24, r18
    2b0e:	21 96       	adiw	r28, 0x01	; 1
    2b10:	e4 e0       	ldi	r30, 0x04	; 4
    2b12:	0c 94 f5 2d 	jmp	0x5bea	; 0x5bea <__epilogue_restores__+0x1c>

00002b16 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    2b16:	a1 e0       	ldi	r26, 0x01	; 1
    2b18:	b0 e0       	ldi	r27, 0x00	; 0
    2b1a:	e1 e9       	ldi	r30, 0x91	; 145
    2b1c:	f5 e1       	ldi	r31, 0x15	; 21
    2b1e:	0c 94 d7 2d 	jmp	0x5bae	; 0x5bae <__prologue_saves__+0x18>
    2b22:	28 2f       	mov	r18, r24
    2b24:	7a 01       	movw	r14, r20
    2b26:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    2b28:	87 ff       	sbrs	r24, 7
    2b2a:	0c c0       	rjmp	.+24     	; 0x2b44 <send_cmd+0x2e>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    2b2c:	87 e7       	ldi	r24, 0x77	; 119
    2b2e:	40 e0       	ldi	r20, 0x00	; 0
    2b30:	50 e0       	ldi	r21, 0x00	; 0
    2b32:	ba 01       	movw	r22, r20
    2b34:	29 83       	std	Y+1, r18	; 0x01
    2b36:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <send_cmd>
		if (res > 1) return res;
    2b3a:	29 81       	ldd	r18, Y+1	; 0x01
    2b3c:	82 30       	cpi	r24, 0x02	; 2
    2b3e:	08 f0       	brcs	.+2      	; 0x2b42 <send_cmd+0x2c>
    2b40:	42 c0       	rjmp	.+132    	; 0x2bc6 <send_cmd+0xb0>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    2b42:	2f 77       	andi	r18, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
    2b44:	29 83       	std	Y+1, r18	; 0x01
    2b46:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <deselect>
	if (!select()) return 0xFF;
    2b4a:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <select>
    2b4e:	29 81       	ldd	r18, Y+1	; 0x01
    2b50:	00 97       	sbiw	r24, 0x00	; 0
    2b52:	c1 f1       	breq	.+112    	; 0x2bc4 <send_cmd+0xae>

	/* Send command packet */
	xmit_spi(cmd);						/* Start + Command index */
    2b54:	2e bd       	out	0x2e, r18	; 46
    2b56:	0d b4       	in	r0, 0x2d	; 45
    2b58:	07 fe       	sbrs	r0, 7
    2b5a:	fd cf       	rjmp	.-6      	; 0x2b56 <send_cmd+0x40>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    2b5c:	81 2f       	mov	r24, r17
    2b5e:	99 27       	eor	r25, r25
    2b60:	aa 27       	eor	r26, r26
    2b62:	bb 27       	eor	r27, r27
    2b64:	8e bd       	out	0x2e, r24	; 46
    2b66:	0d b4       	in	r0, 0x2d	; 45
    2b68:	07 fe       	sbrs	r0, 7
    2b6a:	fd cf       	rjmp	.-6      	; 0x2b66 <send_cmd+0x50>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    2b6c:	c8 01       	movw	r24, r16
    2b6e:	aa 27       	eor	r26, r26
    2b70:	bb 27       	eor	r27, r27
    2b72:	8e bd       	out	0x2e, r24	; 46
    2b74:	0d b4       	in	r0, 0x2d	; 45
    2b76:	07 fe       	sbrs	r0, 7
    2b78:	fd cf       	rjmp	.-6      	; 0x2b74 <send_cmd+0x5e>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    2b7a:	bb 27       	eor	r27, r27
    2b7c:	a1 2f       	mov	r26, r17
    2b7e:	90 2f       	mov	r25, r16
    2b80:	8f 2d       	mov	r24, r15
    2b82:	8e bd       	out	0x2e, r24	; 46
    2b84:	0d b4       	in	r0, 0x2d	; 45
    2b86:	07 fe       	sbrs	r0, 7
    2b88:	fd cf       	rjmp	.-6      	; 0x2b84 <send_cmd+0x6e>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
    2b8a:	ee bc       	out	0x2e, r14	; 46
    2b8c:	0d b4       	in	r0, 0x2d	; 45
    2b8e:	07 fe       	sbrs	r0, 7
    2b90:	fd cf       	rjmp	.-6      	; 0x2b8c <send_cmd+0x76>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    2b92:	20 34       	cpi	r18, 0x40	; 64
    2b94:	21 f0       	breq	.+8      	; 0x2b9e <send_cmd+0x88>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    2b96:	28 34       	cpi	r18, 0x48	; 72
    2b98:	21 f0       	breq	.+8      	; 0x2ba2 <send_cmd+0x8c>
	xmit_spi(cmd);						/* Start + Command index */
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	03 c0       	rjmp	.+6      	; 0x2ba4 <send_cmd+0x8e>
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    2b9e:	85 e9       	ldi	r24, 0x95	; 149
    2ba0:	01 c0       	rjmp	.+2      	; 0x2ba4 <send_cmd+0x8e>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    2ba2:	87 e8       	ldi	r24, 0x87	; 135
	xmit_spi(n);
    2ba4:	8e bd       	out	0x2e, r24	; 46
    2ba6:	0d b4       	in	r0, 0x2d	; 45
    2ba8:	07 fe       	sbrs	r0, 7
    2baa:	fd cf       	rjmp	.-6      	; 0x2ba6 <send_cmd+0x90>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
    2bac:	2c 34       	cpi	r18, 0x4C	; 76
    2bae:	11 f4       	brne	.+4      	; 0x2bb4 <send_cmd+0x9e>
    2bb0:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <rcvr_spi>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    2bb4:	1a e0       	ldi	r17, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = rcvr_spi();
    2bb6:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <rcvr_spi>
	while ((res & 0x80) && --n);
    2bba:	87 ff       	sbrs	r24, 7
    2bbc:	04 c0       	rjmp	.+8      	; 0x2bc6 <send_cmd+0xb0>
    2bbe:	11 50       	subi	r17, 0x01	; 1
    2bc0:	d1 f7       	brne	.-12     	; 0x2bb6 <send_cmd+0xa0>
    2bc2:	01 c0       	rjmp	.+2      	; 0x2bc6 <send_cmd+0xb0>
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
	if (!select()) return 0xFF;
    2bc4:	8f ef       	ldi	r24, 0xFF	; 255
	do
		res = rcvr_spi();
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
    2bc6:	21 96       	adiw	r28, 0x01	; 1
    2bc8:	e6 e0       	ldi	r30, 0x06	; 6
    2bca:	0c 94 f3 2d 	jmp	0x5be6	; 0x5be6 <__epilogue_restores__+0x18>

00002bce <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
    2bce:	a4 e0       	ldi	r26, 0x04	; 4
    2bd0:	b0 e0       	ldi	r27, 0x00	; 0
    2bd2:	ed ee       	ldi	r30, 0xED	; 237
    2bd4:	f5 e1       	ldi	r31, 0x15	; 21
    2bd6:	0c 94 d5 2d 	jmp	0x5baa	; 0x5baa <__prologue_saves__+0x14>
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
    2bda:	88 23       	and	r24, r24
    2bdc:	09 f0       	breq	.+2      	; 0x2be0 <disk_initialize+0x12>
    2bde:	9b c0       	rjmp	.+310    	; 0x2d16 <disk_initialize+0x148>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    2be0:	80 91 0e 01 	lds	r24, 0x010E
    2be4:	81 fd       	sbrc	r24, 1
    2be6:	94 c0       	rjmp	.+296    	; 0x2d10 <disk_initialize+0x142>

	power_on();							/* Force socket power on */
    2be8:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <power_on>
    2bec:	1a e0       	ldi	r17, 0x0A	; 10
	FCLK_SLOW();
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
    2bee:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <rcvr_spi>
    2bf2:	11 50       	subi	r17, 0x01	; 1
    2bf4:	e1 f7       	brne	.-8      	; 0x2bee <disk_initialize+0x20>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    2bf6:	80 e4       	ldi	r24, 0x40	; 64
    2bf8:	40 e0       	ldi	r20, 0x00	; 0
    2bfa:	50 e0       	ldi	r21, 0x00	; 0
    2bfc:	ba 01       	movw	r22, r20
    2bfe:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <send_cmd>
    2c02:	81 30       	cpi	r24, 0x01	; 1
    2c04:	09 f0       	breq	.+2      	; 0x2c08 <disk_initialize+0x3a>
    2c06:	75 c0       	rjmp	.+234    	; 0x2cf2 <disk_initialize+0x124>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    2c08:	84 e6       	ldi	r24, 0x64	; 100
    2c0a:	80 93 b7 03 	sts	0x03B7, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
    2c0e:	88 e4       	ldi	r24, 0x48	; 72
    2c10:	4a ea       	ldi	r20, 0xAA	; 170
    2c12:	51 e0       	ldi	r21, 0x01	; 1
    2c14:	60 e0       	ldi	r22, 0x00	; 0
    2c16:	70 e0       	ldi	r23, 0x00	; 0
    2c18:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <send_cmd>
    2c1c:	81 30       	cpi	r24, 0x01	; 1
    2c1e:	09 f0       	breq	.+2      	; 0x2c22 <disk_initialize+0x54>
    2c20:	3f c0       	rjmp	.+126    	; 0x2ca0 <disk_initialize+0xd2>
    2c22:	8e 01       	movw	r16, r28
    2c24:	0f 5f       	subi	r16, 0xFF	; 255
    2c26:	1f 4f       	sbci	r17, 0xFF	; 255

/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
    2c28:	45 e0       	ldi	r20, 0x05	; 5
    2c2a:	e4 2e       	mov	r14, r20
    2c2c:	f1 2c       	mov	r15, r1
    2c2e:	ec 0e       	add	r14, r28
    2c30:	fd 1e       	adc	r15, r29
    2c32:	68 01       	movw	r12, r16

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
    2c34:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <rcvr_spi>
    2c38:	f6 01       	movw	r30, r12
    2c3a:	81 93       	st	Z+, r24
    2c3c:	6f 01       	movw	r12, r30
    2c3e:	ee 15       	cp	r30, r14
    2c40:	ff 05       	cpc	r31, r15
    2c42:	c1 f7       	brne	.-16     	; 0x2c34 <disk_initialize+0x66>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    2c44:	8b 81       	ldd	r24, Y+3	; 0x03
    2c46:	81 30       	cpi	r24, 0x01	; 1
    2c48:	09 f0       	breq	.+2      	; 0x2c4c <disk_initialize+0x7e>
    2c4a:	53 c0       	rjmp	.+166    	; 0x2cf2 <disk_initialize+0x124>
    2c4c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c4e:	8a 3a       	cpi	r24, 0xAA	; 170
    2c50:	09 f0       	breq	.+2      	; 0x2c54 <disk_initialize+0x86>
    2c52:	4f c0       	rjmp	.+158    	; 0x2cf2 <disk_initialize+0x124>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    2c54:	80 91 b7 03 	lds	r24, 0x03B7
    2c58:	88 23       	and	r24, r24
    2c5a:	49 f0       	breq	.+18     	; 0x2c6e <disk_initialize+0xa0>
    2c5c:	89 ee       	ldi	r24, 0xE9	; 233
    2c5e:	40 e0       	ldi	r20, 0x00	; 0
    2c60:	50 e0       	ldi	r21, 0x00	; 0
    2c62:	60 e0       	ldi	r22, 0x00	; 0
    2c64:	70 e4       	ldi	r23, 0x40	; 64
    2c66:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <send_cmd>
    2c6a:	88 23       	and	r24, r24
    2c6c:	99 f7       	brne	.-26     	; 0x2c54 <disk_initialize+0x86>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    2c6e:	80 91 b7 03 	lds	r24, 0x03B7
    2c72:	88 23       	and	r24, r24
    2c74:	f1 f1       	breq	.+124    	; 0x2cf2 <disk_initialize+0x124>
    2c76:	8a e7       	ldi	r24, 0x7A	; 122
    2c78:	40 e0       	ldi	r20, 0x00	; 0
    2c7a:	50 e0       	ldi	r21, 0x00	; 0
    2c7c:	ba 01       	movw	r22, r20
    2c7e:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <send_cmd>
    2c82:	88 23       	and	r24, r24
    2c84:	b1 f5       	brne	.+108    	; 0x2cf2 <disk_initialize+0x124>
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
    2c86:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <rcvr_spi>
    2c8a:	f8 01       	movw	r30, r16
    2c8c:	81 93       	st	Z+, r24
    2c8e:	8f 01       	movw	r16, r30
    2c90:	ee 15       	cp	r30, r14
    2c92:	ff 05       	cpc	r31, r15
    2c94:	c1 f7       	brne	.-16     	; 0x2c86 <disk_initialize+0xb8>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    2c96:	89 81       	ldd	r24, Y+1	; 0x01
    2c98:	86 ff       	sbrs	r24, 6
    2c9a:	29 c0       	rjmp	.+82     	; 0x2cee <disk_initialize+0x120>
    2c9c:	0c e0       	ldi	r16, 0x0C	; 12
    2c9e:	2a c0       	rjmp	.+84     	; 0x2cf4 <disk_initialize+0x126>
				}
			}
		} else {							/* SDSC or MMC */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    2ca0:	89 ee       	ldi	r24, 0xE9	; 233
    2ca2:	40 e0       	ldi	r20, 0x00	; 0
    2ca4:	50 e0       	ldi	r21, 0x00	; 0
    2ca6:	ba 01       	movw	r22, r20
    2ca8:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <send_cmd>
    2cac:	82 30       	cpi	r24, 0x02	; 2
    2cae:	18 f4       	brcc	.+6      	; 0x2cb6 <disk_initialize+0xe8>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    2cb0:	02 e0       	ldi	r16, 0x02	; 2
    2cb2:	19 ee       	ldi	r17, 0xE9	; 233
    2cb4:	02 c0       	rjmp	.+4      	; 0x2cba <disk_initialize+0xec>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    2cb6:	01 e0       	ldi	r16, 0x01	; 1
    2cb8:	11 e4       	ldi	r17, 0x41	; 65
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    2cba:	80 91 b7 03 	lds	r24, 0x03B7
    2cbe:	88 23       	and	r24, r24
    2cc0:	41 f0       	breq	.+16     	; 0x2cd2 <disk_initialize+0x104>
    2cc2:	81 2f       	mov	r24, r17
    2cc4:	40 e0       	ldi	r20, 0x00	; 0
    2cc6:	50 e0       	ldi	r21, 0x00	; 0
    2cc8:	ba 01       	movw	r22, r20
    2cca:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <send_cmd>
    2cce:	88 23       	and	r24, r24
    2cd0:	a1 f7       	brne	.-24     	; 0x2cba <disk_initialize+0xec>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    2cd2:	80 91 b7 03 	lds	r24, 0x03B7
    2cd6:	88 23       	and	r24, r24
    2cd8:	61 f0       	breq	.+24     	; 0x2cf2 <disk_initialize+0x124>
    2cda:	80 e5       	ldi	r24, 0x50	; 80
    2cdc:	40 e0       	ldi	r20, 0x00	; 0
    2cde:	52 e0       	ldi	r21, 0x02	; 2
    2ce0:	60 e0       	ldi	r22, 0x00	; 0
    2ce2:	70 e0       	ldi	r23, 0x00	; 0
    2ce4:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <send_cmd>
    2ce8:	88 23       	and	r24, r24
    2cea:	19 f4       	brne	.+6      	; 0x2cf2 <disk_initialize+0x124>
    2cec:	03 c0       	rjmp	.+6      	; 0x2cf4 <disk_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    2cee:	04 e0       	ldi	r16, 0x04	; 4
    2cf0:	01 c0       	rjmp	.+2      	; 0x2cf4 <disk_initialize+0x126>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
    2cf2:	00 e0       	ldi	r16, 0x00	; 0
		}
	}
	CardType = ty;
    2cf4:	00 93 b9 03 	sts	0x03B9, r16
	deselect();
    2cf8:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <deselect>

	if (ty) {			/* Initialization succeded */
    2cfc:	00 23       	and	r16, r16
    2cfe:	31 f0       	breq	.+12     	; 0x2d0c <disk_initialize+0x13e>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    2d00:	80 91 0e 01 	lds	r24, 0x010E
    2d04:	8e 7f       	andi	r24, 0xFE	; 254
    2d06:	80 93 0e 01 	sts	0x010E, r24
    2d0a:	02 c0       	rjmp	.+4      	; 0x2d10 <disk_initialize+0x142>
		FCLK_FAST();
	} else {			/* Initialization failed */
		power_off();
    2d0c:	0e 94 00 15 	call	0x2a00	; 0x2a00 <power_off>
	}

	return Stat;
    2d10:	80 91 0e 01 	lds	r24, 0x010E
    2d14:	01 c0       	rjmp	.+2      	; 0x2d18 <disk_initialize+0x14a>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
    2d16:	81 e0       	ldi	r24, 0x01	; 1
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
    2d18:	24 96       	adiw	r28, 0x04	; 4
    2d1a:	e8 e0       	ldi	r30, 0x08	; 8
    2d1c:	0c 94 f1 2d 	jmp	0x5be2	; 0x5be2 <__epilogue_restores__+0x14>

00002d20 <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    2d20:	88 23       	and	r24, r24
    2d22:	19 f4       	brne	.+6      	; 0x2d2a <disk_status+0xa>
	return Stat;
    2d24:	80 91 0e 01 	lds	r24, 0x010E
    2d28:	08 95       	ret

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    2d2a:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
    2d2c:	08 95       	ret

00002d2e <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
    2d2e:	0f 93       	push	r16
    2d30:	cf 93       	push	r28
    2d32:	df 93       	push	r29
    2d34:	eb 01       	movw	r28, r22
    2d36:	ba 01       	movw	r22, r20
    2d38:	a9 01       	movw	r20, r18
	if (drv || !count) return RES_PARERR;
    2d3a:	88 23       	and	r24, r24
    2d3c:	09 f0       	breq	.+2      	; 0x2d40 <disk_read+0x12>
    2d3e:	43 c0       	rjmp	.+134    	; 0x2dc6 <disk_read+0x98>
    2d40:	00 23       	and	r16, r16
    2d42:	09 f4       	brne	.+2      	; 0x2d46 <disk_read+0x18>
    2d44:	40 c0       	rjmp	.+128    	; 0x2dc6 <disk_read+0x98>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    2d46:	80 91 0e 01 	lds	r24, 0x010E
    2d4a:	80 fd       	sbrc	r24, 0
    2d4c:	3f c0       	rjmp	.+126    	; 0x2dcc <disk_read+0x9e>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    2d4e:	80 91 b9 03 	lds	r24, 0x03B9
    2d52:	83 fd       	sbrc	r24, 3
    2d54:	07 c0       	rjmp	.+14     	; 0x2d64 <disk_read+0x36>
    2d56:	e9 e0       	ldi	r30, 0x09	; 9
    2d58:	44 0f       	add	r20, r20
    2d5a:	55 1f       	adc	r21, r21
    2d5c:	66 1f       	adc	r22, r22
    2d5e:	77 1f       	adc	r23, r23
    2d60:	ea 95       	dec	r30
    2d62:	d1 f7       	brne	.-12     	; 0x2d58 <disk_read+0x2a>

	if (count == 1) {	/* Single block read */
    2d64:	01 30       	cpi	r16, 0x01	; 1
    2d66:	69 f4       	brne	.+26     	; 0x2d82 <disk_read+0x54>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
    2d68:	81 e5       	ldi	r24, 0x51	; 81
    2d6a:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <send_cmd>
    2d6e:	88 23       	and	r24, r24
    2d70:	09 f5       	brne	.+66     	; 0x2db4 <disk_read+0x86>
			&& rcvr_datablock(buff, 512))
    2d72:	ce 01       	movw	r24, r28
    2d74:	60 e0       	ldi	r22, 0x00	; 0
    2d76:	72 e0       	ldi	r23, 0x02	; 2
    2d78:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <rcvr_datablock>
    2d7c:	00 97       	sbiw	r24, 0x00	; 0
    2d7e:	c9 f4       	brne	.+50     	; 0x2db2 <disk_read+0x84>
    2d80:	19 c0       	rjmp	.+50     	; 0x2db4 <disk_read+0x86>
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
    2d82:	82 e5       	ldi	r24, 0x52	; 82
    2d84:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <send_cmd>
    2d88:	88 23       	and	r24, r24
    2d8a:	a1 f4       	brne	.+40     	; 0x2db4 <disk_read+0x86>
			do {
				if (!rcvr_datablock(buff, 512)) break;
    2d8c:	ce 01       	movw	r24, r28
    2d8e:	60 e0       	ldi	r22, 0x00	; 0
    2d90:	72 e0       	ldi	r23, 0x02	; 2
    2d92:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <rcvr_datablock>
    2d96:	00 97       	sbiw	r24, 0x00	; 0
    2d98:	29 f0       	breq	.+10     	; 0x2da4 <disk_read+0x76>
				buff += 512;
			} while (--count);
    2d9a:	01 50       	subi	r16, 0x01	; 1
    2d9c:	19 f0       	breq	.+6      	; 0x2da4 <disk_read+0x76>
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
			do {
				if (!rcvr_datablock(buff, 512)) break;
				buff += 512;
    2d9e:	c0 50       	subi	r28, 0x00	; 0
    2da0:	de 4f       	sbci	r29, 0xFE	; 254
    2da2:	f4 cf       	rjmp	.-24     	; 0x2d8c <disk_read+0x5e>
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
    2da4:	8c e4       	ldi	r24, 0x4C	; 76
    2da6:	40 e0       	ldi	r20, 0x00	; 0
    2da8:	50 e0       	ldi	r21, 0x00	; 0
    2daa:	ba 01       	movw	r22, r20
    2dac:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <send_cmd>
    2db0:	01 c0       	rjmp	.+2      	; 0x2db4 <disk_read+0x86>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block read */
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
			&& rcvr_datablock(buff, 512))
			count = 0;
    2db2:	00 e0       	ldi	r16, 0x00	; 0
				buff += 512;
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();
    2db4:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <deselect>

	return count ? RES_ERROR : RES_OK;
    2db8:	21 e0       	ldi	r18, 0x01	; 1
    2dba:	30 e0       	ldi	r19, 0x00	; 0
    2dbc:	00 23       	and	r16, r16
    2dbe:	41 f4       	brne	.+16     	; 0x2dd0 <disk_read+0xa2>
    2dc0:	20 e0       	ldi	r18, 0x00	; 0
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
    2dc4:	05 c0       	rjmp	.+10     	; 0x2dd0 <disk_read+0xa2>
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
    2dc6:	24 e0       	ldi	r18, 0x04	; 4
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	02 c0       	rjmp	.+4      	; 0x2dd0 <disk_read+0xa2>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    2dcc:	23 e0       	ldi	r18, 0x03	; 3
    2dce:	30 e0       	ldi	r19, 0x00	; 0
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    2dd0:	c9 01       	movw	r24, r18
    2dd2:	df 91       	pop	r29
    2dd4:	cf 91       	pop	r28
    2dd6:	0f 91       	pop	r16
    2dd8:	08 95       	ret

00002dda <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
    2dda:	cf 92       	push	r12
    2ddc:	df 92       	push	r13
    2dde:	ef 92       	push	r14
    2de0:	ff 92       	push	r15
    2de2:	0f 93       	push	r16
    2de4:	cf 93       	push	r28
    2de6:	df 93       	push	r29
    2de8:	eb 01       	movw	r28, r22
    2dea:	69 01       	movw	r12, r18
    2dec:	7a 01       	movw	r14, r20
	if (drv || !count) return RES_PARERR;
    2dee:	88 23       	and	r24, r24
    2df0:	09 f0       	breq	.+2      	; 0x2df4 <disk_write+0x1a>
    2df2:	58 c0       	rjmp	.+176    	; 0x2ea4 <disk_write+0xca>
    2df4:	00 23       	and	r16, r16
    2df6:	09 f4       	brne	.+2      	; 0x2dfa <disk_write+0x20>
    2df8:	55 c0       	rjmp	.+170    	; 0x2ea4 <disk_write+0xca>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    2dfa:	80 91 0e 01 	lds	r24, 0x010E
    2dfe:	80 fd       	sbrc	r24, 0
    2e00:	54 c0       	rjmp	.+168    	; 0x2eaa <disk_write+0xd0>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    2e02:	80 91 0e 01 	lds	r24, 0x010E
    2e06:	82 fd       	sbrc	r24, 2
    2e08:	53 c0       	rjmp	.+166    	; 0x2eb0 <disk_write+0xd6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    2e0a:	80 91 b9 03 	lds	r24, 0x03B9
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	83 fd       	sbrc	r24, 3
    2e12:	07 c0       	rjmp	.+14     	; 0x2e22 <disk_write+0x48>
    2e14:	f9 e0       	ldi	r31, 0x09	; 9
    2e16:	cc 0c       	add	r12, r12
    2e18:	dd 1c       	adc	r13, r13
    2e1a:	ee 1c       	adc	r14, r14
    2e1c:	ff 1c       	adc	r15, r15
    2e1e:	fa 95       	dec	r31
    2e20:	d1 f7       	brne	.-12     	; 0x2e16 <disk_write+0x3c>

	if (count == 1) {	/* Single block write */
    2e22:	01 30       	cpi	r16, 0x01	; 1
    2e24:	71 f4       	brne	.+28     	; 0x2e42 <disk_write+0x68>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    2e26:	88 e5       	ldi	r24, 0x58	; 88
    2e28:	b7 01       	movw	r22, r14
    2e2a:	a6 01       	movw	r20, r12
    2e2c:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <send_cmd>
    2e30:	88 23       	and	r24, r24
    2e32:	79 f5       	brne	.+94     	; 0x2e92 <disk_write+0xb8>
			&& xmit_datablock(buff, 0xFE))
    2e34:	ce 01       	movw	r24, r28
    2e36:	6e ef       	ldi	r22, 0xFE	; 254
    2e38:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <xmit_datablock>
    2e3c:	00 97       	sbiw	r24, 0x00	; 0
    2e3e:	31 f5       	brne	.+76     	; 0x2e8c <disk_write+0xb2>
    2e40:	28 c0       	rjmp	.+80     	; 0x2e92 <disk_write+0xb8>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    2e42:	86 70       	andi	r24, 0x06	; 6
    2e44:	90 70       	andi	r25, 0x00	; 0
    2e46:	00 97       	sbiw	r24, 0x00	; 0
    2e48:	39 f0       	breq	.+14     	; 0x2e58 <disk_write+0x7e>
    2e4a:	40 2f       	mov	r20, r16
    2e4c:	50 e0       	ldi	r21, 0x00	; 0
    2e4e:	60 e0       	ldi	r22, 0x00	; 0
    2e50:	70 e0       	ldi	r23, 0x00	; 0
    2e52:	87 ed       	ldi	r24, 0xD7	; 215
    2e54:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    2e58:	89 e5       	ldi	r24, 0x59	; 89
    2e5a:	b7 01       	movw	r22, r14
    2e5c:	a6 01       	movw	r20, r12
    2e5e:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <send_cmd>
    2e62:	88 23       	and	r24, r24
    2e64:	b1 f4       	brne	.+44     	; 0x2e92 <disk_write+0xb8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    2e66:	ce 01       	movw	r24, r28
    2e68:	6c ef       	ldi	r22, 0xFC	; 252
    2e6a:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <xmit_datablock>
    2e6e:	00 97       	sbiw	r24, 0x00	; 0
    2e70:	29 f0       	breq	.+10     	; 0x2e7c <disk_write+0xa2>
				buff += 512;
			} while (--count);
    2e72:	01 50       	subi	r16, 0x01	; 1
    2e74:	19 f0       	breq	.+6      	; 0x2e7c <disk_write+0xa2>
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
    2e76:	c0 50       	subi	r28, 0x00	; 0
    2e78:	de 4f       	sbci	r29, 0xFE	; 254
    2e7a:	f5 cf       	rjmp	.-22     	; 0x2e66 <disk_write+0x8c>
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    2e7c:	80 e0       	ldi	r24, 0x00	; 0
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	6d ef       	ldi	r22, 0xFD	; 253
    2e82:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <xmit_datablock>
    2e86:	00 97       	sbiw	r24, 0x00	; 0
    2e88:	19 f0       	breq	.+6      	; 0x2e90 <disk_write+0xb6>
    2e8a:	03 c0       	rjmp	.+6      	; 0x2e92 <disk_write+0xb8>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block write */
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
			&& xmit_datablock(buff, 0xFE))
			count = 0;
    2e8c:	00 e0       	ldi	r16, 0x00	; 0
    2e8e:	01 c0       	rjmp	.+2      	; 0x2e92 <disk_write+0xb8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
				count = 1;
    2e90:	01 e0       	ldi	r16, 0x01	; 1
		}
	}
	deselect();
    2e92:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <deselect>

	return count ? RES_ERROR : RES_OK;
    2e96:	21 e0       	ldi	r18, 0x01	; 1
    2e98:	30 e0       	ldi	r19, 0x00	; 0
    2e9a:	00 23       	and	r16, r16
    2e9c:	59 f4       	brne	.+22     	; 0x2eb4 <disk_write+0xda>
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	08 c0       	rjmp	.+16     	; 0x2eb4 <disk_write+0xda>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
    2ea4:	24 e0       	ldi	r18, 0x04	; 4
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	05 c0       	rjmp	.+10     	; 0x2eb4 <disk_write+0xda>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    2eaa:	23 e0       	ldi	r18, 0x03	; 3
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	02 c0       	rjmp	.+4      	; 0x2eb4 <disk_write+0xda>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    2eb0:	22 e0       	ldi	r18, 0x02	; 2
    2eb2:	30 e0       	ldi	r19, 0x00	; 0
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    2eb4:	c9 01       	movw	r24, r18
    2eb6:	df 91       	pop	r29
    2eb8:	cf 91       	pop	r28
    2eba:	0f 91       	pop	r16
    2ebc:	ff 90       	pop	r15
    2ebe:	ef 90       	pop	r14
    2ec0:	df 90       	pop	r13
    2ec2:	cf 90       	pop	r12
    2ec4:	08 95       	ret

00002ec6 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    2ec6:	a0 e1       	ldi	r26, 0x10	; 16
    2ec8:	b0 e0       	ldi	r27, 0x00	; 0
    2eca:	e9 e6       	ldi	r30, 0x69	; 105
    2ecc:	f7 e1       	ldi	r31, 0x17	; 23
    2ece:	0c 94 d7 2d 	jmp	0x5bae	; 0x5bae <__prologue_saves__+0x18>
    2ed2:	8a 01       	movw	r16, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
    2ed4:	88 23       	and	r24, r24
    2ed6:	09 f0       	breq	.+2      	; 0x2eda <disk_ioctl+0x14>
    2ed8:	52 c1       	rjmp	.+676    	; 0x317e <disk_ioctl+0x2b8>
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
    2eda:	7a 01       	movw	r14, r20

	if (drv) return RES_PARERR;

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
    2edc:	64 30       	cpi	r22, 0x04	; 4
    2ede:	b1 f4       	brne	.+44     	; 0x2f0c <disk_ioctl+0x46>
		switch (*ptr) {
    2ee0:	fa 01       	movw	r30, r20
    2ee2:	80 81       	ld	r24, Z
    2ee4:	81 30       	cpi	r24, 0x01	; 1
    2ee6:	49 f0       	breq	.+18     	; 0x2efa <disk_ioctl+0x34>
    2ee8:	81 30       	cpi	r24, 0x01	; 1
    2eea:	20 f0       	brcs	.+8      	; 0x2ef4 <disk_ioctl+0x2e>
    2eec:	82 30       	cpi	r24, 0x02	; 2
    2eee:	09 f0       	breq	.+2      	; 0x2ef2 <disk_ioctl+0x2c>
    2ef0:	46 c1       	rjmp	.+652    	; 0x317e <disk_ioctl+0x2b8>
    2ef2:	06 c0       	rjmp	.+12     	; 0x2f00 <disk_ioctl+0x3a>
		case 0:		/* Sub control code == 0 (POWER_OFF) */
			if (chk_power())
				power_off();		/* Power off */
    2ef4:	0e 94 00 15 	call	0x2a00	; 0x2a00 <power_off>
    2ef8:	06 c0       	rjmp	.+12     	; 0x2f06 <disk_ioctl+0x40>
			res = RES_OK;
			break;
		case 1:		/* Sub control code == 1 (POWER_ON) */
			power_on();				/* Power on */
    2efa:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <power_on>
    2efe:	03 c0       	rjmp	.+6      	; 0x2f06 <disk_ioctl+0x40>
			res = RES_OK;
			break;
		case 2:		/* Sub control code == 2 (POWER_GET) */
			*(ptr+1) = (BYTE)chk_power();
    2f00:	81 e0       	ldi	r24, 0x01	; 1
    2f02:	fa 01       	movw	r30, r20
    2f04:	81 83       	std	Z+1, r24	; 0x01
			res = RES_OK;
    2f06:	00 e0       	ldi	r16, 0x00	; 0
    2f08:	10 e0       	ldi	r17, 0x00	; 0
			break;
    2f0a:	3e c1       	rjmp	.+636    	; 0x3188 <disk_ioctl+0x2c2>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
    2f0c:	80 91 0e 01 	lds	r24, 0x010E
    2f10:	80 fd       	sbrc	r24, 0
    2f12:	38 c1       	rjmp	.+624    	; 0x3184 <disk_ioctl+0x2be>

		switch (ctrl) {
    2f14:	e6 2f       	mov	r30, r22
    2f16:	f0 e0       	ldi	r31, 0x00	; 0
    2f18:	ef 30       	cpi	r30, 0x0F	; 15
    2f1a:	f1 05       	cpc	r31, r1
    2f1c:	08 f0       	brcs	.+2      	; 0x2f20 <disk_ioctl+0x5a>
    2f1e:	24 c1       	rjmp	.+584    	; 0x3168 <disk_ioctl+0x2a2>
    2f20:	e6 5b       	subi	r30, 0xB6	; 182
    2f22:	ff 4f       	sbci	r31, 0xFF	; 255
    2f24:	0c 94 02 2e 	jmp	0x5c04	; 0x5c04 <__tablejump2__>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
    2f28:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <select>
    2f2c:	00 97       	sbiw	r24, 0x00	; 0
    2f2e:	09 f4       	brne	.+2      	; 0x2f32 <disk_ioctl+0x6c>
    2f30:	1e c1       	rjmp	.+572    	; 0x316e <disk_ioctl+0x2a8>
				res = RES_OK;
				deselect();
    2f32:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <deselect>
    2f36:	1e c1       	rjmp	.+572    	; 0x3174 <disk_ioctl+0x2ae>
			}
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    2f38:	89 e4       	ldi	r24, 0x49	; 73
    2f3a:	40 e0       	ldi	r20, 0x00	; 0
    2f3c:	50 e0       	ldi	r21, 0x00	; 0
    2f3e:	ba 01       	movw	r22, r20
    2f40:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <send_cmd>
    2f44:	88 23       	and	r24, r24
    2f46:	09 f0       	breq	.+2      	; 0x2f4a <disk_ioctl+0x84>
    2f48:	12 c1       	rjmp	.+548    	; 0x316e <disk_ioctl+0x2a8>
    2f4a:	ce 01       	movw	r24, r28
    2f4c:	01 96       	adiw	r24, 0x01	; 1
    2f4e:	60 e1       	ldi	r22, 0x10	; 16
    2f50:	70 e0       	ldi	r23, 0x00	; 0
    2f52:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <rcvr_datablock>
    2f56:	00 97       	sbiw	r24, 0x00	; 0
    2f58:	09 f4       	brne	.+2      	; 0x2f5c <disk_ioctl+0x96>
    2f5a:	09 c1       	rjmp	.+530    	; 0x316e <disk_ioctl+0x2a8>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    2f5c:	99 81       	ldd	r25, Y+1	; 0x01
    2f5e:	92 95       	swap	r25
    2f60:	96 95       	lsr	r25
    2f62:	96 95       	lsr	r25
    2f64:	93 70       	andi	r25, 0x03	; 3
    2f66:	5a 85       	ldd	r21, Y+10	; 0x0a
    2f68:	49 85       	ldd	r20, Y+9	; 0x09
    2f6a:	91 30       	cpi	r25, 0x01	; 1
    2f6c:	89 f4       	brne	.+34     	; 0x2f90 <disk_ioctl+0xca>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
    2f6e:	85 2f       	mov	r24, r21
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	01 96       	adiw	r24, 0x01	; 1
    2f74:	34 2f       	mov	r19, r20
    2f76:	20 e0       	ldi	r18, 0x00	; 0
    2f78:	82 0f       	add	r24, r18
    2f7a:	93 1f       	adc	r25, r19
					*(DWORD*)buff = (DWORD)csize << 10;
    2f7c:	a0 e0       	ldi	r26, 0x00	; 0
    2f7e:	b0 e0       	ldi	r27, 0x00	; 0
    2f80:	7a e0       	ldi	r23, 0x0A	; 10
    2f82:	88 0f       	add	r24, r24
    2f84:	99 1f       	adc	r25, r25
    2f86:	aa 1f       	adc	r26, r26
    2f88:	bb 1f       	adc	r27, r27
    2f8a:	7a 95       	dec	r23
    2f8c:	d1 f7       	brne	.-12     	; 0x2f82 <disk_ioctl+0xbc>
    2f8e:	ae c0       	rjmp	.+348    	; 0x30ec <disk_ioctl+0x226>
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    2f90:	42 95       	swap	r20
    2f92:	46 95       	lsr	r20
    2f94:	46 95       	lsr	r20
    2f96:	43 70       	andi	r20, 0x03	; 3
    2f98:	88 85       	ldd	r24, Y+8	; 0x08
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	88 0f       	add	r24, r24
    2f9e:	99 1f       	adc	r25, r25
    2fa0:	88 0f       	add	r24, r24
    2fa2:	99 1f       	adc	r25, r25
    2fa4:	84 0f       	add	r24, r20
    2fa6:	91 1d       	adc	r25, r1
    2fa8:	01 96       	adiw	r24, 0x01	; 1
    2faa:	2f 81       	ldd	r18, Y+7	; 0x07
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	23 70       	andi	r18, 0x03	; 3
    2fb0:	30 70       	andi	r19, 0x00	; 0
    2fb2:	32 2f       	mov	r19, r18
    2fb4:	22 27       	eor	r18, r18
    2fb6:	33 0f       	add	r19, r19
    2fb8:	33 0f       	add	r19, r19
    2fba:	82 0f       	add	r24, r18
    2fbc:	93 1f       	adc	r25, r19
					*(DWORD*)buff = (DWORD)csize << (n - 9);
    2fbe:	a0 e0       	ldi	r26, 0x00	; 0
    2fc0:	b0 e0       	ldi	r27, 0x00	; 0
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    2fc2:	2e 81       	ldd	r18, Y+6	; 0x06
    2fc4:	2f 70       	andi	r18, 0x0F	; 15
    2fc6:	4b 85       	ldd	r20, Y+11	; 0x0b
    2fc8:	44 1f       	adc	r20, r20
    2fca:	44 27       	eor	r20, r20
    2fcc:	44 1f       	adc	r20, r20
    2fce:	24 0f       	add	r18, r20
    2fd0:	2e 5f       	subi	r18, 0xFE	; 254
    2fd2:	35 2f       	mov	r19, r21
    2fd4:	33 70       	andi	r19, 0x03	; 3
    2fd6:	33 0f       	add	r19, r19
    2fd8:	23 0f       	add	r18, r19
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
    2fda:	30 e0       	ldi	r19, 0x00	; 0
    2fdc:	29 50       	subi	r18, 0x09	; 9
    2fde:	30 40       	sbci	r19, 0x00	; 0
    2fe0:	2b c0       	rjmp	.+86     	; 0x3038 <disk_ioctl+0x172>
				res = RES_OK;
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
    2fe2:	80 e0       	ldi	r24, 0x00	; 0
    2fe4:	92 e0       	ldi	r25, 0x02	; 2
    2fe6:	fa 01       	movw	r30, r20
    2fe8:	91 83       	std	Z+1, r25	; 0x01
    2fea:	80 83       	st	Z, r24
    2fec:	c3 c0       	rjmp	.+390    	; 0x3174 <disk_ioctl+0x2ae>
			res = RES_OK;
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
    2fee:	e0 90 b9 03 	lds	r14, 0x03B9
    2ff2:	e2 fe       	sbrs	r14, 2
    2ff4:	29 c0       	rjmp	.+82     	; 0x3048 <disk_ioctl+0x182>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    2ff6:	8d ec       	ldi	r24, 0xCD	; 205
    2ff8:	40 e0       	ldi	r20, 0x00	; 0
    2ffa:	50 e0       	ldi	r21, 0x00	; 0
    2ffc:	ba 01       	movw	r22, r20
    2ffe:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <send_cmd>
    3002:	88 23       	and	r24, r24
    3004:	09 f0       	breq	.+2      	; 0x3008 <disk_ioctl+0x142>
    3006:	b3 c0       	rjmp	.+358    	; 0x316e <disk_ioctl+0x2a8>
					rcvr_spi();
    3008:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <rcvr_spi>
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    300c:	ce 01       	movw	r24, r28
    300e:	01 96       	adiw	r24, 0x01	; 1
    3010:	60 e1       	ldi	r22, 0x10	; 16
    3012:	70 e0       	ldi	r23, 0x00	; 0
    3014:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <rcvr_datablock>
    3018:	00 97       	sbiw	r24, 0x00	; 0
    301a:	09 f4       	brne	.+2      	; 0x301e <disk_ioctl+0x158>
    301c:	a8 c0       	rjmp	.+336    	; 0x316e <disk_ioctl+0x2a8>
    301e:	30 e3       	ldi	r19, 0x30	; 48
    3020:	e3 2e       	mov	r14, r19
						for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
    3022:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <rcvr_spi>
    3026:	ea 94       	dec	r14
    3028:	e1 f7       	brne	.-8      	; 0x3022 <disk_ioctl+0x15c>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
    302a:	2b 85       	ldd	r18, Y+11	; 0x0b
    302c:	22 95       	swap	r18
    302e:	2f 70       	andi	r18, 0x0F	; 15
    3030:	80 e1       	ldi	r24, 0x10	; 16
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	a0 e0       	ldi	r26, 0x00	; 0
    3036:	b0 e0       	ldi	r27, 0x00	; 0
    3038:	04 c0       	rjmp	.+8      	; 0x3042 <disk_ioctl+0x17c>
    303a:	88 0f       	add	r24, r24
    303c:	99 1f       	adc	r25, r25
    303e:	aa 1f       	adc	r26, r26
    3040:	bb 1f       	adc	r27, r27
    3042:	2a 95       	dec	r18
    3044:	d2 f7       	brpl	.-12     	; 0x303a <disk_ioctl+0x174>
    3046:	52 c0       	rjmp	.+164    	; 0x30ec <disk_ioctl+0x226>
						res = RES_OK;
					}
				}
			} else {					/* SDC ver 1.XX or MMC */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    3048:	89 e4       	ldi	r24, 0x49	; 73
    304a:	40 e0       	ldi	r20, 0x00	; 0
    304c:	50 e0       	ldi	r21, 0x00	; 0
    304e:	ba 01       	movw	r22, r20
    3050:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <send_cmd>
    3054:	88 23       	and	r24, r24
    3056:	09 f0       	breq	.+2      	; 0x305a <disk_ioctl+0x194>
    3058:	8a c0       	rjmp	.+276    	; 0x316e <disk_ioctl+0x2a8>
    305a:	ce 01       	movw	r24, r28
    305c:	01 96       	adiw	r24, 0x01	; 1
    305e:	60 e1       	ldi	r22, 0x10	; 16
    3060:	70 e0       	ldi	r23, 0x00	; 0
    3062:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <rcvr_datablock>
    3066:	00 97       	sbiw	r24, 0x00	; 0
    3068:	09 f4       	brne	.+2      	; 0x306c <disk_ioctl+0x1a6>
    306a:	81 c0       	rjmp	.+258    	; 0x316e <disk_ioctl+0x2a8>
    306c:	4b 85       	ldd	r20, Y+11	; 0x0b
    306e:	8c 85       	ldd	r24, Y+12	; 0x0c
					if (CardType & CT_SD1) {	/* SDC ver 1.XX */
    3070:	e1 fe       	sbrs	r14, 1
    3072:	1a c0       	rjmp	.+52     	; 0x30a8 <disk_ioctl+0x1e2>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    3074:	88 1f       	adc	r24, r24
    3076:	88 27       	eor	r24, r24
    3078:	88 1f       	adc	r24, r24
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	01 96       	adiw	r24, 0x01	; 1
    307e:	50 e0       	ldi	r21, 0x00	; 0
    3080:	4f 73       	andi	r20, 0x3F	; 63
    3082:	50 70       	andi	r21, 0x00	; 0
    3084:	44 0f       	add	r20, r20
    3086:	55 1f       	adc	r21, r21
    3088:	84 0f       	add	r24, r20
    308a:	95 1f       	adc	r25, r21
    308c:	2e 85       	ldd	r18, Y+14	; 0x0e
    308e:	22 95       	swap	r18
    3090:	26 95       	lsr	r18
    3092:	26 95       	lsr	r18
    3094:	23 70       	andi	r18, 0x03	; 3
    3096:	30 e0       	ldi	r19, 0x00	; 0
    3098:	21 50       	subi	r18, 0x01	; 1
    309a:	30 40       	sbci	r19, 0x00	; 0
    309c:	02 c0       	rjmp	.+4      	; 0x30a2 <disk_ioctl+0x1dc>
    309e:	88 0f       	add	r24, r24
    30a0:	99 1f       	adc	r25, r25
    30a2:	2a 95       	dec	r18
    30a4:	e2 f7       	brpl	.-8      	; 0x309e <disk_ioctl+0x1d8>
    30a6:	20 c0       	rjmp	.+64     	; 0x30e8 <disk_ioctl+0x222>
					} else {					/* MMC */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    30a8:	28 2f       	mov	r18, r24
    30aa:	30 e0       	ldi	r19, 0x00	; 0
    30ac:	23 70       	andi	r18, 0x03	; 3
    30ae:	30 70       	andi	r19, 0x00	; 0
    30b0:	b3 e0       	ldi	r27, 0x03	; 3
    30b2:	22 0f       	add	r18, r18
    30b4:	33 1f       	adc	r19, r19
    30b6:	ba 95       	dec	r27
    30b8:	e1 f7       	brne	.-8      	; 0x30b2 <disk_ioctl+0x1ec>
    30ba:	82 95       	swap	r24
    30bc:	86 95       	lsr	r24
    30be:	87 70       	andi	r24, 0x07	; 7
    30c0:	28 0f       	add	r18, r24
    30c2:	31 1d       	adc	r19, r1
    30c4:	2f 5f       	subi	r18, 0xFF	; 255
    30c6:	3f 4f       	sbci	r19, 0xFF	; 255
    30c8:	50 e0       	ldi	r21, 0x00	; 0
    30ca:	4c 77       	andi	r20, 0x7C	; 124
    30cc:	50 70       	andi	r21, 0x00	; 0
    30ce:	55 95       	asr	r21
    30d0:	47 95       	ror	r20
    30d2:	55 95       	asr	r21
    30d4:	47 95       	ror	r20
    30d6:	4f 5f       	subi	r20, 0xFF	; 255
    30d8:	5f 4f       	sbci	r21, 0xFF	; 255
    30da:	24 9f       	mul	r18, r20
    30dc:	c0 01       	movw	r24, r0
    30de:	25 9f       	mul	r18, r21
    30e0:	90 0d       	add	r25, r0
    30e2:	34 9f       	mul	r19, r20
    30e4:	90 0d       	add	r25, r0
    30e6:	11 24       	eor	r1, r1
    30e8:	a0 e0       	ldi	r26, 0x00	; 0
    30ea:	b0 e0       	ldi	r27, 0x00	; 0
    30ec:	f8 01       	movw	r30, r16
    30ee:	80 83       	st	Z, r24
    30f0:	91 83       	std	Z+1, r25	; 0x01
    30f2:	a2 83       	std	Z+2, r26	; 0x02
    30f4:	b3 83       	std	Z+3, r27	; 0x03
    30f6:	3e c0       	rjmp	.+124    	; 0x3174 <disk_ioctl+0x2ae>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
    30f8:	80 91 b9 03 	lds	r24, 0x03B9
    30fc:	fa 01       	movw	r30, r20
    30fe:	80 83       	st	Z, r24
    3100:	39 c0       	rjmp	.+114    	; 0x3174 <disk_ioctl+0x2ae>
			res = RES_OK;
			break;

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    3102:	89 e4       	ldi	r24, 0x49	; 73
    3104:	01 c0       	rjmp	.+2      	; 0x3108 <disk_ioctl+0x242>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    3106:	8a e4       	ldi	r24, 0x4A	; 74
    3108:	40 e0       	ldi	r20, 0x00	; 0
    310a:	50 e0       	ldi	r21, 0x00	; 0
    310c:	ba 01       	movw	r22, r20
    310e:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <send_cmd>
    3112:	88 23       	and	r24, r24
    3114:	61 f5       	brne	.+88     	; 0x316e <disk_ioctl+0x2a8>
				&& rcvr_datablock(ptr, 16))
    3116:	c8 01       	movw	r24, r16
    3118:	60 e1       	ldi	r22, 0x10	; 16
    311a:	70 e0       	ldi	r23, 0x00	; 0
    311c:	20 c0       	rjmp	.+64     	; 0x315e <disk_ioctl+0x298>
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    311e:	8a e7       	ldi	r24, 0x7A	; 122
    3120:	40 e0       	ldi	r20, 0x00	; 0
    3122:	50 e0       	ldi	r21, 0x00	; 0
    3124:	ba 01       	movw	r22, r20
    3126:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <send_cmd>
    312a:	88 23       	and	r24, r24
    312c:	01 f5       	brne	.+64     	; 0x316e <disk_ioctl+0x2a8>
/*-----------------------------------------------------------------------*/
/* Miscellaneous Functions                                               */
/*-----------------------------------------------------------------------*/

#if _USE_IOCTL != 0
DRESULT disk_ioctl (
    312e:	0c 5f       	subi	r16, 0xFC	; 252
    3130:	1f 4f       	sbci	r17, 0xFF	; 255
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    3132:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <rcvr_spi>
    3136:	f7 01       	movw	r30, r14
    3138:	81 93       	st	Z+, r24
    313a:	7f 01       	movw	r14, r30
    313c:	e0 17       	cp	r30, r16
    313e:	f1 07       	cpc	r31, r17
    3140:	c1 f7       	brne	.-16     	; 0x3132 <disk_ioctl+0x26c>
    3142:	18 c0       	rjmp	.+48     	; 0x3174 <disk_ioctl+0x2ae>
				res = RES_OK;
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    3144:	8d ec       	ldi	r24, 0xCD	; 205
    3146:	40 e0       	ldi	r20, 0x00	; 0
    3148:	50 e0       	ldi	r21, 0x00	; 0
    314a:	ba 01       	movw	r22, r20
    314c:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <send_cmd>
    3150:	88 23       	and	r24, r24
    3152:	69 f4       	brne	.+26     	; 0x316e <disk_ioctl+0x2a8>
				rcvr_spi();
    3154:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <rcvr_spi>
				if (rcvr_datablock(ptr, 64))
    3158:	c8 01       	movw	r24, r16
    315a:	60 e4       	ldi	r22, 0x40	; 64
    315c:	70 e0       	ldi	r23, 0x00	; 0
    315e:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <rcvr_datablock>
    3162:	00 97       	sbiw	r24, 0x00	; 0
    3164:	39 f4       	brne	.+14     	; 0x3174 <disk_ioctl+0x2ae>
    3166:	03 c0       	rjmp	.+6      	; 0x316e <disk_ioctl+0x2a8>
					res = RES_OK;
			}
			break;

		default:
			res = RES_PARERR;
    3168:	04 e0       	ldi	r16, 0x04	; 4
    316a:	10 e0       	ldi	r17, 0x00	; 0
    316c:	05 c0       	rjmp	.+10     	; 0x3178 <disk_ioctl+0x2b2>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
    316e:	01 e0       	ldi	r16, 0x01	; 1
    3170:	10 e0       	ldi	r17, 0x00	; 0
    3172:	02 c0       	rjmp	.+4      	; 0x3178 <disk_ioctl+0x2b2>

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
				rcvr_spi();
				if (rcvr_datablock(ptr, 64))
					res = RES_OK;
    3174:	00 e0       	ldi	r16, 0x00	; 0
    3176:	10 e0       	ldi	r17, 0x00	; 0

		default:
			res = RES_PARERR;
		}

		deselect();
    3178:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <deselect>
    317c:	05 c0       	rjmp	.+10     	; 0x3188 <disk_ioctl+0x2c2>
		case 2:		/* Sub control code == 2 (POWER_GET) */
			*(ptr+1) = (BYTE)chk_power();
			res = RES_OK;
			break;
		default :
			res = RES_PARERR;
    317e:	04 e0       	ldi	r16, 0x04	; 4
    3180:	10 e0       	ldi	r17, 0x00	; 0
    3182:	02 c0       	rjmp	.+4      	; 0x3188 <disk_ioctl+0x2c2>
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
    3184:	03 e0       	ldi	r16, 0x03	; 3
    3186:	10 e0       	ldi	r17, 0x00	; 0

		deselect();
	}

	return res;
}
    3188:	c8 01       	movw	r24, r16
    318a:	60 96       	adiw	r28, 0x10	; 16
    318c:	e6 e0       	ldi	r30, 0x06	; 6
    318e:	0c 94 f3 2d 	jmp	0x5be6	; 0x5be6 <__epilogue_restores__+0x18>

00003192 <disk_timerproc>:

void disk_timerproc (void)
{
   BYTE n;

   n=Timer1;                  /* 100Hz decrement timer */
    3192:	80 91 b7 03 	lds	r24, 0x03B7
   if(n)
    3196:	88 23       	and	r24, r24
    3198:	19 f0       	breq	.+6      	; 0x31a0 <disk_timerproc+0xe>
      Timer1 = --n;
    319a:	81 50       	subi	r24, 0x01	; 1
    319c:	80 93 b7 03 	sts	0x03B7, r24
   n=Timer2;
    31a0:	80 91 b8 03 	lds	r24, 0x03B8
   if(n)
    31a4:	88 23       	and	r24, r24
    31a6:	19 f0       	breq	.+6      	; 0x31ae <disk_timerproc+0x1c>
      Timer2 = --n; 
    31a8:	81 50       	subi	r24, 0x01	; 1
    31aa:	80 93 b8 03 	sts	0x03B8, r24
    31ae:	08 95       	ret

000031b0 <RTC_write>:
	char dev,		/* Device address */
	uint8_t adr,		/* Write start address */
	uint8_t cnt,		/* Write byte count */
	uint8_t *buff		/* Write data buffer */
)
{
    31b0:	a0 e0       	ldi	r26, 0x00	; 0
    31b2:	b0 e0       	ldi	r27, 0x00	; 0
    31b4:	ee ed       	ldi	r30, 0xDE	; 222
    31b6:	f8 e1       	ldi	r31, 0x18	; 24
    31b8:	0c 94 d5 2d 	jmp	0x5baa	; 0x5baa <__prologue_saves__+0x14>
    31bc:	18 2f       	mov	r17, r24
    31be:	06 2f       	mov	r16, r22
    31c0:	f4 2e       	mov	r15, r20
    31c2:	e2 2e       	mov	r14, r18
    31c4:	d3 2e       	mov	r13, r19
	uint8_t *wbuff = buff;
	
	if (!cnt) return FALSE;	
    31c6:	44 23       	and	r20, r20
    31c8:	49 f1       	breq	.+82     	; 0x321c <RTC_write+0x6c>
	/*
	 * Start in master write mode to transmit data to slave 
	 */
	if (!(TWI_start())) return FALSE;	/* send start condition */	
    31ca:	0e 94 36 24 	call	0x486c	; 0x486c <TWI_start>
    31ce:	00 97       	sbiw	r24, 0x00	; 0
    31d0:	29 f1       	breq	.+74     	; 0x321c <RTC_write+0x6c>

	TWI_send(dev | TW_WRITE);		/* Select device dev */
    31d2:	81 2f       	mov	r24, r17
    31d4:	0e 94 50 24 	call	0x48a0	; 0x48a0 <TWI_send>
	if (!(TW_STATUS == TW_MT_SLA_ACK)) return FALSE;	/* Device could not be selected */
    31d8:	80 91 b9 00 	lds	r24, 0x00B9
    31dc:	88 7f       	andi	r24, 0xF8	; 248
    31de:	88 31       	cpi	r24, 0x18	; 24
    31e0:	e9 f4       	brne	.+58     	; 0x321c <RTC_write+0x6c>

	/* Send address for writing start position to slave device */	
	TWI_send(adr);
    31e2:	80 2f       	mov	r24, r16
    31e4:	0e 94 50 24 	call	0x48a0	; 0x48a0 <TWI_send>
	if (!(TW_STATUS == TW_MT_DATA_ACK)) return FALSE;	/* No ACK from device return */
    31e8:	80 91 b9 00 	lds	r24, 0x00B9
    31ec:	88 7f       	andi	r24, 0xF8	; 248
    31ee:	88 32       	cpi	r24, 0x28	; 40
    31f0:	a9 f4       	brne	.+42     	; 0x321c <RTC_write+0x6c>
    31f2:	8d 2d       	mov	r24, r13
    31f4:	ce 2c       	mov	r12, r14
    31f6:	e6 01       	movw	r28, r12
    31f8:	6e 01       	movw	r12, r28
    31fa:	d8 2e       	mov	r13, r24
    31fc:	e6 01       	movw	r28, r12

	/* send data */
	do {
		TWI_send(*wbuff++);
    31fe:	89 91       	ld	r24, Y+
    3200:	0e 94 50 24 	call	0x48a0	; 0x48a0 <TWI_send>
		if (!(TW_STATUS == TW_MT_DATA_ACK)) return FALSE;	/* No ACK from device return */
    3204:	80 91 b9 00 	lds	r24, 0x00B9
    3208:	88 7f       	andi	r24, 0xF8	; 248
    320a:	88 32       	cpi	r24, 0x28	; 40
    320c:	39 f4       	brne	.+14     	; 0x321c <RTC_write+0x6c>
	} while(--cnt);
    320e:	fa 94       	dec	r15
    3210:	b1 f7       	brne	.-20     	; 0x31fe <RTC_write+0x4e>

	/* send stop */
	TWI_stop();
    3212:	0e 94 68 24 	call	0x48d0	; 0x48d0 <TWI_stop>

	return TRUE;
    3216:	21 e0       	ldi	r18, 0x01	; 1
    3218:	30 e0       	ldi	r19, 0x00	; 0
    321a:	02 c0       	rjmp	.+4      	; 0x3220 <RTC_write+0x70>
	if (!(TW_STATUS == TW_MT_DATA_ACK)) return FALSE;	/* No ACK from device return */

	/* send data */
	do {
		TWI_send(*wbuff++);
		if (!(TW_STATUS == TW_MT_DATA_ACK)) return FALSE;	/* No ACK from device return */
    321c:	20 e0       	ldi	r18, 0x00	; 0
    321e:	30 e0       	ldi	r19, 0x00	; 0

	/* send stop */
	TWI_stop();

	return TRUE;
}
    3220:	c9 01       	movw	r24, r18
    3222:	cd b7       	in	r28, 0x3d	; 61
    3224:	de b7       	in	r29, 0x3e	; 62
    3226:	e8 e0       	ldi	r30, 0x08	; 8
    3228:	0c 94 f1 2d 	jmp	0x5be2	; 0x5be2 <__epilogue_restores__+0x14>

0000322c <rtc_clearHaltBit>:
#include <string.h>
#include "rtc.h"
#include "../twi/twi.h"

BOOL rtc_clearHaltBit(void)
{
    322c:	a1 e0       	ldi	r26, 0x01	; 1
    322e:	b0 e0       	ldi	r27, 0x00	; 0
    3230:	ec e1       	ldi	r30, 0x1C	; 28
    3232:	f9 e1       	ldi	r31, 0x19	; 25
    3234:	0c 94 db 2d 	jmp	0x5bb6	; 0x5bb6 <__prologue_saves__+0x20>
	uint8_t buf[1];
	buf[0] = 63;
    3238:	8f e3       	ldi	r24, 0x3F	; 63
    323a:	89 83       	std	Y+1, r24	; 0x01
	return RTC_write(0b11010000, 0x0C, 1, buf);
    323c:	80 ed       	ldi	r24, 0xD0	; 208
    323e:	6c e0       	ldi	r22, 0x0C	; 12
    3240:	41 e0       	ldi	r20, 0x01	; 1
    3242:	9e 01       	movw	r18, r28
    3244:	2f 5f       	subi	r18, 0xFF	; 255
    3246:	3f 4f       	sbci	r19, 0xFF	; 255
    3248:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <RTC_write>
}
    324c:	21 96       	adiw	r28, 0x01	; 1
    324e:	e2 e0       	ldi	r30, 0x02	; 2
    3250:	0c 94 f7 2d 	jmp	0x5bee	; 0x5bee <__epilogue_restores__+0x20>

00003254 <RTC_read>:
	char dev,		/* Device address */
	uint8_t adr,		/* Read start address */
	uint8_t cnt,		/* Read byte count */
	uint8_t *buff		/* Read data buffer */
)
{
    3254:	a0 e0       	ldi	r26, 0x00	; 0
    3256:	b0 e0       	ldi	r27, 0x00	; 0
    3258:	e0 e3       	ldi	r30, 0x30	; 48
    325a:	f9 e1       	ldi	r31, 0x19	; 25
    325c:	0c 94 d5 2d 	jmp	0x5baa	; 0x5baa <__prologue_saves__+0x14>
    3260:	18 2f       	mov	r17, r24
    3262:	06 2f       	mov	r16, r22
    3264:	f4 2e       	mov	r15, r20
    3266:	e2 2e       	mov	r14, r18
    3268:	d3 2e       	mov	r13, r19
	uint8_t *rbuff = buff;
	uint8_t n;
	BOOL start = FALSE;
	uint8_t data;

	if (!cnt) return FALSE;
    326a:	44 23       	and	r20, r20
    326c:	09 f4       	brne	.+2      	; 0x3270 <RTC_read+0x1c>
    326e:	46 c0       	rjmp	.+140    	; 0x32fc <RTC_read+0xa8>
	/*
	 * Start in master write mode to transmit read start address to slave
	 */
	if (!(TWI_start())) return FALSE;	/* send start condition */				
    3270:	0e 94 36 24 	call	0x486c	; 0x486c <TWI_start>
    3274:	00 97       	sbiw	r24, 0x00	; 0
    3276:	09 f4       	brne	.+2      	; 0x327a <RTC_read+0x26>
    3278:	41 c0       	rjmp	.+130    	; 0x32fc <RTC_read+0xa8>

	TWI_send(dev | TW_WRITE);		/* Select device dev */
    327a:	81 2f       	mov	r24, r17
    327c:	0e 94 50 24 	call	0x48a0	; 0x48a0 <TWI_send>
	if (!(TW_STATUS == TW_MT_SLA_ACK)) return FALSE;	/* Device could not be selected */
    3280:	80 91 b9 00 	lds	r24, 0x00B9
    3284:	88 7f       	andi	r24, 0xF8	; 248
    3286:	88 31       	cpi	r24, 0x18	; 24
    3288:	c9 f5       	brne	.+114    	; 0x32fc <RTC_read+0xa8>

	/* Send address for reading start position to slave device */	
	TWI_send(adr);
    328a:	80 2f       	mov	r24, r16
    328c:	0e 94 50 24 	call	0x48a0	; 0x48a0 <TWI_send>
	if (!(TW_STATUS == TW_MT_DATA_ACK)) return FALSE;	/* No ACK from device return */
    3290:	80 91 b9 00 	lds	r24, 0x00B9
    3294:	88 7f       	andi	r24, 0xF8	; 248
    3296:	88 32       	cpi	r24, 0x28	; 40
    3298:	89 f5       	brne	.+98     	; 0x32fc <RTC_read+0xa8>

	/*
	 * Switch to master read mode to recive data from slave 
	 */	
	if (!(TWI_start())) return FALSE;	/* send start condition */
    329a:	0e 94 36 24 	call	0x486c	; 0x486c <TWI_start>
    329e:	00 97       	sbiw	r24, 0x00	; 0
    32a0:	69 f1       	breq	.+90     	; 0x32fc <RTC_read+0xa8>

	TWI_send(dev | TW_READ);		/* Select device dev */
    32a2:	81 2f       	mov	r24, r17
    32a4:	81 60       	ori	r24, 0x01	; 1
    32a6:	0e 94 50 24 	call	0x48a0	; 0x48a0 <TWI_send>
	if (!(TW_STATUS == TW_MR_SLA_ACK)) return FALSE;	/* Device could not be selected */
    32aa:	80 91 b9 00 	lds	r24, 0x00B9
    32ae:	88 7f       	andi	r24, 0xF8	; 248
    32b0:	80 34       	cpi	r24, 0x40	; 64
    32b2:	21 f5       	brne	.+72     	; 0x32fc <RTC_read+0xa8>
    32b4:	8d 2d       	mov	r24, r13
    32b6:	ce 2c       	mov	r12, r14
    32b8:	e6 01       	movw	r28, r12
    32ba:	6e 01       	movw	r12, r28
    32bc:	d8 2e       	mov	r13, r24
    32be:	e6 01       	movw	r28, r12

	/* Device should start sending now and first stop when do not recive a ACK after data transmition */
	do {					/* Receive data */
		cnt--;
    32c0:	fa 94       	dec	r15
		if (cnt > 0) {
    32c2:	59 f0       	breq	.+22     	; 0x32da <RTC_read+0x86>
			data = TWI_rcvr(TRUE);		/* Send ACK after reviced data */
    32c4:	81 e0       	ldi	r24, 0x01	; 1
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	0e 94 5a 24 	call	0x48b4	; 0x48b4 <TWI_rcvr>
			if (!(TW_STATUS == TW_MR_DATA_ACK)) return FALSE; /* Return if an ACK not where send after data recived */
    32cc:	90 91 b9 00 	lds	r25, 0x00B9
    32d0:	98 7f       	andi	r25, 0xF8	; 248
    32d2:	90 35       	cpi	r25, 0x50	; 80
    32d4:	99 f4       	brne	.+38     	; 0x32fc <RTC_read+0xa8>
			*rbuff++ = data;
    32d6:	89 93       	st	Y+, r24
    32d8:	f3 cf       	rjmp	.-26     	; 0x32c0 <RTC_read+0x6c>
		} else {
			data = TWI_rcvr(FALSE);		/* Send NACK after reviced data */
    32da:	80 e0       	ldi	r24, 0x00	; 0
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	0e 94 5a 24 	call	0x48b4	; 0x48b4 <TWI_rcvr>
			if (!(TW_STATUS == TW_MR_DATA_NACK)) return FALSE; /* Return if an NACK not where send after data recived */
    32e2:	80 91 b9 00 	lds	r24, 0x00B9
    32e6:	88 7f       	andi	r24, 0xF8	; 248
    32e8:	88 35       	cpi	r24, 0x58	; 88
    32ea:	41 f4       	brne	.+16     	; 0x32fc <RTC_read+0xa8>
			*rbuff++ = TWDR;
    32ec:	80 91 bb 00 	lds	r24, 0x00BB
    32f0:	88 83       	st	Y, r24
		}
	} while (cnt);
	
	TWI_stop(); /* send stop condition */
    32f2:	0e 94 68 24 	call	0x48d0	; 0x48d0 <TWI_stop>
	return TRUE;
    32f6:	21 e0       	ldi	r18, 0x01	; 1
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	02 c0       	rjmp	.+4      	; 0x3300 <RTC_read+0xac>
			data = TWI_rcvr(TRUE);		/* Send ACK after reviced data */
			if (!(TW_STATUS == TW_MR_DATA_ACK)) return FALSE; /* Return if an ACK not where send after data recived */
			*rbuff++ = data;
		} else {
			data = TWI_rcvr(FALSE);		/* Send NACK after reviced data */
			if (!(TW_STATUS == TW_MR_DATA_NACK)) return FALSE; /* Return if an NACK not where send after data recived */
    32fc:	20 e0       	ldi	r18, 0x00	; 0
    32fe:	30 e0       	ldi	r19, 0x00	; 0
		}
	} while (cnt);
	
	TWI_stop(); /* send stop condition */
	return TRUE;
}
    3300:	c9 01       	movw	r24, r18
    3302:	cd b7       	in	r28, 0x3d	; 61
    3304:	de b7       	in	r29, 0x3e	; 62
    3306:	e8 e0       	ldi	r30, 0x08	; 8
    3308:	0c 94 f1 2d 	jmp	0x5be2	; 0x5be2 <__epilogue_restores__+0x14>

0000330c <rtc_gettime>:

BOOL rtc_gettime (RTC *rtc)
{
    330c:	a7 e0       	ldi	r26, 0x07	; 7
    330e:	b0 e0       	ldi	r27, 0x00	; 0
    3310:	ec e8       	ldi	r30, 0x8C	; 140
    3312:	f9 e1       	ldi	r31, 0x19	; 25
    3314:	0c 94 d9 2d 	jmp	0x5bb2	; 0x5bb2 <__prologue_saves__+0x1c>
    3318:	8c 01       	movw	r16, r24

	uint8_t buf[7];

	if (!RTC_read(0b11010000, 0x01, 7, buf)) return FALSE;
    331a:	80 ed       	ldi	r24, 0xD0	; 208
    331c:	61 e0       	ldi	r22, 0x01	; 1
    331e:	47 e0       	ldi	r20, 0x07	; 7
    3320:	9e 01       	movw	r18, r28
    3322:	2f 5f       	subi	r18, 0xFF	; 255
    3324:	3f 4f       	sbci	r19, 0xFF	; 255
    3326:	0e 94 2a 19 	call	0x3254	; 0x3254 <RTC_read>
    332a:	00 97       	sbiw	r24, 0x00	; 0
    332c:	09 f4       	brne	.+2      	; 0x3330 <rtc_gettime+0x24>
    332e:	57 c0       	rjmp	.+174    	; 0x33de <rtc_gettime+0xd2>

	rtc->sec = (buf[0] & 0x0F) + ((buf[0] >> 4) & 7) * 10;
    3330:	29 81       	ldd	r18, Y+1	; 0x01
    3332:	92 2f       	mov	r25, r18
    3334:	96 95       	lsr	r25
    3336:	96 95       	lsr	r25
    3338:	96 95       	lsr	r25
    333a:	9e 70       	andi	r25, 0x0E	; 14
    333c:	89 2f       	mov	r24, r25
    333e:	88 0f       	add	r24, r24
    3340:	88 0f       	add	r24, r24
    3342:	89 0f       	add	r24, r25
    3344:	2f 70       	andi	r18, 0x0F	; 15
    3346:	82 0f       	add	r24, r18
    3348:	f8 01       	movw	r30, r16
    334a:	87 83       	std	Z+7, r24	; 0x07
	rtc->min = (buf[1] & 0x0F) + (buf[1] >> 4) * 10;
    334c:	2a 81       	ldd	r18, Y+2	; 0x02
    334e:	92 2f       	mov	r25, r18
    3350:	92 95       	swap	r25
    3352:	9f 70       	andi	r25, 0x0F	; 15
    3354:	99 0f       	add	r25, r25
    3356:	89 2f       	mov	r24, r25
    3358:	88 0f       	add	r24, r24
    335a:	88 0f       	add	r24, r24
    335c:	89 0f       	add	r24, r25
    335e:	2f 70       	andi	r18, 0x0F	; 15
    3360:	82 0f       	add	r24, r18
    3362:	86 83       	std	Z+6, r24	; 0x06
	rtc->hour = (buf[2] & 0x0F) + ((buf[2] >> 4) & 3) * 10;
    3364:	2b 81       	ldd	r18, Y+3	; 0x03
    3366:	92 2f       	mov	r25, r18
    3368:	96 95       	lsr	r25
    336a:	96 95       	lsr	r25
    336c:	96 95       	lsr	r25
    336e:	96 70       	andi	r25, 0x06	; 6
    3370:	89 2f       	mov	r24, r25
    3372:	88 0f       	add	r24, r24
    3374:	88 0f       	add	r24, r24
    3376:	89 0f       	add	r24, r25
    3378:	2f 70       	andi	r18, 0x0F	; 15
    337a:	82 0f       	add	r24, r18
    337c:	85 83       	std	Z+5, r24	; 0x05
	rtc->wday = (buf[3] & 0x07);
    337e:	8c 81       	ldd	r24, Y+4	; 0x04
    3380:	87 70       	andi	r24, 0x07	; 7
    3382:	84 83       	std	Z+4, r24	; 0x04
	rtc->mday = (buf[4] & 0x0F) + ((buf[4] >> 4) & 3) * 10;
    3384:	2d 81       	ldd	r18, Y+5	; 0x05
    3386:	92 2f       	mov	r25, r18
    3388:	96 95       	lsr	r25
    338a:	96 95       	lsr	r25
    338c:	96 95       	lsr	r25
    338e:	96 70       	andi	r25, 0x06	; 6
    3390:	89 2f       	mov	r24, r25
    3392:	88 0f       	add	r24, r24
    3394:	88 0f       	add	r24, r24
    3396:	89 0f       	add	r24, r25
    3398:	2f 70       	andi	r18, 0x0F	; 15
    339a:	82 0f       	add	r24, r18
    339c:	83 83       	std	Z+3, r24	; 0x03
	rtc->month = (buf[5] & 0x0F) + (buf[5] >> 4) * 10;
    339e:	2e 81       	ldd	r18, Y+6	; 0x06
    33a0:	92 2f       	mov	r25, r18
    33a2:	92 95       	swap	r25
    33a4:	9f 70       	andi	r25, 0x0F	; 15
    33a6:	99 0f       	add	r25, r25
    33a8:	89 2f       	mov	r24, r25
    33aa:	88 0f       	add	r24, r24
    33ac:	88 0f       	add	r24, r24
    33ae:	89 0f       	add	r24, r25
    33b0:	2f 70       	andi	r18, 0x0F	; 15
    33b2:	82 0f       	add	r24, r18
    33b4:	82 83       	std	Z+2, r24	; 0x02
	rtc->year = 2000 + (buf[6] & 0x0F) + (buf[6] >> 4) * 10;
    33b6:	2f 81       	ldd	r18, Y+7	; 0x07
    33b8:	82 2f       	mov	r24, r18
    33ba:	90 e0       	ldi	r25, 0x00	; 0
    33bc:	8f 70       	andi	r24, 0x0F	; 15
    33be:	90 70       	andi	r25, 0x00	; 0
    33c0:	80 53       	subi	r24, 0x30	; 48
    33c2:	98 4f       	sbci	r25, 0xF8	; 248
    33c4:	22 95       	swap	r18
    33c6:	2f 70       	andi	r18, 0x0F	; 15
    33c8:	3a e0       	ldi	r19, 0x0A	; 10
    33ca:	23 9f       	mul	r18, r19
    33cc:	90 01       	movw	r18, r0
    33ce:	11 24       	eor	r1, r1
    33d0:	82 0f       	add	r24, r18
    33d2:	93 1f       	adc	r25, r19
    33d4:	91 83       	std	Z+1, r25	; 0x01
    33d6:	80 83       	st	Z, r24

	return TRUE;
    33d8:	21 e0       	ldi	r18, 0x01	; 1
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	02 c0       	rjmp	.+4      	; 0x33e2 <rtc_gettime+0xd6>
BOOL rtc_gettime (RTC *rtc)
{

	uint8_t buf[7];

	if (!RTC_read(0b11010000, 0x01, 7, buf)) return FALSE;
    33de:	20 e0       	ldi	r18, 0x00	; 0
    33e0:	30 e0       	ldi	r19, 0x00	; 0
/*   rtc->month = 5;*/
/*   rtc->year = 2006;*/


   return TRUE;
}
    33e2:	c9 01       	movw	r24, r18
    33e4:	27 96       	adiw	r28, 0x07	; 7
    33e6:	e4 e0       	ldi	r30, 0x04	; 4
    33e8:	0c 94 f5 2d 	jmp	0x5bea	; 0x5bea <__epilogue_restores__+0x1c>

000033ec <rtc_settime>:

BOOL rtc_settime (const RTC *rtc)
{
    33ec:	a7 e0       	ldi	r26, 0x07	; 7
    33ee:	b0 e0       	ldi	r27, 0x00	; 0
    33f0:	ec ef       	ldi	r30, 0xFC	; 252
    33f2:	f9 e1       	ldi	r31, 0x19	; 25
    33f4:	0c 94 db 2d 	jmp	0x5bb6	; 0x5bb6 <__prologue_saves__+0x20>
    33f8:	fc 01       	movw	r30, r24
	uint8_t buf[7];

	buf[0] = ((rtc->sec / 10) * 16 + rtc->sec % 10) & 0x7F;
    33fa:	87 81       	ldd	r24, Z+7	; 0x07
    33fc:	2a e0       	ldi	r18, 0x0A	; 10
    33fe:	62 2f       	mov	r22, r18
    3400:	0e 94 76 2d 	call	0x5aec	; 0x5aec <__udivmodqi4>
    3404:	82 95       	swap	r24
    3406:	80 7f       	andi	r24, 0xF0	; 240
    3408:	89 0f       	add	r24, r25
    340a:	8f 77       	andi	r24, 0x7F	; 127
    340c:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = ((rtc->min / 10) * 16 + rtc->min % 10) & 0xF7;
    340e:	86 81       	ldd	r24, Z+6	; 0x06
    3410:	0e 94 76 2d 	call	0x5aec	; 0x5aec <__udivmodqi4>
    3414:	82 95       	swap	r24
    3416:	80 7f       	andi	r24, 0xF0	; 240
    3418:	89 0f       	add	r24, r25
    341a:	87 7f       	andi	r24, 0xF7	; 247
    341c:	8a 83       	std	Y+2, r24	; 0x02
	buf[2] = ((rtc->hour / 10) * 16 + rtc->hour % 10) & 0x3F;
    341e:	85 81       	ldd	r24, Z+5	; 0x05
    3420:	0e 94 76 2d 	call	0x5aec	; 0x5aec <__udivmodqi4>
    3424:	82 95       	swap	r24
    3426:	80 7f       	andi	r24, 0xF0	; 240
    3428:	89 0f       	add	r24, r25
    342a:	8f 73       	andi	r24, 0x3F	; 63
    342c:	8b 83       	std	Y+3, r24	; 0x03
	buf[3] = rtc->wday & 7;
    342e:	84 81       	ldd	r24, Z+4	; 0x04
    3430:	87 70       	andi	r24, 0x07	; 7
    3432:	8c 83       	std	Y+4, r24	; 0x04
	buf[4] = ((rtc->mday / 10) * 16 + rtc->mday % 10) & 0x3F;
    3434:	83 81       	ldd	r24, Z+3	; 0x03
    3436:	0e 94 76 2d 	call	0x5aec	; 0x5aec <__udivmodqi4>
    343a:	82 95       	swap	r24
    343c:	80 7f       	andi	r24, 0xF0	; 240
    343e:	89 0f       	add	r24, r25
    3440:	8f 73       	andi	r24, 0x3F	; 63
    3442:	8d 83       	std	Y+5, r24	; 0x05
	buf[5] = ((rtc->month / 10) * 16 + rtc->month % 10) & 0x1F;
    3444:	82 81       	ldd	r24, Z+2	; 0x02
    3446:	0e 94 76 2d 	call	0x5aec	; 0x5aec <__udivmodqi4>
    344a:	82 95       	swap	r24
    344c:	80 7f       	andi	r24, 0xF0	; 240
    344e:	89 0f       	add	r24, r25
    3450:	8f 71       	andi	r24, 0x1F	; 31
    3452:	8e 83       	std	Y+6, r24	; 0x06
	buf[6] = ((rtc->year - 2000) / 10) * 16 + (rtc->year - 2000) % 10;
    3454:	80 81       	ld	r24, Z
    3456:	91 81       	ldd	r25, Z+1	; 0x01
    3458:	80 5d       	subi	r24, 0xD0	; 208
    345a:	97 40       	sbci	r25, 0x07	; 7
    345c:	6a e0       	ldi	r22, 0x0A	; 10
    345e:	70 e0       	ldi	r23, 0x00	; 0
    3460:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <__udivmodhi4>
    3464:	62 95       	swap	r22
    3466:	60 7f       	andi	r22, 0xF0	; 240
    3468:	68 0f       	add	r22, r24
    346a:	6f 83       	std	Y+7, r22	; 0x07

	return RTC_write(0b11010000, 0x01, 7, buf);
    346c:	80 ed       	ldi	r24, 0xD0	; 208
    346e:	61 e0       	ldi	r22, 0x01	; 1
    3470:	47 e0       	ldi	r20, 0x07	; 7
    3472:	9e 01       	movw	r18, r28
    3474:	2f 5f       	subi	r18, 0xFF	; 255
    3476:	3f 4f       	sbci	r19, 0xFF	; 255
    3478:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <RTC_write>
}
    347c:	27 96       	adiw	r28, 0x07	; 7
    347e:	e2 e0       	ldi	r30, 0x02	; 2
    3480:	0c 94 f7 2d 	jmp	0x5bee	; 0x5bee <__epilogue_restores__+0x20>

00003484 <rtc_init>:

BOOL rtc_init (void)
{
	/* This function should also test the RTC to ensure a valid clock is returned but this is work for the future */
	rtc_clearHaltBit();	/* Before this is cleared time read from RTC is time of last system power down */
    3484:	0e 94 16 19 	call	0x322c	; 0x322c <rtc_clearHaltBit>

	return TRUE;
} 
    3488:	81 e0       	ldi	r24, 0x01	; 1
    348a:	90 e0       	ldi	r25, 0x00	; 0
    348c:	08 95       	ret

0000348e <can_clear_all_mob>:
U8  mob_number;
/*
    U8  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    348e:	80 e0       	ldi	r24, 0x00	; 0
    {
        CANPAGE = (mob_number << 4);    //! Page index
    3490:	98 2f       	mov	r25, r24
    3492:	92 95       	swap	r25
    3494:	90 7f       	andi	r25, 0xF0	; 240
    3496:	90 93 ed 00 	sts	0x00ED, r25
        Can_clear_mob();                //! All MOb Registers=0
    349a:	ee ee       	ldi	r30, 0xEE	; 238
    349c:	f0 e0       	ldi	r31, 0x00	; 0
    349e:	11 92       	st	Z+, r1
    34a0:	e8 3f       	cpi	r30, 0xF8	; 248
    34a2:	f1 05       	cpc	r31, r1
    34a4:	e1 f7       	brne	.-8      	; 0x349e <can_clear_all_mob+0x10>
U8  mob_number;
/*
    U8  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    34a6:	8f 5f       	subi	r24, 0xFF	; 255
    34a8:	8f 30       	cpi	r24, 0x0F	; 15
    34aa:	91 f7       	brne	.-28     	; 0x3490 <can_clear_all_mob+0x2>
        {
            CANMSG = 0;                 //! MOb data FIFO
        }
*/
    }
}
    34ac:	08 95       	ret

000034ae <can_get_mob_free>:
//------------------------------------------------------------------------------
U8 can_get_mob_free(void)
{
    U8 mob_number, page_saved;

    page_saved = CANPAGE;
    34ae:	20 91 ed 00 	lds	r18, 0x00ED
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    34b2:	80 e0       	ldi	r24, 0x00	; 0
    {
        Can_set_mob(mob_number);
    34b4:	98 2f       	mov	r25, r24
    34b6:	92 95       	swap	r25
    34b8:	90 7f       	andi	r25, 0xF0	; 240
    34ba:	90 93 ed 00 	sts	0x00ED, r25
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
    34be:	90 91 ef 00 	lds	r25, 0x00EF
    34c2:	90 7c       	andi	r25, 0xC0	; 192
    34c4:	19 f4       	brne	.+6      	; 0x34cc <can_get_mob_free+0x1e>
        {
            CANPAGE = page_saved;
    34c6:	20 93 ed 00 	sts	0x00ED, r18
            return (mob_number);
    34ca:	08 95       	ret
U8 can_get_mob_free(void)
{
    U8 mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    34cc:	8f 5f       	subi	r24, 0xFF	; 255
    34ce:	8f 30       	cpi	r24, 0x0F	; 15
    34d0:	89 f7       	brne	.-30     	; 0x34b4 <can_get_mob_free+0x6>
        {
            CANPAGE = page_saved;
            return (mob_number);
        }
    }
    CANPAGE = page_saved;
    34d2:	20 93 ed 00 	sts	0x00ED, r18
    return (NO_MOB);
    34d6:	8f ef       	ldi	r24, 0xFF	; 255
}
    34d8:	08 95       	ret

000034da <can_get_mob_status>:
U8 can_get_mob_status(void)
{
    U8 mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
    34da:	80 91 ef 00 	lds	r24, 0x00EF
    34de:	80 7c       	andi	r24, 0xC0	; 192
    34e0:	69 f0       	breq	.+26     	; 0x34fc <can_get_mob_status+0x22>

    canstmob_copy = CANSTMOB; // Copy for test integrity
    34e2:	90 91 ee 00 	lds	r25, 0x00EE

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
    34e6:	89 2f       	mov	r24, r25
    34e8:	80 7e       	andi	r24, 0xE0	; 224
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
    34ea:	80 32       	cpi	r24, 0x20	; 32
    34ec:	41 f0       	breq	.+16     	; 0x34fe <can_get_mob_status+0x24>
    34ee:	80 34       	cpi	r24, 0x40	; 64
    34f0:	31 f0       	breq	.+12     	; 0x34fe <can_get_mob_status+0x24>
         (mob_status==MOB_TX_COMPLETED) ||   \
    34f2:	80 3a       	cpi	r24, 0xA0	; 160
    34f4:	21 f0       	breq	.+8      	; 0x34fe <can_get_mob_status+0x24>
    // - MOb Status bit_0 = MOB_ACK_ERROR
    // - MOb Status bit_1 = MOB_FORM_ERROR
    // - MOb Status bit_2 = MOB_CRC_ERROR
    // - MOb Status bit_3 = MOB_STUFF_ERROR
    // - MOb Status bit_4 = MOB_BIT_ERROR
    mob_status = canstmob_copy & ERR_MOB_MSK;
    34f6:	89 2f       	mov	r24, r25
    34f8:	8f 71       	andi	r24, 0x1F	; 31
    34fa:	08 95       	ret
U8 can_get_mob_status(void)
{
    U8 mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
    34fc:	8f ef       	ldi	r24, 0xFF	; 255
    mob_status = canstmob_copy & ERR_MOB_MSK;
    if (mob_status != 0) { return(mob_status); }

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
}
    34fe:	08 95       	ret

00003500 <can_get_data>:
//------------------------------------------------------------------------------
void can_get_data(U8* p_can_message_data)
{
    U8 data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
    3500:	60 e0       	ldi	r22, 0x00	; 0
    3502:	07 c0       	rjmp	.+14     	; 0x3512 <can_get_data+0x12>
    {
        *(p_can_message_data + data_index) = CANMSG;
    3504:	20 91 fa 00 	lds	r18, 0x00FA
    3508:	48 0f       	add	r20, r24
    350a:	59 1f       	adc	r21, r25
    350c:	fa 01       	movw	r30, r20
    350e:	20 83       	st	Z, r18
//------------------------------------------------------------------------------
void can_get_data(U8* p_can_message_data)
{
    U8 data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
    3510:	6f 5f       	subi	r22, 0xFF	; 255
    3512:	20 91 ef 00 	lds	r18, 0x00EF
    3516:	46 2f       	mov	r20, r22
    3518:	50 e0       	ldi	r21, 0x00	; 0
    351a:	30 e0       	ldi	r19, 0x00	; 0
    351c:	2f 70       	andi	r18, 0x0F	; 15
    351e:	30 70       	andi	r19, 0x00	; 0
    3520:	42 17       	cp	r20, r18
    3522:	53 07       	cpc	r21, r19
    3524:	7c f3       	brlt	.-34     	; 0x3504 <can_get_data+0x4>
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
    3526:	08 95       	ret

00003528 <can_auto_baudrate>:
//! @return Baudrate Status
//!         ==0: research of bit timing configuration failed
//!         ==1: baudrate performed
//------------------------------------------------------------------------------
U8 can_auto_baudrate (U8 mode)
{
    3528:	a0 e0       	ldi	r26, 0x00	; 0
    352a:	b0 e0       	ldi	r27, 0x00	; 0
    352c:	ea e9       	ldi	r30, 0x9A	; 154
    352e:	fa e1       	ldi	r31, 0x1A	; 26
    3530:	0c 94 d4 2d 	jmp	0x5ba8	; 0x5ba8 <__prologue_saves__+0x12>
    conf_index = 0;
    bt_not_found = 1;

    //! --- Init segment variables with MIN values if mode=0
    //!     or init segment variables with CANBTx if mode=1
    if (mode==0)
    3534:	88 23       	and	r24, r24
    3536:	09 f4       	brne	.+2      	; 0x353a <can_auto_baudrate+0x12>
    3538:	4f c0       	rjmp	.+158    	; 0x35d8 <can_auto_baudrate+0xb0>
        try_conf = 1;       //! Try this configuration
        wait_for_rx = 1;    //! Enable "while (wait_for_rx ..." loop
    }
    else //! mode = 1
    {
        brp  = Max ((((CANBT1 &  BRP_MSK) >> 1) +1) , BRP_MIN );
    353a:	80 91 e2 00 	lds	r24, 0x00E2
    353e:	8e 77       	andi	r24, 0x7E	; 126
    3540:	51 f0       	breq	.+20     	; 0x3556 <can_auto_baudrate+0x2e>
    3542:	80 91 e2 00 	lds	r24, 0x00E2
    3546:	90 e0       	ldi	r25, 0x00	; 0
    3548:	8e 77       	andi	r24, 0x7E	; 126
    354a:	90 70       	andi	r25, 0x00	; 0
    354c:	95 95       	asr	r25
    354e:	87 95       	ror	r24
    3550:	18 2f       	mov	r17, r24
    3552:	1f 5f       	subi	r17, 0xFF	; 255
    3554:	01 c0       	rjmp	.+2      	; 0x3558 <can_auto_baudrate+0x30>
    3556:	11 e0       	ldi	r17, 0x01	; 1
        prs  = Max ((((CANBT2 &  PRS_MSK) >> 1) +1) , PRS_MIN );
    3558:	80 91 e3 00 	lds	r24, 0x00E3
    355c:	8e 70       	andi	r24, 0x0E	; 14
    355e:	49 f0       	breq	.+18     	; 0x3572 <can_auto_baudrate+0x4a>
    3560:	a0 91 e3 00 	lds	r26, 0x00E3
    3564:	b0 e0       	ldi	r27, 0x00	; 0
    3566:	ae 70       	andi	r26, 0x0E	; 14
    3568:	b0 70       	andi	r27, 0x00	; 0
    356a:	b5 95       	asr	r27
    356c:	a7 95       	ror	r26
    356e:	af 5f       	subi	r26, 0xFF	; 255
    3570:	01 c0       	rjmp	.+2      	; 0x3574 <can_auto_baudrate+0x4c>
    3572:	a1 e0       	ldi	r26, 0x01	; 1
        phs1 = Max ((((CANBT3 & PHS1_MSK) >> 1) +1) , PHS1_MIN);
    3574:	80 91 e4 00 	lds	r24, 0x00E4
    3578:	8e 70       	andi	r24, 0x0E	; 14
    357a:	83 30       	cpi	r24, 0x03	; 3
    357c:	48 f0       	brcs	.+18     	; 0x3590 <can_auto_baudrate+0x68>
    357e:	e0 91 e4 00 	lds	r30, 0x00E4
    3582:	f0 e0       	ldi	r31, 0x00	; 0
    3584:	ee 70       	andi	r30, 0x0E	; 14
    3586:	f0 70       	andi	r31, 0x00	; 0
    3588:	f5 95       	asr	r31
    358a:	e7 95       	ror	r30
    358c:	ef 5f       	subi	r30, 0xFF	; 255
    358e:	01 c0       	rjmp	.+2      	; 0x3592 <can_auto_baudrate+0x6a>
    3590:	e2 e0       	ldi	r30, 0x02	; 2
        phs2 = Max ((((CANBT3 & PHS2_MSK) >> 4) +1) , PHS2_MIN);
    3592:	80 91 e4 00 	lds	r24, 0x00E4
    3596:	80 77       	andi	r24, 0x70	; 112
    3598:	81 31       	cpi	r24, 0x11	; 17
    359a:	68 f0       	brcs	.+26     	; 0x35b6 <can_auto_baudrate+0x8e>
    359c:	80 91 e4 00 	lds	r24, 0x00E4
    35a0:	90 e0       	ldi	r25, 0x00	; 0
    35a2:	80 77       	andi	r24, 0x70	; 112
    35a4:	90 70       	andi	r25, 0x00	; 0
    35a6:	34 e0       	ldi	r19, 0x04	; 4
    35a8:	95 95       	asr	r25
    35aa:	87 95       	ror	r24
    35ac:	3a 95       	dec	r19
    35ae:	e1 f7       	brne	.-8      	; 0x35a8 <can_auto_baudrate+0x80>
    35b0:	f8 2f       	mov	r31, r24
    35b2:	ff 5f       	subi	r31, 0xFF	; 255
    35b4:	01 c0       	rjmp	.+2      	; 0x35b8 <can_auto_baudrate+0x90>
    35b6:	f2 e0       	ldi	r31, 0x02	; 2
        ntq  = Max ((prs + phs1 + phs2 + 1) , NTQ_MIN);
    35b8:	8a 2f       	mov	r24, r26
    35ba:	90 e0       	ldi	r25, 0x00	; 0
    35bc:	8e 0f       	add	r24, r30
    35be:	91 1d       	adc	r25, r1
    35c0:	8f 0f       	add	r24, r31
    35c2:	91 1d       	adc	r25, r1
    35c4:	88 30       	cpi	r24, 0x08	; 8
    35c6:	91 05       	cpc	r25, r1
    35c8:	7c f0       	brlt	.+30     	; 0x35e8 <can_auto_baudrate+0xc0>
    35ca:	ba 2f       	mov	r27, r26
    35cc:	bf 5f       	subi	r27, 0xFF	; 255
    35ce:	be 0f       	add	r27, r30
    35d0:	bf 0f       	add	r27, r31
        phs1_inc = evaluate = 1;   //! To enter in "while (evaluate ..." loop
        try_conf = 0;       //! Look for the next configuration
        wait_for_rx = 0;    //! Skip "while (wait_for_rx ..." loop
    35d2:	60 e0       	ldi	r22, 0x00	; 0
        brp  = Max ((((CANBT1 &  BRP_MSK) >> 1) +1) , BRP_MIN );
        prs  = Max ((((CANBT2 &  PRS_MSK) >> 1) +1) , PRS_MIN );
        phs1 = Max ((((CANBT3 & PHS1_MSK) >> 1) +1) , PHS1_MIN);
        phs2 = Max ((((CANBT3 & PHS2_MSK) >> 4) +1) , PHS2_MIN);
        ntq  = Max ((prs + phs1 + phs2 + 1) , NTQ_MIN);
        phs1_inc = evaluate = 1;   //! To enter in "while (evaluate ..." loop
    35d4:	71 e0       	ldi	r23, 0x01	; 1
    35d6:	0b c0       	rjmp	.+22     	; 0x35ee <can_auto_baudrate+0xc6>
        ntq  = NTQ_MIN;
        phs1 = PHS1_MIN;
        phs2 = PHS2_MIN;
        prs  = ntq - ( phs1 + phs2 + 1 );
        try_conf = 1;       //! Try this configuration
        wait_for_rx = 1;    //! Enable "while (wait_for_rx ..." loop
    35d8:	61 e0       	ldi	r22, 0x01	; 1
    U8  ovrtim_flag=0;                          //! Timer overflow count
    U16 conf_index;                             //! Count of bit timing configuration tried
    U8  bt_performed;                           //! Return flag

    //! --- Default setting
    phs1_inc = evaluate = 0;
    35da:	70 e0       	ldi	r23, 0x00	; 0
    if (mode==0)
    {
        brp  = BRP_MIN;
        ntq  = NTQ_MIN;
        phs1 = PHS1_MIN;
        phs2 = PHS2_MIN;
    35dc:	f2 e0       	ldi	r31, 0x02	; 2
    //!     or init segment variables with CANBTx if mode=1
    if (mode==0)
    {
        brp  = BRP_MIN;
        ntq  = NTQ_MIN;
        phs1 = PHS1_MIN;
    35de:	e2 e0       	ldi	r30, 0x02	; 2
    //! --- Init segment variables with MIN values if mode=0
    //!     or init segment variables with CANBTx if mode=1
    if (mode==0)
    {
        brp  = BRP_MIN;
        ntq  = NTQ_MIN;
    35e0:	b8 e0       	ldi	r27, 0x08	; 8
        phs1 = PHS1_MIN;
        phs2 = PHS2_MIN;
        prs  = ntq - ( phs1 + phs2 + 1 );
    35e2:	a3 e0       	ldi	r26, 0x03	; 3

    //! --- Init segment variables with MIN values if mode=0
    //!     or init segment variables with CANBTx if mode=1
    if (mode==0)
    {
        brp  = BRP_MIN;
    35e4:	11 e0       	ldi	r17, 0x01	; 1
    35e6:	03 c0       	rjmp	.+6      	; 0x35ee <can_auto_baudrate+0xc6>
        phs1 = Max ((((CANBT3 & PHS1_MSK) >> 1) +1) , PHS1_MIN);
        phs2 = Max ((((CANBT3 & PHS2_MSK) >> 4) +1) , PHS2_MIN);
        ntq  = Max ((prs + phs1 + phs2 + 1) , NTQ_MIN);
        phs1_inc = evaluate = 1;   //! To enter in "while (evaluate ..." loop
        try_conf = 0;       //! Look for the next configuration
        wait_for_rx = 0;    //! Skip "while (wait_for_rx ..." loop
    35e8:	60 e0       	ldi	r22, 0x00	; 0
        brp  = Max ((((CANBT1 &  BRP_MSK) >> 1) +1) , BRP_MIN );
        prs  = Max ((((CANBT2 &  PRS_MSK) >> 1) +1) , PRS_MIN );
        phs1 = Max ((((CANBT3 & PHS1_MSK) >> 1) +1) , PHS1_MIN);
        phs2 = Max ((((CANBT3 & PHS2_MSK) >> 4) +1) , PHS2_MIN);
        ntq  = Max ((prs + phs1 + phs2 + 1) , NTQ_MIN);
        phs1_inc = evaluate = 1;   //! To enter in "while (evaluate ..." loop
    35ea:	71 e0       	ldi	r23, 0x01	; 1
    {
        brp  = Max ((((CANBT1 &  BRP_MSK) >> 1) +1) , BRP_MIN );
        prs  = Max ((((CANBT2 &  PRS_MSK) >> 1) +1) , PRS_MIN );
        phs1 = Max ((((CANBT3 & PHS1_MSK) >> 1) +1) , PHS1_MIN);
        phs2 = Max ((((CANBT3 & PHS2_MSK) >> 4) +1) , PHS2_MIN);
        ntq  = Max ((prs + phs1 + phs2 + 1) , NTQ_MIN);
    35ec:	b8 e0       	ldi	r27, 0x08	; 8
        try_conf = 0;       //! Look for the next configuration
        wait_for_rx = 0;    //! Skip "while (wait_for_rx ..." loop
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
    35ee:	80 e0       	ldi	r24, 0x00	; 0
    {
        Can_set_mob(u8_temp0);  //! Page index
    35f0:	98 2f       	mov	r25, r24
    35f2:	92 95       	swap	r25
    35f4:	90 7f       	andi	r25, 0xF0	; 240
    35f6:	90 93 ed 00 	sts	0x00ED, r25
        Can_clear_mob();        //! All MOb Registers = 0x00
    35fa:	ce ee       	ldi	r28, 0xEE	; 238
    35fc:	d0 e0       	ldi	r29, 0x00	; 0
    35fe:	19 92       	st	Y+, r1
    3600:	c8 3f       	cpi	r28, 0xF8	; 248
    3602:	d1 05       	cpc	r29, r1
    3604:	e1 f7       	brne	.-8      	; 0x35fe <can_auto_baudrate+0xd6>
        try_conf = 0;       //! Look for the next configuration
        wait_for_rx = 0;    //! Skip "while (wait_for_rx ..." loop
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
    3606:	8f 5f       	subi	r24, 0xFF	; 255
    3608:	8f 30       	cpi	r24, 0x0F	; 15
    360a:	91 f7       	brne	.-28     	; 0x35f0 <can_auto_baudrate+0xc8>
    360c:	06 2f       	mov	r16, r22
    360e:	e7 2e       	mov	r14, r23
    3610:	40 e0       	ldi	r20, 0x00	; 0
    3612:	50 e0       	ldi	r21, 0x00	; 0
    3614:	dd 24       	eor	r13, r13
            CANTCON = (U8)(conf_index >> 3);

            //! --- MOb configuration
            Can_set_mob(MOB_0);                 //! Use MOb-0
            CANSTMOB = 0;                       //! Reset MOb status (undone by "Can_reset()")
            CANCDMOB = (MOB_Rx_ENA  << CONMOB); //! MOb 0 in receive mode
    3616:	20 e8       	ldi	r18, 0x80	; 128
    3618:	f2 2e       	mov	r15, r18

            //! CAN controller configuration
            CANGCON = (1<<LISTEN) | (1<<ENASTB);//! Enable CAN controller in "listen" mode
    361a:	9a e0       	ldi	r25, 0x0A	; 10
    361c:	c9 2e       	mov	r12, r25
            while ((CANGSTA & (1<<ENFG)) == 0); //! Wait for Enable OK
            CANGIT = 0xFF;                      //! Reset General errors and OVRTIM flag
    361e:	bb 24       	eor	r11, r11
    3620:	ba 94       	dec	r11
    3622:	01 c0       	rjmp	.+2      	; 0x3626 <can_auto_baudrate+0xfe>
    {
        Can_set_mob(u8_temp0);  //! Page index
        Can_clear_mob();        //! All MOb Registers = 0x00
    }

    while (bt_not_found == 1)
    3624:	ee 24       	eor	r14, r14
    {
        if (try_conf == 1)
    3626:	01 30       	cpi	r16, 0x01	; 1
    3628:	09 f0       	breq	.+2      	; 0x362c <can_auto_baudrate+0x104>
    362a:	7b c0       	rjmp	.+246    	; 0x3722 <can_auto_baudrate+0x1fa>
        {
            Can_reset();
    362c:	00 93 d8 00 	sts	0x00D8, r16
            conf_index++;
    3630:	4f 5f       	subi	r20, 0xFF	; 255
    3632:	5f 4f       	sbci	r21, 0xFF	; 255
            ovrtim_flag=0;

            //! --- CANBTx registers update (sjw = phs2/2, 3 sample points)
            CANBT1 = ((brp-1) << BRP);
    3634:	81 2f       	mov	r24, r17
    3636:	81 50       	subi	r24, 0x01	; 1
    3638:	88 0f       	add	r24, r24
    363a:	80 93 e2 00 	sts	0x00E2, r24
            CANBT2 = (((phs2 >> 1)-1) << SJW) |((prs-1) << PRS);
    363e:	2f 2f       	mov	r18, r31
    3640:	26 95       	lsr	r18
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	21 50       	subi	r18, 0x01	; 1
    3646:	30 40       	sbci	r19, 0x00	; 0
    3648:	85 e0       	ldi	r24, 0x05	; 5
    364a:	22 0f       	add	r18, r18
    364c:	33 1f       	adc	r19, r19
    364e:	8a 95       	dec	r24
    3650:	e1 f7       	brne	.-8      	; 0x364a <can_auto_baudrate+0x122>
    3652:	8a 2f       	mov	r24, r26
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	01 97       	sbiw	r24, 0x01	; 1
    3658:	88 0f       	add	r24, r24
    365a:	99 1f       	adc	r25, r25
    365c:	82 2b       	or	r24, r18
    365e:	80 93 e3 00 	sts	0x00E3, r24
            CANBT3 = (((phs2-1) << PHS2) | ((phs1-1) << PHS1) | (1<<SMP));
    3662:	2f 2f       	mov	r18, r31
    3664:	30 e0       	ldi	r19, 0x00	; 0
    3666:	21 50       	subi	r18, 0x01	; 1
    3668:	30 40       	sbci	r19, 0x00	; 0
    366a:	84 e0       	ldi	r24, 0x04	; 4
    366c:	22 0f       	add	r18, r18
    366e:	33 1f       	adc	r19, r19
    3670:	8a 95       	dec	r24
    3672:	e1 f7       	brne	.-8      	; 0x366c <can_auto_baudrate+0x144>
    3674:	8e 2f       	mov	r24, r30
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	01 97       	sbiw	r24, 0x01	; 1
    367a:	88 0f       	add	r24, r24
    367c:	99 1f       	adc	r25, r25
    367e:	82 2b       	or	r24, r18
    3680:	81 60       	ori	r24, 0x01	; 1
    3682:	80 93 e4 00 	sts	0x00E4, r24

            //! --- Set CAN-Timer - Used for time-out
            //!     There are 641 (0x281) possible evaluations. The first one provides the faster
            //!         the faster bit timing, the last one gives the slower. It is necessary to
            //!         modulate the time-out versus bit timing (0x281>>3=0x50, matching an U8).
            CANTCON = (U8)(conf_index >> 3);
    3686:	ca 01       	movw	r24, r20
    3688:	23 e0       	ldi	r18, 0x03	; 3
    368a:	96 95       	lsr	r25
    368c:	87 95       	ror	r24
    368e:	2a 95       	dec	r18
    3690:	e1 f7       	brne	.-8      	; 0x368a <can_auto_baudrate+0x162>
    3692:	80 93 e5 00 	sts	0x00E5, r24

            //! --- MOb configuration
            Can_set_mob(MOB_0);                 //! Use MOb-0
    3696:	10 92 ed 00 	sts	0x00ED, r1
            CANSTMOB = 0;                       //! Reset MOb status (undone by "Can_reset()")
    369a:	10 92 ee 00 	sts	0x00EE, r1
            CANCDMOB = (MOB_Rx_ENA  << CONMOB); //! MOb 0 in receive mode
    369e:	f0 92 ef 00 	sts	0x00EF, r15

            //! CAN controller configuration
            CANGCON = (1<<LISTEN) | (1<<ENASTB);//! Enable CAN controller in "listen" mode
    36a2:	c0 92 d8 00 	sts	0x00D8, r12
            while ((CANGSTA & (1<<ENFG)) == 0); //! Wait for Enable OK
    36a6:	80 91 d9 00 	lds	r24, 0x00D9
    36aa:	82 ff       	sbrs	r24, 2
    36ac:	fc cf       	rjmp	.-8      	; 0x36a6 <can_auto_baudrate+0x17e>
            CANGIT = 0xFF;                      //! Reset General errors and OVRTIM flag
    36ae:	b0 92 da 00 	sts	0x00DA, r11
    {
        if (try_conf == 1)
        {
            Can_reset();
            conf_index++;
            ovrtim_flag=0;
    36b2:	dd 24       	eor	r13, r13
    36b4:	36 c0       	rjmp	.+108    	; 0x3722 <can_auto_baudrate+0x1fa>
        //!     Try to perform a CAN message reception in "LISTEN" mode without error and
        //!     before a time_out done by CAN-Timer.
        //!     Else gives the hand to "EVALUATE LOOP" to have a new set of bit timing.
        while (wait_for_rx == 1)
        {
            u8_temp0 = CANSTMOB;
    36b6:	80 91 ee 00 	lds	r24, 0x00EE
            //! --- RxOK received ?
            if ((u8_temp0 & (1<<RXOK)) != 0)
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	85 ff       	sbrs	r24, 5
    36be:	0d c0       	rjmp	.+26     	; 0x36da <can_auto_baudrate+0x1b2>
            {   //! --- It is the successful output of "can_auto_baudrate" function
                wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
                evaluate = 0;       //! Will skip "while (evaluate ..." loop
                bt_not_found = 0;   //! Out of "while (bt_not_found ..." loop
                bt_performed = 1;   //! Return flag = TRUE
                DISABLE_MOB;        //! Disable MOb-0
    36c0:	80 91 ef 00 	lds	r24, 0x00EF
    36c4:	8f 73       	andi	r24, 0x3F	; 63
    36c6:	80 93 ef 00 	sts	0x00EF, r24
                CANGCON = 0x00;     //! Disable CAN controller & reset "listen" mode
    36ca:	10 92 d8 00 	sts	0x00D8, r1
                while ((CANGSTA & (1<<ENFG)) != 0); //! Wait for Disable OK
    36ce:	80 91 d9 00 	lds	r24, 0x00D9
    36d2:	82 fd       	sbrc	r24, 2
    36d4:	fc cf       	rjmp	.-8      	; 0x36ce <can_auto_baudrate+0x1a6>
            if ((u8_temp0 & (1<<RXOK)) != 0)
            {   //! --- It is the successful output of "can_auto_baudrate" function
                wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
                evaluate = 0;       //! Will skip "while (evaluate ..." loop
                bt_not_found = 0;   //! Out of "while (bt_not_found ..." loop
                bt_performed = 1;   //! Return flag = TRUE
    36d6:	81 e0       	ldi	r24, 0x01	; 1
    36d8:	7c c0       	rjmp	.+248    	; 0x37d2 <can_auto_baudrate+0x2aa>
            }
             //! --- Else stop if any errors
             else
            {
                //! --- MOb error ?
                if ((u8_temp0 & ((1<<BERR)|(1<<SERR)|(1<<CERR)|(1<<FERR)|(1<<AERR))) !=0)
    36da:	8f 71       	andi	r24, 0x1F	; 31
    36dc:	90 70       	andi	r25, 0x00	; 0
    36de:	00 97       	sbiw	r24, 0x00	; 0
    36e0:	19 f0       	breq	.+6      	; 0x36e8 <can_auto_baudrate+0x1c0>
                {
                    evaluate = 1;       //! Will enter in "while (evaluate ..." loop
    36e2:	ee 24       	eor	r14, r14
    36e4:	e3 94       	inc	r14
                    wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
    36e6:	60 e0       	ldi	r22, 0x00	; 0
                }

                u8_temp0 = CANGIT;
    36e8:	80 91 da 00 	lds	r24, 0x00DA

                //! --- Time_out reached ?
                if ((u8_temp0 & (1<<OVRTIM)) !=0 )
    36ec:	90 e0       	ldi	r25, 0x00	; 0
    36ee:	85 ff       	sbrs	r24, 5
    36f0:	12 c0       	rjmp	.+36     	; 0x3716 <can_auto_baudrate+0x1ee>
                {
                    if (ovrtim_flag==0)
    36f2:	dd 20       	and	r13, r13
    36f4:	41 f4       	brne	.+16     	; 0x3706 <can_auto_baudrate+0x1de>
                    {
                        //! --- First Time_out
                        CANGIT |= (1<<OVRTIM);  // Reset OVRTIM
    36f6:	20 91 da 00 	lds	r18, 0x00DA
    36fa:	20 62       	ori	r18, 0x20	; 32
    36fc:	20 93 da 00 	sts	0x00DA, r18
                        ovrtim_flag++;
    3700:	dd 24       	eor	r13, r13
    3702:	d3 94       	inc	r13
    3704:	08 c0       	rjmp	.+16     	; 0x3716 <can_auto_baudrate+0x1ee>
                    }
                    else
                    {
                        //! --- Second Time_out
                        CANGIT |= (1<<OVRTIM);  // Reset OVRTIM
    3706:	20 91 da 00 	lds	r18, 0x00DA
    370a:	20 62       	ori	r18, 0x20	; 32
    370c:	20 93 da 00 	sts	0x00DA, r18
                        evaluate = 1;           //! Will enter in "while (evaluate ..." loop
    3710:	ee 24       	eor	r14, r14
    3712:	e3 94       	inc	r14
                        wait_for_rx = 0;        //! Out of "while (wait_for_rx ..." loop
    3714:	60 e0       	ldi	r22, 0x00	; 0
                    }
                }

                //! --- General error ?
                if ((u8_temp0 & ((1<<SERG)|(1<<CERG)|(1<<FERG)|(1<<AERG))) !=0)
    3716:	8f 70       	andi	r24, 0x0F	; 15
    3718:	90 70       	andi	r25, 0x00	; 0
    371a:	00 97       	sbiw	r24, 0x00	; 0
    371c:	11 f0       	breq	.+4      	; 0x3722 <can_auto_baudrate+0x1fa>
                {
                    evaluate = 1;       //! Will enter in "while (evaluate ..." loop
                    wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
                    try_conf = 1;       //! Try this configuration
    371e:	01 e0       	ldi	r16, 0x01	; 1
    3720:	03 c0       	rjmp	.+6      	; 0x3728 <can_auto_baudrate+0x200>
        //! --- WAIT_FOR_RX LOOP:
        //!     ================
        //!     Try to perform a CAN message reception in "LISTEN" mode without error and
        //!     before a time_out done by CAN-Timer.
        //!     Else gives the hand to "EVALUATE LOOP" to have a new set of bit timing.
        while (wait_for_rx == 1)
    3722:	61 30       	cpi	r22, 0x01	; 1
    3724:	41 f2       	breq	.-112    	; 0x36b6 <can_auto_baudrate+0x18e>
    3726:	50 c0       	rjmp	.+160    	; 0x37c8 <can_auto_baudrate+0x2a0>
        //!     limit and after it is the Prescaler. During the computing high (80%)
        //!     and low (75%) limits of sampling point location are tested. SJW and
        //!     the number of sampling points are not calculated in this loop.
        while (evaluate == 1)
        {
            if (phs1_inc != 0) phs1++;
    3728:	71 11       	cpse	r23, r1
    372a:	ef 5f       	subi	r30, 0xFF	; 255
            phs1_inc = 1;

            // --- The following test takes into account the previous incrementation of phs1
            if ((phs1 > PHS1_MAX) && (phs2 >= PHS2_MAX))
    372c:	e9 30       	cpi	r30, 0x09	; 9
    372e:	d0 f0       	brcs	.+52     	; 0x3764 <can_auto_baudrate+0x23c>
    3730:	f8 30       	cpi	r31, 0x08	; 8
    3732:	d0 f0       	brcs	.+52     	; 0x3768 <can_auto_baudrate+0x240>
            {
                phs1 = PHS1_MIN;
                phs2 = PHS2_MIN;
                phs1_inc = 0;
                if (ntq != NTQ_MAX) ntq++;
    3734:	b9 31       	cpi	r27, 0x19	; 25
    3736:	19 f0       	breq	.+6      	; 0x373e <can_auto_baudrate+0x216>
    3738:	bf 5f       	subi	r27, 0xFF	; 255
            phs1_inc = 1;

            // --- The following test takes into account the previous incrementation of phs1
            if ((phs1 > PHS1_MAX) && (phs2 >= PHS2_MAX))
            {
                phs1 = PHS1_MIN;
    373a:	e2 e0       	ldi	r30, 0x02	; 2
    373c:	20 c0       	rjmp	.+64     	; 0x377e <can_auto_baudrate+0x256>
                phs1_inc = 0;
                if (ntq != NTQ_MAX) ntq++;
                else
                {
                    ntq = NTQ_MIN;
                    if (brp != BRP_MAX) brp++;
    373e:	10 34       	cpi	r17, 0x40	; 64
    3740:	21 f0       	breq	.+8      	; 0x374a <can_auto_baudrate+0x222>
    3742:	1f 5f       	subi	r17, 0xFF	; 255
            phs1_inc = 1;

            // --- The following test takes into account the previous incrementation of phs1
            if ((phs1 > PHS1_MAX) && (phs2 >= PHS2_MAX))
            {
                phs1 = PHS1_MIN;
    3744:	e2 e0       	ldi	r30, 0x02	; 2
                phs2 = PHS2_MIN;
                phs1_inc = 0;
                if (ntq != NTQ_MAX) ntq++;
                else
                {
                    ntq = NTQ_MIN;
    3746:	b8 e0       	ldi	r27, 0x08	; 8
    3748:	1a c0       	rjmp	.+52     	; 0x377e <can_auto_baudrate+0x256>
                    {
                        //! --- It is the failing of "can_auto_baudrate" function
                        evaluate = 0;       //! Out of "while (evaluate ..." loop
                        bt_performed = 0;   //! Return flag = FALSE
                        bt_not_found = 0;   //! Out of "while (bt_not_found ..." loop
                        DISABLE_MOB;        //! Disable MOb-0
    374a:	80 91 ef 00 	lds	r24, 0x00EF
    374e:	8f 73       	andi	r24, 0x3F	; 63
    3750:	80 93 ef 00 	sts	0x00EF, r24
                        CANGCON = 0x00;     //! Disable CAN controller & reset "listen" mode
    3754:	10 92 d8 00 	sts	0x00D8, r1
                        while ((CANGSTA & (1<<ENFG)) != 0); //! Wait for Disable OK
    3758:	80 91 d9 00 	lds	r24, 0x00D9
    375c:	82 fd       	sbrc	r24, 2
    375e:	fc cf       	rjmp	.-8      	; 0x3758 <can_auto_baudrate+0x230>
                    if (brp != BRP_MAX) brp++;
                    else
                    {
                        //! --- It is the failing of "can_auto_baudrate" function
                        evaluate = 0;       //! Out of "while (evaluate ..." loop
                        bt_performed = 0;   //! Return flag = FALSE
    3760:	80 e0       	ldi	r24, 0x00	; 0
    3762:	37 c0       	rjmp	.+110    	; 0x37d2 <can_auto_baudrate+0x2aa>
                }
            }
            else    // if (phs1 > PHS1_MAX ...
            {
                //! --- If psh1 > 5 then phs1 =phs2 or =phs2+1, else phs1=phs2
                if (phs1>5)
    3764:	e6 30       	cpi	r30, 0x06	; 6
    3766:	58 f0       	brcs	.+22     	; 0x377e <can_auto_baudrate+0x256>
                {
                    if (phs1>(phs2+1)) phs1=(++phs2);
    3768:	2e 2f       	mov	r18, r30
    376a:	30 e0       	ldi	r19, 0x00	; 0
    376c:	8f 2f       	mov	r24, r31
    376e:	90 e0       	ldi	r25, 0x00	; 0
    3770:	01 96       	adiw	r24, 0x01	; 1
    3772:	82 17       	cp	r24, r18
    3774:	93 07       	cpc	r25, r19
    3776:	24 f4       	brge	.+8      	; 0x3780 <can_auto_baudrate+0x258>
    3778:	ff 5f       	subi	r31, 0xFF	; 255
    377a:	ef 2f       	mov	r30, r31
    377c:	01 c0       	rjmp	.+2      	; 0x3780 <can_auto_baudrate+0x258>
                }
            }
            else    // if (phs1 > PHS1_MAX ...
            {
                //! --- If psh1 > 5 then phs1 =phs2 or =phs2+1, else phs1=phs2
                if (phs1>5)
    377e:	fe 2f       	mov	r31, r30
                }
                else
                {
                phs2=phs1;
                }
                prs = ntq - ( phs1 + phs2 + 1 );
    3780:	af 2f       	mov	r26, r31
    3782:	ae 0f       	add	r26, r30
    3784:	a0 95       	com	r26
    3786:	ab 0f       	add	r26, r27

                //! --- Test PRS limits
                if ((prs <= PRS_MAX) && (prs >= PRS_MIN))
    3788:	8a 2f       	mov	r24, r26
    378a:	81 50       	subi	r24, 0x01	; 1
    378c:	88 30       	cpi	r24, 0x08	; 8
    378e:	68 f6       	brcc	.-102    	; 0x372a <can_auto_baudrate+0x202>
                {
                    //! --- Values  accepted if  80% >= sampling point >= 75%
                    if (((phs2<<2) >= (1+prs+phs1)) && ((phs2+phs2+phs2) <= (1+prs+phs1)))
    3790:	6f 2f       	mov	r22, r31
    3792:	70 e0       	ldi	r23, 0x00	; 0
    3794:	8e 2f       	mov	r24, r30
    3796:	90 e0       	ldi	r25, 0x00	; 0
    3798:	01 96       	adiw	r24, 0x01	; 1
    379a:	8a 0f       	add	r24, r26
    379c:	91 1d       	adc	r25, r1
    379e:	9b 01       	movw	r18, r22
    37a0:	22 0f       	add	r18, r18
    37a2:	33 1f       	adc	r19, r19
    37a4:	22 0f       	add	r18, r18
    37a6:	33 1f       	adc	r19, r19
    37a8:	28 17       	cp	r18, r24
    37aa:	39 07       	cpc	r19, r25
    37ac:	0c f4       	brge	.+2      	; 0x37b0 <can_auto_baudrate+0x288>
    37ae:	bd cf       	rjmp	.-134    	; 0x372a <can_auto_baudrate+0x202>
    37b0:	9b 01       	movw	r18, r22
    37b2:	22 0f       	add	r18, r18
    37b4:	33 1f       	adc	r19, r19
    37b6:	26 0f       	add	r18, r22
    37b8:	37 1f       	adc	r19, r23
    37ba:	82 17       	cp	r24, r18
    37bc:	93 07       	cpc	r25, r19
    37be:	0c f4       	brge	.+2      	; 0x37c2 <can_auto_baudrate+0x29a>
    37c0:	b4 cf       	rjmp	.-152    	; 0x372a <can_auto_baudrate+0x202>
                    {
                        evaluate = 0;     //! Out of "while (evaluate ..." loop &
                        wait_for_rx = 1;  //!    new "while (bt_not_found ..." loop
    37c2:	61 e0       	ldi	r22, 0x01	; 1
        //!     and low (75%) limits of sampling point location are tested. SJW and
        //!     the number of sampling points are not calculated in this loop.
        while (evaluate == 1)
        {
            if (phs1_inc != 0) phs1++;
            phs1_inc = 1;
    37c4:	71 e0       	ldi	r23, 0x01	; 1
    37c6:	2e cf       	rjmp	.-420    	; 0x3624 <can_auto_baudrate+0xfc>
        //!     then Phase2=Phase1 and if Phase1>5, Phase1 can be equal to Phase2 or
        //!     Phase2+1. After this, the number of TQ is increased up to its high
        //!     limit and after it is the Prescaler. During the computing high (80%)
        //!     and low (75%) limits of sampling point location are tested. SJW and
        //!     the number of sampling points are not calculated in this loop.
        while (evaluate == 1)
    37c8:	8e 2d       	mov	r24, r14
    37ca:	81 30       	cpi	r24, 0x01	; 1
    37cc:	09 f0       	breq	.+2      	; 0x37d0 <can_auto_baudrate+0x2a8>
    37ce:	2a cf       	rjmp	.-428    	; 0x3624 <can_auto_baudrate+0xfc>
    37d0:	ab cf       	rjmp	.-170    	; 0x3728 <can_auto_baudrate+0x200>
            }
        } // while (evaluate ...
    } // while (bt_not_found ...

    return (bt_performed);
}
    37d2:	cd b7       	in	r28, 0x3d	; 61
    37d4:	de b7       	in	r29, 0x3e	; 62
    37d6:	e9 e0       	ldi	r30, 0x09	; 9
    37d8:	0c 94 f0 2d 	jmp	0x5be0	; 0x5be0 <__epilogue_restores__+0x12>

000037dc <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
U8 can_fixed_baudrate(U8 mode)
{
    Can_reset();
    37dc:	81 e0       	ldi	r24, 0x01	; 1
    37de:	80 93 d8 00 	sts	0x00D8, r24
    Can_conf_bt();
    37e2:	86 e0       	ldi	r24, 0x06	; 6
    37e4:	80 93 e2 00 	sts	0x00E2, r24
    37e8:	80 93 e3 00 	sts	0x00E3, r24
    37ec:	84 e2       	ldi	r24, 0x24	; 36
    37ee:	80 93 e4 00 	sts	0x00E4, r24
    return 1;
}
    37f2:	81 e0       	ldi	r24, 0x01	; 1
    37f4:	08 95       	ret

000037f6 <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
    37f6:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <can_fixed_baudrate>
    37fa:	88 23       	and	r24, r24
    37fc:	49 f0       	breq	.+18     	; 0x3810 <can_init+0x1a>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
    37fe:	0e 94 47 1a 	call	0x348e	; 0x348e <can_clear_all_mob>
    Can_enable();                               // c.f. macro in "can_drv.h" 
    3802:	80 91 d8 00 	lds	r24, 0x00D8
    3806:	82 60       	ori	r24, 0x02	; 2
    3808:	80 93 d8 00 	sts	0x00D8, r24
    return (1);
    380c:	81 e0       	ldi	r24, 0x01	; 1
    380e:	08 95       	ret
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
    3810:	80 e0       	ldi	r24, 0x00	; 0
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
    Can_enable();                               // c.f. macro in "can_drv.h" 
    return (1);
}
    3812:	08 95       	ret

00003814 <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd)
{
    3814:	a4 e0       	ldi	r26, 0x04	; 4
    3816:	b0 e0       	ldi	r27, 0x00	; 0
    3818:	e0 e1       	ldi	r30, 0x10	; 16
    381a:	fc e1       	ldi	r31, 0x1C	; 28
    381c:	0c 94 d9 2d 	jmp	0x5bb2	; 0x5bb2 <__prologue_saves__+0x1c>
    3820:	8c 01       	movw	r16, r24
  uint8_t mob_handle, cpt;
  U32 u32_temp;
  uint16_t tmp;
  
  if (cmd->cmd == CMD_ABORT)
    3822:	dc 01       	movw	r26, r24
    3824:	11 96       	adiw	r26, 0x01	; 1
    3826:	8d 91       	ld	r24, X+
    3828:	9c 91       	ld	r25, X
    382a:	12 97       	sbiw	r26, 0x02	; 2
    382c:	8c 30       	cpi	r24, 0x0C	; 12
    382e:	91 05       	cpc	r25, r1
    3830:	a1 f4       	brne	.+40     	; 0x385a <can_cmd+0x46>
  {
    if (cmd->status == MOB_PENDING)
    3832:	1a 96       	adiw	r26, 0x0a	; 10
    3834:	8c 91       	ld	r24, X
    3836:	1a 97       	sbiw	r26, 0x0a	; 10
    3838:	80 36       	cpi	r24, 0x60	; 96
    383a:	09 f0       	breq	.+2      	; 0x383e <can_cmd+0x2a>
    383c:	48 c5       	rjmp	.+2704   	; 0x42ce <can_cmd+0xaba>
    {
      // Rx or Tx not yet performed
      Can_set_mob(cmd->handle);
    383e:	8c 91       	ld	r24, X
    3840:	82 95       	swap	r24
    3842:	80 7f       	andi	r24, 0xF0	; 240
    3844:	80 93 ed 00 	sts	0x00ED, r24
      Can_mob_abort();
    3848:	80 91 ef 00 	lds	r24, 0x00EF
    384c:	8f 73       	andi	r24, 0x3F	; 63
    384e:	80 93 ef 00 	sts	0x00EF, r24
      Can_clear_status_mob();       // To be sure !
    3852:	10 92 ee 00 	sts	0x00EE, r1
      cmd->handle = 0;
    3856:	1c 92       	st	X, r1
    3858:	3a c5       	rjmp	.+2676   	; 0x42ce <can_cmd+0xaba>
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
    mob_handle = can_get_mob_free();
    385a:	0e 94 57 1a 	call	0x34ae	; 0x34ae <can_get_mob_free>
    if (mob_handle!= NO_MOB)
    385e:	8f 3f       	cpi	r24, 0xFF	; 255
    3860:	09 f4       	brne	.+2      	; 0x3864 <can_cmd+0x50>
    3862:	38 c5       	rjmp	.+2672   	; 0x42d4 <can_cmd+0xac0>
    {
      cmd->status = MOB_PENDING; 
    3864:	90 e6       	ldi	r25, 0x60	; 96
    3866:	d8 01       	movw	r26, r16
    3868:	1a 96       	adiw	r26, 0x0a	; 10
    386a:	9c 93       	st	X, r25
    386c:	1a 97       	sbiw	r26, 0x0a	; 10
      cmd->handle = mob_handle;
    386e:	8c 93       	st	X, r24
      Can_set_mob(mob_handle);
    3870:	98 2f       	mov	r25, r24
    3872:	92 95       	swap	r25
    3874:	90 7f       	andi	r25, 0xF0	; 240
    3876:	90 93 ed 00 	sts	0x00ED, r25
      Can_clear_mob();
    387a:	ee ee       	ldi	r30, 0xEE	; 238
    387c:	f0 e0       	ldi	r31, 0x00	; 0
    387e:	11 92       	st	Z+, r1
    3880:	e8 3f       	cpi	r30, 0xF8	; 248
    3882:	f1 05       	cpc	r31, r1
    3884:	e1 f7       	brne	.-8      	; 0x387e <can_cmd+0x6a>
          
      switch (cmd->cmd)
    3886:	d8 01       	movw	r26, r16
    3888:	11 96       	adiw	r26, 0x01	; 1
    388a:	ed 91       	ld	r30, X+
    388c:	fc 91       	ld	r31, X
    388e:	12 97       	sbiw	r26, 0x02	; 2
    3890:	31 97       	sbiw	r30, 0x01	; 1
    3892:	eb 30       	cpi	r30, 0x0B	; 11
    3894:	f1 05       	cpc	r31, r1
    3896:	08 f0       	brcs	.+2      	; 0x389a <can_cmd+0x86>
    3898:	1a c5       	rjmp	.+2612   	; 0x42ce <can_cmd+0xaba>
    389a:	e7 5a       	subi	r30, 0xA7	; 167
    389c:	ff 4f       	sbci	r31, 0xFF	; 255
    389e:	0c 94 02 2e 	jmp	0x5c04	; 0x5c04 <__tablejump2__>
    38a2:	80 e0       	ldi	r24, 0x00	; 0
    38a4:	1e c4       	rjmp	.+2108   	; 0x40e2 <can_cmd+0x8ce>
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    38a6:	f8 01       	movw	r30, r16
    38a8:	84 85       	ldd	r24, Z+12	; 0x0c
    38aa:	88 23       	and	r24, r24
    38ac:	59 f1       	breq	.+86     	; 0x3904 <can_cmd+0xf0>
    38ae:	85 81       	ldd	r24, Z+5	; 0x05
    38b0:	82 95       	swap	r24
    38b2:	86 95       	lsr	r24
    38b4:	87 70       	andi	r24, 0x07	; 7
    38b6:	96 81       	ldd	r25, Z+6	; 0x06
    38b8:	99 0f       	add	r25, r25
    38ba:	99 0f       	add	r25, r25
    38bc:	99 0f       	add	r25, r25
    38be:	89 0f       	add	r24, r25
    38c0:	80 93 f3 00 	sts	0x00F3, r24
    38c4:	84 81       	ldd	r24, Z+4	; 0x04
    38c6:	82 95       	swap	r24
    38c8:	86 95       	lsr	r24
    38ca:	87 70       	andi	r24, 0x07	; 7
    38cc:	95 81       	ldd	r25, Z+5	; 0x05
    38ce:	99 0f       	add	r25, r25
    38d0:	99 0f       	add	r25, r25
    38d2:	99 0f       	add	r25, r25
    38d4:	89 0f       	add	r24, r25
    38d6:	80 93 f2 00 	sts	0x00F2, r24
    38da:	83 81       	ldd	r24, Z+3	; 0x03
    38dc:	82 95       	swap	r24
    38de:	86 95       	lsr	r24
    38e0:	87 70       	andi	r24, 0x07	; 7
    38e2:	94 81       	ldd	r25, Z+4	; 0x04
    38e4:	99 0f       	add	r25, r25
    38e6:	99 0f       	add	r25, r25
    38e8:	99 0f       	add	r25, r25
    38ea:	89 0f       	add	r24, r25
    38ec:	80 93 f1 00 	sts	0x00F1, r24
    38f0:	83 81       	ldd	r24, Z+3	; 0x03
    38f2:	88 0f       	add	r24, r24
    38f4:	88 0f       	add	r24, r24
    38f6:	88 0f       	add	r24, r24
    38f8:	80 93 f0 00 	sts	0x00F0, r24
    38fc:	80 91 ef 00 	lds	r24, 0x00EF
    3900:	80 61       	ori	r24, 0x10	; 16
    3902:	1b c0       	rjmp	.+54     	; 0x393a <can_cmd+0x126>
          else              { Can_set_std_id(cmd->id.std);}
    3904:	d8 01       	movw	r26, r16
    3906:	13 96       	adiw	r26, 0x03	; 3
    3908:	8c 91       	ld	r24, X
    390a:	13 97       	sbiw	r26, 0x03	; 3
    390c:	86 95       	lsr	r24
    390e:	86 95       	lsr	r24
    3910:	86 95       	lsr	r24
    3912:	14 96       	adiw	r26, 0x04	; 4
    3914:	9c 91       	ld	r25, X
    3916:	14 97       	sbiw	r26, 0x04	; 4
    3918:	92 95       	swap	r25
    391a:	99 0f       	add	r25, r25
    391c:	90 7e       	andi	r25, 0xE0	; 224
    391e:	89 0f       	add	r24, r25
    3920:	80 93 f3 00 	sts	0x00F3, r24
    3924:	13 96       	adiw	r26, 0x03	; 3
    3926:	8c 91       	ld	r24, X
    3928:	13 97       	sbiw	r26, 0x03	; 3
    392a:	82 95       	swap	r24
    392c:	88 0f       	add	r24, r24
    392e:	80 7e       	andi	r24, 0xE0	; 224
    3930:	80 93 f2 00 	sts	0x00F2, r24
    3934:	80 91 ef 00 	lds	r24, 0x00EF
    3938:	8f 7e       	andi	r24, 0xEF	; 239
    393a:	80 93 ef 00 	sts	0x00EF, r24
      cmd->status = MOB_PENDING; 
      cmd->handle = mob_handle;
      Can_set_mob(mob_handle);
      Can_clear_mob();
          
      switch (cmd->cmd)
    393e:	80 e0       	ldi	r24, 0x00	; 0
    3940:	0b c0       	rjmp	.+22     	; 0x3958 <can_cmd+0x144>
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    3942:	d8 01       	movw	r26, r16
    3944:	18 96       	adiw	r26, 0x08	; 8
    3946:	ed 91       	ld	r30, X+
    3948:	fc 91       	ld	r31, X
    394a:	19 97       	sbiw	r26, 0x09	; 9
    394c:	e8 0f       	add	r30, r24
    394e:	f1 1d       	adc	r31, r1
    3950:	90 81       	ld	r25, Z
    3952:	90 93 fa 00 	sts	0x00FA, r25
    3956:	8f 5f       	subi	r24, 0xFF	; 255
    3958:	f8 01       	movw	r30, r16
    395a:	97 81       	ldd	r25, Z+7	; 0x07
    395c:	89 17       	cp	r24, r25
    395e:	88 f3       	brcs	.-30     	; 0x3942 <can_cmd+0x12e>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
    3960:	83 85       	ldd	r24, Z+11	; 0x0b
    3962:	88 23       	and	r24, r24
    3964:	21 f0       	breq	.+8      	; 0x396e <can_cmd+0x15a>
    3966:	80 91 f0 00 	lds	r24, 0x00F0
    396a:	84 60       	ori	r24, 0x04	; 4
    396c:	03 c0       	rjmp	.+6      	; 0x3974 <can_cmd+0x160>
            else Can_clear_rtr();    
    396e:	80 91 f0 00 	lds	r24, 0x00F0
    3972:	8b 7f       	andi	r24, 0xFB	; 251
    3974:	80 93 f0 00 	sts	0x00F0, r24
          Can_set_dlc(cmd->dlc);
    3978:	80 91 ef 00 	lds	r24, 0x00EF
    397c:	d8 01       	movw	r26, r16
    397e:	17 96       	adiw	r26, 0x07	; 7
    3980:	9c 91       	ld	r25, X
    3982:	17 97       	sbiw	r26, 0x07	; 7
    3984:	89 2b       	or	r24, r25
    3986:	80 93 ef 00 	sts	0x00EF, r24
          Can_config_tx();
    398a:	80 91 ef 00 	lds	r24, 0x00EF
    398e:	8f 73       	andi	r24, 0x3F	; 63
    3990:	80 93 ef 00 	sts	0x00EF, r24
    3994:	80 91 ef 00 	lds	r24, 0x00EF
    3998:	80 64       	ori	r24, 0x40	; 64
    399a:	80 93 ef 00 	sts	0x00EF, r24
    399e:	a1 c4       	rjmp	.+2370   	; 0x42e2 <can_cmd+0xace>
          break;
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    39a0:	f8 01       	movw	r30, r16
    39a2:	94 85       	ldd	r25, Z+12	; 0x0c
    39a4:	99 23       	and	r25, r25
    39a6:	59 f1       	breq	.+86     	; 0x39fe <can_cmd+0x1ea>
    39a8:	95 81       	ldd	r25, Z+5	; 0x05
    39aa:	92 95       	swap	r25
    39ac:	96 95       	lsr	r25
    39ae:	97 70       	andi	r25, 0x07	; 7
    39b0:	26 81       	ldd	r18, Z+6	; 0x06
    39b2:	22 0f       	add	r18, r18
    39b4:	22 0f       	add	r18, r18
    39b6:	22 0f       	add	r18, r18
    39b8:	92 0f       	add	r25, r18
    39ba:	90 93 f3 00 	sts	0x00F3, r25
    39be:	94 81       	ldd	r25, Z+4	; 0x04
    39c0:	92 95       	swap	r25
    39c2:	96 95       	lsr	r25
    39c4:	97 70       	andi	r25, 0x07	; 7
    39c6:	25 81       	ldd	r18, Z+5	; 0x05
    39c8:	22 0f       	add	r18, r18
    39ca:	22 0f       	add	r18, r18
    39cc:	22 0f       	add	r18, r18
    39ce:	92 0f       	add	r25, r18
    39d0:	90 93 f2 00 	sts	0x00F2, r25
    39d4:	93 81       	ldd	r25, Z+3	; 0x03
    39d6:	92 95       	swap	r25
    39d8:	96 95       	lsr	r25
    39da:	97 70       	andi	r25, 0x07	; 7
    39dc:	24 81       	ldd	r18, Z+4	; 0x04
    39de:	22 0f       	add	r18, r18
    39e0:	22 0f       	add	r18, r18
    39e2:	22 0f       	add	r18, r18
    39e4:	92 0f       	add	r25, r18
    39e6:	90 93 f1 00 	sts	0x00F1, r25
    39ea:	93 81       	ldd	r25, Z+3	; 0x03
    39ec:	99 0f       	add	r25, r25
    39ee:	99 0f       	add	r25, r25
    39f0:	99 0f       	add	r25, r25
    39f2:	90 93 f0 00 	sts	0x00F0, r25
    39f6:	90 91 ef 00 	lds	r25, 0x00EF
    39fa:	90 61       	ori	r25, 0x10	; 16
    39fc:	1b c0       	rjmp	.+54     	; 0x3a34 <can_cmd+0x220>
          else              { Can_set_std_id(cmd->id.std);}
    39fe:	d8 01       	movw	r26, r16
    3a00:	13 96       	adiw	r26, 0x03	; 3
    3a02:	9c 91       	ld	r25, X
    3a04:	13 97       	sbiw	r26, 0x03	; 3
    3a06:	96 95       	lsr	r25
    3a08:	96 95       	lsr	r25
    3a0a:	96 95       	lsr	r25
    3a0c:	14 96       	adiw	r26, 0x04	; 4
    3a0e:	2c 91       	ld	r18, X
    3a10:	14 97       	sbiw	r26, 0x04	; 4
    3a12:	22 95       	swap	r18
    3a14:	22 0f       	add	r18, r18
    3a16:	20 7e       	andi	r18, 0xE0	; 224
    3a18:	92 0f       	add	r25, r18
    3a1a:	90 93 f3 00 	sts	0x00F3, r25
    3a1e:	13 96       	adiw	r26, 0x03	; 3
    3a20:	9c 91       	ld	r25, X
    3a22:	13 97       	sbiw	r26, 0x03	; 3
    3a24:	92 95       	swap	r25
    3a26:	99 0f       	add	r25, r25
    3a28:	90 7e       	andi	r25, 0xE0	; 224
    3a2a:	90 93 f2 00 	sts	0x00F2, r25
    3a2e:	90 91 ef 00 	lds	r25, 0x00EF
    3a32:	9f 7e       	andi	r25, 0xEF	; 239
    3a34:	90 93 ef 00 	sts	0x00EF, r25
      cmd->status = MOB_PENDING; 
      cmd->handle = mob_handle;
      Can_set_mob(mob_handle);
      Can_clear_mob();
          
      switch (cmd->cmd)
    3a38:	90 e0       	ldi	r25, 0x00	; 0
    3a3a:	0b c0       	rjmp	.+22     	; 0x3a52 <can_cmd+0x23e>
          break;
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    3a3c:	d8 01       	movw	r26, r16
    3a3e:	18 96       	adiw	r26, 0x08	; 8
    3a40:	ed 91       	ld	r30, X+
    3a42:	fc 91       	ld	r31, X
    3a44:	19 97       	sbiw	r26, 0x09	; 9
    3a46:	e9 0f       	add	r30, r25
    3a48:	f1 1d       	adc	r31, r1
    3a4a:	20 81       	ld	r18, Z
    3a4c:	20 93 fa 00 	sts	0x00FA, r18
    3a50:	9f 5f       	subi	r25, 0xFF	; 255
    3a52:	f8 01       	movw	r30, r16
    3a54:	27 81       	ldd	r18, Z+7	; 0x07
    3a56:	92 17       	cp	r25, r18
    3a58:	88 f3       	brcs	.-30     	; 0x3a3c <can_cmd+0x228>
          cmd->ctrl.rtr=0; Can_clear_rtr();
    3a5a:	13 86       	std	Z+11, r1	; 0x0b
    3a5c:	90 91 f0 00 	lds	r25, 0x00F0
    3a60:	9b 7f       	andi	r25, 0xFB	; 251
    3a62:	90 93 f0 00 	sts	0x00F0, r25
          Can_set_dlc(cmd->dlc);
    3a66:	90 91 ef 00 	lds	r25, 0x00EF
    3a6a:	27 81       	ldd	r18, Z+7	; 0x07
    3a6c:	92 2b       	or	r25, r18
    3a6e:	90 93 ef 00 	sts	0x00EF, r25
          Can_config_tx();
    3a72:	90 91 ef 00 	lds	r25, 0x00EF
    3a76:	9f 73       	andi	r25, 0x3F	; 63
    3a78:	90 93 ef 00 	sts	0x00EF, r25
    3a7c:	90 91 ef 00 	lds	r25, 0x00EF
    3a80:	90 64       	ori	r25, 0x40	; 64
    3a82:	90 93 ef 00 	sts	0x00EF, r25
	  if(!cmd->blocking){	/* Enable interrupt TODO Fjern denne linje og lav det på en bedre måde */ 
    3a86:	95 85       	ldd	r25, Z+13	; 0x0d
    3a88:	99 23       	and	r25, r25
    3a8a:	09 f0       	breq	.+2      	; 0x3a8e <can_cmd+0x27a>
    3a8c:	2a c4       	rjmp	.+2132   	; 0x42e2 <can_cmd+0xace>
    3a8e:	67 c2       	rjmp	.+1230   	; 0x3f5e <can_cmd+0x74a>
        Can_set_mob_int(mob_handle) /* Ser ud til at virke */
	  }
          break;
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    3a90:	d8 01       	movw	r26, r16
    3a92:	1c 96       	adiw	r26, 0x0c	; 12
    3a94:	8c 91       	ld	r24, X
    3a96:	1c 97       	sbiw	r26, 0x0c	; 12
    3a98:	88 23       	and	r24, r24
    3a9a:	c9 f1       	breq	.+114    	; 0x3b0e <can_cmd+0x2fa>
    3a9c:	15 96       	adiw	r26, 0x05	; 5
    3a9e:	8c 91       	ld	r24, X
    3aa0:	15 97       	sbiw	r26, 0x05	; 5
    3aa2:	82 95       	swap	r24
    3aa4:	86 95       	lsr	r24
    3aa6:	87 70       	andi	r24, 0x07	; 7
    3aa8:	16 96       	adiw	r26, 0x06	; 6
    3aaa:	9c 91       	ld	r25, X
    3aac:	16 97       	sbiw	r26, 0x06	; 6
    3aae:	99 0f       	add	r25, r25
    3ab0:	99 0f       	add	r25, r25
    3ab2:	99 0f       	add	r25, r25
    3ab4:	89 0f       	add	r24, r25
    3ab6:	80 93 f3 00 	sts	0x00F3, r24
    3aba:	14 96       	adiw	r26, 0x04	; 4
    3abc:	8c 91       	ld	r24, X
    3abe:	14 97       	sbiw	r26, 0x04	; 4
    3ac0:	82 95       	swap	r24
    3ac2:	86 95       	lsr	r24
    3ac4:	87 70       	andi	r24, 0x07	; 7
    3ac6:	15 96       	adiw	r26, 0x05	; 5
    3ac8:	9c 91       	ld	r25, X
    3aca:	15 97       	sbiw	r26, 0x05	; 5
    3acc:	99 0f       	add	r25, r25
    3ace:	99 0f       	add	r25, r25
    3ad0:	99 0f       	add	r25, r25
    3ad2:	89 0f       	add	r24, r25
    3ad4:	80 93 f2 00 	sts	0x00F2, r24
    3ad8:	13 96       	adiw	r26, 0x03	; 3
    3ada:	8c 91       	ld	r24, X
    3adc:	13 97       	sbiw	r26, 0x03	; 3
    3ade:	82 95       	swap	r24
    3ae0:	86 95       	lsr	r24
    3ae2:	87 70       	andi	r24, 0x07	; 7
    3ae4:	14 96       	adiw	r26, 0x04	; 4
    3ae6:	9c 91       	ld	r25, X
    3ae8:	14 97       	sbiw	r26, 0x04	; 4
    3aea:	99 0f       	add	r25, r25
    3aec:	99 0f       	add	r25, r25
    3aee:	99 0f       	add	r25, r25
    3af0:	89 0f       	add	r24, r25
    3af2:	80 93 f1 00 	sts	0x00F1, r24
    3af6:	13 96       	adiw	r26, 0x03	; 3
    3af8:	8c 91       	ld	r24, X
    3afa:	13 97       	sbiw	r26, 0x03	; 3
    3afc:	88 0f       	add	r24, r24
    3afe:	88 0f       	add	r24, r24
    3b00:	88 0f       	add	r24, r24
    3b02:	80 93 f0 00 	sts	0x00F0, r24
    3b06:	80 91 ef 00 	lds	r24, 0x00EF
    3b0a:	80 61       	ori	r24, 0x10	; 16
    3b0c:	15 c0       	rjmp	.+42     	; 0x3b38 <can_cmd+0x324>
          else              { Can_set_std_id(cmd->id.std);}
    3b0e:	f8 01       	movw	r30, r16
    3b10:	83 81       	ldd	r24, Z+3	; 0x03
    3b12:	86 95       	lsr	r24
    3b14:	86 95       	lsr	r24
    3b16:	86 95       	lsr	r24
    3b18:	94 81       	ldd	r25, Z+4	; 0x04
    3b1a:	92 95       	swap	r25
    3b1c:	99 0f       	add	r25, r25
    3b1e:	90 7e       	andi	r25, 0xE0	; 224
    3b20:	89 0f       	add	r24, r25
    3b22:	80 93 f3 00 	sts	0x00F3, r24
    3b26:	83 81       	ldd	r24, Z+3	; 0x03
    3b28:	82 95       	swap	r24
    3b2a:	88 0f       	add	r24, r24
    3b2c:	80 7e       	andi	r24, 0xE0	; 224
    3b2e:	80 93 f2 00 	sts	0x00F2, r24
    3b32:	80 91 ef 00 	lds	r24, 0x00EF
    3b36:	8f 7e       	andi	r24, 0xEF	; 239
    3b38:	80 93 ef 00 	sts	0x00EF, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
    3b3c:	81 e0       	ldi	r24, 0x01	; 1
    3b3e:	d8 01       	movw	r26, r16
    3b40:	1b 96       	adiw	r26, 0x0b	; 11
    3b42:	8c 93       	st	X, r24
    3b44:	1b 97       	sbiw	r26, 0x0b	; 11
    3b46:	80 91 f0 00 	lds	r24, 0x00F0
    3b4a:	84 60       	ori	r24, 0x04	; 4
    3b4c:	80 93 f0 00 	sts	0x00F0, r24
          Can_set_dlc(cmd->dlc);
    3b50:	80 91 ef 00 	lds	r24, 0x00EF
    3b54:	14 cf       	rjmp	.-472    	; 0x397e <can_cmd+0x16a>
          Can_config_tx();
          break;
        //------------      
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    3b56:	19 82       	std	Y+1, r1	; 0x01
    3b58:	1a 82       	std	Y+2, r1	; 0x02
    3b5a:	1b 82       	std	Y+3, r1	; 0x03
    3b5c:	1c 82       	std	Y+4, r1	; 0x04
    3b5e:	fe 01       	movw	r30, r28
    3b60:	31 96       	adiw	r30, 0x01	; 1
    3b62:	8b 81       	ldd	r24, Y+3	; 0x03
    3b64:	82 95       	swap	r24
    3b66:	86 95       	lsr	r24
    3b68:	87 70       	andi	r24, 0x07	; 7
    3b6a:	93 81       	ldd	r25, Z+3	; 0x03
    3b6c:	99 0f       	add	r25, r25
    3b6e:	99 0f       	add	r25, r25
    3b70:	99 0f       	add	r25, r25
    3b72:	89 0f       	add	r24, r25
    3b74:	80 93 f7 00 	sts	0x00F7, r24
    3b78:	81 81       	ldd	r24, Z+1	; 0x01
    3b7a:	82 95       	swap	r24
    3b7c:	86 95       	lsr	r24
    3b7e:	87 70       	andi	r24, 0x07	; 7
    3b80:	9b 81       	ldd	r25, Y+3	; 0x03
    3b82:	99 0f       	add	r25, r25
    3b84:	99 0f       	add	r25, r25
    3b86:	99 0f       	add	r25, r25
    3b88:	89 0f       	add	r24, r25
    3b8a:	80 93 f6 00 	sts	0x00F6, r24
    3b8e:	81 81       	ldd	r24, Z+1	; 0x01
    3b90:	88 0f       	add	r24, r24
    3b92:	88 0f       	add	r24, r24
    3b94:	88 0f       	add	r24, r24
    3b96:	99 81       	ldd	r25, Y+1	; 0x01
    3b98:	92 95       	swap	r25
    3b9a:	96 95       	lsr	r25
    3b9c:	97 70       	andi	r25, 0x07	; 7
    3b9e:	89 0f       	add	r24, r25
    3ba0:	80 93 f5 00 	sts	0x00F5, r24
    3ba4:	89 81       	ldd	r24, Y+1	; 0x01
    3ba6:	88 0f       	add	r24, r24
    3ba8:	88 0f       	add	r24, r24
    3baa:	88 0f       	add	r24, r24
    3bac:	80 93 f4 00 	sts	0x00F4, r24
          Can_set_dlc(cmd->dlc);
    3bb0:	80 91 ef 00 	lds	r24, 0x00EF
    3bb4:	f8 01       	movw	r30, r16
    3bb6:	97 81       	ldd	r25, Z+7	; 0x07
    3bb8:	89 2b       	or	r24, r25
    3bba:	80 93 ef 00 	sts	0x00EF, r24
          Can_clear_rtrmsk();
    3bbe:	80 91 f4 00 	lds	r24, 0x00F4
    3bc2:	8b 7f       	andi	r24, 0xFB	; 251
    3bc4:	80 93 f4 00 	sts	0x00F4, r24
    3bc8:	43 c0       	rjmp	.+134    	; 0x3c50 <can_cmd+0x43c>
          Can_clear_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_RX_DATA:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    3bca:	19 82       	std	Y+1, r1	; 0x01
    3bcc:	1a 82       	std	Y+2, r1	; 0x02
    3bce:	1b 82       	std	Y+3, r1	; 0x03
    3bd0:	1c 82       	std	Y+4, r1	; 0x04
    3bd2:	fe 01       	movw	r30, r28
    3bd4:	31 96       	adiw	r30, 0x01	; 1
    3bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    3bd8:	82 95       	swap	r24
    3bda:	86 95       	lsr	r24
    3bdc:	87 70       	andi	r24, 0x07	; 7
    3bde:	93 81       	ldd	r25, Z+3	; 0x03
    3be0:	99 0f       	add	r25, r25
    3be2:	99 0f       	add	r25, r25
    3be4:	99 0f       	add	r25, r25
    3be6:	89 0f       	add	r24, r25
    3be8:	80 93 f7 00 	sts	0x00F7, r24
    3bec:	81 81       	ldd	r24, Z+1	; 0x01
    3bee:	82 95       	swap	r24
    3bf0:	86 95       	lsr	r24
    3bf2:	87 70       	andi	r24, 0x07	; 7
    3bf4:	9b 81       	ldd	r25, Y+3	; 0x03
    3bf6:	99 0f       	add	r25, r25
    3bf8:	99 0f       	add	r25, r25
    3bfa:	99 0f       	add	r25, r25
    3bfc:	89 0f       	add	r24, r25
    3bfe:	80 93 f6 00 	sts	0x00F6, r24
    3c02:	81 81       	ldd	r24, Z+1	; 0x01
    3c04:	88 0f       	add	r24, r24
    3c06:	88 0f       	add	r24, r24
    3c08:	88 0f       	add	r24, r24
    3c0a:	99 81       	ldd	r25, Y+1	; 0x01
    3c0c:	92 95       	swap	r25
    3c0e:	96 95       	lsr	r25
    3c10:	97 70       	andi	r25, 0x07	; 7
    3c12:	89 0f       	add	r24, r25
    3c14:	80 93 f5 00 	sts	0x00F5, r24
    3c18:	89 81       	ldd	r24, Y+1	; 0x01
    3c1a:	88 0f       	add	r24, r24
    3c1c:	88 0f       	add	r24, r24
    3c1e:	88 0f       	add	r24, r24
    3c20:	80 93 f4 00 	sts	0x00F4, r24
          Can_set_dlc(cmd->dlc);
    3c24:	80 91 ef 00 	lds	r24, 0x00EF
    3c28:	d8 01       	movw	r26, r16
    3c2a:	17 96       	adiw	r26, 0x07	; 7
    3c2c:	9c 91       	ld	r25, X
    3c2e:	17 97       	sbiw	r26, 0x07	; 7
    3c30:	89 2b       	or	r24, r25
    3c32:	80 93 ef 00 	sts	0x00EF, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    3c36:	1b 96       	adiw	r26, 0x0b	; 11
    3c38:	1c 92       	st	X, r1
    3c3a:	1b 97       	sbiw	r26, 0x0b	; 11
    3c3c:	80 91 f4 00 	lds	r24, 0x00F4
    3c40:	84 60       	ori	r24, 0x04	; 4
    3c42:	80 93 f4 00 	sts	0x00F4, r24
    3c46:	80 91 f0 00 	lds	r24, 0x00F0
    3c4a:	8b 7f       	andi	r24, 0xFB	; 251
    3c4c:	80 93 f0 00 	sts	0x00F0, r24
          Can_clear_idemsk();
    3c50:	80 91 f4 00 	lds	r24, 0x00F4
    3c54:	8e 7f       	andi	r24, 0xFE	; 254
    3c56:	80 93 f4 00 	sts	0x00F4, r24
          Can_config_rx();       
    3c5a:	80 91 ef 00 	lds	r24, 0x00EF
    3c5e:	8f 73       	andi	r24, 0x3F	; 63
    3c60:	80 93 ef 00 	sts	0x00EF, r24
    3c64:	80 91 ef 00 	lds	r24, 0x00EF
    3c68:	80 68       	ori	r24, 0x80	; 128
    3c6a:	97 ce       	rjmp	.-722    	; 0x399a <can_cmd+0x186>
          break;
        //------------      
        case CMD_RX_REMOTE:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    3c6c:	19 82       	std	Y+1, r1	; 0x01
    3c6e:	1a 82       	std	Y+2, r1	; 0x02
    3c70:	1b 82       	std	Y+3, r1	; 0x03
    3c72:	1c 82       	std	Y+4, r1	; 0x04
    3c74:	fe 01       	movw	r30, r28
    3c76:	31 96       	adiw	r30, 0x01	; 1
    3c78:	8b 81       	ldd	r24, Y+3	; 0x03
    3c7a:	82 95       	swap	r24
    3c7c:	86 95       	lsr	r24
    3c7e:	87 70       	andi	r24, 0x07	; 7
    3c80:	93 81       	ldd	r25, Z+3	; 0x03
    3c82:	99 0f       	add	r25, r25
    3c84:	99 0f       	add	r25, r25
    3c86:	99 0f       	add	r25, r25
    3c88:	89 0f       	add	r24, r25
    3c8a:	80 93 f7 00 	sts	0x00F7, r24
    3c8e:	81 81       	ldd	r24, Z+1	; 0x01
    3c90:	82 95       	swap	r24
    3c92:	86 95       	lsr	r24
    3c94:	87 70       	andi	r24, 0x07	; 7
    3c96:	9b 81       	ldd	r25, Y+3	; 0x03
    3c98:	99 0f       	add	r25, r25
    3c9a:	99 0f       	add	r25, r25
    3c9c:	99 0f       	add	r25, r25
    3c9e:	89 0f       	add	r24, r25
    3ca0:	80 93 f6 00 	sts	0x00F6, r24
    3ca4:	81 81       	ldd	r24, Z+1	; 0x01
    3ca6:	88 0f       	add	r24, r24
    3ca8:	88 0f       	add	r24, r24
    3caa:	88 0f       	add	r24, r24
    3cac:	99 81       	ldd	r25, Y+1	; 0x01
    3cae:	92 95       	swap	r25
    3cb0:	96 95       	lsr	r25
    3cb2:	97 70       	andi	r25, 0x07	; 7
    3cb4:	89 0f       	add	r24, r25
    3cb6:	80 93 f5 00 	sts	0x00F5, r24
    3cba:	89 81       	ldd	r24, Y+1	; 0x01
    3cbc:	88 0f       	add	r24, r24
    3cbe:	88 0f       	add	r24, r24
    3cc0:	88 0f       	add	r24, r24
    3cc2:	80 93 f4 00 	sts	0x00F4, r24
          Can_set_dlc(cmd->dlc);
    3cc6:	80 91 ef 00 	lds	r24, 0x00EF
    3cca:	f8 01       	movw	r30, r16
    3ccc:	97 81       	ldd	r25, Z+7	; 0x07
    3cce:	89 2b       	or	r24, r25
    3cd0:	80 93 ef 00 	sts	0x00EF, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    3cd4:	81 e0       	ldi	r24, 0x01	; 1
    3cd6:	83 87       	std	Z+11, r24	; 0x0b
    3cd8:	80 91 f4 00 	lds	r24, 0x00F4
    3cdc:	84 60       	ori	r24, 0x04	; 4
    3cde:	80 93 f4 00 	sts	0x00F4, r24
    3ce2:	80 91 f0 00 	lds	r24, 0x00F0
    3ce6:	84 60       	ori	r24, 0x04	; 4
    3ce8:	80 93 f0 00 	sts	0x00F0, r24
          Can_clear_rplv();
    3cec:	80 91 ef 00 	lds	r24, 0x00EF
    3cf0:	8f 7d       	andi	r24, 0xDF	; 223
    3cf2:	42 c2       	rjmp	.+1156   	; 0x4178 <can_cmd+0x964>
          Can_clear_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    3cf4:	d8 01       	movw	r26, r16
    3cf6:	1c 96       	adiw	r26, 0x0c	; 12
    3cf8:	8c 91       	ld	r24, X
    3cfa:	1c 97       	sbiw	r26, 0x0c	; 12
    3cfc:	88 23       	and	r24, r24
    3cfe:	c9 f1       	breq	.+114    	; 0x3d72 <can_cmd+0x55e>
    3d00:	15 96       	adiw	r26, 0x05	; 5
    3d02:	8c 91       	ld	r24, X
    3d04:	15 97       	sbiw	r26, 0x05	; 5
    3d06:	82 95       	swap	r24
    3d08:	86 95       	lsr	r24
    3d0a:	87 70       	andi	r24, 0x07	; 7
    3d0c:	16 96       	adiw	r26, 0x06	; 6
    3d0e:	9c 91       	ld	r25, X
    3d10:	16 97       	sbiw	r26, 0x06	; 6
    3d12:	99 0f       	add	r25, r25
    3d14:	99 0f       	add	r25, r25
    3d16:	99 0f       	add	r25, r25
    3d18:	89 0f       	add	r24, r25
    3d1a:	80 93 f3 00 	sts	0x00F3, r24
    3d1e:	14 96       	adiw	r26, 0x04	; 4
    3d20:	8c 91       	ld	r24, X
    3d22:	14 97       	sbiw	r26, 0x04	; 4
    3d24:	82 95       	swap	r24
    3d26:	86 95       	lsr	r24
    3d28:	87 70       	andi	r24, 0x07	; 7
    3d2a:	15 96       	adiw	r26, 0x05	; 5
    3d2c:	9c 91       	ld	r25, X
    3d2e:	15 97       	sbiw	r26, 0x05	; 5
    3d30:	99 0f       	add	r25, r25
    3d32:	99 0f       	add	r25, r25
    3d34:	99 0f       	add	r25, r25
    3d36:	89 0f       	add	r24, r25
    3d38:	80 93 f2 00 	sts	0x00F2, r24
    3d3c:	13 96       	adiw	r26, 0x03	; 3
    3d3e:	8c 91       	ld	r24, X
    3d40:	13 97       	sbiw	r26, 0x03	; 3
    3d42:	82 95       	swap	r24
    3d44:	86 95       	lsr	r24
    3d46:	87 70       	andi	r24, 0x07	; 7
    3d48:	14 96       	adiw	r26, 0x04	; 4
    3d4a:	9c 91       	ld	r25, X
    3d4c:	14 97       	sbiw	r26, 0x04	; 4
    3d4e:	99 0f       	add	r25, r25
    3d50:	99 0f       	add	r25, r25
    3d52:	99 0f       	add	r25, r25
    3d54:	89 0f       	add	r24, r25
    3d56:	80 93 f1 00 	sts	0x00F1, r24
    3d5a:	13 96       	adiw	r26, 0x03	; 3
    3d5c:	8c 91       	ld	r24, X
    3d5e:	13 97       	sbiw	r26, 0x03	; 3
    3d60:	88 0f       	add	r24, r24
    3d62:	88 0f       	add	r24, r24
    3d64:	88 0f       	add	r24, r24
    3d66:	80 93 f0 00 	sts	0x00F0, r24
    3d6a:	80 91 ef 00 	lds	r24, 0x00EF
    3d6e:	80 61       	ori	r24, 0x10	; 16
    3d70:	15 c0       	rjmp	.+42     	; 0x3d9c <can_cmd+0x588>
          else              { Can_set_std_id(cmd->id.std);}
    3d72:	f8 01       	movw	r30, r16
    3d74:	83 81       	ldd	r24, Z+3	; 0x03
    3d76:	86 95       	lsr	r24
    3d78:	86 95       	lsr	r24
    3d7a:	86 95       	lsr	r24
    3d7c:	94 81       	ldd	r25, Z+4	; 0x04
    3d7e:	92 95       	swap	r25
    3d80:	99 0f       	add	r25, r25
    3d82:	90 7e       	andi	r25, 0xE0	; 224
    3d84:	89 0f       	add	r24, r25
    3d86:	80 93 f3 00 	sts	0x00F3, r24
    3d8a:	83 81       	ldd	r24, Z+3	; 0x03
    3d8c:	82 95       	swap	r24
    3d8e:	88 0f       	add	r24, r24
    3d90:	80 7e       	andi	r24, 0xE0	; 224
    3d92:	80 93 f2 00 	sts	0x00F2, r24
    3d96:	80 91 ef 00 	lds	r24, 0x00EF
    3d9a:	8f 7e       	andi	r24, 0xEF	; 239
    3d9c:	80 93 ef 00 	sts	0x00EF, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    3da0:	8f ef       	ldi	r24, 0xFF	; 255
    3da2:	9f ef       	ldi	r25, 0xFF	; 255
    3da4:	dc 01       	movw	r26, r24
    3da6:	89 83       	std	Y+1, r24	; 0x01
    3da8:	9a 83       	std	Y+2, r25	; 0x02
    3daa:	ab 83       	std	Y+3, r26	; 0x03
    3dac:	bc 83       	std	Y+4, r27	; 0x04
    3dae:	fe 01       	movw	r30, r28
    3db0:	31 96       	adiw	r30, 0x01	; 1
    3db2:	8b 81       	ldd	r24, Y+3	; 0x03
    3db4:	82 95       	swap	r24
    3db6:	86 95       	lsr	r24
    3db8:	87 70       	andi	r24, 0x07	; 7
    3dba:	93 81       	ldd	r25, Z+3	; 0x03
    3dbc:	99 0f       	add	r25, r25
    3dbe:	99 0f       	add	r25, r25
    3dc0:	99 0f       	add	r25, r25
    3dc2:	89 0f       	add	r24, r25
    3dc4:	80 93 f7 00 	sts	0x00F7, r24
    3dc8:	81 81       	ldd	r24, Z+1	; 0x01
    3dca:	82 95       	swap	r24
    3dcc:	86 95       	lsr	r24
    3dce:	87 70       	andi	r24, 0x07	; 7
    3dd0:	9b 81       	ldd	r25, Y+3	; 0x03
    3dd2:	99 0f       	add	r25, r25
    3dd4:	99 0f       	add	r25, r25
    3dd6:	99 0f       	add	r25, r25
    3dd8:	89 0f       	add	r24, r25
    3dda:	80 93 f6 00 	sts	0x00F6, r24
    3dde:	81 81       	ldd	r24, Z+1	; 0x01
    3de0:	88 0f       	add	r24, r24
    3de2:	88 0f       	add	r24, r24
    3de4:	88 0f       	add	r24, r24
    3de6:	99 81       	ldd	r25, Y+1	; 0x01
    3de8:	92 95       	swap	r25
    3dea:	96 95       	lsr	r25
    3dec:	97 70       	andi	r25, 0x07	; 7
    3dee:	89 0f       	add	r24, r25
    3df0:	80 93 f5 00 	sts	0x00F5, r24
    3df4:	89 81       	ldd	r24, Y+1	; 0x01
    3df6:	88 0f       	add	r24, r24
    3df8:	88 0f       	add	r24, r24
    3dfa:	88 0f       	add	r24, r24
    3dfc:	80 93 f4 00 	sts	0x00F4, r24
          Can_set_dlc(cmd->dlc);
    3e00:	80 91 ef 00 	lds	r24, 0x00EF
    3e04:	d8 01       	movw	r26, r16
    3e06:	17 96       	adiw	r26, 0x07	; 7
    3e08:	9c 91       	ld	r25, X
    3e0a:	17 97       	sbiw	r26, 0x07	; 7
    3e0c:	89 2b       	or	r24, r25
    3e0e:	80 93 ef 00 	sts	0x00EF, r24
          Can_clear_rtrmsk();
    3e12:	80 91 f4 00 	lds	r24, 0x00F4
    3e16:	8b 7f       	andi	r24, 0xFB	; 251
    3e18:	80 93 f4 00 	sts	0x00F4, r24
          Can_set_idemsk();
    3e1c:	80 91 f4 00 	lds	r24, 0x00F4
    3e20:	81 60       	ori	r24, 0x01	; 1
    3e22:	19 cf       	rjmp	.-462    	; 0x3c56 <can_cmd+0x442>
          Can_config_rx();  
          break;
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    3e24:	f8 01       	movw	r30, r16
    3e26:	94 85       	ldd	r25, Z+12	; 0x0c
    3e28:	99 23       	and	r25, r25
    3e2a:	59 f1       	breq	.+86     	; 0x3e82 <can_cmd+0x66e>
    3e2c:	95 81       	ldd	r25, Z+5	; 0x05
    3e2e:	92 95       	swap	r25
    3e30:	96 95       	lsr	r25
    3e32:	97 70       	andi	r25, 0x07	; 7
    3e34:	26 81       	ldd	r18, Z+6	; 0x06
    3e36:	22 0f       	add	r18, r18
    3e38:	22 0f       	add	r18, r18
    3e3a:	22 0f       	add	r18, r18
    3e3c:	92 0f       	add	r25, r18
    3e3e:	90 93 f3 00 	sts	0x00F3, r25
    3e42:	94 81       	ldd	r25, Z+4	; 0x04
    3e44:	92 95       	swap	r25
    3e46:	96 95       	lsr	r25
    3e48:	97 70       	andi	r25, 0x07	; 7
    3e4a:	25 81       	ldd	r18, Z+5	; 0x05
    3e4c:	22 0f       	add	r18, r18
    3e4e:	22 0f       	add	r18, r18
    3e50:	22 0f       	add	r18, r18
    3e52:	92 0f       	add	r25, r18
    3e54:	90 93 f2 00 	sts	0x00F2, r25
    3e58:	93 81       	ldd	r25, Z+3	; 0x03
    3e5a:	92 95       	swap	r25
    3e5c:	96 95       	lsr	r25
    3e5e:	97 70       	andi	r25, 0x07	; 7
    3e60:	24 81       	ldd	r18, Z+4	; 0x04
    3e62:	22 0f       	add	r18, r18
    3e64:	22 0f       	add	r18, r18
    3e66:	22 0f       	add	r18, r18
    3e68:	92 0f       	add	r25, r18
    3e6a:	90 93 f1 00 	sts	0x00F1, r25
    3e6e:	93 81       	ldd	r25, Z+3	; 0x03
    3e70:	99 0f       	add	r25, r25
    3e72:	99 0f       	add	r25, r25
    3e74:	99 0f       	add	r25, r25
    3e76:	90 93 f0 00 	sts	0x00F0, r25
    3e7a:	90 91 ef 00 	lds	r25, 0x00EF
    3e7e:	90 61       	ori	r25, 0x10	; 16
    3e80:	1b c0       	rjmp	.+54     	; 0x3eb8 <can_cmd+0x6a4>
          else              { Can_set_std_id(cmd->id.std);}
    3e82:	d8 01       	movw	r26, r16
    3e84:	13 96       	adiw	r26, 0x03	; 3
    3e86:	9c 91       	ld	r25, X
    3e88:	13 97       	sbiw	r26, 0x03	; 3
    3e8a:	96 95       	lsr	r25
    3e8c:	96 95       	lsr	r25
    3e8e:	96 95       	lsr	r25
    3e90:	14 96       	adiw	r26, 0x04	; 4
    3e92:	2c 91       	ld	r18, X
    3e94:	14 97       	sbiw	r26, 0x04	; 4
    3e96:	22 95       	swap	r18
    3e98:	22 0f       	add	r18, r18
    3e9a:	20 7e       	andi	r18, 0xE0	; 224
    3e9c:	92 0f       	add	r25, r18
    3e9e:	90 93 f3 00 	sts	0x00F3, r25
    3ea2:	13 96       	adiw	r26, 0x03	; 3
    3ea4:	9c 91       	ld	r25, X
    3ea6:	13 97       	sbiw	r26, 0x03	; 3
    3ea8:	92 95       	swap	r25
    3eaa:	99 0f       	add	r25, r25
    3eac:	90 7e       	andi	r25, 0xE0	; 224
    3eae:	90 93 f2 00 	sts	0x00F2, r25
    3eb2:	90 91 ef 00 	lds	r25, 0x00EF
    3eb6:	9f 7e       	andi	r25, 0xEF	; 239
    3eb8:	90 93 ef 00 	sts	0x00EF, r25
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    3ebc:	2f ef       	ldi	r18, 0xFF	; 255
    3ebe:	3f ef       	ldi	r19, 0xFF	; 255
    3ec0:	a9 01       	movw	r20, r18
    3ec2:	29 83       	std	Y+1, r18	; 0x01
    3ec4:	3a 83       	std	Y+2, r19	; 0x02
    3ec6:	4b 83       	std	Y+3, r20	; 0x03
    3ec8:	5c 83       	std	Y+4, r21	; 0x04
    3eca:	fe 01       	movw	r30, r28
    3ecc:	31 96       	adiw	r30, 0x01	; 1
    3ece:	9b 81       	ldd	r25, Y+3	; 0x03
    3ed0:	92 95       	swap	r25
    3ed2:	96 95       	lsr	r25
    3ed4:	97 70       	andi	r25, 0x07	; 7
    3ed6:	23 81       	ldd	r18, Z+3	; 0x03
    3ed8:	22 0f       	add	r18, r18
    3eda:	22 0f       	add	r18, r18
    3edc:	22 0f       	add	r18, r18
    3ede:	92 0f       	add	r25, r18
    3ee0:	90 93 f7 00 	sts	0x00F7, r25
    3ee4:	91 81       	ldd	r25, Z+1	; 0x01
    3ee6:	92 95       	swap	r25
    3ee8:	96 95       	lsr	r25
    3eea:	97 70       	andi	r25, 0x07	; 7
    3eec:	2b 81       	ldd	r18, Y+3	; 0x03
    3eee:	22 0f       	add	r18, r18
    3ef0:	22 0f       	add	r18, r18
    3ef2:	22 0f       	add	r18, r18
    3ef4:	92 0f       	add	r25, r18
    3ef6:	90 93 f6 00 	sts	0x00F6, r25
    3efa:	91 81       	ldd	r25, Z+1	; 0x01
    3efc:	99 0f       	add	r25, r25
    3efe:	99 0f       	add	r25, r25
    3f00:	99 0f       	add	r25, r25
    3f02:	29 81       	ldd	r18, Y+1	; 0x01
    3f04:	22 95       	swap	r18
    3f06:	26 95       	lsr	r18
    3f08:	27 70       	andi	r18, 0x07	; 7
    3f0a:	92 0f       	add	r25, r18
    3f0c:	90 93 f5 00 	sts	0x00F5, r25
    3f10:	99 81       	ldd	r25, Y+1	; 0x01
    3f12:	99 0f       	add	r25, r25
    3f14:	99 0f       	add	r25, r25
    3f16:	99 0f       	add	r25, r25
    3f18:	90 93 f4 00 	sts	0x00F4, r25
          Can_set_dlc(cmd->dlc);
    3f1c:	90 91 ef 00 	lds	r25, 0x00EF
    3f20:	f8 01       	movw	r30, r16
    3f22:	27 81       	ldd	r18, Z+7	; 0x07
    3f24:	92 2b       	or	r25, r18
    3f26:	90 93 ef 00 	sts	0x00EF, r25
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    3f2a:	13 86       	std	Z+11, r1	; 0x0b
    3f2c:	90 91 f4 00 	lds	r25, 0x00F4
    3f30:	94 60       	ori	r25, 0x04	; 4
    3f32:	90 93 f4 00 	sts	0x00F4, r25
    3f36:	90 91 f0 00 	lds	r25, 0x00F0
    3f3a:	9b 7f       	andi	r25, 0xFB	; 251
    3f3c:	90 93 f0 00 	sts	0x00F0, r25
          Can_set_idemsk();
    3f40:	90 91 f4 00 	lds	r25, 0x00F4
    3f44:	91 60       	ori	r25, 0x01	; 1
    3f46:	90 93 f4 00 	sts	0x00F4, r25
          Can_config_rx();  
    3f4a:	90 91 ef 00 	lds	r25, 0x00EF
    3f4e:	9f 73       	andi	r25, 0x3F	; 63
    3f50:	90 93 ef 00 	sts	0x00EF, r25
    3f54:	90 91 ef 00 	lds	r25, 0x00EF
    3f58:	90 68       	ori	r25, 0x80	; 128
    3f5a:	90 93 ef 00 	sts	0x00EF, r25
	Can_set_mob_int(mob_handle) /* Ser ud til at virke TODO Fjern denne linje og lav det på en bedre måde */          
    3f5e:	90 91 de 00 	lds	r25, 0x00DE
    3f62:	21 e0       	ldi	r18, 0x01	; 1
    3f64:	30 e0       	ldi	r19, 0x00	; 0
    3f66:	02 c0       	rjmp	.+4      	; 0x3f6c <can_cmd+0x758>
    3f68:	22 0f       	add	r18, r18
    3f6a:	33 1f       	adc	r19, r19
    3f6c:	8a 95       	dec	r24
    3f6e:	e2 f7       	brpl	.-8      	; 0x3f68 <can_cmd+0x754>
    3f70:	92 2b       	or	r25, r18
    3f72:	90 93 de 00 	sts	0x00DE, r25
    3f76:	90 91 df 00 	lds	r25, 0x00DF
    3f7a:	83 2f       	mov	r24, r19
    3f7c:	8f 77       	andi	r24, 0x7F	; 127
    3f7e:	89 2b       	or	r24, r25
    3f80:	80 93 df 00 	sts	0x00DF, r24
    3f84:	ae c1       	rjmp	.+860    	; 0x42e2 <can_cmd+0xace>
          break;
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    3f86:	d8 01       	movw	r26, r16
    3f88:	1c 96       	adiw	r26, 0x0c	; 12
    3f8a:	8c 91       	ld	r24, X
    3f8c:	1c 97       	sbiw	r26, 0x0c	; 12
    3f8e:	88 23       	and	r24, r24
    3f90:	c9 f1       	breq	.+114    	; 0x4004 <can_cmd+0x7f0>
    3f92:	15 96       	adiw	r26, 0x05	; 5
    3f94:	8c 91       	ld	r24, X
    3f96:	15 97       	sbiw	r26, 0x05	; 5
    3f98:	82 95       	swap	r24
    3f9a:	86 95       	lsr	r24
    3f9c:	87 70       	andi	r24, 0x07	; 7
    3f9e:	16 96       	adiw	r26, 0x06	; 6
    3fa0:	9c 91       	ld	r25, X
    3fa2:	16 97       	sbiw	r26, 0x06	; 6
    3fa4:	99 0f       	add	r25, r25
    3fa6:	99 0f       	add	r25, r25
    3fa8:	99 0f       	add	r25, r25
    3faa:	89 0f       	add	r24, r25
    3fac:	80 93 f3 00 	sts	0x00F3, r24
    3fb0:	14 96       	adiw	r26, 0x04	; 4
    3fb2:	8c 91       	ld	r24, X
    3fb4:	14 97       	sbiw	r26, 0x04	; 4
    3fb6:	82 95       	swap	r24
    3fb8:	86 95       	lsr	r24
    3fba:	87 70       	andi	r24, 0x07	; 7
    3fbc:	15 96       	adiw	r26, 0x05	; 5
    3fbe:	9c 91       	ld	r25, X
    3fc0:	15 97       	sbiw	r26, 0x05	; 5
    3fc2:	99 0f       	add	r25, r25
    3fc4:	99 0f       	add	r25, r25
    3fc6:	99 0f       	add	r25, r25
    3fc8:	89 0f       	add	r24, r25
    3fca:	80 93 f2 00 	sts	0x00F2, r24
    3fce:	13 96       	adiw	r26, 0x03	; 3
    3fd0:	8c 91       	ld	r24, X
    3fd2:	13 97       	sbiw	r26, 0x03	; 3
    3fd4:	82 95       	swap	r24
    3fd6:	86 95       	lsr	r24
    3fd8:	87 70       	andi	r24, 0x07	; 7
    3fda:	14 96       	adiw	r26, 0x04	; 4
    3fdc:	9c 91       	ld	r25, X
    3fde:	14 97       	sbiw	r26, 0x04	; 4
    3fe0:	99 0f       	add	r25, r25
    3fe2:	99 0f       	add	r25, r25
    3fe4:	99 0f       	add	r25, r25
    3fe6:	89 0f       	add	r24, r25
    3fe8:	80 93 f1 00 	sts	0x00F1, r24
    3fec:	13 96       	adiw	r26, 0x03	; 3
    3fee:	8c 91       	ld	r24, X
    3ff0:	13 97       	sbiw	r26, 0x03	; 3
    3ff2:	88 0f       	add	r24, r24
    3ff4:	88 0f       	add	r24, r24
    3ff6:	88 0f       	add	r24, r24
    3ff8:	80 93 f0 00 	sts	0x00F0, r24
    3ffc:	80 91 ef 00 	lds	r24, 0x00EF
    4000:	80 61       	ori	r24, 0x10	; 16
    4002:	15 c0       	rjmp	.+42     	; 0x402e <can_cmd+0x81a>
          else              { Can_set_std_id(cmd->id.std);}
    4004:	f8 01       	movw	r30, r16
    4006:	83 81       	ldd	r24, Z+3	; 0x03
    4008:	86 95       	lsr	r24
    400a:	86 95       	lsr	r24
    400c:	86 95       	lsr	r24
    400e:	94 81       	ldd	r25, Z+4	; 0x04
    4010:	92 95       	swap	r25
    4012:	99 0f       	add	r25, r25
    4014:	90 7e       	andi	r25, 0xE0	; 224
    4016:	89 0f       	add	r24, r25
    4018:	80 93 f3 00 	sts	0x00F3, r24
    401c:	83 81       	ldd	r24, Z+3	; 0x03
    401e:	82 95       	swap	r24
    4020:	88 0f       	add	r24, r24
    4022:	80 7e       	andi	r24, 0xE0	; 224
    4024:	80 93 f2 00 	sts	0x00F2, r24
    4028:	80 91 ef 00 	lds	r24, 0x00EF
    402c:	8f 7e       	andi	r24, 0xEF	; 239
    402e:	80 93 ef 00 	sts	0x00EF, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    4032:	8f ef       	ldi	r24, 0xFF	; 255
    4034:	9f ef       	ldi	r25, 0xFF	; 255
    4036:	dc 01       	movw	r26, r24
    4038:	89 83       	std	Y+1, r24	; 0x01
    403a:	9a 83       	std	Y+2, r25	; 0x02
    403c:	ab 83       	std	Y+3, r26	; 0x03
    403e:	bc 83       	std	Y+4, r27	; 0x04
    4040:	fe 01       	movw	r30, r28
    4042:	31 96       	adiw	r30, 0x01	; 1
    4044:	8b 81       	ldd	r24, Y+3	; 0x03
    4046:	82 95       	swap	r24
    4048:	86 95       	lsr	r24
    404a:	87 70       	andi	r24, 0x07	; 7
    404c:	93 81       	ldd	r25, Z+3	; 0x03
    404e:	99 0f       	add	r25, r25
    4050:	99 0f       	add	r25, r25
    4052:	99 0f       	add	r25, r25
    4054:	89 0f       	add	r24, r25
    4056:	80 93 f7 00 	sts	0x00F7, r24
    405a:	81 81       	ldd	r24, Z+1	; 0x01
    405c:	82 95       	swap	r24
    405e:	86 95       	lsr	r24
    4060:	87 70       	andi	r24, 0x07	; 7
    4062:	9b 81       	ldd	r25, Y+3	; 0x03
    4064:	99 0f       	add	r25, r25
    4066:	99 0f       	add	r25, r25
    4068:	99 0f       	add	r25, r25
    406a:	89 0f       	add	r24, r25
    406c:	80 93 f6 00 	sts	0x00F6, r24
    4070:	81 81       	ldd	r24, Z+1	; 0x01
    4072:	88 0f       	add	r24, r24
    4074:	88 0f       	add	r24, r24
    4076:	88 0f       	add	r24, r24
    4078:	99 81       	ldd	r25, Y+1	; 0x01
    407a:	92 95       	swap	r25
    407c:	96 95       	lsr	r25
    407e:	97 70       	andi	r25, 0x07	; 7
    4080:	89 0f       	add	r24, r25
    4082:	80 93 f5 00 	sts	0x00F5, r24
    4086:	89 81       	ldd	r24, Y+1	; 0x01
    4088:	88 0f       	add	r24, r24
    408a:	88 0f       	add	r24, r24
    408c:	88 0f       	add	r24, r24
    408e:	80 93 f4 00 	sts	0x00F4, r24
          Can_set_dlc(cmd->dlc);
    4092:	80 91 ef 00 	lds	r24, 0x00EF
    4096:	d8 01       	movw	r26, r16
    4098:	17 96       	adiw	r26, 0x07	; 7
    409a:	9c 91       	ld	r25, X
    409c:	17 97       	sbiw	r26, 0x07	; 7
    409e:	89 2b       	or	r24, r25
    40a0:	80 93 ef 00 	sts	0x00EF, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    40a4:	81 e0       	ldi	r24, 0x01	; 1
    40a6:	1b 96       	adiw	r26, 0x0b	; 11
    40a8:	8c 93       	st	X, r24
    40aa:	1b 97       	sbiw	r26, 0x0b	; 11
    40ac:	80 91 f4 00 	lds	r24, 0x00F4
    40b0:	84 60       	ori	r24, 0x04	; 4
    40b2:	80 93 f4 00 	sts	0x00F4, r24
    40b6:	80 91 f0 00 	lds	r24, 0x00F0
    40ba:	84 60       	ori	r24, 0x04	; 4
    40bc:	80 93 f0 00 	sts	0x00F0, r24
          Can_clear_rplv();
    40c0:	80 91 ef 00 	lds	r24, 0x00EF
    40c4:	8f 7d       	andi	r24, 0xDF	; 223
    40c6:	80 93 ef 00 	sts	0x00EF, r24
    40ca:	a8 ce       	rjmp	.-688    	; 0x3e1c <can_cmd+0x608>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    40cc:	d8 01       	movw	r26, r16
    40ce:	18 96       	adiw	r26, 0x08	; 8
    40d0:	ed 91       	ld	r30, X+
    40d2:	fc 91       	ld	r31, X
    40d4:	19 97       	sbiw	r26, 0x09	; 9
    40d6:	e8 0f       	add	r30, r24
    40d8:	f1 1d       	adc	r31, r1
    40da:	90 81       	ld	r25, Z
    40dc:	90 93 fa 00 	sts	0x00FA, r25
    40e0:	8f 5f       	subi	r24, 0xFF	; 255
    40e2:	f8 01       	movw	r30, r16
    40e4:	97 81       	ldd	r25, Z+7	; 0x07
    40e6:	89 17       	cp	r24, r25
    40e8:	88 f3       	brcs	.-30     	; 0x40cc <can_cmd+0x8b8>
          u32_temp=0; Can_set_ext_msk(u32_temp);
    40ea:	19 82       	std	Y+1, r1	; 0x01
    40ec:	1a 82       	std	Y+2, r1	; 0x02
    40ee:	1b 82       	std	Y+3, r1	; 0x03
    40f0:	1c 82       	std	Y+4, r1	; 0x04
    40f2:	fe 01       	movw	r30, r28
    40f4:	31 96       	adiw	r30, 0x01	; 1
    40f6:	8b 81       	ldd	r24, Y+3	; 0x03
    40f8:	82 95       	swap	r24
    40fa:	86 95       	lsr	r24
    40fc:	87 70       	andi	r24, 0x07	; 7
    40fe:	93 81       	ldd	r25, Z+3	; 0x03
    4100:	99 0f       	add	r25, r25
    4102:	99 0f       	add	r25, r25
    4104:	99 0f       	add	r25, r25
    4106:	89 0f       	add	r24, r25
    4108:	80 93 f7 00 	sts	0x00F7, r24
    410c:	81 81       	ldd	r24, Z+1	; 0x01
    410e:	82 95       	swap	r24
    4110:	86 95       	lsr	r24
    4112:	87 70       	andi	r24, 0x07	; 7
    4114:	9b 81       	ldd	r25, Y+3	; 0x03
    4116:	99 0f       	add	r25, r25
    4118:	99 0f       	add	r25, r25
    411a:	99 0f       	add	r25, r25
    411c:	89 0f       	add	r24, r25
    411e:	80 93 f6 00 	sts	0x00F6, r24
    4122:	81 81       	ldd	r24, Z+1	; 0x01
    4124:	88 0f       	add	r24, r24
    4126:	88 0f       	add	r24, r24
    4128:	88 0f       	add	r24, r24
    412a:	99 81       	ldd	r25, Y+1	; 0x01
    412c:	92 95       	swap	r25
    412e:	96 95       	lsr	r25
    4130:	97 70       	andi	r25, 0x07	; 7
    4132:	89 0f       	add	r24, r25
    4134:	80 93 f5 00 	sts	0x00F5, r24
    4138:	89 81       	ldd	r24, Y+1	; 0x01
    413a:	88 0f       	add	r24, r24
    413c:	88 0f       	add	r24, r24
    413e:	88 0f       	add	r24, r24
    4140:	80 93 f4 00 	sts	0x00F4, r24
          Can_set_dlc(cmd->dlc);
    4144:	80 91 ef 00 	lds	r24, 0x00EF
    4148:	d8 01       	movw	r26, r16
    414a:	17 96       	adiw	r26, 0x07	; 7
    414c:	9c 91       	ld	r25, X
    414e:	17 97       	sbiw	r26, 0x07	; 7
    4150:	89 2b       	or	r24, r25
    4152:	80 93 ef 00 	sts	0x00EF, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    4156:	81 e0       	ldi	r24, 0x01	; 1
    4158:	1b 96       	adiw	r26, 0x0b	; 11
    415a:	8c 93       	st	X, r24
    415c:	1b 97       	sbiw	r26, 0x0b	; 11
    415e:	80 91 f4 00 	lds	r24, 0x00F4
    4162:	84 60       	ori	r24, 0x04	; 4
    4164:	80 93 f4 00 	sts	0x00F4, r24
    4168:	80 91 f0 00 	lds	r24, 0x00F0
    416c:	84 60       	ori	r24, 0x04	; 4
    416e:	80 93 f0 00 	sts	0x00F0, r24
          Can_set_rplv();
    4172:	80 91 ef 00 	lds	r24, 0x00EF
    4176:	80 62       	ori	r24, 0x20	; 32
    4178:	80 93 ef 00 	sts	0x00EF, r24
    417c:	69 cd       	rjmp	.-1326   	; 0x3c50 <can_cmd+0x43c>
          Can_clear_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    417e:	f8 01       	movw	r30, r16
    4180:	84 85       	ldd	r24, Z+12	; 0x0c
    4182:	88 23       	and	r24, r24
    4184:	59 f1       	breq	.+86     	; 0x41dc <can_cmd+0x9c8>
    4186:	85 81       	ldd	r24, Z+5	; 0x05
    4188:	82 95       	swap	r24
    418a:	86 95       	lsr	r24
    418c:	87 70       	andi	r24, 0x07	; 7
    418e:	96 81       	ldd	r25, Z+6	; 0x06
    4190:	99 0f       	add	r25, r25
    4192:	99 0f       	add	r25, r25
    4194:	99 0f       	add	r25, r25
    4196:	89 0f       	add	r24, r25
    4198:	80 93 f3 00 	sts	0x00F3, r24
    419c:	84 81       	ldd	r24, Z+4	; 0x04
    419e:	82 95       	swap	r24
    41a0:	86 95       	lsr	r24
    41a2:	87 70       	andi	r24, 0x07	; 7
    41a4:	95 81       	ldd	r25, Z+5	; 0x05
    41a6:	99 0f       	add	r25, r25
    41a8:	99 0f       	add	r25, r25
    41aa:	99 0f       	add	r25, r25
    41ac:	89 0f       	add	r24, r25
    41ae:	80 93 f2 00 	sts	0x00F2, r24
    41b2:	83 81       	ldd	r24, Z+3	; 0x03
    41b4:	82 95       	swap	r24
    41b6:	86 95       	lsr	r24
    41b8:	87 70       	andi	r24, 0x07	; 7
    41ba:	94 81       	ldd	r25, Z+4	; 0x04
    41bc:	99 0f       	add	r25, r25
    41be:	99 0f       	add	r25, r25
    41c0:	99 0f       	add	r25, r25
    41c2:	89 0f       	add	r24, r25
    41c4:	80 93 f1 00 	sts	0x00F1, r24
    41c8:	83 81       	ldd	r24, Z+3	; 0x03
    41ca:	88 0f       	add	r24, r24
    41cc:	88 0f       	add	r24, r24
    41ce:	88 0f       	add	r24, r24
    41d0:	80 93 f0 00 	sts	0x00F0, r24
    41d4:	80 91 ef 00 	lds	r24, 0x00EF
    41d8:	80 61       	ori	r24, 0x10	; 16
    41da:	1b c0       	rjmp	.+54     	; 0x4212 <can_cmd+0x9fe>
          else              { Can_set_std_id(cmd->id.std);}
    41dc:	d8 01       	movw	r26, r16
    41de:	13 96       	adiw	r26, 0x03	; 3
    41e0:	8c 91       	ld	r24, X
    41e2:	13 97       	sbiw	r26, 0x03	; 3
    41e4:	86 95       	lsr	r24
    41e6:	86 95       	lsr	r24
    41e8:	86 95       	lsr	r24
    41ea:	14 96       	adiw	r26, 0x04	; 4
    41ec:	9c 91       	ld	r25, X
    41ee:	14 97       	sbiw	r26, 0x04	; 4
    41f0:	92 95       	swap	r25
    41f2:	99 0f       	add	r25, r25
    41f4:	90 7e       	andi	r25, 0xE0	; 224
    41f6:	89 0f       	add	r24, r25
    41f8:	80 93 f3 00 	sts	0x00F3, r24
    41fc:	13 96       	adiw	r26, 0x03	; 3
    41fe:	8c 91       	ld	r24, X
    4200:	13 97       	sbiw	r26, 0x03	; 3
    4202:	82 95       	swap	r24
    4204:	88 0f       	add	r24, r24
    4206:	80 7e       	andi	r24, 0xE0	; 224
    4208:	80 93 f2 00 	sts	0x00F2, r24
    420c:	80 91 ef 00 	lds	r24, 0x00EF
    4210:	8f 7e       	andi	r24, 0xEF	; 239
    4212:	80 93 ef 00 	sts	0x00EF, r24
      cmd->status = MOB_PENDING; 
      cmd->handle = mob_handle;
      Can_set_mob(mob_handle);
      Can_clear_mob();
          
      switch (cmd->cmd)
    4216:	80 e0       	ldi	r24, 0x00	; 0
    4218:	0b c0       	rjmp	.+22     	; 0x4230 <can_cmd+0xa1c>
          break;
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    421a:	d8 01       	movw	r26, r16
    421c:	18 96       	adiw	r26, 0x08	; 8
    421e:	ed 91       	ld	r30, X+
    4220:	fc 91       	ld	r31, X
    4222:	19 97       	sbiw	r26, 0x09	; 9
    4224:	e8 0f       	add	r30, r24
    4226:	f1 1d       	adc	r31, r1
    4228:	90 81       	ld	r25, Z
    422a:	90 93 fa 00 	sts	0x00FA, r25
    422e:	8f 5f       	subi	r24, 0xFF	; 255
    4230:	f8 01       	movw	r30, r16
    4232:	97 81       	ldd	r25, Z+7	; 0x07
    4234:	89 17       	cp	r24, r25
    4236:	88 f3       	brcs	.-30     	; 0x421a <can_cmd+0xa06>
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    4238:	8f ef       	ldi	r24, 0xFF	; 255
    423a:	9f ef       	ldi	r25, 0xFF	; 255
    423c:	dc 01       	movw	r26, r24
    423e:	89 83       	std	Y+1, r24	; 0x01
    4240:	9a 83       	std	Y+2, r25	; 0x02
    4242:	ab 83       	std	Y+3, r26	; 0x03
    4244:	bc 83       	std	Y+4, r27	; 0x04
    4246:	fe 01       	movw	r30, r28
    4248:	31 96       	adiw	r30, 0x01	; 1
    424a:	8b 81       	ldd	r24, Y+3	; 0x03
    424c:	82 95       	swap	r24
    424e:	86 95       	lsr	r24
    4250:	87 70       	andi	r24, 0x07	; 7
    4252:	93 81       	ldd	r25, Z+3	; 0x03
    4254:	99 0f       	add	r25, r25
    4256:	99 0f       	add	r25, r25
    4258:	99 0f       	add	r25, r25
    425a:	89 0f       	add	r24, r25
    425c:	80 93 f7 00 	sts	0x00F7, r24
    4260:	81 81       	ldd	r24, Z+1	; 0x01
    4262:	82 95       	swap	r24
    4264:	86 95       	lsr	r24
    4266:	87 70       	andi	r24, 0x07	; 7
    4268:	9b 81       	ldd	r25, Y+3	; 0x03
    426a:	99 0f       	add	r25, r25
    426c:	99 0f       	add	r25, r25
    426e:	99 0f       	add	r25, r25
    4270:	89 0f       	add	r24, r25
    4272:	80 93 f6 00 	sts	0x00F6, r24
    4276:	81 81       	ldd	r24, Z+1	; 0x01
    4278:	88 0f       	add	r24, r24
    427a:	88 0f       	add	r24, r24
    427c:	88 0f       	add	r24, r24
    427e:	99 81       	ldd	r25, Y+1	; 0x01
    4280:	92 95       	swap	r25
    4282:	96 95       	lsr	r25
    4284:	97 70       	andi	r25, 0x07	; 7
    4286:	89 0f       	add	r24, r25
    4288:	80 93 f5 00 	sts	0x00F5, r24
    428c:	89 81       	ldd	r24, Y+1	; 0x01
    428e:	88 0f       	add	r24, r24
    4290:	88 0f       	add	r24, r24
    4292:	88 0f       	add	r24, r24
    4294:	80 93 f4 00 	sts	0x00F4, r24
          Can_set_dlc(cmd->dlc);
    4298:	80 91 ef 00 	lds	r24, 0x00EF
    429c:	d8 01       	movw	r26, r16
    429e:	17 96       	adiw	r26, 0x07	; 7
    42a0:	9c 91       	ld	r25, X
    42a2:	17 97       	sbiw	r26, 0x07	; 7
    42a4:	89 2b       	or	r24, r25
    42a6:	80 93 ef 00 	sts	0x00EF, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    42aa:	81 e0       	ldi	r24, 0x01	; 1
    42ac:	1b 96       	adiw	r26, 0x0b	; 11
    42ae:	8c 93       	st	X, r24
    42b0:	1b 97       	sbiw	r26, 0x0b	; 11
    42b2:	80 91 f4 00 	lds	r24, 0x00F4
    42b6:	84 60       	ori	r24, 0x04	; 4
    42b8:	80 93 f4 00 	sts	0x00F4, r24
    42bc:	80 91 f0 00 	lds	r24, 0x00F0
    42c0:	84 60       	ori	r24, 0x04	; 4
    42c2:	80 93 f0 00 	sts	0x00F0, r24
          Can_set_rplv();
    42c6:	80 91 ef 00 	lds	r24, 0x00EF
    42ca:	80 62       	ori	r24, 0x20	; 32
    42cc:	fc ce       	rjmp	.-520    	; 0x40c6 <can_cmd+0x8b2>
          Can_config_rx();       
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    42ce:	f8 01       	movw	r30, r16
    42d0:	12 86       	std	Z+10, r1	; 0x0a
    42d2:	07 c0       	rjmp	.+14     	; 0x42e2 <can_cmd+0xace>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    42d4:	8f e1       	ldi	r24, 0x1F	; 31
    42d6:	d8 01       	movw	r26, r16
    42d8:	1a 96       	adiw	r26, 0x0a	; 10
    42da:	8c 93       	st	X, r24
    42dc:	1a 97       	sbiw	r26, 0x0a	; 10
      return CAN_CMD_REFUSED;
    42de:	8f ef       	ldi	r24, 0xFF	; 255
    42e0:	01 c0       	rjmp	.+2      	; 0x42e4 <can_cmd+0xad0>
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    42e2:	80 e0       	ldi	r24, 0x00	; 0
}
    42e4:	24 96       	adiw	r28, 0x04	; 4
    42e6:	e4 e0       	ldi	r30, 0x04	; 4
    42e8:	0c 94 f5 2d 	jmp	0x5bea	; 0x5bea <__epilogue_restores__+0x1c>

000042ec <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd)
{
    42ec:	1f 93       	push	r17
    42ee:	cf 93       	push	r28
    42f0:	df 93       	push	r29
    42f2:	ec 01       	movw	r28, r24
    U8 a_status, rtn_val;
     
    a_status = cmd->status;
    42f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    42f6:	88 23       	and	r24, r24
    42f8:	09 f4       	brne	.+2      	; 0x42fc <can_get_status+0x10>
    42fa:	82 c0       	rjmp	.+260    	; 0x4400 <can_get_status+0x114>
    42fc:	8f 31       	cpi	r24, 0x1F	; 31
    42fe:	09 f4       	brne	.+2      	; 0x4302 <can_get_status+0x16>
    4300:	7f c0       	rjmp	.+254    	; 0x4400 <can_get_status+0x114>
    4302:	8f 3f       	cpi	r24, 0xFF	; 255
    4304:	09 f4       	brne	.+2      	; 0x4308 <can_get_status+0x1c>
    4306:	7c c0       	rjmp	.+248    	; 0x4400 <can_get_status+0x114>
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(cmd->handle);
    4308:	88 81       	ld	r24, Y
    430a:	82 95       	swap	r24
    430c:	80 7f       	andi	r24, 0xF0	; 240
    430e:	80 93 ed 00 	sts	0x00ED, r24
    a_status = can_get_mob_status();
    4312:	0e 94 6d 1a 	call	0x34da	; 0x34da <can_get_mob_status>
    4316:	18 2f       	mov	r17, r24
    
    switch (a_status)
    4318:	80 32       	cpi	r24, 0x20	; 32
    431a:	61 f0       	breq	.+24     	; 0x4334 <can_get_status+0x48>
    431c:	81 32       	cpi	r24, 0x21	; 33
    431e:	20 f4       	brcc	.+8      	; 0x4328 <can_get_status+0x3c>
    4320:	88 23       	and	r24, r24
    4322:	09 f4       	brne	.+2      	; 0x4326 <can_get_status+0x3a>
    4324:	6f c0       	rjmp	.+222    	; 0x4404 <can_get_status+0x118>
    4326:	64 c0       	rjmp	.+200    	; 0x43f0 <can_get_status+0x104>
    4328:	80 34       	cpi	r24, 0x40	; 64
    432a:	09 f4       	brne	.+2      	; 0x432e <can_get_status+0x42>
    432c:	57 c0       	rjmp	.+174    	; 0x43dc <can_get_status+0xf0>
    432e:	80 3a       	cpi	r24, 0xA0	; 160
    4330:	09 f0       	breq	.+2      	; 0x4334 <can_get_status+0x48>
    4332:	5e c0       	rjmp	.+188    	; 0x43f0 <can_get_status+0x104>
            rtn_val = CAN_STATUS_NOT_COMPLETED;
            break;
        //---------------      
        case MOB_RX_COMPLETED:     
        case MOB_RX_COMPLETED_DLCW:
            cmd->dlc = Can_get_dlc();
    4334:	80 91 ef 00 	lds	r24, 0x00EF
    4338:	8f 70       	andi	r24, 0x0F	; 15
    433a:	8f 83       	std	Y+7, r24	; 0x07
            can_get_data(cmd->pt_data);
    433c:	88 85       	ldd	r24, Y+8	; 0x08
    433e:	99 85       	ldd	r25, Y+9	; 0x09
    4340:	0e 94 80 1a 	call	0x3500	; 0x3500 <can_get_data>
            cmd->ctrl.rtr = Can_get_rtr();
    4344:	20 91 f0 00 	lds	r18, 0x00F0
    4348:	30 e0       	ldi	r19, 0x00	; 0
    434a:	24 70       	andi	r18, 0x04	; 4
    434c:	30 70       	andi	r19, 0x00	; 0
    434e:	35 95       	asr	r19
    4350:	27 95       	ror	r18
    4352:	35 95       	asr	r19
    4354:	27 95       	ror	r18
    4356:	2b 87       	std	Y+11, r18	; 0x0b
            if (Can_get_ide()) // if extended frame
    4358:	80 91 ef 00 	lds	r24, 0x00EF
    435c:	84 ff       	sbrs	r24, 4
    435e:	2b c0       	rjmp	.+86     	; 0x43b6 <can_get_status+0xca>
            {
                cmd->ctrl.ide = 1; // extended frame
    4360:	81 e0       	ldi	r24, 0x01	; 1
    4362:	8c 87       	std	Y+12, r24	; 0x0c
                Can_get_ext_id(cmd->id.ext);
    4364:	80 91 f3 00 	lds	r24, 0x00F3
    4368:	86 95       	lsr	r24
    436a:	86 95       	lsr	r24
    436c:	86 95       	lsr	r24
    436e:	8e 83       	std	Y+6, r24	; 0x06
    4370:	90 91 f2 00 	lds	r25, 0x00F2
    4374:	80 91 f3 00 	lds	r24, 0x00F3
    4378:	82 95       	swap	r24
    437a:	88 0f       	add	r24, r24
    437c:	80 7e       	andi	r24, 0xE0	; 224
    437e:	96 95       	lsr	r25
    4380:	96 95       	lsr	r25
    4382:	96 95       	lsr	r25
    4384:	89 0f       	add	r24, r25
    4386:	8d 83       	std	Y+5, r24	; 0x05
    4388:	90 91 f1 00 	lds	r25, 0x00F1
    438c:	80 91 f2 00 	lds	r24, 0x00F2
    4390:	82 95       	swap	r24
    4392:	88 0f       	add	r24, r24
    4394:	80 7e       	andi	r24, 0xE0	; 224
    4396:	96 95       	lsr	r25
    4398:	96 95       	lsr	r25
    439a:	96 95       	lsr	r25
    439c:	89 0f       	add	r24, r25
    439e:	8c 83       	std	Y+4, r24	; 0x04
    43a0:	90 91 f0 00 	lds	r25, 0x00F0
    43a4:	80 91 f1 00 	lds	r24, 0x00F1
    43a8:	82 95       	swap	r24
    43aa:	88 0f       	add	r24, r24
    43ac:	80 7e       	andi	r24, 0xE0	; 224
    43ae:	96 95       	lsr	r25
    43b0:	96 95       	lsr	r25
    43b2:	96 95       	lsr	r25
    43b4:	11 c0       	rjmp	.+34     	; 0x43d8 <can_get_status+0xec>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    43b6:	1c 86       	std	Y+12, r1	; 0x0c
                    Can_get_std_id(cmd->id.std);
    43b8:	80 91 f3 00 	lds	r24, 0x00F3
    43bc:	82 95       	swap	r24
    43be:	86 95       	lsr	r24
    43c0:	87 70       	andi	r24, 0x07	; 7
    43c2:	8c 83       	std	Y+4, r24	; 0x04
    43c4:	90 91 f2 00 	lds	r25, 0x00F2
    43c8:	80 91 f3 00 	lds	r24, 0x00F3
    43cc:	88 0f       	add	r24, r24
    43ce:	88 0f       	add	r24, r24
    43d0:	88 0f       	add	r24, r24
    43d2:	92 95       	swap	r25
    43d4:	96 95       	lsr	r25
    43d6:	97 70       	andi	r25, 0x07	; 7
    43d8:	89 0f       	add	r24, r25
    43da:	8b 83       	std	Y+3, r24	; 0x03
            rtn_val = CAN_STATUS_COMPLETED;
            break;
        //---------------      
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    43dc:	1a 87       	std	Y+10, r17	; 0x0a
            Can_mob_abort();        // Freed the MOB
    43de:	80 91 ef 00 	lds	r24, 0x00EF
    43e2:	8f 73       	andi	r24, 0x3F	; 63
    43e4:	80 93 ef 00 	sts	0x00EF, r24
            Can_clear_status_mob(); //   and reset MOb status
    43e8:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_COMPLETED;
    43ec:	80 e0       	ldi	r24, 0x00	; 0
            break;
    43ee:	0b c0       	rjmp	.+22     	; 0x4406 <can_get_status+0x11a>
        //---------------      
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    43f0:	1a 87       	std	Y+10, r17	; 0x0a
            Can_mob_abort();        // Freed the MOB
    43f2:	80 91 ef 00 	lds	r24, 0x00EF
    43f6:	8f 73       	andi	r24, 0x3F	; 63
    43f8:	80 93 ef 00 	sts	0x00EF, r24
            Can_clear_status_mob(); //   and reset MOb status
    43fc:	10 92 ee 00 	sts	0x00EE, r1
    U8 a_status, rtn_val;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    {
        return CAN_STATUS_ERROR;
    4400:	82 e0       	ldi	r24, 0x02	; 2
    4402:	01 c0       	rjmp	.+2      	; 0x4406 <can_get_status+0x11a>
    
    switch (a_status)
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    4404:	81 e0       	ldi	r24, 0x01	; 1
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
    4406:	df 91       	pop	r29
    4408:	cf 91       	pop	r28
    440a:	1f 91       	pop	r17
    440c:	08 95       	ret

0000440e <__vector_16>:
volatile uint8_t xbee_sending = 0;
volatile uint8_t nextId = 0;

/* Funktion der sender data request til ECU */
ISR(TIMER0_COMP_vect)
{
    440e:	1f 92       	push	r1
    4410:	0f 92       	push	r0
    4412:	0f b6       	in	r0, 0x3f	; 63
    4414:	0f 92       	push	r0
    4416:	0b b6       	in	r0, 0x3b	; 59
    4418:	0f 92       	push	r0
    441a:	11 24       	eor	r1, r1
    441c:	2f 93       	push	r18
    441e:	3f 93       	push	r19
    4420:	4f 93       	push	r20
    4422:	5f 93       	push	r21
    4424:	6f 93       	push	r22
    4426:	7f 93       	push	r23
    4428:	8f 93       	push	r24
    442a:	9f 93       	push	r25
    442c:	af 93       	push	r26
    442e:	bf 93       	push	r27
    4430:	cf 93       	push	r28
    4432:	df 93       	push	r29
    4434:	ef 93       	push	r30
    4436:	ff 93       	push	r31
	int i;
	testvar++;
    4438:	80 91 c1 03 	lds	r24, 0x03C1
    443c:	90 91 c2 03 	lds	r25, 0x03C2
    4440:	01 96       	adiw	r24, 0x01	; 1
    4442:	90 93 c2 03 	sts	0x03C2, r25
    4446:	80 93 c1 03 	sts	0x03C1, r24
	if (testvar == 4) {
    444a:	84 30       	cpi	r24, 0x04	; 4
    444c:	91 05       	cpc	r25, r1
    444e:	e1 f5       	brne	.+120    	; 0x44c8 <__vector_16+0xba>
		RecCount = 1;
    4450:	21 e0       	ldi	r18, 0x01	; 1
    4452:	20 93 0f 01 	sts	0x010F, r18
		RecJ = 0;
    4456:	10 92 bc 03 	sts	0x03BC, r1
		RecXbeeSend= 0;
    445a:	10 92 bd 03 	sts	0x03BD, r1
		RecCanSend = 0;
    445e:	10 92 be 03 	sts	0x03BE, r1
		RecToSd = 0;
    4462:	10 92 bf 03 	sts	0x03BF, r1
		if (RecIndex != 114 && EcuErrorTmp < 5) { // Test for fejl
    4466:	80 91 ba 03 	lds	r24, 0x03BA
    446a:	90 91 bb 03 	lds	r25, 0x03BB
    446e:	82 37       	cpi	r24, 0x72	; 114
    4470:	91 05       	cpc	r25, r1
    4472:	69 f0       	breq	.+26     	; 0x448e <__vector_16+0x80>
    4474:	30 91 c6 03 	lds	r19, 0x03C6
    4478:	35 30       	cpi	r19, 0x05	; 5
    447a:	48 f4       	brcc	.+18     	; 0x448e <__vector_16+0x80>
			EcuErrorTmp++;
    447c:	83 2f       	mov	r24, r19
    447e:	8f 5f       	subi	r24, 0xFF	; 255
    4480:	80 93 c6 03 	sts	0x03C6, r24
			if (EcuErrorTmp == 5) {
    4484:	85 30       	cpi	r24, 0x05	; 5
    4486:	79 f4       	brne	.+30     	; 0x44a6 <__vector_16+0x98>
				EcuCommError = 1;
    4488:	20 93 c5 03 	sts	0x03C5, r18
    448c:	0c c0       	rjmp	.+24     	; 0x44a6 <__vector_16+0x98>
			}
		} else if (EcuErrorTmp > 0 && RecIndex == 114) {
    448e:	20 91 c6 03 	lds	r18, 0x03C6
    4492:	22 23       	and	r18, r18
    4494:	41 f0       	breq	.+16     	; 0x44a6 <__vector_16+0x98>
    4496:	82 37       	cpi	r24, 0x72	; 114
    4498:	91 05       	cpc	r25, r1
    449a:	29 f4       	brne	.+10     	; 0x44a6 <__vector_16+0x98>
			EcuErrorTmp--;
    449c:	21 50       	subi	r18, 0x01	; 1
    449e:	20 93 c6 03 	sts	0x03C6, r18
			EcuCommError = 0;
    44a2:	10 92 c5 03 	sts	0x03C5, r1
		}
		testvar=0;
    44a6:	10 92 c2 03 	sts	0x03C2, r1
    44aa:	10 92 c1 03 	sts	0x03C1, r1
		RecIndex = 0;
    44ae:	10 92 bb 03 	sts	0x03BB, r1
    44b2:	10 92 ba 03 	sts	0x03BA, r1
    44b6:	c2 ef       	ldi	r28, 0xF2	; 242
    44b8:	d1 e0       	ldi	r29, 0x01	; 1
		for (i=0;i<=9;i++) {		// Send data req streng
			USART0_Transmit(ecu_data[i]); 
    44ba:	89 91       	ld	r24, Y+
    44bc:	0e 94 22 03 	call	0x644	; 0x644 <USART0_Transmit>
			EcuErrorTmp--;
			EcuCommError = 0;
		}
		testvar=0;
		RecIndex = 0;
		for (i=0;i<=9;i++) {		// Send data req streng
    44c0:	81 e0       	ldi	r24, 0x01	; 1
    44c2:	cc 3f       	cpi	r28, 0xFC	; 252
    44c4:	d8 07       	cpc	r29, r24
    44c6:	c9 f7       	brne	.-14     	; 0x44ba <__vector_16+0xac>
			USART0_Transmit(ecu_data[i]); 
		}
	}
}
    44c8:	ff 91       	pop	r31
    44ca:	ef 91       	pop	r30
    44cc:	df 91       	pop	r29
    44ce:	cf 91       	pop	r28
    44d0:	bf 91       	pop	r27
    44d2:	af 91       	pop	r26
    44d4:	9f 91       	pop	r25
    44d6:	8f 91       	pop	r24
    44d8:	7f 91       	pop	r23
    44da:	6f 91       	pop	r22
    44dc:	5f 91       	pop	r21
    44de:	4f 91       	pop	r20
    44e0:	3f 91       	pop	r19
    44e2:	2f 91       	pop	r18
    44e4:	0f 90       	pop	r0
    44e6:	0b be       	out	0x3b, r0	; 59
    44e8:	0f 90       	pop	r0
    44ea:	0f be       	out	0x3f, r0	; 63
    44ec:	0f 90       	pop	r0
    44ee:	1f 90       	pop	r1
    44f0:	18 95       	reti

000044f2 <__vector_21>:

/* Funktion til at læse data fra ECU */
ISR(USART0_RX_vect)
{
    44f2:	1f 92       	push	r1
    44f4:	0f 92       	push	r0
    44f6:	0f b6       	in	r0, 0x3f	; 63
    44f8:	0f 92       	push	r0
    44fa:	0b b6       	in	r0, 0x3b	; 59
    44fc:	0f 92       	push	r0
    44fe:	11 24       	eor	r1, r1
    4500:	2f 93       	push	r18
    4502:	3f 93       	push	r19
    4504:	4f 93       	push	r20
    4506:	5f 93       	push	r21
    4508:	6f 93       	push	r22
    450a:	7f 93       	push	r23
    450c:	8f 93       	push	r24
    450e:	9f 93       	push	r25
    4510:	af 93       	push	r26
    4512:	bf 93       	push	r27
    4514:	ef 93       	push	r30
    4516:	ff 93       	push	r31
	if (RecIndex <= 114) {			// Der skal modtages 228 bytes fra ECU'en
    4518:	80 91 ba 03 	lds	r24, 0x03BA
    451c:	90 91 bb 03 	lds	r25, 0x03BB
    4520:	83 37       	cpi	r24, 0x73	; 115
    4522:	91 05       	cpc	r25, r1
    4524:	0c f0       	brlt	.+2      	; 0x4528 <__vector_21+0x36>
    4526:	f8 c0       	rjmp	.+496    	; 0x4718 <__vector_21+0x226>
		EcuData[RecIndex] = UDR0;	// Gem data fra ECU
    4528:	20 91 c6 00 	lds	r18, 0x00C6
    452c:	fc 01       	movw	r30, r24
    452e:	e0 50       	subi	r30, 0x00	; 0
    4530:	fe 4f       	sbci	r31, 0xFE	; 254
    4532:	20 83       	st	Z, r18
		RecIndex++;
    4534:	01 96       	adiw	r24, 0x01	; 1
    4536:	90 93 bb 03 	sts	0x03BB, r25
    453a:	80 93 ba 03 	sts	0x03BA, r24

		if (RecCount == RecIndex) {
    453e:	40 91 0f 01 	lds	r20, 0x010F
    4542:	24 2f       	mov	r18, r20
    4544:	30 e0       	ldi	r19, 0x00	; 0
    4546:	28 17       	cp	r18, r24
    4548:	39 07       	cpc	r19, r25
    454a:	09 f0       	breq	.+2      	; 0x454e <__vector_21+0x5c>
    454c:	9b c0       	rjmp	.+310    	; 0x4684 <__vector_21+0x192>
			RecCount += ECUObjects[RecJ].length;
    454e:	80 91 bc 03 	lds	r24, 0x03BC
    4552:	90 e0       	ldi	r25, 0x00	; 0
    4554:	fc 01       	movw	r30, r24
    4556:	ee 0f       	add	r30, r30
    4558:	ff 1f       	adc	r31, r31
    455a:	e8 0f       	add	r30, r24
    455c:	f9 1f       	adc	r31, r25
    455e:	e5 59       	subi	r30, 0x95	; 149
    4560:	fe 4f       	sbci	r31, 0xFE	; 254
    4562:	80 81       	ld	r24, Z
    4564:	84 0f       	add	r24, r20
    4566:	80 93 0f 01 	sts	0x010F, r24
			if (RecCanSend == 1) {
    456a:	80 91 be 03 	lds	r24, 0x03BE
    456e:	81 30       	cpi	r24, 0x01	; 1
    4570:	31 f4       	brne	.+12     	; 0x457e <__vector_21+0x8c>
				can_send_non_blocking(rpm_msgid, &CanSendData[0], 3);
    4572:	85 e8       	ldi	r24, 0x85	; 133
    4574:	6f e9       	ldi	r22, 0x9F	; 159
    4576:	7a e0       	ldi	r23, 0x0A	; 10
    4578:	43 e0       	ldi	r20, 0x03	; 3
    457a:	0e 94 19 27 	call	0x4e32	; 0x4e32 <can_send_non_blocking>
			}
			if (valueObjects[ECUObjects[RecJ].id].action & (TO_XBEE | TO_SD | TO_CAN) ) {
    457e:	80 91 bc 03 	lds	r24, 0x03BC
    4582:	90 e0       	ldi	r25, 0x00	; 0
    4584:	fc 01       	movw	r30, r24
    4586:	ee 0f       	add	r30, r30
    4588:	ff 1f       	adc	r31, r31
    458a:	e8 0f       	add	r30, r24
    458c:	f9 1f       	adc	r31, r25
    458e:	e5 59       	subi	r30, 0x95	; 149
    4590:	fe 4f       	sbci	r31, 0xFE	; 254
    4592:	01 80       	ldd	r0, Z+1	; 0x01
    4594:	f2 81       	ldd	r31, Z+2	; 0x02
    4596:	e0 2d       	mov	r30, r0
    4598:	ee 0f       	add	r30, r30
    459a:	ff 1f       	adc	r31, r31
    459c:	ed 5e       	subi	r30, 0xED	; 237
    459e:	fe 4f       	sbci	r31, 0xFE	; 254
    45a0:	81 81       	ldd	r24, Z+1	; 0x01
    45a2:	90 e0       	ldi	r25, 0x00	; 0
    45a4:	9c 01       	movw	r18, r24
    45a6:	27 70       	andi	r18, 0x07	; 7
    45a8:	30 70       	andi	r19, 0x00	; 0
    45aa:	21 15       	cp	r18, r1
    45ac:	31 05       	cpc	r19, r1
    45ae:	09 f4       	brne	.+2      	; 0x45b2 <__vector_21+0xc0>
    45b0:	5e c0       	rjmp	.+188    	; 0x466e <__vector_21+0x17c>
				
				
				RecXbeeSend = 0;
    45b2:	10 92 bd 03 	sts	0x03BD, r1
				RecCanSend = 0;
    45b6:	10 92 be 03 	sts	0x03BE, r1
				RecToSd = 0;
    45ba:	10 92 bf 03 	sts	0x03BF, r1

				/* Value to xbee? */				
				if (valueObjects[ECUObjects[RecJ].id].action & TO_XBEE) {
    45be:	82 ff       	sbrs	r24, 2
    45c0:	2b c0       	rjmp	.+86     	; 0x4618 <__vector_21+0x126>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    45c2:	f8 94       	cli
				    	//_delay_us(10);
				    	ATOMIC_BLOCK(ATOMIC_FORCEON)
				    	{
						QUEUE_PUT(xbee_q, ECUObjects[RecJ].id);
    45c4:	80 91 21 0a 	lds	r24, 0x0A21
    45c8:	90 91 22 0a 	lds	r25, 0x0A22
    45cc:	dc 01       	movw	r26, r24
    45ce:	a1 5e       	subi	r26, 0xE1	; 225
    45d0:	b5 4f       	sbci	r27, 0xF5	; 245
    45d2:	20 91 bc 03 	lds	r18, 0x03BC
    45d6:	30 e0       	ldi	r19, 0x00	; 0
    45d8:	f9 01       	movw	r30, r18
    45da:	ee 0f       	add	r30, r30
    45dc:	ff 1f       	adc	r31, r31
    45de:	e2 0f       	add	r30, r18
    45e0:	f3 1f       	adc	r31, r19
    45e2:	e5 59       	subi	r30, 0x95	; 149
    45e4:	fe 4f       	sbci	r31, 0xFE	; 254
    45e6:	21 81       	ldd	r18, Z+1	; 0x01
    45e8:	17 96       	adiw	r26, 0x07	; 7
    45ea:	2c 93       	st	X, r18
    45ec:	17 97       	sbiw	r26, 0x07	; 7
    45ee:	01 96       	adiw	r24, 0x01	; 1
    45f0:	60 91 23 0a 	lds	r22, 0x0A23
    45f4:	70 91 24 0a 	lds	r23, 0x0A24
    45f8:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__divmodhi4>
    45fc:	90 93 22 0a 	sts	0x0A22, r25
    4600:	80 93 21 0a 	sts	0x0A21, r24
    4604:	80 91 25 0a 	lds	r24, 0x0A25
    4608:	8f 5f       	subi	r24, 0xFF	; 255
    460a:	ef e1       	ldi	r30, 0x1F	; 31
    460c:	fa e0       	ldi	r31, 0x0A	; 10
    460e:	86 83       	std	Z+6, r24	; 0x06
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    4610:	78 94       	sei
					}
					RecXbeeSend = 1;
    4612:	81 e0       	ldi	r24, 0x01	; 1
    4614:	80 93 bd 03 	sts	0x03BD, r24
				}
				
				/* Value to CAN? */
				if (valueObjects[ECUObjects[RecJ].id].action & TO_CAN) {
    4618:	20 91 bc 03 	lds	r18, 0x03BC
    461c:	30 e0       	ldi	r19, 0x00	; 0
    461e:	f9 01       	movw	r30, r18
    4620:	ee 0f       	add	r30, r30
    4622:	ff 1f       	adc	r31, r31
    4624:	e2 0f       	add	r30, r18
    4626:	f3 1f       	adc	r31, r19
    4628:	e5 59       	subi	r30, 0x95	; 149
    462a:	fe 4f       	sbci	r31, 0xFE	; 254
    462c:	81 81       	ldd	r24, Z+1	; 0x01
    462e:	92 81       	ldd	r25, Z+2	; 0x02
    4630:	fc 01       	movw	r30, r24
    4632:	ee 0f       	add	r30, r30
    4634:	ff 1f       	adc	r31, r31
    4636:	ed 5e       	subi	r30, 0xED	; 237
    4638:	fe 4f       	sbci	r31, 0xFE	; 254
    463a:	41 81       	ldd	r20, Z+1	; 0x01
    463c:	40 ff       	sbrs	r20, 0
    463e:	07 c0       	rjmp	.+14     	; 0x464e <__vector_21+0x15c>
					/* TODO
					 * Insert call to val_to_CAN() when the function is
					 * made
					 */
					CanDataIndex = 0;
					CanSendData[CanDataIndex++] = ECUObjects[RecJ].id;
    4640:	80 93 9f 0a 	sts	0x0A9F, r24
    4644:	81 e0       	ldi	r24, 0x01	; 1
    4646:	80 93 c0 03 	sts	0x03C0, r24
					RecCanSend = 1;
    464a:	80 93 be 03 	sts	0x03BE, r24
				}

				/* Value to SD? */
				if (valueObjects[ECUObjects[RecJ].id].action & TO_SD) {
    464e:	41 ff       	sbrs	r20, 1
    4650:	14 c0       	rjmp	.+40     	; 0x467a <__vector_21+0x188>
					/* TODO
					 * Insert call to val_to_SD() when the function is
					 * made
					 */
					sd_log_write( (uint8_t *)&ECUObjects[RecJ].id, 1);
    4652:	c9 01       	movw	r24, r18
    4654:	88 0f       	add	r24, r24
    4656:	99 1f       	adc	r25, r25
    4658:	82 0f       	add	r24, r18
    465a:	93 1f       	adc	r25, r19
    465c:	84 59       	subi	r24, 0x94	; 148
    465e:	9e 4f       	sbci	r25, 0xFE	; 254
    4660:	61 e0       	ldi	r22, 0x01	; 1
    4662:	0e 94 91 24 	call	0x4922	; 0x4922 <sd_log_write>
					RecToSd = 1;
    4666:	81 e0       	ldi	r24, 0x01	; 1
    4668:	80 93 bf 03 	sts	0x03BF, r24
    466c:	06 c0       	rjmp	.+12     	; 0x467a <__vector_21+0x188>
				}
			} else {
				RecCanSend = 0;
    466e:	10 92 be 03 	sts	0x03BE, r1
				RecXbeeSend = 0;
    4672:	10 92 bd 03 	sts	0x03BD, r1
				RecToSd = 0;
    4676:	10 92 bf 03 	sts	0x03BF, r1
			}

			RecJ++;
    467a:	80 91 bc 03 	lds	r24, 0x03BC
    467e:	8f 5f       	subi	r24, 0xFF	; 255
    4680:	80 93 bc 03 	sts	0x03BC, r24
		}

		if (RecXbeeSend == 1) {
    4684:	80 91 bd 03 	lds	r24, 0x03BD
    4688:	81 30       	cpi	r24, 0x01	; 1
    468a:	21 f5       	brne	.+72     	; 0x46d4 <__vector_21+0x1e2>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    468c:	f8 94       	cli
		    	ATOMIC_BLOCK(ATOMIC_FORCEON)
		    	{
				QUEUE_PUT(xbee_q, EcuData[RecIndex-1]);
    468e:	80 91 21 0a 	lds	r24, 0x0A21
    4692:	90 91 22 0a 	lds	r25, 0x0A22
    4696:	dc 01       	movw	r26, r24
    4698:	a1 5e       	subi	r26, 0xE1	; 225
    469a:	b5 4f       	sbci	r27, 0xF5	; 245
    469c:	e0 91 ba 03 	lds	r30, 0x03BA
    46a0:	f0 91 bb 03 	lds	r31, 0x03BB
    46a4:	e1 50       	subi	r30, 0x01	; 1
    46a6:	fe 4f       	sbci	r31, 0xFE	; 254
    46a8:	20 81       	ld	r18, Z
    46aa:	17 96       	adiw	r26, 0x07	; 7
    46ac:	2c 93       	st	X, r18
    46ae:	17 97       	sbiw	r26, 0x07	; 7
    46b0:	01 96       	adiw	r24, 0x01	; 1
    46b2:	60 91 23 0a 	lds	r22, 0x0A23
    46b6:	70 91 24 0a 	lds	r23, 0x0A24
    46ba:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__divmodhi4>
    46be:	90 93 22 0a 	sts	0x0A22, r25
    46c2:	80 93 21 0a 	sts	0x0A21, r24
    46c6:	80 91 25 0a 	lds	r24, 0x0A25
    46ca:	8f 5f       	subi	r24, 0xFF	; 255
    46cc:	ef e1       	ldi	r30, 0x1F	; 31
    46ce:	fa e0       	ldi	r31, 0x0A	; 10
    46d0:	86 83       	std	Z+6, r24	; 0x06
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    46d2:	78 94       	sei
			}
		}
		if (RecCanSend == 1) {
    46d4:	80 91 be 03 	lds	r24, 0x03BE
    46d8:	81 30       	cpi	r24, 0x01	; 1
    46da:	89 f4       	brne	.+34     	; 0x46fe <__vector_21+0x20c>
			CanSendData[CanDataIndex++] = EcuData[RecIndex-1];
    46dc:	80 91 c0 03 	lds	r24, 0x03C0
    46e0:	e8 2f       	mov	r30, r24
    46e2:	f0 e0       	ldi	r31, 0x00	; 0
    46e4:	e1 56       	subi	r30, 0x61	; 97
    46e6:	f5 4f       	sbci	r31, 0xF5	; 245
    46e8:	a0 91 ba 03 	lds	r26, 0x03BA
    46ec:	b0 91 bb 03 	lds	r27, 0x03BB
    46f0:	a1 50       	subi	r26, 0x01	; 1
    46f2:	be 4f       	sbci	r27, 0xFE	; 254
    46f4:	9c 91       	ld	r25, X
    46f6:	90 83       	st	Z, r25
    46f8:	8f 5f       	subi	r24, 0xFF	; 255
    46fa:	80 93 c0 03 	sts	0x03C0, r24
		}
		if (RecToSd == 1) {
    46fe:	80 91 bf 03 	lds	r24, 0x03BF
    4702:	81 30       	cpi	r24, 0x01	; 1
    4704:	49 f4       	brne	.+18     	; 0x4718 <__vector_21+0x226>
			sd_log_write(&EcuData[RecIndex-1], 1);
    4706:	80 91 ba 03 	lds	r24, 0x03BA
    470a:	90 91 bb 03 	lds	r25, 0x03BB
    470e:	81 50       	subi	r24, 0x01	; 1
    4710:	9e 4f       	sbci	r25, 0xFE	; 254
    4712:	61 e0       	ldi	r22, 0x01	; 1
    4714:	0e 94 91 24 	call	0x4922	; 0x4922 <sd_log_write>
		}

	}
}
    4718:	ff 91       	pop	r31
    471a:	ef 91       	pop	r30
    471c:	bf 91       	pop	r27
    471e:	af 91       	pop	r26
    4720:	9f 91       	pop	r25
    4722:	8f 91       	pop	r24
    4724:	7f 91       	pop	r23
    4726:	6f 91       	pop	r22
    4728:	5f 91       	pop	r21
    472a:	4f 91       	pop	r20
    472c:	3f 91       	pop	r19
    472e:	2f 91       	pop	r18
    4730:	0f 90       	pop	r0
    4732:	0b be       	out	0x3b, r0	; 59
    4734:	0f 90       	pop	r0
    4736:	0f be       	out	0x3f, r0	; 63
    4738:	0f 90       	pop	r0
    473a:	1f 90       	pop	r1
    473c:	18 95       	reti

0000473e <__vector_33>:

/* ISR to take care of xbee data sending */
ISR(USART1_UDRE_vect)
{
    473e:	1f 92       	push	r1
    4740:	0f 92       	push	r0
    4742:	0f b6       	in	r0, 0x3f	; 63
    4744:	0f 92       	push	r0
    4746:	0b b6       	in	r0, 0x3b	; 59
    4748:	0f 92       	push	r0
    474a:	11 24       	eor	r1, r1
    474c:	2f 93       	push	r18
    474e:	5f 93       	push	r21
    4750:	6f 93       	push	r22
    4752:	7f 93       	push	r23
    4754:	8f 93       	push	r24
    4756:	9f 93       	push	r25
    4758:	af 93       	push	r26
    475a:	bf 93       	push	r27
    475c:	ef 93       	push	r30
    475e:	ff 93       	push	r31
	uint8_t tmp;

	/* if xbee_seq_index is less than 3 - send package start sequence */
	if (xbee_seq_index<3) {
    4760:	80 91 c7 03 	lds	r24, 0x03C7
    4764:	83 30       	cpi	r24, 0x03	; 3
    4766:	68 f4       	brcc	.+26     	; 0x4782 <__vector_33+0x44>
		UDR1 = start_sequence[xbee_seq_index++];
    4768:	80 91 c7 03 	lds	r24, 0x03C7
    476c:	e8 2f       	mov	r30, r24
    476e:	f0 e0       	ldi	r31, 0x00	; 0
    4770:	e0 5f       	subi	r30, 0xF0	; 240
    4772:	fe 4f       	sbci	r31, 0xFE	; 254
    4774:	90 81       	ld	r25, Z
    4776:	90 93 ce 00 	sts	0x00CE, r25
    477a:	8f 5f       	subi	r24, 0xFF	; 255
    477c:	80 93 c7 03 	sts	0x03C7, r24
    4780:	3c c0       	rjmp	.+120    	; 0x47fa <__vector_33+0xbc>
	}else{
		QUEUE_GET(xbee_q, tmp);		// pop value from queue
    4782:	80 91 1f 0a 	lds	r24, 0x0A1F
    4786:	90 91 20 0a 	lds	r25, 0x0A20
    478a:	fc 01       	movw	r30, r24
    478c:	e1 5e       	subi	r30, 0xE1	; 225
    478e:	f5 4f       	sbci	r31, 0xF5	; 245
    4790:	27 81       	ldd	r18, Z+7	; 0x07
    4792:	01 96       	adiw	r24, 0x01	; 1
    4794:	60 91 23 0a 	lds	r22, 0x0A23
    4798:	70 91 24 0a 	lds	r23, 0x0A24
    479c:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__divmodhi4>
    47a0:	90 93 20 0a 	sts	0x0A20, r25
    47a4:	80 93 1f 0a 	sts	0x0A1F, r24
    47a8:	80 91 25 0a 	lds	r24, 0x0A25
    47ac:	81 50       	subi	r24, 0x01	; 1
    47ae:	80 93 25 0a 	sts	0x0A25, r24
		if (nextId == 0) {		// Check if at start of data package
    47b2:	80 91 c4 03 	lds	r24, 0x03C4
    47b6:	88 23       	and	r24, r24
    47b8:	51 f4       	brne	.+20     	; 0x47ce <__vector_33+0x90>
			nextId = valueObjects[tmp].length+8;
    47ba:	e2 2f       	mov	r30, r18
    47bc:	f0 e0       	ldi	r31, 0x00	; 0
    47be:	ee 0f       	add	r30, r30
    47c0:	ff 1f       	adc	r31, r31
    47c2:	ed 5e       	subi	r30, 0xED	; 237
    47c4:	fe 4f       	sbci	r31, 0xFE	; 254
    47c6:	80 81       	ld	r24, Z
    47c8:	88 5f       	subi	r24, 0xF8	; 248
    47ca:	80 93 c4 03 	sts	0x03C4, r24
		}
		UDR1 = tmp;			// Send value
    47ce:	20 93 ce 00 	sts	0x00CE, r18
		nextId = nextId - 8;
    47d2:	80 91 c4 03 	lds	r24, 0x03C4
    47d6:	88 50       	subi	r24, 0x08	; 8
    47d8:	80 93 c4 03 	sts	0x03C4, r24
	    	if (nextId == 0) {		// Data package send, check number of bytes in the queue
    47dc:	80 91 c4 03 	lds	r24, 0x03C4
    47e0:	88 23       	and	r24, r24
    47e2:	59 f4       	brne	.+22     	; 0x47fa <__vector_33+0xbc>
			if (QUEUE_GET_NUM_ELE(xbee_q) <= 4) {	// If less than 4 bytes remain stop sending
    47e4:	80 91 25 0a 	lds	r24, 0x0A25
    47e8:	85 30       	cpi	r24, 0x05	; 5
    47ea:	38 f4       	brcc	.+14     	; 0x47fa <__vector_33+0xbc>
				xbee_sending = 0;
    47ec:	10 92 c3 03 	sts	0x03C3, r1
				Usart1_tx_ei_dis();
    47f0:	80 91 c9 00 	lds	r24, 0x00C9
    47f4:	8f 7d       	andi	r24, 0xDF	; 223
    47f6:	80 93 c9 00 	sts	0x00C9, r24
			}
		}
	}
}
    47fa:	ff 91       	pop	r31
    47fc:	ef 91       	pop	r30
    47fe:	bf 91       	pop	r27
    4800:	af 91       	pop	r26
    4802:	9f 91       	pop	r25
    4804:	8f 91       	pop	r24
    4806:	7f 91       	pop	r23
    4808:	6f 91       	pop	r22
    480a:	5f 91       	pop	r21
    480c:	2f 91       	pop	r18
    480e:	0f 90       	pop	r0
    4810:	0b be       	out	0x3b, r0	; 59
    4812:	0f 90       	pop	r0
    4814:	0f be       	out	0x3f, r0	; 63
    4816:	0f 90       	pop	r0
    4818:	1f 90       	pop	r1
    481a:	18 95       	reti

0000481c <xbee_send_trigger>:
	 * 
	 *
	 * -Trigger package send 
	 */
	/* Check if xbee is already sending and if true just return */
	if (xbee_sending) return;
    481c:	80 91 c3 03 	lds	r24, 0x03C3
    4820:	88 23       	and	r24, r24
    4822:	d1 f4       	brne	.+52     	; 0x4858 <xbee_send_trigger+0x3c>

	/* If number of bytes in send buffer is greater than X send data */
	if (QUEUE_GET_NUM_ELE(xbee_q)>=40){
    4824:	80 91 25 0a 	lds	r24, 0x0A25
    4828:	88 32       	cpi	r24, 0x28	; 40
    482a:	b0 f0       	brcs	.+44     	; 0x4858 <xbee_send_trigger+0x3c>
		xbee_sending = 1;
    482c:	81 e0       	ldi	r24, 0x01	; 1
    482e:	80 93 c3 03 	sts	0x03C3, r24
		xbee_seq_index = 0;
    4832:	10 92 c7 03 	sts	0x03C7, r1
	    	Usart1_tx_ei_en();	/* Remove when done testing */
    4836:	80 91 c9 00 	lds	r24, 0x00C9
    483a:	80 62       	ori	r24, 0x20	; 32
    483c:	80 93 c9 00 	sts	0x00C9, r24
		UDR1 = start_sequence[xbee_seq_index++];
    4840:	80 91 c7 03 	lds	r24, 0x03C7
    4844:	e8 2f       	mov	r30, r24
    4846:	f0 e0       	ldi	r31, 0x00	; 0
    4848:	e4 50       	subi	r30, 0x04	; 4
    484a:	fe 4f       	sbci	r31, 0xFE	; 254
    484c:	90 81       	ld	r25, Z
    484e:	90 93 ce 00 	sts	0x00CE, r25
    4852:	8f 5f       	subi	r24, 0xFF	; 255
    4854:	80 93 c7 03 	sts	0x03C7, r24
    4858:	08 95       	ret

0000485a <TWI_init>:
#include <util/twi.h>
#include "twi.h"

void TWI_init(void)
{
	PORTD |= (1<<PORTD0)|(1<<PORTD1);	/* Enable pull-up on TWI pins */
    485a:	8b b1       	in	r24, 0x0b	; 11
    485c:	83 60       	ori	r24, 0x03	; 3
    485e:	8b b9       	out	0x0b, r24	; 11

	/* Set TWI clock */
	TWSR = 0;	/* Set prescaler to 1 */
    4860:	10 92 b9 00 	sts	0x00B9, r1
	TWBR = (F_CPU/TWI_CLOCK-16)/2;	/* Calculate TWBR value */
    4864:	8f e2       	ldi	r24, 0x2F	; 47
    4866:	80 93 b8 00 	sts	0x00B8, r24
}
    486a:	08 95       	ret

0000486c <TWI_start>:

BOOL TWI_start(void)
{
	TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);	/* send start condition */
    486c:	84 ea       	ldi	r24, 0xA4	; 164
    486e:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    4872:	80 91 bc 00 	lds	r24, 0x00BC
    4876:	87 ff       	sbrs	r24, 7
    4878:	fc cf       	rjmp	.-8      	; 0x4872 <TWI_start+0x6>
	if (!((TW_STATUS == TW_REP_START) || (TW_STATUS == TW_START))) return FALSE; /* Return if communication could not be started */
    487a:	80 91 b9 00 	lds	r24, 0x00B9
    487e:	88 7f       	andi	r24, 0xF8	; 248
    4880:	80 31       	cpi	r24, 0x10	; 16
    4882:	51 f0       	breq	.+20     	; 0x4898 <TWI_start+0x2c>
    4884:	80 91 b9 00 	lds	r24, 0x00B9
    4888:	88 7f       	andi	r24, 0xF8	; 248
	/* Set TWI clock */
	TWSR = 0;	/* Set prescaler to 1 */
	TWBR = (F_CPU/TWI_CLOCK-16)/2;	/* Calculate TWBR value */
}

BOOL TWI_start(void)
    488a:	21 e0       	ldi	r18, 0x01	; 1
    488c:	30 e0       	ldi	r19, 0x00	; 0
    488e:	88 30       	cpi	r24, 0x08	; 8
    4890:	29 f0       	breq	.+10     	; 0x489c <TWI_start+0x30>
    4892:	20 e0       	ldi	r18, 0x00	; 0
    4894:	30 e0       	ldi	r19, 0x00	; 0
    4896:	02 c0       	rjmp	.+4      	; 0x489c <TWI_start+0x30>
{
	TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);	/* send start condition */
	while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
	if (!((TW_STATUS == TW_REP_START) || (TW_STATUS == TW_START))) return FALSE; /* Return if communication could not be started */
	return TRUE;
    4898:	21 e0       	ldi	r18, 0x01	; 1
    489a:	30 e0       	ldi	r19, 0x00	; 0
}
    489c:	c9 01       	movw	r24, r18
    489e:	08 95       	ret

000048a0 <TWI_send>:

/* Send a byte to the TWI bus */
void TWI_send(uint8_t data)
{
	TWDR = data;
    48a0:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    48a4:	84 e8       	ldi	r24, 0x84	; 132
    48a6:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    48aa:	80 91 bc 00 	lds	r24, 0x00BC
    48ae:	87 ff       	sbrs	r24, 7
    48b0:	fc cf       	rjmp	.-8      	; 0x48aa <TWI_send+0xa>
}	
    48b2:	08 95       	ret

000048b4 <TWI_rcvr>:

/* Read a byte from the TWI bus */
uint8_t TWI_rcvr(BOOL ack)
{
	if (ack) {
    48b4:	00 97       	sbiw	r24, 0x00	; 0
    48b6:	11 f0       	breq	.+4      	; 0x48bc <TWI_rcvr+0x8>
		TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA); 	/* send ACK after data recived */
    48b8:	84 ec       	ldi	r24, 0xC4	; 196
    48ba:	01 c0       	rjmp	.+2      	; 0x48be <TWI_rcvr+0xa>
	} else {
		TWCR = _BV(TWINT) | _BV(TWEN);			/* send NACK after data recived */
    48bc:	84 e8       	ldi	r24, 0x84	; 132
    48be:	80 93 bc 00 	sts	0x00BC, r24
	}		 
	while ((TWCR & _BV(TWINT)) == 0) ; 			/* wait for transmission */	
    48c2:	80 91 bc 00 	lds	r24, 0x00BC
    48c6:	87 ff       	sbrs	r24, 7
    48c8:	fc cf       	rjmp	.-8      	; 0x48c2 <TWI_rcvr+0xe>
	return 	TWDR;
    48ca:	80 91 bb 00 	lds	r24, 0x00BB
}
    48ce:	08 95       	ret

000048d0 <TWI_stop>:
		
void TWI_stop(void)
{
	TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */
    48d0:	84 e9       	ldi	r24, 0x94	; 148
    48d2:	80 93 bc 00 	sts	0x00BC, r24
}
    48d6:	08 95       	ret

000048d8 <get_free_log_number>:
#if _USE_LFN
char Lfname[_MAX_LFN+1];
#endif

int get_free_log_number( DIR *dir )
{
    48d8:	ef 92       	push	r14
    48da:	ff 92       	push	r15
    48dc:	0f 93       	push	r16
    48de:	1f 93       	push	r17
    48e0:	cf 93       	push	r28
    48e2:	df 93       	push	r29
    48e4:	8c 01       	movw	r16, r24
	BYTE res;
	DWORD p1, p2;
	UINT s1, s2;
	UINT maxname=0;
    48e6:	c0 e0       	ldi	r28, 0x00	; 0
    48e8:	d0 e0       	ldi	r29, 0x00	; 0
#if _USE_LFN
	Finfo.lfname = Lfname;
	Finfo.lfsize = sizeof(Lfname);
#endif
	for(;;) {
		res = f_readdir(dir, &Finfo);
    48ea:	c8 01       	movw	r24, r16
    48ec:	6f ef       	ldi	r22, 0xFF	; 255
    48ee:	75 e0       	ldi	r23, 0x05	; 5
    48f0:	0e 94 0b 14 	call	0x2816	; 0x2816 <f_readdir>
		if ((res != FR_OK) || !Finfo.fname[0]) break;
    48f4:	88 23       	and	r24, r24
    48f6:	69 f4       	brne	.+26     	; 0x4912 <get_free_log_number+0x3a>
    48f8:	80 91 08 06 	lds	r24, 0x0608
    48fc:	88 23       	and	r24, r24
    48fe:	49 f0       	breq	.+18     	; 0x4912 <get_free_log_number+0x3a>
		if ( atoi(&(Finfo.fname[0])) > maxname )
    4900:	88 e0       	ldi	r24, 0x08	; 8
    4902:	96 e0       	ldi	r25, 0x06	; 6
    4904:	0e 94 08 2e 	call	0x5c10	; 0x5c10 <atoi>
    4908:	c8 17       	cp	r28, r24
    490a:	d9 07       	cpc	r29, r25
    490c:	70 f7       	brcc	.-36     	; 0x48ea <get_free_log_number+0x12>
    490e:	ec 01       	movw	r28, r24
    4910:	ec cf       	rjmp	.-40     	; 0x48ea <get_free_log_number+0x12>
			maxname = atoi(&(Finfo.fname[0]));
	}
	return maxname + 1;
    4912:	21 96       	adiw	r28, 0x01	; 1
}
    4914:	7e 01       	movw	r14, r28
    4916:	ce 01       	movw	r24, r28
    4918:	cd b7       	in	r28, 0x3d	; 61
    491a:	de b7       	in	r29, 0x3e	; 62
    491c:	e6 e0       	ldi	r30, 0x06	; 6
    491e:	0c 94 f3 2d 	jmp	0x5be6	; 0x5be6 <__epilogue_restores__+0x18>

00004922 <sd_log_write>:

uint8_t sd_log_write(uint8_t *data, uint8_t len)
{
    4922:	fc 01       	movw	r30, r24
	switch (sd_buf_in_use) {
    4924:	20 91 ff 01 	lds	r18, 0x01FF
    4928:	21 30       	cpi	r18, 0x01	; 1
    492a:	19 f0       	breq	.+6      	; 0x4932 <sd_log_write+0x10>
    492c:	22 30       	cpi	r18, 0x02	; 2
    492e:	e1 f4       	brne	.+56     	; 0x4968 <sd_log_write+0x46>
    4930:	0e c0       	rjmp	.+28     	; 0x494e <sd_log_write+0x2c>
		case 1:
			if (SD_BUF_SIZE < sd_buf1_head + len) {
    4932:	80 91 c8 03 	lds	r24, 0x03C8
    4936:	90 e0       	ldi	r25, 0x00	; 0
    4938:	86 0f       	add	r24, r22
    493a:	91 1d       	adc	r25, r1
    493c:	85 36       	cpi	r24, 0x65	; 101
    493e:	91 05       	cpc	r25, r1
    4940:	9c f0       	brlt	.+38     	; 0x4968 <sd_log_write+0x46>
				sd_buf_in_use = 2;
    4942:	82 e0       	ldi	r24, 0x02	; 2
    4944:	80 93 ff 01 	sts	0x01FF, r24
				sd_buf_write = 1;
    4948:	20 93 ca 03 	sts	0x03CA, r18
    494c:	0d c0       	rjmp	.+26     	; 0x4968 <sd_log_write+0x46>
			}
			break;
		case 2:	
			if (SD_BUF_SIZE < sd_buf2_head + len) {
    494e:	80 91 c9 03 	lds	r24, 0x03C9
    4952:	90 e0       	ldi	r25, 0x00	; 0
    4954:	86 0f       	add	r24, r22
    4956:	91 1d       	adc	r25, r1
    4958:	85 36       	cpi	r24, 0x65	; 101
    495a:	91 05       	cpc	r25, r1
    495c:	2c f0       	brlt	.+10     	; 0x4968 <sd_log_write+0x46>
				sd_buf_in_use = 1;
    495e:	81 e0       	ldi	r24, 0x01	; 1
    4960:	80 93 ff 01 	sts	0x01FF, r24
				sd_buf_write = 1;
    4964:	80 93 ca 03 	sts	0x03CA, r24
			break;
		default:
			break;
	}

	switch (sd_buf_in_use) {
    4968:	80 91 ff 01 	lds	r24, 0x01FF
    496c:	81 30       	cpi	r24, 0x01	; 1
    496e:	79 f0       	breq	.+30     	; 0x498e <sd_log_write+0x6c>
    4970:	82 30       	cpi	r24, 0x02	; 2
    4972:	f1 f4       	brne	.+60     	; 0x49b0 <sd_log_write+0x8e>
    4974:	1b c0       	rjmp	.+54     	; 0x49ac <sd_log_write+0x8a>
		case 1:
			while (len--) {
				sd_data_buf1[sd_buf1_head++] = *data++;
    4976:	80 91 c8 03 	lds	r24, 0x03C8
    497a:	a8 2f       	mov	r26, r24
    497c:	b0 e0       	ldi	r27, 0x00	; 0
    497e:	a9 55       	subi	r26, 0x59	; 89
    4980:	b5 4f       	sbci	r27, 0xF5	; 245
    4982:	91 91       	ld	r25, Z+
    4984:	9c 93       	st	X, r25
    4986:	8f 5f       	subi	r24, 0xFF	; 255
    4988:	80 93 c8 03 	sts	0x03C8, r24
    498c:	61 50       	subi	r22, 0x01	; 1
			break;
	}

	switch (sd_buf_in_use) {
		case 1:
			while (len--) {
    498e:	66 23       	and	r22, r22
    4990:	91 f7       	brne	.-28     	; 0x4976 <sd_log_write+0x54>
    4992:	0e c0       	rjmp	.+28     	; 0x49b0 <sd_log_write+0x8e>
				sd_data_buf1[sd_buf1_head++] = *data++;
			}
			break;
		case 2:
			while (len--) {
				sd_data_buf2[sd_buf2_head++] = *data++;
    4994:	80 91 c9 03 	lds	r24, 0x03C9
    4998:	a8 2f       	mov	r26, r24
    499a:	b0 e0       	ldi	r27, 0x00	; 0
    499c:	a5 5f       	subi	r26, 0xF5	; 245
    499e:	b4 4f       	sbci	r27, 0xF4	; 244
    49a0:	91 91       	ld	r25, Z+
    49a2:	9c 93       	st	X, r25
    49a4:	8f 5f       	subi	r24, 0xFF	; 255
    49a6:	80 93 c9 03 	sts	0x03C9, r24
    49aa:	61 50       	subi	r22, 0x01	; 1
			while (len--) {
				sd_data_buf1[sd_buf1_head++] = *data++;
			}
			break;
		case 2:
			while (len--) {
    49ac:	66 23       	and	r22, r22
    49ae:	91 f7       	brne	.-28     	; 0x4994 <sd_log_write+0x72>
			}
			break;
	}

	return 0;
}
    49b0:	80 e0       	ldi	r24, 0x00	; 0
    49b2:	08 95       	ret

000049b4 <sd_log_check>:

uint8_t sd_log_check(FIL *fp)
{
    49b4:	a1 e0       	ldi	r26, 0x01	; 1
    49b6:	b0 e0       	ldi	r27, 0x00	; 0
    49b8:	e0 ee       	ldi	r30, 0xE0	; 224
    49ba:	f4 e2       	ldi	r31, 0x24	; 36
    49bc:	0c 94 db 2d 	jmp	0x5bb6	; 0x5bb6 <__prologue_saves__+0x20>
	uint8_t bw;
	if (sd_buf_write == 1) {	/* One of the buffers is full */
    49c0:	20 91 ca 03 	lds	r18, 0x03CA
    49c4:	21 30       	cpi	r18, 0x01	; 1
    49c6:	21 f5       	brne	.+72     	; 0x4a10 <sd_log_check+0x5c>
		switch (sd_buf_in_use) {
    49c8:	20 91 ff 01 	lds	r18, 0x01FF
    49cc:	21 30       	cpi	r18, 0x01	; 1
    49ce:	19 f0       	breq	.+6      	; 0x49d6 <sd_log_check+0x22>
    49d0:	22 30       	cpi	r18, 0x02	; 2
    49d2:	f1 f4       	brne	.+60     	; 0x4a10 <sd_log_check+0x5c>
    49d4:	0d c0       	rjmp	.+26     	; 0x49f0 <sd_log_check+0x3c>
			case 1:
				/* Write sd_data_buf2 to sd */
				f_write( fp, &sd_data_buf2, sd_buf2_head, &bw);
    49d6:	40 91 c9 03 	lds	r20, 0x03C9
    49da:	6b e0       	ldi	r22, 0x0B	; 11
    49dc:	7b e0       	ldi	r23, 0x0B	; 11
    49de:	50 e0       	ldi	r21, 0x00	; 0
    49e0:	9e 01       	movw	r18, r28
    49e2:	2f 5f       	subi	r18, 0xFF	; 255
    49e4:	3f 4f       	sbci	r19, 0xFF	; 255
    49e6:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <f_write>
				sd_buf2_head = 0;
    49ea:	10 92 c9 03 	sts	0x03C9, r1
    49ee:	0c c0       	rjmp	.+24     	; 0x4a08 <sd_log_check+0x54>
				sd_buf_write = 0;
				return 1;
		case 2:
				/* Write sd_data_buf1 to sd */
				f_write( fp, &sd_data_buf1, sd_buf1_head, &bw);
    49f0:	40 91 c8 03 	lds	r20, 0x03C8
    49f4:	67 ea       	ldi	r22, 0xA7	; 167
    49f6:	7a e0       	ldi	r23, 0x0A	; 10
    49f8:	50 e0       	ldi	r21, 0x00	; 0
    49fa:	9e 01       	movw	r18, r28
    49fc:	2f 5f       	subi	r18, 0xFF	; 255
    49fe:	3f 4f       	sbci	r19, 0xFF	; 255
    4a00:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <f_write>
				sd_buf1_head = 0;
    4a04:	10 92 c8 03 	sts	0x03C8, r1
				sd_buf_write = 0;
    4a08:	10 92 ca 03 	sts	0x03CA, r1
				return 1;
    4a0c:	81 e0       	ldi	r24, 0x01	; 1
    4a0e:	01 c0       	rjmp	.+2      	; 0x4a12 <sd_log_check+0x5e>
			default:
				break;
		}
	}
	
	return 0;
    4a10:	80 e0       	ldi	r24, 0x00	; 0
}
    4a12:	21 96       	adiw	r28, 0x01	; 1
    4a14:	e2 e0       	ldi	r30, 0x02	; 2
    4a16:	0c 94 f7 2d 	jmp	0x5bee	; 0x5bee <__epilogue_restores__+0x20>

00004a1a <ecu_val_to_xbee>:
    48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
    73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,
    98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114};

void ecu_val_to_xbee(uint8_t i, uint8_t j)
{
    4a1a:	1f 93       	push	r17
    4a1c:	28 2f       	mov	r18, r24
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4a1e:	f8 94       	cli
	uint8_t k=0;
//	xprintf(PSTR("i%d,j%d \n"), i, j);
	/* Add value to xbee buffer */
    	ATOMIC_BLOCK(ATOMIC_FORCEON)
    	{
		QUEUE_PUT(xbee_q, ECUObjects[j].id);	/* Add id */
    4a20:	40 91 21 0a 	lds	r20, 0x0A21
    4a24:	50 91 22 0a 	lds	r21, 0x0A22
    4a28:	70 e0       	ldi	r23, 0x00	; 0
    4a2a:	da 01       	movw	r26, r20
    4a2c:	a1 5e       	subi	r26, 0xE1	; 225
    4a2e:	b5 4f       	sbci	r27, 0xF5	; 245
    4a30:	fb 01       	movw	r30, r22
    4a32:	ee 0f       	add	r30, r30
    4a34:	ff 1f       	adc	r31, r31
    4a36:	e6 0f       	add	r30, r22
    4a38:	f7 1f       	adc	r31, r23
    4a3a:	ed 58       	subi	r30, 0x8D	; 141
    4a3c:	fd 4f       	sbci	r31, 0xFD	; 253
    4a3e:	81 81       	ldd	r24, Z+1	; 0x01
    4a40:	17 96       	adiw	r26, 0x07	; 7
    4a42:	8c 93       	st	X, r24
    4a44:	ca 01       	movw	r24, r20
    4a46:	01 96       	adiw	r24, 0x01	; 1
    4a48:	60 91 23 0a 	lds	r22, 0x0A23
    4a4c:	70 91 24 0a 	lds	r23, 0x0A24
    4a50:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__divmodhi4>
    4a54:	90 93 22 0a 	sts	0x0A22, r25
    4a58:	80 93 21 0a 	sts	0x0A21, r24
    4a5c:	80 91 25 0a 	lds	r24, 0x0A25
    4a60:	8f 5f       	subi	r24, 0xFF	; 255
    4a62:	af e1       	ldi	r26, 0x1F	; 31
    4a64:	ba e0       	ldi	r27, 0x0A	; 10
    4a66:	16 96       	adiw	r26, 0x06	; 6
    4a68:	8c 93       	st	X, r24
    4a6a:	16 97       	sbiw	r26, 0x06	; 6
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    4a6c:	78 94       	sei
	}
	for (k=0;k<ECUObjects[j].length;k++) {	/* Add value */
    4a6e:	40 e0       	ldi	r20, 0x00	; 0
    4a70:	10 81       	ld	r17, Z
    		ATOMIC_BLOCK(ATOMIC_FORCEON)
    		{
			QUEUE_PUT(xbee_q, EcuData[i+k]);
    4a72:	30 e0       	ldi	r19, 0x00	; 0
	/* Add value to xbee buffer */
    	ATOMIC_BLOCK(ATOMIC_FORCEON)
    	{
		QUEUE_PUT(xbee_q, ECUObjects[j].id);	/* Add id */
	}
	for (k=0;k<ECUObjects[j].length;k++) {	/* Add value */
    4a74:	24 c0       	rjmp	.+72     	; 0x4abe <ecu_val_to_xbee+0xa4>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4a76:	f8 94       	cli
    		ATOMIC_BLOCK(ATOMIC_FORCEON)
    		{
			QUEUE_PUT(xbee_q, EcuData[i+k]);
    4a78:	80 91 21 0a 	lds	r24, 0x0A21
    4a7c:	90 91 22 0a 	lds	r25, 0x0A22
    4a80:	dc 01       	movw	r26, r24
    4a82:	a1 5e       	subi	r26, 0xE1	; 225
    4a84:	b5 4f       	sbci	r27, 0xF5	; 245
    4a86:	e4 2f       	mov	r30, r20
    4a88:	f0 e0       	ldi	r31, 0x00	; 0
    4a8a:	e0 50       	subi	r30, 0x00	; 0
    4a8c:	fe 4f       	sbci	r31, 0xFE	; 254
    4a8e:	e2 0f       	add	r30, r18
    4a90:	f3 1f       	adc	r31, r19
    4a92:	50 81       	ld	r21, Z
    4a94:	17 96       	adiw	r26, 0x07	; 7
    4a96:	5c 93       	st	X, r21
    4a98:	17 97       	sbiw	r26, 0x07	; 7
    4a9a:	01 96       	adiw	r24, 0x01	; 1
    4a9c:	60 91 23 0a 	lds	r22, 0x0A23
    4aa0:	70 91 24 0a 	lds	r23, 0x0A24
    4aa4:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__divmodhi4>
    4aa8:	90 93 22 0a 	sts	0x0A22, r25
    4aac:	80 93 21 0a 	sts	0x0A21, r24
    4ab0:	80 91 25 0a 	lds	r24, 0x0A25
    4ab4:	8f 5f       	subi	r24, 0xFF	; 255
    4ab6:	80 93 25 0a 	sts	0x0A25, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    4aba:	78 94       	sei
	/* Add value to xbee buffer */
    	ATOMIC_BLOCK(ATOMIC_FORCEON)
    	{
		QUEUE_PUT(xbee_q, ECUObjects[j].id);	/* Add id */
	}
	for (k=0;k<ECUObjects[j].length;k++) {	/* Add value */
    4abc:	4f 5f       	subi	r20, 0xFF	; 255
    4abe:	41 17       	cp	r20, r17
    4ac0:	d0 f2       	brcs	.-76     	; 0x4a76 <ecu_val_to_xbee+0x5c>
    		{
			QUEUE_PUT(xbee_q, EcuData[i+k]);
		}
	}
	/* Check if more than 20 elements in xbee buffer */
	if (QUEUE_GET_NUM_ELE(xbee_q) >= 40) {
    4ac2:	80 91 25 0a 	lds	r24, 0x0A25
    4ac6:	88 32       	cpi	r24, 0x28	; 40
    4ac8:	10 f0       	brcs	.+4      	; 0x4ace <ecu_val_to_xbee+0xb4>
		//xprintf(PSTR("More than 20 elements\n"));
		xbee_send_trigger();
    4aca:	0e 94 0e 24 	call	0x481c	; 0x481c <xbee_send_trigger>
	}
}
    4ace:	1f 91       	pop	r17
    4ad0:	08 95       	ret

00004ad2 <ecu_data_handler>:

void ecu_data_handler( void )
{
    4ad2:	a8 e0       	ldi	r26, 0x08	; 8
    4ad4:	b0 e0       	ldi	r27, 0x00	; 0
    4ad6:	ef e6       	ldi	r30, 0x6F	; 111
    4ad8:	f5 e2       	ldi	r31, 0x25	; 37
    4ada:	0c 94 cf 2d 	jmp	0x5b9e	; 0x5b9e <__prologue_saves__+0x8>
	uint8_t i=0;
	uint8_t	j=0;
    4ade:	aa 24       	eor	r10, r10
	}
}

void ecu_data_handler( void )
{
	uint8_t i=0;
    4ae0:	bb 24       	eor	r11, r11
				/* TODO
				 * Insert call to val_to_CAN() when the function is
				 * made
				 */
				data[0] = ECUObjects[j].id;
				for (k=0;k<ECUObjects[j].length;k++){
    4ae2:	62 e0       	ldi	r22, 0x02	; 2
    4ae4:	e6 2e       	mov	r14, r22
    4ae6:	f1 2c       	mov	r15, r1
    4ae8:	ec 0e       	add	r14, r28
    4aea:	fd 1e       	adc	r15, r29
					data[k+1]= EcuData[i+k];
				}
				can_send_non_blocking(rpm_msgid, &data[0], ECUObjects[j].length+1);
    4aec:	4e 01       	movw	r8, r28
    4aee:	08 94       	sec
    4af0:	81 1c       	adc	r8, r1
    4af2:	91 1c       	adc	r9, r1

	/* Loop over all values in EcuData */
	while(i<=114) {
		/* Check if anything to be done for value */

		if (valueObjects[ECUObjects[j].id].action & (TO_XBEE | TO_SD | TO_CAN) ) {
    4af4:	0a 2d       	mov	r16, r10
    4af6:	10 e0       	ldi	r17, 0x00	; 0
    4af8:	f8 01       	movw	r30, r16
    4afa:	ee 0f       	add	r30, r30
    4afc:	ff 1f       	adc	r31, r31
    4afe:	e0 0f       	add	r30, r16
    4b00:	f1 1f       	adc	r31, r17
    4b02:	ed 58       	subi	r30, 0x8D	; 141
    4b04:	fd 4f       	sbci	r31, 0xFD	; 253
    4b06:	61 80       	ldd	r6, Z+1	; 0x01
    4b08:	72 80       	ldd	r7, Z+2	; 0x02
    4b0a:	f3 01       	movw	r30, r6
    4b0c:	ee 0f       	add	r30, r30
    4b0e:	ff 1f       	adc	r31, r31
    4b10:	e6 50       	subi	r30, 0x06	; 6
    4b12:	fd 4f       	sbci	r31, 0xFD	; 253
    4b14:	c1 80       	ldd	r12, Z+1	; 0x01
    4b16:	dd 24       	eor	r13, r13
    4b18:	c6 01       	movw	r24, r12
    4b1a:	87 70       	andi	r24, 0x07	; 7
    4b1c:	90 70       	andi	r25, 0x00	; 0
    4b1e:	00 97       	sbiw	r24, 0x00	; 0
    4b20:	09 f4       	brne	.+2      	; 0x4b24 <ecu_data_handler+0x52>
    4b22:	44 c0       	rjmp	.+136    	; 0x4bac <ecu_data_handler+0xda>
			/* Value to xbee? */
			if (valueObjects[ECUObjects[j].id].action & TO_XBEE) {
    4b24:	c2 fe       	sbrs	r12, 2
    4b26:	04 c0       	rjmp	.+8      	; 0x4b30 <ecu_data_handler+0x5e>
			    	//_delay_us(10);
				ecu_val_to_xbee(i,j);
    4b28:	8b 2d       	mov	r24, r11
    4b2a:	6a 2d       	mov	r22, r10
    4b2c:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <ecu_val_to_xbee>
			}


			/* Value to SD? */
			if (valueObjects[ECUObjects[j].id].action & TO_SD) {
    4b30:	c1 fe       	sbrs	r12, 1
    4b32:	1e c0       	rjmp	.+60     	; 0x4b70 <ecu_data_handler+0x9e>
				/* TODO
				 * Insert call to val_to_sd() when the function is
				 * made
				 */
				data[0] = ECUObjects[j].id;
    4b34:	69 82       	std	Y+1, r6	; 0x01
				for (k=0;k<ECUObjects[j].length;k++){
					data[k+1]= EcuData[i+k];
    4b36:	ab 2d       	mov	r26, r11
    4b38:	b0 e0       	ldi	r27, 0x00	; 0
		//xprintf(PSTR("More than 20 elements\n"));
		xbee_send_trigger();
	}
}

void ecu_data_handler( void )
    4b3a:	a0 50       	subi	r26, 0x00	; 0
    4b3c:	be 4f       	sbci	r27, 0xFE	; 254
			if (valueObjects[ECUObjects[j].id].action & TO_SD) {
				/* TODO
				 * Insert call to val_to_sd() when the function is
				 * made
				 */
				data[0] = ECUObjects[j].id;
    4b3e:	c7 01       	movw	r24, r14
				for (k=0;k<ECUObjects[j].length;k++){
    4b40:	f8 01       	movw	r30, r16
    4b42:	ee 0f       	add	r30, r30
    4b44:	ff 1f       	adc	r31, r31
    4b46:	e0 0f       	add	r30, r16
    4b48:	f1 1f       	adc	r31, r17
    4b4a:	ed 58       	subi	r30, 0x8D	; 141
    4b4c:	fd 4f       	sbci	r31, 0xFD	; 253
		//xprintf(PSTR("More than 20 elements\n"));
		xbee_send_trigger();
	}
}

void ecu_data_handler( void )
    4b4e:	20 81       	ld	r18, Z
    4b50:	a7 01       	movw	r20, r14
    4b52:	42 0f       	add	r20, r18
    4b54:	51 1d       	adc	r21, r1
    4b56:	9a 01       	movw	r18, r20
				/* TODO
				 * Insert call to val_to_sd() when the function is
				 * made
				 */
				data[0] = ECUObjects[j].id;
				for (k=0;k<ECUObjects[j].length;k++){
    4b58:	04 c0       	rjmp	.+8      	; 0x4b62 <ecu_data_handler+0x90>
					data[k+1]= EcuData[i+k];
    4b5a:	4d 91       	ld	r20, X+
    4b5c:	fc 01       	movw	r30, r24
    4b5e:	41 93       	st	Z+, r20
    4b60:	cf 01       	movw	r24, r30
				/* TODO
				 * Insert call to val_to_sd() when the function is
				 * made
				 */
				data[0] = ECUObjects[j].id;
				for (k=0;k<ECUObjects[j].length;k++){
    4b62:	82 17       	cp	r24, r18
    4b64:	93 07       	cpc	r25, r19
    4b66:	c9 f7       	brne	.-14     	; 0x4b5a <ecu_data_handler+0x88>
					data[k+1]= EcuData[i+k];
				}
				sd_log_write(&data[0], 3);
    4b68:	c4 01       	movw	r24, r8
    4b6a:	63 e0       	ldi	r22, 0x03	; 3
    4b6c:	0e 94 91 24 	call	0x4922	; 0x4922 <sd_log_write>
			}
	
			/* Value to CAN? */
			if (valueObjects[ECUObjects[j].id].action & TO_CAN) {
    4b70:	c0 fe       	sbrs	r12, 0
    4b72:	1c c0       	rjmp	.+56     	; 0x4bac <ecu_data_handler+0xda>
				/* TODO
				 * Insert call to val_to_CAN() when the function is
				 * made
				 */
				data[0] = ECUObjects[j].id;
    4b74:	69 82       	std	Y+1, r6	; 0x01
				for (k=0;k<ECUObjects[j].length;k++){
    4b76:	f8 01       	movw	r30, r16
    4b78:	ee 0f       	add	r30, r30
    4b7a:	ff 1f       	adc	r31, r31
    4b7c:	e0 0f       	add	r30, r16
    4b7e:	f1 1f       	adc	r31, r17
    4b80:	ed 58       	subi	r30, 0x8D	; 141
    4b82:	fd 4f       	sbci	r31, 0xFD	; 253
    4b84:	40 81       	ld	r20, Z
					data[k+1]= EcuData[i+k];
    4b86:	eb 2d       	mov	r30, r11
    4b88:	f0 e0       	ldi	r31, 0x00	; 0
		//xprintf(PSTR("More than 20 elements\n"));
		xbee_send_trigger();
	}
}

void ecu_data_handler( void )
    4b8a:	e0 50       	subi	r30, 0x00	; 0
    4b8c:	fe 4f       	sbci	r31, 0xFE	; 254
				/* TODO
				 * Insert call to val_to_CAN() when the function is
				 * made
				 */
				data[0] = ECUObjects[j].id;
				for (k=0;k<ECUObjects[j].length;k++){
    4b8e:	d7 01       	movw	r26, r14
		//xprintf(PSTR("More than 20 elements\n"));
		xbee_send_trigger();
	}
}

void ecu_data_handler( void )
    4b90:	c7 01       	movw	r24, r14
    4b92:	84 0f       	add	r24, r20
    4b94:	91 1d       	adc	r25, r1
				/* TODO
				 * Insert call to val_to_CAN() when the function is
				 * made
				 */
				data[0] = ECUObjects[j].id;
				for (k=0;k<ECUObjects[j].length;k++){
    4b96:	02 c0       	rjmp	.+4      	; 0x4b9c <ecu_data_handler+0xca>
					data[k+1]= EcuData[i+k];
    4b98:	21 91       	ld	r18, Z+
    4b9a:	2d 93       	st	X+, r18
				/* TODO
				 * Insert call to val_to_CAN() when the function is
				 * made
				 */
				data[0] = ECUObjects[j].id;
				for (k=0;k<ECUObjects[j].length;k++){
    4b9c:	a8 17       	cp	r26, r24
    4b9e:	b9 07       	cpc	r27, r25
    4ba0:	d9 f7       	brne	.-10     	; 0x4b98 <ecu_data_handler+0xc6>
					data[k+1]= EcuData[i+k];
				}
				can_send_non_blocking(rpm_msgid, &data[0], ECUObjects[j].length+1);
    4ba2:	4f 5f       	subi	r20, 0xFF	; 255
    4ba4:	85 e8       	ldi	r24, 0x85	; 133
    4ba6:	b4 01       	movw	r22, r8
    4ba8:	0e 94 19 27 	call	0x4e32	; 0x4e32 <can_send_non_blocking>
			}
		}
		
		/* Find index for next value */
		i += ECUObjects[j].length;
    4bac:	f8 01       	movw	r30, r16
    4bae:	ee 0f       	add	r30, r30
    4bb0:	ff 1f       	adc	r31, r31
    4bb2:	e0 0f       	add	r30, r16
    4bb4:	f1 1f       	adc	r31, r17
    4bb6:	ed 58       	subi	r30, 0x8D	; 141
    4bb8:	fd 4f       	sbci	r31, 0xFD	; 253
    4bba:	80 81       	ld	r24, Z
    4bbc:	b8 0e       	add	r11, r24
	uint8_t k;
	int hej = 40;
	uint8_t data[8];

	/* Loop over all values in EcuData */
	while(i<=114) {
    4bbe:	fb 2d       	mov	r31, r11
    4bc0:	f3 37       	cpi	r31, 0x73	; 115
    4bc2:	10 f4       	brcc	.+4      	; 0x4bc8 <ecu_data_handler+0xf6>
			}
		}
		
		/* Find index for next value */
		i += ECUObjects[j].length;
		j++;
    4bc4:	a3 94       	inc	r10
    4bc6:	96 cf       	rjmp	.-212    	; 0x4af4 <ecu_data_handler+0x22>
	}
}
    4bc8:	28 96       	adiw	r28, 0x08	; 8
    4bca:	ee e0       	ldi	r30, 0x0E	; 14
    4bcc:	0c 94 eb 2d 	jmp	0x5bd6	; 0x5bd6 <__epilogue_restores__+0x8>

00004bd0 <__vector_18>:

st_cmd_t tx_remote_msg;

/* Interrupt routine to take care of can interrupts */
ISR(CANIT_vect)
{
    4bd0:	1f 92       	push	r1
    4bd2:	0f 92       	push	r0
    4bd4:	0f b6       	in	r0, 0x3f	; 63
    4bd6:	0f 92       	push	r0
    4bd8:	0b b6       	in	r0, 0x3b	; 59
    4bda:	0f 92       	push	r0
    4bdc:	11 24       	eor	r1, r1
    4bde:	2f 92       	push	r2
    4be0:	3f 92       	push	r3
    4be2:	4f 92       	push	r4
    4be4:	5f 92       	push	r5
    4be6:	6f 92       	push	r6
    4be8:	7f 92       	push	r7
    4bea:	8f 92       	push	r8
    4bec:	9f 92       	push	r9
    4bee:	af 92       	push	r10
    4bf0:	bf 92       	push	r11
    4bf2:	cf 92       	push	r12
    4bf4:	df 92       	push	r13
    4bf6:	ef 92       	push	r14
    4bf8:	ff 92       	push	r15
    4bfa:	0f 93       	push	r16
    4bfc:	1f 93       	push	r17
    4bfe:	2f 93       	push	r18
    4c00:	3f 93       	push	r19
    4c02:	4f 93       	push	r20
    4c04:	5f 93       	push	r21
    4c06:	6f 93       	push	r22
    4c08:	7f 93       	push	r23
    4c0a:	8f 93       	push	r24
    4c0c:	9f 93       	push	r25
    4c0e:	af 93       	push	r26
    4c10:	bf 93       	push	r27
    4c12:	ef 93       	push	r30
    4c14:	ff 93       	push	r31
    4c16:	df 93       	push	r29
    4c18:	cf 93       	push	r28
    4c1a:	cd b7       	in	r28, 0x3d	; 61
    4c1c:	de b7       	in	r29, 0x3e	; 62
    4c1e:	6f 97       	sbiw	r28, 0x1f	; 31
    4c20:	de bf       	out	0x3e, r29	; 62
    4c22:	cd bf       	out	0x3d, r28	; 61
	uint8_t DataBuf[8];

	uint8_t rpm_response_buffer[8];
	st_cmd_t rpm_msg;

	rpm_msg.pt_data = rpm_response_buffer;
    4c24:	ce 01       	movw	r24, r28
    4c26:	09 96       	adiw	r24, 0x09	; 9
    4c28:	9a 8f       	std	Y+26, r25	; 0x1a
    4c2a:	89 8f       	std	Y+25, r24	; 0x19
	rpm_msg.status = 0;
    4c2c:	1b 8e       	std	Y+27, r1	; 0x1b
	 * TXOK just need to call Can_mob_abort() and Can_clear_status_mob()
	 * Proper action for all other types is TODO
	*/

	/* Test mob's for pending interrupt */
	tmp = CANSIT2+(CANSIT1<<8);
    4c2e:	20 91 e0 00 	lds	r18, 0x00E0
    4c32:	30 91 e1 00 	lds	r19, 0x00E1
    4c36:	93 2f       	mov	r25, r19
    4c38:	80 e0       	ldi	r24, 0x00	; 0
    4c3a:	3c 01       	movw	r6, r24
    4c3c:	62 0e       	add	r6, r18
    4c3e:	71 1c       	adc	r7, r1


	mob_back = CANPAGE;	// Save CANPAGE state
    4c40:	80 91 ed 00 	lds	r24, 0x00ED
    4c44:	8f 8f       	std	Y+31, r24	; 0x1f
    4c46:	00 e0       	ldi	r16, 0x00	; 0
    4c48:	10 e0       	ldi	r17, 0x00	; 0

/* Interrupt routine to take care of can interrupts */
ISR(CANIT_vect)
{
	uint8_t i,interrupt, mob_back, j;
	uint16_t tmp,tmp2,mask=1;
    4c4a:	61 e0       	ldi	r22, 0x01	; 1
    4c4c:	e6 2e       	mov	r14, r22
    4c4e:	f1 2c       	mov	r15, r1
			Can_set_mob(i); /* Switch to mob */
			interrupt = (CANSTMOB & INT_MOB_MSK);
			switch (interrupt){
				case MOB_RX_COMPLETED:
					/* Can specific code */
					can_get_data(&DataBuf[0]);	// Copy data to canDataTest
    4c50:	6e 01       	movw	r12, r28
    4c52:	08 94       	sec
    4c54:	c1 1c       	adc	r12, r1
    4c56:	d1 1c       	adc	r13, r1

uint8_t can_update_rx_msg(st_cmd_t* msg, uint8_t msg_id, uint8_t dlc)
{
        uint8_t i;
        
        msg->id.std = msg_id;
    4c58:	55 e8       	ldi	r21, 0x85	; 133
    4c5a:	45 2e       	mov	r4, r21
    4c5c:	51 2c       	mov	r5, r1
        msg->ctrl.ide = 0;
        msg->ctrl.rtr = 0;
        msg->dlc = dlc;
    4c5e:	48 e0       	ldi	r20, 0x08	; 8
    4c60:	a4 2e       	mov	r10, r20
        msg->cmd = CMD_RX_DATA_MASKED;
    4c62:	38 e0       	ldi	r19, 0x08	; 8
    4c64:	23 2e       	mov	r2, r19
    4c66:	31 2c       	mov	r3, r1
					xbee_send_trigger();				/* TODO Der skal nok være den i main */
					break;
				case MOB_TX_COMPLETED:
					Can_mob_abort();        // Freed the MOB
					Can_clear_status_mob(); // and reset MOb status	
					Can_unset_mob_int(i);	// Unset interrupt
    4c68:	21 e0       	ldi	r18, 0x01	; 1
    4c6a:	82 2e       	mov	r8, r18
    4c6c:	91 2c       	mov	r9, r1
	tmp = CANSIT2+(CANSIT1<<8);


	mob_back = CANPAGE;	// Save CANPAGE state
	for(i=0;i<=14;i++){
		if(tmp & mask){	/* True if mob have pending interrupt */
    4c6e:	c7 01       	movw	r24, r14
    4c70:	86 21       	and	r24, r6
    4c72:	97 21       	and	r25, r7
    4c74:	00 97       	sbiw	r24, 0x00	; 0
    4c76:	09 f4       	brne	.+2      	; 0x4c7a <__vector_18+0xaa>
    4c78:	a5 c0       	rjmp	.+330    	; 0x4dc4 <__vector_18+0x1f4>
			Can_set_mob(i); /* Switch to mob */
    4c7a:	80 2f       	mov	r24, r16
    4c7c:	82 95       	swap	r24
    4c7e:	80 7f       	andi	r24, 0xF0	; 240
    4c80:	80 93 ed 00 	sts	0x00ED, r24
			interrupt = (CANSTMOB & INT_MOB_MSK);
    4c84:	80 91 ee 00 	lds	r24, 0x00EE
    4c88:	8f 77       	andi	r24, 0x7F	; 127
			switch (interrupt){
    4c8a:	88 30       	cpi	r24, 0x08	; 8
    4c8c:	09 f4       	brne	.+2      	; 0x4c90 <__vector_18+0xc0>
    4c8e:	9a c0       	rjmp	.+308    	; 0x4dc4 <__vector_18+0x1f4>
    4c90:	89 30       	cpi	r24, 0x09	; 9
    4c92:	50 f4       	brcc	.+20     	; 0x4ca8 <__vector_18+0xd8>
    4c94:	81 30       	cpi	r24, 0x01	; 1
    4c96:	08 f4       	brcc	.+2      	; 0x4c9a <__vector_18+0xca>
    4c98:	8e c0       	rjmp	.+284    	; 0x4db6 <__vector_18+0x1e6>
    4c9a:	83 30       	cpi	r24, 0x03	; 3
    4c9c:	08 f4       	brcc	.+2      	; 0x4ca0 <__vector_18+0xd0>
    4c9e:	92 c0       	rjmp	.+292    	; 0x4dc4 <__vector_18+0x1f4>
    4ca0:	84 30       	cpi	r24, 0x04	; 4
    4ca2:	09 f0       	breq	.+2      	; 0x4ca6 <__vector_18+0xd6>
    4ca4:	88 c0       	rjmp	.+272    	; 0x4db6 <__vector_18+0x1e6>
    4ca6:	8e c0       	rjmp	.+284    	; 0x4dc4 <__vector_18+0x1f4>
    4ca8:	80 32       	cpi	r24, 0x20	; 32
    4caa:	39 f0       	breq	.+14     	; 0x4cba <__vector_18+0xea>
    4cac:	80 34       	cpi	r24, 0x40	; 64
    4cae:	09 f4       	brne	.+2      	; 0x4cb2 <__vector_18+0xe2>
    4cb0:	64 c0       	rjmp	.+200    	; 0x4d7a <__vector_18+0x1aa>
    4cb2:	80 31       	cpi	r24, 0x10	; 16
    4cb4:	09 f0       	breq	.+2      	; 0x4cb8 <__vector_18+0xe8>
    4cb6:	7f c0       	rjmp	.+254    	; 0x4db6 <__vector_18+0x1e6>
    4cb8:	85 c0       	rjmp	.+266    	; 0x4dc4 <__vector_18+0x1f4>
				case MOB_RX_COMPLETED:
					/* Can specific code */
					can_get_data(&DataBuf[0]);	// Copy data to canDataTest
    4cba:	c6 01       	movw	r24, r12
    4cbc:	0e 94 80 1a 	call	0x3500	; 0x3500 <can_get_data>
					Can_mob_abort();        // Freed the MOB
    4cc0:	80 91 ef 00 	lds	r24, 0x00EF
    4cc4:	8f 73       	andi	r24, 0x3F	; 63
    4cc6:	80 93 ef 00 	sts	0x00EF, r24
					Can_clear_status_mob(); // and reset MOb status
    4cca:	10 92 ee 00 	sts	0x00EE, r1
					rpm_msg.status = 0;
    4cce:	1b 8e       	std	Y+27, r1	; 0x1b

uint8_t can_update_rx_msg(st_cmd_t* msg, uint8_t msg_id, uint8_t dlc)
{
        uint8_t i;
        
        msg->id.std = msg_id;
    4cd0:	5d 8a       	std	Y+21, r5	; 0x15
    4cd2:	4c 8a       	std	Y+20, r4	; 0x14
        msg->ctrl.ide = 0;
    4cd4:	1d 8e       	std	Y+29, r1	; 0x1d
        msg->ctrl.rtr = 0;
    4cd6:	1c 8e       	std	Y+28, r1	; 0x1c
        msg->dlc = dlc;
    4cd8:	a8 8e       	std	Y+24, r10	; 0x18
        msg->cmd = CMD_RX_DATA_MASKED;
    4cda:	3b 8a       	std	Y+19, r3	; 0x13
    4cdc:	2a 8a       	std	Y+18, r2	; 0x12

        while(can_cmd(msg) != CAN_CMD_ACCEPTED);
    4cde:	ce 01       	movw	r24, r28
    4ce0:	41 96       	adiw	r24, 0x11	; 17
    4ce2:	0e 94 0a 1c 	call	0x3814	; 0x3814 <can_cmd>
    4ce6:	88 23       	and	r24, r24
    4ce8:	d1 f7       	brne	.-12     	; 0x4cde <__vector_18+0x10e>
					Can_clear_status_mob(); // and reset MOb status
					rpm_msg.status = 0;
					can_update_rx_msg(&rpm_msg, rpm_msgid, 8);	/* TODO Lav det her på en anden måde */

					/* Take care of the data */
					if (valueObjects[DataBuf[0]].action & TO_XBEE) {
    4cea:	29 81       	ldd	r18, Y+1	; 0x01
    4cec:	e2 2f       	mov	r30, r18
    4cee:	f0 e0       	ldi	r31, 0x00	; 0
    4cf0:	ee 0f       	add	r30, r30
    4cf2:	ff 1f       	adc	r31, r31
    4cf4:	ee 5a       	subi	r30, 0xAE	; 174
    4cf6:	fc 4f       	sbci	r31, 0xFC	; 252
    4cf8:	81 81       	ldd	r24, Z+1	; 0x01
    4cfa:	82 ff       	sbrs	r24, 2
    4cfc:	3b c0       	rjmp	.+118    	; 0x4d74 <__vector_18+0x1a4>
						QUEUE_PUT(xbee_q, DataBuf[0]);	/* Add id */
    4cfe:	80 91 21 0a 	lds	r24, 0x0A21
    4d02:	90 91 22 0a 	lds	r25, 0x0A22
    4d06:	dc 01       	movw	r26, r24
    4d08:	a1 5e       	subi	r26, 0xE1	; 225
    4d0a:	b5 4f       	sbci	r27, 0xF5	; 245
    4d0c:	17 96       	adiw	r26, 0x07	; 7
    4d0e:	2c 93       	st	X, r18
    4d10:	17 97       	sbiw	r26, 0x07	; 7
    4d12:	20 91 23 0a 	lds	r18, 0x0A23
    4d16:	30 91 24 0a 	lds	r19, 0x0A24
    4d1a:	01 96       	adiw	r24, 0x01	; 1
    4d1c:	b9 01       	movw	r22, r18
    4d1e:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__divmodhi4>
    4d22:	80 93 21 0a 	sts	0x0A21, r24
    4d26:	90 93 22 0a 	sts	0x0A22, r25
    4d2a:	40 91 25 0a 	lds	r20, 0x0A25
    4d2e:	4f 5f       	subi	r20, 0xFF	; 255
    4d30:	40 93 25 0a 	sts	0x0A25, r20
						for (j=1;j<=valueObjects[DataBuf[0]].length/8;j++) {
    4d34:	b0 80       	ld	r11, Z
    4d36:	b6 94       	lsr	r11
    4d38:	b6 94       	lsr	r11
    4d3a:	b6 94       	lsr	r11
    4d3c:	41 e0       	ldi	r20, 0x01	; 1
    4d3e:	14 c0       	rjmp	.+40     	; 0x4d68 <__vector_18+0x198>
							QUEUE_PUT(xbee_q, DataBuf[j]);	
    4d40:	dc 01       	movw	r26, r24
    4d42:	a1 5e       	subi	r26, 0xE1	; 225
    4d44:	b5 4f       	sbci	r27, 0xF5	; 245
    4d46:	f6 01       	movw	r30, r12
    4d48:	e4 0f       	add	r30, r20
    4d4a:	f1 1d       	adc	r31, r1
    4d4c:	50 81       	ld	r21, Z
    4d4e:	17 96       	adiw	r26, 0x07	; 7
    4d50:	5c 93       	st	X, r21
    4d52:	17 97       	sbiw	r26, 0x07	; 7
    4d54:	01 96       	adiw	r24, 0x01	; 1
    4d56:	b9 01       	movw	r22, r18
    4d58:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__divmodhi4>
    4d5c:	50 91 25 0a 	lds	r21, 0x0A25
    4d60:	5f 5f       	subi	r21, 0xFF	; 255
    4d62:	50 93 25 0a 	sts	0x0A25, r21
					can_update_rx_msg(&rpm_msg, rpm_msgid, 8);	/* TODO Lav det her på en anden måde */

					/* Take care of the data */
					if (valueObjects[DataBuf[0]].action & TO_XBEE) {
						QUEUE_PUT(xbee_q, DataBuf[0]);	/* Add id */
						for (j=1;j<=valueObjects[DataBuf[0]].length/8;j++) {
    4d66:	4f 5f       	subi	r20, 0xFF	; 255
    4d68:	b4 16       	cp	r11, r20
    4d6a:	50 f7       	brcc	.-44     	; 0x4d40 <__vector_18+0x170>
    4d6c:	90 93 22 0a 	sts	0x0A22, r25
    4d70:	80 93 21 0a 	sts	0x0A21, r24
							QUEUE_PUT(xbee_q, DataBuf[j]);	
						}
					}
					xbee_send_trigger();				/* TODO Der skal nok være den i main */
    4d74:	0e 94 0e 24 	call	0x481c	; 0x481c <xbee_send_trigger>
					break;
    4d78:	25 c0       	rjmp	.+74     	; 0x4dc4 <__vector_18+0x1f4>
				case MOB_TX_COMPLETED:
					Can_mob_abort();        // Freed the MOB
    4d7a:	80 91 ef 00 	lds	r24, 0x00EF
    4d7e:	8f 73       	andi	r24, 0x3F	; 63
    4d80:	80 93 ef 00 	sts	0x00EF, r24
					Can_clear_status_mob(); // and reset MOb status	
    4d84:	10 92 ee 00 	sts	0x00EE, r1
					Can_unset_mob_int(i);	// Unset interrupt
    4d88:	30 91 de 00 	lds	r19, 0x00DE
    4d8c:	c4 01       	movw	r24, r8
    4d8e:	00 2e       	mov	r0, r16
    4d90:	02 c0       	rjmp	.+4      	; 0x4d96 <__vector_18+0x1c6>
    4d92:	88 0f       	add	r24, r24
    4d94:	99 1f       	adc	r25, r25
    4d96:	0a 94       	dec	r0
    4d98:	e2 f7       	brpl	.-8      	; 0x4d92 <__vector_18+0x1c2>
    4d9a:	28 2f       	mov	r18, r24
    4d9c:	20 95       	com	r18
    4d9e:	23 23       	and	r18, r19
    4da0:	20 93 de 00 	sts	0x00DE, r18
    4da4:	20 91 df 00 	lds	r18, 0x00DF
    4da8:	89 2f       	mov	r24, r25
    4daa:	8f 77       	andi	r24, 0x7F	; 127
    4dac:	80 95       	com	r24
    4dae:	82 23       	and	r24, r18
    4db0:	80 93 df 00 	sts	0x00DF, r24
					break;				
    4db4:	07 c0       	rjmp	.+14     	; 0x4dc4 <__vector_18+0x1f4>
					break;
				case MOB_BIT_ERROR:
					/* TODO */
					break;
				default:
					Can_mob_abort();        // Freed the MOB
    4db6:	80 91 ef 00 	lds	r24, 0x00EF
    4dba:	8f 73       	andi	r24, 0x3F	; 63
    4dbc:	80 93 ef 00 	sts	0x00EF, r24
					Can_clear_status_mob(); // and reset MOb status
    4dc0:	10 92 ee 00 	sts	0x00EE, r1
					break;
    4dc4:	0f 5f       	subi	r16, 0xFF	; 255
    4dc6:	1f 4f       	sbci	r17, 0xFF	; 255
	/* Test mob's for pending interrupt */
	tmp = CANSIT2+(CANSIT1<<8);


	mob_back = CANPAGE;	// Save CANPAGE state
	for(i=0;i<=14;i++){
    4dc8:	0f 30       	cpi	r16, 0x0F	; 15
    4dca:	11 05       	cpc	r17, r1
    4dcc:	19 f0       	breq	.+6      	; 0x4dd4 <__vector_18+0x204>
					Can_mob_abort();        // Freed the MOB
					Can_clear_status_mob(); // and reset MOb status
					break;
			}
		}
		mask = mask<<1;
    4dce:	ee 0c       	add	r14, r14
    4dd0:	ff 1c       	adc	r15, r15
    4dd2:	4d cf       	rjmp	.-358    	; 0x4c6e <__vector_18+0x9e>
	}
	CANPAGE |= mob_back & 0xf0;	// Restore CANPAGE state
    4dd4:	90 91 ed 00 	lds	r25, 0x00ED
    4dd8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4dda:	80 7f       	andi	r24, 0xF0	; 240
    4ddc:	89 2b       	or	r24, r25
    4dde:	80 93 ed 00 	sts	0x00ED, r24
}
    4de2:	6f 96       	adiw	r28, 0x1f	; 31
    4de4:	de bf       	out	0x3e, r29	; 62
    4de6:	cd bf       	out	0x3d, r28	; 61
    4de8:	cf 91       	pop	r28
    4dea:	df 91       	pop	r29
    4dec:	ff 91       	pop	r31
    4dee:	ef 91       	pop	r30
    4df0:	bf 91       	pop	r27
    4df2:	af 91       	pop	r26
    4df4:	9f 91       	pop	r25
    4df6:	8f 91       	pop	r24
    4df8:	7f 91       	pop	r23
    4dfa:	6f 91       	pop	r22
    4dfc:	5f 91       	pop	r21
    4dfe:	4f 91       	pop	r20
    4e00:	3f 91       	pop	r19
    4e02:	2f 91       	pop	r18
    4e04:	1f 91       	pop	r17
    4e06:	0f 91       	pop	r16
    4e08:	ff 90       	pop	r15
    4e0a:	ef 90       	pop	r14
    4e0c:	df 90       	pop	r13
    4e0e:	cf 90       	pop	r12
    4e10:	bf 90       	pop	r11
    4e12:	af 90       	pop	r10
    4e14:	9f 90       	pop	r9
    4e16:	8f 90       	pop	r8
    4e18:	7f 90       	pop	r7
    4e1a:	6f 90       	pop	r6
    4e1c:	5f 90       	pop	r5
    4e1e:	4f 90       	pop	r4
    4e20:	3f 90       	pop	r3
    4e22:	2f 90       	pop	r2
    4e24:	0f 90       	pop	r0
    4e26:	0b be       	out	0x3b, r0	; 59
    4e28:	0f 90       	pop	r0
    4e2a:	0f be       	out	0x3f, r0	; 63
    4e2c:	0f 90       	pop	r0
    4e2e:	1f 90       	pop	r1
    4e30:	18 95       	reti

00004e32 <can_send_non_blocking>:
 * 0 = Besked ikke kommet i udbakke
 * 1 = Besked kommet i udbakke
*/
uint8_t can_send_non_blocking(uint8_t msg_id, void* buf, uint8_t dlc)
{
	tx_remote_msg.pt_data = buf; 
    4e32:	70 93 78 0b 	sts	0x0B78, r23
    4e36:	60 93 77 0b 	sts	0x0B77, r22
	tx_remote_msg.id.std = msg_id;
    4e3a:	e2 e7       	ldi	r30, 0x72	; 114
    4e3c:	fb e0       	ldi	r31, 0x0B	; 11
    4e3e:	80 93 72 0b 	sts	0x0B72, r24
    4e42:	11 82       	std	Z+1, r1	; 0x01
	tx_remote_msg.ctrl.ide = 0;
    4e44:	10 92 7b 0b 	sts	0x0B7B, r1
	tx_remote_msg.ctrl.rtr = 1;
    4e48:	81 e0       	ldi	r24, 0x01	; 1
    4e4a:	80 93 7a 0b 	sts	0x0B7A, r24
	tx_remote_msg.dlc = dlc;
    4e4e:	40 93 76 0b 	sts	0x0B76, r20
	tx_remote_msg.cmd = CMD_TX_DATA;
    4e52:	82 e0       	ldi	r24, 0x02	; 2
    4e54:	90 e0       	ldi	r25, 0x00	; 0
    4e56:	90 93 71 0b 	sts	0x0B71, r25
    4e5a:	80 93 70 0b 	sts	0x0B70, r24
	tx_remote_msg.blocking = 0;	/* For non blocking */
    4e5e:	10 92 7c 0b 	sts	0x0B7C, r1

	/* can_cmd function extended with a feature to enable interrupt for
	 * the message mob picked for the message
	*/
	if (can_cmd(&tx_remote_msg) != CAN_CMD_ACCEPTED){
    4e62:	cf 01       	movw	r24, r30
    4e64:	03 97       	sbiw	r24, 0x03	; 3
    4e66:	0e 94 0a 1c 	call	0x3814	; 0x3814 <can_cmd>
		return 0;	// No free mob could not put message in mail box
    4e6a:	91 e0       	ldi	r25, 0x01	; 1
    4e6c:	81 11       	cpse	r24, r1
    4e6e:	90 e0       	ldi	r25, 0x00	; 0
	}else{
		return 1;
	}
}
    4e70:	89 2f       	mov	r24, r25
    4e72:	08 95       	ret

00004e74 <can_update_rx_msg>:

uint8_t can_update_rx_msg(st_cmd_t* msg, uint8_t msg_id, uint8_t dlc)
{
    4e74:	cf 93       	push	r28
    4e76:	df 93       	push	r29
    4e78:	ec 01       	movw	r28, r24
        uint8_t i;
        
        msg->id.std = msg_id;
    4e7a:	6b 83       	std	Y+3, r22	; 0x03
    4e7c:	1c 82       	std	Y+4, r1	; 0x04
        msg->ctrl.ide = 0;
    4e7e:	1c 86       	std	Y+12, r1	; 0x0c
        msg->ctrl.rtr = 0;
    4e80:	1b 86       	std	Y+11, r1	; 0x0b
        msg->dlc = dlc;
    4e82:	4f 83       	std	Y+7, r20	; 0x07
        msg->cmd = CMD_RX_DATA_MASKED;
    4e84:	88 e0       	ldi	r24, 0x08	; 8
    4e86:	90 e0       	ldi	r25, 0x00	; 0
    4e88:	9a 83       	std	Y+2, r25	; 0x02
    4e8a:	89 83       	std	Y+1, r24	; 0x01

        while(can_cmd(msg) != CAN_CMD_ACCEPTED);
    4e8c:	ce 01       	movw	r24, r28
    4e8e:	0e 94 0a 1c 	call	0x3814	; 0x3814 <can_cmd>
    4e92:	88 23       	and	r24, r24
    4e94:	d9 f7       	brne	.-10     	; 0x4e8c <can_update_rx_msg+0x18>
}
    4e96:	df 91       	pop	r29
    4e98:	cf 91       	pop	r28
    4e9a:	08 95       	ret

00004e9c <can_config_rx_mailbox>:

uint8_t can_config_rx_mailbox(st_cmd_t* msg, uint8_t count)
{
    4e9c:	ef 92       	push	r14
    4e9e:	ff 92       	push	r15
    4ea0:	1f 93       	push	r17
    4ea2:	df 93       	push	r29
    4ea4:	cf 93       	push	r28
    4ea6:	0f 92       	push	r0
    4ea8:	cd b7       	in	r28, 0x3d	; 61
    4eaa:	de b7       	in	r29, 0x3e	; 62
    4eac:	7c 01       	movw	r14, r24
	uint8_t i;

	msg->ctrl.ide = 0;
    4eae:	fc 01       	movw	r30, r24
    4eb0:	14 86       	std	Z+12, r1	; 0x0c
	msg->ctrl.rtr = 0;
    4eb2:	13 86       	std	Z+11, r1	; 0x0b
	msg->cmd = CMD_RX_DATA_MASKED;
    4eb4:	88 e0       	ldi	r24, 0x08	; 8
    4eb6:	90 e0       	ldi	r25, 0x00	; 0
    4eb8:	92 83       	std	Z+2, r25	; 0x02
    4eba:	81 83       	std	Z+1, r24	; 0x01
	
	for (i=0;i<count;i++) {
    4ebc:	10 e0       	ldi	r17, 0x00	; 0
    4ebe:	08 c0       	rjmp	.+16     	; 0x4ed0 <can_config_rx_mailbox+0x34>
		if (can_cmd(msg) != CAN_CMD_ACCEPTED) {
    4ec0:	c7 01       	movw	r24, r14
    4ec2:	69 83       	std	Y+1, r22	; 0x01
    4ec4:	0e 94 0a 1c 	call	0x3814	; 0x3814 <can_cmd>
    4ec8:	69 81       	ldd	r22, Y+1	; 0x01
    4eca:	88 23       	and	r24, r24
    4ecc:	29 f4       	brne	.+10     	; 0x4ed8 <can_config_rx_mailbox+0x3c>

	msg->ctrl.ide = 0;
	msg->ctrl.rtr = 0;
	msg->cmd = CMD_RX_DATA_MASKED;
	
	for (i=0;i<count;i++) {
    4ece:	1f 5f       	subi	r17, 0xFF	; 255
    4ed0:	16 17       	cp	r17, r22
    4ed2:	b0 f3       	brcs	.-20     	; 0x4ec0 <can_config_rx_mailbox+0x24>
		if (can_cmd(msg) != CAN_CMD_ACCEPTED) {
			return CAN_CMD_REFUSED;
		}
	}
	return CAN_CMD_ACCEPTED;
    4ed4:	80 e0       	ldi	r24, 0x00	; 0
    4ed6:	01 c0       	rjmp	.+2      	; 0x4eda <can_config_rx_mailbox+0x3e>
	msg->ctrl.rtr = 0;
	msg->cmd = CMD_RX_DATA_MASKED;
	
	for (i=0;i<count;i++) {
		if (can_cmd(msg) != CAN_CMD_ACCEPTED) {
			return CAN_CMD_REFUSED;
    4ed8:	8f ef       	ldi	r24, 0xFF	; 255
		}
	}
	return CAN_CMD_ACCEPTED;
}
    4eda:	0f 90       	pop	r0
    4edc:	cf 91       	pop	r28
    4ede:	df 91       	pop	r29
    4ee0:	1f 91       	pop	r17
    4ee2:	ff 90       	pop	r15
    4ee4:	ef 90       	pop	r14
    4ee6:	08 95       	ret

00004ee8 <xputc>:

.global xputc
.func xputc
xputc:
#ifdef CR_CRLF
	cpi	r24, 10		;LF --> CRLF
    4ee8:	8a 30       	cpi	r24, 0x0A	; 10
	brne	1f		;
    4eea:	19 f4       	brne	.+6      	; 0x4ef2 <xputc+0xa>
	ldi	r24, 13		;
    4eec:	8d e0       	ldi	r24, 0x0D	; 13
	rcall	1f		;
    4eee:	01 d0       	rcall	.+2      	; 0x4ef2 <xputc+0xa>
	ldi	r24, 10		;/
    4ef0:	8a e0       	ldi	r24, 0x0A	; 10
1:
#endif
	push	ZH
    4ef2:	ff 93       	push	r31
	push	ZL
    4ef4:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
    4ef6:	e0 91 cb 03 	lds	r30, 0x03CB
	lds	ZH, xfunc_out+1	;/
    4efa:	f0 91 cc 03 	lds	r31, 0x03CC
	icall
    4efe:	09 95       	icall
	pop	ZL
    4f00:	ef 91       	pop	r30
	pop	ZH
    4f02:	ff 91       	pop	r31
	ret
    4f04:	08 95       	ret

00004f06 <xputs>:

#ifdef USE_XPUTS
.global xputs
.func xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
    4f06:	fc 01       	movw	r30, r24
1:	_LPMI	r24
    4f08:	85 91       	lpm	r24, Z+
	cpi	r24, 0
    4f0a:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
    4f0c:	11 f0       	breq	.+4      	; 0x4f12 <xputs+0xc>
	rcall	xputc
    4f0e:	ec df       	rcall	.-40     	; 0x4ee8 <xputc>
	rjmp	1b
    4f10:	fb cf       	rjmp	.-10     	; 0x4f08 <xputs+0x2>
2:	ret
    4f12:	08 95       	ret

00004f14 <xitoa>:
#ifdef USE_XITOA
.global xitoa
.func xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
    4f14:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
    4f16:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
    4f18:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
    4f1a:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
    4f1c:	0c c0       	rjmp	.+24     	; 0x4f36 <xitoa+0x22>
	neg	r20		;
    4f1e:	41 95       	neg	r20
	sbrs	r25, 7		;
    4f20:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
    4f22:	09 c0       	rjmp	.+18     	; 0x4f36 <xitoa+0x22>
	ldi	r30, '-'	;
    4f24:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
    4f26:	60 95       	com	r22
	com	r23		;
    4f28:	70 95       	com	r23
	com	r24		;
    4f2a:	80 95       	com	r24
	com	r25		;
    4f2c:	90 95       	com	r25
	adc	r22, r1		;
    4f2e:	61 1d       	adc	r22, r1
	adc	r23, r1		;
    4f30:	71 1d       	adc	r23, r1
	adc	r24, r1		;
    4f32:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
    4f34:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
    4f36:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
    4f38:	02 c0       	rjmp	.+4      	; 0x4f3e <xitoa+0x2a>
	neg	r18		;
    4f3a:	21 95       	neg	r18
	ldi	r19, '0'	;/
    4f3c:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
    4f3e:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
    4f40:	aa 27       	eor	r26, r26
2:	lsl	r22		;
    4f42:	66 0f       	add	r22, r22
	rol	r23		;
    4f44:	77 1f       	adc	r23, r23
	rol	r24		;
    4f46:	88 1f       	adc	r24, r24
	rol	r25		;
    4f48:	99 1f       	adc	r25, r25
	rol	r26		;
    4f4a:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
    4f4c:	a4 17       	cp	r26, r20
	brcs	3f		;
    4f4e:	10 f0       	brcs	.+4      	; 0x4f54 <xitoa+0x40>
	sub	r26, r20	;
    4f50:	a4 1b       	sub	r26, r20
	inc	r22		;
    4f52:	63 95       	inc	r22
3:	dec	r21		;
    4f54:	5a 95       	dec	r21
	brne	2b		;/
    4f56:	a9 f7       	brne	.-22     	; 0x4f42 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
    4f58:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
    4f5a:	08 f0       	brcs	.+2      	; 0x4f5e <xitoa+0x4a>
	subi	r26, -7		;
    4f5c:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
    4f5e:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
    4f60:	af 93       	push	r26
	inc	r31		;/
    4f62:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
    4f64:	61 15       	cp	r22, r1
	cpc	r23, r1		;
    4f66:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
    4f68:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
    4f6a:	91 05       	cpc	r25, r1
	brne	1b		;/
    4f6c:	41 f7       	brne	.-48     	; 0x4f3e <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
    4f6e:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
    4f70:	11 f4       	brne	.+4      	; 0x4f76 <xitoa+0x62>
	push	r30		;
    4f72:	ef 93       	push	r30
	inc	r31		;/
    4f74:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
    4f76:	f2 17       	cp	r31, r18
	brcc	6f		;
    4f78:	18 f4       	brcc	.+6      	; 0x4f80 <xitoa+0x6c>
	push	r19		;
    4f7a:	3f 93       	push	r19
	inc	r31		;
    4f7c:	f3 95       	inc	r31
	rjmp	5b		;/
    4f7e:	fb cf       	rjmp	.-10     	; 0x4f76 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
    4f80:	8f 91       	pop	r24
	rcall	xputc		;
    4f82:	b2 df       	rcall	.-156    	; 0x4ee8 <xputc>
	dec	r31		;
    4f84:	fa 95       	dec	r31
	brne	6b		;/
    4f86:	e1 f7       	brne	.-8      	; 0x4f80 <xitoa+0x6c>

	ret
    4f88:	08 95       	ret

00004f8a <xprintf>:

#ifdef USE_XPRINTF
.global xprintf
.func xprintf
xprintf:
	push	YH
    4f8a:	df 93       	push	r29
	push	YL
    4f8c:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
    4f8e:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
    4f90:	de b7       	in	r29, 0x3e	; 62
	clr	YH
#endif
#if FLASHEND > 0x1FFFF
	adiw	YL, 6		;Y = pointer to arguments
#else
	adiw	YL, 5		;Y = pointer to arguments
    4f92:	25 96       	adiw	r28, 0x05	; 5
#endif
	ld	ZL, Y+		;Z = pointer to format string
    4f94:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
    4f96:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
    4f98:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
    4f9a:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
    4f9c:	21 f0       	breq	.+8      	; 0x4fa6 <xprintf+0x1c>
	cpi	r24, '%'	;Is format?
    4f9e:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
    4fa0:	29 f0       	breq	.+10     	; 0x4fac <xprintf+0x22>
1:	rcall	xputc		;Put a normal character
    4fa2:	a2 df       	rcall	.-188    	; 0x4ee8 <xputc>
	rjmp	0b		;/
    4fa4:	f9 cf       	rjmp	.-14     	; 0x4f98 <xprintf+0xe>
90:	pop	YL
    4fa6:	cf 91       	pop	r28
	pop	YH
    4fa8:	df 91       	pop	r29
	ret
    4faa:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
    4fac:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
    4fae:	e8 94       	clt
	_LPMI	r21		;Get flags
    4fb0:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
    4fb2:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
    4fb4:	b1 f3       	breq	.-20     	; 0x4fa2 <xprintf+0x18>
	cpi	r21, '0'	;Zero filled?
    4fb6:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
    4fb8:	11 f4       	brne	.+4      	; 0x4fbe <xprintf+0x34>
	set			;/
    4fba:	68 94       	set
22:	_LPMI	r21		;Get width
    4fbc:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
    4fbe:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
    4fc0:	48 f4       	brcc	.+18     	; 0x4fd4 <xprintf+0x4a>
	subi	r21, '0'	;
    4fc2:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
    4fc4:	80 f3       	brcs	.-32     	; 0x4fa6 <xprintf+0x1c>
	lsl	r18		;
    4fc6:	22 0f       	add	r18, r18
	mov	r0, r18		;
    4fc8:	02 2e       	mov	r0, r18
	lsl	r18		;
    4fca:	22 0f       	add	r18, r18
	lsl	r18		;
    4fcc:	22 0f       	add	r18, r18
	add	r18, r0		;
    4fce:	20 0d       	add	r18, r0
	add	r18, r21	;
    4fd0:	25 0f       	add	r18, r21
	rjmp	22b		;/
    4fd2:	f4 cf       	rjmp	.-24     	; 0x4fbc <xprintf+0x32>

24:	brtc	25f		;get value (low word)
    4fd4:	0e f4       	brtc	.+2      	; 0x4fd8 <xprintf+0x4e>
	neg	r18		;
    4fd6:	21 95       	neg	r18
25:	ld	r24, Y+		;
    4fd8:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
    4fda:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
    4fdc:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
    4fde:	09 f3       	breq	.-62     	; 0x4fa2 <xprintf+0x18>
	cpi	r21, 's'	;Is type RAM string?
    4fe0:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
    4fe2:	29 f1       	breq	.+74     	; 0x502e <xprintf+0xa4>
	cpi	r21, 'S'	;Is type ROM string?
    4fe4:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
    4fe6:	59 f1       	breq	.+86     	; 0x503e <xprintf+0xb4>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
    4fe8:	bc 01       	movw	r22, r24
	clr	r24		;
    4fea:	88 27       	eor	r24, r24
	clr	r25		;
    4fec:	99 27       	eor	r25, r25
	clt			;/
    4fee:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
    4ff0:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
    4ff2:	21 f4       	brne	.+8      	; 0x4ffc <xprintf+0x72>
	ld	r24, Y+		;get value (high word)
    4ff4:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
    4ff6:	99 91       	ld	r25, Y+
	set			;
    4ff8:	68 94       	set
	_LPMI	r21		;/
    4ffa:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
    4ffc:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
    4ffe:	39 f4       	brne	.+14     	; 0x500e <xprintf+0x84>
	ldi	r20, -10	;
    5000:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
    5002:	7e f0       	brts	.+30     	; 0x5022 <xprintf+0x98>
	sbrs	r23, 7		;
    5004:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
    5006:	0d c0       	rjmp	.+26     	; 0x5022 <xprintf+0x98>
	ldi	r24, -1		;
    5008:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
    500a:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
    500c:	0a c0       	rjmp	.+20     	; 0x5022 <xprintf+0x98>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
    500e:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
    5010:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
    5012:	39 f0       	breq	.+14     	; 0x5022 <xprintf+0x98>
	cpi	r21, 'X'	;Is type hexdecimal?
    5014:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
    5016:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
    5018:	21 f0       	breq	.+8      	; 0x5022 <xprintf+0x98>
	cpi	r21, 'b'	;Is type binary?
    501a:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
    501c:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
    501e:	09 f0       	breq	.+2      	; 0x5022 <xprintf+0x98>
	rjmp	90b		;abort
    5020:	c2 cf       	rjmp	.-124    	; 0x4fa6 <xprintf+0x1c>
40:	push	ZH		;Output the value
    5022:	ff 93       	push	r31
	push	ZL		;
    5024:	ef 93       	push	r30
	rcall	xitoa		;
    5026:	76 df       	rcall	.-276    	; 0x4f14 <xitoa>
42:	pop	ZL		;
    5028:	ef 91       	pop	r30
	pop	ZH		;
    502a:	ff 91       	pop	r31
	rjmp	0b		;/
    502c:	b5 cf       	rjmp	.-150    	; 0x4f98 <xprintf+0xe>

50:	push	ZH		;Put a string on the RAM
    502e:	ff 93       	push	r31
	push	ZL
    5030:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
    5032:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
    5034:	81 91       	ld	r24, Z+
	cpi	r24, 0
    5036:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
    5038:	b9 f3       	breq	.-18     	; 0x5028 <xprintf+0x9e>
	rcall	xputc
    503a:	56 df       	rcall	.-340    	; 0x4ee8 <xputc>
	rjmp	51b
    503c:	fb cf       	rjmp	.-10     	; 0x5034 <xprintf+0xaa>

60:	push	ZH		;Put a string on the ROM
    503e:	ff 93       	push	r31
	push	ZL
    5040:	ef 93       	push	r30
	rcall	xputs
    5042:	61 df       	rcall	.-318    	; 0x4f06 <xputs>
	rjmp	42b
    5044:	f1 cf       	rjmp	.-30     	; 0x5028 <xprintf+0x9e>

00005046 <xatoi>:

#ifdef USE_XATOI
.global xatoi
.func xatoi
xatoi:
	_MOVW	r1, r0, r23, r22
    5046:	0b 01       	movw	r0, r22
	_MOVW	XH, XL, r25, r24
    5048:	dc 01       	movw	r26, r24
	ld	ZL, X+
    504a:	ed 91       	ld	r30, X+
	ld	ZH, X+
    504c:	fd 91       	ld	r31, X+
	clr	r18		;r21:r18 = 0;
    504e:	22 27       	eor	r18, r18
	clr	r19		;
    5050:	33 27       	eor	r19, r19
	clr	r20		;
    5052:	44 27       	eor	r20, r20
	clr	r21		;/
    5054:	55 27       	eor	r21, r21
	clt			;T = 0;
    5056:	e8 94       	clt

	ldi	r25, 10		;r25 = 10;
    5058:	9a e0       	ldi	r25, 0x0A	; 10
	rjmp	41f		;/
    505a:	01 c0       	rjmp	.+2      	; 0x505e <xatoi+0x18>
40:	adiw	ZL, 1		;Z++;
    505c:	31 96       	adiw	r30, 0x01	; 1
41:	ld	r22, Z		;r22 = *Z;
    505e:	60 81       	ld	r22, Z
	cpi	r22, ' '	;if(r22 == ' ') continue
    5060:	60 32       	cpi	r22, 0x20	; 32
	breq	40b		;/
    5062:	e1 f3       	breq	.-8      	; 0x505c <xatoi+0x16>
	brcs	70f		;if(r22 < ' ') error;
    5064:	a8 f1       	brcs	.+106    	; 0x50d0 <xatoi+0x8a>
	cpi	r22, '-'	;if(r22 == '-') {
    5066:	6d 32       	cpi	r22, 0x2D	; 45
	brne	42f		; T = 1;
    5068:	11 f4       	brne	.+4      	; 0x506e <xatoi+0x28>
	set			; continue;
    506a:	68 94       	set
	rjmp	40b		;}
    506c:	f7 cf       	rjmp	.-18     	; 0x505c <xatoi+0x16>
42:	cpi	r22, '9'+1	;if(r22 > '9') error;
    506e:	6a 33       	cpi	r22, 0x3A	; 58
	brcc	70f		;/
    5070:	78 f5       	brcc	.+94     	; 0x50d0 <xatoi+0x8a>
	cpi	r22, '0'	;if(r22 < '0') error;
    5072:	60 33       	cpi	r22, 0x30	; 48
	brcs	70f		;/
    5074:	68 f1       	brcs	.+90     	; 0x50d0 <xatoi+0x8a>
	brne	51f		;if(r22 > '0') cv_start;
    5076:	71 f4       	brne	.+28     	; 0x5094 <xatoi+0x4e>
	ldi	r25, 8		;r25 = 8;
    5078:	98 e0       	ldi	r25, 0x08	; 8
	adiw	ZL, 1		;r22 = *(++Z);
    507a:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;/
    507c:	60 81       	ld	r22, Z
	cpi	r22, ' '+1	;if(r22 <= ' ') exit;
    507e:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    5080:	48 f1       	brcs	.+82     	; 0x50d4 <xatoi+0x8e>
	cpi	r22, 'b'	;if(r22 == 'b') {
    5082:	62 36       	cpi	r22, 0x62	; 98
	brne	43f		; r25 = 2;
    5084:	11 f4       	brne	.+4      	; 0x508a <xatoi+0x44>
	ldi	r25, 2		; cv_start;
    5086:	92 e0       	ldi	r25, 0x02	; 2
	rjmp	50f		;}
    5088:	03 c0       	rjmp	.+6      	; 0x5090 <xatoi+0x4a>
43:	cpi	r22, 'x'	;if(r22 != 'x') error;
    508a:	68 37       	cpi	r22, 0x78	; 120
	brne	51f		;/
    508c:	19 f4       	brne	.+6      	; 0x5094 <xatoi+0x4e>
	ldi	r25, 16		;r25 = 16;
    508e:	90 e1       	ldi	r25, 0x10	; 16

50:	adiw	ZL, 1		;Z++;
    5090:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;r22 = *Z;
    5092:	60 81       	ld	r22, Z
51:	cpi	r22, ' '+1	;if(r22 <= ' ') break;
    5094:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    5096:	f0 f0       	brcs	.+60     	; 0x50d4 <xatoi+0x8e>
	cpi	r22, 'a'	;if(r22 >= 'a') r22 =- 0x20;
    5098:	61 36       	cpi	r22, 0x61	; 97
	brcs	52f		;
    509a:	08 f0       	brcs	.+2      	; 0x509e <xatoi+0x58>
	subi	r22, 0x20	;/
    509c:	60 52       	subi	r22, 0x20	; 32
52:	subi	r22, '0'	;if((r22 -= '0') < 0) error;
    509e:	60 53       	subi	r22, 0x30	; 48
	brcs	70f		;/
    50a0:	b8 f0       	brcs	.+46     	; 0x50d0 <xatoi+0x8a>
	cpi	r22, 10		;if(r22 >= 10) {
    50a2:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	53f		; r22 -= 7;
    50a4:	18 f0       	brcs	.+6      	; 0x50ac <xatoi+0x66>
	subi	r22, 7		; if(r22 < 10) 
    50a6:	67 50       	subi	r22, 0x07	; 7
	cpi	r22, 10		;
    50a8:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	70f		;}
    50aa:	90 f0       	brcs	.+36     	; 0x50d0 <xatoi+0x8a>
53:	cp	r22, r25	;if(r22 >= r25) error;
    50ac:	69 17       	cp	r22, r25
	brcc	70f		;/
    50ae:	80 f4       	brcc	.+32     	; 0x50d0 <xatoi+0x8a>
60:	ldi	r24, 33		;r21:r18 *= r25;
    50b0:	81 e2       	ldi	r24, 0x21	; 33
	sub	r23, r23	;
    50b2:	77 1b       	sub	r23, r23
61:	brcc	62f		;
    50b4:	08 f4       	brcc	.+2      	; 0x50b8 <xatoi+0x72>
	add	r23, r25	;
    50b6:	79 0f       	add	r23, r25
62:	lsr	r23		;
    50b8:	76 95       	lsr	r23
	ror	r21		;
    50ba:	57 95       	ror	r21
	ror	r20		;
    50bc:	47 95       	ror	r20
	ror	r19		;
    50be:	37 95       	ror	r19
	ror	r18		;
    50c0:	27 95       	ror	r18
	dec	r24		;
    50c2:	8a 95       	dec	r24
	brne	61b		;/
    50c4:	b9 f7       	brne	.-18     	; 0x50b4 <xatoi+0x6e>
	add	r18, r22	;r21:r18 += r22;
    50c6:	26 0f       	add	r18, r22
	adc	r19, r24	;
    50c8:	38 1f       	adc	r19, r24
	adc	r20, r24	;
    50ca:	48 1f       	adc	r20, r24
	adc	r21, r24	;/
    50cc:	58 1f       	adc	r21, r24
	rjmp	50b		;repeat
    50ce:	e0 cf       	rjmp	.-64     	; 0x5090 <xatoi+0x4a>

70:	ldi	r24, 0
    50d0:	80 e0       	ldi	r24, 0x00	; 0
	rjmp	81f
    50d2:	01 c0       	rjmp	.+2      	; 0x50d6 <xatoi+0x90>
80:	ldi	r24, 1
    50d4:	81 e0       	ldi	r24, 0x01	; 1
81:	brtc	82f
    50d6:	4e f4       	brtc	.+18     	; 0x50ea <xatoi+0xa4>
	clr	r22
    50d8:	66 27       	eor	r22, r22
	com	r18
    50da:	20 95       	com	r18
	com	r19
    50dc:	30 95       	com	r19
	com	r20
    50de:	40 95       	com	r20
	com	r21
    50e0:	50 95       	com	r21
	adc	r18, r22
    50e2:	26 1f       	adc	r18, r22
	adc	r19, r22
    50e4:	36 1f       	adc	r19, r22
	adc	r20, r22
    50e6:	46 1f       	adc	r20, r22
	adc	r21, r22
    50e8:	56 1f       	adc	r21, r22
82:	st	-X, ZH
    50ea:	fe 93       	st	-X, r31
	st	-X, ZL
    50ec:	ee 93       	st	-X, r30
	_MOVW	XH, XL, r1, r0
    50ee:	d0 01       	movw	r26, r0
	st	X+, r18
    50f0:	2d 93       	st	X+, r18
	st	X+, r19
    50f2:	3d 93       	st	X+, r19
	st	X+, r20
    50f4:	4d 93       	st	X+, r20
	st	X+, r21
    50f6:	5d 93       	st	X+, r21
	clr	r1
    50f8:	11 24       	eor	r1, r1
	ret
    50fa:	08 95       	ret

000050fc <_fpadd_parts>:
    50fc:	a0 e0       	ldi	r26, 0x00	; 0
    50fe:	b0 e0       	ldi	r27, 0x00	; 0
    5100:	e4 e8       	ldi	r30, 0x84	; 132
    5102:	f8 e2       	ldi	r31, 0x28	; 40
    5104:	0c 94 cf 2d 	jmp	0x5b9e	; 0x5b9e <__prologue_saves__+0x8>
    5108:	fc 01       	movw	r30, r24
    510a:	ea 01       	movw	r28, r20
    510c:	80 81       	ld	r24, Z
    510e:	82 30       	cpi	r24, 0x02	; 2
    5110:	08 f4       	brcc	.+2      	; 0x5114 <_fpadd_parts+0x18>
    5112:	38 c1       	rjmp	.+624    	; 0x5384 <_fpadd_parts+0x288>
    5114:	db 01       	movw	r26, r22
    5116:	9c 91       	ld	r25, X
    5118:	92 30       	cpi	r25, 0x02	; 2
    511a:	08 f4       	brcc	.+2      	; 0x511e <_fpadd_parts+0x22>
    511c:	30 c1       	rjmp	.+608    	; 0x537e <_fpadd_parts+0x282>
    511e:	84 30       	cpi	r24, 0x04	; 4
    5120:	59 f4       	brne	.+22     	; 0x5138 <_fpadd_parts+0x3c>
    5122:	94 30       	cpi	r25, 0x04	; 4
    5124:	09 f0       	breq	.+2      	; 0x5128 <_fpadd_parts+0x2c>
    5126:	2e c1       	rjmp	.+604    	; 0x5384 <_fpadd_parts+0x288>
    5128:	91 81       	ldd	r25, Z+1	; 0x01
    512a:	11 96       	adiw	r26, 0x01	; 1
    512c:	8c 91       	ld	r24, X
    512e:	11 97       	sbiw	r26, 0x01	; 1
    5130:	98 17       	cp	r25, r24
    5132:	09 f0       	breq	.+2      	; 0x5136 <_fpadd_parts+0x3a>
    5134:	21 c1       	rjmp	.+578    	; 0x5378 <_fpadd_parts+0x27c>
    5136:	26 c1       	rjmp	.+588    	; 0x5384 <_fpadd_parts+0x288>
    5138:	94 30       	cpi	r25, 0x04	; 4
    513a:	09 f4       	brne	.+2      	; 0x513e <_fpadd_parts+0x42>
    513c:	20 c1       	rjmp	.+576    	; 0x537e <_fpadd_parts+0x282>
    513e:	92 30       	cpi	r25, 0x02	; 2
    5140:	b1 f4       	brne	.+44     	; 0x516e <_fpadd_parts+0x72>
    5142:	82 30       	cpi	r24, 0x02	; 2
    5144:	09 f0       	breq	.+2      	; 0x5148 <_fpadd_parts+0x4c>
    5146:	1e c1       	rjmp	.+572    	; 0x5384 <_fpadd_parts+0x288>
    5148:	ca 01       	movw	r24, r20
    514a:	af 01       	movw	r20, r30
    514c:	28 e0       	ldi	r18, 0x08	; 8
    514e:	da 01       	movw	r26, r20
    5150:	0d 90       	ld	r0, X+
    5152:	ad 01       	movw	r20, r26
    5154:	dc 01       	movw	r26, r24
    5156:	0d 92       	st	X+, r0
    5158:	cd 01       	movw	r24, r26
    515a:	21 50       	subi	r18, 0x01	; 1
    515c:	c1 f7       	brne	.-16     	; 0x514e <_fpadd_parts+0x52>
    515e:	db 01       	movw	r26, r22
    5160:	11 96       	adiw	r26, 0x01	; 1
    5162:	8c 91       	ld	r24, X
    5164:	11 97       	sbiw	r26, 0x01	; 1
    5166:	91 81       	ldd	r25, Z+1	; 0x01
    5168:	89 23       	and	r24, r25
    516a:	89 83       	std	Y+1, r24	; 0x01
    516c:	0a c1       	rjmp	.+532    	; 0x5382 <_fpadd_parts+0x286>
    516e:	82 30       	cpi	r24, 0x02	; 2
    5170:	09 f4       	brne	.+2      	; 0x5174 <_fpadd_parts+0x78>
    5172:	05 c1       	rjmp	.+522    	; 0x537e <_fpadd_parts+0x282>
    5174:	c2 80       	ldd	r12, Z+2	; 0x02
    5176:	d3 80       	ldd	r13, Z+3	; 0x03
    5178:	db 01       	movw	r26, r22
    517a:	12 96       	adiw	r26, 0x02	; 2
    517c:	6d 90       	ld	r6, X+
    517e:	7c 90       	ld	r7, X
    5180:	13 97       	sbiw	r26, 0x03	; 3
    5182:	24 81       	ldd	r18, Z+4	; 0x04
    5184:	35 81       	ldd	r19, Z+5	; 0x05
    5186:	46 81       	ldd	r20, Z+6	; 0x06
    5188:	57 81       	ldd	r21, Z+7	; 0x07
    518a:	14 96       	adiw	r26, 0x04	; 4
    518c:	ed 90       	ld	r14, X+
    518e:	fd 90       	ld	r15, X+
    5190:	0d 91       	ld	r16, X+
    5192:	1c 91       	ld	r17, X
    5194:	17 97       	sbiw	r26, 0x07	; 7
    5196:	c6 01       	movw	r24, r12
    5198:	86 19       	sub	r24, r6
    519a:	97 09       	sbc	r25, r7
    519c:	5c 01       	movw	r10, r24
    519e:	97 ff       	sbrs	r25, 7
    51a0:	04 c0       	rjmp	.+8      	; 0x51aa <_fpadd_parts+0xae>
    51a2:	aa 24       	eor	r10, r10
    51a4:	bb 24       	eor	r11, r11
    51a6:	a8 1a       	sub	r10, r24
    51a8:	b9 0a       	sbc	r11, r25
    51aa:	b0 e2       	ldi	r27, 0x20	; 32
    51ac:	ab 16       	cp	r10, r27
    51ae:	b1 04       	cpc	r11, r1
    51b0:	0c f0       	brlt	.+2      	; 0x51b4 <_fpadd_parts+0xb8>
    51b2:	61 c0       	rjmp	.+194    	; 0x5276 <_fpadd_parts+0x17a>
    51b4:	18 16       	cp	r1, r24
    51b6:	19 06       	cpc	r1, r25
    51b8:	6c f5       	brge	.+90     	; 0x5214 <_fpadd_parts+0x118>
    51ba:	37 01       	movw	r6, r14
    51bc:	48 01       	movw	r8, r16
    51be:	0a 2c       	mov	r0, r10
    51c0:	04 c0       	rjmp	.+8      	; 0x51ca <_fpadd_parts+0xce>
    51c2:	96 94       	lsr	r9
    51c4:	87 94       	ror	r8
    51c6:	77 94       	ror	r7
    51c8:	67 94       	ror	r6
    51ca:	0a 94       	dec	r0
    51cc:	d2 f7       	brpl	.-12     	; 0x51c2 <_fpadd_parts+0xc6>
    51ce:	81 e0       	ldi	r24, 0x01	; 1
    51d0:	90 e0       	ldi	r25, 0x00	; 0
    51d2:	a0 e0       	ldi	r26, 0x00	; 0
    51d4:	b0 e0       	ldi	r27, 0x00	; 0
    51d6:	0a 2c       	mov	r0, r10
    51d8:	04 c0       	rjmp	.+8      	; 0x51e2 <_fpadd_parts+0xe6>
    51da:	88 0f       	add	r24, r24
    51dc:	99 1f       	adc	r25, r25
    51de:	aa 1f       	adc	r26, r26
    51e0:	bb 1f       	adc	r27, r27
    51e2:	0a 94       	dec	r0
    51e4:	d2 f7       	brpl	.-12     	; 0x51da <_fpadd_parts+0xde>
    51e6:	01 97       	sbiw	r24, 0x01	; 1
    51e8:	a1 09       	sbc	r26, r1
    51ea:	b1 09       	sbc	r27, r1
    51ec:	8e 21       	and	r24, r14
    51ee:	9f 21       	and	r25, r15
    51f0:	a0 23       	and	r26, r16
    51f2:	b1 23       	and	r27, r17
    51f4:	ee 24       	eor	r14, r14
    51f6:	ff 24       	eor	r15, r15
    51f8:	87 01       	movw	r16, r14
    51fa:	e3 94       	inc	r14
    51fc:	00 97       	sbiw	r24, 0x00	; 0
    51fe:	a1 05       	cpc	r26, r1
    5200:	b1 05       	cpc	r27, r1
    5202:	19 f4       	brne	.+6      	; 0x520a <_fpadd_parts+0x10e>
    5204:	ee 24       	eor	r14, r14
    5206:	ff 24       	eor	r15, r15
    5208:	87 01       	movw	r16, r14
    520a:	e6 28       	or	r14, r6
    520c:	f7 28       	or	r15, r7
    520e:	08 29       	or	r16, r8
    5210:	19 29       	or	r17, r9
    5212:	3c c0       	rjmp	.+120    	; 0x528c <_fpadd_parts+0x190>
    5214:	00 97       	sbiw	r24, 0x00	; 0
    5216:	d1 f1       	breq	.+116    	; 0x528c <_fpadd_parts+0x190>
    5218:	ca 0c       	add	r12, r10
    521a:	db 1c       	adc	r13, r11
    521c:	39 01       	movw	r6, r18
    521e:	4a 01       	movw	r8, r20
    5220:	0a 2c       	mov	r0, r10
    5222:	04 c0       	rjmp	.+8      	; 0x522c <_fpadd_parts+0x130>
    5224:	96 94       	lsr	r9
    5226:	87 94       	ror	r8
    5228:	77 94       	ror	r7
    522a:	67 94       	ror	r6
    522c:	0a 94       	dec	r0
    522e:	d2 f7       	brpl	.-12     	; 0x5224 <_fpadd_parts+0x128>
    5230:	81 e0       	ldi	r24, 0x01	; 1
    5232:	90 e0       	ldi	r25, 0x00	; 0
    5234:	a0 e0       	ldi	r26, 0x00	; 0
    5236:	b0 e0       	ldi	r27, 0x00	; 0
    5238:	0a 2c       	mov	r0, r10
    523a:	04 c0       	rjmp	.+8      	; 0x5244 <_fpadd_parts+0x148>
    523c:	88 0f       	add	r24, r24
    523e:	99 1f       	adc	r25, r25
    5240:	aa 1f       	adc	r26, r26
    5242:	bb 1f       	adc	r27, r27
    5244:	0a 94       	dec	r0
    5246:	d2 f7       	brpl	.-12     	; 0x523c <_fpadd_parts+0x140>
    5248:	01 97       	sbiw	r24, 0x01	; 1
    524a:	a1 09       	sbc	r26, r1
    524c:	b1 09       	sbc	r27, r1
    524e:	82 23       	and	r24, r18
    5250:	93 23       	and	r25, r19
    5252:	a4 23       	and	r26, r20
    5254:	b5 23       	and	r27, r21
    5256:	21 e0       	ldi	r18, 0x01	; 1
    5258:	30 e0       	ldi	r19, 0x00	; 0
    525a:	40 e0       	ldi	r20, 0x00	; 0
    525c:	50 e0       	ldi	r21, 0x00	; 0
    525e:	00 97       	sbiw	r24, 0x00	; 0
    5260:	a1 05       	cpc	r26, r1
    5262:	b1 05       	cpc	r27, r1
    5264:	19 f4       	brne	.+6      	; 0x526c <_fpadd_parts+0x170>
    5266:	20 e0       	ldi	r18, 0x00	; 0
    5268:	30 e0       	ldi	r19, 0x00	; 0
    526a:	a9 01       	movw	r20, r18
    526c:	26 29       	or	r18, r6
    526e:	37 29       	or	r19, r7
    5270:	48 29       	or	r20, r8
    5272:	59 29       	or	r21, r9
    5274:	0b c0       	rjmp	.+22     	; 0x528c <_fpadd_parts+0x190>
    5276:	6c 14       	cp	r6, r12
    5278:	7d 04       	cpc	r7, r13
    527a:	24 f4       	brge	.+8      	; 0x5284 <_fpadd_parts+0x188>
    527c:	ee 24       	eor	r14, r14
    527e:	ff 24       	eor	r15, r15
    5280:	87 01       	movw	r16, r14
    5282:	04 c0       	rjmp	.+8      	; 0x528c <_fpadd_parts+0x190>
    5284:	63 01       	movw	r12, r6
    5286:	20 e0       	ldi	r18, 0x00	; 0
    5288:	30 e0       	ldi	r19, 0x00	; 0
    528a:	a9 01       	movw	r20, r18
    528c:	81 81       	ldd	r24, Z+1	; 0x01
    528e:	fb 01       	movw	r30, r22
    5290:	91 81       	ldd	r25, Z+1	; 0x01
    5292:	89 17       	cp	r24, r25
    5294:	09 f4       	brne	.+2      	; 0x5298 <_fpadd_parts+0x19c>
    5296:	45 c0       	rjmp	.+138    	; 0x5322 <_fpadd_parts+0x226>
    5298:	88 23       	and	r24, r24
    529a:	49 f0       	breq	.+18     	; 0x52ae <_fpadd_parts+0x1b2>
    529c:	d8 01       	movw	r26, r16
    529e:	c7 01       	movw	r24, r14
    52a0:	82 1b       	sub	r24, r18
    52a2:	93 0b       	sbc	r25, r19
    52a4:	a4 0b       	sbc	r26, r20
    52a6:	b5 0b       	sbc	r27, r21
    52a8:	9c 01       	movw	r18, r24
    52aa:	ad 01       	movw	r20, r26
    52ac:	04 c0       	rjmp	.+8      	; 0x52b6 <_fpadd_parts+0x1ba>
    52ae:	2e 19       	sub	r18, r14
    52b0:	3f 09       	sbc	r19, r15
    52b2:	40 0b       	sbc	r20, r16
    52b4:	51 0b       	sbc	r21, r17
    52b6:	57 fd       	sbrc	r21, 7
    52b8:	04 c0       	rjmp	.+8      	; 0x52c2 <_fpadd_parts+0x1c6>
    52ba:	19 82       	std	Y+1, r1	; 0x01
    52bc:	db 82       	std	Y+3, r13	; 0x03
    52be:	ca 82       	std	Y+2, r12	; 0x02
    52c0:	0b c0       	rjmp	.+22     	; 0x52d8 <_fpadd_parts+0x1dc>
    52c2:	81 e0       	ldi	r24, 0x01	; 1
    52c4:	89 83       	std	Y+1, r24	; 0x01
    52c6:	db 82       	std	Y+3, r13	; 0x03
    52c8:	ca 82       	std	Y+2, r12	; 0x02
    52ca:	50 95       	com	r21
    52cc:	40 95       	com	r20
    52ce:	30 95       	com	r19
    52d0:	21 95       	neg	r18
    52d2:	3f 4f       	sbci	r19, 0xFF	; 255
    52d4:	4f 4f       	sbci	r20, 0xFF	; 255
    52d6:	5f 4f       	sbci	r21, 0xFF	; 255
    52d8:	2c 83       	std	Y+4, r18	; 0x04
    52da:	3d 83       	std	Y+5, r19	; 0x05
    52dc:	4e 83       	std	Y+6, r20	; 0x06
    52de:	5f 83       	std	Y+7, r21	; 0x07
    52e0:	0d c0       	rjmp	.+26     	; 0x52fc <_fpadd_parts+0x200>
    52e2:	88 0f       	add	r24, r24
    52e4:	99 1f       	adc	r25, r25
    52e6:	aa 1f       	adc	r26, r26
    52e8:	bb 1f       	adc	r27, r27
    52ea:	8c 83       	std	Y+4, r24	; 0x04
    52ec:	9d 83       	std	Y+5, r25	; 0x05
    52ee:	ae 83       	std	Y+6, r26	; 0x06
    52f0:	bf 83       	std	Y+7, r27	; 0x07
    52f2:	8a 81       	ldd	r24, Y+2	; 0x02
    52f4:	9b 81       	ldd	r25, Y+3	; 0x03
    52f6:	01 97       	sbiw	r24, 0x01	; 1
    52f8:	9b 83       	std	Y+3, r25	; 0x03
    52fa:	8a 83       	std	Y+2, r24	; 0x02
    52fc:	8c 81       	ldd	r24, Y+4	; 0x04
    52fe:	9d 81       	ldd	r25, Y+5	; 0x05
    5300:	ae 81       	ldd	r26, Y+6	; 0x06
    5302:	bf 81       	ldd	r27, Y+7	; 0x07
    5304:	9c 01       	movw	r18, r24
    5306:	ad 01       	movw	r20, r26
    5308:	21 50       	subi	r18, 0x01	; 1
    530a:	30 40       	sbci	r19, 0x00	; 0
    530c:	40 40       	sbci	r20, 0x00	; 0
    530e:	50 40       	sbci	r21, 0x00	; 0
    5310:	2f 3f       	cpi	r18, 0xFF	; 255
    5312:	ef ef       	ldi	r30, 0xFF	; 255
    5314:	3e 07       	cpc	r19, r30
    5316:	ef ef       	ldi	r30, 0xFF	; 255
    5318:	4e 07       	cpc	r20, r30
    531a:	ef e3       	ldi	r30, 0x3F	; 63
    531c:	5e 07       	cpc	r21, r30
    531e:	08 f3       	brcs	.-62     	; 0x52e2 <_fpadd_parts+0x1e6>
    5320:	0b c0       	rjmp	.+22     	; 0x5338 <_fpadd_parts+0x23c>
    5322:	89 83       	std	Y+1, r24	; 0x01
    5324:	db 82       	std	Y+3, r13	; 0x03
    5326:	ca 82       	std	Y+2, r12	; 0x02
    5328:	2e 0d       	add	r18, r14
    532a:	3f 1d       	adc	r19, r15
    532c:	40 1f       	adc	r20, r16
    532e:	51 1f       	adc	r21, r17
    5330:	2c 83       	std	Y+4, r18	; 0x04
    5332:	3d 83       	std	Y+5, r19	; 0x05
    5334:	4e 83       	std	Y+6, r20	; 0x06
    5336:	5f 83       	std	Y+7, r21	; 0x07
    5338:	83 e0       	ldi	r24, 0x03	; 3
    533a:	88 83       	st	Y, r24
    533c:	2c 81       	ldd	r18, Y+4	; 0x04
    533e:	3d 81       	ldd	r19, Y+5	; 0x05
    5340:	4e 81       	ldd	r20, Y+6	; 0x06
    5342:	5f 81       	ldd	r21, Y+7	; 0x07
    5344:	57 ff       	sbrs	r21, 7
    5346:	1d c0       	rjmp	.+58     	; 0x5382 <_fpadd_parts+0x286>
    5348:	da 01       	movw	r26, r20
    534a:	c9 01       	movw	r24, r18
    534c:	81 70       	andi	r24, 0x01	; 1
    534e:	90 70       	andi	r25, 0x00	; 0
    5350:	a0 70       	andi	r26, 0x00	; 0
    5352:	b0 70       	andi	r27, 0x00	; 0
    5354:	56 95       	lsr	r21
    5356:	47 95       	ror	r20
    5358:	37 95       	ror	r19
    535a:	27 95       	ror	r18
    535c:	82 2b       	or	r24, r18
    535e:	93 2b       	or	r25, r19
    5360:	a4 2b       	or	r26, r20
    5362:	b5 2b       	or	r27, r21
    5364:	8c 83       	std	Y+4, r24	; 0x04
    5366:	9d 83       	std	Y+5, r25	; 0x05
    5368:	ae 83       	std	Y+6, r26	; 0x06
    536a:	bf 83       	std	Y+7, r27	; 0x07
    536c:	8a 81       	ldd	r24, Y+2	; 0x02
    536e:	9b 81       	ldd	r25, Y+3	; 0x03
    5370:	01 96       	adiw	r24, 0x01	; 1
    5372:	9b 83       	std	Y+3, r25	; 0x03
    5374:	8a 83       	std	Y+2, r24	; 0x02
    5376:	05 c0       	rjmp	.+10     	; 0x5382 <_fpadd_parts+0x286>
    5378:	ea ea       	ldi	r30, 0xAA	; 170
    537a:	f3 e0       	ldi	r31, 0x03	; 3
    537c:	03 c0       	rjmp	.+6      	; 0x5384 <_fpadd_parts+0x288>
    537e:	fb 01       	movw	r30, r22
    5380:	01 c0       	rjmp	.+2      	; 0x5384 <_fpadd_parts+0x288>
    5382:	fe 01       	movw	r30, r28
    5384:	cf 01       	movw	r24, r30
    5386:	cd b7       	in	r28, 0x3d	; 61
    5388:	de b7       	in	r29, 0x3e	; 62
    538a:	ee e0       	ldi	r30, 0x0E	; 14
    538c:	0c 94 eb 2d 	jmp	0x5bd6	; 0x5bd6 <__epilogue_restores__+0x8>

00005390 <__addsf3>:
    5390:	a0 e2       	ldi	r26, 0x20	; 32
    5392:	b0 e0       	ldi	r27, 0x00	; 0
    5394:	ee ec       	ldi	r30, 0xCE	; 206
    5396:	f9 e2       	ldi	r31, 0x29	; 41
    5398:	0c 94 d7 2d 	jmp	0x5bae	; 0x5bae <__prologue_saves__+0x18>
    539c:	69 83       	std	Y+1, r22	; 0x01
    539e:	7a 83       	std	Y+2, r23	; 0x02
    53a0:	8b 83       	std	Y+3, r24	; 0x03
    53a2:	9c 83       	std	Y+4, r25	; 0x04
    53a4:	2d 83       	std	Y+5, r18	; 0x05
    53a6:	3e 83       	std	Y+6, r19	; 0x06
    53a8:	4f 83       	std	Y+7, r20	; 0x07
    53aa:	58 87       	std	Y+8, r21	; 0x08
    53ac:	89 e0       	ldi	r24, 0x09	; 9
    53ae:	e8 2e       	mov	r14, r24
    53b0:	f1 2c       	mov	r15, r1
    53b2:	ec 0e       	add	r14, r28
    53b4:	fd 1e       	adc	r15, r29
    53b6:	ce 01       	movw	r24, r28
    53b8:	01 96       	adiw	r24, 0x01	; 1
    53ba:	b7 01       	movw	r22, r14
    53bc:	0e 94 ee 2c 	call	0x59dc	; 0x59dc <__unpack_f>
    53c0:	8e 01       	movw	r16, r28
    53c2:	0f 5e       	subi	r16, 0xEF	; 239
    53c4:	1f 4f       	sbci	r17, 0xFF	; 255
    53c6:	ce 01       	movw	r24, r28
    53c8:	05 96       	adiw	r24, 0x05	; 5
    53ca:	b8 01       	movw	r22, r16
    53cc:	0e 94 ee 2c 	call	0x59dc	; 0x59dc <__unpack_f>
    53d0:	c7 01       	movw	r24, r14
    53d2:	b8 01       	movw	r22, r16
    53d4:	ae 01       	movw	r20, r28
    53d6:	47 5e       	subi	r20, 0xE7	; 231
    53d8:	5f 4f       	sbci	r21, 0xFF	; 255
    53da:	0e 94 7e 28 	call	0x50fc	; 0x50fc <_fpadd_parts>
    53de:	0e 94 20 2c 	call	0x5840	; 0x5840 <__pack_f>
    53e2:	a0 96       	adiw	r28, 0x20	; 32
    53e4:	e6 e0       	ldi	r30, 0x06	; 6
    53e6:	0c 94 f3 2d 	jmp	0x5be6	; 0x5be6 <__epilogue_restores__+0x18>

000053ea <__subsf3>:
    53ea:	a0 e2       	ldi	r26, 0x20	; 32
    53ec:	b0 e0       	ldi	r27, 0x00	; 0
    53ee:	eb ef       	ldi	r30, 0xFB	; 251
    53f0:	f9 e2       	ldi	r31, 0x29	; 41
    53f2:	0c 94 d7 2d 	jmp	0x5bae	; 0x5bae <__prologue_saves__+0x18>
    53f6:	69 83       	std	Y+1, r22	; 0x01
    53f8:	7a 83       	std	Y+2, r23	; 0x02
    53fa:	8b 83       	std	Y+3, r24	; 0x03
    53fc:	9c 83       	std	Y+4, r25	; 0x04
    53fe:	2d 83       	std	Y+5, r18	; 0x05
    5400:	3e 83       	std	Y+6, r19	; 0x06
    5402:	4f 83       	std	Y+7, r20	; 0x07
    5404:	58 87       	std	Y+8, r21	; 0x08
    5406:	8e 01       	movw	r16, r28
    5408:	07 5f       	subi	r16, 0xF7	; 247
    540a:	1f 4f       	sbci	r17, 0xFF	; 255
    540c:	ce 01       	movw	r24, r28
    540e:	01 96       	adiw	r24, 0x01	; 1
    5410:	b8 01       	movw	r22, r16
    5412:	0e 94 ee 2c 	call	0x59dc	; 0x59dc <__unpack_f>
    5416:	91 e1       	ldi	r25, 0x11	; 17
    5418:	e9 2e       	mov	r14, r25
    541a:	f1 2c       	mov	r15, r1
    541c:	ec 0e       	add	r14, r28
    541e:	fd 1e       	adc	r15, r29
    5420:	ce 01       	movw	r24, r28
    5422:	05 96       	adiw	r24, 0x05	; 5
    5424:	b7 01       	movw	r22, r14
    5426:	0e 94 ee 2c 	call	0x59dc	; 0x59dc <__unpack_f>
    542a:	8a 89       	ldd	r24, Y+18	; 0x12
    542c:	91 e0       	ldi	r25, 0x01	; 1
    542e:	89 27       	eor	r24, r25
    5430:	8a 8b       	std	Y+18, r24	; 0x12
    5432:	c8 01       	movw	r24, r16
    5434:	b7 01       	movw	r22, r14
    5436:	ae 01       	movw	r20, r28
    5438:	47 5e       	subi	r20, 0xE7	; 231
    543a:	5f 4f       	sbci	r21, 0xFF	; 255
    543c:	0e 94 7e 28 	call	0x50fc	; 0x50fc <_fpadd_parts>
    5440:	0e 94 20 2c 	call	0x5840	; 0x5840 <__pack_f>
    5444:	a0 96       	adiw	r28, 0x20	; 32
    5446:	e6 e0       	ldi	r30, 0x06	; 6
    5448:	0c 94 f3 2d 	jmp	0x5be6	; 0x5be6 <__epilogue_restores__+0x18>

0000544c <__mulsf3>:
    544c:	a0 e2       	ldi	r26, 0x20	; 32
    544e:	b0 e0       	ldi	r27, 0x00	; 0
    5450:	ec e2       	ldi	r30, 0x2C	; 44
    5452:	fa e2       	ldi	r31, 0x2A	; 42
    5454:	0c 94 cb 2d 	jmp	0x5b96	; 0x5b96 <__prologue_saves__>
    5458:	69 83       	std	Y+1, r22	; 0x01
    545a:	7a 83       	std	Y+2, r23	; 0x02
    545c:	8b 83       	std	Y+3, r24	; 0x03
    545e:	9c 83       	std	Y+4, r25	; 0x04
    5460:	2d 83       	std	Y+5, r18	; 0x05
    5462:	3e 83       	std	Y+6, r19	; 0x06
    5464:	4f 83       	std	Y+7, r20	; 0x07
    5466:	58 87       	std	Y+8, r21	; 0x08
    5468:	ce 01       	movw	r24, r28
    546a:	01 96       	adiw	r24, 0x01	; 1
    546c:	be 01       	movw	r22, r28
    546e:	67 5f       	subi	r22, 0xF7	; 247
    5470:	7f 4f       	sbci	r23, 0xFF	; 255
    5472:	0e 94 ee 2c 	call	0x59dc	; 0x59dc <__unpack_f>
    5476:	ce 01       	movw	r24, r28
    5478:	05 96       	adiw	r24, 0x05	; 5
    547a:	be 01       	movw	r22, r28
    547c:	6f 5e       	subi	r22, 0xEF	; 239
    547e:	7f 4f       	sbci	r23, 0xFF	; 255
    5480:	0e 94 ee 2c 	call	0x59dc	; 0x59dc <__unpack_f>
    5484:	99 85       	ldd	r25, Y+9	; 0x09
    5486:	92 30       	cpi	r25, 0x02	; 2
    5488:	78 f0       	brcs	.+30     	; 0x54a8 <__mulsf3+0x5c>
    548a:	89 89       	ldd	r24, Y+17	; 0x11
    548c:	82 30       	cpi	r24, 0x02	; 2
    548e:	c0 f0       	brcs	.+48     	; 0x54c0 <__mulsf3+0x74>
    5490:	94 30       	cpi	r25, 0x04	; 4
    5492:	19 f4       	brne	.+6      	; 0x549a <__mulsf3+0x4e>
    5494:	82 30       	cpi	r24, 0x02	; 2
    5496:	41 f4       	brne	.+16     	; 0x54a8 <__mulsf3+0x5c>
    5498:	cb c0       	rjmp	.+406    	; 0x5630 <__mulsf3+0x1e4>
    549a:	84 30       	cpi	r24, 0x04	; 4
    549c:	19 f4       	brne	.+6      	; 0x54a4 <__mulsf3+0x58>
    549e:	92 30       	cpi	r25, 0x02	; 2
    54a0:	79 f4       	brne	.+30     	; 0x54c0 <__mulsf3+0x74>
    54a2:	c6 c0       	rjmp	.+396    	; 0x5630 <__mulsf3+0x1e4>
    54a4:	92 30       	cpi	r25, 0x02	; 2
    54a6:	51 f4       	brne	.+20     	; 0x54bc <__mulsf3+0x70>
    54a8:	81 e0       	ldi	r24, 0x01	; 1
    54aa:	2a 85       	ldd	r18, Y+10	; 0x0a
    54ac:	9a 89       	ldd	r25, Y+18	; 0x12
    54ae:	29 17       	cp	r18, r25
    54b0:	09 f4       	brne	.+2      	; 0x54b4 <__mulsf3+0x68>
    54b2:	80 e0       	ldi	r24, 0x00	; 0
    54b4:	8a 87       	std	Y+10, r24	; 0x0a
    54b6:	ce 01       	movw	r24, r28
    54b8:	09 96       	adiw	r24, 0x09	; 9
    54ba:	bc c0       	rjmp	.+376    	; 0x5634 <__mulsf3+0x1e8>
    54bc:	82 30       	cpi	r24, 0x02	; 2
    54be:	51 f4       	brne	.+20     	; 0x54d4 <__mulsf3+0x88>
    54c0:	81 e0       	ldi	r24, 0x01	; 1
    54c2:	2a 85       	ldd	r18, Y+10	; 0x0a
    54c4:	9a 89       	ldd	r25, Y+18	; 0x12
    54c6:	29 17       	cp	r18, r25
    54c8:	09 f4       	brne	.+2      	; 0x54cc <__mulsf3+0x80>
    54ca:	80 e0       	ldi	r24, 0x00	; 0
    54cc:	8a 8b       	std	Y+18, r24	; 0x12
    54ce:	ce 01       	movw	r24, r28
    54d0:	41 96       	adiw	r24, 0x11	; 17
    54d2:	b0 c0       	rjmp	.+352    	; 0x5634 <__mulsf3+0x1e8>
    54d4:	6d 84       	ldd	r6, Y+13	; 0x0d
    54d6:	7e 84       	ldd	r7, Y+14	; 0x0e
    54d8:	8f 84       	ldd	r8, Y+15	; 0x0f
    54da:	98 88       	ldd	r9, Y+16	; 0x10
    54dc:	ed 88       	ldd	r14, Y+21	; 0x15
    54de:	fe 88       	ldd	r15, Y+22	; 0x16
    54e0:	0f 89       	ldd	r16, Y+23	; 0x17
    54e2:	18 8d       	ldd	r17, Y+24	; 0x18
    54e4:	e0 e2       	ldi	r30, 0x20	; 32
    54e6:	f0 e0       	ldi	r31, 0x00	; 0
    54e8:	80 e0       	ldi	r24, 0x00	; 0
    54ea:	90 e0       	ldi	r25, 0x00	; 0
    54ec:	dc 01       	movw	r26, r24
    54ee:	aa 24       	eor	r10, r10
    54f0:	bb 24       	eor	r11, r11
    54f2:	65 01       	movw	r12, r10
    54f4:	20 e0       	ldi	r18, 0x00	; 0
    54f6:	30 e0       	ldi	r19, 0x00	; 0
    54f8:	a9 01       	movw	r20, r18
    54fa:	b3 01       	movw	r22, r6
    54fc:	61 70       	andi	r22, 0x01	; 1
    54fe:	70 70       	andi	r23, 0x00	; 0
    5500:	61 15       	cp	r22, r1
    5502:	71 05       	cpc	r23, r1
    5504:	d1 f0       	breq	.+52     	; 0x553a <__mulsf3+0xee>
    5506:	2e 0d       	add	r18, r14
    5508:	3f 1d       	adc	r19, r15
    550a:	40 1f       	adc	r20, r16
    550c:	51 1f       	adc	r21, r17
    550e:	15 01       	movw	r2, r10
    5510:	26 01       	movw	r4, r12
    5512:	28 0e       	add	r2, r24
    5514:	39 1e       	adc	r3, r25
    5516:	4a 1e       	adc	r4, r26
    5518:	5b 1e       	adc	r5, r27
    551a:	81 e0       	ldi	r24, 0x01	; 1
    551c:	90 e0       	ldi	r25, 0x00	; 0
    551e:	a0 e0       	ldi	r26, 0x00	; 0
    5520:	b0 e0       	ldi	r27, 0x00	; 0
    5522:	2e 15       	cp	r18, r14
    5524:	3f 05       	cpc	r19, r15
    5526:	40 07       	cpc	r20, r16
    5528:	51 07       	cpc	r21, r17
    552a:	18 f0       	brcs	.+6      	; 0x5532 <__mulsf3+0xe6>
    552c:	80 e0       	ldi	r24, 0x00	; 0
    552e:	90 e0       	ldi	r25, 0x00	; 0
    5530:	dc 01       	movw	r26, r24
    5532:	82 0d       	add	r24, r2
    5534:	93 1d       	adc	r25, r3
    5536:	a4 1d       	adc	r26, r4
    5538:	b5 1d       	adc	r27, r5
    553a:	aa 0c       	add	r10, r10
    553c:	bb 1c       	adc	r11, r11
    553e:	cc 1c       	adc	r12, r12
    5540:	dd 1c       	adc	r13, r13
    5542:	17 ff       	sbrs	r17, 7
    5544:	09 c0       	rjmp	.+18     	; 0x5558 <__mulsf3+0x10c>
    5546:	61 e0       	ldi	r22, 0x01	; 1
    5548:	26 2e       	mov	r2, r22
    554a:	31 2c       	mov	r3, r1
    554c:	41 2c       	mov	r4, r1
    554e:	51 2c       	mov	r5, r1
    5550:	a2 28       	or	r10, r2
    5552:	b3 28       	or	r11, r3
    5554:	c4 28       	or	r12, r4
    5556:	d5 28       	or	r13, r5
    5558:	31 97       	sbiw	r30, 0x01	; 1
    555a:	49 f0       	breq	.+18     	; 0x556e <__mulsf3+0x122>
    555c:	ee 0c       	add	r14, r14
    555e:	ff 1c       	adc	r15, r15
    5560:	00 1f       	adc	r16, r16
    5562:	11 1f       	adc	r17, r17
    5564:	96 94       	lsr	r9
    5566:	87 94       	ror	r8
    5568:	77 94       	ror	r7
    556a:	67 94       	ror	r6
    556c:	c6 cf       	rjmp	.-116    	; 0x54fa <__mulsf3+0xae>
    556e:	6b 89       	ldd	r22, Y+19	; 0x13
    5570:	7c 89       	ldd	r23, Y+20	; 0x14
    5572:	eb 85       	ldd	r30, Y+11	; 0x0b
    5574:	fc 85       	ldd	r31, Y+12	; 0x0c
    5576:	6e 0f       	add	r22, r30
    5578:	7f 1f       	adc	r23, r31
    557a:	6e 5f       	subi	r22, 0xFE	; 254
    557c:	7f 4f       	sbci	r23, 0xFF	; 255
    557e:	7c 8f       	std	Y+28, r23	; 0x1c
    5580:	6b 8f       	std	Y+27, r22	; 0x1b
    5582:	61 e0       	ldi	r22, 0x01	; 1
    5584:	ea 85       	ldd	r30, Y+10	; 0x0a
    5586:	7a 89       	ldd	r23, Y+18	; 0x12
    5588:	e7 17       	cp	r30, r23
    558a:	09 f4       	brne	.+2      	; 0x558e <__mulsf3+0x142>
    558c:	60 e0       	ldi	r22, 0x00	; 0
    558e:	6a 8f       	std	Y+26, r22	; 0x1a
    5590:	6b 8d       	ldd	r22, Y+27	; 0x1b
    5592:	7c 8d       	ldd	r23, Y+28	; 0x1c
    5594:	10 c0       	rjmp	.+32     	; 0x55b6 <__mulsf3+0x16a>
    5596:	fc 01       	movw	r30, r24
    5598:	e1 70       	andi	r30, 0x01	; 1
    559a:	f0 70       	andi	r31, 0x00	; 0
    559c:	30 97       	sbiw	r30, 0x00	; 0
    559e:	29 f0       	breq	.+10     	; 0x55aa <__mulsf3+0x15e>
    55a0:	56 95       	lsr	r21
    55a2:	47 95       	ror	r20
    55a4:	37 95       	ror	r19
    55a6:	27 95       	ror	r18
    55a8:	50 68       	ori	r21, 0x80	; 128
    55aa:	b6 95       	lsr	r27
    55ac:	a7 95       	ror	r26
    55ae:	97 95       	ror	r25
    55b0:	87 95       	ror	r24
    55b2:	6f 5f       	subi	r22, 0xFF	; 255
    55b4:	7f 4f       	sbci	r23, 0xFF	; 255
    55b6:	b7 fd       	sbrc	r27, 7
    55b8:	ee cf       	rjmp	.-36     	; 0x5596 <__mulsf3+0x14a>
    55ba:	0c c0       	rjmp	.+24     	; 0x55d4 <__mulsf3+0x188>
    55bc:	88 0f       	add	r24, r24
    55be:	99 1f       	adc	r25, r25
    55c0:	aa 1f       	adc	r26, r26
    55c2:	bb 1f       	adc	r27, r27
    55c4:	57 fd       	sbrc	r21, 7
    55c6:	81 60       	ori	r24, 0x01	; 1
    55c8:	22 0f       	add	r18, r18
    55ca:	33 1f       	adc	r19, r19
    55cc:	44 1f       	adc	r20, r20
    55ce:	55 1f       	adc	r21, r21
    55d0:	61 50       	subi	r22, 0x01	; 1
    55d2:	70 40       	sbci	r23, 0x00	; 0
    55d4:	80 30       	cpi	r24, 0x00	; 0
    55d6:	e0 e0       	ldi	r30, 0x00	; 0
    55d8:	9e 07       	cpc	r25, r30
    55da:	e0 e0       	ldi	r30, 0x00	; 0
    55dc:	ae 07       	cpc	r26, r30
    55de:	e0 e4       	ldi	r30, 0x40	; 64
    55e0:	be 07       	cpc	r27, r30
    55e2:	60 f3       	brcs	.-40     	; 0x55bc <__mulsf3+0x170>
    55e4:	6b 8f       	std	Y+27, r22	; 0x1b
    55e6:	7c 8f       	std	Y+28, r23	; 0x1c
    55e8:	6f e7       	ldi	r22, 0x7F	; 127
    55ea:	e6 2e       	mov	r14, r22
    55ec:	f1 2c       	mov	r15, r1
    55ee:	01 2d       	mov	r16, r1
    55f0:	11 2d       	mov	r17, r1
    55f2:	e8 22       	and	r14, r24
    55f4:	f9 22       	and	r15, r25
    55f6:	0a 23       	and	r16, r26
    55f8:	1b 23       	and	r17, r27
    55fa:	60 e4       	ldi	r22, 0x40	; 64
    55fc:	e6 16       	cp	r14, r22
    55fe:	f1 04       	cpc	r15, r1
    5600:	01 05       	cpc	r16, r1
    5602:	11 05       	cpc	r17, r1
    5604:	61 f4       	brne	.+24     	; 0x561e <__mulsf3+0x1d2>
    5606:	87 fd       	sbrc	r24, 7
    5608:	0a c0       	rjmp	.+20     	; 0x561e <__mulsf3+0x1d2>
    560a:	21 15       	cp	r18, r1
    560c:	31 05       	cpc	r19, r1
    560e:	41 05       	cpc	r20, r1
    5610:	51 05       	cpc	r21, r1
    5612:	29 f0       	breq	.+10     	; 0x561e <__mulsf3+0x1d2>
    5614:	80 5c       	subi	r24, 0xC0	; 192
    5616:	9f 4f       	sbci	r25, 0xFF	; 255
    5618:	af 4f       	sbci	r26, 0xFF	; 255
    561a:	bf 4f       	sbci	r27, 0xFF	; 255
    561c:	80 78       	andi	r24, 0x80	; 128
    561e:	8d 8f       	std	Y+29, r24	; 0x1d
    5620:	9e 8f       	std	Y+30, r25	; 0x1e
    5622:	af 8f       	std	Y+31, r26	; 0x1f
    5624:	b8 a3       	std	Y+32, r27	; 0x20
    5626:	83 e0       	ldi	r24, 0x03	; 3
    5628:	89 8f       	std	Y+25, r24	; 0x19
    562a:	ce 01       	movw	r24, r28
    562c:	49 96       	adiw	r24, 0x19	; 25
    562e:	02 c0       	rjmp	.+4      	; 0x5634 <__mulsf3+0x1e8>
    5630:	8a ea       	ldi	r24, 0xAA	; 170
    5632:	93 e0       	ldi	r25, 0x03	; 3
    5634:	0e 94 20 2c 	call	0x5840	; 0x5840 <__pack_f>
    5638:	a0 96       	adiw	r28, 0x20	; 32
    563a:	e2 e1       	ldi	r30, 0x12	; 18
    563c:	0c 94 e7 2d 	jmp	0x5bce	; 0x5bce <__epilogue_restores__>

00005640 <__divsf3>:
    5640:	a8 e1       	ldi	r26, 0x18	; 24
    5642:	b0 e0       	ldi	r27, 0x00	; 0
    5644:	e6 e2       	ldi	r30, 0x26	; 38
    5646:	fb e2       	ldi	r31, 0x2B	; 43
    5648:	0c 94 d3 2d 	jmp	0x5ba6	; 0x5ba6 <__prologue_saves__+0x10>
    564c:	69 83       	std	Y+1, r22	; 0x01
    564e:	7a 83       	std	Y+2, r23	; 0x02
    5650:	8b 83       	std	Y+3, r24	; 0x03
    5652:	9c 83       	std	Y+4, r25	; 0x04
    5654:	2d 83       	std	Y+5, r18	; 0x05
    5656:	3e 83       	std	Y+6, r19	; 0x06
    5658:	4f 83       	std	Y+7, r20	; 0x07
    565a:	58 87       	std	Y+8, r21	; 0x08
    565c:	8e 01       	movw	r16, r28
    565e:	07 5f       	subi	r16, 0xF7	; 247
    5660:	1f 4f       	sbci	r17, 0xFF	; 255
    5662:	ce 01       	movw	r24, r28
    5664:	01 96       	adiw	r24, 0x01	; 1
    5666:	b8 01       	movw	r22, r16
    5668:	0e 94 ee 2c 	call	0x59dc	; 0x59dc <__unpack_f>
    566c:	81 e1       	ldi	r24, 0x11	; 17
    566e:	e8 2e       	mov	r14, r24
    5670:	f1 2c       	mov	r15, r1
    5672:	ec 0e       	add	r14, r28
    5674:	fd 1e       	adc	r15, r29
    5676:	ce 01       	movw	r24, r28
    5678:	05 96       	adiw	r24, 0x05	; 5
    567a:	b7 01       	movw	r22, r14
    567c:	0e 94 ee 2c 	call	0x59dc	; 0x59dc <__unpack_f>
    5680:	99 85       	ldd	r25, Y+9	; 0x09
    5682:	92 30       	cpi	r25, 0x02	; 2
    5684:	08 f4       	brcc	.+2      	; 0x5688 <__divsf3+0x48>
    5686:	83 c0       	rjmp	.+262    	; 0x578e <__divsf3+0x14e>
    5688:	89 89       	ldd	r24, Y+17	; 0x11
    568a:	82 30       	cpi	r24, 0x02	; 2
    568c:	08 f4       	brcc	.+2      	; 0x5690 <__divsf3+0x50>
    568e:	7b c0       	rjmp	.+246    	; 0x5786 <__divsf3+0x146>
    5690:	2a 85       	ldd	r18, Y+10	; 0x0a
    5692:	3a 89       	ldd	r19, Y+18	; 0x12
    5694:	23 27       	eor	r18, r19
    5696:	2a 87       	std	Y+10, r18	; 0x0a
    5698:	94 30       	cpi	r25, 0x04	; 4
    569a:	11 f0       	breq	.+4      	; 0x56a0 <__divsf3+0x60>
    569c:	92 30       	cpi	r25, 0x02	; 2
    569e:	21 f4       	brne	.+8      	; 0x56a8 <__divsf3+0x68>
    56a0:	98 17       	cp	r25, r24
    56a2:	09 f0       	breq	.+2      	; 0x56a6 <__divsf3+0x66>
    56a4:	6c c0       	rjmp	.+216    	; 0x577e <__divsf3+0x13e>
    56a6:	71 c0       	rjmp	.+226    	; 0x578a <__divsf3+0x14a>
    56a8:	84 30       	cpi	r24, 0x04	; 4
    56aa:	39 f4       	brne	.+14     	; 0x56ba <__divsf3+0x7a>
    56ac:	1d 86       	std	Y+13, r1	; 0x0d
    56ae:	1e 86       	std	Y+14, r1	; 0x0e
    56b0:	1f 86       	std	Y+15, r1	; 0x0f
    56b2:	18 8a       	std	Y+16, r1	; 0x10
    56b4:	1c 86       	std	Y+12, r1	; 0x0c
    56b6:	1b 86       	std	Y+11, r1	; 0x0b
    56b8:	6a c0       	rjmp	.+212    	; 0x578e <__divsf3+0x14e>
    56ba:	82 30       	cpi	r24, 0x02	; 2
    56bc:	19 f4       	brne	.+6      	; 0x56c4 <__divsf3+0x84>
    56be:	84 e0       	ldi	r24, 0x04	; 4
    56c0:	89 87       	std	Y+9, r24	; 0x09
    56c2:	65 c0       	rjmp	.+202    	; 0x578e <__divsf3+0x14e>
    56c4:	8b 85       	ldd	r24, Y+11	; 0x0b
    56c6:	9c 85       	ldd	r25, Y+12	; 0x0c
    56c8:	2b 89       	ldd	r18, Y+19	; 0x13
    56ca:	3c 89       	ldd	r19, Y+20	; 0x14
    56cc:	82 1b       	sub	r24, r18
    56ce:	93 0b       	sbc	r25, r19
    56d0:	9c 87       	std	Y+12, r25	; 0x0c
    56d2:	8b 87       	std	Y+11, r24	; 0x0b
    56d4:	2d 85       	ldd	r18, Y+13	; 0x0d
    56d6:	3e 85       	ldd	r19, Y+14	; 0x0e
    56d8:	4f 85       	ldd	r20, Y+15	; 0x0f
    56da:	58 89       	ldd	r21, Y+16	; 0x10
    56dc:	ed 88       	ldd	r14, Y+21	; 0x15
    56de:	fe 88       	ldd	r15, Y+22	; 0x16
    56e0:	0f 89       	ldd	r16, Y+23	; 0x17
    56e2:	18 8d       	ldd	r17, Y+24	; 0x18
    56e4:	2e 15       	cp	r18, r14
    56e6:	3f 05       	cpc	r19, r15
    56e8:	40 07       	cpc	r20, r16
    56ea:	51 07       	cpc	r21, r17
    56ec:	38 f4       	brcc	.+14     	; 0x56fc <__divsf3+0xbc>
    56ee:	22 0f       	add	r18, r18
    56f0:	33 1f       	adc	r19, r19
    56f2:	44 1f       	adc	r20, r20
    56f4:	55 1f       	adc	r21, r21
    56f6:	01 97       	sbiw	r24, 0x01	; 1
    56f8:	9c 87       	std	Y+12, r25	; 0x0c
    56fa:	8b 87       	std	Y+11, r24	; 0x0b
    56fc:	6f e1       	ldi	r22, 0x1F	; 31
    56fe:	70 e0       	ldi	r23, 0x00	; 0
    5700:	a1 2c       	mov	r10, r1
    5702:	b1 2c       	mov	r11, r1
    5704:	c1 2c       	mov	r12, r1
    5706:	a0 e4       	ldi	r26, 0x40	; 64
    5708:	da 2e       	mov	r13, r26
    570a:	80 e0       	ldi	r24, 0x00	; 0
    570c:	90 e0       	ldi	r25, 0x00	; 0
    570e:	dc 01       	movw	r26, r24
    5710:	2e 15       	cp	r18, r14
    5712:	3f 05       	cpc	r19, r15
    5714:	40 07       	cpc	r20, r16
    5716:	51 07       	cpc	r21, r17
    5718:	40 f0       	brcs	.+16     	; 0x572a <__divsf3+0xea>
    571a:	8a 29       	or	r24, r10
    571c:	9b 29       	or	r25, r11
    571e:	ac 29       	or	r26, r12
    5720:	bd 29       	or	r27, r13
    5722:	2e 19       	sub	r18, r14
    5724:	3f 09       	sbc	r19, r15
    5726:	40 0b       	sbc	r20, r16
    5728:	51 0b       	sbc	r21, r17
    572a:	d6 94       	lsr	r13
    572c:	c7 94       	ror	r12
    572e:	b7 94       	ror	r11
    5730:	a7 94       	ror	r10
    5732:	22 0f       	add	r18, r18
    5734:	33 1f       	adc	r19, r19
    5736:	44 1f       	adc	r20, r20
    5738:	55 1f       	adc	r21, r21
    573a:	61 50       	subi	r22, 0x01	; 1
    573c:	70 40       	sbci	r23, 0x00	; 0
    573e:	41 f7       	brne	.-48     	; 0x5710 <__divsf3+0xd0>
    5740:	6f e7       	ldi	r22, 0x7F	; 127
    5742:	e6 2e       	mov	r14, r22
    5744:	f1 2c       	mov	r15, r1
    5746:	01 2d       	mov	r16, r1
    5748:	11 2d       	mov	r17, r1
    574a:	e8 22       	and	r14, r24
    574c:	f9 22       	and	r15, r25
    574e:	0a 23       	and	r16, r26
    5750:	1b 23       	and	r17, r27
    5752:	60 e4       	ldi	r22, 0x40	; 64
    5754:	e6 16       	cp	r14, r22
    5756:	f1 04       	cpc	r15, r1
    5758:	01 05       	cpc	r16, r1
    575a:	11 05       	cpc	r17, r1
    575c:	61 f4       	brne	.+24     	; 0x5776 <__divsf3+0x136>
    575e:	87 fd       	sbrc	r24, 7
    5760:	0a c0       	rjmp	.+20     	; 0x5776 <__divsf3+0x136>
    5762:	21 15       	cp	r18, r1
    5764:	31 05       	cpc	r19, r1
    5766:	41 05       	cpc	r20, r1
    5768:	51 05       	cpc	r21, r1
    576a:	29 f0       	breq	.+10     	; 0x5776 <__divsf3+0x136>
    576c:	80 5c       	subi	r24, 0xC0	; 192
    576e:	9f 4f       	sbci	r25, 0xFF	; 255
    5770:	af 4f       	sbci	r26, 0xFF	; 255
    5772:	bf 4f       	sbci	r27, 0xFF	; 255
    5774:	80 78       	andi	r24, 0x80	; 128
    5776:	8d 87       	std	Y+13, r24	; 0x0d
    5778:	9e 87       	std	Y+14, r25	; 0x0e
    577a:	af 87       	std	Y+15, r26	; 0x0f
    577c:	b8 8b       	std	Y+16, r27	; 0x10
    577e:	8e 01       	movw	r16, r28
    5780:	07 5f       	subi	r16, 0xF7	; 247
    5782:	1f 4f       	sbci	r17, 0xFF	; 255
    5784:	04 c0       	rjmp	.+8      	; 0x578e <__divsf3+0x14e>
    5786:	87 01       	movw	r16, r14
    5788:	02 c0       	rjmp	.+4      	; 0x578e <__divsf3+0x14e>
    578a:	0a ea       	ldi	r16, 0xAA	; 170
    578c:	13 e0       	ldi	r17, 0x03	; 3
    578e:	c8 01       	movw	r24, r16
    5790:	0e 94 20 2c 	call	0x5840	; 0x5840 <__pack_f>
    5794:	68 96       	adiw	r28, 0x18	; 24
    5796:	ea e0       	ldi	r30, 0x0A	; 10
    5798:	0c 94 ef 2d 	jmp	0x5bde	; 0x5bde <__epilogue_restores__+0x10>

0000579c <__fixsfsi>:
    579c:	ac e0       	ldi	r26, 0x0C	; 12
    579e:	b0 e0       	ldi	r27, 0x00	; 0
    57a0:	e4 ed       	ldi	r30, 0xD4	; 212
    57a2:	fb e2       	ldi	r31, 0x2B	; 43
    57a4:	0c 94 db 2d 	jmp	0x5bb6	; 0x5bb6 <__prologue_saves__+0x20>
    57a8:	69 83       	std	Y+1, r22	; 0x01
    57aa:	7a 83       	std	Y+2, r23	; 0x02
    57ac:	8b 83       	std	Y+3, r24	; 0x03
    57ae:	9c 83       	std	Y+4, r25	; 0x04
    57b0:	ce 01       	movw	r24, r28
    57b2:	01 96       	adiw	r24, 0x01	; 1
    57b4:	be 01       	movw	r22, r28
    57b6:	6b 5f       	subi	r22, 0xFB	; 251
    57b8:	7f 4f       	sbci	r23, 0xFF	; 255
    57ba:	0e 94 ee 2c 	call	0x59dc	; 0x59dc <__unpack_f>
    57be:	8d 81       	ldd	r24, Y+5	; 0x05
    57c0:	82 30       	cpi	r24, 0x02	; 2
    57c2:	81 f1       	breq	.+96     	; 0x5824 <__fixsfsi+0x88>
    57c4:	82 30       	cpi	r24, 0x02	; 2
    57c6:	70 f1       	brcs	.+92     	; 0x5824 <__fixsfsi+0x88>
    57c8:	84 30       	cpi	r24, 0x04	; 4
    57ca:	21 f4       	brne	.+8      	; 0x57d4 <__fixsfsi+0x38>
    57cc:	8e 81       	ldd	r24, Y+6	; 0x06
    57ce:	88 23       	and	r24, r24
    57d0:	69 f1       	breq	.+90     	; 0x582c <__fixsfsi+0x90>
    57d2:	0a c0       	rjmp	.+20     	; 0x57e8 <__fixsfsi+0x4c>
    57d4:	2f 81       	ldd	r18, Y+7	; 0x07
    57d6:	38 85       	ldd	r19, Y+8	; 0x08
    57d8:	37 fd       	sbrc	r19, 7
    57da:	24 c0       	rjmp	.+72     	; 0x5824 <__fixsfsi+0x88>
    57dc:	6e 81       	ldd	r22, Y+6	; 0x06
    57de:	2f 31       	cpi	r18, 0x1F	; 31
    57e0:	31 05       	cpc	r19, r1
    57e2:	3c f0       	brlt	.+14     	; 0x57f2 <__fixsfsi+0x56>
    57e4:	66 23       	and	r22, r22
    57e6:	11 f1       	breq	.+68     	; 0x582c <__fixsfsi+0x90>
    57e8:	20 e0       	ldi	r18, 0x00	; 0
    57ea:	30 e0       	ldi	r19, 0x00	; 0
    57ec:	40 e0       	ldi	r20, 0x00	; 0
    57ee:	50 e8       	ldi	r21, 0x80	; 128
    57f0:	21 c0       	rjmp	.+66     	; 0x5834 <__fixsfsi+0x98>
    57f2:	8e e1       	ldi	r24, 0x1E	; 30
    57f4:	90 e0       	ldi	r25, 0x00	; 0
    57f6:	82 1b       	sub	r24, r18
    57f8:	93 0b       	sbc	r25, r19
    57fa:	29 85       	ldd	r18, Y+9	; 0x09
    57fc:	3a 85       	ldd	r19, Y+10	; 0x0a
    57fe:	4b 85       	ldd	r20, Y+11	; 0x0b
    5800:	5c 85       	ldd	r21, Y+12	; 0x0c
    5802:	04 c0       	rjmp	.+8      	; 0x580c <__fixsfsi+0x70>
    5804:	56 95       	lsr	r21
    5806:	47 95       	ror	r20
    5808:	37 95       	ror	r19
    580a:	27 95       	ror	r18
    580c:	8a 95       	dec	r24
    580e:	d2 f7       	brpl	.-12     	; 0x5804 <__fixsfsi+0x68>
    5810:	66 23       	and	r22, r22
    5812:	81 f0       	breq	.+32     	; 0x5834 <__fixsfsi+0x98>
    5814:	50 95       	com	r21
    5816:	40 95       	com	r20
    5818:	30 95       	com	r19
    581a:	21 95       	neg	r18
    581c:	3f 4f       	sbci	r19, 0xFF	; 255
    581e:	4f 4f       	sbci	r20, 0xFF	; 255
    5820:	5f 4f       	sbci	r21, 0xFF	; 255
    5822:	08 c0       	rjmp	.+16     	; 0x5834 <__fixsfsi+0x98>
    5824:	20 e0       	ldi	r18, 0x00	; 0
    5826:	30 e0       	ldi	r19, 0x00	; 0
    5828:	a9 01       	movw	r20, r18
    582a:	04 c0       	rjmp	.+8      	; 0x5834 <__fixsfsi+0x98>
    582c:	2f ef       	ldi	r18, 0xFF	; 255
    582e:	3f ef       	ldi	r19, 0xFF	; 255
    5830:	4f ef       	ldi	r20, 0xFF	; 255
    5832:	5f e7       	ldi	r21, 0x7F	; 127
    5834:	b9 01       	movw	r22, r18
    5836:	ca 01       	movw	r24, r20
    5838:	2c 96       	adiw	r28, 0x0c	; 12
    583a:	e2 e0       	ldi	r30, 0x02	; 2
    583c:	0c 94 f7 2d 	jmp	0x5bee	; 0x5bee <__epilogue_restores__+0x20>

00005840 <__pack_f>:
    5840:	ef 92       	push	r14
    5842:	ff 92       	push	r15
    5844:	0f 93       	push	r16
    5846:	1f 93       	push	r17
    5848:	cf 93       	push	r28
    584a:	df 93       	push	r29
    584c:	fc 01       	movw	r30, r24
    584e:	24 81       	ldd	r18, Z+4	; 0x04
    5850:	35 81       	ldd	r19, Z+5	; 0x05
    5852:	46 81       	ldd	r20, Z+6	; 0x06
    5854:	57 81       	ldd	r21, Z+7	; 0x07
    5856:	61 81       	ldd	r22, Z+1	; 0x01
    5858:	80 81       	ld	r24, Z
    585a:	82 30       	cpi	r24, 0x02	; 2
    585c:	20 f4       	brcc	.+8      	; 0x5866 <__pack_f+0x26>
    585e:	40 61       	ori	r20, 0x10	; 16
    5860:	ef ef       	ldi	r30, 0xFF	; 255
    5862:	f0 e0       	ldi	r31, 0x00	; 0
    5864:	a3 c0       	rjmp	.+326    	; 0x59ac <__pack_f+0x16c>
    5866:	84 30       	cpi	r24, 0x04	; 4
    5868:	09 f4       	brne	.+2      	; 0x586c <__pack_f+0x2c>
    586a:	9b c0       	rjmp	.+310    	; 0x59a2 <__pack_f+0x162>
    586c:	82 30       	cpi	r24, 0x02	; 2
    586e:	09 f4       	brne	.+2      	; 0x5872 <__pack_f+0x32>
    5870:	92 c0       	rjmp	.+292    	; 0x5996 <__pack_f+0x156>
    5872:	21 15       	cp	r18, r1
    5874:	31 05       	cpc	r19, r1
    5876:	41 05       	cpc	r20, r1
    5878:	51 05       	cpc	r21, r1
    587a:	09 f4       	brne	.+2      	; 0x587e <__pack_f+0x3e>
    587c:	8f c0       	rjmp	.+286    	; 0x599c <__pack_f+0x15c>
    587e:	02 80       	ldd	r0, Z+2	; 0x02
    5880:	f3 81       	ldd	r31, Z+3	; 0x03
    5882:	e0 2d       	mov	r30, r0
    5884:	8f ef       	ldi	r24, 0xFF	; 255
    5886:	e2 38       	cpi	r30, 0x82	; 130
    5888:	f8 07       	cpc	r31, r24
    588a:	0c f0       	brlt	.+2      	; 0x588e <__pack_f+0x4e>
    588c:	5a c0       	rjmp	.+180    	; 0x5942 <__pack_f+0x102>
    588e:	c2 e8       	ldi	r28, 0x82	; 130
    5890:	df ef       	ldi	r29, 0xFF	; 255
    5892:	ce 1b       	sub	r28, r30
    5894:	df 0b       	sbc	r29, r31
    5896:	ca 31       	cpi	r28, 0x1A	; 26
    5898:	d1 05       	cpc	r29, r1
    589a:	6c f5       	brge	.+90     	; 0x58f6 <__pack_f+0xb6>
    589c:	79 01       	movw	r14, r18
    589e:	8a 01       	movw	r16, r20
    58a0:	0c 2e       	mov	r0, r28
    58a2:	04 c0       	rjmp	.+8      	; 0x58ac <__pack_f+0x6c>
    58a4:	16 95       	lsr	r17
    58a6:	07 95       	ror	r16
    58a8:	f7 94       	ror	r15
    58aa:	e7 94       	ror	r14
    58ac:	0a 94       	dec	r0
    58ae:	d2 f7       	brpl	.-12     	; 0x58a4 <__pack_f+0x64>
    58b0:	81 e0       	ldi	r24, 0x01	; 1
    58b2:	90 e0       	ldi	r25, 0x00	; 0
    58b4:	a0 e0       	ldi	r26, 0x00	; 0
    58b6:	b0 e0       	ldi	r27, 0x00	; 0
    58b8:	0c 2e       	mov	r0, r28
    58ba:	04 c0       	rjmp	.+8      	; 0x58c4 <__pack_f+0x84>
    58bc:	88 0f       	add	r24, r24
    58be:	99 1f       	adc	r25, r25
    58c0:	aa 1f       	adc	r26, r26
    58c2:	bb 1f       	adc	r27, r27
    58c4:	0a 94       	dec	r0
    58c6:	d2 f7       	brpl	.-12     	; 0x58bc <__pack_f+0x7c>
    58c8:	01 97       	sbiw	r24, 0x01	; 1
    58ca:	a1 09       	sbc	r26, r1
    58cc:	b1 09       	sbc	r27, r1
    58ce:	82 23       	and	r24, r18
    58d0:	93 23       	and	r25, r19
    58d2:	a4 23       	and	r26, r20
    58d4:	b5 23       	and	r27, r21
    58d6:	21 e0       	ldi	r18, 0x01	; 1
    58d8:	30 e0       	ldi	r19, 0x00	; 0
    58da:	40 e0       	ldi	r20, 0x00	; 0
    58dc:	50 e0       	ldi	r21, 0x00	; 0
    58de:	00 97       	sbiw	r24, 0x00	; 0
    58e0:	a1 05       	cpc	r26, r1
    58e2:	b1 05       	cpc	r27, r1
    58e4:	19 f4       	brne	.+6      	; 0x58ec <__pack_f+0xac>
    58e6:	20 e0       	ldi	r18, 0x00	; 0
    58e8:	30 e0       	ldi	r19, 0x00	; 0
    58ea:	a9 01       	movw	r20, r18
    58ec:	2e 29       	or	r18, r14
    58ee:	3f 29       	or	r19, r15
    58f0:	40 2b       	or	r20, r16
    58f2:	51 2b       	or	r21, r17
    58f4:	03 c0       	rjmp	.+6      	; 0x58fc <__pack_f+0xbc>
    58f6:	20 e0       	ldi	r18, 0x00	; 0
    58f8:	30 e0       	ldi	r19, 0x00	; 0
    58fa:	a9 01       	movw	r20, r18
    58fc:	da 01       	movw	r26, r20
    58fe:	c9 01       	movw	r24, r18
    5900:	8f 77       	andi	r24, 0x7F	; 127
    5902:	90 70       	andi	r25, 0x00	; 0
    5904:	a0 70       	andi	r26, 0x00	; 0
    5906:	b0 70       	andi	r27, 0x00	; 0
    5908:	80 34       	cpi	r24, 0x40	; 64
    590a:	91 05       	cpc	r25, r1
    590c:	a1 05       	cpc	r26, r1
    590e:	b1 05       	cpc	r27, r1
    5910:	39 f4       	brne	.+14     	; 0x5920 <__pack_f+0xe0>
    5912:	27 ff       	sbrs	r18, 7
    5914:	09 c0       	rjmp	.+18     	; 0x5928 <__pack_f+0xe8>
    5916:	20 5c       	subi	r18, 0xC0	; 192
    5918:	3f 4f       	sbci	r19, 0xFF	; 255
    591a:	4f 4f       	sbci	r20, 0xFF	; 255
    591c:	5f 4f       	sbci	r21, 0xFF	; 255
    591e:	04 c0       	rjmp	.+8      	; 0x5928 <__pack_f+0xe8>
    5920:	21 5c       	subi	r18, 0xC1	; 193
    5922:	3f 4f       	sbci	r19, 0xFF	; 255
    5924:	4f 4f       	sbci	r20, 0xFF	; 255
    5926:	5f 4f       	sbci	r21, 0xFF	; 255
    5928:	e1 e0       	ldi	r30, 0x01	; 1
    592a:	f0 e0       	ldi	r31, 0x00	; 0
    592c:	20 30       	cpi	r18, 0x00	; 0
    592e:	80 e0       	ldi	r24, 0x00	; 0
    5930:	38 07       	cpc	r19, r24
    5932:	80 e0       	ldi	r24, 0x00	; 0
    5934:	48 07       	cpc	r20, r24
    5936:	80 e4       	ldi	r24, 0x40	; 64
    5938:	58 07       	cpc	r21, r24
    593a:	28 f5       	brcc	.+74     	; 0x5986 <__pack_f+0x146>
    593c:	e0 e0       	ldi	r30, 0x00	; 0
    593e:	f0 e0       	ldi	r31, 0x00	; 0
    5940:	22 c0       	rjmp	.+68     	; 0x5986 <__pack_f+0x146>
    5942:	e0 38       	cpi	r30, 0x80	; 128
    5944:	f1 05       	cpc	r31, r1
    5946:	6c f5       	brge	.+90     	; 0x59a2 <__pack_f+0x162>
    5948:	e1 58       	subi	r30, 0x81	; 129
    594a:	ff 4f       	sbci	r31, 0xFF	; 255
    594c:	da 01       	movw	r26, r20
    594e:	c9 01       	movw	r24, r18
    5950:	8f 77       	andi	r24, 0x7F	; 127
    5952:	90 70       	andi	r25, 0x00	; 0
    5954:	a0 70       	andi	r26, 0x00	; 0
    5956:	b0 70       	andi	r27, 0x00	; 0
    5958:	80 34       	cpi	r24, 0x40	; 64
    595a:	91 05       	cpc	r25, r1
    595c:	a1 05       	cpc	r26, r1
    595e:	b1 05       	cpc	r27, r1
    5960:	39 f4       	brne	.+14     	; 0x5970 <__pack_f+0x130>
    5962:	27 ff       	sbrs	r18, 7
    5964:	09 c0       	rjmp	.+18     	; 0x5978 <__pack_f+0x138>
    5966:	20 5c       	subi	r18, 0xC0	; 192
    5968:	3f 4f       	sbci	r19, 0xFF	; 255
    596a:	4f 4f       	sbci	r20, 0xFF	; 255
    596c:	5f 4f       	sbci	r21, 0xFF	; 255
    596e:	04 c0       	rjmp	.+8      	; 0x5978 <__pack_f+0x138>
    5970:	21 5c       	subi	r18, 0xC1	; 193
    5972:	3f 4f       	sbci	r19, 0xFF	; 255
    5974:	4f 4f       	sbci	r20, 0xFF	; 255
    5976:	5f 4f       	sbci	r21, 0xFF	; 255
    5978:	57 ff       	sbrs	r21, 7
    597a:	05 c0       	rjmp	.+10     	; 0x5986 <__pack_f+0x146>
    597c:	56 95       	lsr	r21
    597e:	47 95       	ror	r20
    5980:	37 95       	ror	r19
    5982:	27 95       	ror	r18
    5984:	31 96       	adiw	r30, 0x01	; 1
    5986:	87 e0       	ldi	r24, 0x07	; 7
    5988:	56 95       	lsr	r21
    598a:	47 95       	ror	r20
    598c:	37 95       	ror	r19
    598e:	27 95       	ror	r18
    5990:	8a 95       	dec	r24
    5992:	d1 f7       	brne	.-12     	; 0x5988 <__pack_f+0x148>
    5994:	0b c0       	rjmp	.+22     	; 0x59ac <__pack_f+0x16c>
    5996:	e0 e0       	ldi	r30, 0x00	; 0
    5998:	f0 e0       	ldi	r31, 0x00	; 0
    599a:	05 c0       	rjmp	.+10     	; 0x59a6 <__pack_f+0x166>
    599c:	e0 e0       	ldi	r30, 0x00	; 0
    599e:	f0 e0       	ldi	r31, 0x00	; 0
    59a0:	05 c0       	rjmp	.+10     	; 0x59ac <__pack_f+0x16c>
    59a2:	ef ef       	ldi	r30, 0xFF	; 255
    59a4:	f0 e0       	ldi	r31, 0x00	; 0
    59a6:	20 e0       	ldi	r18, 0x00	; 0
    59a8:	30 e0       	ldi	r19, 0x00	; 0
    59aa:	a9 01       	movw	r20, r18
    59ac:	8e 2f       	mov	r24, r30
    59ae:	87 95       	ror	r24
    59b0:	88 27       	eor	r24, r24
    59b2:	87 95       	ror	r24
    59b4:	94 2f       	mov	r25, r20
    59b6:	9f 77       	andi	r25, 0x7F	; 127
    59b8:	67 95       	ror	r22
    59ba:	66 27       	eor	r22, r22
    59bc:	67 95       	ror	r22
    59be:	e6 95       	lsr	r30
    59c0:	e2 2e       	mov	r14, r18
    59c2:	a9 2f       	mov	r26, r25
    59c4:	a8 2b       	or	r26, r24
    59c6:	fe 2f       	mov	r31, r30
    59c8:	f6 2b       	or	r31, r22
    59ca:	62 2f       	mov	r22, r18
    59cc:	73 2f       	mov	r23, r19
    59ce:	8a 2f       	mov	r24, r26
    59d0:	9f 2f       	mov	r25, r31
    59d2:	cd b7       	in	r28, 0x3d	; 61
    59d4:	de b7       	in	r29, 0x3e	; 62
    59d6:	e6 e0       	ldi	r30, 0x06	; 6
    59d8:	0c 94 f3 2d 	jmp	0x5be6	; 0x5be6 <__epilogue_restores__+0x18>

000059dc <__unpack_f>:
    59dc:	dc 01       	movw	r26, r24
    59de:	fb 01       	movw	r30, r22
    59e0:	2c 91       	ld	r18, X
    59e2:	11 96       	adiw	r26, 0x01	; 1
    59e4:	3c 91       	ld	r19, X
    59e6:	11 97       	sbiw	r26, 0x01	; 1
    59e8:	12 96       	adiw	r26, 0x02	; 2
    59ea:	8c 91       	ld	r24, X
    59ec:	12 97       	sbiw	r26, 0x02	; 2
    59ee:	48 2f       	mov	r20, r24
    59f0:	4f 77       	andi	r20, 0x7F	; 127
    59f2:	50 e0       	ldi	r21, 0x00	; 0
    59f4:	98 2f       	mov	r25, r24
    59f6:	99 1f       	adc	r25, r25
    59f8:	99 27       	eor	r25, r25
    59fa:	99 1f       	adc	r25, r25
    59fc:	13 96       	adiw	r26, 0x03	; 3
    59fe:	6c 91       	ld	r22, X
    5a00:	13 97       	sbiw	r26, 0x03	; 3
    5a02:	86 2f       	mov	r24, r22
    5a04:	88 0f       	add	r24, r24
    5a06:	89 2b       	or	r24, r25
    5a08:	90 e0       	ldi	r25, 0x00	; 0
    5a0a:	66 1f       	adc	r22, r22
    5a0c:	66 27       	eor	r22, r22
    5a0e:	66 1f       	adc	r22, r22
    5a10:	61 83       	std	Z+1, r22	; 0x01
    5a12:	00 97       	sbiw	r24, 0x00	; 0
    5a14:	39 f5       	brne	.+78     	; 0x5a64 <__unpack_f+0x88>
    5a16:	21 15       	cp	r18, r1
    5a18:	31 05       	cpc	r19, r1
    5a1a:	41 05       	cpc	r20, r1
    5a1c:	51 05       	cpc	r21, r1
    5a1e:	11 f4       	brne	.+4      	; 0x5a24 <__unpack_f+0x48>
    5a20:	82 e0       	ldi	r24, 0x02	; 2
    5a22:	29 c0       	rjmp	.+82     	; 0x5a76 <__unpack_f+0x9a>
    5a24:	82 e8       	ldi	r24, 0x82	; 130
    5a26:	9f ef       	ldi	r25, 0xFF	; 255
    5a28:	93 83       	std	Z+3, r25	; 0x03
    5a2a:	82 83       	std	Z+2, r24	; 0x02
    5a2c:	67 e0       	ldi	r22, 0x07	; 7
    5a2e:	22 0f       	add	r18, r18
    5a30:	33 1f       	adc	r19, r19
    5a32:	44 1f       	adc	r20, r20
    5a34:	55 1f       	adc	r21, r21
    5a36:	6a 95       	dec	r22
    5a38:	d1 f7       	brne	.-12     	; 0x5a2e <__unpack_f+0x52>
    5a3a:	83 e0       	ldi	r24, 0x03	; 3
    5a3c:	80 83       	st	Z, r24
    5a3e:	09 c0       	rjmp	.+18     	; 0x5a52 <__unpack_f+0x76>
    5a40:	22 0f       	add	r18, r18
    5a42:	33 1f       	adc	r19, r19
    5a44:	44 1f       	adc	r20, r20
    5a46:	55 1f       	adc	r21, r21
    5a48:	82 81       	ldd	r24, Z+2	; 0x02
    5a4a:	93 81       	ldd	r25, Z+3	; 0x03
    5a4c:	01 97       	sbiw	r24, 0x01	; 1
    5a4e:	93 83       	std	Z+3, r25	; 0x03
    5a50:	82 83       	std	Z+2, r24	; 0x02
    5a52:	20 30       	cpi	r18, 0x00	; 0
    5a54:	80 e0       	ldi	r24, 0x00	; 0
    5a56:	38 07       	cpc	r19, r24
    5a58:	80 e0       	ldi	r24, 0x00	; 0
    5a5a:	48 07       	cpc	r20, r24
    5a5c:	80 e4       	ldi	r24, 0x40	; 64
    5a5e:	58 07       	cpc	r21, r24
    5a60:	78 f3       	brcs	.-34     	; 0x5a40 <__unpack_f+0x64>
    5a62:	20 c0       	rjmp	.+64     	; 0x5aa4 <__unpack_f+0xc8>
    5a64:	8f 3f       	cpi	r24, 0xFF	; 255
    5a66:	91 05       	cpc	r25, r1
    5a68:	79 f4       	brne	.+30     	; 0x5a88 <__unpack_f+0xac>
    5a6a:	21 15       	cp	r18, r1
    5a6c:	31 05       	cpc	r19, r1
    5a6e:	41 05       	cpc	r20, r1
    5a70:	51 05       	cpc	r21, r1
    5a72:	19 f4       	brne	.+6      	; 0x5a7a <__unpack_f+0x9e>
    5a74:	84 e0       	ldi	r24, 0x04	; 4
    5a76:	80 83       	st	Z, r24
    5a78:	08 95       	ret
    5a7a:	44 ff       	sbrs	r20, 4
    5a7c:	03 c0       	rjmp	.+6      	; 0x5a84 <__unpack_f+0xa8>
    5a7e:	81 e0       	ldi	r24, 0x01	; 1
    5a80:	80 83       	st	Z, r24
    5a82:	10 c0       	rjmp	.+32     	; 0x5aa4 <__unpack_f+0xc8>
    5a84:	10 82       	st	Z, r1
    5a86:	0e c0       	rjmp	.+28     	; 0x5aa4 <__unpack_f+0xc8>
    5a88:	8f 57       	subi	r24, 0x7F	; 127
    5a8a:	90 40       	sbci	r25, 0x00	; 0
    5a8c:	93 83       	std	Z+3, r25	; 0x03
    5a8e:	82 83       	std	Z+2, r24	; 0x02
    5a90:	83 e0       	ldi	r24, 0x03	; 3
    5a92:	80 83       	st	Z, r24
    5a94:	87 e0       	ldi	r24, 0x07	; 7
    5a96:	22 0f       	add	r18, r18
    5a98:	33 1f       	adc	r19, r19
    5a9a:	44 1f       	adc	r20, r20
    5a9c:	55 1f       	adc	r21, r21
    5a9e:	8a 95       	dec	r24
    5aa0:	d1 f7       	brne	.-12     	; 0x5a96 <__unpack_f+0xba>
    5aa2:	50 64       	ori	r21, 0x40	; 64
    5aa4:	24 83       	std	Z+4, r18	; 0x04
    5aa6:	35 83       	std	Z+5, r19	; 0x05
    5aa8:	46 83       	std	Z+6, r20	; 0x06
    5aaa:	57 83       	std	Z+7, r21	; 0x07
    5aac:	08 95       	ret

00005aae <__mulsi3>:
    5aae:	62 9f       	mul	r22, r18
    5ab0:	d0 01       	movw	r26, r0
    5ab2:	73 9f       	mul	r23, r19
    5ab4:	f0 01       	movw	r30, r0
    5ab6:	82 9f       	mul	r24, r18
    5ab8:	e0 0d       	add	r30, r0
    5aba:	f1 1d       	adc	r31, r1
    5abc:	64 9f       	mul	r22, r20
    5abe:	e0 0d       	add	r30, r0
    5ac0:	f1 1d       	adc	r31, r1
    5ac2:	92 9f       	mul	r25, r18
    5ac4:	f0 0d       	add	r31, r0
    5ac6:	83 9f       	mul	r24, r19
    5ac8:	f0 0d       	add	r31, r0
    5aca:	74 9f       	mul	r23, r20
    5acc:	f0 0d       	add	r31, r0
    5ace:	65 9f       	mul	r22, r21
    5ad0:	f0 0d       	add	r31, r0
    5ad2:	99 27       	eor	r25, r25
    5ad4:	72 9f       	mul	r23, r18
    5ad6:	b0 0d       	add	r27, r0
    5ad8:	e1 1d       	adc	r30, r1
    5ada:	f9 1f       	adc	r31, r25
    5adc:	63 9f       	mul	r22, r19
    5ade:	b0 0d       	add	r27, r0
    5ae0:	e1 1d       	adc	r30, r1
    5ae2:	f9 1f       	adc	r31, r25
    5ae4:	bd 01       	movw	r22, r26
    5ae6:	cf 01       	movw	r24, r30
    5ae8:	11 24       	eor	r1, r1
    5aea:	08 95       	ret

00005aec <__udivmodqi4>:
    5aec:	99 1b       	sub	r25, r25
    5aee:	79 e0       	ldi	r23, 0x09	; 9
    5af0:	04 c0       	rjmp	.+8      	; 0x5afa <__udivmodqi4_ep>

00005af2 <__udivmodqi4_loop>:
    5af2:	99 1f       	adc	r25, r25
    5af4:	96 17       	cp	r25, r22
    5af6:	08 f0       	brcs	.+2      	; 0x5afa <__udivmodqi4_ep>
    5af8:	96 1b       	sub	r25, r22

00005afa <__udivmodqi4_ep>:
    5afa:	88 1f       	adc	r24, r24
    5afc:	7a 95       	dec	r23
    5afe:	c9 f7       	brne	.-14     	; 0x5af2 <__udivmodqi4_loop>
    5b00:	80 95       	com	r24
    5b02:	08 95       	ret

00005b04 <__udivmodhi4>:
    5b04:	aa 1b       	sub	r26, r26
    5b06:	bb 1b       	sub	r27, r27
    5b08:	51 e1       	ldi	r21, 0x11	; 17
    5b0a:	07 c0       	rjmp	.+14     	; 0x5b1a <__udivmodhi4_ep>

00005b0c <__udivmodhi4_loop>:
    5b0c:	aa 1f       	adc	r26, r26
    5b0e:	bb 1f       	adc	r27, r27
    5b10:	a6 17       	cp	r26, r22
    5b12:	b7 07       	cpc	r27, r23
    5b14:	10 f0       	brcs	.+4      	; 0x5b1a <__udivmodhi4_ep>
    5b16:	a6 1b       	sub	r26, r22
    5b18:	b7 0b       	sbc	r27, r23

00005b1a <__udivmodhi4_ep>:
    5b1a:	88 1f       	adc	r24, r24
    5b1c:	99 1f       	adc	r25, r25
    5b1e:	5a 95       	dec	r21
    5b20:	a9 f7       	brne	.-22     	; 0x5b0c <__udivmodhi4_loop>
    5b22:	80 95       	com	r24
    5b24:	90 95       	com	r25
    5b26:	bc 01       	movw	r22, r24
    5b28:	cd 01       	movw	r24, r26
    5b2a:	08 95       	ret

00005b2c <__divmodhi4>:
    5b2c:	97 fb       	bst	r25, 7
    5b2e:	09 2e       	mov	r0, r25
    5b30:	07 26       	eor	r0, r23
    5b32:	0a d0       	rcall	.+20     	; 0x5b48 <__divmodhi4_neg1>
    5b34:	77 fd       	sbrc	r23, 7
    5b36:	04 d0       	rcall	.+8      	; 0x5b40 <__divmodhi4_neg2>
    5b38:	e5 df       	rcall	.-54     	; 0x5b04 <__udivmodhi4>
    5b3a:	06 d0       	rcall	.+12     	; 0x5b48 <__divmodhi4_neg1>
    5b3c:	00 20       	and	r0, r0
    5b3e:	1a f4       	brpl	.+6      	; 0x5b46 <__divmodhi4_exit>

00005b40 <__divmodhi4_neg2>:
    5b40:	70 95       	com	r23
    5b42:	61 95       	neg	r22
    5b44:	7f 4f       	sbci	r23, 0xFF	; 255

00005b46 <__divmodhi4_exit>:
    5b46:	08 95       	ret

00005b48 <__divmodhi4_neg1>:
    5b48:	f6 f7       	brtc	.-4      	; 0x5b46 <__divmodhi4_exit>
    5b4a:	90 95       	com	r25
    5b4c:	81 95       	neg	r24
    5b4e:	9f 4f       	sbci	r25, 0xFF	; 255
    5b50:	08 95       	ret

00005b52 <__udivmodsi4>:
    5b52:	a1 e2       	ldi	r26, 0x21	; 33
    5b54:	1a 2e       	mov	r1, r26
    5b56:	aa 1b       	sub	r26, r26
    5b58:	bb 1b       	sub	r27, r27
    5b5a:	fd 01       	movw	r30, r26
    5b5c:	0d c0       	rjmp	.+26     	; 0x5b78 <__udivmodsi4_ep>

00005b5e <__udivmodsi4_loop>:
    5b5e:	aa 1f       	adc	r26, r26
    5b60:	bb 1f       	adc	r27, r27
    5b62:	ee 1f       	adc	r30, r30
    5b64:	ff 1f       	adc	r31, r31
    5b66:	a2 17       	cp	r26, r18
    5b68:	b3 07       	cpc	r27, r19
    5b6a:	e4 07       	cpc	r30, r20
    5b6c:	f5 07       	cpc	r31, r21
    5b6e:	20 f0       	brcs	.+8      	; 0x5b78 <__udivmodsi4_ep>
    5b70:	a2 1b       	sub	r26, r18
    5b72:	b3 0b       	sbc	r27, r19
    5b74:	e4 0b       	sbc	r30, r20
    5b76:	f5 0b       	sbc	r31, r21

00005b78 <__udivmodsi4_ep>:
    5b78:	66 1f       	adc	r22, r22
    5b7a:	77 1f       	adc	r23, r23
    5b7c:	88 1f       	adc	r24, r24
    5b7e:	99 1f       	adc	r25, r25
    5b80:	1a 94       	dec	r1
    5b82:	69 f7       	brne	.-38     	; 0x5b5e <__udivmodsi4_loop>
    5b84:	60 95       	com	r22
    5b86:	70 95       	com	r23
    5b88:	80 95       	com	r24
    5b8a:	90 95       	com	r25
    5b8c:	9b 01       	movw	r18, r22
    5b8e:	ac 01       	movw	r20, r24
    5b90:	bd 01       	movw	r22, r26
    5b92:	cf 01       	movw	r24, r30
    5b94:	08 95       	ret

00005b96 <__prologue_saves__>:
    5b96:	2f 92       	push	r2
    5b98:	3f 92       	push	r3
    5b9a:	4f 92       	push	r4
    5b9c:	5f 92       	push	r5
    5b9e:	6f 92       	push	r6
    5ba0:	7f 92       	push	r7
    5ba2:	8f 92       	push	r8
    5ba4:	9f 92       	push	r9
    5ba6:	af 92       	push	r10
    5ba8:	bf 92       	push	r11
    5baa:	cf 92       	push	r12
    5bac:	df 92       	push	r13
    5bae:	ef 92       	push	r14
    5bb0:	ff 92       	push	r15
    5bb2:	0f 93       	push	r16
    5bb4:	1f 93       	push	r17
    5bb6:	cf 93       	push	r28
    5bb8:	df 93       	push	r29
    5bba:	cd b7       	in	r28, 0x3d	; 61
    5bbc:	de b7       	in	r29, 0x3e	; 62
    5bbe:	ca 1b       	sub	r28, r26
    5bc0:	db 0b       	sbc	r29, r27
    5bc2:	0f b6       	in	r0, 0x3f	; 63
    5bc4:	f8 94       	cli
    5bc6:	de bf       	out	0x3e, r29	; 62
    5bc8:	0f be       	out	0x3f, r0	; 63
    5bca:	cd bf       	out	0x3d, r28	; 61
    5bcc:	09 94       	ijmp

00005bce <__epilogue_restores__>:
    5bce:	2a 88       	ldd	r2, Y+18	; 0x12
    5bd0:	39 88       	ldd	r3, Y+17	; 0x11
    5bd2:	48 88       	ldd	r4, Y+16	; 0x10
    5bd4:	5f 84       	ldd	r5, Y+15	; 0x0f
    5bd6:	6e 84       	ldd	r6, Y+14	; 0x0e
    5bd8:	7d 84       	ldd	r7, Y+13	; 0x0d
    5bda:	8c 84       	ldd	r8, Y+12	; 0x0c
    5bdc:	9b 84       	ldd	r9, Y+11	; 0x0b
    5bde:	aa 84       	ldd	r10, Y+10	; 0x0a
    5be0:	b9 84       	ldd	r11, Y+9	; 0x09
    5be2:	c8 84       	ldd	r12, Y+8	; 0x08
    5be4:	df 80       	ldd	r13, Y+7	; 0x07
    5be6:	ee 80       	ldd	r14, Y+6	; 0x06
    5be8:	fd 80       	ldd	r15, Y+5	; 0x05
    5bea:	0c 81       	ldd	r16, Y+4	; 0x04
    5bec:	1b 81       	ldd	r17, Y+3	; 0x03
    5bee:	aa 81       	ldd	r26, Y+2	; 0x02
    5bf0:	b9 81       	ldd	r27, Y+1	; 0x01
    5bf2:	ce 0f       	add	r28, r30
    5bf4:	d1 1d       	adc	r29, r1
    5bf6:	0f b6       	in	r0, 0x3f	; 63
    5bf8:	f8 94       	cli
    5bfa:	de bf       	out	0x3e, r29	; 62
    5bfc:	0f be       	out	0x3f, r0	; 63
    5bfe:	cd bf       	out	0x3d, r28	; 61
    5c00:	ed 01       	movw	r28, r26
    5c02:	08 95       	ret

00005c04 <__tablejump2__>:
    5c04:	ee 0f       	add	r30, r30
    5c06:	ff 1f       	adc	r31, r31

00005c08 <__tablejump__>:
    5c08:	05 90       	lpm	r0, Z+
    5c0a:	f4 91       	lpm	r31, Z+
    5c0c:	e0 2d       	mov	r30, r0
    5c0e:	09 94       	ijmp

00005c10 <atoi>:
    5c10:	fc 01       	movw	r30, r24
    5c12:	88 27       	eor	r24, r24
    5c14:	99 27       	eor	r25, r25
    5c16:	e8 94       	clt
    5c18:	21 91       	ld	r18, Z+
    5c1a:	20 32       	cpi	r18, 0x20	; 32
    5c1c:	e9 f3       	breq	.-6      	; 0x5c18 <atoi+0x8>
    5c1e:	29 30       	cpi	r18, 0x09	; 9
    5c20:	10 f0       	brcs	.+4      	; 0x5c26 <atoi+0x16>
    5c22:	2e 30       	cpi	r18, 0x0E	; 14
    5c24:	c8 f3       	brcs	.-14     	; 0x5c18 <atoi+0x8>
    5c26:	2b 32       	cpi	r18, 0x2B	; 43
    5c28:	41 f0       	breq	.+16     	; 0x5c3a <atoi+0x2a>
    5c2a:	2d 32       	cpi	r18, 0x2D	; 45
    5c2c:	39 f4       	brne	.+14     	; 0x5c3c <atoi+0x2c>
    5c2e:	68 94       	set
    5c30:	04 c0       	rjmp	.+8      	; 0x5c3a <atoi+0x2a>
    5c32:	0e 94 47 2e 	call	0x5c8e	; 0x5c8e <__mulhi_const_10>
    5c36:	82 0f       	add	r24, r18
    5c38:	91 1d       	adc	r25, r1
    5c3a:	21 91       	ld	r18, Z+
    5c3c:	20 53       	subi	r18, 0x30	; 48
    5c3e:	2a 30       	cpi	r18, 0x0A	; 10
    5c40:	c0 f3       	brcs	.-16     	; 0x5c32 <atoi+0x22>
    5c42:	1e f4       	brtc	.+6      	; 0x5c4a <atoi+0x3a>
    5c44:	90 95       	com	r25
    5c46:	81 95       	neg	r24
    5c48:	9f 4f       	sbci	r25, 0xFF	; 255
    5c4a:	08 95       	ret

00005c4c <itoa>:
    5c4c:	fb 01       	movw	r30, r22
    5c4e:	9f 01       	movw	r18, r30
    5c50:	e8 94       	clt
    5c52:	42 30       	cpi	r20, 0x02	; 2
    5c54:	c4 f0       	brlt	.+48     	; 0x5c86 <itoa+0x3a>
    5c56:	45 32       	cpi	r20, 0x25	; 37
    5c58:	b4 f4       	brge	.+44     	; 0x5c86 <itoa+0x3a>
    5c5a:	4a 30       	cpi	r20, 0x0A	; 10
    5c5c:	29 f4       	brne	.+10     	; 0x5c68 <itoa+0x1c>
    5c5e:	97 fb       	bst	r25, 7
    5c60:	1e f4       	brtc	.+6      	; 0x5c68 <itoa+0x1c>
    5c62:	90 95       	com	r25
    5c64:	81 95       	neg	r24
    5c66:	9f 4f       	sbci	r25, 0xFF	; 255
    5c68:	64 2f       	mov	r22, r20
    5c6a:	77 27       	eor	r23, r23
    5c6c:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <__udivmodhi4>
    5c70:	80 5d       	subi	r24, 0xD0	; 208
    5c72:	8a 33       	cpi	r24, 0x3A	; 58
    5c74:	0c f0       	brlt	.+2      	; 0x5c78 <itoa+0x2c>
    5c76:	89 5d       	subi	r24, 0xD9	; 217
    5c78:	81 93       	st	Z+, r24
    5c7a:	cb 01       	movw	r24, r22
    5c7c:	00 97       	sbiw	r24, 0x00	; 0
    5c7e:	a1 f7       	brne	.-24     	; 0x5c68 <itoa+0x1c>
    5c80:	16 f4       	brtc	.+4      	; 0x5c86 <itoa+0x3a>
    5c82:	5d e2       	ldi	r21, 0x2D	; 45
    5c84:	51 93       	st	Z+, r21
    5c86:	10 82       	st	Z, r1
    5c88:	c9 01       	movw	r24, r18
    5c8a:	0c 94 4f 2e 	jmp	0x5c9e	; 0x5c9e <strrev>

00005c8e <__mulhi_const_10>:
    5c8e:	7a e0       	ldi	r23, 0x0A	; 10
    5c90:	97 9f       	mul	r25, r23
    5c92:	90 2d       	mov	r25, r0
    5c94:	87 9f       	mul	r24, r23
    5c96:	80 2d       	mov	r24, r0
    5c98:	91 0d       	add	r25, r1
    5c9a:	11 24       	eor	r1, r1
    5c9c:	08 95       	ret

00005c9e <strrev>:
    5c9e:	dc 01       	movw	r26, r24
    5ca0:	fc 01       	movw	r30, r24
    5ca2:	67 2f       	mov	r22, r23
    5ca4:	71 91       	ld	r23, Z+
    5ca6:	77 23       	and	r23, r23
    5ca8:	e1 f7       	brne	.-8      	; 0x5ca2 <strrev+0x4>
    5caa:	32 97       	sbiw	r30, 0x02	; 2
    5cac:	04 c0       	rjmp	.+8      	; 0x5cb6 <strrev+0x18>
    5cae:	7c 91       	ld	r23, X
    5cb0:	6d 93       	st	X+, r22
    5cb2:	70 83       	st	Z, r23
    5cb4:	62 91       	ld	r22, -Z
    5cb6:	ae 17       	cp	r26, r30
    5cb8:	bf 07       	cpc	r27, r31
    5cba:	c8 f3       	brcs	.-14     	; 0x5cae <strrev+0x10>
    5cbc:	08 95       	ret

00005cbe <_exit>:
    5cbe:	f8 94       	cli

00005cc0 <__stop_program>:
    5cc0:	ff cf       	rjmp	.-2      	; 0x5cc0 <__stop_program>
