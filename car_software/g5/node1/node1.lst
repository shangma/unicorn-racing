
node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ba  00800100  00005e8a  00005f1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005e8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000073a  008002ba  008002ba  000060d8  2**0
                  ALLOC
  3 .stab         000018c0  00000000  00000000  000060d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000152  00000000  00000000  00007998  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00007aea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000006de  00000000  00000000  00007caa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004ef7  00000000  00000000  00008388  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000154f  00000000  00000000  0000d27f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003650  00000000  00000000  0000e7ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005d0  00000000  00000000  00011e20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000eb9  00000000  00000000  000123f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003bd4  00000000  00000000  000132a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000198  00000000  00000000  00016e7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c4 00 	jmp	0x188	; 0x188 <__ctors_end>
       4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
       8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
       c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      10:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      14:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      18:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      1c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      20:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      24:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__vector_9>
      28:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      2c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      30:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      34:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      38:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      3c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      40:	0c 94 e0 25 	jmp	0x4bc0	; 0x4bc0 <__vector_16>
      44:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      48:	0c 94 83 27 	jmp	0x4f06	; 0x4f06 <__vector_18>
      4c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      50:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      54:	0c 94 46 25 	jmp	0x4a8c	; 0x4a8c <__vector_21>
      58:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      5c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      60:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      64:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      68:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      6c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      70:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      74:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      78:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      7c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      80:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      84:	0c 94 71 25 	jmp	0x4ae2	; 0x4ae2 <__vector_33>
      88:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      8c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      90:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      94:	c8 19       	sub	r28, r8
      96:	d5 19       	sub	r29, r5
      98:	36 1a       	sub	r3, r22
      9a:	3c 1a       	sub	r3, r28
      9c:	c5 19       	sub	r28, r5
      9e:	c5 19       	sub	r28, r5
      a0:	c5 19       	sub	r28, r5
      a2:	c5 19       	sub	r28, r5
      a4:	c5 19       	sub	r28, r5
      a6:	c5 19       	sub	r28, r5
      a8:	cf 1a       	sub	r12, r31
      aa:	d4 1a       	sub	r13, r20
      ac:	d6 1a       	sub	r13, r22
      ae:	e3 1a       	sub	r14, r19
      b0:	fc 1a       	sub	r15, r28
      b2:	93 1f       	adc	r25, r19
      b4:	0d 20       	and	r0, r13
      b6:	a7 20       	and	r10, r7
      b8:	01 21       	and	r16, r1
      ba:	3c 21       	and	r19, r12
      bc:	7c 21       	and	r23, r12
      be:	c3 21       	and	r28, r3
      c0:	58 22       	and	r5, r24
      c2:	e7 22       	and	r14, r23
      c4:	8f 1f       	adc	r24, r31
      c6:	d1 23       	and	r29, r17

000000c8 <__c.1991>:
      c8:	72 63 3d 25 64 0a 00                                rc=%d..

000000cf <__c.1989>:
      cf:	4f 70 65 6e 69 6e 67 20 66 69 6c 65 20 25 73 0a     Opening file %s.
	...

000000e0 <__c.1987>:
      e0:	46 72 65 65 20 6c 6f 67 20 6e 72 20 25 64 0a 00     Free log nr %d..

000000f0 <__c.1985>:
      f0:	72 63 3d 25 64 0a 00                                rc=%d..

000000f7 <__c.1983>:
      f7:	6f 70 65 6e 20 64 69 72 20 0a 00                    open dir ..

00000102 <__c.1981>:
     102:	72 63 3d 25 64 0a 00                                rc=%d..

00000109 <__c.1979>:
     109:	49 6e 69 74 69 61 6c 69 7a 65 20 6c 6f 67 69 63     Initialize logic
     119:	61 6c 20 64 72 69 63 65 20 30 0a 00                 al drice 0..

00000125 <__c.1977>:
     125:	72 63 3d 25 64 0a 00                                rc=%d..

0000012c <__c.1975>:
     12c:	74 65 73 74 32 20 25 64 20 25 64 20 25 64 20 25     test2 %d %d %d %
     13c:	64 0a 00                                            d..

0000013f <__c.1973>:
     13f:	74 65 73 74 20 25 64 20 25 64 20 25 64 20 25 64     test %d %d %d %d
     14f:	0a 00                                               ..

00000151 <__c.1971>:
     151:	49 6e 69 74 69 61 6c 69 7a 65 20 64 69 73 6b 20     Initialize disk 
     161:	30 0a 00                                            0..

00000164 <__c.1969>:
     164:	25 64 2d 25 64 2d 25 64 54 25 64 3a 25 64 3a 25     %d-%d-%dT%d:%d:%
     174:	64 0a 00                                            d..

00000177 <__c.1967>:
     177:	53 79 73 74 65 6d 20 73 74 61 72 74 65 74 0a 00     System startet..
	...

00000188 <__ctors_end>:
     188:	11 24       	eor	r1, r1
     18a:	1f be       	out	0x3f, r1	; 63
     18c:	cf ef       	ldi	r28, 0xFF	; 255
     18e:	d0 e1       	ldi	r29, 0x10	; 16
     190:	de bf       	out	0x3e, r29	; 62
     192:	cd bf       	out	0x3d, r28	; 61

00000194 <__do_copy_data>:
     194:	12 e0       	ldi	r17, 0x02	; 2
     196:	a0 e0       	ldi	r26, 0x00	; 0
     198:	b1 e0       	ldi	r27, 0x01	; 1
     19a:	ea e8       	ldi	r30, 0x8A	; 138
     19c:	fe e5       	ldi	r31, 0x5E	; 94
     19e:	00 e0       	ldi	r16, 0x00	; 0
     1a0:	0b bf       	out	0x3b, r16	; 59
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <__do_copy_data+0x14>
     1a4:	07 90       	elpm	r0, Z+
     1a6:	0d 92       	st	X+, r0
     1a8:	aa 3b       	cpi	r26, 0xBA	; 186
     1aa:	b1 07       	cpc	r27, r17
     1ac:	d9 f7       	brne	.-10     	; 0x1a4 <__do_copy_data+0x10>

000001ae <__do_clear_bss>:
     1ae:	19 e0       	ldi	r17, 0x09	; 9
     1b0:	aa eb       	ldi	r26, 0xBA	; 186
     1b2:	b2 e0       	ldi	r27, 0x02	; 2
     1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <.do_clear_bss_start>

000001b6 <.do_clear_bss_loop>:
     1b6:	1d 92       	st	X+, r1

000001b8 <.do_clear_bss_start>:
     1b8:	a4 3f       	cpi	r26, 0xF4	; 244
     1ba:	b1 07       	cpc	r27, r17
     1bc:	e1 f7       	brne	.-8      	; 0x1b6 <.do_clear_bss_loop>
     1be:	0e 94 43 01 	call	0x286	; 0x286 <main>
     1c2:	0c 94 43 2f 	jmp	0x5e86	; 0x5e86 <_exit>

000001c6 <__bad_interrupt>:
     1c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ca <get_fattime>:
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */
/* This is not required in read-only configuration.        */

DWORD get_fattime ()
{
     1ca:	a8 e0       	ldi	r26, 0x08	; 8
     1cc:	b0 e0       	ldi	r27, 0x00	; 0
     1ce:	eb ee       	ldi	r30, 0xEB	; 235
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	0c 94 bf 2e 	jmp	0x5d7e	; 0x5d7e <__prologue_saves__+0x20>
	RTC rtc;

	/* Get local time */
	rtc_gettime(&rtc);
     1d6:	ce 01       	movw	r24, r28
     1d8:	01 96       	adiw	r24, 0x01	; 1
     1da:	0e 94 8f 1b 	call	0x371e	; 0x371e <rtc_gettime>
     1de:	2c 81       	ldd	r18, Y+4	; 0x04
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	a9 01       	movw	r20, r18
     1e8:	33 27       	eor	r19, r19
     1ea:	22 27       	eor	r18, r18
     1ec:	8b 81       	ldd	r24, Y+3	; 0x03
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	a0 e0       	ldi	r26, 0x00	; 0
     1f2:	b0 e0       	ldi	r27, 0x00	; 0
     1f4:	f5 e1       	ldi	r31, 0x15	; 21
     1f6:	88 0f       	add	r24, r24
     1f8:	99 1f       	adc	r25, r25
     1fa:	aa 1f       	adc	r26, r26
     1fc:	bb 1f       	adc	r27, r27
     1fe:	fa 95       	dec	r31
     200:	d1 f7       	brne	.-12     	; 0x1f6 <get_fattime+0x2c>
     202:	28 2b       	or	r18, r24
     204:	39 2b       	or	r19, r25
     206:	4a 2b       	or	r20, r26
     208:	5b 2b       	or	r21, r27
     20a:	8e 81       	ldd	r24, Y+6	; 0x06
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e0       	ldi	r27, 0x00	; 0
     212:	eb e0       	ldi	r30, 0x0B	; 11
     214:	88 0f       	add	r24, r24
     216:	99 1f       	adc	r25, r25
     218:	aa 1f       	adc	r26, r26
     21a:	bb 1f       	adc	r27, r27
     21c:	ea 95       	dec	r30
     21e:	d1 f7       	brne	.-12     	; 0x214 <get_fattime+0x4a>
     220:	28 2b       	or	r18, r24
     222:	39 2b       	or	r19, r25
     224:	4a 2b       	or	r20, r26
     226:	5b 2b       	or	r21, r27
     228:	8f 81       	ldd	r24, Y+7	; 0x07
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	a0 e0       	ldi	r26, 0x00	; 0
     22e:	b0 e0       	ldi	r27, 0x00	; 0
     230:	75 e0       	ldi	r23, 0x05	; 5
     232:	88 0f       	add	r24, r24
     234:	99 1f       	adc	r25, r25
     236:	aa 1f       	adc	r26, r26
     238:	bb 1f       	adc	r27, r27
     23a:	7a 95       	dec	r23
     23c:	d1 f7       	brne	.-12     	; 0x232 <get_fattime+0x68>
     23e:	28 2b       	or	r18, r24
     240:	39 2b       	or	r19, r25
     242:	4a 2b       	or	r20, r26
     244:	5b 2b       	or	r21, r27
     246:	88 85       	ldd	r24, Y+8	; 0x08
     248:	86 95       	lsr	r24
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	a0 e0       	ldi	r26, 0x00	; 0
     24e:	b0 e0       	ldi	r27, 0x00	; 0
     250:	28 2b       	or	r18, r24
     252:	39 2b       	or	r19, r25
     254:	4a 2b       	or	r20, r26
     256:	5b 2b       	or	r21, r27
     258:	89 81       	ldd	r24, Y+1	; 0x01
     25a:	9a 81       	ldd	r25, Y+2	; 0x02
     25c:	8c 5b       	subi	r24, 0xBC	; 188
     25e:	97 40       	sbci	r25, 0x07	; 7
     260:	a0 e0       	ldi	r26, 0x00	; 0
     262:	b0 e0       	ldi	r27, 0x00	; 0
     264:	69 e1       	ldi	r22, 0x19	; 25
     266:	88 0f       	add	r24, r24
     268:	99 1f       	adc	r25, r25
     26a:	aa 1f       	adc	r26, r26
     26c:	bb 1f       	adc	r27, r27
     26e:	6a 95       	dec	r22
     270:	d1 f7       	brne	.-12     	; 0x266 <get_fattime+0x9c>
     272:	28 2b       	or	r18, r24
     274:	39 2b       	or	r19, r25
     276:	4a 2b       	or	r20, r26
     278:	5b 2b       	or	r21, r27
			| ((DWORD)rtc.month << 21)
			| ((DWORD)rtc.mday << 16)
			| ((DWORD)rtc.hour << 11)
			| ((DWORD)rtc.min << 5)
			| ((DWORD)rtc.sec >> 1);
}
     27a:	b9 01       	movw	r22, r18
     27c:	ca 01       	movw	r24, r20
     27e:	28 96       	adiw	r28, 0x08	; 8
     280:	e2 e0       	ldi	r30, 0x02	; 2
     282:	0c 94 db 2e 	jmp	0x5db6	; 0x5db6 <__epilogue_restores__+0x20>

00000286 <main>:
}

/*-----------------------------------------------------------------------*/
/* Main                                                                  */
int main (void)
{
     286:	ae e5       	ldi	r26, 0x5E	; 94
     288:	b0 e0       	ldi	r27, 0x00	; 0
     28a:	e9 e4       	ldi	r30, 0x49	; 73
     28c:	f1 e0       	ldi	r31, 0x01	; 1
     28e:	0c 94 bb 2e 	jmp	0x5d76	; 0x5d76 <__prologue_saves__+0x18>
	int i;
	// Recieve buffer
	U8 rpm_response_buffer[8];
	st_cmd_t rpm_msg;
	
	TWI_init();	/* Init TWI interface */
     292:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <TWI_init>

static
void IoInit ()
{
	/* Timer2 used for filesystem functions */
	OCR2A = 90-1;      // Timer2: 100Hz interval (OC2)
     296:	89 e5       	ldi	r24, 0x59	; 89
     298:	80 93 b3 00 	sts	0x00B3, r24
	TCCR2A = 0b00001101;
     29c:	8d e0       	ldi	r24, 0x0D	; 13
     29e:	80 93 b0 00 	sts	0x00B0, r24
	TIMSK2 = 0b00000010;   // Enable TC2.oc interrupt
     2a2:	82 e0       	ldi	r24, 0x02	; 2
     2a4:	80 93 70 00 	sts	0x0070, r24

	/* Timer0 bruges til at sende data req til ECU */
	OCR0A = 100;			// Sæt start værdi
     2a8:	84 e6       	ldi	r24, 0x64	; 100
     2aa:	87 bd       	out	0x27, r24	; 39
	TCCR0A |= 1<<CS02 | 1<<CS00;    // prescaler til 1024
     2ac:	84 b5       	in	r24, 0x24	; 36
     2ae:	85 60       	ori	r24, 0x05	; 5
     2b0:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= 1<<OCIE0A; 		// Slår timer compare match interrupt til
     2b2:	80 91 6e 00 	lds	r24, 0x006E
     2b6:	82 60       	ori	r24, 0x02	; 2
     2b8:	80 93 6e 00 	sts	0x006E, r24

	rtc_init();         // Initialize RTC
     2bc:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <rtc_init>
	can_init(0);		/* Initialize can controllor */
     2c0:	80 e0       	ldi	r24, 0x00	; 0
     2c2:	0e 94 81 24 	call	0x4902	; 0x4902 <can_init>
	uart_init();		/* Initialize uart 0 and 1 for ecu and xbee */
     2c6:	0e 94 8d 03 	call	0x71a	; 0x71a <uart_init>
	
	TWI_init();	/* Init TWI interface */
	IoInit();

	/* Join xitoa module to uart module */
	xfunc_out = (void (*)(char))uart_put;		/* xprintf writes to uart connected to the xbee */
     2ca:	8c eb       	ldi	r24, 0xBC	; 188
     2cc:	93 e0       	ldi	r25, 0x03	; 3
     2ce:	90 93 cf 02 	sts	0x02CF, r25
     2d2:	80 93 ce 02 	sts	0x02CE, r24
     2d6:	88 e8       	ldi	r24, 0x88	; 136
     2d8:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2da:	24 e1       	ldi	r18, 0x14	; 20
     2dc:	31 e0       	ldi	r19, 0x01	; 1
     2de:	f9 01       	movw	r30, r18
     2e0:	31 97       	sbiw	r30, 0x01	; 1
     2e2:	f1 f7       	brne	.-4      	; 0x2e0 <main+0x5a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2e4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2e6:	d9 f7       	brne	.-10     	; 0x2de <main+0x58>

	_delay_ms(500);
	xprintf(PSTR("System startet\n"));
     2e8:	00 d0       	rcall	.+0      	; 0x2ea <main+0x64>
     2ea:	87 e7       	ldi	r24, 0x77	; 119
     2ec:	91 e0       	ldi	r25, 0x01	; 1
     2ee:	ad b7       	in	r26, 0x3d	; 61
     2f0:	be b7       	in	r27, 0x3e	; 62
     2f2:	12 96       	adiw	r26, 0x02	; 2
     2f4:	9c 93       	st	X, r25
     2f6:	8e 93       	st	-X, r24
     2f8:	11 97       	sbiw	r26, 0x01	; 1
     2fa:	0e 94 91 28 	call	0x5122	; 0x5122 <xprintf>

	res = rtc_gettime(&rtc);
     2fe:	0f 90       	pop	r0
     300:	0f 90       	pop	r0
     302:	ce 01       	movw	r24, r28
     304:	01 96       	adiw	r24, 0x01	; 1
     306:	0e 94 8f 1b 	call	0x371e	; 0x371e <rtc_gettime>
	xprintf(PSTR("%d-%d-%dT%d:%d:%d\n"), rtc.year, rtc.month, rtc.mday, rtc.hour, rtc.min, rtc.sec);
     30a:	ed b7       	in	r30, 0x3d	; 61
     30c:	fe b7       	in	r31, 0x3e	; 62
     30e:	3e 97       	sbiw	r30, 0x0e	; 14
     310:	0f b6       	in	r0, 0x3f	; 63
     312:	f8 94       	cli
     314:	fe bf       	out	0x3e, r31	; 62
     316:	0f be       	out	0x3f, r0	; 63
     318:	ed bf       	out	0x3d, r30	; 61
     31a:	31 96       	adiw	r30, 0x01	; 1
     31c:	84 e6       	ldi	r24, 0x64	; 100
     31e:	91 e0       	ldi	r25, 0x01	; 1
     320:	ad b7       	in	r26, 0x3d	; 61
     322:	be b7       	in	r27, 0x3e	; 62
     324:	12 96       	adiw	r26, 0x02	; 2
     326:	9c 93       	st	X, r25
     328:	8e 93       	st	-X, r24
     32a:	11 97       	sbiw	r26, 0x01	; 1
     32c:	89 81       	ldd	r24, Y+1	; 0x01
     32e:	9a 81       	ldd	r25, Y+2	; 0x02
     330:	93 83       	std	Z+3, r25	; 0x03
     332:	82 83       	std	Z+2, r24	; 0x02
     334:	8b 81       	ldd	r24, Y+3	; 0x03
     336:	84 83       	std	Z+4, r24	; 0x04
     338:	15 82       	std	Z+5, r1	; 0x05
     33a:	8c 81       	ldd	r24, Y+4	; 0x04
     33c:	86 83       	std	Z+6, r24	; 0x06
     33e:	17 82       	std	Z+7, r1	; 0x07
     340:	8e 81       	ldd	r24, Y+6	; 0x06
     342:	80 87       	std	Z+8, r24	; 0x08
     344:	11 86       	std	Z+9, r1	; 0x09
     346:	8f 81       	ldd	r24, Y+7	; 0x07
     348:	82 87       	std	Z+10, r24	; 0x0a
     34a:	13 86       	std	Z+11, r1	; 0x0b
     34c:	88 85       	ldd	r24, Y+8	; 0x08
     34e:	84 87       	std	Z+12, r24	; 0x0c
     350:	15 86       	std	Z+13, r1	; 0x0d
     352:	0e 94 91 28 	call	0x5122	; 0x5122 <xprintf>

	xprintf(PSTR("Initialize disk 0\n"));
     356:	ed b7       	in	r30, 0x3d	; 61
     358:	fe b7       	in	r31, 0x3e	; 62
     35a:	3c 96       	adiw	r30, 0x0c	; 12
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	f8 94       	cli
     360:	fe bf       	out	0x3e, r31	; 62
     362:	0f be       	out	0x3f, r0	; 63
     364:	ed bf       	out	0x3d, r30	; 61
     366:	81 e5       	ldi	r24, 0x51	; 81
     368:	91 e0       	ldi	r25, 0x01	; 1
     36a:	92 83       	std	Z+2, r25	; 0x02
     36c:	81 83       	std	Z+1, r24	; 0x01
     36e:	0e 94 91 28 	call	0x5122	; 0x5122 <xprintf>
	xprintf(PSTR("test %d %d %d %d\n"), ECUObjects[0].length, ECUObjects[0].id, ECUObjects[1].length, ECUObjects[1].id);
     372:	8d b7       	in	r24, 0x3d	; 61
     374:	9e b7       	in	r25, 0x3e	; 62
     376:	08 97       	sbiw	r24, 0x08	; 8
     378:	0f b6       	in	r0, 0x3f	; 63
     37a:	f8 94       	cli
     37c:	9e bf       	out	0x3e, r25	; 62
     37e:	0f be       	out	0x3f, r0	; 63
     380:	8d bf       	out	0x3d, r24	; 61
     382:	ed b7       	in	r30, 0x3d	; 61
     384:	fe b7       	in	r31, 0x3e	; 62
     386:	31 96       	adiw	r30, 0x01	; 1
     388:	8f e3       	ldi	r24, 0x3F	; 63
     38a:	91 e0       	ldi	r25, 0x01	; 1
     38c:	ad b7       	in	r26, 0x3d	; 61
     38e:	be b7       	in	r27, 0x3e	; 62
     390:	12 96       	adiw	r26, 0x02	; 2
     392:	9c 93       	st	X, r25
     394:	8e 93       	st	-X, r24
     396:	11 97       	sbiw	r26, 0x01	; 1
     398:	22 e0       	ldi	r18, 0x02	; 2
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	33 83       	std	Z+3, r19	; 0x03
     39e:	22 83       	std	Z+2, r18	; 0x02
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	95 83       	std	Z+5, r25	; 0x05
     3a6:	84 83       	std	Z+4, r24	; 0x04
     3a8:	37 83       	std	Z+7, r19	; 0x07
     3aa:	26 83       	std	Z+6, r18	; 0x06
     3ac:	31 87       	std	Z+9, r19	; 0x09
     3ae:	20 87       	std	Z+8, r18	; 0x08
     3b0:	0e 94 91 28 	call	0x5122	; 0x5122 <xprintf>
	xprintf(PSTR("test2 %d %d %d %d\n"), valueObjects[ECUObjects[0].id].length, valueObjects[ECUObjects[0].id].action, valueObjects[ECUObjects[1].id].length, valueObjects[ECUObjects[1].id].action);
     3b4:	ed b7       	in	r30, 0x3d	; 61
     3b6:	fe b7       	in	r31, 0x3e	; 62
     3b8:	31 96       	adiw	r30, 0x01	; 1
     3ba:	8c e2       	ldi	r24, 0x2C	; 44
     3bc:	91 e0       	ldi	r25, 0x01	; 1
     3be:	ad b7       	in	r26, 0x3d	; 61
     3c0:	be b7       	in	r27, 0x3e	; 62
     3c2:	12 96       	adiw	r26, 0x02	; 2
     3c4:	9c 93       	st	X, r25
     3c6:	8e 93       	st	-X, r24
     3c8:	11 97       	sbiw	r26, 0x01	; 1
     3ca:	80 e1       	ldi	r24, 0x10	; 16
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	93 83       	std	Z+3, r25	; 0x03
     3d0:	82 83       	std	Z+2, r24	; 0x02
     3d2:	15 82       	std	Z+5, r1	; 0x05
     3d4:	14 82       	std	Z+4, r1	; 0x04
     3d6:	97 83       	std	Z+7, r25	; 0x07
     3d8:	86 83       	std	Z+6, r24	; 0x06
     3da:	11 86       	std	Z+9, r1	; 0x09
     3dc:	10 86       	std	Z+8, r1	; 0x08
     3de:	0e 94 91 28 	call	0x5122	; 0x5122 <xprintf>
	xprintf(PSTR("rc=%d\n"), (WORD)disk_initialize(0));		/* initialize filesystem */
     3e2:	ed b7       	in	r30, 0x3d	; 61
     3e4:	fe b7       	in	r31, 0x3e	; 62
     3e6:	3a 96       	adiw	r30, 0x0a	; 10
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	f8 94       	cli
     3ec:	fe bf       	out	0x3e, r31	; 62
     3ee:	0f be       	out	0x3f, r0	; 63
     3f0:	ed bf       	out	0x3d, r30	; 61
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <disk_initialize>
     3f8:	00 d0       	rcall	.+0      	; 0x3fa <main+0x174>
     3fa:	00 d0       	rcall	.+0      	; 0x3fc <main+0x176>
     3fc:	ed b7       	in	r30, 0x3d	; 61
     3fe:	fe b7       	in	r31, 0x3e	; 62
     400:	31 96       	adiw	r30, 0x01	; 1
     402:	25 e2       	ldi	r18, 0x25	; 37
     404:	31 e0       	ldi	r19, 0x01	; 1
     406:	ad b7       	in	r26, 0x3d	; 61
     408:	be b7       	in	r27, 0x3e	; 62
     40a:	12 96       	adiw	r26, 0x02	; 2
     40c:	3c 93       	st	X, r19
     40e:	2e 93       	st	-X, r18
     410:	11 97       	sbiw	r26, 0x01	; 1
     412:	82 83       	std	Z+2, r24	; 0x02
     414:	13 82       	std	Z+3, r1	; 0x03
     416:	0e 94 91 28 	call	0x5122	; 0x5122 <xprintf>
	xprintf(PSTR("Initialize logical drice 0\n"));	
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	89 e0       	ldi	r24, 0x09	; 9
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	ed b7       	in	r30, 0x3d	; 61
     424:	fe b7       	in	r31, 0x3e	; 62
     426:	92 83       	std	Z+2, r25	; 0x02
     428:	81 83       	std	Z+1, r24	; 0x01
     42a:	0e 94 91 28 	call	0x5122	; 0x5122 <xprintf>
	xprintf(PSTR("rc=%d\n"), (WORD)f_mount(0, &Fatfs[0]));		/* mount filesystem */
     42e:	0f 90       	pop	r0
     430:	0f 90       	pop	r0
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	60 ed       	ldi	r22, 0xD0	; 208
     436:	72 e0       	ldi	r23, 0x02	; 2
     438:	0e 94 21 04 	call	0x842	; 0x842 <f_mount>
     43c:	00 d0       	rcall	.+0      	; 0x43e <main+0x1b8>
     43e:	00 d0       	rcall	.+0      	; 0x440 <main+0x1ba>
     440:	22 e0       	ldi	r18, 0x02	; 2
     442:	31 e0       	ldi	r19, 0x01	; 1
     444:	ad b7       	in	r26, 0x3d	; 61
     446:	be b7       	in	r27, 0x3e	; 62
     448:	12 96       	adiw	r26, 0x02	; 2
     44a:	3c 93       	st	X, r19
     44c:	2e 93       	st	-X, r18
     44e:	11 97       	sbiw	r26, 0x01	; 1
     450:	14 96       	adiw	r26, 0x04	; 4
     452:	9c 93       	st	X, r25
     454:	8e 93       	st	-X, r24
     456:	13 97       	sbiw	r26, 0x03	; 3
     458:	0e 94 91 28 	call	0x5122	; 0x5122 <xprintf>
	xprintf(PSTR("open dir \n")); 
     45c:	0f 90       	pop	r0
     45e:	0f 90       	pop	r0
     460:	87 ef       	ldi	r24, 0xF7	; 247
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	ed b7       	in	r30, 0x3d	; 61
     466:	fe b7       	in	r31, 0x3e	; 62
     468:	92 83       	std	Z+2, r25	; 0x02
     46a:	81 83       	std	Z+1, r24	; 0x01
     46c:	0e 94 91 28 	call	0x5122	; 0x5122 <xprintf>
	xprintf(PSTR("rc=%d\n"), f_opendir(&dir, "0:"));	/* open root dir on fs */
     470:	0f 90       	pop	r0
     472:	0f 90       	pop	r0
     474:	8e 01       	movw	r16, r28
     476:	07 5d       	subi	r16, 0xD7	; 215
     478:	1f 4f       	sbci	r17, 0xFF	; 255
     47a:	c8 01       	movw	r24, r16
     47c:	60 e0       	ldi	r22, 0x00	; 0
     47e:	71 e0       	ldi	r23, 0x01	; 1
     480:	0e 94 36 14 	call	0x286c	; 0x286c <f_opendir>
     484:	00 d0       	rcall	.+0      	; 0x486 <main+0x200>
     486:	00 d0       	rcall	.+0      	; 0x488 <main+0x202>
     488:	20 ef       	ldi	r18, 0xF0	; 240
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	ad b7       	in	r26, 0x3d	; 61
     48e:	be b7       	in	r27, 0x3e	; 62
     490:	12 96       	adiw	r26, 0x02	; 2
     492:	3c 93       	st	X, r19
     494:	2e 93       	st	-X, r18
     496:	11 97       	sbiw	r26, 0x01	; 1
     498:	14 96       	adiw	r26, 0x04	; 4
     49a:	9c 93       	st	X, r25
     49c:	8e 93       	st	-X, r24
     49e:	13 97       	sbiw	r26, 0x03	; 3
     4a0:	0e 94 91 28 	call	0x5122	; 0x5122 <xprintf>
	freelognumber = get_free_log_number(&dir);		/* Get lowest free log number */
     4a4:	0f 90       	pop	r0
     4a6:	0f 90       	pop	r0
     4a8:	0f 90       	pop	r0
     4aa:	0f 90       	pop	r0
     4ac:	c8 01       	movw	r24, r16
     4ae:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <get_free_log_number>
     4b2:	7c 01       	movw	r14, r24
	xprintf(PSTR("Free log nr %d\n"), freelognumber);
     4b4:	00 d0       	rcall	.+0      	; 0x4b6 <main+0x230>
     4b6:	00 d0       	rcall	.+0      	; 0x4b8 <main+0x232>
     4b8:	80 ee       	ldi	r24, 0xE0	; 224
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	ed b7       	in	r30, 0x3d	; 61
     4be:	fe b7       	in	r31, 0x3e	; 62
     4c0:	92 83       	std	Z+2, r25	; 0x02
     4c2:	81 83       	std	Z+1, r24	; 0x01
     4c4:	f4 82       	std	Z+4, r15	; 0x04
     4c6:	e3 82       	std	Z+3, r14	; 0x03
     4c8:	0e 94 91 28 	call	0x5122	; 0x5122 <xprintf>
	itoa(freelognumber, filename, 10);			/* Convert to string for use in f_open() */
     4cc:	0f 90       	pop	r0
     4ce:	0f 90       	pop	r0
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	8e 01       	movw	r16, r28
     4d6:	0f 5e       	subi	r16, 0xEF	; 239
     4d8:	1f 4f       	sbci	r17, 0xFF	; 255
     4da:	c7 01       	movw	r24, r14
     4dc:	b8 01       	movw	r22, r16
     4de:	4a e0       	ldi	r20, 0x0A	; 10
     4e0:	50 e0       	ldi	r21, 0x00	; 0
     4e2:	0e 94 0a 2f 	call	0x5e14	; 0x5e14 <itoa>
	xprintf(PSTR("Opening file %s\n"), filename);
     4e6:	00 d0       	rcall	.+0      	; 0x4e8 <main+0x262>
     4e8:	00 d0       	rcall	.+0      	; 0x4ea <main+0x264>
     4ea:	8f ec       	ldi	r24, 0xCF	; 207
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	ad b7       	in	r26, 0x3d	; 61
     4f0:	be b7       	in	r27, 0x3e	; 62
     4f2:	12 96       	adiw	r26, 0x02	; 2
     4f4:	9c 93       	st	X, r25
     4f6:	8e 93       	st	-X, r24
     4f8:	11 97       	sbiw	r26, 0x01	; 1
     4fa:	14 96       	adiw	r26, 0x04	; 4
     4fc:	1c 93       	st	X, r17
     4fe:	0e 93       	st	-X, r16
     500:	13 97       	sbiw	r26, 0x03	; 3
     502:	0e 94 91 28 	call	0x5122	; 0x5122 <xprintf>
	xprintf(PSTR("rc=%d\n"), (WORD)f_open(&file1, filename, FA_CREATE_NEW | FA_WRITE));	/* Create new logfile for writing */
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	bf e3       	ldi	r27, 0x3F	; 63
     510:	eb 2e       	mov	r14, r27
     512:	f1 2c       	mov	r15, r1
     514:	ec 0e       	add	r14, r28
     516:	fd 1e       	adc	r15, r29
     518:	c7 01       	movw	r24, r14
     51a:	b8 01       	movw	r22, r16
     51c:	46 e0       	ldi	r20, 0x06	; 6
     51e:	0e 94 e6 14 	call	0x29cc	; 0x29cc <f_open>
     522:	00 d0       	rcall	.+0      	; 0x524 <main+0x29e>
     524:	00 d0       	rcall	.+0      	; 0x526 <main+0x2a0>
     526:	28 ec       	ldi	r18, 0xC8	; 200
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	ed b7       	in	r30, 0x3d	; 61
     52c:	fe b7       	in	r31, 0x3e	; 62
     52e:	32 83       	std	Z+2, r19	; 0x02
     530:	21 83       	std	Z+1, r18	; 0x01
     532:	94 83       	std	Z+4, r25	; 0x04
     534:	83 83       	std	Z+3, r24	; 0x03
     536:	0e 94 91 28 	call	0x5122	; 0x5122 <xprintf>
	f_sync(&file1);			/* Sync filesystem to write changes to disk */
     53a:	0f 90       	pop	r0
     53c:	0f 90       	pop	r0
     53e:	0f 90       	pop	r0
     540:	0f 90       	pop	r0
     542:	c7 01       	movw	r24, r14
     544:	0e 94 b3 11 	call	0x2366	; 0x2366 <f_sync>
     548:	80 e1       	ldi	r24, 0x10	; 16
     54a:	97 e2       	ldi	r25, 0x27	; 39
     54c:	24 e1       	ldi	r18, 0x14	; 20
     54e:	31 e0       	ldi	r19, 0x01	; 1
     550:	f9 01       	movw	r30, r18
     552:	31 97       	sbiw	r30, 0x01	; 1
     554:	f1 f7       	brne	.-4      	; 0x552 <main+0x2cc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     556:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     558:	d9 f7       	brne	.-10     	; 0x550 <main+0x2ca>
	_delay_ms(1000);

	/*
	 *	Kode til hurtig test af can 
	 */
	rpm_msg.pt_data = rpm_response_buffer;
     55a:	ce 01       	movw	r24, r28
     55c:	09 96       	adiw	r24, 0x09	; 9
     55e:	9c a3       	std	Y+36, r25	; 0x24
     560:	8b a3       	std	Y+35, r24	; 0x23
	rpm_msg.status = 0;
     562:	1d a2       	std	Y+37, r1	; 0x25

	can_update_rx_msg(&rpm_msg, rpm_msgid, 8);
     564:	ce 01       	movw	r24, r28
     566:	4b 96       	adiw	r24, 0x1b	; 27
     568:	65 e8       	ldi	r22, 0x85	; 133
     56a:	48 e0       	ldi	r20, 0x08	; 8
     56c:	0e 94 b0 24 	call	0x4960	; 0x4960 <can_update_rx_msg>

	sei();				/* Enable interrupt */
     570:	78 94       	sei


	QUEUE_INIT(xbee_q);
     572:	10 92 25 09 	sts	0x0925, r1
     576:	10 92 24 09 	sts	0x0924, r1
     57a:	10 92 23 09 	sts	0x0923, r1
     57e:	10 92 22 09 	sts	0x0922, r1
     582:	10 92 28 09 	sts	0x0928, r1
     586:	89 e7       	ldi	r24, 0x79	; 121
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	90 93 27 09 	sts	0x0927, r25
     58e:	80 93 26 09 	sts	0x0926, r24
     592:	04 e1       	ldi	r16, 0x14	; 20
     594:	11 e0       	ldi	r17, 0x01	; 1
	while(1) {
		ecu_data_handler();
     596:	0e 94 39 27 	call	0x4e72	; 0x4e72 <ecu_data_handler>
     59a:	88 ee       	ldi	r24, 0xE8	; 232
     59c:	93 e0       	ldi	r25, 0x03	; 3
     59e:	f8 01       	movw	r30, r16
     5a0:	31 97       	sbiw	r30, 0x01	; 1
     5a2:	f1 f7       	brne	.-4      	; 0x5a0 <main+0x31a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5a6:	d9 f7       	brne	.-10     	; 0x59e <main+0x318>
     5a8:	f6 cf       	rjmp	.-20     	; 0x596 <main+0x310>

000005aa <__vector_9>:
/*---------------------------------------------------------*/
/* 100Hz timer interrupt generated by OC2                  */
/*---------------------------------------------------------*/

ISR(TIMER2_COMP_vect)
{
     5aa:	1f 92       	push	r1
     5ac:	0f 92       	push	r0
     5ae:	0f b6       	in	r0, 0x3f	; 63
     5b0:	0f 92       	push	r0
     5b2:	0b b6       	in	r0, 0x3b	; 59
     5b4:	0f 92       	push	r0
     5b6:	11 24       	eor	r1, r1
     5b8:	2f 93       	push	r18
     5ba:	3f 93       	push	r19
     5bc:	4f 93       	push	r20
     5be:	5f 93       	push	r21
     5c0:	6f 93       	push	r22
     5c2:	7f 93       	push	r23
     5c4:	8f 93       	push	r24
     5c6:	9f 93       	push	r25
     5c8:	af 93       	push	r26
     5ca:	bf 93       	push	r27
     5cc:	ef 93       	push	r30
     5ce:	ff 93       	push	r31
	Timer++;			/* Performance counter for this module */
     5d0:	80 91 1c 05 	lds	r24, 0x051C
     5d4:	90 91 1d 05 	lds	r25, 0x051D
     5d8:	01 96       	adiw	r24, 0x01	; 1
     5da:	90 93 1d 05 	sts	0x051D, r25
     5de:	80 93 1c 05 	sts	0x051C, r24
	disk_timerproc();	/* Drive timer procedure of low level disk I/O module */
     5e2:	0e 94 25 1b 	call	0x364a	; 0x364a <disk_timerproc>
}
     5e6:	ff 91       	pop	r31
     5e8:	ef 91       	pop	r30
     5ea:	bf 91       	pop	r27
     5ec:	af 91       	pop	r26
     5ee:	9f 91       	pop	r25
     5f0:	8f 91       	pop	r24
     5f2:	7f 91       	pop	r23
     5f4:	6f 91       	pop	r22
     5f6:	5f 91       	pop	r21
     5f8:	4f 91       	pop	r20
     5fa:	3f 91       	pop	r19
     5fc:	2f 91       	pop	r18
     5fe:	0f 90       	pop	r0
     600:	0b be       	out	0x3b, r0	; 59
     602:	0f 90       	pop	r0
     604:	0f be       	out	0x3f, r0	; 63
     606:	0f 90       	pop	r0
     608:	1f 90       	pop	r1
     60a:	18 95       	reti

0000060c <USART0_Transmit>:
#include <avr/interrupt.h>
#include "config.h"
#include "uart.h"

void USART0_Transmit( unsigned char txData )
{
     60c:	98 2f       	mov	r25, r24
   /* Wait for empty transmit buffer */
   while ( !( UCSR0A & (1<<UDRE0)) );
     60e:	80 91 c0 00 	lds	r24, 0x00C0
     612:	85 ff       	sbrs	r24, 5
     614:	fc cf       	rjmp	.-8      	; 0x60e <USART0_Transmit+0x2>
   /* Put data into buffer, sends the data */
   UDR0 = txData;
     616:	90 93 c6 00 	sts	0x00C6, r25
}
     61a:	08 95       	ret

0000061c <USART1_Transmit>:

void USART1_Transmit( unsigned char txData )
{
     61c:	98 2f       	mov	r25, r24
   /* Wait for empty transmit buffer */
   while ( !( UCSR1A & (1<<UDRE1)) );
     61e:	80 91 c8 00 	lds	r24, 0x00C8
     622:	85 ff       	sbrs	r24, 5
     624:	fc cf       	rjmp	.-8      	; 0x61e <USART1_Transmit+0x2>
   /* Put data into buffer, sends the data */
   UDR1 = txData;
     626:	90 93 ce 00 	sts	0x00CE, r25
}
     62a:	08 95       	ret

0000062c <USART_set_baud_rate>:

void USART_set_baud_rate(double baudrate0, double baudrate1)
{
     62c:	6f 92       	push	r6
     62e:	7f 92       	push	r7
     630:	8f 92       	push	r8
     632:	9f 92       	push	r9
     634:	af 92       	push	r10
     636:	bf 92       	push	r11
     638:	cf 92       	push	r12
     63a:	df 92       	push	r13
     63c:	ef 92       	push	r14
     63e:	ff 92       	push	r15
     640:	0f 93       	push	r16
     642:	1f 93       	push	r17
     644:	5b 01       	movw	r10, r22
     646:	6c 01       	movw	r12, r24
     648:	39 01       	movw	r6, r18
     64a:	4a 01       	movw	r8, r20
   // calculate division factor for requested baud rate, and set it
   int bauddiv0 = ((F_CPU+(baudrate0*8L))/(baudrate0*16L)-1);
     64c:	20 e0       	ldi	r18, 0x00	; 0
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	40 e0       	ldi	r20, 0x00	; 0
     652:	51 e4       	ldi	r21, 0x41	; 65
     654:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <__mulsf3>
     658:	20 e0       	ldi	r18, 0x00	; 0
     65a:	30 ec       	ldi	r19, 0xC0	; 192
     65c:	48 e2       	ldi	r20, 0x28	; 40
     65e:	5b e4       	ldi	r21, 0x4B	; 75
     660:	0e 94 c7 2a 	call	0x558e	; 0x558e <__addsf3>
     664:	7b 01       	movw	r14, r22
     666:	8c 01       	movw	r16, r24
     668:	c6 01       	movw	r24, r12
     66a:	b5 01       	movw	r22, r10
     66c:	20 e0       	ldi	r18, 0x00	; 0
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	40 e8       	ldi	r20, 0x80	; 128
     672:	51 e4       	ldi	r21, 0x41	; 65
     674:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <__mulsf3>
     678:	9b 01       	movw	r18, r22
     67a:	ac 01       	movw	r20, r24
     67c:	c8 01       	movw	r24, r16
     67e:	b7 01       	movw	r22, r14
     680:	0e 94 ee 2b 	call	0x57dc	; 0x57dc <__divsf3>
     684:	20 e0       	ldi	r18, 0x00	; 0
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	40 e8       	ldi	r20, 0x80	; 128
     68a:	5f e3       	ldi	r21, 0x3F	; 63
     68c:	0e 94 96 2a 	call	0x552c	; 0x552c <__subsf3>
     690:	0e 94 9a 2c 	call	0x5934	; 0x5934 <__fixsfsi>
     694:	7b 01       	movw	r14, r22
     696:	8c 01       	movw	r16, r24
   int bauddiv1 = ((F_CPU+(baudrate1*8L))/(baudrate1*16L)-1);
     698:	c4 01       	movw	r24, r8
     69a:	b3 01       	movw	r22, r6
     69c:	20 e0       	ldi	r18, 0x00	; 0
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	40 e0       	ldi	r20, 0x00	; 0
     6a2:	51 e4       	ldi	r21, 0x41	; 65
     6a4:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <__mulsf3>
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	30 ec       	ldi	r19, 0xC0	; 192
     6ac:	48 e2       	ldi	r20, 0x28	; 40
     6ae:	5b e4       	ldi	r21, 0x4B	; 75
     6b0:	0e 94 c7 2a 	call	0x558e	; 0x558e <__addsf3>
     6b4:	5b 01       	movw	r10, r22
     6b6:	6c 01       	movw	r12, r24
     6b8:	c4 01       	movw	r24, r8
     6ba:	b3 01       	movw	r22, r6
     6bc:	20 e0       	ldi	r18, 0x00	; 0
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	40 e8       	ldi	r20, 0x80	; 128
     6c2:	51 e4       	ldi	r21, 0x41	; 65
     6c4:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <__mulsf3>
     6c8:	9b 01       	movw	r18, r22
     6ca:	ac 01       	movw	r20, r24
     6cc:	c6 01       	movw	r24, r12
     6ce:	b5 01       	movw	r22, r10
     6d0:	0e 94 ee 2b 	call	0x57dc	; 0x57dc <__divsf3>
     6d4:	20 e0       	ldi	r18, 0x00	; 0
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	40 e8       	ldi	r20, 0x80	; 128
     6da:	5f e3       	ldi	r21, 0x3F	; 63
     6dc:	0e 94 96 2a 	call	0x552c	; 0x552c <__subsf3>
     6e0:	0e 94 9a 2c 	call	0x5934	; 0x5934 <__fixsfsi>
   UBRR0L= bauddiv0;
     6e4:	e0 92 c4 00 	sts	0x00C4, r14
#ifdef UBRR0H
   UBRR0H= (bauddiv0>>8);
     6e8:	ef 2c       	mov	r14, r15
     6ea:	ff 0c       	add	r15, r15
     6ec:	ff 08       	sbc	r15, r15
     6ee:	e0 92 c5 00 	sts	0x00C5, r14
#endif

   UBRR1L= bauddiv1;
     6f2:	60 93 cc 00 	sts	0x00CC, r22
#ifdef UBRR1H
   UBRR1H= (bauddiv1>>8);
     6f6:	67 2f       	mov	r22, r23
     6f8:	77 0f       	add	r23, r23
     6fa:	77 0b       	sbc	r23, r23
     6fc:	60 93 cd 00 	sts	0x00CD, r22
#endif
}
     700:	1f 91       	pop	r17
     702:	0f 91       	pop	r16
     704:	ff 90       	pop	r15
     706:	ef 90       	pop	r14
     708:	df 90       	pop	r13
     70a:	cf 90       	pop	r12
     70c:	bf 90       	pop	r11
     70e:	af 90       	pop	r10
     710:	9f 90       	pop	r9
     712:	8f 90       	pop	r8
     714:	7f 90       	pop	r7
     716:	6f 90       	pop	r6
     718:	08 95       	ret

0000071a <uart_init>:

/* Initialize UART */
void uart_init()
{
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);  // Turn on U(S)ART port og sæt rec interrupt
     71a:	88 e9       	ldi	r24, 0x98	; 152
     71c:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);   // Set frame format: 8 data bits, 1 stop bit, no parity
     720:	96 e0       	ldi	r25, 0x06	; 6
     722:	90 93 c2 00 	sts	0x00C2, r25

	UCSR1B = (1<<RXEN0)|(1<<TXEN0);      // Turn on U(S)ART port
     726:	88 e1       	ldi	r24, 0x18	; 24
     728:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = (1<<UCSZ01)|(1<<UCSZ00);   // Set frame format: 8 data bits, 1 stop bit, no parity
     72c:	90 93 ca 00 	sts	0x00CA, r25
   
	USART_set_baud_rate(BAUD0, BAUD1); //Set baud rate
     730:	60 e0       	ldi	r22, 0x00	; 0
     732:	70 e0       	ldi	r23, 0x00	; 0
     734:	86 e9       	ldi	r24, 0x96	; 150
     736:	96 e4       	ldi	r25, 0x46	; 70
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	41 ee       	ldi	r20, 0xE1	; 225
     73e:	57 e4       	ldi	r21, 0x47	; 71
     740:	0e 94 16 03 	call	0x62c	; 0x62c <USART_set_baud_rate>
}
     744:	08 95       	ret

00000746 <uart_get>:

/* Get a received character */
uint8_t uart_get ()
{
   unsigned char d;
   while ((UCSR0A & (1 << RXC0)) == 0) {}; // Do nothing until data have been recieved and is ready to be read from UDR
     746:	80 91 c0 00 	lds	r24, 0x00C0
     74a:	87 ff       	sbrs	r24, 7
     74c:	fc cf       	rjmp	.-8      	; 0x746 <uart_get>
   d=UDR0;
     74e:	80 91 c6 00 	lds	r24, 0x00C6
   return d;
}
     752:	08 95       	ret

00000754 <uart_put_test>:

/* Transmit a character */
void uart_put_test( uint8_t device, uint8_t d)
{
	switch (device) {
     754:	88 23       	and	r24, r24
     756:	49 f0       	breq	.+18     	; 0x76a <uart_put_test+0x16>
     758:	81 30       	cpi	r24, 0x01	; 1
     75a:	69 f4       	brne	.+26     	; 0x776 <uart_put_test+0x22>
}

void USART1_Transmit( unsigned char txData )
{
   /* Wait for empty transmit buffer */
   while ( !( UCSR1A & (1<<UDRE1)) );
     75c:	80 91 c8 00 	lds	r24, 0x00C8
     760:	85 ff       	sbrs	r24, 5
     762:	fc cf       	rjmp	.-8      	; 0x75c <uart_put_test+0x8>
   /* Put data into buffer, sends the data */
   UDR1 = txData;
     764:	60 93 ce 00 	sts	0x00CE, r22
     768:	08 95       	ret
#include "uart.h"

void USART0_Transmit( unsigned char txData )
{
   /* Wait for empty transmit buffer */
   while ( !( UCSR0A & (1<<UDRE0)) );
     76a:	80 91 c0 00 	lds	r24, 0x00C0
     76e:	85 ff       	sbrs	r24, 5
     770:	fc cf       	rjmp	.-8      	; 0x76a <uart_put_test+0x16>
   /* Put data into buffer, sends the data */
   UDR0 = txData;
     772:	60 93 c6 00 	sts	0x00C6, r22
     776:	08 95       	ret

00000778 <uart_put>:
	}
}

/* Transmit a character */
void uart_put(uint8_t d)
{
     778:	98 2f       	mov	r25, r24
}

void USART1_Transmit( unsigned char txData )
{
   /* Wait for empty transmit buffer */
   while ( !( UCSR1A & (1<<UDRE1)) );
     77a:	80 91 c8 00 	lds	r24, 0x00C8
     77e:	85 ff       	sbrs	r24, 5
     780:	fc cf       	rjmp	.-8      	; 0x77a <uart_put+0x2>
   /* Put data into buffer, sends the data */
   UDR1 = txData;
     782:	90 93 ce 00 	sts	0x00CE, r25

/* Transmit a character */
void uart_put(uint8_t d)
{
   USART1_Transmit( d );
}
     786:	08 95       	ret

00000788 <uart_puts>:

/* Transmit a string */
void uart_puts(const char *s)
{
     788:	fc 01       	movw	r30, r24
     78a:	07 c0       	rjmp	.+14     	; 0x79a <uart_puts+0x12>
#include "uart.h"

void USART0_Transmit( unsigned char txData )
{
   /* Wait for empty transmit buffer */
   while ( !( UCSR0A & (1<<UDRE0)) );
     78c:	80 91 c0 00 	lds	r24, 0x00C0
     790:	85 ff       	sbrs	r24, 5
     792:	fc cf       	rjmp	.-8      	; 0x78c <uart_puts+0x4>

/* Transmit a string */
void uart_puts(const char *s)
{
   while (*s)
      USART0_Transmit( *s++ );
     794:	31 96       	adiw	r30, 0x01	; 1
void USART0_Transmit( unsigned char txData )
{
   /* Wait for empty transmit buffer */
   while ( !( UCSR0A & (1<<UDRE0)) );
   /* Put data into buffer, sends the data */
   UDR0 = txData;
     796:	90 93 c6 00 	sts	0x00C6, r25
}

/* Transmit a string */
void uart_puts(const char *s)
{
   while (*s)
     79a:	90 81       	ld	r25, Z
     79c:	99 23       	and	r25, r25
     79e:	b1 f7       	brne	.-20     	; 0x78c <uart_puts+0x4>
      USART0_Transmit( *s++ );
}
     7a0:	08 95       	ret

000007a2 <uart1_put>:

void uart1_put(uint8_t d)
{
     7a2:	98 2f       	mov	r25, r24
}

void USART1_Transmit( unsigned char txData )
{
   /* Wait for empty transmit buffer */
   while ( !( UCSR1A & (1<<UDRE1)) );
     7a4:	80 91 c8 00 	lds	r24, 0x00C8
     7a8:	85 ff       	sbrs	r24, 5
     7aa:	fc cf       	rjmp	.-8      	; 0x7a4 <uart1_put+0x2>
   /* Put data into buffer, sends the data */
   UDR1 = txData;
     7ac:	90 93 ce 00 	sts	0x00CE, r25
}

void uart1_put(uint8_t d)
{
        USART1_Transmit(d);
}
     7b0:	08 95       	ret

000007b2 <uart1_puts>:

void uart1_puts(const char *s)
{
     7b2:	fc 01       	movw	r30, r24
     7b4:	07 c0       	rjmp	.+14     	; 0x7c4 <uart1_puts+0x12>
}

void USART1_Transmit( unsigned char txData )
{
   /* Wait for empty transmit buffer */
   while ( !( UCSR1A & (1<<UDRE1)) );
     7b6:	80 91 c8 00 	lds	r24, 0x00C8
     7ba:	85 ff       	sbrs	r24, 5
     7bc:	fc cf       	rjmp	.-8      	; 0x7b6 <uart1_puts+0x4>
}

void uart1_puts(const char *s)
{
    while (*s)
            USART1_Transmit(*s++);
     7be:	31 96       	adiw	r30, 0x01	; 1
void USART1_Transmit( unsigned char txData )
{
   /* Wait for empty transmit buffer */
   while ( !( UCSR1A & (1<<UDRE1)) );
   /* Put data into buffer, sends the data */
   UDR1 = txData;
     7c0:	90 93 ce 00 	sts	0x00CE, r25
        USART1_Transmit(d);
}

void uart1_puts(const char *s)
{
    while (*s)
     7c4:	90 81       	ld	r25, Z
     7c6:	99 23       	and	r25, r25
     7c8:	b1 f7       	brne	.-20     	; 0x7b6 <uart1_puts+0x4>
            USART1_Transmit(*s++);
}
     7ca:	08 95       	ret

000007cc <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
     7cc:	ef 92       	push	r14
     7ce:	ff 92       	push	r15
     7d0:	0f 93       	push	r16
     7d2:	1f 93       	push	r17
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	ec 01       	movw	r28, r24
     7da:	7a 01       	movw	r14, r20
     7dc:	8b 01       	movw	r16, r22
	clst -= 2;
     7de:	8e ef       	ldi	r24, 0xFE	; 254
     7e0:	9f ef       	ldi	r25, 0xFF	; 255
     7e2:	af ef       	ldi	r26, 0xFF	; 255
     7e4:	bf ef       	ldi	r27, 0xFF	; 255
     7e6:	e8 0e       	add	r14, r24
     7e8:	f9 1e       	adc	r15, r25
     7ea:	0a 1f       	adc	r16, r26
     7ec:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
     7ee:	8e 8d       	ldd	r24, Y+30	; 0x1e
     7f0:	9f 8d       	ldd	r25, Y+31	; 0x1f
     7f2:	a8 a1       	ldd	r26, Y+32	; 0x20
     7f4:	b9 a1       	ldd	r27, Y+33	; 0x21
     7f6:	02 97       	sbiw	r24, 0x02	; 2
     7f8:	a1 09       	sbc	r26, r1
     7fa:	b1 09       	sbc	r27, r1
     7fc:	e8 16       	cp	r14, r24
     7fe:	f9 06       	cpc	r15, r25
     800:	0a 07       	cpc	r16, r26
     802:	1b 07       	cpc	r17, r27
     804:	28 f0       	brcs	.+10     	; 0x810 <clust2sect+0x44>
     806:	20 e0       	ldi	r18, 0x00	; 0
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	40 e0       	ldi	r20, 0x00	; 0
     80c:	50 e0       	ldi	r21, 0x00	; 0
     80e:	12 c0       	rjmp	.+36     	; 0x834 <clust2sect+0x68>
	return clst * fs->csize + fs->database;
     810:	2a 81       	ldd	r18, Y+2	; 0x02
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	40 e0       	ldi	r20, 0x00	; 0
     816:	50 e0       	ldi	r21, 0x00	; 0
     818:	c8 01       	movw	r24, r16
     81a:	b7 01       	movw	r22, r14
     81c:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <__mulsi3>
     820:	9b 01       	movw	r18, r22
     822:	ac 01       	movw	r20, r24
     824:	8a a5       	ldd	r24, Y+42	; 0x2a
     826:	9b a5       	ldd	r25, Y+43	; 0x2b
     828:	ac a5       	ldd	r26, Y+44	; 0x2c
     82a:	bd a5       	ldd	r27, Y+45	; 0x2d
     82c:	28 0f       	add	r18, r24
     82e:	39 1f       	adc	r19, r25
     830:	4a 1f       	adc	r20, r26
     832:	5b 1f       	adc	r21, r27
}
     834:	b9 01       	movw	r22, r18
     836:	ca 01       	movw	r24, r20
     838:	cd b7       	in	r28, 0x3d	; 61
     83a:	de b7       	in	r29, 0x3e	; 62
     83c:	e6 e0       	ldi	r30, 0x06	; 6
     83e:	0c 94 d7 2e 	jmp	0x5dae	; 0x5dae <__epilogue_restores__+0x18>

00000842 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
     842:	db 01       	movw	r26, r22
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
     844:	88 23       	and	r24, r24
     846:	19 f0       	breq	.+6      	; 0x84e <f_mount+0xc>
     848:	2b e0       	ldi	r18, 0x0B	; 11
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	10 c0       	rjmp	.+32     	; 0x86e <f_mount+0x2c>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
     84e:	e0 91 ba 02 	lds	r30, 0x02BA
     852:	f0 91 bb 02 	lds	r31, 0x02BB

	if (rfs) {
     856:	30 97       	sbiw	r30, 0x00	; 0
     858:	09 f0       	breq	.+2      	; 0x85c <f_mount+0x1a>
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
     85a:	10 82       	st	Z, r1
	}

	if (fs) {
     85c:	10 97       	sbiw	r26, 0x00	; 0
     85e:	09 f0       	breq	.+2      	; 0x862 <f_mount+0x20>
		fs->fs_type = 0;			/* Clear new fs object */
     860:	1c 92       	st	X, r1
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
     862:	b0 93 bb 02 	sts	0x02BB, r27
     866:	a0 93 ba 02 	sts	0x02BA, r26
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0

	return FR_OK;
}
     86e:	c9 01       	movw	r24, r18
     870:	08 95       	ret

00000872 <f_chdrive>:

FRESULT f_chdrive (
	BYTE drv		/* Drive number */
)
{
	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
     872:	88 23       	and	r24, r24
     874:	19 f0       	breq	.+6      	; 0x87c <f_chdrive+0xa>
     876:	2b e0       	ldi	r18, 0x0B	; 11
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	04 c0       	rjmp	.+8      	; 0x884 <f_chdrive+0x12>

	Drive = drv;
     87c:	10 92 be 02 	sts	0x02BE, r1
     880:	20 e0       	ldi	r18, 0x00	; 0
     882:	30 e0       	ldi	r19, 0x00	; 0

	return FR_OK;
}
     884:	c9 01       	movw	r24, r18
     886:	08 95       	ret

00000888 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
     888:	fc 01       	movw	r30, r24
	if (!fs || !fs->fs_type || fs->id != id)
     88a:	00 97       	sbiw	r24, 0x00	; 0
     88c:	99 f0       	breq	.+38     	; 0x8b4 <validate+0x2c>
     88e:	80 81       	ld	r24, Z
     890:	88 23       	and	r24, r24
     892:	81 f0       	breq	.+32     	; 0x8b4 <validate+0x2c>
     894:	86 81       	ldd	r24, Z+6	; 0x06
     896:	97 81       	ldd	r25, Z+7	; 0x07
     898:	86 17       	cp	r24, r22
     89a:	97 07       	cpc	r25, r23
     89c:	59 f4       	brne	.+22     	; 0x8b4 <validate+0x2c>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drive) & STA_NOINIT)
     89e:	81 81       	ldd	r24, Z+1	; 0x01
     8a0:	0e 94 ad 18 	call	0x315a	; 0x315a <disk_status>
     8a4:	80 fd       	sbrc	r24, 0
     8a6:	03 c0       	rjmp	.+6      	; 0x8ae <validate+0x26>
     8a8:	20 e0       	ldi	r18, 0x00	; 0
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	05 c0       	rjmp	.+10     	; 0x8b8 <validate+0x30>
     8ae:	23 e0       	ldi	r18, 0x03	; 3
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	02 c0       	rjmp	.+4      	; 0x8b8 <validate+0x30>
     8b4:	29 e0       	ldi	r18, 0x09	; 9
     8b6:	30 e0       	ldi	r19, 0x00	; 0
		return FR_NOT_READY;

	return FR_OK;
}
     8b8:	c9 01       	movw	r24, r18
     8ba:	08 95       	ret

000008bc <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make apperance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
     8bc:	a0 e0       	ldi	r26, 0x00	; 0
     8be:	b0 e0       	ldi	r27, 0x00	; 0
     8c0:	e4 e6       	ldi	r30, 0x64	; 100
     8c2:	f4 e0       	ldi	r31, 0x04	; 4
     8c4:	0c 94 b3 2e 	jmp	0x5d66	; 0x5d66 <__prologue_saves__+0x8>
     8c8:	ec 01       	movw	r28, r24
     8ca:	4a 01       	movw	r8, r20
     8cc:	5b 01       	movw	r10, r22
	DWORD wsect;


	wsect = fs->winsect;
     8ce:	ce a4       	ldd	r12, Y+46	; 0x2e
     8d0:	df a4       	ldd	r13, Y+47	; 0x2f
     8d2:	e8 a8       	ldd	r14, Y+48	; 0x30
     8d4:	f9 a8       	ldd	r15, Y+49	; 0x31
	if (wsect != sector) {	/* Changed current window */
     8d6:	c4 16       	cp	r12, r20
     8d8:	d5 06       	cpc	r13, r21
     8da:	e6 06       	cpc	r14, r22
     8dc:	f7 06       	cpc	r15, r23
     8de:	09 f4       	brne	.+2      	; 0x8e2 <move_window+0x26>
     8e0:	4f c0       	rjmp	.+158    	; 0x980 <move_window+0xc4>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
     8e2:	8c 81       	ldd	r24, Y+4	; 0x04
     8e4:	88 23       	and	r24, r24
     8e6:	a1 f1       	breq	.+104    	; 0x950 <move_window+0x94>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
     8e8:	82 e3       	ldi	r24, 0x32	; 50
     8ea:	68 2e       	mov	r6, r24
     8ec:	71 2c       	mov	r7, r1
     8ee:	6c 0e       	add	r6, r28
     8f0:	7d 1e       	adc	r7, r29
     8f2:	89 81       	ldd	r24, Y+1	; 0x01
     8f4:	b3 01       	movw	r22, r6
     8f6:	a7 01       	movw	r20, r14
     8f8:	96 01       	movw	r18, r12
     8fa:	01 e0       	ldi	r16, 0x01	; 1
     8fc:	0e 94 12 19 	call	0x3224	; 0x3224 <disk_write>
     900:	89 2b       	or	r24, r25
     902:	d9 f5       	brne	.+118    	; 0x97a <move_window+0xbe>
				return FR_DISK_ERR;
			fs->wflag = 0;
     904:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
     906:	8a 8d       	ldd	r24, Y+26	; 0x1a
     908:	9b 8d       	ldd	r25, Y+27	; 0x1b
     90a:	ac 8d       	ldd	r26, Y+28	; 0x1c
     90c:	bd 8d       	ldd	r27, Y+29	; 0x1d
     90e:	2a a1       	ldd	r18, Y+34	; 0x22
     910:	3b a1       	ldd	r19, Y+35	; 0x23
     912:	4c a1       	ldd	r20, Y+36	; 0x24
     914:	5d a1       	ldd	r21, Y+37	; 0x25
     916:	82 0f       	add	r24, r18
     918:	93 1f       	adc	r25, r19
     91a:	a4 1f       	adc	r26, r20
     91c:	b5 1f       	adc	r27, r21
     91e:	c8 16       	cp	r12, r24
     920:	d9 06       	cpc	r13, r25
     922:	ea 06       	cpc	r14, r26
     924:	fb 06       	cpc	r15, r27
     926:	a0 f4       	brcc	.+40     	; 0x950 <move_window+0x94>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
     928:	1b 81       	ldd	r17, Y+3	; 0x03
     92a:	10 c0       	rjmp	.+32     	; 0x94c <move_window+0x90>
					wsect += fs->sects_fat;
     92c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     92e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     930:	ac 8d       	ldd	r26, Y+28	; 0x1c
     932:	bd 8d       	ldd	r27, Y+29	; 0x1d
     934:	c8 0e       	add	r12, r24
     936:	d9 1e       	adc	r13, r25
     938:	ea 1e       	adc	r14, r26
     93a:	fb 1e       	adc	r15, r27
					disk_write(fs->drive, fs->win, wsect, 1);
     93c:	89 81       	ldd	r24, Y+1	; 0x01
     93e:	b3 01       	movw	r22, r6
     940:	a7 01       	movw	r20, r14
     942:	96 01       	movw	r18, r12
     944:	01 e0       	ldi	r16, 0x01	; 1
     946:	0e 94 12 19 	call	0x3224	; 0x3224 <disk_write>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
     94a:	11 50       	subi	r17, 0x01	; 1
     94c:	12 30       	cpi	r17, 0x02	; 2
     94e:	70 f7       	brcc	.-36     	; 0x92c <move_window+0x70>
					disk_write(fs->drive, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
     950:	81 14       	cp	r8, r1
     952:	91 04       	cpc	r9, r1
     954:	a1 04       	cpc	r10, r1
     956:	b1 04       	cpc	r11, r1
     958:	99 f0       	breq	.+38     	; 0x980 <move_window+0xc4>
			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
     95a:	be 01       	movw	r22, r28
     95c:	6e 5c       	subi	r22, 0xCE	; 206
     95e:	7f 4f       	sbci	r23, 0xFF	; 255
     960:	89 81       	ldd	r24, Y+1	; 0x01
     962:	a5 01       	movw	r20, r10
     964:	94 01       	movw	r18, r8
     966:	01 e0       	ldi	r16, 0x01	; 1
     968:	0e 94 b4 18 	call	0x3168	; 0x3168 <disk_read>
     96c:	89 2b       	or	r24, r25
     96e:	29 f4       	brne	.+10     	; 0x97a <move_window+0xbe>
				return FR_DISK_ERR;
			fs->winsect = sector;
     970:	8e a6       	std	Y+46, r8	; 0x2e
     972:	9f a6       	std	Y+47, r9	; 0x2f
     974:	a8 aa       	std	Y+48, r10	; 0x30
     976:	b9 aa       	std	Y+49, r11	; 0x31
     978:	03 c0       	rjmp	.+6      	; 0x980 <move_window+0xc4>
     97a:	21 e0       	ldi	r18, 0x01	; 1
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	02 c0       	rjmp	.+4      	; 0x984 <move_window+0xc8>
     980:	20 e0       	ldi	r18, 0x00	; 0
     982:	30 e0       	ldi	r19, 0x00	; 0
		}
	}

	return FR_OK;
}
     984:	c9 01       	movw	r24, r18
     986:	cd b7       	in	r28, 0x3d	; 61
     988:	de b7       	in	r29, 0x3e	; 62
     98a:	ee e0       	ldi	r30, 0x0E	; 14
     98c:	0c 94 cf 2e 	jmp	0x5d9e	; 0x5d9e <__epilogue_restores__+0x8>

00000990 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->max_clust - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
     990:	a0 e0       	ldi	r26, 0x00	; 0
     992:	b0 e0       	ldi	r27, 0x00	; 0
     994:	ee ec       	ldi	r30, 0xCE	; 206
     996:	f4 e0       	ldi	r31, 0x04	; 4
     998:	0c 94 af 2e 	jmp	0x5d5e	; 0x5d5e <__prologue_saves__>
     99c:	5c 01       	movw	r10, r24
     99e:	6a 01       	movw	r12, r20
     9a0:	7b 01       	movw	r14, r22
     9a2:	38 01       	movw	r6, r16
     9a4:	49 01       	movw	r8, r18
	BYTE *p;
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
     9a6:	42 30       	cpi	r20, 0x02	; 2
     9a8:	51 05       	cpc	r21, r1
     9aa:	61 05       	cpc	r22, r1
     9ac:	71 05       	cpc	r23, r1
     9ae:	08 f4       	brcc	.+2      	; 0x9b2 <put_fat+0x22>
     9b0:	b1 c0       	rjmp	.+354    	; 0xb14 <put_fat+0x184>
     9b2:	f5 01       	movw	r30, r10
     9b4:	86 8d       	ldd	r24, Z+30	; 0x1e
     9b6:	97 8d       	ldd	r25, Z+31	; 0x1f
     9b8:	a0 a1       	ldd	r26, Z+32	; 0x20
     9ba:	b1 a1       	ldd	r27, Z+33	; 0x21
     9bc:	48 17       	cp	r20, r24
     9be:	59 07       	cpc	r21, r25
     9c0:	6a 07       	cpc	r22, r26
     9c2:	7b 07       	cpc	r23, r27
     9c4:	08 f0       	brcs	.+2      	; 0x9c8 <put_fat+0x38>
     9c6:	a6 c0       	rjmp	.+332    	; 0xb14 <put_fat+0x184>
		res = FR_INT_ERR;

	} else {
		fsect = fs->fatbase;
     9c8:	22 a0       	ldd	r2, Z+34	; 0x22
     9ca:	33 a0       	ldd	r3, Z+35	; 0x23
     9cc:	44 a0       	ldd	r4, Z+36	; 0x24
     9ce:	55 a0       	ldd	r5, Z+37	; 0x25
		switch (fs->fs_type) {
     9d0:	80 81       	ld	r24, Z
     9d2:	82 30       	cpi	r24, 0x02	; 2
     9d4:	09 f4       	brne	.+2      	; 0x9d8 <put_fat+0x48>
     9d6:	66 c0       	rjmp	.+204    	; 0xaa4 <put_fat+0x114>
     9d8:	83 30       	cpi	r24, 0x03	; 3
     9da:	09 f4       	brne	.+2      	; 0x9de <put_fat+0x4e>
     9dc:	7a c0       	rjmp	.+244    	; 0xad2 <put_fat+0x142>
     9de:	81 30       	cpi	r24, 0x01	; 1
     9e0:	19 f0       	breq	.+6      	; 0x9e8 <put_fat+0x58>
     9e2:	42 e0       	ldi	r20, 0x02	; 2
     9e4:	50 e0       	ldi	r21, 0x00	; 0
     9e6:	92 c0       	rjmp	.+292    	; 0xb0c <put_fat+0x17c>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
     9e8:	ea 01       	movw	r28, r20
     9ea:	d6 95       	lsr	r29
     9ec:	c7 95       	ror	r28
     9ee:	c4 0f       	add	r28, r20
     9f0:	d5 1f       	adc	r29, r21
			res = move_window(fs, fsect + (bc / SS(fs)));
     9f2:	ae 01       	movw	r20, r28
     9f4:	45 2f       	mov	r20, r21
     9f6:	55 27       	eor	r21, r21
     9f8:	46 95       	lsr	r20
     9fa:	60 e0       	ldi	r22, 0x00	; 0
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	42 0d       	add	r20, r2
     a00:	53 1d       	adc	r21, r3
     a02:	64 1d       	adc	r22, r4
     a04:	75 1d       	adc	r23, r5
     a06:	c5 01       	movw	r24, r10
     a08:	0e 94 5e 04 	call	0x8bc	; 0x8bc <move_window>
     a0c:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
     a0e:	00 97       	sbiw	r24, 0x00	; 0
     a10:	09 f0       	breq	.+2      	; 0xa14 <put_fat+0x84>
     a12:	7c c0       	rjmp	.+248    	; 0xb0c <put_fat+0x17c>
			p = &fs->win[bc & (SS(fs) - 1)];
     a14:	de 01       	movw	r26, r28
     a16:	b1 70       	andi	r27, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
     a18:	86 01       	movw	r16, r12
     a1a:	01 70       	andi	r16, 0x01	; 1
     a1c:	10 70       	andi	r17, 0x00	; 0
     a1e:	01 15       	cp	r16, r1
     a20:	11 05       	cpc	r17, r1
     a22:	51 f0       	breq	.+20     	; 0xa38 <put_fat+0xa8>
     a24:	f5 01       	movw	r30, r10
     a26:	ea 0f       	add	r30, r26
     a28:	fb 1f       	adc	r31, r27
     a2a:	82 a9       	ldd	r24, Z+50	; 0x32
     a2c:	8f 70       	andi	r24, 0x0F	; 15
     a2e:	96 2d       	mov	r25, r6
     a30:	92 95       	swap	r25
     a32:	90 7f       	andi	r25, 0xF0	; 240
     a34:	98 2b       	or	r25, r24
     a36:	01 c0       	rjmp	.+2      	; 0xa3a <put_fat+0xaa>
     a38:	96 2d       	mov	r25, r6
     a3a:	aa 0d       	add	r26, r10
     a3c:	bb 1d       	adc	r27, r11
     a3e:	d2 96       	adiw	r26, 0x32	; 50
     a40:	9c 93       	st	X, r25
			bc++;
     a42:	21 96       	adiw	r28, 0x01	; 1
			fs->wflag = 1;
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	f5 01       	movw	r30, r10
     a48:	84 83       	std	Z+4, r24	; 0x04
			res = move_window(fs, fsect + (bc / SS(fs)));
     a4a:	ae 01       	movw	r20, r28
     a4c:	45 2f       	mov	r20, r21
     a4e:	55 27       	eor	r21, r21
     a50:	46 95       	lsr	r20
     a52:	60 e0       	ldi	r22, 0x00	; 0
     a54:	70 e0       	ldi	r23, 0x00	; 0
     a56:	42 0d       	add	r20, r2
     a58:	53 1d       	adc	r21, r3
     a5a:	64 1d       	adc	r22, r4
     a5c:	75 1d       	adc	r23, r5
     a5e:	c5 01       	movw	r24, r10
     a60:	0e 94 5e 04 	call	0x8bc	; 0x8bc <move_window>
     a64:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
     a66:	00 97       	sbiw	r24, 0x00	; 0
     a68:	09 f0       	breq	.+2      	; 0xa6c <put_fat+0xdc>
     a6a:	50 c0       	rjmp	.+160    	; 0xb0c <put_fat+0x17c>
			p = &fs->win[bc & (SS(fs) - 1)];
     a6c:	d1 70       	andi	r29, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
     a6e:	01 15       	cp	r16, r1
     a70:	11 05       	cpc	r17, r1
     a72:	49 f0       	breq	.+18     	; 0xa86 <put_fat+0xf6>
     a74:	e4 e0       	ldi	r30, 0x04	; 4
     a76:	96 94       	lsr	r9
     a78:	87 94       	ror	r8
     a7a:	77 94       	ror	r7
     a7c:	67 94       	ror	r6
     a7e:	ea 95       	dec	r30
     a80:	d1 f7       	brne	.-12     	; 0xa76 <put_fat+0xe6>
     a82:	66 2d       	mov	r22, r6
     a84:	0b c0       	rjmp	.+22     	; 0xa9c <put_fat+0x10c>
     a86:	f5 01       	movw	r30, r10
     a88:	ec 0f       	add	r30, r28
     a8a:	fd 1f       	adc	r31, r29
     a8c:	62 a9       	ldd	r22, Z+50	; 0x32
     a8e:	60 7f       	andi	r22, 0xF0	; 240
     a90:	bb 27       	eor	r27, r27
     a92:	a9 2d       	mov	r26, r9
     a94:	98 2d       	mov	r25, r8
     a96:	87 2d       	mov	r24, r7
     a98:	8f 70       	andi	r24, 0x0F	; 15
     a9a:	68 2b       	or	r22, r24
     a9c:	ca 0d       	add	r28, r10
     a9e:	db 1d       	adc	r29, r11
     aa0:	6a ab       	std	Y+50, r22	; 0x32
     aa2:	34 c0       	rjmp	.+104    	; 0xb0c <put_fat+0x17c>
			break;

		case FS_FAT16 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
     aa4:	77 27       	eor	r23, r23
     aa6:	6f 2d       	mov	r22, r15
     aa8:	5e 2d       	mov	r21, r14
     aaa:	4d 2d       	mov	r20, r13
     aac:	42 0d       	add	r20, r2
     aae:	53 1d       	adc	r21, r3
     ab0:	64 1d       	adc	r22, r4
     ab2:	75 1d       	adc	r23, r5
     ab4:	c5 01       	movw	r24, r10
     ab6:	0e 94 5e 04 	call	0x8bc	; 0x8bc <move_window>
     aba:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
     abc:	00 97       	sbiw	r24, 0x00	; 0
     abe:	31 f5       	brne	.+76     	; 0xb0c <put_fat+0x17c>
			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
     ac0:	f6 01       	movw	r30, r12
     ac2:	ee 0f       	add	r30, r30
     ac4:	ff 1f       	adc	r31, r31
     ac6:	f1 70       	andi	r31, 0x01	; 1
     ac8:	ea 0d       	add	r30, r10
     aca:	fb 1d       	adc	r31, r11
     acc:	73 aa       	std	Z+51, r7	; 0x33
     ace:	62 aa       	std	Z+50, r6	; 0x32
     ad0:	1d c0       	rjmp	.+58     	; 0xb0c <put_fat+0x17c>
			break;

		case FS_FAT32 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
     ad2:	27 e0       	ldi	r18, 0x07	; 7
     ad4:	76 95       	lsr	r23
     ad6:	67 95       	ror	r22
     ad8:	57 95       	ror	r21
     ada:	47 95       	ror	r20
     adc:	2a 95       	dec	r18
     ade:	d1 f7       	brne	.-12     	; 0xad4 <put_fat+0x144>
     ae0:	42 0d       	add	r20, r2
     ae2:	53 1d       	adc	r21, r3
     ae4:	64 1d       	adc	r22, r4
     ae6:	75 1d       	adc	r23, r5
     ae8:	c5 01       	movw	r24, r10
     aea:	0e 94 5e 04 	call	0x8bc	; 0x8bc <move_window>
     aee:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
     af0:	00 97       	sbiw	r24, 0x00	; 0
     af2:	61 f4       	brne	.+24     	; 0xb0c <put_fat+0x17c>
			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
     af4:	f6 01       	movw	r30, r12
     af6:	ee 0f       	add	r30, r30
     af8:	ff 1f       	adc	r31, r31
     afa:	ee 0f       	add	r30, r30
     afc:	ff 1f       	adc	r31, r31
     afe:	f1 70       	andi	r31, 0x01	; 1
     b00:	ea 0d       	add	r30, r10
     b02:	fb 1d       	adc	r31, r11
     b04:	62 aa       	std	Z+50, r6	; 0x32
     b06:	73 aa       	std	Z+51, r7	; 0x33
     b08:	84 aa       	std	Z+52, r8	; 0x34
     b0a:	95 aa       	std	Z+53, r9	; 0x35
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	f5 01       	movw	r30, r10
     b10:	84 83       	std	Z+4, r24	; 0x04
     b12:	02 c0       	rjmp	.+4      	; 0xb18 <put_fat+0x188>
     b14:	42 e0       	ldi	r20, 0x02	; 2
     b16:	50 e0       	ldi	r21, 0x00	; 0
	}

	return res;
}
     b18:	ca 01       	movw	r24, r20
     b1a:	cd b7       	in	r28, 0x3d	; 61
     b1c:	de b7       	in	r29, 0x3e	; 62
     b1e:	e2 e1       	ldi	r30, 0x12	; 18
     b20:	0c 94 cb 2e 	jmp	0x5d96	; 0x5d96 <__epilogue_restores__>

00000b24 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Interal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
     b24:	a0 e0       	ldi	r26, 0x00	; 0
     b26:	b0 e0       	ldi	r27, 0x00	; 0
     b28:	e8 e9       	ldi	r30, 0x98	; 152
     b2a:	f5 e0       	ldi	r31, 0x05	; 5
     b2c:	0c 94 b4 2e 	jmp	0x5d68	; 0x5d68 <__prologue_saves__+0xa>
     b30:	4c 01       	movw	r8, r24
     b32:	7a 01       	movw	r14, r20
     b34:	8b 01       	movw	r16, r22
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
     b36:	42 30       	cpi	r20, 0x02	; 2
     b38:	51 05       	cpc	r21, r1
     b3a:	61 05       	cpc	r22, r1
     b3c:	71 05       	cpc	r23, r1
     b3e:	08 f4       	brcc	.+2      	; 0xb42 <get_fat+0x1e>
     b40:	97 c0       	rjmp	.+302    	; 0xc70 <get_fat+0x14c>
     b42:	f4 01       	movw	r30, r8
     b44:	86 8d       	ldd	r24, Z+30	; 0x1e
     b46:	97 8d       	ldd	r25, Z+31	; 0x1f
     b48:	a0 a1       	ldd	r26, Z+32	; 0x20
     b4a:	b1 a1       	ldd	r27, Z+33	; 0x21
     b4c:	48 17       	cp	r20, r24
     b4e:	59 07       	cpc	r21, r25
     b50:	6a 07       	cpc	r22, r26
     b52:	7b 07       	cpc	r23, r27
     b54:	08 f0       	brcs	.+2      	; 0xb58 <get_fat+0x34>
     b56:	8c c0       	rjmp	.+280    	; 0xc70 <get_fat+0x14c>
		return 1;

	fsect = fs->fatbase;
     b58:	a2 a0       	ldd	r10, Z+34	; 0x22
     b5a:	b3 a0       	ldd	r11, Z+35	; 0x23
     b5c:	c4 a0       	ldd	r12, Z+36	; 0x24
     b5e:	d5 a0       	ldd	r13, Z+37	; 0x25
	switch (fs->fs_type) {
     b60:	80 81       	ld	r24, Z
     b62:	82 30       	cpi	r24, 0x02	; 2
     b64:	09 f4       	brne	.+2      	; 0xb68 <get_fat+0x44>
     b66:	4d c0       	rjmp	.+154    	; 0xc02 <get_fat+0xde>
     b68:	83 30       	cpi	r24, 0x03	; 3
     b6a:	09 f4       	brne	.+2      	; 0xb6e <get_fat+0x4a>
     b6c:	63 c0       	rjmp	.+198    	; 0xc34 <get_fat+0x110>
     b6e:	81 30       	cpi	r24, 0x01	; 1
     b70:	09 f0       	breq	.+2      	; 0xb74 <get_fat+0x50>
     b72:	83 c0       	rjmp	.+262    	; 0xc7a <get_fat+0x156>
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
     b74:	ea 01       	movw	r28, r20
     b76:	d6 95       	lsr	r29
     b78:	c7 95       	ror	r28
     b7a:	c4 0f       	add	r28, r20
     b7c:	d5 1f       	adc	r29, r21
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
     b7e:	ae 01       	movw	r20, r28
     b80:	45 2f       	mov	r20, r21
     b82:	55 27       	eor	r21, r21
     b84:	46 95       	lsr	r20
     b86:	60 e0       	ldi	r22, 0x00	; 0
     b88:	70 e0       	ldi	r23, 0x00	; 0
     b8a:	4a 0d       	add	r20, r10
     b8c:	5b 1d       	adc	r21, r11
     b8e:	6c 1d       	adc	r22, r12
     b90:	7d 1d       	adc	r23, r13
     b92:	c4 01       	movw	r24, r8
     b94:	0e 94 5e 04 	call	0x8bc	; 0x8bc <move_window>
     b98:	89 2b       	or	r24, r25
     b9a:	09 f0       	breq	.+2      	; 0xb9e <get_fat+0x7a>
     b9c:	6e c0       	rjmp	.+220    	; 0xc7a <get_fat+0x156>
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
     b9e:	fe 01       	movw	r30, r28
     ba0:	f1 70       	andi	r31, 0x01	; 1
     ba2:	e8 0d       	add	r30, r8
     ba4:	f9 1d       	adc	r31, r9
     ba6:	72 a8       	ldd	r7, Z+50	; 0x32
     ba8:	21 96       	adiw	r28, 0x01	; 1
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
     baa:	ae 01       	movw	r20, r28
     bac:	45 2f       	mov	r20, r21
     bae:	55 27       	eor	r21, r21
     bb0:	46 95       	lsr	r20
     bb2:	60 e0       	ldi	r22, 0x00	; 0
     bb4:	70 e0       	ldi	r23, 0x00	; 0
     bb6:	4a 0d       	add	r20, r10
     bb8:	5b 1d       	adc	r21, r11
     bba:	6c 1d       	adc	r22, r12
     bbc:	7d 1d       	adc	r23, r13
     bbe:	c4 01       	movw	r24, r8
     bc0:	0e 94 5e 04 	call	0x8bc	; 0x8bc <move_window>
     bc4:	89 2b       	or	r24, r25
     bc6:	09 f0       	breq	.+2      	; 0xbca <get_fat+0xa6>
     bc8:	58 c0       	rjmp	.+176    	; 0xc7a <get_fat+0x156>
	fsect = fs->fatbase;
	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
     bca:	67 2d       	mov	r22, r7
     bcc:	70 e0       	ldi	r23, 0x00	; 0
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
     bce:	d1 70       	andi	r29, 0x01	; 1
     bd0:	c8 0d       	add	r28, r8
     bd2:	d9 1d       	adc	r29, r9
     bd4:	9a a9       	ldd	r25, Y+50	; 0x32
     bd6:	80 e0       	ldi	r24, 0x00	; 0
     bd8:	68 2b       	or	r22, r24
     bda:	79 2b       	or	r23, r25
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
     bdc:	c7 01       	movw	r24, r14
     bde:	81 70       	andi	r24, 0x01	; 1
     be0:	90 70       	andi	r25, 0x00	; 0
     be2:	89 2b       	or	r24, r25
     be4:	39 f0       	breq	.+14     	; 0xbf4 <get_fat+0xd0>
     be6:	44 e0       	ldi	r20, 0x04	; 4
     be8:	76 95       	lsr	r23
     bea:	67 95       	ror	r22
     bec:	4a 95       	dec	r20
     bee:	e1 f7       	brne	.-8      	; 0xbe8 <get_fat+0xc4>
     bf0:	9b 01       	movw	r18, r22
     bf2:	1d c0       	rjmp	.+58     	; 0xc2e <get_fat+0x10a>
     bf4:	9b 01       	movw	r18, r22
     bf6:	40 e0       	ldi	r20, 0x00	; 0
     bf8:	50 e0       	ldi	r21, 0x00	; 0
     bfa:	3f 70       	andi	r19, 0x0F	; 15
     bfc:	40 70       	andi	r20, 0x00	; 0
     bfe:	50 70       	andi	r21, 0x00	; 0
     c00:	40 c0       	rjmp	.+128    	; 0xc82 <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
     c02:	45 2f       	mov	r20, r21
     c04:	56 2f       	mov	r21, r22
     c06:	67 2f       	mov	r22, r23
     c08:	77 27       	eor	r23, r23
     c0a:	4a 0d       	add	r20, r10
     c0c:	5b 1d       	adc	r21, r11
     c0e:	6c 1d       	adc	r22, r12
     c10:	7d 1d       	adc	r23, r13
     c12:	c4 01       	movw	r24, r8
     c14:	0e 94 5e 04 	call	0x8bc	; 0x8bc <move_window>
     c18:	89 2b       	or	r24, r25
     c1a:	79 f5       	brne	.+94     	; 0xc7a <get_fat+0x156>
		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
     c1c:	f7 01       	movw	r30, r14
     c1e:	ee 0f       	add	r30, r30
     c20:	ff 1f       	adc	r31, r31
     c22:	f1 70       	andi	r31, 0x01	; 1
     c24:	e8 0d       	add	r30, r8
     c26:	f9 1d       	adc	r31, r9
     c28:	82 a9       	ldd	r24, Z+50	; 0x32
     c2a:	93 a9       	ldd	r25, Z+51	; 0x33
     c2c:	9c 01       	movw	r18, r24
     c2e:	40 e0       	ldi	r20, 0x00	; 0
     c30:	50 e0       	ldi	r21, 0x00	; 0
     c32:	27 c0       	rjmp	.+78     	; 0xc82 <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
     c34:	97 e0       	ldi	r25, 0x07	; 7
     c36:	76 95       	lsr	r23
     c38:	67 95       	ror	r22
     c3a:	57 95       	ror	r21
     c3c:	47 95       	ror	r20
     c3e:	9a 95       	dec	r25
     c40:	d1 f7       	brne	.-12     	; 0xc36 <get_fat+0x112>
     c42:	4a 0d       	add	r20, r10
     c44:	5b 1d       	adc	r21, r11
     c46:	6c 1d       	adc	r22, r12
     c48:	7d 1d       	adc	r23, r13
     c4a:	c4 01       	movw	r24, r8
     c4c:	0e 94 5e 04 	call	0x8bc	; 0x8bc <move_window>
     c50:	89 2b       	or	r24, r25
     c52:	99 f4       	brne	.+38     	; 0xc7a <get_fat+0x156>
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
     c54:	f7 01       	movw	r30, r14
     c56:	ee 0f       	add	r30, r30
     c58:	ff 1f       	adc	r31, r31
     c5a:	ee 0f       	add	r30, r30
     c5c:	ff 1f       	adc	r31, r31
     c5e:	f1 70       	andi	r31, 0x01	; 1
     c60:	e8 0d       	add	r30, r8
     c62:	f9 1d       	adc	r31, r9
     c64:	22 a9       	ldd	r18, Z+50	; 0x32
     c66:	33 a9       	ldd	r19, Z+51	; 0x33
     c68:	44 a9       	ldd	r20, Z+52	; 0x34
     c6a:	55 a9       	ldd	r21, Z+53	; 0x35
     c6c:	5f 70       	andi	r21, 0x0F	; 15
     c6e:	09 c0       	rjmp	.+18     	; 0xc82 <get_fat+0x15e>
     c70:	21 e0       	ldi	r18, 0x01	; 1
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	40 e0       	ldi	r20, 0x00	; 0
     c76:	50 e0       	ldi	r21, 0x00	; 0
     c78:	04 c0       	rjmp	.+8      	; 0xc82 <get_fat+0x15e>
     c7a:	2f ef       	ldi	r18, 0xFF	; 255
     c7c:	3f ef       	ldi	r19, 0xFF	; 255
     c7e:	4f ef       	ldi	r20, 0xFF	; 255
     c80:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return 0xFFFFFFFF;	/* An error occured at the disk I/O layer */
}
     c82:	b9 01       	movw	r22, r18
     c84:	ca 01       	movw	r24, r20
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	ed e0       	ldi	r30, 0x0D	; 13
     c8c:	0c 94 d0 2e 	jmp	0x5da0	; 0x5da0 <__epilogue_restores__+0xa>

00000c90 <dir_seek>:
static
FRESULT dir_seek (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
     c90:	a0 e0       	ldi	r26, 0x00	; 0
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	ee e4       	ldi	r30, 0x4E	; 78
     c96:	f6 e0       	ldi	r31, 0x06	; 6
     c98:	0c 94 b7 2e 	jmp	0x5d6e	; 0x5d6e <__prologue_saves__+0x10>
     c9c:	6c 01       	movw	r12, r24
     c9e:	5b 01       	movw	r10, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
     ca0:	dc 01       	movw	r26, r24
     ca2:	15 96       	adiw	r26, 0x05	; 5
     ca4:	7c 93       	st	X, r23
     ca6:	6e 93       	st	-X, r22
     ca8:	14 97       	sbiw	r26, 0x04	; 4
	clst = dj->sclust;
     caa:	16 96       	adiw	r26, 0x06	; 6
     cac:	4d 91       	ld	r20, X+
     cae:	5d 91       	ld	r21, X+
     cb0:	6d 91       	ld	r22, X+
     cb2:	7c 91       	ld	r23, X
     cb4:	19 97       	sbiw	r26, 0x09	; 9
	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
     cb6:	41 30       	cpi	r20, 0x01	; 1
     cb8:	51 05       	cpc	r21, r1
     cba:	61 05       	cpc	r22, r1
     cbc:	71 05       	cpc	r23, r1
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <dir_seek+0x32>
     cc0:	d0 c0       	rjmp	.+416    	; 0xe62 <dir_seek+0x1d2>
     cc2:	ed 91       	ld	r30, X+
     cc4:	fc 91       	ld	r31, X
     cc6:	86 8d       	ldd	r24, Z+30	; 0x1e
     cc8:	97 8d       	ldd	r25, Z+31	; 0x1f
     cca:	a0 a1       	ldd	r26, Z+32	; 0x20
     ccc:	b1 a1       	ldd	r27, Z+33	; 0x21
     cce:	48 17       	cp	r20, r24
     cd0:	59 07       	cpc	r21, r25
     cd2:	6a 07       	cpc	r22, r26
     cd4:	7b 07       	cpc	r23, r27
     cd6:	08 f0       	brcs	.+2      	; 0xcda <dir_seek+0x4a>
     cd8:	c4 c0       	rjmp	.+392    	; 0xe62 <dir_seek+0x1d2>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
     cda:	41 15       	cp	r20, r1
     cdc:	51 05       	cpc	r21, r1
     cde:	61 05       	cpc	r22, r1
     ce0:	71 05       	cpc	r23, r1
     ce2:	81 f5       	brne	.+96     	; 0xd44 <dir_seek+0xb4>
     ce4:	80 81       	ld	r24, Z
     ce6:	83 30       	cpi	r24, 0x03	; 3
     ce8:	49 f4       	brne	.+18     	; 0xcfc <dir_seek+0x6c>
		clst = dj->fs->dirbase;
     cea:	46 a1       	ldd	r20, Z+38	; 0x26
     cec:	57 a1       	ldd	r21, Z+39	; 0x27
     cee:	60 a5       	ldd	r22, Z+40	; 0x28
     cf0:	71 a5       	ldd	r23, Z+41	; 0x29

	if (clst == 0) {	/* Static table */
     cf2:	41 15       	cp	r20, r1
     cf4:	51 05       	cpc	r21, r1
     cf6:	61 05       	cpc	r22, r1
     cf8:	71 05       	cpc	r23, r1
     cfa:	21 f5       	brne	.+72     	; 0xd44 <dir_seek+0xb4>
		dj->clust = clst;
     cfc:	f6 01       	movw	r30, r12
     cfe:	12 86       	std	Z+10, r1	; 0x0a
     d00:	13 86       	std	Z+11, r1	; 0x0b
     d02:	14 86       	std	Z+12, r1	; 0x0c
     d04:	15 86       	std	Z+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
     d06:	01 90       	ld	r0, Z+
     d08:	f0 81       	ld	r31, Z
     d0a:	e0 2d       	mov	r30, r0
     d0c:	80 85       	ldd	r24, Z+8	; 0x08
     d0e:	91 85       	ldd	r25, Z+9	; 0x09
     d10:	a8 16       	cp	r10, r24
     d12:	b9 06       	cpc	r11, r25
     d14:	08 f0       	brcs	.+2      	; 0xd18 <dir_seek+0x88>
     d16:	a5 c0       	rjmp	.+330    	; 0xe62 <dir_seek+0x1d2>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
     d18:	c5 01       	movw	r24, r10
     d1a:	24 e0       	ldi	r18, 0x04	; 4
     d1c:	96 95       	lsr	r25
     d1e:	87 95       	ror	r24
     d20:	2a 95       	dec	r18
     d22:	e1 f7       	brne	.-8      	; 0xd1c <dir_seek+0x8c>
     d24:	a0 e0       	ldi	r26, 0x00	; 0
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	26 a1       	ldd	r18, Z+38	; 0x26
     d2a:	37 a1       	ldd	r19, Z+39	; 0x27
     d2c:	40 a5       	ldd	r20, Z+40	; 0x28
     d2e:	51 a5       	ldd	r21, Z+41	; 0x29
     d30:	82 0f       	add	r24, r18
     d32:	93 1f       	adc	r25, r19
     d34:	a4 1f       	adc	r26, r20
     d36:	b5 1f       	adc	r27, r21
     d38:	f6 01       	movw	r30, r12
     d3a:	86 87       	std	Z+14, r24	; 0x0e
     d3c:	97 87       	std	Z+15, r25	; 0x0f
     d3e:	a0 8b       	std	Z+16, r26	; 0x10
     d40:	b1 8b       	std	Z+17, r27	; 0x11
     d42:	7b c0       	rjmp	.+246    	; 0xe3a <dir_seek+0x1aa>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
     d44:	82 81       	ldd	r24, Z+2	; 0x02
     d46:	08 2f       	mov	r16, r24
     d48:	10 e0       	ldi	r17, 0x00	; 0
     d4a:	84 e0       	ldi	r24, 0x04	; 4
     d4c:	00 0f       	add	r16, r16
     d4e:	11 1f       	adc	r17, r17
     d50:	8a 95       	dec	r24
     d52:	e1 f7       	brne	.-8      	; 0xd4c <dir_seek+0xbc>
     d54:	25 c0       	rjmp	.+74     	; 0xda0 <dir_seek+0x110>
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
     d56:	ce 01       	movw	r24, r28
     d58:	0e 94 92 05 	call	0xb24	; 0xb24 <get_fat>
     d5c:	ab 01       	movw	r20, r22
     d5e:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
     d60:	4f 3f       	cpi	r20, 0xFF	; 255
     d62:	ff ef       	ldi	r31, 0xFF	; 255
     d64:	5f 07       	cpc	r21, r31
     d66:	ff ef       	ldi	r31, 0xFF	; 255
     d68:	6f 07       	cpc	r22, r31
     d6a:	ff ef       	ldi	r31, 0xFF	; 255
     d6c:	7f 07       	cpc	r23, r31
     d6e:	19 f4       	brne	.+6      	; 0xd76 <dir_seek+0xe6>
     d70:	21 e0       	ldi	r18, 0x01	; 1
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	78 c0       	rjmp	.+240    	; 0xe66 <dir_seek+0x1d6>
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
     d76:	42 30       	cpi	r20, 0x02	; 2
     d78:	51 05       	cpc	r21, r1
     d7a:	61 05       	cpc	r22, r1
     d7c:	71 05       	cpc	r23, r1
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <dir_seek+0xf2>
     d80:	70 c0       	rjmp	.+224    	; 0xe62 <dir_seek+0x1d2>
     d82:	d6 01       	movw	r26, r12
     d84:	ed 91       	ld	r30, X+
     d86:	fc 91       	ld	r31, X
     d88:	86 8d       	ldd	r24, Z+30	; 0x1e
     d8a:	97 8d       	ldd	r25, Z+31	; 0x1f
     d8c:	a0 a1       	ldd	r26, Z+32	; 0x20
     d8e:	b1 a1       	ldd	r27, Z+33	; 0x21
     d90:	48 17       	cp	r20, r24
     d92:	59 07       	cpc	r21, r25
     d94:	6a 07       	cpc	r22, r26
     d96:	7b 07       	cpc	r23, r27
     d98:	08 f0       	brcs	.+2      	; 0xd9c <dir_seek+0x10c>
     d9a:	63 c0       	rjmp	.+198    	; 0xe62 <dir_seek+0x1d2>
				return FR_INT_ERR;
			idx -= ic;
     d9c:	a0 1a       	sub	r10, r16
     d9e:	b1 0a       	sbc	r11, r17
     da0:	f6 01       	movw	r30, r12
     da2:	c0 81       	ld	r28, Z
     da4:	d1 81       	ldd	r29, Z+1	; 0x01
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
     da6:	a0 16       	cp	r10, r16
     da8:	b1 06       	cpc	r11, r17
     daa:	a8 f6       	brcc	.-86     	; 0xd56 <dir_seek+0xc6>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
     dac:	d6 01       	movw	r26, r12
     dae:	1a 96       	adiw	r26, 0x0a	; 10
     db0:	4d 93       	st	X+, r20
     db2:	5d 93       	st	X+, r21
     db4:	6d 93       	st	X+, r22
     db6:	7c 93       	st	X, r23
     db8:	1d 97       	sbiw	r26, 0x0d	; 13
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
     dba:	be ef       	ldi	r27, 0xFE	; 254
     dbc:	eb 2e       	mov	r14, r27
     dbe:	bf ef       	ldi	r27, 0xFF	; 255
     dc0:	fb 2e       	mov	r15, r27
     dc2:	bf ef       	ldi	r27, 0xFF	; 255
     dc4:	0b 2f       	mov	r16, r27
     dc6:	bf ef       	ldi	r27, 0xFF	; 255
     dc8:	1b 2f       	mov	r17, r27
     dca:	e4 0e       	add	r14, r20
     dcc:	f5 1e       	adc	r15, r21
     dce:	06 1f       	adc	r16, r22
     dd0:	17 1f       	adc	r17, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
     dd2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dd4:	9f 8d       	ldd	r25, Y+31	; 0x1f
     dd6:	a8 a1       	ldd	r26, Y+32	; 0x20
     dd8:	b9 a1       	ldd	r27, Y+33	; 0x21
     dda:	02 97       	sbiw	r24, 0x02	; 2
     ddc:	a1 09       	sbc	r26, r1
     dde:	b1 09       	sbc	r27, r1
     de0:	e8 16       	cp	r14, r24
     de2:	f9 06       	cpc	r15, r25
     de4:	0a 07       	cpc	r16, r26
     de6:	1b 07       	cpc	r17, r27
     de8:	28 f0       	brcs	.+10     	; 0xdf4 <dir_seek+0x164>
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	40 e0       	ldi	r20, 0x00	; 0
     df0:	50 e0       	ldi	r21, 0x00	; 0
     df2:	12 c0       	rjmp	.+36     	; 0xe18 <dir_seek+0x188>
	return clst * fs->csize + fs->database;
     df4:	2a 81       	ldd	r18, Y+2	; 0x02
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	40 e0       	ldi	r20, 0x00	; 0
     dfa:	50 e0       	ldi	r21, 0x00	; 0
     dfc:	c8 01       	movw	r24, r16
     dfe:	b7 01       	movw	r22, r14
     e00:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <__mulsi3>
     e04:	9b 01       	movw	r18, r22
     e06:	ac 01       	movw	r20, r24
     e08:	8a a5       	ldd	r24, Y+42	; 0x2a
     e0a:	9b a5       	ldd	r25, Y+43	; 0x2b
     e0c:	ac a5       	ldd	r26, Y+44	; 0x2c
     e0e:	bd a5       	ldd	r27, Y+45	; 0x2d
     e10:	28 0f       	add	r18, r24
     e12:	39 1f       	adc	r19, r25
     e14:	4a 1f       	adc	r20, r26
     e16:	5b 1f       	adc	r21, r27
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
     e18:	c5 01       	movw	r24, r10
     e1a:	a4 e0       	ldi	r26, 0x04	; 4
     e1c:	96 95       	lsr	r25
     e1e:	87 95       	ror	r24
     e20:	aa 95       	dec	r26
     e22:	e1 f7       	brne	.-8      	; 0xe1c <dir_seek+0x18c>
     e24:	a0 e0       	ldi	r26, 0x00	; 0
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	28 0f       	add	r18, r24
     e2a:	39 1f       	adc	r19, r25
     e2c:	4a 1f       	adc	r20, r26
     e2e:	5b 1f       	adc	r21, r27
     e30:	f6 01       	movw	r30, r12
     e32:	26 87       	std	Z+14, r18	; 0x0e
     e34:	37 87       	std	Z+15, r19	; 0x0f
     e36:	40 8b       	std	Z+16, r20	; 0x10
     e38:	51 8b       	std	Z+17, r21	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
     e3a:	d6 01       	movw	r26, r12
     e3c:	8d 91       	ld	r24, X+
     e3e:	9c 91       	ld	r25, X
     e40:	c2 96       	adiw	r24, 0x32	; 50
     e42:	bf e0       	ldi	r27, 0x0F	; 15
     e44:	ab 22       	and	r10, r27
     e46:	bb 24       	eor	r11, r11
     e48:	f5 e0       	ldi	r31, 0x05	; 5
     e4a:	aa 0c       	add	r10, r10
     e4c:	bb 1c       	adc	r11, r11
     e4e:	fa 95       	dec	r31
     e50:	e1 f7       	brne	.-8      	; 0xe4a <dir_seek+0x1ba>
     e52:	8a 0d       	add	r24, r10
     e54:	9b 1d       	adc	r25, r11
     e56:	f6 01       	movw	r30, r12
     e58:	93 8b       	std	Z+19, r25	; 0x13
     e5a:	82 8b       	std	Z+18, r24	; 0x12
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <dir_seek+0x1d6>

	return FR_OK;	/* Seek succeeded */
     e62:	22 e0       	ldi	r18, 0x02	; 2
     e64:	30 e0       	ldi	r19, 0x00	; 0
}
     e66:	c9 01       	movw	r24, r18
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
     e6c:	ea e0       	ldi	r30, 0x0A	; 10
     e6e:	0c 94 d3 2e 	jmp	0x5da6	; 0x5da6 <__epilogue_restores__+0x10>

00000e72 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
     e72:	a4 e0       	ldi	r26, 0x04	; 4
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	ef e3       	ldi	r30, 0x3F	; 63
     e78:	f7 e0       	ldi	r31, 0x07	; 7
     e7a:	0c 94 af 2e 	jmp	0x5d5e	; 0x5d5e <__prologue_saves__>
     e7e:	1c 01       	movw	r2, r24
     e80:	2a 01       	movw	r4, r20
     e82:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl, mcl;


	mcl = fs->max_clust;
     e84:	dc 01       	movw	r26, r24
     e86:	5e 96       	adiw	r26, 0x1e	; 30
     e88:	8d 91       	ld	r24, X+
     e8a:	9d 91       	ld	r25, X+
     e8c:	0d 90       	ld	r0, X+
     e8e:	bc 91       	ld	r27, X
     e90:	a0 2d       	mov	r26, r0
     e92:	89 83       	std	Y+1, r24	; 0x01
     e94:	9a 83       	std	Y+2, r25	; 0x02
     e96:	ab 83       	std	Y+3, r26	; 0x03
     e98:	bc 83       	std	Y+4, r27	; 0x04
	if (clst == 0) {		/* Create new chain */
     e9a:	41 15       	cp	r20, r1
     e9c:	51 05       	cpc	r21, r1
     e9e:	61 05       	cpc	r22, r1
     ea0:	71 05       	cpc	r23, r1
     ea2:	81 f4       	brne	.+32     	; 0xec4 <create_chain+0x52>
		scl = fs->last_clust;			/* Get suggested start point */
     ea4:	f1 01       	movw	r30, r2
     ea6:	82 84       	ldd	r8, Z+10	; 0x0a
     ea8:	93 84       	ldd	r9, Z+11	; 0x0b
     eaa:	a4 84       	ldd	r10, Z+12	; 0x0c
     eac:	b5 84       	ldd	r11, Z+13	; 0x0d
		if (scl == 0 || scl >= mcl) scl = 1;
     eae:	81 14       	cp	r8, r1
     eb0:	91 04       	cpc	r9, r1
     eb2:	a1 04       	cpc	r10, r1
     eb4:	b1 04       	cpc	r11, r1
     eb6:	11 f1       	breq	.+68     	; 0xefc <create_chain+0x8a>
     eb8:	88 16       	cp	r8, r24
     eba:	99 06       	cpc	r9, r25
     ebc:	aa 06       	cpc	r10, r26
     ebe:	bb 06       	cpc	r11, r27
     ec0:	e8 f4       	brcc	.+58     	; 0xefc <create_chain+0x8a>
     ec2:	21 c0       	rjmp	.+66     	; 0xf06 <create_chain+0x94>
	}
	else {					/* Stretch existing chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
     ec4:	c1 01       	movw	r24, r2
     ec6:	0e 94 92 05 	call	0xb24	; 0xb24 <get_fat>
     eca:	9b 01       	movw	r18, r22
     ecc:	ac 01       	movw	r20, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
     ece:	62 30       	cpi	r22, 0x02	; 2
     ed0:	71 05       	cpc	r23, r1
     ed2:	81 05       	cpc	r24, r1
     ed4:	91 05       	cpc	r25, r1
     ed6:	28 f4       	brcc	.+10     	; 0xee2 <create_chain+0x70>
     ed8:	21 e0       	ldi	r18, 0x01	; 1
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	40 e0       	ldi	r20, 0x00	; 0
     ede:	50 e0       	ldi	r21, 0x00	; 0
     ee0:	93 c0       	rjmp	.+294    	; 0x1008 <create_chain+0x196>
		if (cs < mcl) return cs;		/* It is already followed by next cluster */
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
     ee4:	9a 81       	ldd	r25, Y+2	; 0x02
     ee6:	ab 81       	ldd	r26, Y+3	; 0x03
     ee8:	bc 81       	ldd	r27, Y+4	; 0x04
     eea:	28 17       	cp	r18, r24
     eec:	39 07       	cpc	r19, r25
     eee:	4a 07       	cpc	r20, r26
     ef0:	5b 07       	cpc	r21, r27
     ef2:	08 f4       	brcc	.+2      	; 0xef6 <create_chain+0x84>
     ef4:	89 c0       	rjmp	.+274    	; 0x1008 <create_chain+0x196>
     ef6:	53 01       	movw	r10, r6
     ef8:	42 01       	movw	r8, r4
     efa:	05 c0       	rjmp	.+10     	; 0xf06 <create_chain+0x94>
     efc:	41 e0       	ldi	r20, 0x01	; 1
     efe:	84 2e       	mov	r8, r20
     f00:	91 2c       	mov	r9, r1
     f02:	a1 2c       	mov	r10, r1
     f04:	b1 2c       	mov	r11, r1
     f06:	75 01       	movw	r14, r10
     f08:	64 01       	movw	r12, r8
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
     f0a:	08 94       	sec
     f0c:	c1 1c       	adc	r12, r1
     f0e:	d1 1c       	adc	r13, r1
     f10:	e1 1c       	adc	r14, r1
     f12:	f1 1c       	adc	r15, r1
		if (ncl >= mcl) {				/* Wrap around */
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	9a 81       	ldd	r25, Y+2	; 0x02
     f18:	ab 81       	ldd	r26, Y+3	; 0x03
     f1a:	bc 81       	ldd	r27, Y+4	; 0x04
     f1c:	c8 16       	cp	r12, r24
     f1e:	d9 06       	cpc	r13, r25
     f20:	ea 06       	cpc	r14, r26
     f22:	fb 06       	cpc	r15, r27
     f24:	60 f0       	brcs	.+24     	; 0xf3e <create_chain+0xcc>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free custer */
     f26:	92 e0       	ldi	r25, 0x02	; 2
     f28:	89 16       	cp	r8, r25
     f2a:	91 04       	cpc	r9, r1
     f2c:	a1 04       	cpc	r10, r1
     f2e:	b1 04       	cpc	r11, r1
     f30:	08 f4       	brcc	.+2      	; 0xf34 <create_chain+0xc2>
     f32:	61 c0       	rjmp	.+194    	; 0xff6 <create_chain+0x184>
     f34:	32 e0       	ldi	r19, 0x02	; 2
     f36:	c3 2e       	mov	r12, r19
     f38:	d1 2c       	mov	r13, r1
     f3a:	e1 2c       	mov	r14, r1
     f3c:	f1 2c       	mov	r15, r1
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
     f3e:	c1 01       	movw	r24, r2
     f40:	b7 01       	movw	r22, r14
     f42:	a6 01       	movw	r20, r12
     f44:	0e 94 92 05 	call	0xb24	; 0xb24 <get_fat>
     f48:	9b 01       	movw	r18, r22
     f4a:	ac 01       	movw	r20, r24
		if (cs == 0) break;				/* Found a free cluster */
     f4c:	61 15       	cp	r22, r1
     f4e:	71 05       	cpc	r23, r1
     f50:	81 05       	cpc	r24, r1
     f52:	91 05       	cpc	r25, r1
     f54:	a9 f0       	breq	.+42     	; 0xf80 <create_chain+0x10e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
     f56:	6f 3f       	cpi	r22, 0xFF	; 255
     f58:	af ef       	ldi	r26, 0xFF	; 255
     f5a:	7a 07       	cpc	r23, r26
     f5c:	af ef       	ldi	r26, 0xFF	; 255
     f5e:	8a 07       	cpc	r24, r26
     f60:	af ef       	ldi	r26, 0xFF	; 255
     f62:	9a 07       	cpc	r25, r26
     f64:	09 f4       	brne	.+2      	; 0xf68 <create_chain+0xf6>
     f66:	50 c0       	rjmp	.+160    	; 0x1008 <create_chain+0x196>
     f68:	61 30       	cpi	r22, 0x01	; 1
     f6a:	71 05       	cpc	r23, r1
     f6c:	81 05       	cpc	r24, r1
     f6e:	91 05       	cpc	r25, r1
     f70:	09 f4       	brne	.+2      	; 0xf74 <create_chain+0x102>
     f72:	4a c0       	rjmp	.+148    	; 0x1008 <create_chain+0x196>
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
     f74:	c8 14       	cp	r12, r8
     f76:	d9 04       	cpc	r13, r9
     f78:	ea 04       	cpc	r14, r10
     f7a:	fb 04       	cpc	r15, r11
     f7c:	31 f6       	brne	.-116    	; 0xf0a <create_chain+0x98>
     f7e:	3b c0       	rjmp	.+118    	; 0xff6 <create_chain+0x184>
     f80:	bc 2c       	mov	r11, r12
     f82:	ad 2c       	mov	r10, r13
     f84:	9e 2c       	mov	r9, r14
     f86:	8f 2c       	mov	r8, r15
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
     f88:	c1 01       	movw	r24, r2
     f8a:	a6 01       	movw	r20, r12
     f8c:	b7 01       	movw	r22, r14
     f8e:	0f ef       	ldi	r16, 0xFF	; 255
     f90:	1f ef       	ldi	r17, 0xFF	; 255
     f92:	2f ef       	ldi	r18, 0xFF	; 255
     f94:	3f e0       	ldi	r19, 0x0F	; 15
     f96:	0e 94 c8 04 	call	0x990	; 0x990 <put_fat>
     f9a:	89 2b       	or	r24, r25
     f9c:	89 f5       	brne	.+98     	; 0x1000 <create_chain+0x18e>
		return 0xFFFFFFFF;
	if (clst != 0) {					/* Link it to the previous one if needed */
     f9e:	41 14       	cp	r4, r1
     fa0:	51 04       	cpc	r5, r1
     fa2:	61 04       	cpc	r6, r1
     fa4:	71 04       	cpc	r7, r1
     fa6:	49 f0       	breq	.+18     	; 0xfba <create_chain+0x148>
		if (put_fat(fs, clst, ncl))
     fa8:	c1 01       	movw	r24, r2
     faa:	b3 01       	movw	r22, r6
     fac:	a2 01       	movw	r20, r4
     fae:	86 01       	movw	r16, r12
     fb0:	97 01       	movw	r18, r14
     fb2:	0e 94 c8 04 	call	0x990	; 0x990 <put_fat>
     fb6:	89 2b       	or	r24, r25
     fb8:	19 f5       	brne	.+70     	; 0x1000 <create_chain+0x18e>
			return 0xFFFFFFFF;
	}

	fs->last_clust = ncl;				/* Update FSINFO */
     fba:	f1 01       	movw	r30, r2
     fbc:	b2 86       	std	Z+10, r11	; 0x0a
     fbe:	a3 86       	std	Z+11, r10	; 0x0b
     fc0:	94 86       	std	Z+12, r9	; 0x0c
     fc2:	85 86       	std	Z+13, r8	; 0x0d
	if (fs->free_clust != 0xFFFFFFFF) {
     fc4:	86 85       	ldd	r24, Z+14	; 0x0e
     fc6:	97 85       	ldd	r25, Z+15	; 0x0f
     fc8:	a0 89       	ldd	r26, Z+16	; 0x10
     fca:	b1 89       	ldd	r27, Z+17	; 0x11
     fcc:	8f 3f       	cpi	r24, 0xFF	; 255
     fce:	ff ef       	ldi	r31, 0xFF	; 255
     fd0:	9f 07       	cpc	r25, r31
     fd2:	ff ef       	ldi	r31, 0xFF	; 255
     fd4:	af 07       	cpc	r26, r31
     fd6:	ff ef       	ldi	r31, 0xFF	; 255
     fd8:	bf 07       	cpc	r27, r31
     fda:	51 f0       	breq	.+20     	; 0xff0 <create_chain+0x17e>
		fs->free_clust--;
     fdc:	01 97       	sbiw	r24, 0x01	; 1
     fde:	a1 09       	sbc	r26, r1
     fe0:	b1 09       	sbc	r27, r1
     fe2:	f1 01       	movw	r30, r2
     fe4:	86 87       	std	Z+14, r24	; 0x0e
     fe6:	97 87       	std	Z+15, r25	; 0x0f
     fe8:	a0 8b       	std	Z+16, r26	; 0x10
     fea:	b1 8b       	std	Z+17, r27	; 0x11
		fs->fsi_flag = 1;
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	85 83       	std	Z+5, r24	; 0x05
     ff0:	a7 01       	movw	r20, r14
     ff2:	96 01       	movw	r18, r12
     ff4:	09 c0       	rjmp	.+18     	; 0x1008 <create_chain+0x196>
     ff6:	20 e0       	ldi	r18, 0x00	; 0
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	40 e0       	ldi	r20, 0x00	; 0
     ffc:	50 e0       	ldi	r21, 0x00	; 0
     ffe:	04 c0       	rjmp	.+8      	; 0x1008 <create_chain+0x196>
    1000:	2f ef       	ldi	r18, 0xFF	; 255
    1002:	3f ef       	ldi	r19, 0xFF	; 255
    1004:	4f ef       	ldi	r20, 0xFF	; 255
    1006:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return ncl;		/* Return new cluster number */
}
    1008:	b9 01       	movw	r22, r18
    100a:	ca 01       	movw	r24, r20
    100c:	24 96       	adiw	r28, 0x04	; 4
    100e:	e2 e1       	ldi	r30, 0x12	; 18
    1010:	0c 94 cb 2e 	jmp	0x5d96	; 0x5d96 <__epilogue_restores__>

00001014 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    1014:	a6 e0       	ldi	r26, 0x06	; 6
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e0 e1       	ldi	r30, 0x10	; 16
    101a:	f8 e0       	ldi	r31, 0x08	; 8
    101c:	0c 94 af 2e 	jmp	0x5d5e	; 0x5d5e <__prologue_saves__>
    1020:	9e 83       	std	Y+6, r25	; 0x06
    1022:	8d 83       	std	Y+5, r24	; 0x05
    1024:	3a 01       	movw	r6, r20
    1026:	4b 01       	movw	r8, r22
	FRESULT res;
	DWORD clst, bcs, nsect, ifptr;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    1028:	dc 01       	movw	r26, r24
    102a:	12 96       	adiw	r26, 0x02	; 2
    102c:	6d 91       	ld	r22, X+
    102e:	7c 91       	ld	r23, X
    1030:	13 97       	sbiw	r26, 0x03	; 3
    1032:	8d 91       	ld	r24, X+
    1034:	9c 91       	ld	r25, X
    1036:	0e 94 44 04 	call	0x888	; 0x888 <validate>
    103a:	9c 83       	std	Y+4, r25	; 0x04
    103c:	8b 83       	std	Y+3, r24	; 0x03
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    103e:	89 2b       	or	r24, r25
    1040:	09 f0       	breq	.+2      	; 0x1044 <f_lseek+0x30>
    1042:	c7 c1       	rjmp	.+910    	; 0x13d2 <__stack+0x2d3>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    1044:	ed 81       	ldd	r30, Y+5	; 0x05
    1046:	fe 81       	ldd	r31, Y+6	; 0x06
    1048:	84 81       	ldd	r24, Z+4	; 0x04
    104a:	87 fd       	sbrc	r24, 7
    104c:	92 c0       	rjmp	.+292    	; 0x1172 <__stack+0x73>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    104e:	ad 81       	ldd	r26, Y+5	; 0x05
    1050:	be 81       	ldd	r27, Y+6	; 0x06
    1052:	1a 96       	adiw	r26, 0x0a	; 10
    1054:	ad 90       	ld	r10, X+
    1056:	bd 90       	ld	r11, X+
    1058:	cd 90       	ld	r12, X+
    105a:	dc 90       	ld	r13, X
    105c:	1d 97       	sbiw	r26, 0x0d	; 13
    105e:	a6 14       	cp	r10, r6
    1060:	b7 04       	cpc	r11, r7
    1062:	c8 04       	cpc	r12, r8
    1064:	d9 04       	cpc	r13, r9
    1066:	10 f4       	brcc	.+4      	; 0x106c <f_lseek+0x58>
    1068:	81 ff       	sbrs	r24, 1
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <f_lseek+0x5c>
    106c:	64 01       	movw	r12, r8
    106e:	53 01       	movw	r10, r6
#if !_FS_READONLY
		 && !(fp->flag & FA_WRITE)
#endif
		) ofs = fp->fsize;

	ifptr = fp->fptr;
    1070:	ed 81       	ldd	r30, Y+5	; 0x05
    1072:	fe 81       	ldd	r31, Y+6	; 0x06
    1074:	26 81       	ldd	r18, Z+6	; 0x06
    1076:	37 81       	ldd	r19, Z+7	; 0x07
    1078:	40 85       	ldd	r20, Z+8	; 0x08
    107a:	51 85       	ldd	r21, Z+9	; 0x09
	fp->fptr = nsect = 0; fp->csect = 255;
    107c:	16 82       	std	Z+6, r1	; 0x06
    107e:	17 82       	std	Z+7, r1	; 0x07
    1080:	10 86       	std	Z+8, r1	; 0x08
    1082:	11 86       	std	Z+9, r1	; 0x09
    1084:	8f ef       	ldi	r24, 0xFF	; 255
    1086:	85 83       	std	Z+5, r24	; 0x05
	if (ofs > 0) {
    1088:	a1 14       	cp	r10, r1
    108a:	b1 04       	cpc	r11, r1
    108c:	c1 04       	cpc	r12, r1
    108e:	d1 04       	cpc	r13, r1
    1090:	09 f4       	brne	.+2      	; 0x1094 <f_lseek+0x80>
    1092:	6b c1       	rjmp	.+726    	; 0x136a <__stack+0x26b>
		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    1094:	01 90       	ld	r0, Z+
    1096:	f0 81       	ld	r31, Z
    1098:	e0 2d       	mov	r30, r0
    109a:	fa 83       	std	Y+2, r31	; 0x02
    109c:	e9 83       	std	Y+1, r30	; 0x01
    109e:	82 81       	ldd	r24, Z+2	; 0x02
    10a0:	68 2e       	mov	r6, r24
    10a2:	77 24       	eor	r7, r7
    10a4:	88 24       	eor	r8, r8
    10a6:	99 24       	eor	r9, r9
    10a8:	69 e0       	ldi	r22, 0x09	; 9
    10aa:	66 0c       	add	r6, r6
    10ac:	77 1c       	adc	r7, r7
    10ae:	88 1c       	adc	r8, r8
    10b0:	99 1c       	adc	r9, r9
    10b2:	6a 95       	dec	r22
    10b4:	d1 f7       	brne	.-12     	; 0x10aa <f_lseek+0x96>
		if (ifptr > 0 &&
    10b6:	21 15       	cp	r18, r1
    10b8:	31 05       	cpc	r19, r1
    10ba:	41 05       	cpc	r20, r1
    10bc:	51 05       	cpc	r21, r1
    10be:	c1 f1       	breq	.+112    	; 0x1130 <__stack+0x31>
    10c0:	19 01       	movw	r2, r18
    10c2:	2a 01       	movw	r4, r20
    10c4:	08 94       	sec
    10c6:	21 08       	sbc	r2, r1
    10c8:	31 08       	sbc	r3, r1
    10ca:	41 08       	sbc	r4, r1
    10cc:	51 08       	sbc	r5, r1
    10ce:	c6 01       	movw	r24, r12
    10d0:	b5 01       	movw	r22, r10
    10d2:	61 50       	subi	r22, 0x01	; 1
    10d4:	70 40       	sbci	r23, 0x00	; 0
    10d6:	80 40       	sbci	r24, 0x00	; 0
    10d8:	90 40       	sbci	r25, 0x00	; 0
    10da:	a4 01       	movw	r20, r8
    10dc:	93 01       	movw	r18, r6
    10de:	0e 94 8d 2e 	call	0x5d1a	; 0x5d1a <__udivmodsi4>
    10e2:	79 01       	movw	r14, r18
    10e4:	8a 01       	movw	r16, r20
    10e6:	c2 01       	movw	r24, r4
    10e8:	b1 01       	movw	r22, r2
    10ea:	a4 01       	movw	r20, r8
    10ec:	93 01       	movw	r18, r6
    10ee:	0e 94 8d 2e 	call	0x5d1a	; 0x5d1a <__udivmodsi4>
    10f2:	e2 16       	cp	r14, r18
    10f4:	f3 06       	cpc	r15, r19
    10f6:	04 07       	cpc	r16, r20
    10f8:	15 07       	cpc	r17, r21
    10fa:	d0 f0       	brcs	.+52     	; 0x1130 <__stack+0x31>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    10fc:	88 27       	eor	r24, r24
    10fe:	99 27       	eor	r25, r25
    1100:	dc 01       	movw	r26, r24
    1102:	86 19       	sub	r24, r6
    1104:	97 09       	sbc	r25, r7
    1106:	a8 09       	sbc	r26, r8
    1108:	b9 09       	sbc	r27, r9
    110a:	82 21       	and	r24, r2
    110c:	93 21       	and	r25, r3
    110e:	a4 21       	and	r26, r4
    1110:	b5 21       	and	r27, r5
    1112:	ed 81       	ldd	r30, Y+5	; 0x05
    1114:	fe 81       	ldd	r31, Y+6	; 0x06
    1116:	86 83       	std	Z+6, r24	; 0x06
    1118:	97 83       	std	Z+7, r25	; 0x07
    111a:	a0 87       	std	Z+8, r26	; 0x08
    111c:	b1 87       	std	Z+9, r27	; 0x09
			ofs -= fp->fptr;
    111e:	a8 1a       	sub	r10, r24
    1120:	b9 0a       	sbc	r11, r25
    1122:	ca 0a       	sbc	r12, r26
    1124:	db 0a       	sbc	r13, r27
			clst = fp->curr_clust;
    1126:	42 89       	ldd	r20, Z+18	; 0x12
    1128:	53 89       	ldd	r21, Z+19	; 0x13
    112a:	64 89       	ldd	r22, Z+20	; 0x14
    112c:	75 89       	ldd	r23, Z+21	; 0x15
    112e:	47 c0       	rjmp	.+142    	; 0x11be <__stack+0xbf>
		} else {									/* When seek to back cluster, */
			clst = fp->org_clust;					/* start from the first cluster */
    1130:	ad 81       	ldd	r26, Y+5	; 0x05
    1132:	be 81       	ldd	r27, Y+6	; 0x06
    1134:	1e 96       	adiw	r26, 0x0e	; 14
    1136:	4d 91       	ld	r20, X+
    1138:	5d 91       	ld	r21, X+
    113a:	6d 91       	ld	r22, X+
    113c:	7c 91       	ld	r23, X
    113e:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
			if (clst == 0) {						/* If no cluster chain, create a new chain */
    1140:	41 15       	cp	r20, r1
    1142:	51 05       	cpc	r21, r1
    1144:	61 05       	cpc	r22, r1
    1146:	71 05       	cpc	r23, r1
    1148:	a1 f5       	brne	.+104    	; 0x11b2 <__stack+0xb3>
				clst = create_chain(fp->fs, 0);
    114a:	89 81       	ldd	r24, Y+1	; 0x01
    114c:	9a 81       	ldd	r25, Y+2	; 0x02
    114e:	40 e0       	ldi	r20, 0x00	; 0
    1150:	50 e0       	ldi	r21, 0x00	; 0
    1152:	60 e0       	ldi	r22, 0x00	; 0
    1154:	70 e0       	ldi	r23, 0x00	; 0
    1156:	0e 94 39 07 	call	0xe72	; 0xe72 <create_chain>
    115a:	ab 01       	movw	r20, r22
    115c:	bc 01       	movw	r22, r24
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    115e:	41 30       	cpi	r20, 0x01	; 1
    1160:	51 05       	cpc	r21, r1
    1162:	61 05       	cpc	r22, r1
    1164:	71 05       	cpc	r23, r1
    1166:	51 f4       	brne	.+20     	; 0x117c <__stack+0x7d>
    1168:	ed 81       	ldd	r30, Y+5	; 0x05
    116a:	fe 81       	ldd	r31, Y+6	; 0x06
    116c:	84 81       	ldd	r24, Z+4	; 0x04
    116e:	80 68       	ori	r24, 0x80	; 128
    1170:	84 83       	std	Z+4, r24	; 0x04
    1172:	82 e0       	ldi	r24, 0x02	; 2
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	9c 83       	std	Y+4, r25	; 0x04
    1178:	8b 83       	std	Y+3, r24	; 0x03
    117a:	2b c1       	rjmp	.+598    	; 0x13d2 <__stack+0x2d3>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    117c:	4f 3f       	cpi	r20, 0xFF	; 255
    117e:	9f ef       	ldi	r25, 0xFF	; 255
    1180:	59 07       	cpc	r21, r25
    1182:	9f ef       	ldi	r25, 0xFF	; 255
    1184:	69 07       	cpc	r22, r25
    1186:	9f ef       	ldi	r25, 0xFF	; 255
    1188:	79 07       	cpc	r23, r25
    118a:	59 f4       	brne	.+22     	; 0x11a2 <__stack+0xa3>
    118c:	ad 81       	ldd	r26, Y+5	; 0x05
    118e:	be 81       	ldd	r27, Y+6	; 0x06
    1190:	14 96       	adiw	r26, 0x04	; 4
    1192:	8c 91       	ld	r24, X
    1194:	14 97       	sbiw	r26, 0x04	; 4
    1196:	80 68       	ori	r24, 0x80	; 128
    1198:	14 96       	adiw	r26, 0x04	; 4
    119a:	8c 93       	st	X, r24
    119c:	e1 e0       	ldi	r30, 0x01	; 1
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	d7 c0       	rjmp	.+430    	; 0x1350 <__stack+0x251>
				fp->org_clust = clst;
    11a2:	ad 81       	ldd	r26, Y+5	; 0x05
    11a4:	be 81       	ldd	r27, Y+6	; 0x06
    11a6:	1e 96       	adiw	r26, 0x0e	; 14
    11a8:	4d 93       	st	X+, r20
    11aa:	5d 93       	st	X+, r21
    11ac:	6d 93       	st	X+, r22
    11ae:	7c 93       	st	X, r23
    11b0:	51 97       	sbiw	r26, 0x11	; 17
			}
#endif
			fp->curr_clust = clst;
    11b2:	ed 81       	ldd	r30, Y+5	; 0x05
    11b4:	fe 81       	ldd	r31, Y+6	; 0x06
    11b6:	42 8b       	std	Z+18, r20	; 0x12
    11b8:	53 8b       	std	Z+19, r21	; 0x13
    11ba:	64 8b       	std	Z+20, r22	; 0x14
    11bc:	75 8b       	std	Z+21, r23	; 0x15
		}
		if (clst != 0) {
    11be:	41 15       	cp	r20, r1
    11c0:	51 05       	cpc	r21, r1
    11c2:	61 05       	cpc	r22, r1
    11c4:	71 05       	cpc	r23, r1
    11c6:	09 f0       	breq	.+2      	; 0x11ca <__stack+0xcb>
    11c8:	59 c0       	rjmp	.+178    	; 0x127c <__stack+0x17d>
    11ca:	cf c0       	rjmp	.+414    	; 0x136a <__stack+0x26b>
			while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    11cc:	ad 81       	ldd	r26, Y+5	; 0x05
    11ce:	be 81       	ldd	r27, Y+6	; 0x06
    11d0:	14 96       	adiw	r26, 0x04	; 4
    11d2:	8c 91       	ld	r24, X
    11d4:	14 97       	sbiw	r26, 0x04	; 4
    11d6:	2d 91       	ld	r18, X+
    11d8:	3c 91       	ld	r19, X
    11da:	81 ff       	sbrs	r24, 1
    11dc:	0d c0       	rjmp	.+26     	; 0x11f8 <__stack+0xf9>
					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
    11de:	c9 01       	movw	r24, r18
    11e0:	0e 94 39 07 	call	0xe72	; 0xe72 <create_chain>
    11e4:	ab 01       	movw	r20, r22
    11e6:	bc 01       	movw	r22, r24
					if (clst == 0) {				/* When disk gets full, clip file size */
    11e8:	41 15       	cp	r20, r1
    11ea:	51 05       	cpc	r21, r1
    11ec:	61 05       	cpc	r22, r1
    11ee:	71 05       	cpc	r23, r1
    11f0:	41 f4       	brne	.+16     	; 0x1202 <__stack+0x103>
    11f2:	64 01       	movw	r12, r8
    11f4:	53 01       	movw	r10, r6
    11f6:	48 c0       	rjmp	.+144    	; 0x1288 <__stack+0x189>
						ofs = bcs; break;
					}
				} else
#endif
					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    11f8:	c9 01       	movw	r24, r18
    11fa:	0e 94 92 05 	call	0xb24	; 0xb24 <get_fat>
    11fe:	ab 01       	movw	r20, r22
    1200:	bc 01       	movw	r22, r24
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    1202:	4f 3f       	cpi	r20, 0xFF	; 255
    1204:	bf ef       	ldi	r27, 0xFF	; 255
    1206:	5b 07       	cpc	r21, r27
    1208:	bf ef       	ldi	r27, 0xFF	; 255
    120a:	6b 07       	cpc	r22, r27
    120c:	bf ef       	ldi	r27, 0xFF	; 255
    120e:	7b 07       	cpc	r23, r27
    1210:	41 f4       	brne	.+16     	; 0x1222 <__stack+0x123>
    1212:	ed 81       	ldd	r30, Y+5	; 0x05
    1214:	fe 81       	ldd	r31, Y+6	; 0x06
    1216:	84 81       	ldd	r24, Z+4	; 0x04
    1218:	80 68       	ori	r24, 0x80	; 128
    121a:	84 83       	std	Z+4, r24	; 0x04
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	aa cf       	rjmp	.-172    	; 0x1176 <__stack+0x77>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
    1222:	42 30       	cpi	r20, 0x02	; 2
    1224:	51 05       	cpc	r21, r1
    1226:	61 05       	cpc	r22, r1
    1228:	71 05       	cpc	r23, r1
    122a:	08 f4       	brcc	.+2      	; 0x122e <__stack+0x12f>
    122c:	9d cf       	rjmp	.-198    	; 0x1168 <__stack+0x69>
    122e:	ad 81       	ldd	r26, Y+5	; 0x05
    1230:	be 81       	ldd	r27, Y+6	; 0x06
    1232:	ed 91       	ld	r30, X+
    1234:	fc 91       	ld	r31, X
    1236:	86 8d       	ldd	r24, Z+30	; 0x1e
    1238:	97 8d       	ldd	r25, Z+31	; 0x1f
    123a:	a0 a1       	ldd	r26, Z+32	; 0x20
    123c:	b1 a1       	ldd	r27, Z+33	; 0x21
    123e:	48 17       	cp	r20, r24
    1240:	59 07       	cpc	r21, r25
    1242:	6a 07       	cpc	r22, r26
    1244:	7b 07       	cpc	r23, r27
    1246:	08 f0       	brcs	.+2      	; 0x124a <__stack+0x14b>
    1248:	8f cf       	rjmp	.-226    	; 0x1168 <__stack+0x69>
				fp->curr_clust = clst;
    124a:	ad 81       	ldd	r26, Y+5	; 0x05
    124c:	be 81       	ldd	r27, Y+6	; 0x06
    124e:	52 96       	adiw	r26, 0x12	; 18
    1250:	4d 93       	st	X+, r20
    1252:	5d 93       	st	X+, r21
    1254:	6d 93       	st	X+, r22
    1256:	7c 93       	st	X, r23
    1258:	55 97       	sbiw	r26, 0x15	; 21
				fp->fptr += bcs;
    125a:	fd 01       	movw	r30, r26
    125c:	86 81       	ldd	r24, Z+6	; 0x06
    125e:	97 81       	ldd	r25, Z+7	; 0x07
    1260:	a0 85       	ldd	r26, Z+8	; 0x08
    1262:	b1 85       	ldd	r27, Z+9	; 0x09
    1264:	86 0d       	add	r24, r6
    1266:	97 1d       	adc	r25, r7
    1268:	a8 1d       	adc	r26, r8
    126a:	b9 1d       	adc	r27, r9
    126c:	86 83       	std	Z+6, r24	; 0x06
    126e:	97 83       	std	Z+7, r25	; 0x07
    1270:	a0 87       	std	Z+8, r26	; 0x08
    1272:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= bcs;
    1274:	a6 18       	sub	r10, r6
    1276:	b7 08       	sbc	r11, r7
    1278:	c8 08       	sbc	r12, r8
    127a:	d9 08       	sbc	r13, r9
			}
#endif
			fp->curr_clust = clst;
		}
		if (clst != 0) {
			while (ofs > bcs) {						/* Cluster following loop */
    127c:	6a 14       	cp	r6, r10
    127e:	7b 04       	cpc	r7, r11
    1280:	8c 04       	cpc	r8, r12
    1282:	9d 04       	cpc	r9, r13
    1284:	08 f4       	brcc	.+2      	; 0x1288 <__stack+0x189>
    1286:	a2 cf       	rjmp	.-188    	; 0x11cc <__stack+0xcd>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
				fp->curr_clust = clst;
				fp->fptr += bcs;
				ofs -= bcs;
			}
			fp->fptr += ofs;
    1288:	ed 81       	ldd	r30, Y+5	; 0x05
    128a:	fe 81       	ldd	r31, Y+6	; 0x06
    128c:	86 81       	ldd	r24, Z+6	; 0x06
    128e:	97 81       	ldd	r25, Z+7	; 0x07
    1290:	a0 85       	ldd	r26, Z+8	; 0x08
    1292:	b1 85       	ldd	r27, Z+9	; 0x09
    1294:	8a 0d       	add	r24, r10
    1296:	9b 1d       	adc	r25, r11
    1298:	ac 1d       	adc	r26, r12
    129a:	bd 1d       	adc	r27, r13
    129c:	86 83       	std	Z+6, r24	; 0x06
    129e:	97 83       	std	Z+7, r25	; 0x07
    12a0:	a0 87       	std	Z+8, r26	; 0x08
    12a2:	b1 87       	std	Z+9, r27	; 0x09
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
    12a4:	d6 01       	movw	r26, r12
    12a6:	c5 01       	movw	r24, r10
    12a8:	29 e0       	ldi	r18, 0x09	; 9
    12aa:	b6 95       	lsr	r27
    12ac:	a7 95       	ror	r26
    12ae:	97 95       	ror	r25
    12b0:	87 95       	ror	r24
    12b2:	2a 95       	dec	r18
    12b4:	d1 f7       	brne	.-12     	; 0x12aa <__stack+0x1ab>
    12b6:	e8 2e       	mov	r14, r24
    12b8:	85 83       	std	Z+5, r24	; 0x05
			if (ofs % SS(fp->fs)) {
    12ba:	8f ef       	ldi	r24, 0xFF	; 255
    12bc:	91 e0       	ldi	r25, 0x01	; 1
    12be:	a0 e0       	ldi	r26, 0x00	; 0
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	a8 22       	and	r10, r24
    12c4:	b9 22       	and	r11, r25
    12c6:	ca 22       	and	r12, r26
    12c8:	db 22       	and	r13, r27
    12ca:	a1 14       	cp	r10, r1
    12cc:	b1 04       	cpc	r11, r1
    12ce:	c1 04       	cpc	r12, r1
    12d0:	d1 04       	cpc	r13, r1
    12d2:	09 f4       	brne	.+2      	; 0x12d6 <__stack+0x1d7>
    12d4:	4a c0       	rjmp	.+148    	; 0x136a <__stack+0x26b>
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
    12d6:	80 80       	ld	r8, Z
    12d8:	91 80       	ldd	r9, Z+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    12da:	ee ef       	ldi	r30, 0xFE	; 254
    12dc:	ae 2e       	mov	r10, r30
    12de:	ef ef       	ldi	r30, 0xFF	; 255
    12e0:	be 2e       	mov	r11, r30
    12e2:	ef ef       	ldi	r30, 0xFF	; 255
    12e4:	ce 2e       	mov	r12, r30
    12e6:	ef ef       	ldi	r30, 0xFF	; 255
    12e8:	de 2e       	mov	r13, r30
    12ea:	a4 0e       	add	r10, r20
    12ec:	b5 1e       	adc	r11, r21
    12ee:	c6 1e       	adc	r12, r22
    12f0:	d7 1e       	adc	r13, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    12f2:	f4 01       	movw	r30, r8
    12f4:	86 8d       	ldd	r24, Z+30	; 0x1e
    12f6:	97 8d       	ldd	r25, Z+31	; 0x1f
    12f8:	a0 a1       	ldd	r26, Z+32	; 0x20
    12fa:	b1 a1       	ldd	r27, Z+33	; 0x21
    12fc:	02 97       	sbiw	r24, 0x02	; 2
    12fe:	a1 09       	sbc	r26, r1
    1300:	b1 09       	sbc	r27, r1
    1302:	a8 16       	cp	r10, r24
    1304:	b9 06       	cpc	r11, r25
    1306:	ca 06       	cpc	r12, r26
    1308:	db 06       	cpc	r13, r27
    130a:	c0 f4       	brcc	.+48     	; 0x133c <__stack+0x23d>
	return clst * fs->csize + fs->database;
    130c:	22 81       	ldd	r18, Z+2	; 0x02
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	40 e0       	ldi	r20, 0x00	; 0
    1312:	50 e0       	ldi	r21, 0x00	; 0
    1314:	c6 01       	movw	r24, r12
    1316:	b5 01       	movw	r22, r10
    1318:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <__mulsi3>
    131c:	9b 01       	movw	r18, r22
    131e:	ac 01       	movw	r20, r24
    1320:	f4 01       	movw	r30, r8
    1322:	82 a5       	ldd	r24, Z+42	; 0x2a
    1324:	93 a5       	ldd	r25, Z+43	; 0x2b
    1326:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1328:	b5 a5       	ldd	r27, Z+45	; 0x2d
    132a:	28 0f       	add	r18, r24
    132c:	39 1f       	adc	r19, r25
    132e:	4a 1f       	adc	r20, r26
    1330:	5b 1f       	adc	r21, r27
			}
			fp->fptr += ofs;
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
			if (ofs % SS(fp->fs)) {
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    1332:	21 15       	cp	r18, r1
    1334:	31 05       	cpc	r19, r1
    1336:	41 05       	cpc	r20, r1
    1338:	51 05       	cpc	r21, r1
    133a:	69 f4       	brne	.+26     	; 0x1356 <__stack+0x257>
    133c:	ad 81       	ldd	r26, Y+5	; 0x05
    133e:	be 81       	ldd	r27, Y+6	; 0x06
    1340:	14 96       	adiw	r26, 0x04	; 4
    1342:	8c 91       	ld	r24, X
    1344:	14 97       	sbiw	r26, 0x04	; 4
    1346:	80 68       	ori	r24, 0x80	; 128
    1348:	14 96       	adiw	r26, 0x04	; 4
    134a:	8c 93       	st	X, r24
    134c:	e2 e0       	ldi	r30, 0x02	; 2
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	fc 83       	std	Y+4, r31	; 0x04
    1352:	eb 83       	std	Y+3, r30	; 0x03
    1354:	3e c0       	rjmp	.+124    	; 0x13d2 <__stack+0x2d3>
				nsect += fp->csect;
    1356:	2e 0d       	add	r18, r14
    1358:	31 1d       	adc	r19, r1
    135a:	41 1d       	adc	r20, r1
    135c:	51 1d       	adc	r21, r1
				fp->csect++;
    135e:	e3 94       	inc	r14
    1360:	ad 81       	ldd	r26, Y+5	; 0x05
    1362:	be 81       	ldd	r27, Y+6	; 0x06
    1364:	15 96       	adiw	r26, 0x05	; 5
    1366:	ec 92       	st	X, r14
    1368:	04 c0       	rjmp	.+8      	; 0x1372 <__stack+0x273>
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	40 e0       	ldi	r20, 0x00	; 0
    1370:	50 e0       	ldi	r21, 0x00	; 0
			}
		}
	}
	if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
    1372:	ed 81       	ldd	r30, Y+5	; 0x05
    1374:	fe 81       	ldd	r31, Y+6	; 0x06
    1376:	86 81       	ldd	r24, Z+6	; 0x06
    1378:	97 81       	ldd	r25, Z+7	; 0x07
    137a:	a0 85       	ldd	r26, Z+8	; 0x08
    137c:	b1 85       	ldd	r27, Z+9	; 0x09
    137e:	91 70       	andi	r25, 0x01	; 1
    1380:	a0 70       	andi	r26, 0x00	; 0
    1382:	b0 70       	andi	r27, 0x00	; 0
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	a1 05       	cpc	r26, r1
    1388:	b1 05       	cpc	r27, r1
    138a:	69 f0       	breq	.+26     	; 0x13a6 <__stack+0x2a7>
    138c:	86 89       	ldd	r24, Z+22	; 0x16
    138e:	97 89       	ldd	r25, Z+23	; 0x17
    1390:	a0 8d       	ldd	r26, Z+24	; 0x18
    1392:	b1 8d       	ldd	r27, Z+25	; 0x19
    1394:	28 17       	cp	r18, r24
    1396:	39 07       	cpc	r19, r25
    1398:	4a 07       	cpc	r20, r26
    139a:	5b 07       	cpc	r21, r27
    139c:	21 f0       	breq	.+8      	; 0x13a6 <__stack+0x2a7>
		}
#endif
		if (disk_read(fp->fs->drive, fp->buf, nsect, 1) != RES_OK)
			ABORT(fp->fs, FR_DISK_ERR);
#endif
		fp->dsect = nsect;
    139e:	26 8b       	std	Z+22, r18	; 0x16
    13a0:	37 8b       	std	Z+23, r19	; 0x17
    13a2:	40 8f       	std	Z+24, r20	; 0x18
    13a4:	51 8f       	std	Z+25, r21	; 0x19
	}
#if !_FS_READONLY
	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
    13a6:	ed 81       	ldd	r30, Y+5	; 0x05
    13a8:	fe 81       	ldd	r31, Y+6	; 0x06
    13aa:	26 81       	ldd	r18, Z+6	; 0x06
    13ac:	37 81       	ldd	r19, Z+7	; 0x07
    13ae:	40 85       	ldd	r20, Z+8	; 0x08
    13b0:	51 85       	ldd	r21, Z+9	; 0x09
    13b2:	82 85       	ldd	r24, Z+10	; 0x0a
    13b4:	93 85       	ldd	r25, Z+11	; 0x0b
    13b6:	a4 85       	ldd	r26, Z+12	; 0x0c
    13b8:	b5 85       	ldd	r27, Z+13	; 0x0d
    13ba:	82 17       	cp	r24, r18
    13bc:	93 07       	cpc	r25, r19
    13be:	a4 07       	cpc	r26, r20
    13c0:	b5 07       	cpc	r27, r21
    13c2:	38 f4       	brcc	.+14     	; 0x13d2 <__stack+0x2d3>
		fp->fsize = fp->fptr;
    13c4:	22 87       	std	Z+10, r18	; 0x0a
    13c6:	33 87       	std	Z+11, r19	; 0x0b
    13c8:	44 87       	std	Z+12, r20	; 0x0c
    13ca:	55 87       	std	Z+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    13cc:	84 81       	ldd	r24, Z+4	; 0x04
    13ce:	80 62       	ori	r24, 0x20	; 32
    13d0:	84 83       	std	Z+4, r24	; 0x04
	}
#endif

	LEAVE_FF(fp->fs, res);
}
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	9c 81       	ldd	r25, Y+4	; 0x04
    13d6:	26 96       	adiw	r28, 0x06	; 6
    13d8:	e2 e1       	ldi	r30, 0x12	; 18
    13da:	0c 94 cb 2e 	jmp	0x5d96	; 0x5d96 <__epilogue_restores__>

000013de <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
	DIR *dj,		/* Pointer to directory object */
	BOOL streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
)
{
    13de:	a0 e0       	ldi	r26, 0x00	; 0
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	e5 ef       	ldi	r30, 0xF5	; 245
    13e4:	f9 e0       	ldi	r31, 0x09	; 9
    13e6:	0c 94 b1 2e 	jmp	0x5d62	; 0x5d62 <__prologue_saves__+0x4>
    13ea:	ec 01       	movw	r28, r24
    13ec:	6b 01       	movw	r12, r22
	DWORD clst;
	WORD i;


	i = dj->index + 1;
    13ee:	6c 80       	ldd	r6, Y+4	; 0x04
    13f0:	7d 80       	ldd	r7, Y+5	; 0x05
    13f2:	08 94       	sec
    13f4:	61 1c       	adc	r6, r1
    13f6:	71 1c       	adc	r7, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    13f8:	61 14       	cp	r6, r1
    13fa:	71 04       	cpc	r7, r1
    13fc:	09 f4       	brne	.+2      	; 0x1400 <dir_next+0x22>
    13fe:	4a c1       	rjmp	.+660    	; 0x1694 <dir_next+0x2b6>
    1400:	8e 85       	ldd	r24, Y+14	; 0x0e
    1402:	9f 85       	ldd	r25, Y+15	; 0x0f
    1404:	a8 89       	ldd	r26, Y+16	; 0x10
    1406:	b9 89       	ldd	r27, Y+17	; 0x11
    1408:	00 97       	sbiw	r24, 0x00	; 0
    140a:	a1 05       	cpc	r26, r1
    140c:	b1 05       	cpc	r27, r1
    140e:	09 f4       	brne	.+2      	; 0x1412 <dir_next+0x34>
    1410:	41 c1       	rjmp	.+642    	; 0x1694 <dir_next+0x2b6>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
    1412:	2f e0       	ldi	r18, 0x0F	; 15
    1414:	42 2e       	mov	r4, r18
    1416:	51 2c       	mov	r5, r1
    1418:	46 20       	and	r4, r6
    141a:	57 20       	and	r5, r7
    141c:	41 14       	cp	r4, r1
    141e:	51 04       	cpc	r5, r1
    1420:	09 f0       	breq	.+2      	; 0x1424 <dir_next+0x46>
    1422:	27 c1       	rjmp	.+590    	; 0x1672 <dir_next+0x294>
		dj->sect++;					/* Next sector */
    1424:	01 96       	adiw	r24, 0x01	; 1
    1426:	a1 1d       	adc	r26, r1
    1428:	b1 1d       	adc	r27, r1
    142a:	8e 87       	std	Y+14, r24	; 0x0e
    142c:	9f 87       	std	Y+15, r25	; 0x0f
    142e:	a8 8b       	std	Y+16, r26	; 0x10
    1430:	b9 8b       	std	Y+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    1432:	4a 85       	ldd	r20, Y+10	; 0x0a
    1434:	5b 85       	ldd	r21, Y+11	; 0x0b
    1436:	6c 85       	ldd	r22, Y+12	; 0x0c
    1438:	7d 85       	ldd	r23, Y+13	; 0x0d
    143a:	e8 81       	ld	r30, Y
    143c:	f9 81       	ldd	r31, Y+1	; 0x01
    143e:	41 15       	cp	r20, r1
    1440:	51 05       	cpc	r21, r1
    1442:	61 05       	cpc	r22, r1
    1444:	71 05       	cpc	r23, r1
    1446:	39 f4       	brne	.+14     	; 0x1456 <dir_next+0x78>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    1448:	80 85       	ldd	r24, Z+8	; 0x08
    144a:	91 85       	ldd	r25, Z+9	; 0x09
    144c:	68 16       	cp	r6, r24
    144e:	79 06       	cpc	r7, r25
    1450:	08 f4       	brcc	.+2      	; 0x1454 <dir_next+0x76>
    1452:	0f c1       	rjmp	.+542    	; 0x1672 <dir_next+0x294>
    1454:	1f c1       	rjmp	.+574    	; 0x1694 <dir_next+0x2b6>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    1456:	82 81       	ldd	r24, Z+2	; 0x02
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	01 97       	sbiw	r24, 0x01	; 1
    145c:	93 01       	movw	r18, r6
    145e:	a4 e0       	ldi	r26, 0x04	; 4
    1460:	36 95       	lsr	r19
    1462:	27 95       	ror	r18
    1464:	aa 95       	dec	r26
    1466:	e1 f7       	brne	.-8      	; 0x1460 <dir_next+0x82>
    1468:	82 23       	and	r24, r18
    146a:	93 23       	and	r25, r19
    146c:	89 2b       	or	r24, r25
    146e:	09 f0       	breq	.+2      	; 0x1472 <dir_next+0x94>
    1470:	00 c1       	rjmp	.+512    	; 0x1672 <dir_next+0x294>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    1472:	cf 01       	movw	r24, r30
    1474:	0e 94 92 05 	call	0xb24	; 0xb24 <get_fat>
    1478:	7b 01       	movw	r14, r22
    147a:	8c 01       	movw	r16, r24
				if (clst <= 1) return FR_INT_ERR;
    147c:	82 e0       	ldi	r24, 0x02	; 2
    147e:	e8 16       	cp	r14, r24
    1480:	f1 04       	cpc	r15, r1
    1482:	01 05       	cpc	r16, r1
    1484:	11 05       	cpc	r17, r1
    1486:	08 f4       	brcc	.+2      	; 0x148a <dir_next+0xac>
    1488:	08 c1       	rjmp	.+528    	; 0x169a <dir_next+0x2bc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    148a:	9f ef       	ldi	r25, 0xFF	; 255
    148c:	e9 16       	cp	r14, r25
    148e:	9f ef       	ldi	r25, 0xFF	; 255
    1490:	f9 06       	cpc	r15, r25
    1492:	9f ef       	ldi	r25, 0xFF	; 255
    1494:	09 07       	cpc	r16, r25
    1496:	9f ef       	ldi	r25, 0xFF	; 255
    1498:	19 07       	cpc	r17, r25
    149a:	09 f4       	brne	.+2      	; 0x149e <dir_next+0xc0>
    149c:	01 c1       	rjmp	.+514    	; 0x16a0 <dir_next+0x2c2>
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
    149e:	e8 81       	ld	r30, Y
    14a0:	f9 81       	ldd	r31, Y+1	; 0x01
    14a2:	86 8d       	ldd	r24, Z+30	; 0x1e
    14a4:	97 8d       	ldd	r25, Z+31	; 0x1f
    14a6:	a0 a1       	ldd	r26, Z+32	; 0x20
    14a8:	b1 a1       	ldd	r27, Z+33	; 0x21
    14aa:	e8 16       	cp	r14, r24
    14ac:	f9 06       	cpc	r15, r25
    14ae:	0a 07       	cpc	r16, r26
    14b0:	1b 07       	cpc	r17, r27
    14b2:	08 f4       	brcc	.+2      	; 0x14b6 <dir_next+0xd8>
    14b4:	a5 c0       	rjmp	.+330    	; 0x1600 <dir_next+0x222>
#if !_FS_READONLY
					BYTE c;
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
    14b6:	c1 14       	cp	r12, r1
    14b8:	d1 04       	cpc	r13, r1
    14ba:	09 f4       	brne	.+2      	; 0x14be <dir_next+0xe0>
    14bc:	eb c0       	rjmp	.+470    	; 0x1694 <dir_next+0x2b6>
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
    14be:	4a 85       	ldd	r20, Y+10	; 0x0a
    14c0:	5b 85       	ldd	r21, Y+11	; 0x0b
    14c2:	6c 85       	ldd	r22, Y+12	; 0x0c
    14c4:	7d 85       	ldd	r23, Y+13	; 0x0d
    14c6:	cf 01       	movw	r24, r30
    14c8:	0e 94 39 07 	call	0xe72	; 0xe72 <create_chain>
    14cc:	7b 01       	movw	r14, r22
    14ce:	8c 01       	movw	r16, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    14d0:	61 15       	cp	r22, r1
    14d2:	71 05       	cpc	r23, r1
    14d4:	81 05       	cpc	r24, r1
    14d6:	91 05       	cpc	r25, r1
    14d8:	19 f4       	brne	.+6      	; 0x14e0 <dir_next+0x102>
    14da:	27 e0       	ldi	r18, 0x07	; 7
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	e2 c0       	rjmp	.+452    	; 0x16a4 <dir_next+0x2c6>
					if (clst == 1) return FR_INT_ERR;
    14e0:	61 30       	cpi	r22, 0x01	; 1
    14e2:	71 05       	cpc	r23, r1
    14e4:	81 05       	cpc	r24, r1
    14e6:	91 05       	cpc	r25, r1
    14e8:	09 f4       	brne	.+2      	; 0x14ec <dir_next+0x10e>
    14ea:	d7 c0       	rjmp	.+430    	; 0x169a <dir_next+0x2bc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    14ec:	6f 3f       	cpi	r22, 0xFF	; 255
    14ee:	bf ef       	ldi	r27, 0xFF	; 255
    14f0:	7b 07       	cpc	r23, r27
    14f2:	bf ef       	ldi	r27, 0xFF	; 255
    14f4:	8b 07       	cpc	r24, r27
    14f6:	bf ef       	ldi	r27, 0xFF	; 255
    14f8:	9b 07       	cpc	r25, r27
    14fa:	09 f4       	brne	.+2      	; 0x14fe <dir_next+0x120>
    14fc:	d1 c0       	rjmp	.+418    	; 0x16a0 <dir_next+0x2c2>
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    14fe:	88 81       	ld	r24, Y
    1500:	99 81       	ldd	r25, Y+1	; 0x01
    1502:	40 e0       	ldi	r20, 0x00	; 0
    1504:	50 e0       	ldi	r21, 0x00	; 0
    1506:	60 e0       	ldi	r22, 0x00	; 0
    1508:	70 e0       	ldi	r23, 0x00	; 0
    150a:	0e 94 5e 04 	call	0x8bc	; 0x8bc <move_window>
    150e:	89 2b       	or	r24, r25
    1510:	09 f0       	breq	.+2      	; 0x1514 <dir_next+0x136>
    1512:	c6 c0       	rjmp	.+396    	; 0x16a0 <dir_next+0x2c2>
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    1514:	88 81       	ld	r24, Y
    1516:	99 81       	ldd	r25, Y+1	; 0x01
    1518:	fc 01       	movw	r30, r24
    151a:	f2 96       	adiw	r30, 0x32	; 50
	while (cnt--) *d++ = (char)val;
    151c:	8e 5c       	subi	r24, 0xCE	; 206
    151e:	9d 4f       	sbci	r25, 0xFD	; 253
    1520:	01 c0       	rjmp	.+2      	; 0x1524 <dir_next+0x146>
    1522:	11 92       	st	Z+, r1
    1524:	e8 17       	cp	r30, r24
    1526:	f9 07       	cpc	r31, r25
    1528:	e1 f7       	brne	.-8      	; 0x1522 <dir_next+0x144>
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    152a:	88 80       	ld	r8, Y
    152c:	99 80       	ldd	r9, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    152e:	ee ef       	ldi	r30, 0xFE	; 254
    1530:	ae 2e       	mov	r10, r30
    1532:	ef ef       	ldi	r30, 0xFF	; 255
    1534:	be 2e       	mov	r11, r30
    1536:	ef ef       	ldi	r30, 0xFF	; 255
    1538:	ce 2e       	mov	r12, r30
    153a:	ef ef       	ldi	r30, 0xFF	; 255
    153c:	de 2e       	mov	r13, r30
    153e:	ae 0c       	add	r10, r14
    1540:	bf 1c       	adc	r11, r15
    1542:	c0 1e       	adc	r12, r16
    1544:	d1 1e       	adc	r13, r17
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1546:	f4 01       	movw	r30, r8
    1548:	86 8d       	ldd	r24, Z+30	; 0x1e
    154a:	97 8d       	ldd	r25, Z+31	; 0x1f
    154c:	a0 a1       	ldd	r26, Z+32	; 0x20
    154e:	b1 a1       	ldd	r27, Z+33	; 0x21
    1550:	02 97       	sbiw	r24, 0x02	; 2
    1552:	a1 09       	sbc	r26, r1
    1554:	b1 09       	sbc	r27, r1
    1556:	a8 16       	cp	r10, r24
    1558:	b9 06       	cpc	r11, r25
    155a:	ca 06       	cpc	r12, r26
    155c:	db 06       	cpc	r13, r27
    155e:	28 f0       	brcs	.+10     	; 0x156a <dir_next+0x18c>
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	40 e0       	ldi	r20, 0x00	; 0
    1566:	50 e0       	ldi	r21, 0x00	; 0
    1568:	15 c0       	rjmp	.+42     	; 0x1594 <dir_next+0x1b6>
	return clst * fs->csize + fs->database;
    156a:	d4 01       	movw	r26, r8
    156c:	12 96       	adiw	r26, 0x02	; 2
    156e:	2c 91       	ld	r18, X
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	40 e0       	ldi	r20, 0x00	; 0
    1574:	50 e0       	ldi	r21, 0x00	; 0
    1576:	c6 01       	movw	r24, r12
    1578:	b5 01       	movw	r22, r10
    157a:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <__mulsi3>
    157e:	9b 01       	movw	r18, r22
    1580:	ac 01       	movw	r20, r24
    1582:	f4 01       	movw	r30, r8
    1584:	82 a5       	ldd	r24, Z+42	; 0x2a
    1586:	93 a5       	ldd	r25, Z+43	; 0x2b
    1588:	a4 a5       	ldd	r26, Z+44	; 0x2c
    158a:	b5 a5       	ldd	r27, Z+45	; 0x2d
    158c:	28 0f       	add	r18, r24
    158e:	39 1f       	adc	r19, r25
    1590:	4a 1f       	adc	r20, r26
    1592:	5b 1f       	adc	r21, r27
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    1594:	d4 01       	movw	r26, r8
    1596:	9e 96       	adiw	r26, 0x2e	; 46
    1598:	2d 93       	st	X+, r18
    159a:	3d 93       	st	X+, r19
    159c:	4d 93       	st	X+, r20
    159e:	5c 93       	st	X, r21
    15a0:	d1 97       	sbiw	r26, 0x31	; 49
    15a2:	dd 24       	eor	r13, r13
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
    15a4:	cc 24       	eor	r12, r12
    15a6:	c3 94       	inc	r12
    15a8:	1a c0       	rjmp	.+52     	; 0x15de <dir_next+0x200>
    15aa:	c4 82       	std	Z+4, r12	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    15ac:	88 81       	ld	r24, Y
    15ae:	99 81       	ldd	r25, Y+1	; 0x01
    15b0:	40 e0       	ldi	r20, 0x00	; 0
    15b2:	50 e0       	ldi	r21, 0x00	; 0
    15b4:	60 e0       	ldi	r22, 0x00	; 0
    15b6:	70 e0       	ldi	r23, 0x00	; 0
    15b8:	0e 94 5e 04 	call	0x8bc	; 0x8bc <move_window>
    15bc:	89 2b       	or	r24, r25
    15be:	09 f0       	breq	.+2      	; 0x15c2 <dir_next+0x1e4>
    15c0:	6f c0       	rjmp	.+222    	; 0x16a0 <dir_next+0x2c2>
						dj->fs->winsect++;
    15c2:	e8 81       	ld	r30, Y
    15c4:	f9 81       	ldd	r31, Y+1	; 0x01
    15c6:	86 a5       	ldd	r24, Z+46	; 0x2e
    15c8:	97 a5       	ldd	r25, Z+47	; 0x2f
    15ca:	a0 a9       	ldd	r26, Z+48	; 0x30
    15cc:	b1 a9       	ldd	r27, Z+49	; 0x31
    15ce:	01 96       	adiw	r24, 0x01	; 1
    15d0:	a1 1d       	adc	r26, r1
    15d2:	b1 1d       	adc	r27, r1
    15d4:	86 a7       	std	Z+46, r24	; 0x2e
    15d6:	97 a7       	std	Z+47, r25	; 0x2f
    15d8:	a0 ab       	std	Z+48, r26	; 0x30
    15da:	b1 ab       	std	Z+49, r27	; 0x31
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    15dc:	d3 94       	inc	r13
    15de:	e8 81       	ld	r30, Y
    15e0:	f9 81       	ldd	r31, Y+1	; 0x01
    15e2:	82 81       	ldd	r24, Z+2	; 0x02
    15e4:	d8 16       	cp	r13, r24
    15e6:	08 f3       	brcs	.-62     	; 0x15aa <dir_next+0x1cc>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    15e8:	86 a5       	ldd	r24, Z+46	; 0x2e
    15ea:	97 a5       	ldd	r25, Z+47	; 0x2f
    15ec:	a0 a9       	ldd	r26, Z+48	; 0x30
    15ee:	b1 a9       	ldd	r27, Z+49	; 0x31
    15f0:	8d 19       	sub	r24, r13
    15f2:	91 09       	sbc	r25, r1
    15f4:	a1 09       	sbc	r26, r1
    15f6:	b1 09       	sbc	r27, r1
    15f8:	86 a7       	std	Z+46, r24	; 0x2e
    15fa:	97 a7       	std	Z+47, r25	; 0x2f
    15fc:	a0 ab       	std	Z+48, r26	; 0x30
    15fe:	b1 ab       	std	Z+49, r27	; 0x31
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    1600:	ea 86       	std	Y+10, r14	; 0x0a
    1602:	fb 86       	std	Y+11, r15	; 0x0b
    1604:	0c 87       	std	Y+12, r16	; 0x0c
    1606:	1d 87       	std	Y+13, r17	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    1608:	c8 80       	ld	r12, Y
    160a:	d9 80       	ldd	r13, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    160c:	8e ef       	ldi	r24, 0xFE	; 254
    160e:	9f ef       	ldi	r25, 0xFF	; 255
    1610:	af ef       	ldi	r26, 0xFF	; 255
    1612:	bf ef       	ldi	r27, 0xFF	; 255
    1614:	e8 0e       	add	r14, r24
    1616:	f9 1e       	adc	r15, r25
    1618:	0a 1f       	adc	r16, r26
    161a:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    161c:	f6 01       	movw	r30, r12
    161e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1620:	97 8d       	ldd	r25, Z+31	; 0x1f
    1622:	a0 a1       	ldd	r26, Z+32	; 0x20
    1624:	b1 a1       	ldd	r27, Z+33	; 0x21
    1626:	02 97       	sbiw	r24, 0x02	; 2
    1628:	a1 09       	sbc	r26, r1
    162a:	b1 09       	sbc	r27, r1
    162c:	e8 16       	cp	r14, r24
    162e:	f9 06       	cpc	r15, r25
    1630:	0a 07       	cpc	r16, r26
    1632:	1b 07       	cpc	r17, r27
    1634:	28 f0       	brcs	.+10     	; 0x1640 <dir_next+0x262>
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	40 e0       	ldi	r20, 0x00	; 0
    163c:	50 e0       	ldi	r21, 0x00	; 0
    163e:	15 c0       	rjmp	.+42     	; 0x166a <dir_next+0x28c>
	return clst * fs->csize + fs->database;
    1640:	d6 01       	movw	r26, r12
    1642:	12 96       	adiw	r26, 0x02	; 2
    1644:	2c 91       	ld	r18, X
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	40 e0       	ldi	r20, 0x00	; 0
    164a:	50 e0       	ldi	r21, 0x00	; 0
    164c:	c8 01       	movw	r24, r16
    164e:	b7 01       	movw	r22, r14
    1650:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <__mulsi3>
    1654:	9b 01       	movw	r18, r22
    1656:	ac 01       	movw	r20, r24
    1658:	f6 01       	movw	r30, r12
    165a:	82 a5       	ldd	r24, Z+42	; 0x2a
    165c:	93 a5       	ldd	r25, Z+43	; 0x2b
    165e:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1660:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1662:	28 0f       	add	r18, r24
    1664:	39 1f       	adc	r19, r25
    1666:	4a 1f       	adc	r20, r26
    1668:	5b 1f       	adc	r21, r27
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(dj->fs, clst);
    166a:	2e 87       	std	Y+14, r18	; 0x0e
    166c:	3f 87       	std	Y+15, r19	; 0x0f
    166e:	48 8b       	std	Y+16, r20	; 0x10
    1670:	59 8b       	std	Y+17, r21	; 0x11
			}
		}
	}

	dj->index = i;
    1672:	7d 82       	std	Y+5, r7	; 0x05
    1674:	6c 82       	std	Y+4, r6	; 0x04
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
    1676:	88 81       	ld	r24, Y
    1678:	99 81       	ldd	r25, Y+1	; 0x01
    167a:	c2 96       	adiw	r24, 0x32	; 50
    167c:	75 e0       	ldi	r23, 0x05	; 5
    167e:	44 0c       	add	r4, r4
    1680:	55 1c       	adc	r5, r5
    1682:	7a 95       	dec	r23
    1684:	e1 f7       	brne	.-8      	; 0x167e <dir_next+0x2a0>
    1686:	84 0d       	add	r24, r4
    1688:	95 1d       	adc	r25, r5
    168a:	9b 8b       	std	Y+19, r25	; 0x13
    168c:	8a 8b       	std	Y+18, r24	; 0x12
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	08 c0       	rjmp	.+16     	; 0x16a4 <dir_next+0x2c6>

	return FR_OK;
    1694:	24 e0       	ldi	r18, 0x04	; 4
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	05 c0       	rjmp	.+10     	; 0x16a4 <dir_next+0x2c6>
    169a:	22 e0       	ldi	r18, 0x02	; 2
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <dir_next+0x2c6>
    16a0:	21 e0       	ldi	r18, 0x01	; 1
    16a2:	30 e0       	ldi	r19, 0x00	; 0
}
    16a4:	c9 01       	movw	r24, r18
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	e0 e1       	ldi	r30, 0x10	; 16
    16ac:	0c 94 cd 2e 	jmp	0x5d9a	; 0x5d9a <__epilogue_restores__+0x4>

000016b0 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    16b0:	ac e0       	ldi	r26, 0x0C	; 12
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	ee e5       	ldi	r30, 0x5E	; 94
    16b6:	fb e0       	ldi	r31, 0x0B	; 11
    16b8:	0c 94 b7 2e 	jmp	0x5d6e	; 0x5d6e <__prologue_saves__+0x10>
    16bc:	8c 01       	movw	r16, r24
    16be:	7b 01       	movw	r14, r22
	FRESULT res;
	NAMEBUF(sfn, lfn);


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    16c0:	dc 01       	movw	r26, r24
    16c2:	12 96       	adiw	r26, 0x02	; 2
    16c4:	6d 91       	ld	r22, X+
    16c6:	7c 91       	ld	r23, X
    16c8:	13 97       	sbiw	r26, 0x03	; 3
    16ca:	8d 91       	ld	r24, X+
    16cc:	9c 91       	ld	r25, X
    16ce:	0e 94 44 04 	call	0x888	; 0x888 <validate>
	if (res == FR_OK) {
    16d2:	00 97       	sbiw	r24, 0x00	; 0
    16d4:	81 f4       	brne	.+32     	; 0x16f6 <f_readdir+0x46>
		INITBUF((*dj), sfn, lfn);
    16d6:	ce 01       	movw	r24, r28
    16d8:	01 96       	adiw	r24, 0x01	; 1
    16da:	f8 01       	movw	r30, r16
    16dc:	95 8b       	std	Z+21, r25	; 0x15
    16de:	84 8b       	std	Z+20, r24	; 0x14
		if (!fno) {
    16e0:	e1 14       	cp	r14, r1
    16e2:	f1 04       	cpc	r15, r1
    16e4:	19 f0       	breq	.+6      	; 0x16ec <f_readdir+0x3c>
    16e6:	24 e0       	ldi	r18, 0x04	; 4
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	25 c0       	rjmp	.+74     	; 0x1736 <f_readdir+0x86>
			res = dir_seek(dj, 0);
    16ec:	c8 01       	movw	r24, r16
    16ee:	60 e0       	ldi	r22, 0x00	; 0
    16f0:	70 e0       	ldi	r23, 0x00	; 0
    16f2:	0e 94 48 06 	call	0xc90	; 0xc90 <dir_seek>
    16f6:	9c 01       	movw	r18, r24
    16f8:	ac c0       	rjmp	.+344    	; 0x1852 <f_readdir+0x1a2>
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
    16fa:	d8 01       	movw	r26, r16
    16fc:	8d 91       	ld	r24, X+
    16fe:	9c 91       	ld	r25, X
    1700:	0e 94 5e 04 	call	0x8bc	; 0x8bc <move_window>
    1704:	9c 01       	movw	r18, r24
		if (res != FR_OK) break;
    1706:	00 97       	sbiw	r24, 0x00	; 0
    1708:	19 f5       	brne	.+70     	; 0x1750 <f_readdir+0xa0>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    170a:	d8 01       	movw	r26, r16
    170c:	52 96       	adiw	r26, 0x12	; 18
    170e:	ed 91       	ld	r30, X+
    1710:	fc 91       	ld	r31, X
    1712:	53 97       	sbiw	r26, 0x13	; 19
		c = dir[DIR_Name];
    1714:	80 81       	ld	r24, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1716:	88 23       	and	r24, r24
    1718:	09 f4       	brne	.+2      	; 0x171c <f_readdir+0x6c>
    171a:	a0 c0       	rjmp	.+320    	; 0x185c <f_readdir+0x1ac>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    171c:	85 3e       	cpi	r24, 0xE5	; 229
    171e:	19 f0       	breq	.+6      	; 0x1726 <f_readdir+0x76>
    1720:	83 85       	ldd	r24, Z+11	; 0x0b
    1722:	83 ff       	sbrs	r24, 3
    1724:	23 c0       	rjmp	.+70     	; 0x176c <f_readdir+0xbc>
			break;
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
    1726:	c8 01       	movw	r24, r16
    1728:	60 e0       	ldi	r22, 0x00	; 0
    172a:	70 e0       	ldi	r23, 0x00	; 0
    172c:	0e 94 ef 09 	call	0x13de	; 0x13de <dir_next>
    1730:	9c 01       	movw	r18, r24
		if (res != FR_OK) break;
    1732:	00 97       	sbiw	r24, 0x00	; 0
    1734:	69 f4       	brne	.+26     	; 0x1750 <f_readdir+0xa0>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
    1736:	f8 01       	movw	r30, r16
    1738:	46 85       	ldd	r20, Z+14	; 0x0e
    173a:	57 85       	ldd	r21, Z+15	; 0x0f
    173c:	60 89       	ldd	r22, Z+16	; 0x10
    173e:	71 89       	ldd	r23, Z+17	; 0x11
    1740:	41 15       	cp	r20, r1
    1742:	51 05       	cpc	r21, r1
    1744:	61 05       	cpc	r22, r1
    1746:	71 05       	cpc	r23, r1
    1748:	c1 f6       	brne	.-80     	; 0x16fa <f_readdir+0x4a>
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    174a:	21 15       	cp	r18, r1
    174c:	31 05       	cpc	r19, r1
    174e:	71 f0       	breq	.+28     	; 0x176c <f_readdir+0xbc>
    1750:	d8 01       	movw	r26, r16
    1752:	1e 96       	adiw	r26, 0x0e	; 14
    1754:	1d 92       	st	X+, r1
    1756:	1d 92       	st	X+, r1
    1758:	1d 92       	st	X+, r1
    175a:	1c 92       	st	X, r1
    175c:	51 97       	sbiw	r26, 0x11	; 17
		INITBUF((*dj), sfn, lfn);
		if (!fno) {
			res = dir_seek(dj, 0);
		} else {
			res = dir_read(dj);
			if (res == FR_NO_FILE) {
    175e:	24 30       	cpi	r18, 0x04	; 4
    1760:	31 05       	cpc	r19, r1
    1762:	21 f0       	breq	.+8      	; 0x176c <f_readdir+0xbc>
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    1764:	21 15       	cp	r18, r1
    1766:	31 05       	cpc	r19, r1
    1768:	09 f0       	breq	.+2      	; 0x176c <f_readdir+0xbc>
    176a:	73 c0       	rjmp	.+230    	; 0x1852 <f_readdir+0x1a2>
	int i;
	BYTE c, nt, *dir;
	char *p;


	p = fno->fname;
    176c:	97 01       	movw	r18, r14
    176e:	27 5f       	subi	r18, 0xF7	; 247
    1770:	3f 4f       	sbci	r19, 0xFF	; 255
	if (dj->sect) {
    1772:	f8 01       	movw	r30, r16
    1774:	86 85       	ldd	r24, Z+14	; 0x0e
    1776:	97 85       	ldd	r25, Z+15	; 0x0f
    1778:	a0 89       	ldd	r26, Z+16	; 0x10
    177a:	b1 89       	ldd	r27, Z+17	; 0x11
    177c:	00 97       	sbiw	r24, 0x00	; 0
    177e:	a1 05       	cpc	r26, r1
    1780:	b1 05       	cpc	r27, r1
    1782:	09 f4       	brne	.+2      	; 0x1786 <f_readdir+0xd6>
    1784:	52 c0       	rjmp	.+164    	; 0x182a <f_readdir+0x17a>
		dir = dj->dir;
    1786:	42 89       	ldd	r20, Z+18	; 0x12
    1788:	53 89       	ldd	r21, Z+19	; 0x13
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	90 e0       	ldi	r25, 0x00	; 0
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
    178e:	fa 01       	movw	r30, r20
    1790:	e8 0f       	add	r30, r24
    1792:	f9 1f       	adc	r31, r25
    1794:	e0 81       	ld	r30, Z
			if (c == ' ') break;
    1796:	e0 32       	cpi	r30, 0x20	; 32
    1798:	51 f0       	breq	.+20     	; 0x17ae <f_readdir+0xfe>
			if (c == 0x05) c = 0xE5;
    179a:	e5 30       	cpi	r30, 0x05	; 5
    179c:	09 f4       	brne	.+2      	; 0x17a0 <f_readdir+0xf0>
    179e:	e5 ee       	ldi	r30, 0xE5	; 229
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
    17a0:	d9 01       	movw	r26, r18
    17a2:	ed 93       	st	X+, r30
    17a4:	9d 01       	movw	r18, r26

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
    17a6:	01 96       	adiw	r24, 0x01	; 1
    17a8:	88 30       	cpi	r24, 0x08	; 8
    17aa:	91 05       	cpc	r25, r1
    17ac:	81 f7       	brne	.-32     	; 0x178e <f_readdir+0xde>
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
    17ae:	fa 01       	movw	r30, r20
    17b0:	80 85       	ldd	r24, Z+8	; 0x08
    17b2:	80 32       	cpi	r24, 0x20	; 32
    17b4:	11 f4       	brne	.+4      	; 0x17ba <f_readdir+0x10a>
    17b6:	f9 01       	movw	r30, r18
    17b8:	10 c0       	rjmp	.+32     	; 0x17da <f_readdir+0x12a>
			*p++ = '.';
    17ba:	f9 01       	movw	r30, r18
    17bc:	8e e2       	ldi	r24, 0x2E	; 46
    17be:	81 93       	st	Z+, r24
    17c0:	da 01       	movw	r26, r20
			for (i = 8; i < 11; i++) {
    17c2:	2c 5f       	subi	r18, 0xFC	; 252
    17c4:	3f 4f       	sbci	r19, 0xFF	; 255
				c = dir[i];
    17c6:	18 96       	adiw	r26, 0x08	; 8
    17c8:	8c 91       	ld	r24, X
    17ca:	18 97       	sbiw	r26, 0x08	; 8
				if (c == ' ') break;
    17cc:	80 32       	cpi	r24, 0x20	; 32
    17ce:	29 f0       	breq	.+10     	; 0x17da <f_readdir+0x12a>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
    17d0:	81 93       	st	Z+, r24
    17d2:	11 96       	adiw	r26, 0x01	; 1
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    17d4:	e2 17       	cp	r30, r18
    17d6:	f3 07       	cpc	r31, r19
    17d8:	b1 f7       	brne	.-20     	; 0x17c6 <f_readdir+0x116>
				if (c == ' ') break;
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    17da:	da 01       	movw	r26, r20
    17dc:	1b 96       	adiw	r26, 0x0b	; 11
    17de:	8c 91       	ld	r24, X
    17e0:	d7 01       	movw	r26, r14
    17e2:	18 96       	adiw	r26, 0x08	; 8
    17e4:	8c 93       	st	X, r24
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    17e6:	da 01       	movw	r26, r20
    17e8:	5c 96       	adiw	r26, 0x1c	; 28
    17ea:	ad 90       	ld	r10, X+
    17ec:	bd 90       	ld	r11, X+
    17ee:	cd 90       	ld	r12, X+
    17f0:	dc 90       	ld	r13, X
    17f2:	5f 97       	sbiw	r26, 0x1f	; 31
    17f4:	d7 01       	movw	r26, r14
    17f6:	ad 92       	st	X+, r10
    17f8:	bd 92       	st	X+, r11
    17fa:	cd 92       	st	X+, r12
    17fc:	dc 92       	st	X, r13
    17fe:	13 97       	sbiw	r26, 0x03	; 3
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    1800:	da 01       	movw	r26, r20
    1802:	58 96       	adiw	r26, 0x18	; 24
    1804:	8d 91       	ld	r24, X+
    1806:	9c 91       	ld	r25, X
    1808:	59 97       	sbiw	r26, 0x19	; 25
    180a:	d7 01       	movw	r26, r14
    180c:	15 96       	adiw	r26, 0x05	; 5
    180e:	9c 93       	st	X, r25
    1810:	8e 93       	st	-X, r24
    1812:	14 97       	sbiw	r26, 0x04	; 4
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    1814:	da 01       	movw	r26, r20
    1816:	56 96       	adiw	r26, 0x16	; 22
    1818:	8d 91       	ld	r24, X+
    181a:	9c 91       	ld	r25, X
    181c:	57 97       	sbiw	r26, 0x17	; 23
    181e:	d7 01       	movw	r26, r14
    1820:	17 96       	adiw	r26, 0x07	; 7
    1822:	9c 93       	st	X, r25
    1824:	8e 93       	st	-X, r24
    1826:	16 97       	sbiw	r26, 0x06	; 6
    1828:	9f 01       	movw	r18, r30
	}
	*p = 0;
    182a:	f9 01       	movw	r30, r18
    182c:	10 82       	st	Z, r1
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj, FALSE);	/* Increment index for next */
    182e:	c8 01       	movw	r24, r16
    1830:	60 e0       	ldi	r22, 0x00	; 0
    1832:	70 e0       	ldi	r23, 0x00	; 0
    1834:	0e 94 ef 09 	call	0x13de	; 0x13de <dir_next>
    1838:	9c 01       	movw	r18, r24
				if (res == FR_NO_FILE) {
    183a:	84 30       	cpi	r24, 0x04	; 4
    183c:	91 05       	cpc	r25, r1
    183e:	49 f4       	brne	.+18     	; 0x1852 <f_readdir+0x1a2>
					dj->sect = 0;
    1840:	d8 01       	movw	r26, r16
    1842:	1e 96       	adiw	r26, 0x0e	; 14
    1844:	1d 92       	st	X+, r1
    1846:	1d 92       	st	X+, r1
    1848:	1d 92       	st	X+, r1
    184a:	1c 92       	st	X, r1
    184c:	51 97       	sbiw	r26, 0x11	; 17
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj->fs, res);
}
    1852:	c9 01       	movw	r24, r18
    1854:	2c 96       	adiw	r28, 0x0c	; 12
    1856:	ea e0       	ldi	r30, 0x0A	; 10
    1858:	0c 94 d3 2e 	jmp	0x5da6	; 0x5da6 <__epilogue_restores__+0x10>
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj, FALSE);	/* Increment index for next */
				if (res == FR_NO_FILE) {
					dj->sect = 0;
    185c:	24 e0       	ldi	r18, 0x04	; 4
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	77 cf       	rjmp	.-274    	; 0x1750 <f_readdir+0xa0>

00001862 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const XCHAR *path	/* Full-path string to find a file or directory */
)
{
    1862:	a0 e0       	ldi	r26, 0x00	; 0
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e7 e3       	ldi	r30, 0x37	; 55
    1868:	fc e0       	ldi	r31, 0x0C	; 12
    186a:	0c 94 b6 2e 	jmp	0x5d6c	; 0x5d6c <__prologue_saves__+0xe>
    186e:	ec 01       	movw	r28, r24
    1870:	7b 01       	movw	r14, r22
    1872:	03 c0       	rjmp	.+6      	; 0x187a <follow_path+0x18>
	FRESULT res;
	BYTE *dir, last;


	while (!_USE_LFN && *path == ' ') path++;	/* Skip leading spaces */
    1874:	08 94       	sec
    1876:	e1 1c       	adc	r14, r1
    1878:	f1 1c       	adc	r15, r1
    187a:	f7 01       	movw	r30, r14
    187c:	80 81       	ld	r24, Z
    187e:	80 32       	cpi	r24, 0x20	; 32
    1880:	c9 f3       	breq	.-14     	; 0x1874 <follow_path+0x12>
#if _FS_RPATH
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
    1882:	8f 32       	cpi	r24, 0x2F	; 47
    1884:	11 f0       	breq	.+4      	; 0x188a <follow_path+0x28>
    1886:	8c 35       	cpi	r24, 0x5C	; 92
    1888:	41 f4       	brne	.+16     	; 0x189a <follow_path+0x38>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
    188a:	08 94       	sec
    188c:	e1 1c       	adc	r14, r1
    188e:	f1 1c       	adc	r15, r1
    1890:	1e 82       	std	Y+6, r1	; 0x06
    1892:	1f 82       	std	Y+7, r1	; 0x07
    1894:	18 86       	std	Y+8, r1	; 0x08
    1896:	19 86       	std	Y+9, r1	; 0x09
    1898:	0a c0       	rjmp	.+20     	; 0x18ae <follow_path+0x4c>
	} else {							/* No heading saparator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
    189a:	e8 81       	ld	r30, Y
    189c:	f9 81       	ldd	r31, Y+1	; 0x01
    189e:	86 89       	ldd	r24, Z+22	; 0x16
    18a0:	97 89       	ldd	r25, Z+23	; 0x17
    18a2:	a0 8d       	ldd	r26, Z+24	; 0x18
    18a4:	b1 8d       	ldd	r27, Z+25	; 0x19
    18a6:	8e 83       	std	Y+6, r24	; 0x06
    18a8:	9f 83       	std	Y+7, r25	; 0x07
    18aa:	a8 87       	std	Y+8, r26	; 0x08
    18ac:	b9 87       	std	Y+9, r27	; 0x09
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
		path++;
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
    18ae:	f7 01       	movw	r30, r14
    18b0:	80 81       	ld	r24, Z
    18b2:	80 32       	cpi	r24, 0x20	; 32
    18b4:	48 f4       	brcc	.+18     	; 0x18c8 <follow_path+0x66>
		res = dir_seek(dj, 0);
    18b6:	ce 01       	movw	r24, r28
    18b8:	60 e0       	ldi	r22, 0x00	; 0
    18ba:	70 e0       	ldi	r23, 0x00	; 0
    18bc:	0e 94 48 06 	call	0xc90	; 0xc90 <dir_seek>
    18c0:	9c 01       	movw	r18, r24
		dj->dir = NULL;
    18c2:	1b 8a       	std	Y+19, r1	; 0x13
    18c4:	1a 8a       	std	Y+18, r1	; 0x12
    18c6:	2b c1       	rjmp	.+598    	; 0x1b1e <follow_path+0x2bc>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    18c8:	f0 e2       	ldi	r31, 0x20	; 32
    18ca:	9f 2e       	mov	r9, r31
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    18cc:	e5 e0       	ldi	r30, 0x05	; 5
    18ce:	ce 2e       	mov	r12, r30
	BYTE b, c, d, *sfn;
	int ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    18d0:	0c 89       	ldd	r16, Y+20	; 0x14
    18d2:	1d 89       	ldd	r17, Y+21	; 0x15
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    18d4:	f8 01       	movw	r30, r16
	while (cnt--) *d++ = (char)val;
    18d6:	c8 01       	movw	r24, r16
    18d8:	0b 96       	adiw	r24, 0x0b	; 11
    18da:	01 c0       	rjmp	.+2      	; 0x18de <follow_path+0x7c>
    18dc:	91 92       	st	Z+, r9
    18de:	e8 17       	cp	r30, r24
    18e0:	f9 07       	cpc	r31, r25
    18e2:	e1 f7       	brne	.-8      	; 0x18dc <follow_path+0x7a>
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
	p = *path;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
    18e4:	f7 01       	movw	r30, r14
    18e6:	80 81       	ld	r24, Z
    18e8:	8e 32       	cpi	r24, 0x2E	; 46
    18ea:	49 f0       	breq	.+18     	; 0x18fe <follow_path+0x9c>
    18ec:	40 e0       	ldi	r20, 0x00	; 0
    18ee:	50 e0       	ldi	r21, 0x00	; 0
    18f0:	a0 e0       	ldi	r26, 0x00	; 0
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	78 e0       	ldi	r23, 0x08	; 8
    18f6:	a7 2e       	mov	r10, r23
    18f8:	b1 2c       	mov	r11, r1
    18fa:	dd 24       	eor	r13, r13
    18fc:	21 c0       	rjmp	.+66     	; 0x1940 <follow_path+0xde>
    18fe:	d8 01       	movw	r26, r16
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	90 e0       	ldi	r25, 0x00	; 0
		for (;;) {
			c = p[si++];
    1904:	f7 01       	movw	r30, r14
    1906:	e8 0f       	add	r30, r24
    1908:	f9 1f       	adc	r31, r25
    190a:	e0 81       	ld	r30, Z
    190c:	01 96       	adiw	r24, 0x01	; 1
			if (c != '.' || si >= 3) break;
    190e:	ee 32       	cpi	r30, 0x2E	; 46
    1910:	31 f4       	brne	.+12     	; 0x191e <follow_path+0xbc>
    1912:	83 30       	cpi	r24, 0x03	; 3
    1914:	91 05       	cpc	r25, r1
    1916:	09 f4       	brne	.+2      	; 0x191a <follow_path+0xb8>
    1918:	fb c0       	rjmp	.+502    	; 0x1b10 <follow_path+0x2ae>
			sfn[i++] = c;
    191a:	ed 93       	st	X+, r30
    191c:	f3 cf       	rjmp	.-26     	; 0x1904 <follow_path+0xa2>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
    191e:	ef 32       	cpi	r30, 0x2F	; 47
    1920:	29 f0       	breq	.+10     	; 0x192c <follow_path+0xca>
    1922:	ec 35       	cpi	r30, 0x5C	; 92
    1924:	39 f0       	breq	.+14     	; 0x1934 <follow_path+0xd2>
    1926:	e1 32       	cpi	r30, 0x21	; 33
    1928:	08 f0       	brcs	.+2      	; 0x192c <follow_path+0xca>
    192a:	f2 c0       	rjmp	.+484    	; 0x1b10 <follow_path+0x2ae>
		*path = &p[si];									/* Rerurn pointer to the next segment */
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    192c:	e1 32       	cpi	r30, 0x21	; 33
    192e:	10 f4       	brcc	.+4      	; 0x1934 <follow_path+0xd2>
    1930:	24 e2       	ldi	r18, 0x24	; 36
    1932:	01 c0       	rjmp	.+2      	; 0x1936 <follow_path+0xd4>
    1934:	20 e2       	ldi	r18, 0x20	; 32
			c = p[si++];
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
		*path = &p[si];									/* Rerurn pointer to the next segment */
    1936:	e8 0e       	add	r14, r24
    1938:	f9 1e       	adc	r15, r25
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    193a:	f8 01       	movw	r30, r16
    193c:	23 87       	std	Z+11, r18	; 0x0b
    193e:	f5 c0       	rjmp	.+490    	; 0x1b2a <follow_path+0x2c8>
		return FR_OK;
	}
#endif
	for (;;) {
		c = p[si++];
    1940:	f7 01       	movw	r30, r14
    1942:	ea 0f       	add	r30, r26
    1944:	fb 1f       	adc	r31, r27
    1946:	20 81       	ld	r18, Z
    1948:	11 96       	adiw	r26, 0x01	; 1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    194a:	21 32       	cpi	r18, 0x21	; 33
    194c:	08 f4       	brcc	.+2      	; 0x1950 <follow_path+0xee>
    194e:	6a c0       	rjmp	.+212    	; 0x1a24 <follow_path+0x1c2>
    1950:	2f 32       	cpi	r18, 0x2F	; 47
    1952:	09 f4       	brne	.+2      	; 0x1956 <follow_path+0xf4>
    1954:	f4 c0       	rjmp	.+488    	; 0x1b3e <follow_path+0x2dc>
    1956:	2c 35       	cpi	r18, 0x5C	; 92
    1958:	09 f4       	brne	.+2      	; 0x195c <follow_path+0xfa>
    195a:	f1 c0       	rjmp	.+482    	; 0x1b3e <follow_path+0x2dc>
		if (c == '.' || i >= ni) {
    195c:	2e 32       	cpi	r18, 0x2E	; 46
    195e:	19 f0       	breq	.+6      	; 0x1966 <follow_path+0x104>
    1960:	4a 15       	cp	r20, r10
    1962:	5b 05       	cpc	r21, r11
    1964:	84 f0       	brlt	.+32     	; 0x1986 <follow_path+0x124>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    1966:	f8 e0       	ldi	r31, 0x08	; 8
    1968:	af 16       	cp	r10, r31
    196a:	b1 04       	cpc	r11, r1
    196c:	09 f0       	breq	.+2      	; 0x1970 <follow_path+0x10e>
    196e:	d0 c0       	rjmp	.+416    	; 0x1b10 <follow_path+0x2ae>
    1970:	2e 32       	cpi	r18, 0x2E	; 46
    1972:	09 f0       	breq	.+2      	; 0x1976 <follow_path+0x114>
    1974:	cd c0       	rjmp	.+410    	; 0x1b10 <follow_path+0x2ae>
			i = 8; ni = 11;
			b <<= 2; continue;
    1976:	dd 0c       	add	r13, r13
    1978:	dd 0c       	add	r13, r13
    197a:	48 e0       	ldi	r20, 0x08	; 8
    197c:	50 e0       	ldi	r21, 0x00	; 0
    197e:	6b e0       	ldi	r22, 0x0B	; 11
    1980:	a6 2e       	mov	r10, r22
    1982:	b1 2c       	mov	r11, r1
    1984:	dd cf       	rjmp	.-70     	; 0x1940 <follow_path+0xde>
		}
		if (c >= 0x80) {				/* Extended char */
    1986:	27 ff       	sbrs	r18, 7
    1988:	02 c0       	rjmp	.+4      	; 0x198e <follow_path+0x12c>
#ifdef _EXCVT
			c = cvt[c - 0x80];			/* Convert extend char (SBCS) */
#else
			b |= 3;						/* Eliminate NT flag if ext char is exist */
    198a:	83 e0       	ldi	r24, 0x03	; 3
    198c:	d8 2a       	or	r13, r24
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
    198e:	82 2f       	mov	r24, r18
    1990:	81 58       	subi	r24, 0x81	; 129
    1992:	8f 31       	cpi	r24, 0x1F	; 31
    1994:	18 f0       	brcs	.+6      	; 0x199c <follow_path+0x13a>
    1996:	8f 55       	subi	r24, 0x5F	; 95
    1998:	8d 31       	cpi	r24, 0x1D	; 29
    199a:	f8 f4       	brcc	.+62     	; 0x19da <follow_path+0x178>
			d = p[si++];				/* Get 2nd byte */
    199c:	f7 01       	movw	r30, r14
    199e:	ea 0f       	add	r30, r26
    19a0:	fb 1f       	adc	r31, r27
    19a2:	30 81       	ld	r19, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    19a4:	83 2f       	mov	r24, r19
    19a6:	80 54       	subi	r24, 0x40	; 64
    19a8:	8f 33       	cpi	r24, 0x3F	; 63
    19aa:	20 f0       	brcs	.+8      	; 0x19b4 <follow_path+0x152>
    19ac:	80 54       	subi	r24, 0x40	; 64
    19ae:	8d 37       	cpi	r24, 0x7D	; 125
    19b0:	08 f0       	brcs	.+2      	; 0x19b4 <follow_path+0x152>
    19b2:	ae c0       	rjmp	.+348    	; 0x1b10 <follow_path+0x2ae>
    19b4:	c5 01       	movw	r24, r10
    19b6:	01 97       	sbiw	r24, 0x01	; 1
    19b8:	48 17       	cp	r20, r24
    19ba:	59 07       	cpc	r21, r25
    19bc:	0c f0       	brlt	.+2      	; 0x19c0 <follow_path+0x15e>
    19be:	a8 c0       	rjmp	.+336    	; 0x1b10 <follow_path+0x2ae>
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
    19c0:	11 96       	adiw	r26, 0x01	; 1
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
    19c2:	f8 01       	movw	r30, r16
    19c4:	e4 0f       	add	r30, r20
    19c6:	f5 1f       	adc	r31, r21
    19c8:	20 83       	st	Z, r18
    19ca:	ca 01       	movw	r24, r20
    19cc:	01 96       	adiw	r24, 0x01	; 1
			sfn[i++] = d;
    19ce:	f8 01       	movw	r30, r16
    19d0:	e8 0f       	add	r30, r24
    19d2:	f9 1f       	adc	r31, r25
    19d4:	30 83       	st	Z, r19
    19d6:	ac 01       	movw	r20, r24
    19d8:	22 c0       	rjmp	.+68     	; 0x1a1e <follow_path+0x1bc>
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
    19da:	62 2f       	mov	r22, r18
    19dc:	70 e0       	ldi	r23, 0x00	; 0
    19de:	e3 e0       	ldi	r30, 0x03	; 3
    19e0:	f1 e0       	ldi	r31, 0x01	; 1
    19e2:	01 c0       	rjmp	.+2      	; 0x19e6 <follow_path+0x184>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    19e4:	31 96       	adiw	r30, 0x01	; 1
    19e6:	80 81       	ld	r24, Z
    19e8:	88 23       	and	r24, r24
    19ea:	39 f0       	breq	.+14     	; 0x19fa <follow_path+0x198>
    19ec:	99 27       	eor	r25, r25
    19ee:	87 fd       	sbrc	r24, 7
    19f0:	90 95       	com	r25
    19f2:	86 17       	cp	r24, r22
    19f4:	97 07       	cpc	r25, r23
    19f6:	b1 f7       	brne	.-20     	; 0x19e4 <follow_path+0x182>
    19f8:	8b c0       	rjmp	.+278    	; 0x1b10 <follow_path+0x2ae>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    19fa:	82 2f       	mov	r24, r18
    19fc:	81 54       	subi	r24, 0x41	; 65
    19fe:	8a 31       	cpi	r24, 0x1A	; 26
    1a00:	18 f4       	brcc	.+6      	; 0x1a08 <follow_path+0x1a6>
				b |= 2;
    1a02:	e2 e0       	ldi	r30, 0x02	; 2
    1a04:	de 2a       	or	r13, r30
    1a06:	07 c0       	rjmp	.+14     	; 0x1a16 <follow_path+0x1b4>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    1a08:	82 2f       	mov	r24, r18
    1a0a:	81 56       	subi	r24, 0x61	; 97
    1a0c:	8a 31       	cpi	r24, 0x1A	; 26
    1a0e:	18 f4       	brcc	.+6      	; 0x1a16 <follow_path+0x1b4>
					b |= 1; c -= 0x20;
    1a10:	f1 e0       	ldi	r31, 0x01	; 1
    1a12:	df 2a       	or	r13, r31
    1a14:	20 52       	subi	r18, 0x20	; 32
				}
			}
			sfn[i++] = c;
    1a16:	f8 01       	movw	r30, r16
    1a18:	e4 0f       	add	r30, r20
    1a1a:	f5 1f       	adc	r31, r21
    1a1c:	20 83       	st	Z, r18
    1a1e:	4f 5f       	subi	r20, 0xFF	; 255
    1a20:	5f 4f       	sbci	r21, 0xFF	; 255
    1a22:	8e cf       	rjmp	.-228    	; 0x1940 <follow_path+0xde>
    1a24:	64 e0       	ldi	r22, 0x04	; 4
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
    1a26:	45 2b       	or	r20, r21
    1a28:	09 f4       	brne	.+2      	; 0x1a2c <follow_path+0x1ca>
    1a2a:	72 c0       	rjmp	.+228    	; 0x1b10 <follow_path+0x2ae>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    1a2c:	f8 01       	movw	r30, r16
    1a2e:	80 81       	ld	r24, Z
    1a30:	85 3e       	cpi	r24, 0xE5	; 229
    1a32:	09 f4       	brne	.+2      	; 0x1a36 <follow_path+0x1d4>
    1a34:	c0 82       	st	Z, r12

	if (ni == 8) b <<= 2;
    1a36:	f8 e0       	ldi	r31, 0x08	; 8
    1a38:	af 16       	cp	r10, r31
    1a3a:	b1 04       	cpc	r11, r1
    1a3c:	11 f4       	brne	.+4      	; 0x1a42 <follow_path+0x1e0>
    1a3e:	dd 0c       	add	r13, r13
    1a40:	dd 0c       	add	r13, r13
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
    1a42:	2d 2d       	mov	r18, r13
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	c9 01       	movw	r24, r18
    1a48:	83 70       	andi	r24, 0x03	; 3
    1a4a:	90 70       	andi	r25, 0x00	; 0
    1a4c:	01 97       	sbiw	r24, 0x01	; 1
    1a4e:	09 f4       	brne	.+2      	; 0x1a52 <follow_path+0x1f0>
    1a50:	60 61       	ori	r22, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
    1a52:	2c 70       	andi	r18, 0x0C	; 12
    1a54:	30 70       	andi	r19, 0x00	; 0
    1a56:	24 30       	cpi	r18, 0x04	; 4
    1a58:	31 05       	cpc	r19, r1
    1a5a:	09 f4       	brne	.+2      	; 0x1a5e <follow_path+0x1fc>
    1a5c:	68 60       	ori	r22, 0x08	; 8
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    1a5e:	ea 0e       	add	r14, r26
    1a60:	fb 1e       	adc	r15, r27

	if (ni == 8) b <<= 2;
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */

	sfn[NS] = c;		/* Store NT flag, File name is created */
    1a62:	f8 01       	movw	r30, r16
    1a64:	63 87       	std	Z+11, r22	; 0x0b
    1a66:	61 c0       	rjmp	.+194    	; 0x1b2a <follow_path+0x2c8>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    1a68:	4e 85       	ldd	r20, Y+14	; 0x0e
    1a6a:	5f 85       	ldd	r21, Y+15	; 0x0f
    1a6c:	68 89       	ldd	r22, Y+16	; 0x10
    1a6e:	79 89       	ldd	r23, Y+17	; 0x11
    1a70:	88 81       	ld	r24, Y
    1a72:	99 81       	ldd	r25, Y+1	; 0x01
    1a74:	0e 94 5e 04 	call	0x8bc	; 0x8bc <move_window>
    1a78:	ac 01       	movw	r20, r24
		if (res != FR_OK) break;
    1a7a:	00 97       	sbiw	r24, 0x00	; 0
    1a7c:	01 f5       	brne	.+64     	; 0x1abe <follow_path+0x25c>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    1a7e:	ea 89       	ldd	r30, Y+18	; 0x12
    1a80:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1a82:	80 81       	ld	r24, Z
    1a84:	88 23       	and	r24, r24
    1a86:	19 f4       	brne	.+6      	; 0x1a8e <follow_path+0x22c>
    1a88:	44 e0       	ldi	r20, 0x04	; 4
    1a8a:	50 e0       	ldi	r21, 0x00	; 0
    1a8c:	18 c0       	rjmp	.+48     	; 0x1abe <follow_path+0x25c>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    1a8e:	83 85       	ldd	r24, Z+11	; 0x0b
    1a90:	83 fd       	sbrc	r24, 3
    1a92:	0f c0       	rjmp	.+30     	; 0x1ab2 <follow_path+0x250>
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
    1a94:	ac 89       	ldd	r26, Y+20	; 0x14
    1a96:	bd 89       	ldd	r27, Y+21	; 0x15
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    1a98:	9f 01       	movw	r18, r30
    1a9a:	25 5f       	subi	r18, 0xF5	; 245
    1a9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a9e:	e2 17       	cp	r30, r18
    1aa0:	f3 07       	cpc	r31, r19
    1aa2:	69 f0       	breq	.+26     	; 0x1abe <follow_path+0x25c>
    1aa4:	90 81       	ld	r25, Z
    1aa6:	8c 91       	ld	r24, X
    1aa8:	98 17       	cp	r25, r24
    1aaa:	19 f4       	brne	.+6      	; 0x1ab2 <follow_path+0x250>
    1aac:	31 96       	adiw	r30, 0x01	; 1
    1aae:	11 96       	adiw	r26, 0x01	; 1
    1ab0:	f6 cf       	rjmp	.-20     	; 0x1a9e <follow_path+0x23c>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, FALSE);		/* Next entry */
    1ab2:	ce 01       	movw	r24, r28
    1ab4:	60 e0       	ldi	r22, 0x00	; 0
    1ab6:	70 e0       	ldi	r23, 0x00	; 0
    1ab8:	0e 94 ef 09 	call	0x13de	; 0x13de <dir_next>
    1abc:	3b c0       	rjmp	.+118    	; 0x1b34 <follow_path+0x2d2>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			last = *(dj->fn+NS) & NS_LAST;
    1abe:	ec 89       	ldd	r30, Y+20	; 0x14
    1ac0:	fd 89       	ldd	r31, Y+21	; 0x15
    1ac2:	83 85       	ldd	r24, Z+11	; 0x0b
    1ac4:	84 70       	andi	r24, 0x04	; 4
			if (res != FR_OK) {				/* Could not find the object */
    1ac6:	41 15       	cp	r20, r1
    1ac8:	51 05       	cpc	r21, r1
    1aca:	39 f0       	breq	.+14     	; 0x1ada <follow_path+0x278>
    1acc:	9a 01       	movw	r18, r20
				if (res == FR_NO_FILE && !last)
    1ace:	44 30       	cpi	r20, 0x04	; 4
    1ad0:	51 05       	cpc	r21, r1
    1ad2:	09 f5       	brne	.+66     	; 0x1b16 <follow_path+0x2b4>
    1ad4:	88 23       	and	r24, r24
    1ad6:	09 f1       	breq	.+66     	; 0x1b1a <follow_path+0x2b8>
    1ad8:	22 c0       	rjmp	.+68     	; 0x1b1e <follow_path+0x2bc>
					res = FR_NO_PATH;
				break;
			}
			if (last) break;				/* Last segment match. Function completed. */
    1ada:	88 23       	and	r24, r24
    1adc:	e1 f4       	brne	.+56     	; 0x1b16 <follow_path+0x2b4>
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
    1ade:	ea 89       	ldd	r30, Y+18	; 0x12
    1ae0:	fb 89       	ldd	r31, Y+19	; 0x13
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    1ae2:	83 85       	ldd	r24, Z+11	; 0x0b
    1ae4:	84 ff       	sbrs	r24, 4
    1ae6:	19 c0       	rjmp	.+50     	; 0x1b1a <follow_path+0x2b8>
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    1ae8:	84 89       	ldd	r24, Z+20	; 0x14
    1aea:	95 89       	ldd	r25, Z+21	; 0x15
    1aec:	a0 e0       	ldi	r26, 0x00	; 0
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	dc 01       	movw	r26, r24
    1af2:	99 27       	eor	r25, r25
    1af4:	88 27       	eor	r24, r24
    1af6:	22 8d       	ldd	r18, Z+26	; 0x1a
    1af8:	33 8d       	ldd	r19, Z+27	; 0x1b
    1afa:	40 e0       	ldi	r20, 0x00	; 0
    1afc:	50 e0       	ldi	r21, 0x00	; 0
    1afe:	82 2b       	or	r24, r18
    1b00:	93 2b       	or	r25, r19
    1b02:	a4 2b       	or	r26, r20
    1b04:	b5 2b       	or	r27, r21
    1b06:	8e 83       	std	Y+6, r24	; 0x06
    1b08:	9f 83       	std	Y+7, r25	; 0x07
    1b0a:	a8 87       	std	Y+8, r26	; 0x08
    1b0c:	b9 87       	std	Y+9, r27	; 0x09
    1b0e:	e0 ce       	rjmp	.-576    	; 0x18d0 <follow_path+0x6e>
		}
    1b10:	26 e0       	ldi	r18, 0x06	; 6
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	04 c0       	rjmp	.+8      	; 0x1b1e <follow_path+0x2bc>
    1b16:	9a 01       	movw	r18, r20
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <follow_path+0x2bc>
    1b1a:	25 e0       	ldi	r18, 0x05	; 5
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
	}

	return res;
}
    1b1e:	c9 01       	movw	r24, r18
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
    1b24:	eb e0       	ldi	r30, 0x0B	; 11
    1b26:	0c 94 d2 2e 	jmp	0x5da4	; 0x5da4 <__epilogue_restores__+0xe>
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_seek(dj, 0);			/* Rewind directory object */
    1b2a:	ce 01       	movw	r24, r28
    1b2c:	60 e0       	ldi	r22, 0x00	; 0
    1b2e:	70 e0       	ldi	r23, 0x00	; 0
    1b30:	0e 94 48 06 	call	0xc90	; 0xc90 <dir_seek>
    1b34:	ac 01       	movw	r20, r24
	if (res != FR_OK) return res;
    1b36:	00 97       	sbiw	r24, 0x00	; 0
    1b38:	09 f4       	brne	.+2      	; 0x1b3c <follow_path+0x2da>
    1b3a:	96 cf       	rjmp	.-212    	; 0x1a68 <follow_path+0x206>
    1b3c:	c0 cf       	rjmp	.-128    	; 0x1abe <follow_path+0x25c>
    1b3e:	60 e0       	ldi	r22, 0x00	; 0
    1b40:	72 cf       	rjmp	.-284    	; 0x1a26 <follow_path+0x1c4>

00001b42 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    1b42:	a4 e0       	ldi	r26, 0x04	; 4
    1b44:	b0 e0       	ldi	r27, 0x00	; 0
    1b46:	e7 ea       	ldi	r30, 0xA7	; 167
    1b48:	fd e0       	ldi	r31, 0x0D	; 13
    1b4a:	0c 94 af 2e 	jmp	0x5d5e	; 0x5d5e <__prologue_saves__>
    1b4e:	9c 83       	std	Y+4, r25	; 0x04
    1b50:	8b 83       	std	Y+3, r24	; 0x03
    1b52:	16 2f       	mov	r17, r22
    1b54:	07 2f       	mov	r16, r23
    1b56:	3a 01       	movw	r6, r20
    1b58:	3a 83       	std	Y+2, r19	; 0x02
    1b5a:	29 83       	std	Y+1, r18	; 0x01
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;


	*bw = 0;	/* Initialize bytes written */
    1b5c:	d9 01       	movw	r26, r18
    1b5e:	1d 92       	st	X+, r1
    1b60:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    1b62:	fc 01       	movw	r30, r24
    1b64:	62 81       	ldd	r22, Z+2	; 0x02
    1b66:	73 81       	ldd	r23, Z+3	; 0x03
    1b68:	80 81       	ld	r24, Z
    1b6a:	91 81       	ldd	r25, Z+1	; 0x01
    1b6c:	0e 94 44 04 	call	0x888	; 0x888 <validate>
    1b70:	4c 01       	movw	r8, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    1b72:	00 97       	sbiw	r24, 0x00	; 0
    1b74:	09 f0       	breq	.+2      	; 0x1b78 <f_write+0x36>
    1b76:	09 c2       	rjmp	.+1042   	; 0x1f8a <f_write+0x448>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    1b78:	ab 81       	ldd	r26, Y+3	; 0x03
    1b7a:	bc 81       	ldd	r27, Y+4	; 0x04
    1b7c:	14 96       	adiw	r26, 0x04	; 4
    1b7e:	8c 91       	ld	r24, X
    1b80:	87 fd       	sbrc	r24, 7
    1b82:	78 c0       	rjmp	.+240    	; 0x1c74 <f_write+0x132>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
    1b84:	81 fd       	sbrc	r24, 1
    1b86:	04 c0       	rjmp	.+8      	; 0x1b90 <f_write+0x4e>
    1b88:	37 e0       	ldi	r19, 0x07	; 7
    1b8a:	83 2e       	mov	r8, r19
    1b8c:	91 2c       	mov	r9, r1
    1b8e:	fd c1       	rjmp	.+1018   	; 0x1f8a <f_write+0x448>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
    1b90:	eb 81       	ldd	r30, Y+3	; 0x03
    1b92:	fc 81       	ldd	r31, Y+4	; 0x04
    1b94:	22 85       	ldd	r18, Z+10	; 0x0a
    1b96:	33 85       	ldd	r19, Z+11	; 0x0b
    1b98:	44 85       	ldd	r20, Z+12	; 0x0c
    1b9a:	55 85       	ldd	r21, Z+13	; 0x0d
    1b9c:	c3 01       	movw	r24, r6
    1b9e:	a0 e0       	ldi	r26, 0x00	; 0
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	82 0f       	add	r24, r18
    1ba4:	93 1f       	adc	r25, r19
    1ba6:	a4 1f       	adc	r26, r20
    1ba8:	b5 1f       	adc	r27, r21
    1baa:	82 17       	cp	r24, r18
    1bac:	93 07       	cpc	r25, r19
    1bae:	a4 07       	cpc	r26, r20
    1bb0:	b5 07       	cpc	r27, r21
    1bb2:	10 f4       	brcc	.+4      	; 0x1bb8 <f_write+0x76>
    1bb4:	66 24       	eor	r6, r6
    1bb6:	77 24       	eor	r7, r7
)
{
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    1bb8:	81 2f       	mov	r24, r17
    1bba:	90 2f       	mov	r25, r16
    1bbc:	9c 01       	movw	r18, r24
    1bbe:	29 01       	movw	r4, r18
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
    1bc0:	22 24       	eor	r2, r2
    1bc2:	23 94       	inc	r2
    1bc4:	bd c1       	rjmp	.+890    	; 0x1f40 <f_write+0x3fe>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    1bc6:	ab 81       	ldd	r26, Y+3	; 0x03
    1bc8:	bc 81       	ldd	r27, Y+4	; 0x04
    1bca:	16 96       	adiw	r26, 0x06	; 6
    1bcc:	2d 91       	ld	r18, X+
    1bce:	3d 91       	ld	r19, X+
    1bd0:	4d 91       	ld	r20, X+
    1bd2:	5c 91       	ld	r21, X
    1bd4:	19 97       	sbiw	r26, 0x09	; 9
    1bd6:	da 01       	movw	r26, r20
    1bd8:	c9 01       	movw	r24, r18
    1bda:	91 70       	andi	r25, 0x01	; 1
    1bdc:	a0 70       	andi	r26, 0x00	; 0
    1bde:	b0 70       	andi	r27, 0x00	; 0
    1be0:	00 97       	sbiw	r24, 0x00	; 0
    1be2:	a1 05       	cpc	r26, r1
    1be4:	b1 05       	cpc	r27, r1
    1be6:	09 f0       	breq	.+2      	; 0x1bea <f_write+0xa8>
    1be8:	4a c1       	rjmp	.+660    	; 0x1e7e <f_write+0x33c>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    1bea:	ab 81       	ldd	r26, Y+3	; 0x03
    1bec:	bc 81       	ldd	r27, Y+4	; 0x04
    1bee:	ed 91       	ld	r30, X+
    1bf0:	fc 91       	ld	r31, X
    1bf2:	11 97       	sbiw	r26, 0x01	; 1
    1bf4:	15 96       	adiw	r26, 0x05	; 5
    1bf6:	9c 91       	ld	r25, X
    1bf8:	15 97       	sbiw	r26, 0x05	; 5
    1bfa:	82 81       	ldd	r24, Z+2	; 0x02
    1bfc:	98 17       	cp	r25, r24
    1bfe:	08 f4       	brcc	.+2      	; 0x1c02 <f_write+0xc0>
    1c00:	55 c0       	rjmp	.+170    	; 0x1cac <f_write+0x16a>
				if (fp->fptr == 0) {				/* On the top of the file? */
    1c02:	21 15       	cp	r18, r1
    1c04:	31 05       	cpc	r19, r1
    1c06:	41 05       	cpc	r20, r1
    1c08:	51 05       	cpc	r21, r1
    1c0a:	c9 f4       	brne	.+50     	; 0x1c3e <f_write+0xfc>
					clst = fp->org_clust;			/* Follow from the origin */
    1c0c:	1e 96       	adiw	r26, 0x0e	; 14
    1c0e:	6d 91       	ld	r22, X+
    1c10:	7d 91       	ld	r23, X+
    1c12:	8d 91       	ld	r24, X+
    1c14:	9c 91       	ld	r25, X
    1c16:	51 97       	sbiw	r26, 0x11	; 17
					if (clst == 0)					/* When there is no cluster chain, */
    1c18:	61 15       	cp	r22, r1
    1c1a:	71 05       	cpc	r23, r1
    1c1c:	81 05       	cpc	r24, r1
    1c1e:	91 05       	cpc	r25, r1
    1c20:	f9 f4       	brne	.+62     	; 0x1c60 <f_write+0x11e>
						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    1c22:	cf 01       	movw	r24, r30
    1c24:	40 e0       	ldi	r20, 0x00	; 0
    1c26:	50 e0       	ldi	r21, 0x00	; 0
    1c28:	60 e0       	ldi	r22, 0x00	; 0
    1c2a:	70 e0       	ldi	r23, 0x00	; 0
    1c2c:	0e 94 39 07 	call	0xe72	; 0xe72 <create_chain>
    1c30:	eb 81       	ldd	r30, Y+3	; 0x03
    1c32:	fc 81       	ldd	r31, Y+4	; 0x04
    1c34:	66 87       	std	Z+14, r22	; 0x0e
    1c36:	77 87       	std	Z+15, r23	; 0x0f
    1c38:	80 8b       	std	Z+16, r24	; 0x10
    1c3a:	91 8b       	std	Z+17, r25	; 0x11
    1c3c:	0b c0       	rjmp	.+22     	; 0x1c54 <f_write+0x112>
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
    1c3e:	ab 81       	ldd	r26, Y+3	; 0x03
    1c40:	bc 81       	ldd	r27, Y+4	; 0x04
    1c42:	52 96       	adiw	r26, 0x12	; 18
    1c44:	4d 91       	ld	r20, X+
    1c46:	5d 91       	ld	r21, X+
    1c48:	6d 91       	ld	r22, X+
    1c4a:	7c 91       	ld	r23, X
    1c4c:	55 97       	sbiw	r26, 0x15	; 21
    1c4e:	cf 01       	movw	r24, r30
    1c50:	0e 94 39 07 	call	0xe72	; 0xe72 <create_chain>
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
    1c54:	61 15       	cp	r22, r1
    1c56:	71 05       	cpc	r23, r1
    1c58:	81 05       	cpc	r24, r1
    1c5a:	91 05       	cpc	r25, r1
    1c5c:	09 f4       	brne	.+2      	; 0x1c60 <f_write+0x11e>
    1c5e:	74 c1       	rjmp	.+744    	; 0x1f48 <f_write+0x406>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    1c60:	61 30       	cpi	r22, 0x01	; 1
    1c62:	71 05       	cpc	r23, r1
    1c64:	81 05       	cpc	r24, r1
    1c66:	91 05       	cpc	r25, r1
    1c68:	49 f4       	brne	.+18     	; 0x1c7c <f_write+0x13a>
    1c6a:	eb 81       	ldd	r30, Y+3	; 0x03
    1c6c:	fc 81       	ldd	r31, Y+4	; 0x04
    1c6e:	84 81       	ldd	r24, Z+4	; 0x04
    1c70:	80 68       	ori	r24, 0x80	; 128
    1c72:	84 83       	std	Z+4, r24	; 0x04
    1c74:	22 e0       	ldi	r18, 0x02	; 2
    1c76:	82 2e       	mov	r8, r18
    1c78:	91 2c       	mov	r9, r1
    1c7a:	87 c1       	rjmp	.+782    	; 0x1f8a <f_write+0x448>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    1c7c:	6f 3f       	cpi	r22, 0xFF	; 255
    1c7e:	ff ef       	ldi	r31, 0xFF	; 255
    1c80:	7f 07       	cpc	r23, r31
    1c82:	ff ef       	ldi	r31, 0xFF	; 255
    1c84:	8f 07       	cpc	r24, r31
    1c86:	ff ef       	ldi	r31, 0xFF	; 255
    1c88:	9f 07       	cpc	r25, r31
    1c8a:	49 f4       	brne	.+18     	; 0x1c9e <f_write+0x15c>
    1c8c:	ab 81       	ldd	r26, Y+3	; 0x03
    1c8e:	bc 81       	ldd	r27, Y+4	; 0x04
    1c90:	14 96       	adiw	r26, 0x04	; 4
    1c92:	8c 91       	ld	r24, X
    1c94:	14 97       	sbiw	r26, 0x04	; 4
    1c96:	80 68       	ori	r24, 0x80	; 128
    1c98:	14 96       	adiw	r26, 0x04	; 4
    1c9a:	8c 93       	st	X, r24
    1c9c:	09 c1       	rjmp	.+530    	; 0x1eb0 <f_write+0x36e>
				fp->curr_clust = clst;				/* Update current cluster */
    1c9e:	eb 81       	ldd	r30, Y+3	; 0x03
    1ca0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ca2:	62 8b       	std	Z+18, r22	; 0x12
    1ca4:	73 8b       	std	Z+19, r23	; 0x13
    1ca6:	84 8b       	std	Z+20, r24	; 0x14
    1ca8:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector address in the cluster */
    1caa:	15 82       	std	Z+5, r1	; 0x05
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
    1cac:	ab 81       	ldd	r26, Y+3	; 0x03
    1cae:	bc 81       	ldd	r27, Y+4	; 0x04
    1cb0:	ed 91       	ld	r30, X+
    1cb2:	fc 91       	ld	r31, X
    1cb4:	11 97       	sbiw	r26, 0x01	; 1
    1cb6:	26 a5       	ldd	r18, Z+46	; 0x2e
    1cb8:	37 a5       	ldd	r19, Z+47	; 0x2f
    1cba:	40 a9       	ldd	r20, Z+48	; 0x30
    1cbc:	51 a9       	ldd	r21, Z+49	; 0x31
    1cbe:	56 96       	adiw	r26, 0x16	; 22
    1cc0:	ed 90       	ld	r14, X+
    1cc2:	fd 90       	ld	r15, X+
    1cc4:	0d 91       	ld	r16, X+
    1cc6:	1c 91       	ld	r17, X
    1cc8:	59 97       	sbiw	r26, 0x19	; 25
    1cca:	2e 15       	cp	r18, r14
    1ccc:	3f 05       	cpc	r19, r15
    1cce:	40 07       	cpc	r20, r16
    1cd0:	51 07       	cpc	r21, r17
    1cd2:	51 f4       	brne	.+20     	; 0x1ce8 <f_write+0x1a6>
    1cd4:	cf 01       	movw	r24, r30
    1cd6:	40 e0       	ldi	r20, 0x00	; 0
    1cd8:	50 e0       	ldi	r21, 0x00	; 0
    1cda:	60 e0       	ldi	r22, 0x00	; 0
    1cdc:	70 e0       	ldi	r23, 0x00	; 0
    1cde:	0e 94 5e 04 	call	0x8bc	; 0x8bc <move_window>
    1ce2:	89 2b       	or	r24, r25
    1ce4:	09 f0       	breq	.+2      	; 0x1ce8 <f_write+0x1a6>
    1ce6:	df c0       	rjmp	.+446    	; 0x1ea6 <f_write+0x364>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    1ce8:	ab 81       	ldd	r26, Y+3	; 0x03
    1cea:	bc 81       	ldd	r27, Y+4	; 0x04
    1cec:	0d 91       	ld	r16, X+
    1cee:	1c 91       	ld	r17, X
    1cf0:	11 97       	sbiw	r26, 0x01	; 1
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    1cf2:	52 96       	adiw	r26, 0x12	; 18
    1cf4:	2d 91       	ld	r18, X+
    1cf6:	3d 91       	ld	r19, X+
    1cf8:	4d 91       	ld	r20, X+
    1cfa:	5c 91       	ld	r21, X
    1cfc:	55 97       	sbiw	r26, 0x15	; 21
    1cfe:	22 50       	subi	r18, 0x02	; 2
    1d00:	30 40       	sbci	r19, 0x00	; 0
    1d02:	40 40       	sbci	r20, 0x00	; 0
    1d04:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1d06:	f8 01       	movw	r30, r16
    1d08:	86 8d       	ldd	r24, Z+30	; 0x1e
    1d0a:	97 8d       	ldd	r25, Z+31	; 0x1f
    1d0c:	a0 a1       	ldd	r26, Z+32	; 0x20
    1d0e:	b1 a1       	ldd	r27, Z+33	; 0x21
    1d10:	02 97       	sbiw	r24, 0x02	; 2
    1d12:	a1 09       	sbc	r26, r1
    1d14:	b1 09       	sbc	r27, r1
    1d16:	28 17       	cp	r18, r24
    1d18:	39 07       	cpc	r19, r25
    1d1a:	4a 07       	cpc	r20, r26
    1d1c:	5b 07       	cpc	r21, r27
    1d1e:	b8 f4       	brcc	.+46     	; 0x1d4e <f_write+0x20c>
	return clst * fs->csize + fs->database;
    1d20:	32 80       	ldd	r3, Z+2	; 0x02
    1d22:	63 2d       	mov	r22, r3
    1d24:	70 e0       	ldi	r23, 0x00	; 0
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <__mulsi3>
    1d2e:	9b 01       	movw	r18, r22
    1d30:	ac 01       	movw	r20, r24
    1d32:	f8 01       	movw	r30, r16
    1d34:	82 a5       	ldd	r24, Z+42	; 0x2a
    1d36:	93 a5       	ldd	r25, Z+43	; 0x2b
    1d38:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1d3a:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1d3c:	28 0f       	add	r18, r24
    1d3e:	39 1f       	adc	r19, r25
    1d40:	4a 1f       	adc	r20, r26
    1d42:	5b 1f       	adc	r21, r27
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    1d44:	21 15       	cp	r18, r1
    1d46:	31 05       	cpc	r19, r1
    1d48:	41 05       	cpc	r20, r1
    1d4a:	51 05       	cpc	r21, r1
    1d4c:	49 f4       	brne	.+18     	; 0x1d60 <f_write+0x21e>
    1d4e:	ab 81       	ldd	r26, Y+3	; 0x03
    1d50:	bc 81       	ldd	r27, Y+4	; 0x04
    1d52:	14 96       	adiw	r26, 0x04	; 4
    1d54:	8c 91       	ld	r24, X
    1d56:	14 97       	sbiw	r26, 0x04	; 4
    1d58:	80 68       	ori	r24, 0x80	; 128
    1d5a:	14 96       	adiw	r26, 0x04	; 4
    1d5c:	8c 93       	st	X, r24
    1d5e:	8a cf       	rjmp	.-236    	; 0x1c74 <f_write+0x132>
			sect += fp->csect;
    1d60:	eb 81       	ldd	r30, Y+3	; 0x03
    1d62:	fc 81       	ldd	r31, Y+4	; 0x04
    1d64:	85 81       	ldd	r24, Z+5	; 0x05
    1d66:	59 01       	movw	r10, r18
    1d68:	6a 01       	movw	r12, r20
    1d6a:	a8 0e       	add	r10, r24
    1d6c:	b1 1c       	adc	r11, r1
    1d6e:	c1 1c       	adc	r12, r1
    1d70:	d1 1c       	adc	r13, r1
			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
    1d72:	73 01       	movw	r14, r6
    1d74:	ef 2c       	mov	r14, r15
    1d76:	ff 24       	eor	r15, r15
    1d78:	e6 94       	lsr	r14
			if (cc) {								/* Write maximum contiguous sectors directly */
    1d7a:	e1 14       	cp	r14, r1
    1d7c:	f1 04       	cpc	r15, r1
    1d7e:	09 f4       	brne	.+2      	; 0x1d82 <f_write+0x240>
    1d80:	51 c0       	rjmp	.+162    	; 0x1e24 <f_write+0x2e2>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    1d82:	28 2f       	mov	r18, r24
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	c7 01       	movw	r24, r14
    1d88:	82 0f       	add	r24, r18
    1d8a:	93 1f       	adc	r25, r19
    1d8c:	63 2d       	mov	r22, r3
    1d8e:	70 e0       	ldi	r23, 0x00	; 0
    1d90:	68 17       	cp	r22, r24
    1d92:	79 07       	cpc	r23, r25
    1d94:	18 f4       	brcc	.+6      	; 0x1d9c <f_write+0x25a>
					cc = fp->fs->csize - fp->csect;
    1d96:	7b 01       	movw	r14, r22
    1d98:	e2 1a       	sub	r14, r18
    1d9a:	f3 0a       	sbc	r15, r19
				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
    1d9c:	d8 01       	movw	r26, r16
    1d9e:	11 96       	adiw	r26, 0x01	; 1
    1da0:	8c 91       	ld	r24, X
    1da2:	b2 01       	movw	r22, r4
    1da4:	a6 01       	movw	r20, r12
    1da6:	95 01       	movw	r18, r10
    1da8:	0e 2d       	mov	r16, r14
    1daa:	0e 94 12 19 	call	0x3224	; 0x3224 <disk_write>
    1dae:	89 2b       	or	r24, r25
    1db0:	09 f0       	breq	.+2      	; 0x1db4 <f_write+0x272>
    1db2:	79 c0       	rjmp	.+242    	; 0x1ea6 <f_write+0x364>
					ABORT(fp->fs, FR_DISK_ERR);
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
    1db4:	ab 81       	ldd	r26, Y+3	; 0x03
    1db6:	bc 81       	ldd	r27, Y+4	; 0x04
    1db8:	ed 91       	ld	r30, X+
    1dba:	fc 91       	ld	r31, X
    1dbc:	26 a5       	ldd	r18, Z+46	; 0x2e
    1dbe:	37 a5       	ldd	r19, Z+47	; 0x2f
    1dc0:	40 a9       	ldd	r20, Z+48	; 0x30
    1dc2:	51 a9       	ldd	r21, Z+49	; 0x31
    1dc4:	2a 19       	sub	r18, r10
    1dc6:	3b 09       	sbc	r19, r11
    1dc8:	4c 09       	sbc	r20, r12
    1dca:	5d 09       	sbc	r21, r13
    1dcc:	c7 01       	movw	r24, r14
    1dce:	a0 e0       	ldi	r26, 0x00	; 0
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	28 17       	cp	r18, r24
    1dd4:	39 07       	cpc	r19, r25
    1dd6:	4a 07       	cpc	r20, r26
    1dd8:	5b 07       	cpc	r21, r27
    1dda:	d0 f4       	brcc	.+52     	; 0x1e10 <f_write+0x2ce>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    1ddc:	df 01       	movw	r26, r30
    1dde:	d2 96       	adiw	r26, 0x32	; 50
	const char *s = (const char *)src;
    1de0:	89 e0       	ldi	r24, 0x09	; 9
    1de2:	22 0f       	add	r18, r18
    1de4:	33 1f       	adc	r19, r19
    1de6:	44 1f       	adc	r20, r20
    1de8:	55 1f       	adc	r21, r21
    1dea:	8a 95       	dec	r24
    1dec:	d1 f7       	brne	.-12     	; 0x1de2 <f_write+0x2a0>
    1dee:	f2 01       	movw	r30, r4
    1df0:	e2 0f       	add	r30, r18
    1df2:	f3 1f       	adc	r31, r19
	while (cnt--) *d++ = *s++;
    1df4:	9f 01       	movw	r18, r30
    1df6:	20 50       	subi	r18, 0x00	; 0
    1df8:	3e 4f       	sbci	r19, 0xFE	; 254
    1dfa:	02 c0       	rjmp	.+4      	; 0x1e00 <f_write+0x2be>
    1dfc:	81 91       	ld	r24, Z+
    1dfe:	8d 93       	st	X+, r24
    1e00:	e2 17       	cp	r30, r18
    1e02:	f3 07       	cpc	r31, r19
    1e04:	d9 f7       	brne	.-10     	; 0x1dfc <f_write+0x2ba>
				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
    1e06:	ab 81       	ldd	r26, Y+3	; 0x03
    1e08:	bc 81       	ldd	r27, Y+4	; 0x04
    1e0a:	ed 91       	ld	r30, X+
    1e0c:	fc 91       	ld	r31, X
    1e0e:	14 82       	std	Z+4, r1	; 0x04
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    1e10:	eb 81       	ldd	r30, Y+3	; 0x03
    1e12:	fc 81       	ldd	r31, Y+4	; 0x04
    1e14:	85 81       	ldd	r24, Z+5	; 0x05
    1e16:	8e 0d       	add	r24, r14
    1e18:	85 83       	std	Z+5, r24	; 0x05
				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    1e1a:	b7 01       	movw	r22, r14
    1e1c:	76 2f       	mov	r23, r22
    1e1e:	66 27       	eor	r22, r22
    1e20:	77 0f       	add	r23, r23
    1e22:	71 c0       	rjmp	.+226    	; 0x1f06 <f_write+0x3c4>
				continue;
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
    1e24:	ab 81       	ldd	r26, Y+3	; 0x03
    1e26:	bc 81       	ldd	r27, Y+4	; 0x04
    1e28:	16 96       	adiw	r26, 0x06	; 6
    1e2a:	2d 91       	ld	r18, X+
    1e2c:	3d 91       	ld	r19, X+
    1e2e:	4d 91       	ld	r20, X+
    1e30:	5c 91       	ld	r21, X
    1e32:	19 97       	sbiw	r26, 0x09	; 9
    1e34:	1a 96       	adiw	r26, 0x0a	; 10
    1e36:	8d 91       	ld	r24, X+
    1e38:	9d 91       	ld	r25, X+
    1e3a:	0d 90       	ld	r0, X+
    1e3c:	bc 91       	ld	r27, X
    1e3e:	a0 2d       	mov	r26, r0
    1e40:	28 17       	cp	r18, r24
    1e42:	39 07       	cpc	r19, r25
    1e44:	4a 07       	cpc	r20, r26
    1e46:	5b 07       	cpc	r21, r27
    1e48:	88 f0       	brcs	.+34     	; 0x1e6c <f_write+0x32a>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    1e4a:	c8 01       	movw	r24, r16
    1e4c:	40 e0       	ldi	r20, 0x00	; 0
    1e4e:	50 e0       	ldi	r21, 0x00	; 0
    1e50:	60 e0       	ldi	r22, 0x00	; 0
    1e52:	70 e0       	ldi	r23, 0x00	; 0
    1e54:	0e 94 5e 04 	call	0x8bc	; 0x8bc <move_window>
    1e58:	89 2b       	or	r24, r25
    1e5a:	29 f5       	brne	.+74     	; 0x1ea6 <f_write+0x364>
				fp->fs->winsect = sect;
    1e5c:	ab 81       	ldd	r26, Y+3	; 0x03
    1e5e:	bc 81       	ldd	r27, Y+4	; 0x04
    1e60:	ed 91       	ld	r30, X+
    1e62:	fc 91       	ld	r31, X
    1e64:	a6 a6       	std	Z+46, r10	; 0x2e
    1e66:	b7 a6       	std	Z+47, r11	; 0x2f
    1e68:	c0 aa       	std	Z+48, r12	; 0x30
    1e6a:	d1 aa       	std	Z+49, r13	; 0x31
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    1e6c:	eb 81       	ldd	r30, Y+3	; 0x03
    1e6e:	fc 81       	ldd	r31, Y+4	; 0x04
    1e70:	a6 8a       	std	Z+22, r10	; 0x16
    1e72:	b7 8a       	std	Z+23, r11	; 0x17
    1e74:	c0 8e       	std	Z+24, r12	; 0x18
    1e76:	d1 8e       	std	Z+25, r13	; 0x19
			fp->csect++;							/* Next sector address in the cluster */
    1e78:	85 81       	ldd	r24, Z+5	; 0x05
    1e7a:	8f 5f       	subi	r24, 0xFF	; 255
    1e7c:	85 83       	std	Z+5, r24	; 0x05
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    1e7e:	ab 81       	ldd	r26, Y+3	; 0x03
    1e80:	bc 81       	ldd	r27, Y+4	; 0x04
    1e82:	16 96       	adiw	r26, 0x06	; 6
    1e84:	cd 90       	ld	r12, X+
    1e86:	dd 90       	ld	r13, X+
    1e88:	ed 90       	ld	r14, X+
    1e8a:	fc 90       	ld	r15, X
    1e8c:	19 97       	sbiw	r26, 0x09	; 9
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
    1e8e:	56 96       	adiw	r26, 0x16	; 22
    1e90:	4d 91       	ld	r20, X+
    1e92:	5d 91       	ld	r21, X+
    1e94:	6d 91       	ld	r22, X+
    1e96:	7c 91       	ld	r23, X
    1e98:	59 97       	sbiw	r26, 0x19	; 25
    1e9a:	8d 91       	ld	r24, X+
    1e9c:	9c 91       	ld	r25, X
    1e9e:	0e 94 5e 04 	call	0x8bc	; 0x8bc <move_window>
    1ea2:	89 2b       	or	r24, r25
    1ea4:	49 f0       	breq	.+18     	; 0x1eb8 <f_write+0x376>
			ABORT(fp->fs, FR_DISK_ERR);
    1ea6:	eb 81       	ldd	r30, Y+3	; 0x03
    1ea8:	fc 81       	ldd	r31, Y+4	; 0x04
    1eaa:	84 81       	ldd	r24, Z+4	; 0x04
    1eac:	80 68       	ori	r24, 0x80	; 128
    1eae:	84 83       	std	Z+4, r24	; 0x04
    1eb0:	a1 e0       	ldi	r26, 0x01	; 1
    1eb2:	8a 2e       	mov	r8, r26
    1eb4:	91 2c       	mov	r9, r1
    1eb6:	69 c0       	rjmp	.+210    	; 0x1f8a <f_write+0x448>
			}
#endif
			fp->dsect = sect;
			fp->csect++;							/* Next sector address in the cluster */
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    1eb8:	c6 01       	movw	r24, r12
    1eba:	91 70       	andi	r25, 0x01	; 1
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	32 e0       	ldi	r19, 0x02	; 2
    1ec0:	28 1b       	sub	r18, r24
    1ec2:	39 0b       	sbc	r19, r25
    1ec4:	b3 01       	movw	r22, r6
    1ec6:	26 15       	cp	r18, r6
    1ec8:	37 05       	cpc	r19, r7
    1eca:	08 f4       	brcc	.+2      	; 0x1ece <f_write+0x38c>
    1ecc:	b9 01       	movw	r22, r18
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    1ece:	ab 81       	ldd	r26, Y+3	; 0x03
    1ed0:	bc 81       	ldd	r27, Y+4	; 0x04
    1ed2:	16 96       	adiw	r26, 0x06	; 6
    1ed4:	8d 91       	ld	r24, X+
    1ed6:	9c 91       	ld	r25, X
    1ed8:	17 97       	sbiw	r26, 0x07	; 7
    1eda:	91 70       	andi	r25, 0x01	; 1
    1edc:	c2 96       	adiw	r24, 0x32	; 50
    1ede:	0d 90       	ld	r0, X+
    1ee0:	bc 91       	ld	r27, X
    1ee2:	a0 2d       	mov	r26, r0
    1ee4:	a8 0f       	add	r26, r24
    1ee6:	b9 1f       	adc	r27, r25
	const char *s = (const char *)src;
    1ee8:	f2 01       	movw	r30, r4
	while (cnt--) *d++ = *s++;
    1eea:	92 01       	movw	r18, r4
    1eec:	26 0f       	add	r18, r22
    1eee:	37 1f       	adc	r19, r23
    1ef0:	02 c0       	rjmp	.+4      	; 0x1ef6 <f_write+0x3b4>
    1ef2:	81 91       	ld	r24, Z+
    1ef4:	8d 93       	st	X+, r24
    1ef6:	e2 17       	cp	r30, r18
    1ef8:	f3 07       	cpc	r31, r19
    1efa:	d9 f7       	brne	.-10     	; 0x1ef2 <f_write+0x3b0>
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
    1efc:	ab 81       	ldd	r26, Y+3	; 0x03
    1efe:	bc 81       	ldd	r27, Y+4	; 0x04
    1f00:	ed 91       	ld	r30, X+
    1f02:	fc 91       	ld	r31, X
    1f04:	24 82       	std	Z+4, r2	; 0x04
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    1f06:	46 0e       	add	r4, r22
    1f08:	57 1e       	adc	r5, r23
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	a0 e0       	ldi	r26, 0x00	; 0
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	eb 81       	ldd	r30, Y+3	; 0x03
    1f12:	fc 81       	ldd	r31, Y+4	; 0x04
    1f14:	26 81       	ldd	r18, Z+6	; 0x06
    1f16:	37 81       	ldd	r19, Z+7	; 0x07
    1f18:	40 85       	ldd	r20, Z+8	; 0x08
    1f1a:	51 85       	ldd	r21, Z+9	; 0x09
    1f1c:	28 0f       	add	r18, r24
    1f1e:	39 1f       	adc	r19, r25
    1f20:	4a 1f       	adc	r20, r26
    1f22:	5b 1f       	adc	r21, r27
    1f24:	26 83       	std	Z+6, r18	; 0x06
    1f26:	37 83       	std	Z+7, r19	; 0x07
    1f28:	40 87       	std	Z+8, r20	; 0x08
    1f2a:	51 87       	std	Z+9, r21	; 0x09
    1f2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f30:	80 81       	ld	r24, Z
    1f32:	91 81       	ldd	r25, Z+1	; 0x01
    1f34:	86 0f       	add	r24, r22
    1f36:	97 1f       	adc	r25, r23
    1f38:	91 83       	std	Z+1, r25	; 0x01
    1f3a:	80 83       	st	Z, r24
    1f3c:	66 1a       	sub	r6, r22
    1f3e:	77 0a       	sbc	r7, r23
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
    1f40:	61 14       	cp	r6, r1
    1f42:	71 04       	cpc	r7, r1
    1f44:	09 f0       	breq	.+2      	; 0x1f48 <f_write+0x406>
    1f46:	3f ce       	rjmp	.-898    	; 0x1bc6 <f_write+0x84>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    1f48:	ab 81       	ldd	r26, Y+3	; 0x03
    1f4a:	bc 81       	ldd	r27, Y+4	; 0x04
    1f4c:	16 96       	adiw	r26, 0x06	; 6
    1f4e:	2d 91       	ld	r18, X+
    1f50:	3d 91       	ld	r19, X+
    1f52:	4d 91       	ld	r20, X+
    1f54:	5c 91       	ld	r21, X
    1f56:	19 97       	sbiw	r26, 0x09	; 9
    1f58:	1a 96       	adiw	r26, 0x0a	; 10
    1f5a:	8d 91       	ld	r24, X+
    1f5c:	9d 91       	ld	r25, X+
    1f5e:	0d 90       	ld	r0, X+
    1f60:	bc 91       	ld	r27, X
    1f62:	a0 2d       	mov	r26, r0
    1f64:	82 17       	cp	r24, r18
    1f66:	93 07       	cpc	r25, r19
    1f68:	a4 07       	cpc	r26, r20
    1f6a:	b5 07       	cpc	r27, r21
    1f6c:	30 f4       	brcc	.+12     	; 0x1f7a <f_write+0x438>
    1f6e:	eb 81       	ldd	r30, Y+3	; 0x03
    1f70:	fc 81       	ldd	r31, Y+4	; 0x04
    1f72:	22 87       	std	Z+10, r18	; 0x0a
    1f74:	33 87       	std	Z+11, r19	; 0x0b
    1f76:	44 87       	std	Z+12, r20	; 0x0c
    1f78:	55 87       	std	Z+13, r21	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
    1f7a:	ab 81       	ldd	r26, Y+3	; 0x03
    1f7c:	bc 81       	ldd	r27, Y+4	; 0x04
    1f7e:	14 96       	adiw	r26, 0x04	; 4
    1f80:	8c 91       	ld	r24, X
    1f82:	14 97       	sbiw	r26, 0x04	; 4
    1f84:	80 62       	ori	r24, 0x20	; 32
    1f86:	14 96       	adiw	r26, 0x04	; 4
    1f88:	8c 93       	st	X, r24

	LEAVE_FF(fp->fs, FR_OK);
}
    1f8a:	c4 01       	movw	r24, r8
    1f8c:	24 96       	adiw	r28, 0x04	; 4
    1f8e:	e2 e1       	ldi	r30, 0x12	; 18
    1f90:	0c 94 cb 2e 	jmp	0x5d96	; 0x5d96 <__epilogue_restores__>

00001f94 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    1f94:	a4 e0       	ldi	r26, 0x04	; 4
    1f96:	b0 e0       	ldi	r27, 0x00	; 0
    1f98:	e0 ed       	ldi	r30, 0xD0	; 208
    1f9a:	ff e0       	ldi	r31, 0x0F	; 15
    1f9c:	0c 94 b0 2e 	jmp	0x5d60	; 0x5d60 <__prologue_saves__+0x2>
    1fa0:	9c 83       	std	Y+4, r25	; 0x04
    1fa2:	8b 83       	std	Y+3, r24	; 0x03
    1fa4:	16 2f       	mov	r17, r22
    1fa6:	07 2f       	mov	r16, r23
    1fa8:	3a 01       	movw	r6, r20
    1faa:	3a 83       	std	Y+2, r19	; 0x02
    1fac:	29 83       	std	Y+1, r18	; 0x01
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;


	*br = 0;	/* Initialize bytes read */
    1fae:	d9 01       	movw	r26, r18
    1fb0:	1d 92       	st	X+, r1
    1fb2:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    1fb4:	fc 01       	movw	r30, r24
    1fb6:	62 81       	ldd	r22, Z+2	; 0x02
    1fb8:	73 81       	ldd	r23, Z+3	; 0x03
    1fba:	80 81       	ld	r24, Z
    1fbc:	91 81       	ldd	r25, Z+1	; 0x01
    1fbe:	0e 94 44 04 	call	0x888	; 0x888 <validate>
    1fc2:	4c 01       	movw	r8, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    1fc4:	00 97       	sbiw	r24, 0x00	; 0
    1fc6:	09 f0       	breq	.+2      	; 0x1fca <f_read+0x36>
    1fc8:	8a c1       	rjmp	.+788    	; 0x22de <f_read+0x34a>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    1fca:	ab 81       	ldd	r26, Y+3	; 0x03
    1fcc:	bc 81       	ldd	r27, Y+4	; 0x04
    1fce:	14 96       	adiw	r26, 0x04	; 4
    1fd0:	8c 91       	ld	r24, X
    1fd2:	87 fd       	sbrc	r24, 7
    1fd4:	60 c0       	rjmp	.+192    	; 0x2096 <f_read+0x102>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
    1fd6:	80 fd       	sbrc	r24, 0
    1fd8:	04 c0       	rjmp	.+8      	; 0x1fe2 <f_read+0x4e>
    1fda:	97 e0       	ldi	r25, 0x07	; 7
    1fdc:	89 2e       	mov	r8, r25
    1fde:	91 2c       	mov	r9, r1
    1fe0:	7e c1       	rjmp	.+764    	; 0x22de <f_read+0x34a>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    1fe2:	eb 81       	ldd	r30, Y+3	; 0x03
    1fe4:	fc 81       	ldd	r31, Y+4	; 0x04
    1fe6:	22 85       	ldd	r18, Z+10	; 0x0a
    1fe8:	33 85       	ldd	r19, Z+11	; 0x0b
    1fea:	44 85       	ldd	r20, Z+12	; 0x0c
    1fec:	55 85       	ldd	r21, Z+13	; 0x0d
    1fee:	86 81       	ldd	r24, Z+6	; 0x06
    1ff0:	97 81       	ldd	r25, Z+7	; 0x07
    1ff2:	a0 85       	ldd	r26, Z+8	; 0x08
    1ff4:	b1 85       	ldd	r27, Z+9	; 0x09
    1ff6:	28 1b       	sub	r18, r24
    1ff8:	39 0b       	sbc	r19, r25
    1ffa:	4a 0b       	sbc	r20, r26
    1ffc:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
    1ffe:	c3 01       	movw	r24, r6
    2000:	a0 e0       	ldi	r26, 0x00	; 0
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	28 17       	cp	r18, r24
    2006:	39 07       	cpc	r19, r25
    2008:	4a 07       	cpc	r20, r26
    200a:	5b 07       	cpc	r21, r27
    200c:	08 f4       	brcc	.+2      	; 0x2010 <f_read+0x7c>
    200e:	39 01       	movw	r6, r18
)
{
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;
    2010:	81 2f       	mov	r24, r17
    2012:	90 2f       	mov	r25, r16
    2014:	9c 01       	movw	r18, r24
    2016:	29 01       	movw	r4, r18
    2018:	5e c1       	rjmp	.+700    	; 0x22d6 <f_read+0x342>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    201a:	ab 81       	ldd	r26, Y+3	; 0x03
    201c:	bc 81       	ldd	r27, Y+4	; 0x04
    201e:	16 96       	adiw	r26, 0x06	; 6
    2020:	2d 91       	ld	r18, X+
    2022:	3d 91       	ld	r19, X+
    2024:	4d 91       	ld	r20, X+
    2026:	5c 91       	ld	r21, X
    2028:	19 97       	sbiw	r26, 0x09	; 9
    202a:	da 01       	movw	r26, r20
    202c:	c9 01       	movw	r24, r18
    202e:	91 70       	andi	r25, 0x01	; 1
    2030:	a0 70       	andi	r26, 0x00	; 0
    2032:	b0 70       	andi	r27, 0x00	; 0
    2034:	00 97       	sbiw	r24, 0x00	; 0
    2036:	a1 05       	cpc	r26, r1
    2038:	b1 05       	cpc	r27, r1
    203a:	09 f0       	breq	.+2      	; 0x203e <f_read+0xaa>
    203c:	ef c0       	rjmp	.+478    	; 0x221c <f_read+0x288>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    203e:	ab 81       	ldd	r26, Y+3	; 0x03
    2040:	bc 81       	ldd	r27, Y+4	; 0x04
    2042:	ed 91       	ld	r30, X+
    2044:	fc 91       	ld	r31, X
    2046:	11 97       	sbiw	r26, 0x01	; 1
    2048:	15 96       	adiw	r26, 0x05	; 5
    204a:	9c 91       	ld	r25, X
    204c:	15 97       	sbiw	r26, 0x05	; 5
    204e:	82 81       	ldd	r24, Z+2	; 0x02
    2050:	98 17       	cp	r25, r24
    2052:	e8 f1       	brcs	.+122    	; 0x20ce <f_read+0x13a>
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
    2054:	21 15       	cp	r18, r1
    2056:	31 05       	cpc	r19, r1
    2058:	41 05       	cpc	r20, r1
    205a:	51 05       	cpc	r21, r1
    205c:	39 f4       	brne	.+14     	; 0x206c <f_read+0xd8>
    205e:	1e 96       	adiw	r26, 0x0e	; 14
    2060:	6d 91       	ld	r22, X+
    2062:	7d 91       	ld	r23, X+
    2064:	8d 91       	ld	r24, X+
    2066:	9c 91       	ld	r25, X
    2068:	51 97       	sbiw	r26, 0x11	; 17
    206a:	0b c0       	rjmp	.+22     	; 0x2082 <f_read+0xee>
    206c:	ab 81       	ldd	r26, Y+3	; 0x03
    206e:	bc 81       	ldd	r27, Y+4	; 0x04
    2070:	52 96       	adiw	r26, 0x12	; 18
    2072:	4d 91       	ld	r20, X+
    2074:	5d 91       	ld	r21, X+
    2076:	6d 91       	ld	r22, X+
    2078:	7c 91       	ld	r23, X
    207a:	55 97       	sbiw	r26, 0x15	; 21
    207c:	cf 01       	movw	r24, r30
    207e:	0e 94 92 05 	call	0xb24	; 0xb24 <get_fat>
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
    2082:	62 30       	cpi	r22, 0x02	; 2
    2084:	71 05       	cpc	r23, r1
    2086:	81 05       	cpc	r24, r1
    2088:	91 05       	cpc	r25, r1
    208a:	48 f4       	brcc	.+18     	; 0x209e <f_read+0x10a>
    208c:	eb 81       	ldd	r30, Y+3	; 0x03
    208e:	fc 81       	ldd	r31, Y+4	; 0x04
    2090:	84 81       	ldd	r24, Z+4	; 0x04
    2092:	80 68       	ori	r24, 0x80	; 128
    2094:	84 83       	std	Z+4, r24	; 0x04
    2096:	82 e0       	ldi	r24, 0x02	; 2
    2098:	88 2e       	mov	r8, r24
    209a:	91 2c       	mov	r9, r1
    209c:	20 c1       	rjmp	.+576    	; 0x22de <f_read+0x34a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    209e:	6f 3f       	cpi	r22, 0xFF	; 255
    20a0:	ff ef       	ldi	r31, 0xFF	; 255
    20a2:	7f 07       	cpc	r23, r31
    20a4:	ff ef       	ldi	r31, 0xFF	; 255
    20a6:	8f 07       	cpc	r24, r31
    20a8:	ff ef       	ldi	r31, 0xFF	; 255
    20aa:	9f 07       	cpc	r25, r31
    20ac:	49 f4       	brne	.+18     	; 0x20c0 <f_read+0x12c>
    20ae:	ab 81       	ldd	r26, Y+3	; 0x03
    20b0:	bc 81       	ldd	r27, Y+4	; 0x04
    20b2:	14 96       	adiw	r26, 0x04	; 4
    20b4:	8c 91       	ld	r24, X
    20b6:	14 97       	sbiw	r26, 0x04	; 4
    20b8:	80 68       	ori	r24, 0x80	; 128
    20ba:	14 96       	adiw	r26, 0x04	; 4
    20bc:	8c 93       	st	X, r24
    20be:	c7 c0       	rjmp	.+398    	; 0x224e <f_read+0x2ba>
				fp->curr_clust = clst;				/* Update current cluster */
    20c0:	eb 81       	ldd	r30, Y+3	; 0x03
    20c2:	fc 81       	ldd	r31, Y+4	; 0x04
    20c4:	62 8b       	std	Z+18, r22	; 0x12
    20c6:	73 8b       	std	Z+19, r23	; 0x13
    20c8:	84 8b       	std	Z+20, r24	; 0x14
    20ca:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector offset in the cluster */
    20cc:	15 82       	std	Z+5, r1	; 0x05
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    20ce:	ab 81       	ldd	r26, Y+3	; 0x03
    20d0:	bc 81       	ldd	r27, Y+4	; 0x04
    20d2:	0d 91       	ld	r16, X+
    20d4:	1c 91       	ld	r17, X
    20d6:	11 97       	sbiw	r26, 0x01	; 1
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    20d8:	52 96       	adiw	r26, 0x12	; 18
    20da:	2d 91       	ld	r18, X+
    20dc:	3d 91       	ld	r19, X+
    20de:	4d 91       	ld	r20, X+
    20e0:	5c 91       	ld	r21, X
    20e2:	55 97       	sbiw	r26, 0x15	; 21
    20e4:	22 50       	subi	r18, 0x02	; 2
    20e6:	30 40       	sbci	r19, 0x00	; 0
    20e8:	40 40       	sbci	r20, 0x00	; 0
    20ea:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    20ec:	f8 01       	movw	r30, r16
    20ee:	86 8d       	ldd	r24, Z+30	; 0x1e
    20f0:	97 8d       	ldd	r25, Z+31	; 0x1f
    20f2:	a0 a1       	ldd	r26, Z+32	; 0x20
    20f4:	b1 a1       	ldd	r27, Z+33	; 0x21
    20f6:	02 97       	sbiw	r24, 0x02	; 2
    20f8:	a1 09       	sbc	r26, r1
    20fa:	b1 09       	sbc	r27, r1
    20fc:	28 17       	cp	r18, r24
    20fe:	39 07       	cpc	r19, r25
    2100:	4a 07       	cpc	r20, r26
    2102:	5b 07       	cpc	r21, r27
    2104:	b8 f4       	brcc	.+46     	; 0x2134 <f_read+0x1a0>
	return clst * fs->csize + fs->database;
    2106:	32 80       	ldd	r3, Z+2	; 0x02
    2108:	63 2d       	mov	r22, r3
    210a:	70 e0       	ldi	r23, 0x00	; 0
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <__mulsi3>
    2114:	9b 01       	movw	r18, r22
    2116:	ac 01       	movw	r20, r24
    2118:	f8 01       	movw	r30, r16
    211a:	82 a5       	ldd	r24, Z+42	; 0x2a
    211c:	93 a5       	ldd	r25, Z+43	; 0x2b
    211e:	a4 a5       	ldd	r26, Z+44	; 0x2c
    2120:	b5 a5       	ldd	r27, Z+45	; 0x2d
    2122:	28 0f       	add	r18, r24
    2124:	39 1f       	adc	r19, r25
    2126:	4a 1f       	adc	r20, r26
    2128:	5b 1f       	adc	r21, r27
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->curr_clust = clst;				/* Update current cluster */
				fp->csect = 0;						/* Reset sector offset in the cluster */
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    212a:	21 15       	cp	r18, r1
    212c:	31 05       	cpc	r19, r1
    212e:	41 05       	cpc	r20, r1
    2130:	51 05       	cpc	r21, r1
    2132:	49 f4       	brne	.+18     	; 0x2146 <f_read+0x1b2>
    2134:	ab 81       	ldd	r26, Y+3	; 0x03
    2136:	bc 81       	ldd	r27, Y+4	; 0x04
    2138:	14 96       	adiw	r26, 0x04	; 4
    213a:	8c 91       	ld	r24, X
    213c:	14 97       	sbiw	r26, 0x04	; 4
    213e:	80 68       	ori	r24, 0x80	; 128
    2140:	14 96       	adiw	r26, 0x04	; 4
    2142:	8c 93       	st	X, r24
    2144:	a8 cf       	rjmp	.-176    	; 0x2096 <f_read+0x102>
			sect += fp->csect;
    2146:	eb 81       	ldd	r30, Y+3	; 0x03
    2148:	fc 81       	ldd	r31, Y+4	; 0x04
    214a:	85 81       	ldd	r24, Z+5	; 0x05
    214c:	69 01       	movw	r12, r18
    214e:	7a 01       	movw	r14, r20
    2150:	c8 0e       	add	r12, r24
    2152:	d1 1c       	adc	r13, r1
    2154:	e1 1c       	adc	r14, r1
    2156:	f1 1c       	adc	r15, r1
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
    2158:	53 01       	movw	r10, r6
    215a:	ab 2c       	mov	r10, r11
    215c:	bb 24       	eor	r11, r11
    215e:	a6 94       	lsr	r10
			if (cc) {								/* Read maximum contiguous sectors directly */
    2160:	a1 14       	cp	r10, r1
    2162:	b1 04       	cpc	r11, r1
    2164:	09 f4       	brne	.+2      	; 0x2168 <f_read+0x1d4>
    2166:	52 c0       	rjmp	.+164    	; 0x220c <f_read+0x278>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    2168:	28 2f       	mov	r18, r24
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	c5 01       	movw	r24, r10
    216e:	82 0f       	add	r24, r18
    2170:	93 1f       	adc	r25, r19
    2172:	63 2d       	mov	r22, r3
    2174:	70 e0       	ldi	r23, 0x00	; 0
    2176:	68 17       	cp	r22, r24
    2178:	79 07       	cpc	r23, r25
    217a:	18 f4       	brcc	.+6      	; 0x2182 <f_read+0x1ee>
					cc = fp->fs->csize - fp->csect;
    217c:	5b 01       	movw	r10, r22
    217e:	a2 1a       	sub	r10, r18
    2180:	b3 0a       	sbc	r11, r19
				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
    2182:	d8 01       	movw	r26, r16
    2184:	11 96       	adiw	r26, 0x01	; 1
    2186:	8c 91       	ld	r24, X
    2188:	b2 01       	movw	r22, r4
    218a:	a7 01       	movw	r20, r14
    218c:	96 01       	movw	r18, r12
    218e:	0a 2d       	mov	r16, r10
    2190:	0e 94 b4 18 	call	0x3168	; 0x3168 <disk_read>
    2194:	89 2b       	or	r24, r25
    2196:	09 f0       	breq	.+2      	; 0x219a <f_read+0x206>
    2198:	55 c0       	rjmp	.+170    	; 0x2244 <f_read+0x2b0>
					ABORT(fp->fs, FR_DISK_ERR);
#if !_FS_READONLY && _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)		/* Replace one of the read sectors with cached data if it contains a dirty sector */
    219a:	ab 81       	ldd	r26, Y+3	; 0x03
    219c:	bc 81       	ldd	r27, Y+4	; 0x04
    219e:	6d 91       	ld	r22, X+
    21a0:	7c 91       	ld	r23, X
    21a2:	fb 01       	movw	r30, r22
    21a4:	84 81       	ldd	r24, Z+4	; 0x04
    21a6:	88 23       	and	r24, r24
    21a8:	21 f1       	breq	.+72     	; 0x21f2 <f_read+0x25e>
    21aa:	26 a5       	ldd	r18, Z+46	; 0x2e
    21ac:	37 a5       	ldd	r19, Z+47	; 0x2f
    21ae:	40 a9       	ldd	r20, Z+48	; 0x30
    21b0:	51 a9       	ldd	r21, Z+49	; 0x31
    21b2:	2c 19       	sub	r18, r12
    21b4:	3d 09       	sbc	r19, r13
    21b6:	4e 09       	sbc	r20, r14
    21b8:	5f 09       	sbc	r21, r15
    21ba:	c5 01       	movw	r24, r10
    21bc:	a0 e0       	ldi	r26, 0x00	; 0
    21be:	b0 e0       	ldi	r27, 0x00	; 0
    21c0:	28 17       	cp	r18, r24
    21c2:	39 07       	cpc	r19, r25
    21c4:	4a 07       	cpc	r20, r26
    21c6:	5b 07       	cpc	r21, r27
    21c8:	a0 f4       	brcc	.+40     	; 0x21f2 <f_read+0x25e>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    21ca:	a9 e0       	ldi	r26, 0x09	; 9
    21cc:	22 0f       	add	r18, r18
    21ce:	33 1f       	adc	r19, r19
    21d0:	44 1f       	adc	r20, r20
    21d2:	55 1f       	adc	r21, r21
    21d4:	aa 95       	dec	r26
    21d6:	d1 f7       	brne	.-12     	; 0x21cc <f_read+0x238>
    21d8:	d2 01       	movw	r26, r4
    21da:	a2 0f       	add	r26, r18
    21dc:	b3 1f       	adc	r27, r19
	const char *s = (const char *)src;
    21de:	f2 96       	adiw	r30, 0x32	; 50
	while (cnt--) *d++ = *s++;
    21e0:	9b 01       	movw	r18, r22
    21e2:	2e 5c       	subi	r18, 0xCE	; 206
    21e4:	3d 4f       	sbci	r19, 0xFD	; 253
    21e6:	02 c0       	rjmp	.+4      	; 0x21ec <f_read+0x258>
    21e8:	81 91       	ld	r24, Z+
    21ea:	8d 93       	st	X+, r24
    21ec:	e2 17       	cp	r30, r18
    21ee:	f3 07       	cpc	r31, r19
    21f0:	d9 f7       	brne	.-10     	; 0x21e8 <f_read+0x254>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    21f2:	ab 81       	ldd	r26, Y+3	; 0x03
    21f4:	bc 81       	ldd	r27, Y+4	; 0x04
    21f6:	15 96       	adiw	r26, 0x05	; 5
    21f8:	8c 91       	ld	r24, X
    21fa:	15 97       	sbiw	r26, 0x05	; 5
    21fc:	8a 0d       	add	r24, r10
    21fe:	15 96       	adiw	r26, 0x05	; 5
    2200:	8c 93       	st	X, r24
				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    2202:	b5 01       	movw	r22, r10
    2204:	76 2f       	mov	r23, r22
    2206:	66 27       	eor	r22, r22
    2208:	77 0f       	add	r23, r23
    220a:	48 c0       	rjmp	.+144    	; 0x229c <f_read+0x308>
			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    220c:	eb 81       	ldd	r30, Y+3	; 0x03
    220e:	fc 81       	ldd	r31, Y+4	; 0x04
    2210:	c6 8a       	std	Z+22, r12	; 0x16
    2212:	d7 8a       	std	Z+23, r13	; 0x17
    2214:	e0 8e       	std	Z+24, r14	; 0x18
    2216:	f1 8e       	std	Z+25, r15	; 0x19
			fp->csect++;							/* Next sector address in the cluster */
    2218:	8f 5f       	subi	r24, 0xFF	; 255
    221a:	85 83       	std	Z+5, r24	; 0x05
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    221c:	ab 81       	ldd	r26, Y+3	; 0x03
    221e:	bc 81       	ldd	r27, Y+4	; 0x04
    2220:	16 96       	adiw	r26, 0x06	; 6
    2222:	cd 90       	ld	r12, X+
    2224:	dd 90       	ld	r13, X+
    2226:	ed 90       	ld	r14, X+
    2228:	fc 90       	ld	r15, X
    222a:	19 97       	sbiw	r26, 0x09	; 9
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
    222c:	56 96       	adiw	r26, 0x16	; 22
    222e:	4d 91       	ld	r20, X+
    2230:	5d 91       	ld	r21, X+
    2232:	6d 91       	ld	r22, X+
    2234:	7c 91       	ld	r23, X
    2236:	59 97       	sbiw	r26, 0x19	; 25
    2238:	8d 91       	ld	r24, X+
    223a:	9c 91       	ld	r25, X
    223c:	0e 94 5e 04 	call	0x8bc	; 0x8bc <move_window>
    2240:	89 2b       	or	r24, r25
    2242:	49 f0       	breq	.+18     	; 0x2256 <f_read+0x2c2>
			ABORT(fp->fs, FR_DISK_ERR);
    2244:	eb 81       	ldd	r30, Y+3	; 0x03
    2246:	fc 81       	ldd	r31, Y+4	; 0x04
    2248:	84 81       	ldd	r24, Z+4	; 0x04
    224a:	80 68       	ori	r24, 0x80	; 128
    224c:	84 83       	std	Z+4, r24	; 0x04
    224e:	41 e0       	ldi	r20, 0x01	; 1
    2250:	84 2e       	mov	r8, r20
    2252:	91 2c       	mov	r9, r1
    2254:	44 c0       	rjmp	.+136    	; 0x22de <f_read+0x34a>
			}
#endif
			fp->dsect = sect;
			fp->csect++;							/* Next sector address in the cluster */
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    2256:	c6 01       	movw	r24, r12
    2258:	91 70       	andi	r25, 0x01	; 1
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	32 e0       	ldi	r19, 0x02	; 2
    225e:	28 1b       	sub	r18, r24
    2260:	39 0b       	sbc	r19, r25
    2262:	b3 01       	movw	r22, r6
    2264:	26 15       	cp	r18, r6
    2266:	37 05       	cpc	r19, r7
    2268:	08 f4       	brcc	.+2      	; 0x226c <f_read+0x2d8>
    226a:	b9 01       	movw	r22, r18
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    226c:	a2 01       	movw	r20, r4
	const char *s = (const char *)src;
    226e:	ab 81       	ldd	r26, Y+3	; 0x03
    2270:	bc 81       	ldd	r27, Y+4	; 0x04
    2272:	16 96       	adiw	r26, 0x06	; 6
    2274:	8d 91       	ld	r24, X+
    2276:	9c 91       	ld	r25, X
    2278:	17 97       	sbiw	r26, 0x07	; 7
    227a:	91 70       	andi	r25, 0x01	; 1
    227c:	c2 96       	adiw	r24, 0x32	; 50
    227e:	ed 91       	ld	r30, X+
    2280:	fc 91       	ld	r31, X
    2282:	e8 0f       	add	r30, r24
    2284:	f9 1f       	adc	r31, r25
	while (cnt--) *d++ = *s++;
    2286:	9f 01       	movw	r18, r30
    2288:	26 0f       	add	r18, r22
    228a:	37 1f       	adc	r19, r23
    228c:	04 c0       	rjmp	.+8      	; 0x2296 <f_read+0x302>
    228e:	81 91       	ld	r24, Z+
    2290:	da 01       	movw	r26, r20
    2292:	8d 93       	st	X+, r24
    2294:	ad 01       	movw	r20, r26
    2296:	e2 17       	cp	r30, r18
    2298:	f3 07       	cpc	r31, r19
    229a:	c9 f7       	brne	.-14     	; 0x228e <f_read+0x2fa>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    229c:	46 0e       	add	r4, r22
    229e:	57 1e       	adc	r5, r23
    22a0:	cb 01       	movw	r24, r22
    22a2:	a0 e0       	ldi	r26, 0x00	; 0
    22a4:	b0 e0       	ldi	r27, 0x00	; 0
    22a6:	eb 81       	ldd	r30, Y+3	; 0x03
    22a8:	fc 81       	ldd	r31, Y+4	; 0x04
    22aa:	26 81       	ldd	r18, Z+6	; 0x06
    22ac:	37 81       	ldd	r19, Z+7	; 0x07
    22ae:	40 85       	ldd	r20, Z+8	; 0x08
    22b0:	51 85       	ldd	r21, Z+9	; 0x09
    22b2:	28 0f       	add	r18, r24
    22b4:	39 1f       	adc	r19, r25
    22b6:	4a 1f       	adc	r20, r26
    22b8:	5b 1f       	adc	r21, r27
    22ba:	26 83       	std	Z+6, r18	; 0x06
    22bc:	37 83       	std	Z+7, r19	; 0x07
    22be:	40 87       	std	Z+8, r20	; 0x08
    22c0:	51 87       	std	Z+9, r21	; 0x09
    22c2:	e9 81       	ldd	r30, Y+1	; 0x01
    22c4:	fa 81       	ldd	r31, Y+2	; 0x02
    22c6:	80 81       	ld	r24, Z
    22c8:	91 81       	ldd	r25, Z+1	; 0x01
    22ca:	86 0f       	add	r24, r22
    22cc:	97 1f       	adc	r25, r23
    22ce:	91 83       	std	Z+1, r25	; 0x01
    22d0:	80 83       	st	Z, r24
    22d2:	66 1a       	sub	r6, r22
    22d4:	77 0a       	sbc	r7, r23
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
    22d6:	61 14       	cp	r6, r1
    22d8:	71 04       	cpc	r7, r1
    22da:	09 f0       	breq	.+2      	; 0x22de <f_read+0x34a>
    22dc:	9e ce       	rjmp	.-708    	; 0x201a <f_read+0x86>
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    22de:	c4 01       	movw	r24, r8
    22e0:	24 96       	adiw	r28, 0x04	; 4
    22e2:	e1 e1       	ldi	r30, 0x11	; 17
    22e4:	0c 94 cc 2e 	jmp	0x5d98	; 0x5d98 <__epilogue_restores__+0x2>

000022e8 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    22e8:	0f 93       	push	r16
    22ea:	cf 93       	push	r28
    22ec:	df 93       	push	r29
    22ee:	ec 01       	movw	r28, r24
    22f0:	9a 01       	movw	r18, r20
    22f2:	ab 01       	movw	r20, r22
	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    22f4:	bc 01       	movw	r22, r24
    22f6:	6e 5c       	subi	r22, 0xCE	; 206
    22f8:	7f 4f       	sbci	r23, 0xFF	; 255
    22fa:	89 81       	ldd	r24, Y+1	; 0x01
    22fc:	01 e0       	ldi	r16, 0x01	; 1
    22fe:	0e 94 b4 18 	call	0x3168	; 0x3168 <disk_read>
    2302:	89 2b       	or	r24, r25
    2304:	11 f0       	breq	.+4      	; 0x230a <check_fs+0x22>
    2306:	23 e0       	ldi	r18, 0x03	; 3
    2308:	29 c0       	rjmp	.+82     	; 0x235c <check_fs+0x74>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    230a:	c0 5d       	subi	r28, 0xD0	; 208
    230c:	dd 4f       	sbci	r29, 0xFD	; 253
    230e:	88 81       	ld	r24, Y
    2310:	99 81       	ldd	r25, Y+1	; 0x01
    2312:	c0 53       	subi	r28, 0x30	; 48
    2314:	d2 40       	sbci	r29, 0x02	; 2
    2316:	85 55       	subi	r24, 0x55	; 85
    2318:	9a 4a       	sbci	r25, 0xAA	; 170
    231a:	11 f0       	breq	.+4      	; 0x2320 <check_fs+0x38>
    231c:	22 e0       	ldi	r18, 0x02	; 2
    231e:	1e c0       	rjmp	.+60     	; 0x235c <check_fs+0x74>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    2320:	c8 59       	subi	r28, 0x98	; 152
    2322:	df 4f       	sbci	r29, 0xFF	; 255
    2324:	88 81       	ld	r24, Y
    2326:	99 81       	ldd	r25, Y+1	; 0x01
    2328:	aa 81       	ldd	r26, Y+2	; 0x02
    232a:	bb 81       	ldd	r27, Y+3	; 0x03
    232c:	c8 56       	subi	r28, 0x68	; 104
    232e:	d0 40       	sbci	r29, 0x00	; 0
    2330:	b0 70       	andi	r27, 0x00	; 0
    2332:	86 54       	subi	r24, 0x46	; 70
    2334:	91 44       	sbci	r25, 0x41	; 65
    2336:	a4 45       	sbci	r26, 0x54	; 84
    2338:	b0 40       	sbci	r27, 0x00	; 0
    233a:	11 f4       	brne	.+4      	; 0x2340 <check_fs+0x58>
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	0e c0       	rjmp	.+28     	; 0x235c <check_fs+0x74>
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	cc 57       	subi	r28, 0x7C	; 124
    2344:	df 4f       	sbci	r29, 0xFF	; 255
    2346:	88 81       	ld	r24, Y
    2348:	99 81       	ldd	r25, Y+1	; 0x01
    234a:	aa 81       	ldd	r26, Y+2	; 0x02
    234c:	bb 81       	ldd	r27, Y+3	; 0x03
    234e:	b0 70       	andi	r27, 0x00	; 0
    2350:	86 54       	subi	r24, 0x46	; 70
    2352:	91 44       	sbci	r25, 0x41	; 65
    2354:	a4 45       	sbci	r26, 0x54	; 84
    2356:	b0 40       	sbci	r27, 0x00	; 0
    2358:	09 f0       	breq	.+2      	; 0x235c <check_fs+0x74>
    235a:	21 e0       	ldi	r18, 0x01	; 1
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
    235c:	82 2f       	mov	r24, r18
    235e:	df 91       	pop	r29
    2360:	cf 91       	pop	r28
    2362:	0f 91       	pop	r16
    2364:	08 95       	ret

00002366 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    2366:	0f 93       	push	r16
    2368:	1f 93       	push	r17
    236a:	cf 93       	push	r28
    236c:	df 93       	push	r29
    236e:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    2370:	6a 81       	ldd	r22, Y+2	; 0x02
    2372:	7b 81       	ldd	r23, Y+3	; 0x03
    2374:	88 81       	ld	r24, Y
    2376:	99 81       	ldd	r25, Y+1	; 0x01
    2378:	0e 94 44 04 	call	0x888	; 0x888 <validate>
    237c:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    237e:	00 97       	sbiw	r24, 0x00	; 0
    2380:	09 f0       	breq	.+2      	; 0x2384 <f_sync+0x1e>
    2382:	a6 c0       	rjmp	.+332    	; 0x24d0 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    2384:	8c 81       	ldd	r24, Y+4	; 0x04
    2386:	85 ff       	sbrs	r24, 5
    2388:	a3 c0       	rjmp	.+326    	; 0x24d0 <f_sync+0x16a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    238a:	4a 8d       	ldd	r20, Y+26	; 0x1a
    238c:	5b 8d       	ldd	r21, Y+27	; 0x1b
    238e:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2390:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2392:	88 81       	ld	r24, Y
    2394:	99 81       	ldd	r25, Y+1	; 0x01
    2396:	0e 94 5e 04 	call	0x8bc	; 0x8bc <move_window>
    239a:	9c 01       	movw	r18, r24
			if (res == FR_OK) {
    239c:	00 97       	sbiw	r24, 0x00	; 0
    239e:	09 f0       	breq	.+2      	; 0x23a2 <f_sync+0x3c>
    23a0:	97 c0       	rjmp	.+302    	; 0x24d0 <f_sync+0x16a>
				dir = fp->dir_ptr;
    23a2:	0e 8d       	ldd	r16, Y+30	; 0x1e
    23a4:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    23a6:	f8 01       	movw	r30, r16
    23a8:	83 85       	ldd	r24, Z+11	; 0x0b
    23aa:	80 62       	ori	r24, 0x20	; 32
    23ac:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    23ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    23b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    23b2:	ac 85       	ldd	r26, Y+12	; 0x0c
    23b4:	bd 85       	ldd	r27, Y+13	; 0x0d
    23b6:	84 8f       	std	Z+28, r24	; 0x1c
    23b8:	95 8f       	std	Z+29, r25	; 0x1d
    23ba:	a6 8f       	std	Z+30, r26	; 0x1e
    23bc:	b7 8f       	std	Z+31, r27	; 0x1f
				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
    23be:	8e 85       	ldd	r24, Y+14	; 0x0e
    23c0:	9f 85       	ldd	r25, Y+15	; 0x0f
    23c2:	93 8f       	std	Z+27, r25	; 0x1b
    23c4:	82 8f       	std	Z+26, r24	; 0x1a
				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
    23c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    23c8:	9f 85       	ldd	r25, Y+15	; 0x0f
    23ca:	a8 89       	ldd	r26, Y+16	; 0x10
    23cc:	b9 89       	ldd	r27, Y+17	; 0x11
    23ce:	cd 01       	movw	r24, r26
    23d0:	aa 27       	eor	r26, r26
    23d2:	bb 27       	eor	r27, r27
    23d4:	95 8b       	std	Z+21, r25	; 0x15
    23d6:	84 8b       	std	Z+20, r24	; 0x14
				tim = get_fattime();			/* Updated time */
    23d8:	0e 94 e5 00 	call	0x1ca	; 0x1ca <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
    23dc:	f8 01       	movw	r30, r16
    23de:	66 8b       	std	Z+22, r22	; 0x16
    23e0:	77 8b       	std	Z+23, r23	; 0x17
    23e2:	80 8f       	std	Z+24, r24	; 0x18
    23e4:	91 8f       	std	Z+25, r25	; 0x19
				fp->flag &= ~FA__WRITTEN;
    23e6:	8c 81       	ldd	r24, Y+4	; 0x04
    23e8:	8f 7d       	andi	r24, 0xDF	; 223
    23ea:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    23ec:	e8 81       	ld	r30, Y
    23ee:	f9 81       	ldd	r31, Y+1	; 0x01
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    23f4:	09 90       	ld	r0, Y+
    23f6:	d8 81       	ld	r29, Y
    23f8:	c0 2d       	mov	r28, r0
)
{
	FRESULT res;


	res = move_window(fs, 0);
    23fa:	ce 01       	movw	r24, r28
    23fc:	40 e0       	ldi	r20, 0x00	; 0
    23fe:	50 e0       	ldi	r21, 0x00	; 0
    2400:	60 e0       	ldi	r22, 0x00	; 0
    2402:	70 e0       	ldi	r23, 0x00	; 0
    2404:	0e 94 5e 04 	call	0x8bc	; 0x8bc <move_window>
    2408:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    240a:	00 97       	sbiw	r24, 0x00	; 0
    240c:	09 f0       	breq	.+2      	; 0x2410 <f_sync+0xaa>
    240e:	60 c0       	rjmp	.+192    	; 0x24d0 <f_sync+0x16a>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    2410:	88 81       	ld	r24, Y
    2412:	83 30       	cpi	r24, 0x03	; 3
    2414:	09 f0       	breq	.+2      	; 0x2418 <f_sync+0xb2>
    2416:	51 c0       	rjmp	.+162    	; 0x24ba <f_sync+0x154>
    2418:	8d 81       	ldd	r24, Y+5	; 0x05
    241a:	88 23       	and	r24, r24
    241c:	09 f4       	brne	.+2      	; 0x2420 <f_sync+0xba>
    241e:	4d c0       	rjmp	.+154    	; 0x24ba <f_sync+0x154>
			fs->winsect = 0;
    2420:	1e a6       	std	Y+46, r1	; 0x2e
    2422:	1f a6       	std	Y+47, r1	; 0x2f
    2424:	18 aa       	std	Y+48, r1	; 0x30
    2426:	19 aa       	std	Y+49, r1	; 0x31
			mem_set(fs->win, 0, 512);
    2428:	be 01       	movw	r22, r28
    242a:	6e 5c       	subi	r22, 0xCE	; 206
    242c:	7f 4f       	sbci	r23, 0xFF	; 255
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    242e:	fb 01       	movw	r30, r22
	while (cnt--) *d++ = (char)val;
    2430:	ce 01       	movw	r24, r28
    2432:	8e 5c       	subi	r24, 0xCE	; 206
    2434:	9d 4f       	sbci	r25, 0xFD	; 253
    2436:	01 c0       	rjmp	.+2      	; 0x243a <f_sync+0xd4>
    2438:	11 92       	st	Z+, r1
    243a:	e8 17       	cp	r30, r24
    243c:	f9 07       	cpc	r31, r25
    243e:	e1 f7       	brne	.-8      	; 0x2438 <f_sync+0xd2>
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    2440:	c0 5d       	subi	r28, 0xD0	; 208
    2442:	dd 4f       	sbci	r29, 0xFD	; 253
    2444:	85 e5       	ldi	r24, 0x55	; 85
    2446:	9a ea       	ldi	r25, 0xAA	; 170
    2448:	99 83       	std	Y+1, r25	; 0x01
    244a:	88 83       	st	Y, r24
    244c:	c0 53       	subi	r28, 0x30	; 48
    244e:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    2450:	82 e5       	ldi	r24, 0x52	; 82
    2452:	92 e5       	ldi	r25, 0x52	; 82
    2454:	a1 e6       	ldi	r26, 0x61	; 97
    2456:	b1 e4       	ldi	r27, 0x41	; 65
    2458:	8a ab       	std	Y+50, r24	; 0x32
    245a:	9b ab       	std	Y+51, r25	; 0x33
    245c:	ac ab       	std	Y+52, r26	; 0x34
    245e:	bd ab       	std	Y+53, r27	; 0x35
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    2460:	ca 5e       	subi	r28, 0xEA	; 234
    2462:	dd 4f       	sbci	r29, 0xFD	; 253
    2464:	82 e7       	ldi	r24, 0x72	; 114
    2466:	92 e7       	ldi	r25, 0x72	; 114
    2468:	a1 e4       	ldi	r26, 0x41	; 65
    246a:	b1 e6       	ldi	r27, 0x61	; 97
    246c:	88 83       	st	Y, r24
    246e:	99 83       	std	Y+1, r25	; 0x01
    2470:	aa 83       	std	Y+2, r26	; 0x02
    2472:	bb 83       	std	Y+3, r27	; 0x03
    2474:	c6 51       	subi	r28, 0x16	; 22
    2476:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    2478:	8e 85       	ldd	r24, Y+14	; 0x0e
    247a:	9f 85       	ldd	r25, Y+15	; 0x0f
    247c:	a8 89       	ldd	r26, Y+16	; 0x10
    247e:	b9 89       	ldd	r27, Y+17	; 0x11
    2480:	c6 5e       	subi	r28, 0xE6	; 230
    2482:	dd 4f       	sbci	r29, 0xFD	; 253
    2484:	88 83       	st	Y, r24
    2486:	99 83       	std	Y+1, r25	; 0x01
    2488:	aa 83       	std	Y+2, r26	; 0x02
    248a:	bb 83       	std	Y+3, r27	; 0x03
    248c:	ca 51       	subi	r28, 0x1A	; 26
    248e:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    2490:	8a 85       	ldd	r24, Y+10	; 0x0a
    2492:	9b 85       	ldd	r25, Y+11	; 0x0b
    2494:	ac 85       	ldd	r26, Y+12	; 0x0c
    2496:	bd 85       	ldd	r27, Y+13	; 0x0d
    2498:	c2 5e       	subi	r28, 0xE2	; 226
    249a:	dd 4f       	sbci	r29, 0xFD	; 253
    249c:	88 83       	st	Y, r24
    249e:	99 83       	std	Y+1, r25	; 0x01
    24a0:	aa 83       	std	Y+2, r26	; 0x02
    24a2:	bb 83       	std	Y+3, r27	; 0x03
    24a4:	ce 51       	subi	r28, 0x1E	; 30
    24a6:	d2 40       	sbci	r29, 0x02	; 2
			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
    24a8:	2a 89       	ldd	r18, Y+18	; 0x12
    24aa:	3b 89       	ldd	r19, Y+19	; 0x13
    24ac:	4c 89       	ldd	r20, Y+20	; 0x14
    24ae:	5d 89       	ldd	r21, Y+21	; 0x15
    24b0:	89 81       	ldd	r24, Y+1	; 0x01
    24b2:	01 e0       	ldi	r16, 0x01	; 1
    24b4:	0e 94 12 19 	call	0x3224	; 0x3224 <disk_write>
			fs->fsi_flag = 0;
    24b8:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drive, CTRL_SYNC, (void*)NULL) != RES_OK)
    24ba:	89 81       	ldd	r24, Y+1	; 0x01
    24bc:	60 e0       	ldi	r22, 0x00	; 0
    24be:	40 e0       	ldi	r20, 0x00	; 0
    24c0:	50 e0       	ldi	r21, 0x00	; 0
    24c2:	0e 94 89 19 	call	0x3312	; 0x3312 <disk_ioctl>
    24c6:	00 97       	sbiw	r24, 0x00	; 0
    24c8:	11 f0       	breq	.+4      	; 0x24ce <f_sync+0x168>
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	9c 01       	movw	r18, r24
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    24d0:	c9 01       	movw	r24, r18
    24d2:	df 91       	pop	r29
    24d4:	cf 91       	pop	r28
    24d6:	1f 91       	pop	r17
    24d8:	0f 91       	pop	r16
    24da:	08 95       	ret

000024dc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    24dc:	cf 93       	push	r28
    24de:	df 93       	push	r29
    24e0:	ec 01       	movw	r28, r24
#if _FS_READONLY
	res = validate(fp->fs, fp->id);
	if (res == FR_OK) fp->fs = NULL;
	LEAVE_FF(fp->fs, res);
#else
	res = f_sync(fp);
    24e2:	0e 94 b3 11 	call	0x2366	; 0x2366 <f_sync>
    24e6:	9c 01       	movw	r18, r24
	if (res == FR_OK) fp->fs = NULL;
    24e8:	00 97       	sbiw	r24, 0x00	; 0
    24ea:	11 f4       	brne	.+4      	; 0x24f0 <f_close+0x14>
    24ec:	19 82       	std	Y+1, r1	; 0x01
    24ee:	18 82       	st	Y, r1
	return res;
#endif
}
    24f0:	c9 01       	movw	r24, r18
    24f2:	df 91       	pop	r29
    24f4:	cf 91       	pop	r28
    24f6:	08 95       	ret

000024f8 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occured */
	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    24f8:	a0 e0       	ldi	r26, 0x00	; 0
    24fa:	b0 e0       	ldi	r27, 0x00	; 0
    24fc:	e2 e8       	ldi	r30, 0x82	; 130
    24fe:	f2 e1       	ldi	r31, 0x12	; 18
    2500:	0c 94 b3 2e 	jmp	0x5d66	; 0x5d66 <__prologue_saves__+0x8>
    2504:	dc 01       	movw	r26, r24
    2506:	14 2f       	mov	r17, r20
	BYTE fmt, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fsize, tsect, mclst;
	const XCHAR *p = *path;
    2508:	ed 91       	ld	r30, X+
    250a:	fc 91       	ld	r31, X
    250c:	11 97       	sbiw	r26, 0x01	; 1
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';				/* Is there a drive number? */
    250e:	80 81       	ld	r24, Z
    2510:	28 2f       	mov	r18, r24
    2512:	33 27       	eor	r19, r19
    2514:	27 fd       	sbrc	r18, 7
    2516:	30 95       	com	r19
    2518:	20 53       	subi	r18, 0x30	; 48
    251a:	30 40       	sbci	r19, 0x00	; 0
	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
    251c:	2a 30       	cpi	r18, 0x0A	; 10
    251e:	31 05       	cpc	r19, r1
    2520:	38 f4       	brcc	.+14     	; 0x2530 <chk_mounted+0x38>
    2522:	81 81       	ldd	r24, Z+1	; 0x01
    2524:	8a 33       	cpi	r24, 0x3A	; 58
    2526:	21 f4       	brne	.+8      	; 0x2530 <chk_mounted+0x38>
		p += 2; *path = p;			/* Return pointer to the path name */
    2528:	32 96       	adiw	r30, 0x02	; 2
    252a:	ed 93       	st	X+, r30
    252c:	fc 93       	st	X, r31
    252e:	04 c0       	rjmp	.+8      	; 0x2538 <chk_mounted+0x40>
	} else {						/* No drive number is given */
#if _FS_RPATH
		vol = Drive;				/* Use current drive */
    2530:	80 91 be 02 	lds	r24, 0x02BE
    2534:	28 2f       	mov	r18, r24
    2536:	30 e0       	ldi	r19, 0x00	; 0
		vol = 0;					/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
    2538:	23 2b       	or	r18, r19
    253a:	19 f0       	breq	.+6      	; 0x2542 <chk_mounted+0x4a>
    253c:	2b e0       	ldi	r18, 0x0B	; 11
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	81 c1       	rjmp	.+770    	; 0x2844 <chk_mounted+0x34c>
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
    2542:	c0 91 ba 02 	lds	r28, 0x02BA
    2546:	d0 91 bb 02 	lds	r29, 0x02BB
    254a:	fb 01       	movw	r30, r22
    254c:	d1 83       	std	Z+1, r29	; 0x01
    254e:	c0 83       	st	Z, r28
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
    2550:	20 97       	sbiw	r28, 0x00	; 0
    2552:	19 f4       	brne	.+6      	; 0x255a <chk_mounted+0x62>
    2554:	2c e0       	ldi	r18, 0x0C	; 12
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	75 c1       	rjmp	.+746    	; 0x2844 <chk_mounted+0x34c>

	ENTER_FF(fs);					/* Lock file system */

	if (fs->fs_type) {				/* If the logical drive has been mounted */
    255a:	88 81       	ld	r24, Y
    255c:	88 23       	and	r24, r24
    255e:	59 f0       	breq	.+22     	; 0x2576 <chk_mounted+0x7e>
		stat = disk_status(fs->drive);
    2560:	89 81       	ldd	r24, Y+1	; 0x01
    2562:	0e 94 ad 18 	call	0x315a	; 0x315a <disk_status>
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
    2566:	80 fd       	sbrc	r24, 0
    2568:	06 c0       	rjmp	.+12     	; 0x2576 <chk_mounted+0x7e>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    256a:	11 23       	and	r17, r17
    256c:	09 f4       	brne	.+2      	; 0x2570 <chk_mounted+0x78>
    256e:	65 c1       	rjmp	.+714    	; 0x283a <chk_mounted+0x342>
    2570:	82 fd       	sbrc	r24, 2
    2572:	60 c1       	rjmp	.+704    	; 0x2834 <chk_mounted+0x33c>
    2574:	62 c1       	rjmp	.+708    	; 0x283a <chk_mounted+0x342>
		}
	}

	/* The logical drive must be mounted. Following code attempts to mount the volume */

	fs->fs_type = 0;					/* Clear the file system object */
    2576:	18 82       	st	Y, r1
	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
    2578:	19 82       	std	Y+1, r1	; 0x01
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
    257a:	80 e0       	ldi	r24, 0x00	; 0
    257c:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
    2580:	80 ff       	sbrs	r24, 0
    2582:	03 c0       	rjmp	.+6      	; 0x258a <chk_mounted+0x92>
    2584:	23 e0       	ldi	r18, 0x03	; 3
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	5d c1       	rjmp	.+698    	; 0x2844 <chk_mounted+0x34c>
#if _MAX_SS != 512						/* Get disk sector size if needed */
	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    258a:	11 23       	and	r17, r17
    258c:	11 f0       	breq	.+4      	; 0x2592 <chk_mounted+0x9a>
    258e:	82 fd       	sbrc	r24, 2
    2590:	51 c1       	rjmp	.+674    	; 0x2834 <chk_mounted+0x33c>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
    2592:	ce 01       	movw	r24, r28
    2594:	40 e0       	ldi	r20, 0x00	; 0
    2596:	50 e0       	ldi	r21, 0x00	; 0
    2598:	60 e0       	ldi	r22, 0x00	; 0
    259a:	70 e0       	ldi	r23, 0x00	; 0
    259c:	0e 94 74 11 	call	0x22e8	; 0x22e8 <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
    25a0:	81 30       	cpi	r24, 0x01	; 1
    25a2:	21 f0       	breq	.+8      	; 0x25ac <chk_mounted+0xb4>
    25a4:	66 24       	eor	r6, r6
    25a6:	77 24       	eor	r7, r7
    25a8:	43 01       	movw	r8, r6
    25aa:	10 c0       	rjmp	.+32     	; 0x25cc <chk_mounted+0xd4>
		/* Check a partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
    25ac:	fe 01       	movw	r30, r28
    25ae:	e0 51       	subi	r30, 0x10	; 16
    25b0:	fe 4f       	sbci	r31, 0xFE	; 254
		if (tbl[4]) {									/* Is the partition existing? */
    25b2:	84 81       	ldd	r24, Z+4	; 0x04
    25b4:	88 23       	and	r24, r24
    25b6:	09 f4       	brne	.+2      	; 0x25ba <chk_mounted+0xc2>
    25b8:	43 c1       	rjmp	.+646    	; 0x2840 <chk_mounted+0x348>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
    25ba:	60 84       	ldd	r6, Z+8	; 0x08
    25bc:	71 84       	ldd	r7, Z+9	; 0x09
    25be:	82 84       	ldd	r8, Z+10	; 0x0a
    25c0:	93 84       	ldd	r9, Z+11	; 0x0b
			fmt = check_fs(fs, bsect);					/* Check the partition */
    25c2:	ce 01       	movw	r24, r28
    25c4:	b4 01       	movw	r22, r8
    25c6:	a3 01       	movw	r20, r6
    25c8:	0e 94 74 11 	call	0x22e8	; 0x22e8 <check_fs>
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    25cc:	83 30       	cpi	r24, 0x03	; 3
    25ce:	19 f4       	brne	.+6      	; 0x25d6 <chk_mounted+0xde>
    25d0:	21 e0       	ldi	r18, 0x01	; 1
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	37 c1       	rjmp	.+622    	; 0x2844 <chk_mounted+0x34c>
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
    25d6:	88 23       	and	r24, r24
    25d8:	09 f0       	breq	.+2      	; 0x25dc <chk_mounted+0xe4>
    25da:	32 c1       	rjmp	.+612    	; 0x2840 <chk_mounted+0x348>
    25dc:	8d ad       	ldd	r24, Y+61	; 0x3d
    25de:	9e ad       	ldd	r25, Y+62	; 0x3e
    25e0:	80 50       	subi	r24, 0x00	; 0
    25e2:	92 40       	sbci	r25, 0x02	; 2
    25e4:	09 f0       	breq	.+2      	; 0x25e8 <chk_mounted+0xf0>
    25e6:	2c c1       	rjmp	.+600    	; 0x2840 <chk_mounted+0x348>
		return FR_NO_FILESYSTEM;

	/* Initialize the file system object */
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    25e8:	c8 5b       	subi	r28, 0xB8	; 184
    25ea:	df 4f       	sbci	r29, 0xFF	; 255
    25ec:	88 81       	ld	r24, Y
    25ee:	99 81       	ldd	r25, Y+1	; 0x01
    25f0:	c8 54       	subi	r28, 0x48	; 72
    25f2:	d0 40       	sbci	r29, 0x00	; 0
    25f4:	bc 01       	movw	r22, r24
    25f6:	80 e0       	ldi	r24, 0x00	; 0
    25f8:	90 e0       	ldi	r25, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
    25fa:	61 15       	cp	r22, r1
    25fc:	71 05       	cpc	r23, r1
    25fe:	81 05       	cpc	r24, r1
    2600:	91 05       	cpc	r25, r1
    2602:	41 f4       	brne	.+16     	; 0x2614 <chk_mounted+0x11c>
    2604:	ca 5a       	subi	r28, 0xAA	; 170
    2606:	df 4f       	sbci	r29, 0xFF	; 255
    2608:	68 81       	ld	r22, Y
    260a:	79 81       	ldd	r23, Y+1	; 0x01
    260c:	8a 81       	ldd	r24, Y+2	; 0x02
    260e:	9b 81       	ldd	r25, Y+3	; 0x03
    2610:	c6 55       	subi	r28, 0x56	; 86
    2612:	d0 40       	sbci	r29, 0x00	; 0
	fs->sects_fat = fsize;
    2614:	6a 8f       	std	Y+26, r22	; 0x1a
    2616:	7b 8f       	std	Y+27, r23	; 0x1b
    2618:	8c 8f       	std	Y+28, r24	; 0x1c
    261a:	9d 8f       	std	Y+29, r25	; 0x1d
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
    261c:	ce 5b       	subi	r28, 0xBE	; 190
    261e:	df 4f       	sbci	r29, 0xFF	; 255
    2620:	28 81       	ld	r18, Y
    2622:	c2 54       	subi	r28, 0x42	; 66
    2624:	d0 40       	sbci	r29, 0x00	; 0
    2626:	2b 83       	std	Y+3, r18	; 0x03
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	40 e0       	ldi	r20, 0x00	; 0
    262c:	50 e0       	ldi	r21, 0x00	; 0
    262e:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <__mulsi3>
    2632:	5b 01       	movw	r10, r22
    2634:	6c 01       	movw	r12, r24
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
    2636:	fe 01       	movw	r30, r28
    2638:	e0 5c       	subi	r30, 0xC0	; 192
    263a:	ff 4f       	sbci	r31, 0xFF	; 255
    263c:	80 81       	ld	r24, Z
    263e:	91 81       	ldd	r25, Z+1	; 0x01
    2640:	a0 e0       	ldi	r26, 0x00	; 0
    2642:	b0 e0       	ldi	r27, 0x00	; 0
    2644:	86 0d       	add	r24, r6
    2646:	97 1d       	adc	r25, r7
    2648:	a8 1d       	adc	r26, r8
    264a:	b9 1d       	adc	r27, r9
    264c:	8a a3       	std	Y+34, r24	; 0x22
    264e:	9b a3       	std	Y+35, r25	; 0x23
    2650:	ac a3       	std	Y+36, r26	; 0x24
    2652:	bd a3       	std	Y+37, r27	; 0x25
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
    2654:	8f ad       	ldd	r24, Y+63	; 0x3f
    2656:	8a 83       	std	Y+2, r24	; 0x02
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
    2658:	cd 5b       	subi	r28, 0xBD	; 189
    265a:	df 4f       	sbci	r29, 0xFF	; 255
    265c:	28 81       	ld	r18, Y
    265e:	39 81       	ldd	r19, Y+1	; 0x01
    2660:	c3 54       	subi	r28, 0x43	; 67
    2662:	d0 40       	sbci	r29, 0x00	; 0
    2664:	39 87       	std	Y+9, r19	; 0x09
    2666:	28 87       	std	Y+8, r18	; 0x08
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    2668:	cb 5b       	subi	r28, 0xBB	; 187
    266a:	df 4f       	sbci	r29, 0xFF	; 255
    266c:	88 81       	ld	r24, Y
    266e:	99 81       	ldd	r25, Y+1	; 0x01
    2670:	c5 54       	subi	r28, 0x45	; 69
    2672:	d0 40       	sbci	r29, 0x00	; 0
    2674:	7c 01       	movw	r14, r24
    2676:	00 e0       	ldi	r16, 0x00	; 0
    2678:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    267a:	e1 14       	cp	r14, r1
    267c:	f1 04       	cpc	r15, r1
    267e:	01 05       	cpc	r16, r1
    2680:	11 05       	cpc	r17, r1
    2682:	41 f4       	brne	.+16     	; 0x2694 <chk_mounted+0x19c>
    2684:	ce 5a       	subi	r28, 0xAE	; 174
    2686:	df 4f       	sbci	r29, 0xFF	; 255
    2688:	e8 80       	ld	r14, Y
    268a:	f9 80       	ldd	r15, Y+1	; 0x01
    268c:	0a 81       	ldd	r16, Y+2	; 0x02
    268e:	1b 81       	ldd	r17, Y+3	; 0x03
    2690:	c2 55       	subi	r28, 0x52	; 82
    2692:	d0 40       	sbci	r29, 0x00	; 0
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
    2694:	80 81       	ld	r24, Z
    2696:	91 81       	ldd	r25, Z+1	; 0x01
    2698:	a0 e0       	ldi	r26, 0x00	; 0
    269a:	b0 e0       	ldi	r27, 0x00	; 0
    269c:	e8 1a       	sub	r14, r24
    269e:	f9 0a       	sbc	r15, r25
    26a0:	0a 0b       	sbc	r16, r26
    26a2:	1b 0b       	sbc	r17, r27
    26a4:	ea 18       	sub	r14, r10
    26a6:	fb 08       	sbc	r15, r11
    26a8:	0c 09       	sbc	r16, r12
    26aa:	1d 09       	sbc	r17, r13
    26ac:	44 e0       	ldi	r20, 0x04	; 4
    26ae:	36 95       	lsr	r19
    26b0:	27 95       	ror	r18
    26b2:	4a 95       	dec	r20
    26b4:	e1 f7       	brne	.-8      	; 0x26ae <chk_mounted+0x1b6>
    26b6:	c9 01       	movw	r24, r18
    26b8:	a0 e0       	ldi	r26, 0x00	; 0
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	e8 1a       	sub	r14, r24
    26be:	f9 0a       	sbc	r15, r25
    26c0:	0a 0b       	sbc	r16, r26
    26c2:	1b 0b       	sbc	r17, r27
    26c4:	2a 81       	ldd	r18, Y+2	; 0x02
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	40 e0       	ldi	r20, 0x00	; 0
    26ca:	50 e0       	ldi	r21, 0x00	; 0
    26cc:	c8 01       	movw	r24, r16
    26ce:	b7 01       	movw	r22, r14
    26d0:	0e 94 8d 2e 	call	0x5d1a	; 0x5d1a <__udivmodsi4>
    26d4:	2e 5f       	subi	r18, 0xFE	; 254
    26d6:	3f 4f       	sbci	r19, 0xFF	; 255
    26d8:	4f 4f       	sbci	r20, 0xFF	; 255
    26da:	5f 4f       	sbci	r21, 0xFF	; 255
    26dc:	2e 8f       	std	Y+30, r18	; 0x1e
    26de:	3f 8f       	std	Y+31, r19	; 0x1f
    26e0:	48 a3       	std	Y+32, r20	; 0x20
    26e2:	59 a3       	std	Y+33, r21	; 0x21
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
    26e4:	27 3f       	cpi	r18, 0xF7	; 247
    26e6:	8f e0       	ldi	r24, 0x0F	; 15
    26e8:	38 07       	cpc	r19, r24
    26ea:	80 e0       	ldi	r24, 0x00	; 0
    26ec:	48 07       	cpc	r20, r24
    26ee:	80 e0       	ldi	r24, 0x00	; 0
    26f0:	58 07       	cpc	r21, r24
    26f2:	10 f4       	brcc	.+4      	; 0x26f8 <chk_mounted+0x200>
    26f4:	11 e0       	ldi	r17, 0x01	; 1
    26f6:	07 c0       	rjmp	.+14     	; 0x2706 <chk_mounted+0x20e>
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
    26f8:	27 5f       	subi	r18, 0xF7	; 247
    26fa:	3f 4f       	sbci	r19, 0xFF	; 255
    26fc:	40 40       	sbci	r20, 0x00	; 0
    26fe:	50 40       	sbci	r21, 0x00	; 0
    2700:	08 f0       	brcs	.+2      	; 0x2704 <chk_mounted+0x20c>
    2702:	a6 c0       	rjmp	.+332    	; 0x2850 <chk_mounted+0x358>
    2704:	12 e0       	ldi	r17, 0x02	; 2

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    2706:	8a a1       	ldd	r24, Y+34	; 0x22
    2708:	9b a1       	ldd	r25, Y+35	; 0x23
    270a:	ac a1       	ldd	r26, Y+36	; 0x24
    270c:	bd a1       	ldd	r27, Y+37	; 0x25
    270e:	8a 0d       	add	r24, r10
    2710:	9b 1d       	adc	r25, r11
    2712:	ac 1d       	adc	r26, r12
    2714:	bd 1d       	adc	r27, r13
    2716:	8e a3       	std	Y+38, r24	; 0x26
    2718:	9f a3       	std	Y+39, r25	; 0x27
    271a:	a8 a7       	std	Y+40, r26	; 0x28
    271c:	b9 a7       	std	Y+41, r27	; 0x29
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
    271e:	88 85       	ldd	r24, Y+8	; 0x08
    2720:	99 85       	ldd	r25, Y+9	; 0x09
    2722:	34 e0       	ldi	r19, 0x04	; 4
    2724:	96 95       	lsr	r25
    2726:	87 95       	ror	r24
    2728:	3a 95       	dec	r19
    272a:	e1 f7       	brne	.-8      	; 0x2724 <chk_mounted+0x22c>
    272c:	a0 e0       	ldi	r26, 0x00	; 0
    272e:	b0 e0       	ldi	r27, 0x00	; 0
    2730:	2a a1       	ldd	r18, Y+34	; 0x22
    2732:	3b a1       	ldd	r19, Y+35	; 0x23
    2734:	4c a1       	ldd	r20, Y+36	; 0x24
    2736:	5d a1       	ldd	r21, Y+37	; 0x25
    2738:	82 0f       	add	r24, r18
    273a:	93 1f       	adc	r25, r19
    273c:	a4 1f       	adc	r26, r20
    273e:	b5 1f       	adc	r27, r21
    2740:	8a 0d       	add	r24, r10
    2742:	9b 1d       	adc	r25, r11
    2744:	ac 1d       	adc	r26, r12
    2746:	bd 1d       	adc	r27, r13
    2748:	8a a7       	std	Y+42, r24	; 0x2a
    274a:	9b a7       	std	Y+43, r25	; 0x2b
    274c:	ac a7       	std	Y+44, r26	; 0x2c
    274e:	bd a7       	std	Y+45, r27	; 0x2d

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
    2750:	8f ef       	ldi	r24, 0xFF	; 255
    2752:	9f ef       	ldi	r25, 0xFF	; 255
    2754:	af ef       	ldi	r26, 0xFF	; 255
    2756:	bf ef       	ldi	r27, 0xFF	; 255
    2758:	8e 87       	std	Y+14, r24	; 0x0e
    275a:	9f 87       	std	Y+15, r25	; 0x0f
    275c:	a8 8b       	std	Y+16, r26	; 0x10
    275e:	b9 8b       	std	Y+17, r27	; 0x11
	fs->wflag = 0;
    2760:	1c 82       	std	Y+4, r1	; 0x04
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
    2762:	13 30       	cpi	r17, 0x03	; 3
    2764:	09 f0       	breq	.+2      	; 0x2768 <chk_mounted+0x270>
    2766:	51 c0       	rjmp	.+162    	; 0x280a <chk_mounted+0x312>
	 	fs->fsi_flag = 0;
    2768:	1d 82       	std	Y+5, r1	; 0x05
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    276a:	ce 59       	subi	r28, 0x9E	; 158
    276c:	df 4f       	sbci	r29, 0xFF	; 255
    276e:	28 81       	ld	r18, Y
    2770:	39 81       	ldd	r19, Y+1	; 0x01
    2772:	c2 56       	subi	r28, 0x62	; 98
    2774:	d0 40       	sbci	r29, 0x00	; 0
    2776:	40 e0       	ldi	r20, 0x00	; 0
    2778:	50 e0       	ldi	r21, 0x00	; 0
    277a:	26 0d       	add	r18, r6
    277c:	37 1d       	adc	r19, r7
    277e:	48 1d       	adc	r20, r8
    2780:	59 1d       	adc	r21, r9
    2782:	2a 8b       	std	Y+18, r18	; 0x12
    2784:	3b 8b       	std	Y+19, r19	; 0x13
    2786:	4c 8b       	std	Y+20, r20	; 0x14
    2788:	5d 8b       	std	Y+21, r21	; 0x15
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
    278a:	be 01       	movw	r22, r28
    278c:	6e 5c       	subi	r22, 0xCE	; 206
    278e:	7f 4f       	sbci	r23, 0xFF	; 255
    2790:	89 81       	ldd	r24, Y+1	; 0x01
    2792:	01 e0       	ldi	r16, 0x01	; 1
    2794:	0e 94 b4 18 	call	0x3168	; 0x3168 <disk_read>
    2798:	89 2b       	or	r24, r25
    279a:	b9 f5       	brne	.+110    	; 0x280a <chk_mounted+0x312>
    279c:	c0 5d       	subi	r28, 0xD0	; 208
    279e:	dd 4f       	sbci	r29, 0xFD	; 253
    27a0:	88 81       	ld	r24, Y
    27a2:	99 81       	ldd	r25, Y+1	; 0x01
    27a4:	c0 53       	subi	r28, 0x30	; 48
    27a6:	d2 40       	sbci	r29, 0x02	; 2
    27a8:	85 55       	subi	r24, 0x55	; 85
    27aa:	9a 4a       	sbci	r25, 0xAA	; 170
    27ac:	71 f5       	brne	.+92     	; 0x280a <chk_mounted+0x312>
    27ae:	8a a9       	ldd	r24, Y+50	; 0x32
    27b0:	9b a9       	ldd	r25, Y+51	; 0x33
    27b2:	ac a9       	ldd	r26, Y+52	; 0x34
    27b4:	bd a9       	ldd	r27, Y+53	; 0x35
    27b6:	82 55       	subi	r24, 0x52	; 82
    27b8:	92 45       	sbci	r25, 0x52	; 82
    27ba:	a1 46       	sbci	r26, 0x61	; 97
    27bc:	b1 44       	sbci	r27, 0x41	; 65
    27be:	29 f5       	brne	.+74     	; 0x280a <chk_mounted+0x312>
    27c0:	ca 5e       	subi	r28, 0xEA	; 234
    27c2:	dd 4f       	sbci	r29, 0xFD	; 253
    27c4:	88 81       	ld	r24, Y
    27c6:	99 81       	ldd	r25, Y+1	; 0x01
    27c8:	aa 81       	ldd	r26, Y+2	; 0x02
    27ca:	bb 81       	ldd	r27, Y+3	; 0x03
    27cc:	c6 51       	subi	r28, 0x16	; 22
    27ce:	d2 40       	sbci	r29, 0x02	; 2
    27d0:	82 57       	subi	r24, 0x72	; 114
    27d2:	92 47       	sbci	r25, 0x72	; 114
    27d4:	a1 44       	sbci	r26, 0x41	; 65
    27d6:	b1 46       	sbci	r27, 0x61	; 97
    27d8:	c1 f4       	brne	.+48     	; 0x280a <chk_mounted+0x312>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    27da:	c2 5e       	subi	r28, 0xE2	; 226
    27dc:	dd 4f       	sbci	r29, 0xFD	; 253
    27de:	88 81       	ld	r24, Y
    27e0:	99 81       	ldd	r25, Y+1	; 0x01
    27e2:	aa 81       	ldd	r26, Y+2	; 0x02
    27e4:	bb 81       	ldd	r27, Y+3	; 0x03
    27e6:	ce 51       	subi	r28, 0x1E	; 30
    27e8:	d2 40       	sbci	r29, 0x02	; 2
    27ea:	8a 87       	std	Y+10, r24	; 0x0a
    27ec:	9b 87       	std	Y+11, r25	; 0x0b
    27ee:	ac 87       	std	Y+12, r26	; 0x0c
    27f0:	bd 87       	std	Y+13, r27	; 0x0d
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    27f2:	c6 5e       	subi	r28, 0xE6	; 230
    27f4:	dd 4f       	sbci	r29, 0xFD	; 253
    27f6:	88 81       	ld	r24, Y
    27f8:	99 81       	ldd	r25, Y+1	; 0x01
    27fa:	aa 81       	ldd	r26, Y+2	; 0x02
    27fc:	bb 81       	ldd	r27, Y+3	; 0x03
    27fe:	ca 51       	subi	r28, 0x1A	; 26
    2800:	d2 40       	sbci	r29, 0x02	; 2
    2802:	8e 87       	std	Y+14, r24	; 0x0e
    2804:	9f 87       	std	Y+15, r25	; 0x0f
    2806:	a8 8b       	std	Y+16, r26	; 0x10
    2808:	b9 8b       	std	Y+17, r27	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    280a:	18 83       	st	Y, r17
	fs->winsect = 0;		/* Invalidate sector cache */
    280c:	1e a6       	std	Y+46, r1	; 0x2e
    280e:	1f a6       	std	Y+47, r1	; 0x2f
    2810:	18 aa       	std	Y+48, r1	; 0x30
    2812:	19 aa       	std	Y+49, r1	; 0x31
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
    2814:	1e 8a       	std	Y+22, r1	; 0x16
    2816:	1f 8a       	std	Y+23, r1	; 0x17
    2818:	18 8e       	std	Y+24, r1	; 0x18
    281a:	19 8e       	std	Y+25, r1	; 0x19
#endif
	fs->id = ++Fsid;		/* File system mount ID */
    281c:	80 91 bc 02 	lds	r24, 0x02BC
    2820:	90 91 bd 02 	lds	r25, 0x02BD
    2824:	01 96       	adiw	r24, 0x01	; 1
    2826:	90 93 bd 02 	sts	0x02BD, r25
    282a:	80 93 bc 02 	sts	0x02BC, r24
    282e:	9f 83       	std	Y+7, r25	; 0x07
    2830:	8e 83       	std	Y+6, r24	; 0x06
    2832:	03 c0       	rjmp	.+6      	; 0x283a <chk_mounted+0x342>

	return FR_OK;
    2834:	2a e0       	ldi	r18, 0x0A	; 10
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	05 c0       	rjmp	.+10     	; 0x2844 <chk_mounted+0x34c>
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	02 c0       	rjmp	.+4      	; 0x2844 <chk_mounted+0x34c>
    2840:	2d e0       	ldi	r18, 0x0D	; 13
    2842:	30 e0       	ldi	r19, 0x00	; 0
}
    2844:	c9 01       	movw	r24, r18
    2846:	cd b7       	in	r28, 0x3d	; 61
    2848:	de b7       	in	r29, 0x3e	; 62
    284a:	ee e0       	ldi	r30, 0x0E	; 14
    284c:	0c 94 cf 2e 	jmp	0x5d9e	; 0x5d9e <__epilogue_restores__+0x8>
	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    2850:	c2 5a       	subi	r28, 0xA2	; 162
    2852:	df 4f       	sbci	r29, 0xFF	; 255
    2854:	88 81       	ld	r24, Y
    2856:	99 81       	ldd	r25, Y+1	; 0x01
    2858:	aa 81       	ldd	r26, Y+2	; 0x02
    285a:	bb 81       	ldd	r27, Y+3	; 0x03
    285c:	ce 55       	subi	r28, 0x5E	; 94
    285e:	d0 40       	sbci	r29, 0x00	; 0
    2860:	8e a3       	std	Y+38, r24	; 0x26
    2862:	9f a3       	std	Y+39, r25	; 0x27
    2864:	a8 a7       	std	Y+40, r26	; 0x28
    2866:	b9 a7       	std	Y+41, r27	; 0x29
    2868:	13 e0       	ldi	r17, 0x03	; 3
    286a:	59 cf       	rjmp	.-334    	; 0x271e <chk_mounted+0x226>

0000286c <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const XCHAR *path	/* Pointer to the directory path */
)
{
    286c:	ae e0       	ldi	r26, 0x0E	; 14
    286e:	b0 e0       	ldi	r27, 0x00	; 0
    2870:	ec e3       	ldi	r30, 0x3C	; 60
    2872:	f4 e1       	ldi	r31, 0x14	; 20
    2874:	0c 94 bd 2e 	jmp	0x5d7a	; 0x5d7a <__prologue_saves__+0x1c>
    2878:	8c 01       	movw	r16, r24
    287a:	7e 87       	std	Y+14, r23	; 0x0e
    287c:	6d 87       	std	Y+13, r22	; 0x0d
	FRESULT res;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj->fs, 0);
    287e:	ce 01       	movw	r24, r28
    2880:	0d 96       	adiw	r24, 0x0d	; 13
    2882:	b8 01       	movw	r22, r16
    2884:	40 e0       	ldi	r20, 0x00	; 0
    2886:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <chk_mounted>
    288a:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    288c:	00 97       	sbiw	r24, 0x00	; 0
    288e:	09 f0       	breq	.+2      	; 0x2892 <f_opendir+0x26>
    2890:	42 c0       	rjmp	.+132    	; 0x2916 <f_opendir+0xaa>
		INITBUF((*dj), sfn, lfn);
    2892:	ce 01       	movw	r24, r28
    2894:	01 96       	adiw	r24, 0x01	; 1
    2896:	d8 01       	movw	r26, r16
    2898:	55 96       	adiw	r26, 0x15	; 21
    289a:	9c 93       	st	X, r25
    289c:	8e 93       	st	-X, r24
    289e:	54 97       	sbiw	r26, 0x14	; 20
		res = follow_path(dj, path);			/* Follow the path to the directory */
    28a0:	6d 85       	ldd	r22, Y+13	; 0x0d
    28a2:	7e 85       	ldd	r23, Y+14	; 0x0e
    28a4:	c8 01       	movw	r24, r16
    28a6:	0e 94 31 0c 	call	0x1862	; 0x1862 <follow_path>
    28aa:	9c 01       	movw	r18, r24
		if (res == FR_OK) {						/* Follow completed */
    28ac:	00 97       	sbiw	r24, 0x00	; 0
    28ae:	71 f5       	brne	.+92     	; 0x290c <f_opendir+0xa0>
			dir = dj->dir;
    28b0:	d8 01       	movw	r26, r16
    28b2:	52 96       	adiw	r26, 0x12	; 18
    28b4:	ed 91       	ld	r30, X+
    28b6:	fc 91       	ld	r31, X
    28b8:	53 97       	sbiw	r26, 0x13	; 19
			if (dir) {							/* It is not the root dir */
    28ba:	30 97       	sbiw	r30, 0x00	; 0
    28bc:	b9 f0       	breq	.+46     	; 0x28ec <f_opendir+0x80>
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    28be:	83 85       	ldd	r24, Z+11	; 0x0b
    28c0:	84 ff       	sbrs	r24, 4
    28c2:	27 c0       	rjmp	.+78     	; 0x2912 <f_opendir+0xa6>
					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    28c4:	84 89       	ldd	r24, Z+20	; 0x14
    28c6:	95 89       	ldd	r25, Z+21	; 0x15
    28c8:	a0 e0       	ldi	r26, 0x00	; 0
    28ca:	b0 e0       	ldi	r27, 0x00	; 0
    28cc:	dc 01       	movw	r26, r24
    28ce:	99 27       	eor	r25, r25
    28d0:	88 27       	eor	r24, r24
    28d2:	22 8d       	ldd	r18, Z+26	; 0x1a
    28d4:	33 8d       	ldd	r19, Z+27	; 0x1b
    28d6:	40 e0       	ldi	r20, 0x00	; 0
    28d8:	50 e0       	ldi	r21, 0x00	; 0
    28da:	82 2b       	or	r24, r18
    28dc:	93 2b       	or	r25, r19
    28de:	a4 2b       	or	r26, r20
    28e0:	b5 2b       	or	r27, r21
    28e2:	f8 01       	movw	r30, r16
    28e4:	86 83       	std	Z+6, r24	; 0x06
    28e6:	97 83       	std	Z+7, r25	; 0x07
    28e8:	a0 87       	std	Z+8, r26	; 0x08
    28ea:	b1 87       	std	Z+9, r27	; 0x09
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
    28ec:	d8 01       	movw	r26, r16
    28ee:	ed 91       	ld	r30, X+
    28f0:	fc 91       	ld	r31, X
    28f2:	11 97       	sbiw	r26, 0x01	; 1
    28f4:	86 81       	ldd	r24, Z+6	; 0x06
    28f6:	97 81       	ldd	r25, Z+7	; 0x07
    28f8:	13 96       	adiw	r26, 0x03	; 3
    28fa:	9c 93       	st	X, r25
    28fc:	8e 93       	st	-X, r24
    28fe:	12 97       	sbiw	r26, 0x02	; 2
				res = dir_seek(dj, 0);			/* Rewind dir */
    2900:	c8 01       	movw	r24, r16
    2902:	60 e0       	ldi	r22, 0x00	; 0
    2904:	70 e0       	ldi	r23, 0x00	; 0
    2906:	0e 94 48 06 	call	0xc90	; 0xc90 <dir_seek>
    290a:	9c 01       	movw	r18, r24
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    290c:	24 30       	cpi	r18, 0x04	; 4
    290e:	31 05       	cpc	r19, r1
    2910:	11 f4       	brne	.+4      	; 0x2916 <f_opendir+0xaa>
    2912:	25 e0       	ldi	r18, 0x05	; 5
    2914:	30 e0       	ldi	r19, 0x00	; 0
	}

	LEAVE_FF(dj->fs, res);
}
    2916:	c9 01       	movw	r24, r18
    2918:	2e 96       	adiw	r28, 0x0e	; 14
    291a:	e4 e0       	ldi	r30, 0x04	; 4
    291c:	0c 94 d9 2e 	jmp	0x5db2	; 0x5db2 <__epilogue_restores__+0x1c>

00002920 <f_chdir>:


FRESULT f_chdir (
	const XCHAR *path	/* Pointer to the directory path */
)
{
    2920:	a4 e2       	ldi	r26, 0x24	; 36
    2922:	b0 e0       	ldi	r27, 0x00	; 0
    2924:	e6 e9       	ldi	r30, 0x96	; 150
    2926:	f4 e1       	ldi	r31, 0x14	; 20
    2928:	0c 94 bd 2e 	jmp	0x5d7a	; 0x5d7a <__prologue_saves__+0x1c>
    292c:	9c a3       	std	Y+36, r25	; 0x24
    292e:	8b a3       	std	Y+35, r24	; 0x23
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj.fs, 0);
    2930:	8e 01       	movw	r16, r28
    2932:	03 5f       	subi	r16, 0xF3	; 243
    2934:	1f 4f       	sbci	r17, 0xFF	; 255
    2936:	ce 01       	movw	r24, r28
    2938:	83 96       	adiw	r24, 0x23	; 35
    293a:	b8 01       	movw	r22, r16
    293c:	40 e0       	ldi	r20, 0x00	; 0
    293e:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <chk_mounted>
    2942:	bc 01       	movw	r22, r24
	if (res == FR_OK) {
    2944:	00 97       	sbiw	r24, 0x00	; 0
    2946:	e9 f5       	brne	.+122    	; 0x29c2 <f_chdir+0xa2>
		INITBUF(dj, sfn, lfn);
    2948:	ce 01       	movw	r24, r28
    294a:	01 96       	adiw	r24, 0x01	; 1
    294c:	9a a3       	std	Y+34, r25	; 0x22
    294e:	89 a3       	std	Y+33, r24	; 0x21
		res = follow_path(&dj, path);		/* Follow the file path */
    2950:	6b a1       	ldd	r22, Y+35	; 0x23
    2952:	7c a1       	ldd	r23, Y+36	; 0x24
    2954:	c8 01       	movw	r24, r16
    2956:	0e 94 31 0c 	call	0x1862	; 0x1862 <follow_path>
    295a:	bc 01       	movw	r22, r24
		if (res == FR_OK) {					/* Follow completed */
    295c:	00 97       	sbiw	r24, 0x00	; 0
    295e:	61 f5       	brne	.+88     	; 0x29b8 <f_chdir+0x98>
			dir = dj.dir;					/* Pointer to the entry */
    2960:	2f 8d       	ldd	r18, Y+31	; 0x1f
    2962:	38 a1       	ldd	r19, Y+32	; 0x20
			if (!dir) {
    2964:	21 15       	cp	r18, r1
    2966:	31 05       	cpc	r19, r1
    2968:	39 f4       	brne	.+14     	; 0x2978 <f_chdir+0x58>
				dj.fs->cdir = 0;			/* No entry (root dir) */
    296a:	ed 85       	ldd	r30, Y+13	; 0x0d
    296c:	fe 85       	ldd	r31, Y+14	; 0x0e
    296e:	16 8a       	std	Z+22, r1	; 0x16
    2970:	17 8a       	std	Z+23, r1	; 0x17
    2972:	10 8e       	std	Z+24, r1	; 0x18
    2974:	11 8e       	std	Z+25, r1	; 0x19
    2976:	25 c0       	rjmp	.+74     	; 0x29c2 <f_chdir+0xa2>
			} else {
				if (dir[DIR_Attr] & AM_DIR)	/* Reached to the dir */
    2978:	d9 01       	movw	r26, r18
    297a:	1b 96       	adiw	r26, 0x0b	; 11
    297c:	8c 91       	ld	r24, X
    297e:	1b 97       	sbiw	r26, 0x0b	; 11
    2980:	84 ff       	sbrs	r24, 4
    2982:	1d c0       	rjmp	.+58     	; 0x29be <f_chdir+0x9e>
					dj.fs->cdir = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    2984:	0d 85       	ldd	r16, Y+13	; 0x0d
    2986:	1e 85       	ldd	r17, Y+14	; 0x0e
    2988:	54 96       	adiw	r26, 0x14	; 20
    298a:	8d 91       	ld	r24, X+
    298c:	9c 91       	ld	r25, X
    298e:	55 97       	sbiw	r26, 0x15	; 21
    2990:	a0 e0       	ldi	r26, 0x00	; 0
    2992:	b0 e0       	ldi	r27, 0x00	; 0
    2994:	dc 01       	movw	r26, r24
    2996:	99 27       	eor	r25, r25
    2998:	88 27       	eor	r24, r24
    299a:	f9 01       	movw	r30, r18
    299c:	22 8d       	ldd	r18, Z+26	; 0x1a
    299e:	33 8d       	ldd	r19, Z+27	; 0x1b
    29a0:	40 e0       	ldi	r20, 0x00	; 0
    29a2:	50 e0       	ldi	r21, 0x00	; 0
    29a4:	82 2b       	or	r24, r18
    29a6:	93 2b       	or	r25, r19
    29a8:	a4 2b       	or	r26, r20
    29aa:	b5 2b       	or	r27, r21
    29ac:	f8 01       	movw	r30, r16
    29ae:	86 8b       	std	Z+22, r24	; 0x16
    29b0:	97 8b       	std	Z+23, r25	; 0x17
    29b2:	a0 8f       	std	Z+24, r26	; 0x18
    29b4:	b1 8f       	std	Z+25, r27	; 0x19
    29b6:	05 c0       	rjmp	.+10     	; 0x29c2 <f_chdir+0xa2>
				else
					res = FR_NO_PATH;		/* Could not reach the dir (it is a file) */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    29b8:	84 30       	cpi	r24, 0x04	; 4
    29ba:	91 05       	cpc	r25, r1
    29bc:	11 f4       	brne	.+4      	; 0x29c2 <f_chdir+0xa2>
    29be:	65 e0       	ldi	r22, 0x05	; 5
    29c0:	70 e0       	ldi	r23, 0x00	; 0
	}

	LEAVE_FF(dj.fs, res);
}
    29c2:	cb 01       	movw	r24, r22
    29c4:	a4 96       	adiw	r28, 0x24	; 36
    29c6:	e4 e0       	ldi	r30, 0x04	; 4
    29c8:	0c 94 d9 2e 	jmp	0x5db2	; 0x5db2 <__epilogue_restores__+0x1c>

000029cc <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const XCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    29cc:	ad e2       	ldi	r26, 0x2D	; 45
    29ce:	b0 e0       	ldi	r27, 0x00	; 0
    29d0:	ec ee       	ldi	r30, 0xEC	; 236
    29d2:	f4 e1       	ldi	r31, 0x14	; 20
    29d4:	0c 94 af 2e 	jmp	0x5d5e	; 0x5d5e <__prologue_saves__>
    29d8:	9d a7       	std	Y+45, r25	; 0x2d
    29da:	8c a7       	std	Y+44, r24	; 0x2c
    29dc:	7c a3       	std	Y+36, r23	; 0x24
    29de:	6b a3       	std	Y+35, r22	; 0x23
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	fp->fs = NULL;		/* Clear file object */
    29e0:	dc 01       	movw	r26, r24
    29e2:	1d 92       	st	X+, r1
    29e4:	1c 92       	st	X, r1
#if !_FS_READONLY
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
    29e6:	b4 2f       	mov	r27, r20
    29e8:	bf 71       	andi	r27, 0x1F	; 31
    29ea:	bd a3       	std	Y+37, r27	; 0x25
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
    29ec:	8e 01       	movw	r16, r28
    29ee:	03 5f       	subi	r16, 0xF3	; 243
    29f0:	1f 4f       	sbci	r17, 0xFF	; 255
    29f2:	4e 71       	andi	r20, 0x1E	; 30
    29f4:	ce 01       	movw	r24, r28
    29f6:	83 96       	adiw	r24, 0x23	; 35
    29f8:	b8 01       	movw	r22, r16
    29fa:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <chk_mounted>
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    29fe:	00 97       	sbiw	r24, 0x00	; 0
    2a00:	11 f0       	breq	.+4      	; 0x2a06 <f_open+0x3a>
    2a02:	9c 01       	movw	r18, r24
    2a04:	a8 c1       	rjmp	.+848    	; 0x2d56 <f_open+0x38a>
	INITBUF(dj, sfn, lfn);
    2a06:	ce 01       	movw	r24, r28
    2a08:	01 96       	adiw	r24, 0x01	; 1
    2a0a:	9a a3       	std	Y+34, r25	; 0x22
    2a0c:	89 a3       	std	Y+33, r24	; 0x21
	res = follow_path(&dj, path);	/* Follow the file path */
    2a0e:	6b a1       	ldd	r22, Y+35	; 0x23
    2a10:	7c a1       	ldd	r23, Y+36	; 0x24
    2a12:	c8 01       	movw	r24, r16
    2a14:	0e 94 31 0c 	call	0x1862	; 0x1862 <follow_path>
    2a18:	9c 01       	movw	r18, r24

#if !_FS_READONLY
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    2a1a:	ed a1       	ldd	r30, Y+37	; 0x25
    2a1c:	4e 2f       	mov	r20, r30
    2a1e:	50 e0       	ldi	r21, 0x00	; 0
    2a20:	ca 01       	movw	r24, r20
    2a22:	8c 71       	andi	r24, 0x1C	; 28
    2a24:	90 70       	andi	r25, 0x00	; 0
    2a26:	89 2b       	or	r24, r25
    2a28:	09 f4       	brne	.+2      	; 0x2a2c <f_open+0x60>
    2a2a:	25 c1       	rjmp	.+586    	; 0x2c76 <f_open+0x2aa>
		DWORD ps, cl;

		if (res != FR_OK) {			/* No file, create new */
    2a2c:	21 15       	cp	r18, r1
    2a2e:	31 05       	cpc	r19, r1
    2a30:	09 f4       	brne	.+2      	; 0x2a34 <f_open+0x68>
    2a32:	57 c0       	rjmp	.+174    	; 0x2ae2 <f_open+0x116>
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
    2a34:	24 30       	cpi	r18, 0x04	; 4
    2a36:	31 05       	cpc	r19, r1
    2a38:	09 f0       	breq	.+2      	; 0x2a3c <f_open+0x70>
    2a3a:	8d c1       	rjmp	.+794    	; 0x2d56 <f_open+0x38a>
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_seek(dj, 0);
    2a3c:	c8 01       	movw	r24, r16
    2a3e:	60 e0       	ldi	r22, 0x00	; 0
    2a40:	70 e0       	ldi	r23, 0x00	; 0
    2a42:	0e 94 48 06 	call	0xc90	; 0xc90 <dir_seek>
    2a46:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    2a48:	00 97       	sbiw	r24, 0x00	; 0
    2a4a:	09 f0       	breq	.+2      	; 0x2a4e <f_open+0x82>
    2a4c:	84 c1       	rjmp	.+776    	; 0x2d56 <f_open+0x38a>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    2a4e:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2a50:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2a52:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2a54:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2a56:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a58:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a5a:	0e 94 5e 04 	call	0x8bc	; 0x8bc <move_window>
    2a5e:	9c 01       	movw	r18, r24
			if (res != FR_OK) break;
    2a60:	00 97       	sbiw	r24, 0x00	; 0
    2a62:	09 f0       	breq	.+2      	; 0x2a66 <f_open+0x9a>
    2a64:	78 c1       	rjmp	.+752    	; 0x2d56 <f_open+0x38a>
			c = *dj->dir;
    2a66:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2a68:	f8 a1       	ldd	r31, Y+32	; 0x20
    2a6a:	e0 81       	ld	r30, Z
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
    2a6c:	e5 3e       	cpi	r30, 0xE5	; 229
    2a6e:	09 f4       	brne	.+2      	; 0x2a72 <f_open+0xa6>
    2a70:	89 c1       	rjmp	.+786    	; 0x2d84 <f_open+0x3b8>
    2a72:	ee 23       	and	r30, r30
    2a74:	09 f4       	brne	.+2      	; 0x2a78 <f_open+0xac>
    2a76:	86 c1       	rjmp	.+780    	; 0x2d84 <f_open+0x3b8>
			res = dir_next(dj, TRUE);		/* Next entry with table streach */
    2a78:	c8 01       	movw	r24, r16
    2a7a:	61 e0       	ldi	r22, 0x01	; 1
    2a7c:	70 e0       	ldi	r23, 0x00	; 0
    2a7e:	0e 94 ef 09 	call	0x13de	; 0x13de <dir_next>
    2a82:	9c 01       	movw	r18, r24
		} while (res == FR_OK);
    2a84:	00 97       	sbiw	r24, 0x00	; 0
    2a86:	19 f3       	breq	.-58     	; 0x2a4e <f_open+0x82>
    2a88:	66 c1       	rjmp	.+716    	; 0x2d56 <f_open+0x38a>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    2a8a:	af 8d       	ldd	r26, Y+31	; 0x1f
    2a8c:	b8 a1       	ldd	r27, Y+32	; 0x20
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    2a8e:	ad 01       	movw	r20, r26
    2a90:	fd 01       	movw	r30, r26
	while (cnt--) *d++ = (char)val;
    2a92:	cd 01       	movw	r24, r26
    2a94:	80 96       	adiw	r24, 0x20	; 32
    2a96:	01 c0       	rjmp	.+2      	; 0x2a9a <f_open+0xce>
    2a98:	11 92       	st	Z+, r1
    2a9a:	e8 17       	cp	r30, r24
    2a9c:	f9 07       	cpc	r31, r25
    2a9e:	e1 f7       	brne	.-8      	; 0x2a98 <f_open+0xcc>

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    2aa0:	69 a1       	ldd	r22, Y+33	; 0x21
    2aa2:	7a a1       	ldd	r23, Y+34	; 0x22
	while (cnt--) *d++ = *s++;
    2aa4:	9b 01       	movw	r18, r22
    2aa6:	25 5f       	subi	r18, 0xF5	; 245
    2aa8:	3f 4f       	sbci	r19, 0xFF	; 255
    2aaa:	06 c0       	rjmp	.+12     	; 0x2ab8 <f_open+0xec>
    2aac:	fb 01       	movw	r30, r22
    2aae:	81 91       	ld	r24, Z+
    2ab0:	bf 01       	movw	r22, r30
    2ab2:	fa 01       	movw	r30, r20
    2ab4:	81 93       	st	Z+, r24
    2ab6:	af 01       	movw	r20, r30
    2ab8:	62 17       	cp	r22, r18
    2aba:	73 07       	cpc	r23, r19
    2abc:	b9 f7       	brne	.-18     	; 0x2aac <f_open+0xe0>
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    2abe:	e9 a1       	ldd	r30, Y+33	; 0x21
    2ac0:	fa a1       	ldd	r31, Y+34	; 0x22
    2ac2:	83 85       	ldd	r24, Z+11	; 0x0b
    2ac4:	88 71       	andi	r24, 0x18	; 24
    2ac6:	1c 96       	adiw	r26, 0x0c	; 12
    2ac8:	8c 93       	st	X, r24
			dj->fs->wflag = 1;
    2aca:	ed 85       	ldd	r30, Y+13	; 0x0d
    2acc:	fe 85       	ldd	r31, Y+14	; 0x0e
    2ace:	81 e0       	ldi	r24, 0x01	; 1
    2ad0:	84 83       	std	Z+4, r24	; 0x04

		if (res != FR_OK) {			/* No file, create new */
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
				res = dir_register(&dj);
			if (res != FR_OK) LEAVE_FF(dj.fs, res);
			mode |= FA_CREATE_ALWAYS;
    2ad2:	fd a1       	ldd	r31, Y+37	; 0x25
    2ad4:	f8 60       	ori	r31, 0x08	; 8
    2ad6:	fd a3       	std	Y+37, r31	; 0x25
			dir = dj.dir;			/* Created entry (SFN entry) */
    2ad8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ada:	98 a1       	ldd	r25, Y+32	; 0x20
    2adc:	9b a7       	std	Y+43, r25	; 0x2b
    2ade:	8a a7       	std	Y+42, r24	; 0x2a
    2ae0:	b3 c0       	rjmp	.+358    	; 0x2c48 <f_open+0x27c>
		}
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
    2ae2:	e2 ff       	sbrs	r30, 2
    2ae4:	03 c0       	rjmp	.+6      	; 0x2aec <f_open+0x120>
    2ae6:	28 e0       	ldi	r18, 0x08	; 8
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	35 c1       	rjmp	.+618    	; 0x2d56 <f_open+0x38a>
				LEAVE_FF(dj.fs, FR_EXIST);
			dir = dj.dir;
    2aec:	af 8d       	ldd	r26, Y+31	; 0x1f
    2aee:	b8 a1       	ldd	r27, Y+32	; 0x20
    2af0:	bb a7       	std	Y+43, r27	; 0x2b
    2af2:	aa a7       	std	Y+42, r26	; 0x2a
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
    2af4:	10 97       	sbiw	r26, 0x00	; 0
    2af6:	09 f4       	brne	.+2      	; 0x2afa <f_open+0x12e>
    2af8:	29 c1       	rjmp	.+594    	; 0x2d4c <f_open+0x380>
    2afa:	1b 96       	adiw	r26, 0x0b	; 11
    2afc:	8c 91       	ld	r24, X
    2afe:	1b 97       	sbiw	r26, 0x0b	; 11
    2b00:	81 71       	andi	r24, 0x11	; 17
    2b02:	09 f0       	breq	.+2      	; 0x2b06 <f_open+0x13a>
    2b04:	23 c1       	rjmp	.+582    	; 0x2d4c <f_open+0x380>
				LEAVE_FF(dj.fs, FR_DENIED);
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
    2b06:	e3 ff       	sbrs	r30, 3
    2b08:	9f c0       	rjmp	.+318    	; 0x2c48 <f_open+0x27c>
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
    2b0a:	54 96       	adiw	r26, 0x14	; 20
    2b0c:	8d 91       	ld	r24, X+
    2b0e:	9c 91       	ld	r25, X
    2b10:	55 97       	sbiw	r26, 0x15	; 21
    2b12:	a0 e0       	ldi	r26, 0x00	; 0
    2b14:	b0 e0       	ldi	r27, 0x00	; 0
    2b16:	7c 01       	movw	r14, r24
    2b18:	dd 24       	eor	r13, r13
    2b1a:	cc 24       	eor	r12, r12
    2b1c:	ea a5       	ldd	r30, Y+42	; 0x2a
    2b1e:	fb a5       	ldd	r31, Y+43	; 0x2b
    2b20:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b22:	93 8d       	ldd	r25, Z+27	; 0x1b
    2b24:	a0 e0       	ldi	r26, 0x00	; 0
    2b26:	b0 e0       	ldi	r27, 0x00	; 0
    2b28:	c8 2a       	or	r12, r24
    2b2a:	d9 2a       	or	r13, r25
    2b2c:	ea 2a       	or	r14, r26
    2b2e:	fb 2a       	or	r15, r27
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
    2b30:	15 8a       	std	Z+21, r1	; 0x15
    2b32:	14 8a       	std	Z+20, r1	; 0x14
				ST_WORD(dir+DIR_FstClusLO, 0);
    2b34:	13 8e       	std	Z+27, r1	; 0x1b
    2b36:	12 8e       	std	Z+26, r1	; 0x1a
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
    2b38:	14 8e       	std	Z+28, r1	; 0x1c
    2b3a:	15 8e       	std	Z+29, r1	; 0x1d
    2b3c:	16 8e       	std	Z+30, r1	; 0x1e
    2b3e:	17 8e       	std	Z+31, r1	; 0x1f
				dj.fs->wflag = 1;
    2b40:	2d 84       	ldd	r2, Y+13	; 0x0d
    2b42:	3e 84       	ldd	r3, Y+14	; 0x0e
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	f1 01       	movw	r30, r2
    2b48:	84 83       	std	Z+4, r24	; 0x04
				ps = dj.fs->winsect;			/* Remove the cluster chain */
    2b4a:	d1 01       	movw	r26, r2
    2b4c:	9e 96       	adiw	r26, 0x2e	; 46
    2b4e:	8d 91       	ld	r24, X+
    2b50:	9d 91       	ld	r25, X+
    2b52:	0d 90       	ld	r0, X+
    2b54:	bc 91       	ld	r27, X
    2b56:	a0 2d       	mov	r26, r0
    2b58:	8e a3       	std	Y+38, r24	; 0x26
    2b5a:	9f a3       	std	Y+39, r25	; 0x27
    2b5c:	a8 a7       	std	Y+40, r26	; 0x28
    2b5e:	b9 a7       	std	Y+41, r27	; 0x29
				if (cl) {
    2b60:	c1 14       	cp	r12, r1
    2b62:	d1 04       	cpc	r13, r1
    2b64:	e1 04       	cpc	r14, r1
    2b66:	f1 04       	cpc	r15, r1
    2b68:	09 f4       	brne	.+2      	; 0x2b6c <f_open+0x1a0>
    2b6a:	62 c0       	rjmp	.+196    	; 0x2c30 <f_open+0x264>
{
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
    2b6c:	b1 e0       	ldi	r27, 0x01	; 1
    2b6e:	cb 16       	cp	r12, r27
    2b70:	d1 04       	cpc	r13, r1
    2b72:	e1 04       	cpc	r14, r1
    2b74:	f1 04       	cpc	r15, r1
    2b76:	09 f4       	brne	.+2      	; 0x2b7a <f_open+0x1ae>
    2b78:	f6 c0       	rjmp	.+492    	; 0x2d66 <f_open+0x39a>
    2b7a:	86 8d       	ldd	r24, Z+30	; 0x1e
    2b7c:	97 8d       	ldd	r25, Z+31	; 0x1f
    2b7e:	a0 a1       	ldd	r26, Z+32	; 0x20
    2b80:	b1 a1       	ldd	r27, Z+33	; 0x21
    2b82:	c8 16       	cp	r12, r24
    2b84:	d9 06       	cpc	r13, r25
    2b86:	ea 06       	cpc	r14, r26
    2b88:	fb 06       	cpc	r15, r27
    2b8a:	08 f0       	brcs	.+2      	; 0x2b8e <f_open+0x1c2>
    2b8c:	ec c0       	rjmp	.+472    	; 0x2d66 <f_open+0x39a>
    2b8e:	46 01       	movw	r8, r12
    2b90:	57 01       	movw	r10, r14
    2b92:	42 c0       	rjmp	.+132    	; 0x2c18 <f_open+0x24c>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    2b94:	c1 01       	movw	r24, r2
    2b96:	b5 01       	movw	r22, r10
    2b98:	a4 01       	movw	r20, r8
    2b9a:	0e 94 92 05 	call	0xb24	; 0xb24 <get_fat>
    2b9e:	2b 01       	movw	r4, r22
    2ba0:	3c 01       	movw	r6, r24
			if (nxt == 0) break;				/* Empty cluster? */
    2ba2:	61 15       	cp	r22, r1
    2ba4:	71 05       	cpc	r23, r1
    2ba6:	81 05       	cpc	r24, r1
    2ba8:	91 05       	cpc	r25, r1
    2baa:	09 f4       	brne	.+2      	; 0x2bae <f_open+0x1e2>
    2bac:	df c0       	rjmp	.+446    	; 0x2d6c <f_open+0x3a0>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    2bae:	61 30       	cpi	r22, 0x01	; 1
    2bb0:	71 05       	cpc	r23, r1
    2bb2:	81 05       	cpc	r24, r1
    2bb4:	91 05       	cpc	r25, r1
    2bb6:	09 f4       	brne	.+2      	; 0x2bba <f_open+0x1ee>
    2bb8:	d6 c0       	rjmp	.+428    	; 0x2d66 <f_open+0x39a>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    2bba:	6f 3f       	cpi	r22, 0xFF	; 255
    2bbc:	2f ef       	ldi	r18, 0xFF	; 255
    2bbe:	72 07       	cpc	r23, r18
    2bc0:	2f ef       	ldi	r18, 0xFF	; 255
    2bc2:	82 07       	cpc	r24, r18
    2bc4:	2f ef       	ldi	r18, 0xFF	; 255
    2bc6:	92 07       	cpc	r25, r18
    2bc8:	09 f4       	brne	.+2      	; 0x2bcc <f_open+0x200>
    2bca:	ca c0       	rjmp	.+404    	; 0x2d60 <f_open+0x394>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    2bcc:	c1 01       	movw	r24, r2
    2bce:	b5 01       	movw	r22, r10
    2bd0:	a4 01       	movw	r20, r8
    2bd2:	00 e0       	ldi	r16, 0x00	; 0
    2bd4:	10 e0       	ldi	r17, 0x00	; 0
    2bd6:	20 e0       	ldi	r18, 0x00	; 0
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	0e 94 c8 04 	call	0x990	; 0x990 <put_fat>
    2bde:	9c 01       	movw	r18, r24
			if (res != FR_OK) break;
    2be0:	00 97       	sbiw	r24, 0x00	; 0
    2be2:	09 f0       	breq	.+2      	; 0x2be6 <f_open+0x21a>
    2be4:	b8 c0       	rjmp	.+368    	; 0x2d56 <f_open+0x38a>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    2be6:	f1 01       	movw	r30, r2
    2be8:	86 85       	ldd	r24, Z+14	; 0x0e
    2bea:	97 85       	ldd	r25, Z+15	; 0x0f
    2bec:	a0 89       	ldd	r26, Z+16	; 0x10
    2bee:	b1 89       	ldd	r27, Z+17	; 0x11
    2bf0:	8f 3f       	cpi	r24, 0xFF	; 255
    2bf2:	ff ef       	ldi	r31, 0xFF	; 255
    2bf4:	9f 07       	cpc	r25, r31
    2bf6:	ff ef       	ldi	r31, 0xFF	; 255
    2bf8:	af 07       	cpc	r26, r31
    2bfa:	ff ef       	ldi	r31, 0xFF	; 255
    2bfc:	bf 07       	cpc	r27, r31
    2bfe:	51 f0       	breq	.+20     	; 0x2c14 <f_open+0x248>
				fs->free_clust++;
    2c00:	01 96       	adiw	r24, 0x01	; 1
    2c02:	a1 1d       	adc	r26, r1
    2c04:	b1 1d       	adc	r27, r1
    2c06:	f1 01       	movw	r30, r2
    2c08:	86 87       	std	Z+14, r24	; 0x0e
    2c0a:	97 87       	std	Z+15, r25	; 0x0f
    2c0c:	a0 8b       	std	Z+16, r26	; 0x10
    2c0e:	b1 8b       	std	Z+17, r27	; 0x11
				fs->fsi_flag = 1;
    2c10:	21 e0       	ldi	r18, 0x01	; 1
    2c12:	25 83       	std	Z+5, r18	; 0x05
    2c14:	53 01       	movw	r10, r6
    2c16:	42 01       	movw	r8, r4
	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
    2c18:	f1 01       	movw	r30, r2
    2c1a:	86 8d       	ldd	r24, Z+30	; 0x1e
    2c1c:	97 8d       	ldd	r25, Z+31	; 0x1f
    2c1e:	a0 a1       	ldd	r26, Z+32	; 0x20
    2c20:	b1 a1       	ldd	r27, Z+33	; 0x21
    2c22:	88 16       	cp	r8, r24
    2c24:	99 06       	cpc	r9, r25
    2c26:	aa 06       	cpc	r10, r26
    2c28:	bb 06       	cpc	r11, r27
    2c2a:	08 f4       	brcc	.+2      	; 0x2c2e <f_open+0x262>
    2c2c:	b3 cf       	rjmp	.-154    	; 0x2b94 <f_open+0x1c8>
    2c2e:	9e c0       	rjmp	.+316    	; 0x2d6c <f_open+0x3a0>
				if (cl) {
					res = remove_chain(dj.fs, cl);
					if (res) LEAVE_FF(dj.fs, res);
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
				}
				res = move_window(dj.fs, ps);
    2c30:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c32:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c34:	4e a1       	ldd	r20, Y+38	; 0x26
    2c36:	5f a1       	ldd	r21, Y+39	; 0x27
    2c38:	68 a5       	ldd	r22, Y+40	; 0x28
    2c3a:	79 a5       	ldd	r23, Y+41	; 0x29
    2c3c:	0e 94 5e 04 	call	0x8bc	; 0x8bc <move_window>
    2c40:	9c 01       	movw	r18, r24
				if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2c42:	00 97       	sbiw	r24, 0x00	; 0
    2c44:	09 f0       	breq	.+2      	; 0x2c48 <f_open+0x27c>
    2c46:	87 c0       	rjmp	.+270    	; 0x2d56 <f_open+0x38a>
			}
		}
		if (mode & FA_CREATE_ALWAYS) {
    2c48:	fd a1       	ldd	r31, Y+37	; 0x25
    2c4a:	f3 ff       	sbrs	r31, 3
    2c4c:	28 c0       	rjmp	.+80     	; 0x2c9e <f_open+0x2d2>
			dir[DIR_Attr] = 0;					/* Reset attribute */
    2c4e:	aa a5       	ldd	r26, Y+42	; 0x2a
    2c50:	bb a5       	ldd	r27, Y+43	; 0x2b
    2c52:	1b 96       	adiw	r26, 0x0b	; 11
    2c54:	1c 92       	st	X, r1
			ps = get_fattime();
    2c56:	0e 94 e5 00 	call	0x1ca	; 0x1ca <get_fattime>
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
    2c5a:	ea a5       	ldd	r30, Y+42	; 0x2a
    2c5c:	fb a5       	ldd	r31, Y+43	; 0x2b
    2c5e:	66 87       	std	Z+14, r22	; 0x0e
    2c60:	77 87       	std	Z+15, r23	; 0x0f
    2c62:	80 8b       	std	Z+16, r24	; 0x10
    2c64:	91 8b       	std	Z+17, r25	; 0x11
			dj.fs->wflag = 1;
    2c66:	ed 85       	ldd	r30, Y+13	; 0x0d
    2c68:	fe 85       	ldd	r31, Y+14	; 0x0e
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	84 83       	std	Z+4, r24	; 0x04
			mode |= FA__WRITTEN;				/* Set file changed flag */
    2c6e:	fd a1       	ldd	r31, Y+37	; 0x25
    2c70:	f0 62       	ori	r31, 0x20	; 32
    2c72:	fd a3       	std	Y+37, r31	; 0x25
    2c74:	14 c0       	rjmp	.+40     	; 0x2c9e <f_open+0x2d2>
		}
	}
	/* Open an existing file */
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
    2c76:	21 15       	cp	r18, r1
    2c78:	31 05       	cpc	r19, r1
    2c7a:	09 f0       	breq	.+2      	; 0x2c7e <f_open+0x2b2>
    2c7c:	6c c0       	rjmp	.+216    	; 0x2d56 <f_open+0x38a>
		dir = dj.dir;
    2c7e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c80:	98 a1       	ldd	r25, Y+32	; 0x20
    2c82:	9b a7       	std	Y+43, r25	; 0x2b
    2c84:	8a a7       	std	Y+42, r24	; 0x2a
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    2c86:	00 97       	sbiw	r24, 0x00	; 0
    2c88:	09 f4       	brne	.+2      	; 0x2c8c <f_open+0x2c0>
    2c8a:	63 c0       	rjmp	.+198    	; 0x2d52 <f_open+0x386>
    2c8c:	dc 01       	movw	r26, r24
    2c8e:	1b 96       	adiw	r26, 0x0b	; 11
    2c90:	8c 91       	ld	r24, X
    2c92:	84 fd       	sbrc	r24, 4
    2c94:	5e c0       	rjmp	.+188    	; 0x2d52 <f_open+0x386>
			LEAVE_FF(dj.fs, FR_NO_FILE);
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    2c96:	e1 ff       	sbrs	r30, 1
    2c98:	02 c0       	rjmp	.+4      	; 0x2c9e <f_open+0x2d2>
    2c9a:	80 fd       	sbrc	r24, 0
    2c9c:	57 c0       	rjmp	.+174    	; 0x2d4c <f_open+0x380>
			LEAVE_FF(dj.fs, FR_DENIED);
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    2c9e:	6d 85       	ldd	r22, Y+13	; 0x0d
    2ca0:	7e 85       	ldd	r23, Y+14	; 0x0e
    2ca2:	fb 01       	movw	r30, r22
    2ca4:	26 a5       	ldd	r18, Z+46	; 0x2e
    2ca6:	37 a5       	ldd	r19, Z+47	; 0x2f
    2ca8:	40 a9       	ldd	r20, Z+48	; 0x30
    2caa:	51 a9       	ldd	r21, Z+49	; 0x31
    2cac:	ac a5       	ldd	r26, Y+44	; 0x2c
    2cae:	bd a5       	ldd	r27, Y+45	; 0x2d
    2cb0:	5a 96       	adiw	r26, 0x1a	; 26
    2cb2:	2d 93       	st	X+, r18
    2cb4:	3d 93       	st	X+, r19
    2cb6:	4d 93       	st	X+, r20
    2cb8:	5c 93       	st	X, r21
    2cba:	5d 97       	sbiw	r26, 0x1d	; 29
	fp->dir_ptr = dj.dir;
    2cbc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cbe:	98 a1       	ldd	r25, Y+32	; 0x20
    2cc0:	5f 96       	adiw	r26, 0x1f	; 31
    2cc2:	9c 93       	st	X, r25
    2cc4:	8e 93       	st	-X, r24
    2cc6:	5e 97       	sbiw	r26, 0x1e	; 30
#endif
	fp->flag = mode;					/* File access mode */
    2cc8:	ed a1       	ldd	r30, Y+37	; 0x25
    2cca:	14 96       	adiw	r26, 0x04	; 4
    2ccc:	ec 93       	st	X, r30
	fp->org_clust =						/* File start cluster */
    2cce:	aa a5       	ldd	r26, Y+42	; 0x2a
    2cd0:	bb a5       	ldd	r27, Y+43	; 0x2b
    2cd2:	54 96       	adiw	r26, 0x14	; 20
    2cd4:	8d 91       	ld	r24, X+
    2cd6:	9c 91       	ld	r25, X
    2cd8:	55 97       	sbiw	r26, 0x15	; 21
    2cda:	a0 e0       	ldi	r26, 0x00	; 0
    2cdc:	b0 e0       	ldi	r27, 0x00	; 0
    2cde:	dc 01       	movw	r26, r24
    2ce0:	99 27       	eor	r25, r25
    2ce2:	88 27       	eor	r24, r24
    2ce4:	ea a5       	ldd	r30, Y+42	; 0x2a
    2ce6:	fb a5       	ldd	r31, Y+43	; 0x2b
    2ce8:	22 8d       	ldd	r18, Z+26	; 0x1a
    2cea:	33 8d       	ldd	r19, Z+27	; 0x1b
    2cec:	40 e0       	ldi	r20, 0x00	; 0
    2cee:	50 e0       	ldi	r21, 0x00	; 0
    2cf0:	82 2b       	or	r24, r18
    2cf2:	93 2b       	or	r25, r19
    2cf4:	a4 2b       	or	r26, r20
    2cf6:	b5 2b       	or	r27, r21
    2cf8:	ec a5       	ldd	r30, Y+44	; 0x2c
    2cfa:	fd a5       	ldd	r31, Y+45	; 0x2d
    2cfc:	86 87       	std	Z+14, r24	; 0x0e
    2cfe:	97 87       	std	Z+15, r25	; 0x0f
    2d00:	a0 8b       	std	Z+16, r26	; 0x10
    2d02:	b1 8b       	std	Z+17, r27	; 0x11
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    2d04:	ea a5       	ldd	r30, Y+42	; 0x2a
    2d06:	fb a5       	ldd	r31, Y+43	; 0x2b
    2d08:	84 8d       	ldd	r24, Z+28	; 0x1c
    2d0a:	95 8d       	ldd	r25, Z+29	; 0x1d
    2d0c:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2d0e:	b7 8d       	ldd	r27, Z+31	; 0x1f
    2d10:	ec a5       	ldd	r30, Y+44	; 0x2c
    2d12:	fd a5       	ldd	r31, Y+45	; 0x2d
    2d14:	82 87       	std	Z+10, r24	; 0x0a
    2d16:	93 87       	std	Z+11, r25	; 0x0b
    2d18:	a4 87       	std	Z+12, r26	; 0x0c
    2d1a:	b5 87       	std	Z+13, r27	; 0x0d
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
    2d1c:	16 82       	std	Z+6, r1	; 0x06
    2d1e:	17 82       	std	Z+7, r1	; 0x07
    2d20:	10 86       	std	Z+8, r1	; 0x08
    2d22:	11 86       	std	Z+9, r1	; 0x09
    2d24:	8f ef       	ldi	r24, 0xFF	; 255
    2d26:	85 83       	std	Z+5, r24	; 0x05
	fp->dsect = 0;
    2d28:	ec a5       	ldd	r30, Y+44	; 0x2c
    2d2a:	fd a5       	ldd	r31, Y+45	; 0x2d
    2d2c:	16 8a       	std	Z+22, r1	; 0x16
    2d2e:	17 8a       	std	Z+23, r1	; 0x17
    2d30:	10 8e       	std	Z+24, r1	; 0x18
    2d32:	11 8e       	std	Z+25, r1	; 0x19
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
    2d34:	71 83       	std	Z+1, r23	; 0x01
    2d36:	60 83       	st	Z, r22
    2d38:	db 01       	movw	r26, r22
    2d3a:	16 96       	adiw	r26, 0x06	; 6
    2d3c:	8d 91       	ld	r24, X+
    2d3e:	9c 91       	ld	r25, X
    2d40:	17 97       	sbiw	r26, 0x07	; 7
    2d42:	93 83       	std	Z+3, r25	; 0x03
    2d44:	82 83       	std	Z+2, r24	; 0x02
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	05 c0       	rjmp	.+10     	; 0x2d56 <f_open+0x38a>

	LEAVE_FF(dj.fs, FR_OK);
    2d4c:	27 e0       	ldi	r18, 0x07	; 7
    2d4e:	30 e0       	ldi	r19, 0x00	; 0
    2d50:	02 c0       	rjmp	.+4      	; 0x2d56 <f_open+0x38a>
    2d52:	24 e0       	ldi	r18, 0x04	; 4
    2d54:	30 e0       	ldi	r19, 0x00	; 0
}
    2d56:	c9 01       	movw	r24, r18
    2d58:	ad 96       	adiw	r28, 0x2d	; 45
    2d5a:	e2 e1       	ldi	r30, 0x12	; 18
    2d5c:	0c 94 cb 2e 	jmp	0x5d96	; 0x5d96 <__epilogue_restores__>
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
	fp->dsect = 0;
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */

	LEAVE_FF(dj.fs, FR_OK);
    2d60:	21 e0       	ldi	r18, 0x01	; 1
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	f8 cf       	rjmp	.-16     	; 0x2d56 <f_open+0x38a>
    2d66:	22 e0       	ldi	r18, 0x02	; 2
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	f5 cf       	rjmp	.-22     	; 0x2d56 <f_open+0x38a>
				dj.fs->wflag = 1;
				ps = dj.fs->winsect;			/* Remove the cluster chain */
				if (cl) {
					res = remove_chain(dj.fs, cl);
					if (res) LEAVE_FF(dj.fs, res);
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    2d6c:	ed 85       	ldd	r30, Y+13	; 0x0d
    2d6e:	fe 85       	ldd	r31, Y+14	; 0x0e
    2d70:	08 94       	sec
    2d72:	c1 08       	sbc	r12, r1
    2d74:	d1 08       	sbc	r13, r1
    2d76:	e1 08       	sbc	r14, r1
    2d78:	f1 08       	sbc	r15, r1
    2d7a:	c2 86       	std	Z+10, r12	; 0x0a
    2d7c:	d3 86       	std	Z+11, r13	; 0x0b
    2d7e:	e4 86       	std	Z+12, r14	; 0x0c
    2d80:	f5 86       	std	Z+13, r15	; 0x0d
    2d82:	56 cf       	rjmp	.-340    	; 0x2c30 <f_open+0x264>
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    2d84:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2d86:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2d88:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2d8a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2d8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d90:	0e 94 5e 04 	call	0x8bc	; 0x8bc <move_window>
    2d94:	9c 01       	movw	r18, r24
		if (res == FR_OK) {
    2d96:	00 97       	sbiw	r24, 0x00	; 0
    2d98:	09 f4       	brne	.+2      	; 0x2d9c <f_open+0x3d0>
    2d9a:	77 ce       	rjmp	.-786    	; 0x2a8a <f_open+0xbe>
    2d9c:	dc cf       	rjmp	.-72     	; 0x2d56 <f_open+0x38a>

00002d9e <wait_ready>:
BYTE wait_ready (void)
{
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
    2d9e:	82 e3       	ldi	r24, 0x32	; 50
    2da0:	80 93 c0 02 	sts	0x02C0, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    2da4:	8f ef       	ldi	r24, 0xFF	; 255
    2da6:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2da8:	0d b4       	in	r0, 0x2d	; 45
    2daa:	07 fe       	sbrs	r0, 7
    2dac:	fd cf       	rjmp	.-6      	; 0x2da8 <wait_ready+0xa>
	return SPDR;
    2dae:	8e b5       	in	r24, 0x2e	; 46
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    2db0:	2f ef       	ldi	r18, 0xFF	; 255
    2db2:	2e bd       	out	0x2e, r18	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2db4:	0d b4       	in	r0, 0x2d	; 45
    2db6:	07 fe       	sbrs	r0, 7
    2db8:	fd cf       	rjmp	.-6      	; 0x2db4 <wait_ready+0x16>
	return SPDR;
    2dba:	9e b5       	in	r25, 0x2e	; 46

	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		res = rcvr_spi();
	while ((res != 0xFF) && Timer2);
    2dbc:	9f 3f       	cpi	r25, 0xFF	; 255
    2dbe:	21 f0       	breq	.+8      	; 0x2dc8 <wait_ready+0x2a>
    2dc0:	80 91 c0 02 	lds	r24, 0x02C0
    2dc4:	88 23       	and	r24, r24
    2dc6:	a9 f7       	brne	.-22     	; 0x2db2 <wait_ready+0x14>

	return res;
}
    2dc8:	89 2f       	mov	r24, r25
    2dca:	08 95       	ret

00002dcc <select>:
/*-----------------------------------------------------------------------*/

static
BOOL select (void)	/* TRUE:Successful, FALSE:Timeout */
{
	CS_LOW();
    2dcc:	28 98       	cbi	0x05, 0	; 5
	if (wait_ready() != 0xFF) {
    2dce:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <wait_ready>
    2dd2:	8f 3f       	cpi	r24, 0xFF	; 255
    2dd4:	19 f4       	brne	.+6      	; 0x2ddc <select+0x10>
    2dd6:	21 e0       	ldi	r18, 0x01	; 1
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	09 c0       	rjmp	.+18     	; 0x2dee <select+0x22>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    2ddc:	28 9a       	sbi	0x05, 0	; 5
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    2dde:	8f ef       	ldi	r24, 0xFF	; 255
    2de0:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2de2:	0d b4       	in	r0, 0x2d	; 45
    2de4:	07 fe       	sbrs	r0, 7
    2de6:	fd cf       	rjmp	.-6      	; 0x2de2 <select+0x16>
	return SPDR;
    2de8:	8e b5       	in	r24, 0x2e	; 46
    2dea:	20 e0       	ldi	r18, 0x00	; 0
    2dec:	30 e0       	ldi	r19, 0x00	; 0
	if (wait_ready() != 0xFF) {
		deselect();
		return FALSE;
	}
	return TRUE;
}
    2dee:	c9 01       	movw	r24, r18
    2df0:	08 95       	ret

00002df2 <rcvr_datablock>:
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    2df2:	fc 01       	movw	r30, r24
	BYTE token;


	Timer1 = 20;
    2df4:	84 e1       	ldi	r24, 0x14	; 20
    2df6:	80 93 bf 02 	sts	0x02BF, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    2dfa:	9f ef       	ldi	r25, 0xFF	; 255
    2dfc:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2dfe:	0d b4       	in	r0, 0x2d	; 45
    2e00:	07 fe       	sbrs	r0, 7
    2e02:	fd cf       	rjmp	.-6      	; 0x2dfe <rcvr_datablock+0xc>
	return SPDR;
    2e04:	8e b5       	in	r24, 0x2e	; 46


	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
    2e06:	8f 3f       	cpi	r24, 0xFF	; 255
    2e08:	29 f4       	brne	.+10     	; 0x2e14 <rcvr_datablock+0x22>
    2e0a:	80 91 bf 02 	lds	r24, 0x02BF
    2e0e:	88 23       	and	r24, r24
    2e10:	a9 f7       	brne	.-22     	; 0x2dfc <rcvr_datablock+0xa>
    2e12:	2f c0       	rjmp	.+94     	; 0x2e72 <rcvr_datablock+0x80>
	if(token != 0xFE) return FALSE;	/* If not valid data token, retutn with error */
    2e14:	8e 3f       	cpi	r24, 0xFE	; 254
    2e16:	69 f5       	brne	.+90     	; 0x2e72 <rcvr_datablock+0x80>

	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
    2e18:	9f ef       	ldi	r25, 0xFF	; 255
    2e1a:	9e bd       	out	0x2e, r25	; 46
    2e1c:	0d b4       	in	r0, 0x2d	; 45
    2e1e:	07 fe       	sbrs	r0, 7
    2e20:	fd cf       	rjmp	.-6      	; 0x2e1c <rcvr_datablock+0x2a>
    2e22:	8e b5       	in	r24, 0x2e	; 46
    2e24:	80 83       	st	Z, r24
		rcvr_spi_m(buff++);
    2e26:	9e bd       	out	0x2e, r25	; 46
    2e28:	0d b4       	in	r0, 0x2d	; 45
    2e2a:	07 fe       	sbrs	r0, 7
    2e2c:	fd cf       	rjmp	.-6      	; 0x2e28 <rcvr_datablock+0x36>
    2e2e:	8e b5       	in	r24, 0x2e	; 46
    2e30:	81 83       	std	Z+1, r24	; 0x01
		rcvr_spi_m(buff++);
    2e32:	9e bd       	out	0x2e, r25	; 46
    2e34:	0d b4       	in	r0, 0x2d	; 45
    2e36:	07 fe       	sbrs	r0, 7
    2e38:	fd cf       	rjmp	.-6      	; 0x2e34 <rcvr_datablock+0x42>
    2e3a:	8e b5       	in	r24, 0x2e	; 46
    2e3c:	82 83       	std	Z+2, r24	; 0x02
		rcvr_spi_m(buff++);
    2e3e:	9e bd       	out	0x2e, r25	; 46
    2e40:	0d b4       	in	r0, 0x2d	; 45
    2e42:	07 fe       	sbrs	r0, 7
    2e44:	fd cf       	rjmp	.-6      	; 0x2e40 <rcvr_datablock+0x4e>
    2e46:	8e b5       	in	r24, 0x2e	; 46
    2e48:	83 83       	std	Z+3, r24	; 0x03
	} while (btr -= 4);
    2e4a:	64 50       	subi	r22, 0x04	; 4
    2e4c:	70 40       	sbci	r23, 0x00	; 0
    2e4e:	11 f0       	breq	.+4      	; 0x2e54 <rcvr_datablock+0x62>
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    2e50:	34 96       	adiw	r30, 0x04	; 4
    2e52:	e3 cf       	rjmp	.-58     	; 0x2e1a <rcvr_datablock+0x28>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    2e54:	8f ef       	ldi	r24, 0xFF	; 255
    2e56:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2e58:	0d b4       	in	r0, 0x2d	; 45
    2e5a:	07 fe       	sbrs	r0, 7
    2e5c:	fd cf       	rjmp	.-6      	; 0x2e58 <rcvr_datablock+0x66>
	return SPDR;
    2e5e:	8e b5       	in	r24, 0x2e	; 46
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    2e60:	8f ef       	ldi	r24, 0xFF	; 255
    2e62:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2e64:	0d b4       	in	r0, 0x2d	; 45
    2e66:	07 fe       	sbrs	r0, 7
    2e68:	fd cf       	rjmp	.-6      	; 0x2e64 <rcvr_datablock+0x72>
	return SPDR;
    2e6a:	8e b5       	in	r24, 0x2e	; 46
    2e6c:	21 e0       	ldi	r18, 0x01	; 1
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	02 c0       	rjmp	.+4      	; 0x2e76 <rcvr_datablock+0x84>
		rcvr_spi_m(buff++);
	} while (btr -= 4);
	rcvr_spi();						/* Discard CRC */
	rcvr_spi();

	return TRUE;					/* Return with success */
    2e72:	20 e0       	ldi	r18, 0x00	; 0
    2e74:	30 e0       	ldi	r19, 0x00	; 0
}
    2e76:	c9 01       	movw	r24, r18
    2e78:	08 95       	ret

00002e7a <xmit_datablock>:
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    2e7a:	1f 93       	push	r17
    2e7c:	cf 93       	push	r28
    2e7e:	df 93       	push	r29
    2e80:	ec 01       	movw	r28, r24
    2e82:	16 2f       	mov	r17, r22
	BYTE resp, wc;


	if (wait_ready() != 0xFF) return FALSE;
    2e84:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <wait_ready>
    2e88:	8f 3f       	cpi	r24, 0xFF	; 255
    2e8a:	19 f0       	breq	.+6      	; 0x2e92 <xmit_datablock+0x18>
    2e8c:	20 e0       	ldi	r18, 0x00	; 0
    2e8e:	30 e0       	ldi	r19, 0x00	; 0
    2e90:	31 c0       	rjmp	.+98     	; 0x2ef4 <xmit_datablock+0x7a>

	xmit_spi(token);					/* Xmit data token */
    2e92:	1e bd       	out	0x2e, r17	; 46
    2e94:	0d b4       	in	r0, 0x2d	; 45
    2e96:	07 fe       	sbrs	r0, 7
    2e98:	fd cf       	rjmp	.-6      	; 0x2e94 <xmit_datablock+0x1a>
	if (token != 0xFD) {	/* Is data token */
    2e9a:	1d 3f       	cpi	r17, 0xFD	; 253
    2e9c:	19 f4       	brne	.+6      	; 0x2ea4 <xmit_datablock+0x2a>
    2e9e:	21 e0       	ldi	r18, 0x01	; 1
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	28 c0       	rjmp	.+80     	; 0x2ef4 <xmit_datablock+0x7a>
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
    2ea6:	88 81       	ld	r24, Y
    2ea8:	8e bd       	out	0x2e, r24	; 46
    2eaa:	0d b4       	in	r0, 0x2d	; 45
    2eac:	07 fe       	sbrs	r0, 7
    2eae:	fd cf       	rjmp	.-6      	; 0x2eaa <xmit_datablock+0x30>
			xmit_spi(*buff++);
    2eb0:	89 81       	ldd	r24, Y+1	; 0x01
    2eb2:	8e bd       	out	0x2e, r24	; 46
    2eb4:	0d b4       	in	r0, 0x2d	; 45
    2eb6:	07 fe       	sbrs	r0, 7
    2eb8:	fd cf       	rjmp	.-6      	; 0x2eb4 <xmit_datablock+0x3a>
		} while (--wc);
    2eba:	91 50       	subi	r25, 0x01	; 1
    2ebc:	11 f0       	breq	.+4      	; 0x2ec2 <xmit_datablock+0x48>
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    2ebe:	22 96       	adiw	r28, 0x02	; 2
    2ec0:	f2 cf       	rjmp	.-28     	; 0x2ea6 <xmit_datablock+0x2c>
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
			xmit_spi(*buff++);
		} while (--wc);
		xmit_spi(0xFF);					/* CRC (Dummy) */
    2ec2:	8f ef       	ldi	r24, 0xFF	; 255
    2ec4:	8e bd       	out	0x2e, r24	; 46
    2ec6:	0d b4       	in	r0, 0x2d	; 45
    2ec8:	07 fe       	sbrs	r0, 7
    2eca:	fd cf       	rjmp	.-6      	; 0x2ec6 <xmit_datablock+0x4c>
		xmit_spi(0xFF);
    2ecc:	8f ef       	ldi	r24, 0xFF	; 255
    2ece:	8e bd       	out	0x2e, r24	; 46
    2ed0:	0d b4       	in	r0, 0x2d	; 45
    2ed2:	07 fe       	sbrs	r0, 7
    2ed4:	fd cf       	rjmp	.-6      	; 0x2ed0 <xmit_datablock+0x56>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    2ed6:	8f ef       	ldi	r24, 0xFF	; 255
    2ed8:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2eda:	0d b4       	in	r0, 0x2d	; 45
    2edc:	07 fe       	sbrs	r0, 7
    2ede:	fd cf       	rjmp	.-6      	; 0x2eda <xmit_datablock+0x60>
	return SPDR;
    2ee0:	8e b5       	in	r24, 0x2e	; 46
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	8f 71       	andi	r24, 0x1F	; 31
    2ee6:	85 30       	cpi	r24, 0x05	; 5
    2ee8:	09 f0       	breq	.+2      	; 0x2eec <xmit_datablock+0x72>
    2eea:	91 e0       	ldi	r25, 0x01	; 1
    2eec:	81 e0       	ldi	r24, 0x01	; 1
    2eee:	98 27       	eor	r25, r24
    2ef0:	29 2f       	mov	r18, r25
    2ef2:	30 e0       	ldi	r19, 0x00	; 0
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return FALSE;
	}

	return TRUE;
}
    2ef4:	c9 01       	movw	r24, r18
    2ef6:	df 91       	pop	r29
    2ef8:	cf 91       	pop	r28
    2efa:	1f 91       	pop	r17
    2efc:	08 95       	ret

00002efe <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    2efe:	df 92       	push	r13
    2f00:	ef 92       	push	r14
    2f02:	ff 92       	push	r15
    2f04:	0f 93       	push	r16
    2f06:	1f 93       	push	r17
    2f08:	d8 2e       	mov	r13, r24
    2f0a:	7a 01       	movw	r14, r20
    2f0c:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    2f0e:	87 ff       	sbrs	r24, 7
    2f10:	0c c0       	rjmp	.+24     	; 0x2f2a <send_cmd+0x2c>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    2f12:	87 e7       	ldi	r24, 0x77	; 119
    2f14:	40 e0       	ldi	r20, 0x00	; 0
    2f16:	50 e0       	ldi	r21, 0x00	; 0
    2f18:	60 e0       	ldi	r22, 0x00	; 0
    2f1a:	70 e0       	ldi	r23, 0x00	; 0
    2f1c:	0e 94 7f 17 	call	0x2efe	; 0x2efe <send_cmd>
		if (res > 1) return res;
    2f20:	82 30       	cpi	r24, 0x02	; 2
    2f22:	08 f0       	brcs	.+2      	; 0x2f26 <send_cmd+0x28>
    2f24:	51 c0       	rjmp	.+162    	; 0x2fc8 <send_cmd+0xca>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    2f26:	8f e7       	ldi	r24, 0x7F	; 127
    2f28:	d8 22       	and	r13, r24
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    2f2a:	28 9a       	sbi	0x05, 0	; 5
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    2f2c:	8f ef       	ldi	r24, 0xFF	; 255
    2f2e:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2f30:	0d b4       	in	r0, 0x2d	; 45
    2f32:	07 fe       	sbrs	r0, 7
    2f34:	fd cf       	rjmp	.-6      	; 0x2f30 <send_cmd+0x32>
	return SPDR;
    2f36:	8e b5       	in	r24, 0x2e	; 46
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
	if (!select()) return 0xFF;
    2f38:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <select>
    2f3c:	89 2b       	or	r24, r25
    2f3e:	11 f4       	brne	.+4      	; 0x2f44 <send_cmd+0x46>
    2f40:	8f ef       	ldi	r24, 0xFF	; 255
    2f42:	42 c0       	rjmp	.+132    	; 0x2fc8 <send_cmd+0xca>

	/* Send command packet */
	xmit_spi(cmd);						/* Start + Command index */
    2f44:	de bc       	out	0x2e, r13	; 46
    2f46:	0d b4       	in	r0, 0x2d	; 45
    2f48:	07 fe       	sbrs	r0, 7
    2f4a:	fd cf       	rjmp	.-6      	; 0x2f46 <send_cmd+0x48>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    2f4c:	81 2f       	mov	r24, r17
    2f4e:	99 27       	eor	r25, r25
    2f50:	aa 27       	eor	r26, r26
    2f52:	bb 27       	eor	r27, r27
    2f54:	8e bd       	out	0x2e, r24	; 46
    2f56:	0d b4       	in	r0, 0x2d	; 45
    2f58:	07 fe       	sbrs	r0, 7
    2f5a:	fd cf       	rjmp	.-6      	; 0x2f56 <send_cmd+0x58>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    2f5c:	c8 01       	movw	r24, r16
    2f5e:	aa 27       	eor	r26, r26
    2f60:	bb 27       	eor	r27, r27
    2f62:	8e bd       	out	0x2e, r24	; 46
    2f64:	0d b4       	in	r0, 0x2d	; 45
    2f66:	07 fe       	sbrs	r0, 7
    2f68:	fd cf       	rjmp	.-6      	; 0x2f64 <send_cmd+0x66>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    2f6a:	bb 27       	eor	r27, r27
    2f6c:	a1 2f       	mov	r26, r17
    2f6e:	90 2f       	mov	r25, r16
    2f70:	8f 2d       	mov	r24, r15
    2f72:	8e bd       	out	0x2e, r24	; 46
    2f74:	0d b4       	in	r0, 0x2d	; 45
    2f76:	07 fe       	sbrs	r0, 7
    2f78:	fd cf       	rjmp	.-6      	; 0x2f74 <send_cmd+0x76>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
    2f7a:	ee bc       	out	0x2e, r14	; 46
    2f7c:	0d b4       	in	r0, 0x2d	; 45
    2f7e:	07 fe       	sbrs	r0, 7
    2f80:	fd cf       	rjmp	.-6      	; 0x2f7c <send_cmd+0x7e>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    2f82:	80 e4       	ldi	r24, 0x40	; 64
    2f84:	d8 16       	cp	r13, r24
    2f86:	11 f4       	brne	.+4      	; 0x2f8c <send_cmd+0x8e>
    2f88:	85 e9       	ldi	r24, 0x95	; 149
    2f8a:	06 c0       	rjmp	.+12     	; 0x2f98 <send_cmd+0x9a>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    2f8c:	88 e4       	ldi	r24, 0x48	; 72
    2f8e:	d8 16       	cp	r13, r24
    2f90:	11 f4       	brne	.+4      	; 0x2f96 <send_cmd+0x98>
    2f92:	87 e8       	ldi	r24, 0x87	; 135
    2f94:	01 c0       	rjmp	.+2      	; 0x2f98 <send_cmd+0x9a>
    2f96:	81 e0       	ldi	r24, 0x01	; 1
	xmit_spi(n);
    2f98:	8e bd       	out	0x2e, r24	; 46
    2f9a:	0d b4       	in	r0, 0x2d	; 45
    2f9c:	07 fe       	sbrs	r0, 7
    2f9e:	fd cf       	rjmp	.-6      	; 0x2f9a <send_cmd+0x9c>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
    2fa0:	8c e4       	ldi	r24, 0x4C	; 76
    2fa2:	d8 16       	cp	r13, r24
    2fa4:	31 f4       	brne	.+12     	; 0x2fb2 <send_cmd+0xb4>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    2fa6:	8f ef       	ldi	r24, 0xFF	; 255
    2fa8:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2faa:	0d b4       	in	r0, 0x2d	; 45
    2fac:	07 fe       	sbrs	r0, 7
    2fae:	fd cf       	rjmp	.-6      	; 0x2faa <send_cmd+0xac>
	return SPDR;
    2fb0:	8e b5       	in	r24, 0x2e	; 46
    2fb2:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    2fb4:	2f ef       	ldi	r18, 0xFF	; 255
    2fb6:	2e bd       	out	0x2e, r18	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2fb8:	0d b4       	in	r0, 0x2d	; 45
    2fba:	07 fe       	sbrs	r0, 7
    2fbc:	fd cf       	rjmp	.-6      	; 0x2fb8 <send_cmd+0xba>
	return SPDR;
    2fbe:	8e b5       	in	r24, 0x2e	; 46
	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = rcvr_spi();
	while ((res & 0x80) && --n);
    2fc0:	87 ff       	sbrs	r24, 7
    2fc2:	02 c0       	rjmp	.+4      	; 0x2fc8 <send_cmd+0xca>
    2fc4:	91 50       	subi	r25, 0x01	; 1
    2fc6:	b9 f7       	brne	.-18     	; 0x2fb6 <send_cmd+0xb8>

	return res;			/* Return with the response value */
}
    2fc8:	1f 91       	pop	r17
    2fca:	0f 91       	pop	r16
    2fcc:	ff 90       	pop	r15
    2fce:	ef 90       	pop	r14
    2fd0:	df 90       	pop	r13
    2fd2:	08 95       	ret

00002fd4 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
    2fd4:	a4 e0       	ldi	r26, 0x04	; 4
    2fd6:	b0 e0       	ldi	r27, 0x00	; 0
    2fd8:	e0 ef       	ldi	r30, 0xF0	; 240
    2fda:	f7 e1       	ldi	r31, 0x17	; 23
    2fdc:	0c 94 bb 2e 	jmp	0x5d76	; 0x5d76 <__prologue_saves__+0x18>
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
    2fe0:	88 23       	and	r24, r24
    2fe2:	11 f0       	breq	.+4      	; 0x2fe8 <disk_initialize+0x14>
    2fe4:	81 e0       	ldi	r24, 0x01	; 1
    2fe6:	b5 c0       	rjmp	.+362    	; 0x3152 <disk_initialize+0x17e>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    2fe8:	80 91 0e 01 	lds	r24, 0x010E
    2fec:	81 fd       	sbrc	r24, 1
    2fee:	af c0       	rjmp	.+350    	; 0x314e <disk_initialize+0x17a>
#if (defined SD_PWR_PIN | defined SD_PWR_PORT)
   DDRC|=(1<<SD_PWR_PIN);          // Turns on PWR pin as output
   SD_PWR_PORT|=(1<<SD_PWR_PIN);   // Drives PWR pin high
#endif

   DDRC|=(1<<SD_CS_PIN);          // Turns on CS pin as output
    2ff0:	38 9a       	sbi	0x07, 0	; 7
   DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)| (1<<DD_SS);
    2ff2:	87 e0       	ldi	r24, 0x07	; 7
    2ff4:	84 b9       	out	0x04, r24	; 4
   SPCR = (1<<SPE)|(1<<MSTR); /* Initialize SPI port (Mode 0) */ 
    2ff6:	80 e5       	ldi	r24, 0x50	; 80
    2ff8:	8c bd       	out	0x2c, r24	; 44
    2ffa:	8a e0       	ldi	r24, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    2ffc:	9f ef       	ldi	r25, 0xFF	; 255
    2ffe:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    3000:	0d b4       	in	r0, 0x2d	; 45
    3002:	07 fe       	sbrs	r0, 7
    3004:	fd cf       	rjmp	.-6      	; 0x3000 <disk_initialize+0x2c>
	return SPDR;
    3006:	2e b5       	in	r18, 0x2e	; 46
	if (drv) return STA_NOINIT;			/* Supports only single drive */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */

	power_on();							/* Force socket power on */
	FCLK_SLOW();
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
    3008:	81 50       	subi	r24, 0x01	; 1
    300a:	c9 f7       	brne	.-14     	; 0x2ffe <disk_initialize+0x2a>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    300c:	80 e4       	ldi	r24, 0x40	; 64
    300e:	40 e0       	ldi	r20, 0x00	; 0
    3010:	50 e0       	ldi	r21, 0x00	; 0
    3012:	60 e0       	ldi	r22, 0x00	; 0
    3014:	70 e0       	ldi	r23, 0x00	; 0
    3016:	0e 94 7f 17 	call	0x2efe	; 0x2efe <send_cmd>
    301a:	81 30       	cpi	r24, 0x01	; 1
    301c:	09 f0       	breq	.+2      	; 0x3020 <disk_initialize+0x4c>
    301e:	7e c0       	rjmp	.+252    	; 0x311c <disk_initialize+0x148>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    3020:	84 e6       	ldi	r24, 0x64	; 100
    3022:	80 93 bf 02 	sts	0x02BF, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
    3026:	88 e4       	ldi	r24, 0x48	; 72
    3028:	4a ea       	ldi	r20, 0xAA	; 170
    302a:	51 e0       	ldi	r21, 0x01	; 1
    302c:	60 e0       	ldi	r22, 0x00	; 0
    302e:	70 e0       	ldi	r23, 0x00	; 0
    3030:	0e 94 7f 17 	call	0x2efe	; 0x2efe <send_cmd>
    3034:	81 30       	cpi	r24, 0x01	; 1
    3036:	09 f0       	breq	.+2      	; 0x303a <disk_initialize+0x66>
    3038:	4a c0       	rjmp	.+148    	; 0x30ce <disk_initialize+0xfa>
    303a:	7e 01       	movw	r14, r28
    303c:	08 94       	sec
    303e:	e1 1c       	adc	r14, r1
    3040:	f1 1c       	adc	r15, r1
    3042:	87 01       	movw	r16, r14
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    3044:	9f ef       	ldi	r25, 0xFF	; 255

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
    3046:	9e 01       	movw	r18, r28
    3048:	2b 5f       	subi	r18, 0xFB	; 251
    304a:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    304c:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    304e:	0d b4       	in	r0, 0x2d	; 45
    3050:	07 fe       	sbrs	r0, 7
    3052:	fd cf       	rjmp	.-6      	; 0x304e <disk_initialize+0x7a>
	return SPDR;
    3054:	8e b5       	in	r24, 0x2e	; 46

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
    3056:	f8 01       	movw	r30, r16
    3058:	81 93       	st	Z+, r24
    305a:	8f 01       	movw	r16, r30
    305c:	e2 17       	cp	r30, r18
    305e:	f3 07       	cpc	r31, r19
    3060:	a9 f7       	brne	.-22     	; 0x304c <disk_initialize+0x78>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    3062:	8b 81       	ldd	r24, Y+3	; 0x03
    3064:	81 30       	cpi	r24, 0x01	; 1
    3066:	09 f0       	breq	.+2      	; 0x306a <disk_initialize+0x96>
    3068:	59 c0       	rjmp	.+178    	; 0x311c <disk_initialize+0x148>
    306a:	8c 81       	ldd	r24, Y+4	; 0x04
    306c:	8a 3a       	cpi	r24, 0xAA	; 170
    306e:	09 f0       	breq	.+2      	; 0x3072 <disk_initialize+0x9e>
    3070:	55 c0       	rjmp	.+170    	; 0x311c <disk_initialize+0x148>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    3072:	80 91 bf 02 	lds	r24, 0x02BF
    3076:	88 23       	and	r24, r24
    3078:	49 f0       	breq	.+18     	; 0x308c <disk_initialize+0xb8>
    307a:	89 ee       	ldi	r24, 0xE9	; 233
    307c:	40 e0       	ldi	r20, 0x00	; 0
    307e:	50 e0       	ldi	r21, 0x00	; 0
    3080:	60 e0       	ldi	r22, 0x00	; 0
    3082:	70 e4       	ldi	r23, 0x40	; 64
    3084:	0e 94 7f 17 	call	0x2efe	; 0x2efe <send_cmd>
    3088:	88 23       	and	r24, r24
    308a:	99 f7       	brne	.-26     	; 0x3072 <disk_initialize+0x9e>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    308c:	80 91 bf 02 	lds	r24, 0x02BF
    3090:	88 23       	and	r24, r24
    3092:	09 f4       	brne	.+2      	; 0x3096 <disk_initialize+0xc2>
    3094:	43 c0       	rjmp	.+134    	; 0x311c <disk_initialize+0x148>
    3096:	8a e7       	ldi	r24, 0x7A	; 122
    3098:	40 e0       	ldi	r20, 0x00	; 0
    309a:	50 e0       	ldi	r21, 0x00	; 0
    309c:	60 e0       	ldi	r22, 0x00	; 0
    309e:	70 e0       	ldi	r23, 0x00	; 0
    30a0:	0e 94 7f 17 	call	0x2efe	; 0x2efe <send_cmd>
    30a4:	88 23       	and	r24, r24
    30a6:	d1 f5       	brne	.+116    	; 0x311c <disk_initialize+0x148>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    30a8:	9f ef       	ldi	r25, 0xFF	; 255
    30aa:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    30ac:	0d b4       	in	r0, 0x2d	; 45
    30ae:	07 fe       	sbrs	r0, 7
    30b0:	fd cf       	rjmp	.-6      	; 0x30ac <disk_initialize+0xd8>
	return SPDR;
    30b2:	8e b5       	in	r24, 0x2e	; 46
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
    30b4:	f7 01       	movw	r30, r14
    30b6:	81 93       	st	Z+, r24
    30b8:	7f 01       	movw	r14, r30
    30ba:	e0 17       	cp	r30, r16
    30bc:	f1 07       	cpc	r31, r17
    30be:	a9 f7       	brne	.-22     	; 0x30aa <disk_initialize+0xd6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    30c0:	89 81       	ldd	r24, Y+1	; 0x01
    30c2:	86 fd       	sbrc	r24, 6
    30c4:	02 c0       	rjmp	.+4      	; 0x30ca <disk_initialize+0xf6>
    30c6:	14 e0       	ldi	r17, 0x04	; 4
    30c8:	2a c0       	rjmp	.+84     	; 0x311e <disk_initialize+0x14a>
    30ca:	1c e0       	ldi	r17, 0x0C	; 12
    30cc:	28 c0       	rjmp	.+80     	; 0x311e <disk_initialize+0x14a>
				}
			}
		} else {							/* SDSC or MMC */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    30ce:	89 ee       	ldi	r24, 0xE9	; 233
    30d0:	40 e0       	ldi	r20, 0x00	; 0
    30d2:	50 e0       	ldi	r21, 0x00	; 0
    30d4:	60 e0       	ldi	r22, 0x00	; 0
    30d6:	70 e0       	ldi	r23, 0x00	; 0
    30d8:	0e 94 7f 17 	call	0x2efe	; 0x2efe <send_cmd>
    30dc:	82 30       	cpi	r24, 0x02	; 2
    30de:	18 f0       	brcs	.+6      	; 0x30e6 <disk_initialize+0x112>
    30e0:	01 e4       	ldi	r16, 0x41	; 65
    30e2:	11 e0       	ldi	r17, 0x01	; 1
    30e4:	02 c0       	rjmp	.+4      	; 0x30ea <disk_initialize+0x116>
    30e6:	09 ee       	ldi	r16, 0xE9	; 233
    30e8:	12 e0       	ldi	r17, 0x02	; 2
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    30ea:	80 91 bf 02 	lds	r24, 0x02BF
    30ee:	88 23       	and	r24, r24
    30f0:	49 f0       	breq	.+18     	; 0x3104 <disk_initialize+0x130>
    30f2:	80 2f       	mov	r24, r16
    30f4:	40 e0       	ldi	r20, 0x00	; 0
    30f6:	50 e0       	ldi	r21, 0x00	; 0
    30f8:	60 e0       	ldi	r22, 0x00	; 0
    30fa:	70 e0       	ldi	r23, 0x00	; 0
    30fc:	0e 94 7f 17 	call	0x2efe	; 0x2efe <send_cmd>
    3100:	88 23       	and	r24, r24
    3102:	99 f7       	brne	.-26     	; 0x30ea <disk_initialize+0x116>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    3104:	80 91 bf 02 	lds	r24, 0x02BF
    3108:	88 23       	and	r24, r24
    310a:	41 f0       	breq	.+16     	; 0x311c <disk_initialize+0x148>
    310c:	80 e5       	ldi	r24, 0x50	; 80
    310e:	40 e0       	ldi	r20, 0x00	; 0
    3110:	52 e0       	ldi	r21, 0x02	; 2
    3112:	60 e0       	ldi	r22, 0x00	; 0
    3114:	70 e0       	ldi	r23, 0x00	; 0
    3116:	0e 94 7f 17 	call	0x2efe	; 0x2efe <send_cmd>
    311a:	81 11       	cpse	r24, r1
    311c:	10 e0       	ldi	r17, 0x00	; 0
				ty = 0;
		}
	}
	CardType = ty;
    311e:	10 93 c1 02 	sts	0x02C1, r17
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    3122:	28 9a       	sbi	0x05, 0	; 5
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    3124:	8f ef       	ldi	r24, 0xFF	; 255
    3126:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    3128:	0d b4       	in	r0, 0x2d	; 45
    312a:	07 fe       	sbrs	r0, 7
    312c:	fd cf       	rjmp	.-6      	; 0x3128 <disk_initialize+0x154>
	return SPDR;
    312e:	8e b5       	in	r24, 0x2e	; 46
		}
	}
	CardType = ty;
	deselect();

	if (ty) {			/* Initialization succeded */
    3130:	11 23       	and	r17, r17
    3132:	21 f0       	breq	.+8      	; 0x313c <disk_initialize+0x168>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    3134:	80 91 0e 01 	lds	r24, 0x010E
    3138:	8e 7f       	andi	r24, 0xFE	; 254
    313a:	07 c0       	rjmp	.+14     	; 0x314a <disk_initialize+0x176>
}

static
void power_off (void)
{
   CS_LOW();            /* Wait for card ready */
    313c:	28 98       	cbi	0x05, 0	; 5
   wait_ready();
    313e:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <wait_ready>
   SPCR = 0;
    3142:	1c bc       	out	0x2c, r1	; 44
   Stat |= STA_NOINIT;      /* Set STA_NOINIT */
    3144:	80 91 0e 01 	lds	r24, 0x010E
    3148:	81 60       	ori	r24, 0x01	; 1
    314a:	80 93 0e 01 	sts	0x010E, r24
		FCLK_FAST();
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
    314e:	80 91 0e 01 	lds	r24, 0x010E
}
    3152:	24 96       	adiw	r28, 0x04	; 4
    3154:	e6 e0       	ldi	r30, 0x06	; 6
    3156:	0c 94 d7 2e 	jmp	0x5dae	; 0x5dae <__epilogue_restores__+0x18>

0000315a <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    315a:	88 23       	and	r24, r24
    315c:	11 f0       	breq	.+4      	; 0x3162 <disk_status+0x8>
    315e:	81 e0       	ldi	r24, 0x01	; 1
    3160:	08 95       	ret
	return Stat;
    3162:	80 91 0e 01 	lds	r24, 0x010E
}
    3166:	08 95       	ret

00003168 <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
    3168:	0f 93       	push	r16
    316a:	cf 93       	push	r28
    316c:	df 93       	push	r29
    316e:	eb 01       	movw	r28, r22
	if (drv || !count) return RES_PARERR;
    3170:	88 23       	and	r24, r24
    3172:	09 f0       	breq	.+2      	; 0x3176 <disk_read+0xe>
    3174:	50 c0       	rjmp	.+160    	; 0x3216 <disk_read+0xae>
    3176:	00 23       	and	r16, r16
    3178:	09 f4       	brne	.+2      	; 0x317c <disk_read+0x14>
    317a:	4d c0       	rjmp	.+154    	; 0x3216 <disk_read+0xae>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    317c:	80 91 0e 01 	lds	r24, 0x010E
    3180:	80 ff       	sbrs	r24, 0
    3182:	03 c0       	rjmp	.+6      	; 0x318a <disk_read+0x22>
    3184:	23 e0       	ldi	r18, 0x03	; 3
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	48 c0       	rjmp	.+144    	; 0x321a <disk_read+0xb2>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    318a:	80 91 c1 02 	lds	r24, 0x02C1
    318e:	83 fd       	sbrc	r24, 3
    3190:	07 c0       	rjmp	.+14     	; 0x31a0 <disk_read+0x38>
    3192:	69 e0       	ldi	r22, 0x09	; 9
    3194:	22 0f       	add	r18, r18
    3196:	33 1f       	adc	r19, r19
    3198:	44 1f       	adc	r20, r20
    319a:	55 1f       	adc	r21, r21
    319c:	6a 95       	dec	r22
    319e:	d1 f7       	brne	.-12     	; 0x3194 <disk_read+0x2c>

	if (count == 1) {	/* Single block read */
    31a0:	01 30       	cpi	r16, 0x01	; 1
    31a2:	89 f4       	brne	.+34     	; 0x31c6 <disk_read+0x5e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
    31a4:	81 e5       	ldi	r24, 0x51	; 81
    31a6:	ba 01       	movw	r22, r20
    31a8:	a9 01       	movw	r20, r18
    31aa:	0e 94 7f 17 	call	0x2efe	; 0x2efe <send_cmd>
    31ae:	88 23       	and	r24, r24
    31b0:	21 f5       	brne	.+72     	; 0x31fa <disk_read+0x92>
    31b2:	ce 01       	movw	r24, r28
    31b4:	60 e0       	ldi	r22, 0x00	; 0
    31b6:	72 e0       	ldi	r23, 0x02	; 2
    31b8:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <rcvr_datablock>
    31bc:	00 e0       	ldi	r16, 0x00	; 0
    31be:	89 2b       	or	r24, r25
    31c0:	e1 f4       	brne	.+56     	; 0x31fa <disk_read+0x92>
    31c2:	01 e0       	ldi	r16, 0x01	; 1
    31c4:	1a c0       	rjmp	.+52     	; 0x31fa <disk_read+0x92>
			&& rcvr_datablock(buff, 512))
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
    31c6:	82 e5       	ldi	r24, 0x52	; 82
    31c8:	ba 01       	movw	r22, r20
    31ca:	a9 01       	movw	r20, r18
    31cc:	0e 94 7f 17 	call	0x2efe	; 0x2efe <send_cmd>
    31d0:	88 23       	and	r24, r24
    31d2:	99 f4       	brne	.+38     	; 0x31fa <disk_read+0x92>
			do {
				if (!rcvr_datablock(buff, 512)) break;
    31d4:	ce 01       	movw	r24, r28
    31d6:	60 e0       	ldi	r22, 0x00	; 0
    31d8:	72 e0       	ldi	r23, 0x02	; 2
    31da:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <rcvr_datablock>
    31de:	89 2b       	or	r24, r25
    31e0:	29 f0       	breq	.+10     	; 0x31ec <disk_read+0x84>
				buff += 512;
			} while (--count);
    31e2:	01 50       	subi	r16, 0x01	; 1
    31e4:	19 f0       	breq	.+6      	; 0x31ec <disk_read+0x84>
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
			do {
				if (!rcvr_datablock(buff, 512)) break;
				buff += 512;
    31e6:	c0 50       	subi	r28, 0x00	; 0
    31e8:	de 4f       	sbci	r29, 0xFE	; 254
    31ea:	f4 cf       	rjmp	.-24     	; 0x31d4 <disk_read+0x6c>
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
    31ec:	8c e4       	ldi	r24, 0x4C	; 76
    31ee:	40 e0       	ldi	r20, 0x00	; 0
    31f0:	50 e0       	ldi	r21, 0x00	; 0
    31f2:	60 e0       	ldi	r22, 0x00	; 0
    31f4:	70 e0       	ldi	r23, 0x00	; 0
    31f6:	0e 94 7f 17 	call	0x2efe	; 0x2efe <send_cmd>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    31fa:	28 9a       	sbi	0x05, 0	; 5
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    31fc:	8f ef       	ldi	r24, 0xFF	; 255
    31fe:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    3200:	0d b4       	in	r0, 0x2d	; 45
    3202:	07 fe       	sbrs	r0, 7
    3204:	fd cf       	rjmp	.-6      	; 0x3200 <disk_read+0x98>
	return SPDR;
    3206:	8e b5       	in	r24, 0x2e	; 46
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
    3208:	20 e0       	ldi	r18, 0x00	; 0
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	00 23       	and	r16, r16
    320e:	29 f0       	breq	.+10     	; 0x321a <disk_read+0xb2>
    3210:	21 e0       	ldi	r18, 0x01	; 1
    3212:	30 e0       	ldi	r19, 0x00	; 0
    3214:	02 c0       	rjmp	.+4      	; 0x321a <disk_read+0xb2>
    3216:	24 e0       	ldi	r18, 0x04	; 4
    3218:	30 e0       	ldi	r19, 0x00	; 0
}
    321a:	c9 01       	movw	r24, r18
    321c:	df 91       	pop	r29
    321e:	cf 91       	pop	r28
    3220:	0f 91       	pop	r16
    3222:	08 95       	ret

00003224 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
    3224:	cf 92       	push	r12
    3226:	df 92       	push	r13
    3228:	ef 92       	push	r14
    322a:	ff 92       	push	r15
    322c:	0f 93       	push	r16
    322e:	cf 93       	push	r28
    3230:	df 93       	push	r29
    3232:	eb 01       	movw	r28, r22
    3234:	69 01       	movw	r12, r18
    3236:	7a 01       	movw	r14, r20
	if (drv || !count) return RES_PARERR;
    3238:	88 23       	and	r24, r24
    323a:	09 f0       	breq	.+2      	; 0x323e <disk_write+0x1a>
    323c:	5f c0       	rjmp	.+190    	; 0x32fc <disk_write+0xd8>
    323e:	00 23       	and	r16, r16
    3240:	09 f4       	brne	.+2      	; 0x3244 <disk_write+0x20>
    3242:	5c c0       	rjmp	.+184    	; 0x32fc <disk_write+0xd8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    3244:	80 91 0e 01 	lds	r24, 0x010E
    3248:	80 ff       	sbrs	r24, 0
    324a:	03 c0       	rjmp	.+6      	; 0x3252 <disk_write+0x2e>
    324c:	23 e0       	ldi	r18, 0x03	; 3
    324e:	30 e0       	ldi	r19, 0x00	; 0
    3250:	57 c0       	rjmp	.+174    	; 0x3300 <disk_write+0xdc>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    3252:	80 91 0e 01 	lds	r24, 0x010E
    3256:	82 ff       	sbrs	r24, 2
    3258:	03 c0       	rjmp	.+6      	; 0x3260 <disk_write+0x3c>
    325a:	22 e0       	ldi	r18, 0x02	; 2
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	50 c0       	rjmp	.+160    	; 0x3300 <disk_write+0xdc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    3260:	80 91 c1 02 	lds	r24, 0x02C1
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	83 fd       	sbrc	r24, 3
    3268:	07 c0       	rjmp	.+14     	; 0x3278 <disk_write+0x54>
    326a:	79 e0       	ldi	r23, 0x09	; 9
    326c:	cc 0c       	add	r12, r12
    326e:	dd 1c       	adc	r13, r13
    3270:	ee 1c       	adc	r14, r14
    3272:	ff 1c       	adc	r15, r15
    3274:	7a 95       	dec	r23
    3276:	d1 f7       	brne	.-12     	; 0x326c <disk_write+0x48>

	if (count == 1) {	/* Single block write */
    3278:	01 30       	cpi	r16, 0x01	; 1
    327a:	69 f4       	brne	.+26     	; 0x3296 <disk_write+0x72>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    327c:	88 e5       	ldi	r24, 0x58	; 88
    327e:	b7 01       	movw	r22, r14
    3280:	a6 01       	movw	r20, r12
    3282:	0e 94 7f 17 	call	0x2efe	; 0x2efe <send_cmd>
    3286:	88 23       	and	r24, r24
    3288:	59 f5       	brne	.+86     	; 0x32e0 <disk_write+0xbc>
    328a:	ce 01       	movw	r24, r28
    328c:	6e ef       	ldi	r22, 0xFE	; 254
    328e:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <xmit_datablock>
    3292:	00 e0       	ldi	r16, 0x00	; 0
    3294:	22 c0       	rjmp	.+68     	; 0x32da <disk_write+0xb6>
			&& xmit_datablock(buff, 0xFE))
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    3296:	86 70       	andi	r24, 0x06	; 6
    3298:	90 70       	andi	r25, 0x00	; 0
    329a:	89 2b       	or	r24, r25
    329c:	39 f0       	breq	.+14     	; 0x32ac <disk_write+0x88>
    329e:	40 2f       	mov	r20, r16
    32a0:	50 e0       	ldi	r21, 0x00	; 0
    32a2:	60 e0       	ldi	r22, 0x00	; 0
    32a4:	70 e0       	ldi	r23, 0x00	; 0
    32a6:	87 ed       	ldi	r24, 0xD7	; 215
    32a8:	0e 94 7f 17 	call	0x2efe	; 0x2efe <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    32ac:	89 e5       	ldi	r24, 0x59	; 89
    32ae:	b7 01       	movw	r22, r14
    32b0:	a6 01       	movw	r20, r12
    32b2:	0e 94 7f 17 	call	0x2efe	; 0x2efe <send_cmd>
    32b6:	88 23       	and	r24, r24
    32b8:	99 f4       	brne	.+38     	; 0x32e0 <disk_write+0xbc>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    32ba:	ce 01       	movw	r24, r28
    32bc:	6c ef       	ldi	r22, 0xFC	; 252
    32be:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <xmit_datablock>
    32c2:	89 2b       	or	r24, r25
    32c4:	29 f0       	breq	.+10     	; 0x32d0 <disk_write+0xac>
				buff += 512;
			} while (--count);
    32c6:	01 50       	subi	r16, 0x01	; 1
    32c8:	19 f0       	breq	.+6      	; 0x32d0 <disk_write+0xac>
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
    32ca:	c0 50       	subi	r28, 0x00	; 0
    32cc:	de 4f       	sbci	r29, 0xFE	; 254
    32ce:	f5 cf       	rjmp	.-22     	; 0x32ba <disk_write+0x96>
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    32d0:	80 e0       	ldi	r24, 0x00	; 0
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	6d ef       	ldi	r22, 0xFD	; 253
    32d6:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <xmit_datablock>
    32da:	89 2b       	or	r24, r25
    32dc:	09 f4       	brne	.+2      	; 0x32e0 <disk_write+0xbc>
    32de:	01 e0       	ldi	r16, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    32e0:	28 9a       	sbi	0x05, 0	; 5
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    32e2:	8f ef       	ldi	r24, 0xFF	; 255
    32e4:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    32e6:	0d b4       	in	r0, 0x2d	; 45
    32e8:	07 fe       	sbrs	r0, 7
    32ea:	fd cf       	rjmp	.-6      	; 0x32e6 <disk_write+0xc2>
	return SPDR;
    32ec:	8e b5       	in	r24, 0x2e	; 46
				count = 1;
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
    32ee:	20 e0       	ldi	r18, 0x00	; 0
    32f0:	30 e0       	ldi	r19, 0x00	; 0
    32f2:	00 23       	and	r16, r16
    32f4:	29 f0       	breq	.+10     	; 0x3300 <disk_write+0xdc>
    32f6:	21 e0       	ldi	r18, 0x01	; 1
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	02 c0       	rjmp	.+4      	; 0x3300 <disk_write+0xdc>
    32fc:	24 e0       	ldi	r18, 0x04	; 4
    32fe:	30 e0       	ldi	r19, 0x00	; 0
}
    3300:	c9 01       	movw	r24, r18
    3302:	df 91       	pop	r29
    3304:	cf 91       	pop	r28
    3306:	0f 91       	pop	r16
    3308:	ff 90       	pop	r15
    330a:	ef 90       	pop	r14
    330c:	df 90       	pop	r13
    330e:	cf 90       	pop	r12
    3310:	08 95       	ret

00003312 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    3312:	a0 e1       	ldi	r26, 0x10	; 16
    3314:	b0 e0       	ldi	r27, 0x00	; 0
    3316:	ef e8       	ldi	r30, 0x8F	; 143
    3318:	f9 e1       	ldi	r31, 0x19	; 25
    331a:	0c 94 bc 2e 	jmp	0x5d78	; 0x5d78 <__prologue_saves__+0x1a>
    331e:	8a 01       	movw	r16, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
    3320:	88 23       	and	r24, r24
    3322:	09 f0       	breq	.+2      	; 0x3326 <disk_ioctl+0x14>
    3324:	8b c1       	rjmp	.+790    	; 0x363c <disk_ioctl+0x32a>

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
    3326:	64 30       	cpi	r22, 0x04	; 4
    3328:	01 f5       	brne	.+64     	; 0x336a <disk_ioctl+0x58>
		switch (*ptr) {
    332a:	fa 01       	movw	r30, r20
    332c:	80 81       	ld	r24, Z
    332e:	81 30       	cpi	r24, 0x01	; 1
    3330:	81 f0       	breq	.+32     	; 0x3352 <disk_ioctl+0x40>
    3332:	81 30       	cpi	r24, 0x01	; 1
    3334:	20 f0       	brcs	.+8      	; 0x333e <disk_ioctl+0x2c>
    3336:	82 30       	cpi	r24, 0x02	; 2
    3338:	09 f0       	breq	.+2      	; 0x333c <disk_ioctl+0x2a>
    333a:	80 c1       	rjmp	.+768    	; 0x363c <disk_ioctl+0x32a>
    333c:	10 c0       	rjmp	.+32     	; 0x335e <disk_ioctl+0x4c>
}

static
void power_off (void)
{
   CS_LOW();            /* Wait for card ready */
    333e:	28 98       	cbi	0x05, 0	; 5
   wait_ready();
    3340:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <wait_ready>
   SPCR = 0;
    3344:	1c bc       	out	0x2c, r1	; 44
   Stat |= STA_NOINIT;      /* Set STA_NOINIT */
    3346:	80 91 0e 01 	lds	r24, 0x010E
    334a:	81 60       	ori	r24, 0x01	; 1
    334c:	80 93 0e 01 	sts	0x010E, r24
    3350:	09 c0       	rjmp	.+18     	; 0x3364 <disk_ioctl+0x52>
#if (defined SD_PWR_PIN | defined SD_PWR_PORT)
   DDRC|=(1<<SD_PWR_PIN);          // Turns on PWR pin as output
   SD_PWR_PORT|=(1<<SD_PWR_PIN);   // Drives PWR pin high
#endif

   DDRC|=(1<<SD_CS_PIN);          // Turns on CS pin as output
    3352:	38 9a       	sbi	0x07, 0	; 7
   DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)| (1<<DD_SS);
    3354:	87 e0       	ldi	r24, 0x07	; 7
    3356:	84 b9       	out	0x04, r24	; 4
   SPCR = (1<<SPE)|(1<<MSTR); /* Initialize SPI port (Mode 0) */ 
    3358:	80 e5       	ldi	r24, 0x50	; 80
    335a:	8c bd       	out	0x2c, r24	; 44
    335c:	03 c0       	rjmp	.+6      	; 0x3364 <disk_ioctl+0x52>
		case 1:		/* Sub control code == 1 (POWER_ON) */
			power_on();				/* Power on */
			res = RES_OK;
			break;
		case 2:		/* Sub control code == 2 (POWER_GET) */
			*(ptr+1) = (BYTE)chk_power();
    335e:	81 e0       	ldi	r24, 0x01	; 1
    3360:	fa 01       	movw	r30, r20
    3362:	81 83       	std	Z+1, r24	; 0x01
    3364:	20 e0       	ldi	r18, 0x00	; 0
    3366:	30 e0       	ldi	r19, 0x00	; 0
    3368:	6b c1       	rjmp	.+726    	; 0x3640 <disk_ioctl+0x32e>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
    336a:	80 91 0e 01 	lds	r24, 0x010E
    336e:	80 ff       	sbrs	r24, 0
    3370:	03 c0       	rjmp	.+6      	; 0x3378 <disk_ioctl+0x66>
    3372:	23 e0       	ldi	r18, 0x03	; 3
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	64 c1       	rjmp	.+712    	; 0x3640 <disk_ioctl+0x32e>

		switch (ctrl) {
    3378:	e6 2f       	mov	r30, r22
    337a:	f0 e0       	ldi	r31, 0x00	; 0
    337c:	ef 30       	cpi	r30, 0x0F	; 15
    337e:	f1 05       	cpc	r31, r1
    3380:	20 f4       	brcc	.+8      	; 0x338a <disk_ioctl+0x78>
    3382:	e6 5b       	subi	r30, 0xB6	; 182
    3384:	ff 4f       	sbci	r31, 0xFF	; 255
    3386:	0c 94 e6 2e 	jmp	0x5dcc	; 0x5dcc <__tablejump2__>
    338a:	24 e0       	ldi	r18, 0x04	; 4
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	4e c1       	rjmp	.+668    	; 0x362c <disk_ioctl+0x31a>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
    3390:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <select>
    3394:	89 2b       	or	r24, r25
    3396:	09 f4       	brne	.+2      	; 0x339a <disk_ioctl+0x88>
    3398:	47 c1       	rjmp	.+654    	; 0x3628 <disk_ioctl+0x316>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    339a:	28 9a       	sbi	0x05, 0	; 5
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    339c:	8f ef       	ldi	r24, 0xFF	; 255
    339e:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    33a0:	0d b4       	in	r0, 0x2d	; 45
    33a2:	07 fe       	sbrs	r0, 7
    33a4:	fd cf       	rjmp	.-6      	; 0x33a0 <disk_ioctl+0x8e>
	return SPDR;
    33a6:	8e b5       	in	r24, 0x2e	; 46
    33a8:	f7 c0       	rjmp	.+494    	; 0x3598 <disk_ioctl+0x286>
				deselect();
			}
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    33aa:	89 e4       	ldi	r24, 0x49	; 73
    33ac:	40 e0       	ldi	r20, 0x00	; 0
    33ae:	50 e0       	ldi	r21, 0x00	; 0
    33b0:	60 e0       	ldi	r22, 0x00	; 0
    33b2:	70 e0       	ldi	r23, 0x00	; 0
    33b4:	0e 94 7f 17 	call	0x2efe	; 0x2efe <send_cmd>
    33b8:	88 23       	and	r24, r24
    33ba:	09 f0       	breq	.+2      	; 0x33be <disk_ioctl+0xac>
    33bc:	35 c1       	rjmp	.+618    	; 0x3628 <disk_ioctl+0x316>
    33be:	ce 01       	movw	r24, r28
    33c0:	01 96       	adiw	r24, 0x01	; 1
    33c2:	60 e1       	ldi	r22, 0x10	; 16
    33c4:	70 e0       	ldi	r23, 0x00	; 0
    33c6:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <rcvr_datablock>
    33ca:	89 2b       	or	r24, r25
    33cc:	09 f4       	brne	.+2      	; 0x33d0 <disk_ioctl+0xbe>
    33ce:	2c c1       	rjmp	.+600    	; 0x3628 <disk_ioctl+0x316>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    33d0:	89 81       	ldd	r24, Y+1	; 0x01
    33d2:	82 95       	swap	r24
    33d4:	86 95       	lsr	r24
    33d6:	86 95       	lsr	r24
    33d8:	83 70       	andi	r24, 0x03	; 3
    33da:	7a 85       	ldd	r23, Y+10	; 0x0a
    33dc:	49 85       	ldd	r20, Y+9	; 0x09
    33de:	81 30       	cpi	r24, 0x01	; 1
    33e0:	89 f4       	brne	.+34     	; 0x3404 <disk_ioctl+0xf2>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
    33e2:	87 2f       	mov	r24, r23
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	01 96       	adiw	r24, 0x01	; 1
    33e8:	34 2f       	mov	r19, r20
    33ea:	20 e0       	ldi	r18, 0x00	; 0
    33ec:	82 0f       	add	r24, r18
    33ee:	93 1f       	adc	r25, r19
    33f0:	a0 e0       	ldi	r26, 0x00	; 0
    33f2:	b0 e0       	ldi	r27, 0x00	; 0
    33f4:	2a e0       	ldi	r18, 0x0A	; 10
    33f6:	88 0f       	add	r24, r24
    33f8:	99 1f       	adc	r25, r25
    33fa:	aa 1f       	adc	r26, r26
    33fc:	bb 1f       	adc	r27, r27
    33fe:	2a 95       	dec	r18
    3400:	d1 f7       	brne	.-12     	; 0x33f6 <disk_ioctl+0xe4>
    3402:	c5 c0       	rjmp	.+394    	; 0x358e <disk_ioctl+0x27c>
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
    3404:	42 95       	swap	r20
    3406:	46 95       	lsr	r20
    3408:	46 95       	lsr	r20
    340a:	43 70       	andi	r20, 0x03	; 3
    340c:	28 85       	ldd	r18, Y+8	; 0x08
    340e:	30 e0       	ldi	r19, 0x00	; 0
    3410:	22 0f       	add	r18, r18
    3412:	33 1f       	adc	r19, r19
    3414:	22 0f       	add	r18, r18
    3416:	33 1f       	adc	r19, r19
    3418:	24 0f       	add	r18, r20
    341a:	31 1d       	adc	r19, r1
    341c:	2f 5f       	subi	r18, 0xFF	; 255
    341e:	3f 4f       	sbci	r19, 0xFF	; 255
    3420:	8f 81       	ldd	r24, Y+7	; 0x07
    3422:	90 e0       	ldi	r25, 0x00	; 0
    3424:	83 70       	andi	r24, 0x03	; 3
    3426:	90 70       	andi	r25, 0x00	; 0
    3428:	98 2f       	mov	r25, r24
    342a:	88 27       	eor	r24, r24
    342c:	99 0f       	add	r25, r25
    342e:	99 0f       	add	r25, r25
    3430:	28 0f       	add	r18, r24
    3432:	39 1f       	adc	r19, r25
    3434:	40 e0       	ldi	r20, 0x00	; 0
    3436:	50 e0       	ldi	r21, 0x00	; 0
    3438:	8e 81       	ldd	r24, Y+6	; 0x06
    343a:	8f 70       	andi	r24, 0x0F	; 15
    343c:	6b 85       	ldd	r22, Y+11	; 0x0b
    343e:	66 1f       	adc	r22, r22
    3440:	66 27       	eor	r22, r22
    3442:	66 1f       	adc	r22, r22
    3444:	86 0f       	add	r24, r22
    3446:	8e 5f       	subi	r24, 0xFE	; 254
    3448:	73 70       	andi	r23, 0x03	; 3
    344a:	77 0f       	add	r23, r23
    344c:	87 0f       	add	r24, r23
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	09 97       	sbiw	r24, 0x09	; 9
    3452:	04 c0       	rjmp	.+8      	; 0x345c <disk_ioctl+0x14a>
    3454:	22 0f       	add	r18, r18
    3456:	33 1f       	adc	r19, r19
    3458:	44 1f       	adc	r20, r20
    345a:	55 1f       	adc	r21, r21
    345c:	8a 95       	dec	r24
    345e:	d2 f7       	brpl	.-12     	; 0x3454 <disk_ioctl+0x142>
    3460:	f8 01       	movw	r30, r16
    3462:	20 83       	st	Z, r18
    3464:	31 83       	std	Z+1, r19	; 0x01
    3466:	42 83       	std	Z+2, r20	; 0x02
    3468:	53 83       	std	Z+3, r21	; 0x03
    346a:	96 c0       	rjmp	.+300    	; 0x3598 <disk_ioctl+0x286>
				res = RES_OK;
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
    346c:	80 e0       	ldi	r24, 0x00	; 0
    346e:	92 e0       	ldi	r25, 0x02	; 2
    3470:	fa 01       	movw	r30, r20
    3472:	91 83       	std	Z+1, r25	; 0x01
    3474:	80 83       	st	Z, r24
    3476:	90 c0       	rjmp	.+288    	; 0x3598 <disk_ioctl+0x286>
			res = RES_OK;
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
    3478:	80 91 c1 02 	lds	r24, 0x02C1
    347c:	f8 2e       	mov	r15, r24
    347e:	82 ff       	sbrs	r24, 2
    3480:	31 c0       	rjmp	.+98     	; 0x34e4 <disk_ioctl+0x1d2>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    3482:	8d ec       	ldi	r24, 0xCD	; 205
    3484:	40 e0       	ldi	r20, 0x00	; 0
    3486:	50 e0       	ldi	r21, 0x00	; 0
    3488:	60 e0       	ldi	r22, 0x00	; 0
    348a:	70 e0       	ldi	r23, 0x00	; 0
    348c:	0e 94 7f 17 	call	0x2efe	; 0x2efe <send_cmd>
    3490:	88 23       	and	r24, r24
    3492:	09 f0       	breq	.+2      	; 0x3496 <disk_ioctl+0x184>
    3494:	c9 c0       	rjmp	.+402    	; 0x3628 <disk_ioctl+0x316>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    3496:	8f ef       	ldi	r24, 0xFF	; 255
    3498:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    349a:	0d b4       	in	r0, 0x2d	; 45
    349c:	07 fe       	sbrs	r0, 7
    349e:	fd cf       	rjmp	.-6      	; 0x349a <disk_ioctl+0x188>
	return SPDR;
    34a0:	8e b5       	in	r24, 0x2e	; 46

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    34a2:	ce 01       	movw	r24, r28
    34a4:	01 96       	adiw	r24, 0x01	; 1
    34a6:	60 e1       	ldi	r22, 0x10	; 16
    34a8:	70 e0       	ldi	r23, 0x00	; 0
    34aa:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <rcvr_datablock>
    34ae:	89 2b       	or	r24, r25
    34b0:	09 f4       	brne	.+2      	; 0x34b4 <disk_ioctl+0x1a2>
    34b2:	ba c0       	rjmp	.+372    	; 0x3628 <disk_ioctl+0x316>
    34b4:	80 e3       	ldi	r24, 0x30	; 48
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    34b6:	9f ef       	ldi	r25, 0xFF	; 255
    34b8:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    34ba:	0d b4       	in	r0, 0x2d	; 45
    34bc:	07 fe       	sbrs	r0, 7
    34be:	fd cf       	rjmp	.-6      	; 0x34ba <disk_ioctl+0x1a8>
	return SPDR;
    34c0:	2e b5       	in	r18, 0x2e	; 46
		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
						for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
    34c2:	81 50       	subi	r24, 0x01	; 1
    34c4:	c9 f7       	brne	.-14     	; 0x34b8 <disk_ioctl+0x1a6>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
    34c6:	2b 85       	ldd	r18, Y+11	; 0x0b
    34c8:	22 95       	swap	r18
    34ca:	2f 70       	andi	r18, 0x0F	; 15
    34cc:	80 e1       	ldi	r24, 0x10	; 16
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	a0 e0       	ldi	r26, 0x00	; 0
    34d2:	b0 e0       	ldi	r27, 0x00	; 0
    34d4:	04 c0       	rjmp	.+8      	; 0x34de <disk_ioctl+0x1cc>
    34d6:	88 0f       	add	r24, r24
    34d8:	99 1f       	adc	r25, r25
    34da:	aa 1f       	adc	r26, r26
    34dc:	bb 1f       	adc	r27, r27
    34de:	2a 95       	dec	r18
    34e0:	d2 f7       	brpl	.-12     	; 0x34d6 <disk_ioctl+0x1c4>
    34e2:	55 c0       	rjmp	.+170    	; 0x358e <disk_ioctl+0x27c>
						res = RES_OK;
					}
				}
			} else {					/* SDC ver 1.XX or MMC */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    34e4:	89 e4       	ldi	r24, 0x49	; 73
    34e6:	40 e0       	ldi	r20, 0x00	; 0
    34e8:	50 e0       	ldi	r21, 0x00	; 0
    34ea:	60 e0       	ldi	r22, 0x00	; 0
    34ec:	70 e0       	ldi	r23, 0x00	; 0
    34ee:	0e 94 7f 17 	call	0x2efe	; 0x2efe <send_cmd>
    34f2:	88 23       	and	r24, r24
    34f4:	09 f0       	breq	.+2      	; 0x34f8 <disk_ioctl+0x1e6>
    34f6:	98 c0       	rjmp	.+304    	; 0x3628 <disk_ioctl+0x316>
    34f8:	ce 01       	movw	r24, r28
    34fa:	01 96       	adiw	r24, 0x01	; 1
    34fc:	60 e1       	ldi	r22, 0x10	; 16
    34fe:	70 e0       	ldi	r23, 0x00	; 0
    3500:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <rcvr_datablock>
    3504:	89 2b       	or	r24, r25
    3506:	09 f4       	brne	.+2      	; 0x350a <disk_ioctl+0x1f8>
    3508:	8f c0       	rjmp	.+286    	; 0x3628 <disk_ioctl+0x316>
    350a:	4b 85       	ldd	r20, Y+11	; 0x0b
    350c:	8c 85       	ldd	r24, Y+12	; 0x0c
					if (CardType & CT_SD1) {	/* SDC ver 1.XX */
    350e:	f1 fe       	sbrs	r15, 1
    3510:	1b c0       	rjmp	.+54     	; 0x3548 <disk_ioctl+0x236>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    3512:	88 1f       	adc	r24, r24
    3514:	88 27       	eor	r24, r24
    3516:	88 1f       	adc	r24, r24
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	01 96       	adiw	r24, 0x01	; 1
    351c:	24 2f       	mov	r18, r20
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	2f 73       	andi	r18, 0x3F	; 63
    3522:	30 70       	andi	r19, 0x00	; 0
    3524:	22 0f       	add	r18, r18
    3526:	33 1f       	adc	r19, r19
    3528:	82 0f       	add	r24, r18
    352a:	93 1f       	adc	r25, r19
    352c:	2e 85       	ldd	r18, Y+14	; 0x0e
    352e:	22 95       	swap	r18
    3530:	26 95       	lsr	r18
    3532:	26 95       	lsr	r18
    3534:	23 70       	andi	r18, 0x03	; 3
    3536:	30 e0       	ldi	r19, 0x00	; 0
    3538:	21 50       	subi	r18, 0x01	; 1
    353a:	30 40       	sbci	r19, 0x00	; 0
    353c:	02 c0       	rjmp	.+4      	; 0x3542 <disk_ioctl+0x230>
    353e:	88 0f       	add	r24, r24
    3540:	99 1f       	adc	r25, r25
    3542:	2a 95       	dec	r18
    3544:	e2 f7       	brpl	.-8      	; 0x353e <disk_ioctl+0x22c>
    3546:	21 c0       	rjmp	.+66     	; 0x358a <disk_ioctl+0x278>
					} else {					/* MMC */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    3548:	28 2f       	mov	r18, r24
    354a:	30 e0       	ldi	r19, 0x00	; 0
    354c:	23 70       	andi	r18, 0x03	; 3
    354e:	30 70       	andi	r19, 0x00	; 0
    3550:	f3 e0       	ldi	r31, 0x03	; 3
    3552:	22 0f       	add	r18, r18
    3554:	33 1f       	adc	r19, r19
    3556:	fa 95       	dec	r31
    3558:	e1 f7       	brne	.-8      	; 0x3552 <disk_ioctl+0x240>
    355a:	82 95       	swap	r24
    355c:	86 95       	lsr	r24
    355e:	87 70       	andi	r24, 0x07	; 7
    3560:	28 0f       	add	r18, r24
    3562:	31 1d       	adc	r19, r1
    3564:	2f 5f       	subi	r18, 0xFF	; 255
    3566:	3f 4f       	sbci	r19, 0xFF	; 255
    3568:	84 2f       	mov	r24, r20
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	8c 77       	andi	r24, 0x7C	; 124
    356e:	90 70       	andi	r25, 0x00	; 0
    3570:	95 95       	asr	r25
    3572:	87 95       	ror	r24
    3574:	95 95       	asr	r25
    3576:	87 95       	ror	r24
    3578:	01 96       	adiw	r24, 0x01	; 1
    357a:	ac 01       	movw	r20, r24
    357c:	24 9f       	mul	r18, r20
    357e:	c0 01       	movw	r24, r0
    3580:	25 9f       	mul	r18, r21
    3582:	90 0d       	add	r25, r0
    3584:	34 9f       	mul	r19, r20
    3586:	90 0d       	add	r25, r0
    3588:	11 24       	eor	r1, r1
    358a:	a0 e0       	ldi	r26, 0x00	; 0
    358c:	b0 e0       	ldi	r27, 0x00	; 0
    358e:	f8 01       	movw	r30, r16
    3590:	80 83       	st	Z, r24
    3592:	91 83       	std	Z+1, r25	; 0x01
    3594:	a2 83       	std	Z+2, r26	; 0x02
    3596:	b3 83       	std	Z+3, r27	; 0x03
    3598:	20 e0       	ldi	r18, 0x00	; 0
    359a:	30 e0       	ldi	r19, 0x00	; 0
    359c:	47 c0       	rjmp	.+142    	; 0x362c <disk_ioctl+0x31a>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
    359e:	80 91 c1 02 	lds	r24, 0x02C1
    35a2:	fa 01       	movw	r30, r20
    35a4:	80 83       	st	Z, r24
    35a6:	f8 cf       	rjmp	.-16     	; 0x3598 <disk_ioctl+0x286>
			res = RES_OK;
			break;

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    35a8:	89 e4       	ldi	r24, 0x49	; 73
    35aa:	01 c0       	rjmp	.+2      	; 0x35ae <disk_ioctl+0x29c>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    35ac:	8a e4       	ldi	r24, 0x4A	; 74
    35ae:	40 e0       	ldi	r20, 0x00	; 0
    35b0:	50 e0       	ldi	r21, 0x00	; 0
    35b2:	60 e0       	ldi	r22, 0x00	; 0
    35b4:	70 e0       	ldi	r23, 0x00	; 0
    35b6:	0e 94 7f 17 	call	0x2efe	; 0x2efe <send_cmd>
    35ba:	88 23       	and	r24, r24
    35bc:	a9 f5       	brne	.+106    	; 0x3628 <disk_ioctl+0x316>
    35be:	c8 01       	movw	r24, r16
    35c0:	60 e1       	ldi	r22, 0x10	; 16
    35c2:	70 e0       	ldi	r23, 0x00	; 0
    35c4:	2b c0       	rjmp	.+86     	; 0x361c <disk_ioctl+0x30a>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    35c6:	8a e7       	ldi	r24, 0x7A	; 122
    35c8:	40 e0       	ldi	r20, 0x00	; 0
    35ca:	50 e0       	ldi	r21, 0x00	; 0
    35cc:	60 e0       	ldi	r22, 0x00	; 0
    35ce:	70 e0       	ldi	r23, 0x00	; 0
    35d0:	0e 94 7f 17 	call	0x2efe	; 0x2efe <send_cmd>
    35d4:	88 23       	and	r24, r24
    35d6:	41 f5       	brne	.+80     	; 0x3628 <disk_ioctl+0x316>
    35d8:	f8 01       	movw	r30, r16
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    35da:	9f ef       	ldi	r25, 0xFF	; 255
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    35dc:	98 01       	movw	r18, r16
    35de:	2d 5f       	subi	r18, 0xFD	; 253
    35e0:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    35e2:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    35e4:	0d b4       	in	r0, 0x2d	; 45
    35e6:	07 fe       	sbrs	r0, 7
    35e8:	fd cf       	rjmp	.-6      	; 0x35e4 <disk_ioctl+0x2d2>
	return SPDR;
    35ea:	8e b5       	in	r24, 0x2e	; 46
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    35ec:	80 83       	st	Z, r24
    35ee:	e2 17       	cp	r30, r18
    35f0:	f3 07       	cpc	r31, r19
    35f2:	91 f2       	breq	.-92     	; 0x3598 <disk_ioctl+0x286>
    35f4:	31 96       	adiw	r30, 0x01	; 1
    35f6:	f5 cf       	rjmp	.-22     	; 0x35e2 <disk_ioctl+0x2d0>
				res = RES_OK;
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    35f8:	8d ec       	ldi	r24, 0xCD	; 205
    35fa:	40 e0       	ldi	r20, 0x00	; 0
    35fc:	50 e0       	ldi	r21, 0x00	; 0
    35fe:	60 e0       	ldi	r22, 0x00	; 0
    3600:	70 e0       	ldi	r23, 0x00	; 0
    3602:	0e 94 7f 17 	call	0x2efe	; 0x2efe <send_cmd>
    3606:	88 23       	and	r24, r24
    3608:	79 f4       	brne	.+30     	; 0x3628 <disk_ioctl+0x316>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    360a:	8f ef       	ldi	r24, 0xFF	; 255
    360c:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    360e:	0d b4       	in	r0, 0x2d	; 45
    3610:	07 fe       	sbrs	r0, 7
    3612:	fd cf       	rjmp	.-6      	; 0x360e <disk_ioctl+0x2fc>
	return SPDR;
    3614:	8e b5       	in	r24, 0x2e	; 46
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
				rcvr_spi();
				if (rcvr_datablock(ptr, 64))
    3616:	c8 01       	movw	r24, r16
    3618:	60 e4       	ldi	r22, 0x40	; 64
    361a:	70 e0       	ldi	r23, 0x00	; 0
    361c:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <rcvr_datablock>
    3620:	20 e0       	ldi	r18, 0x00	; 0
    3622:	30 e0       	ldi	r19, 0x00	; 0
    3624:	89 2b       	or	r24, r25
    3626:	11 f4       	brne	.+4      	; 0x362c <disk_ioctl+0x31a>
    3628:	21 e0       	ldi	r18, 0x01	; 1
    362a:	30 e0       	ldi	r19, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    362c:	28 9a       	sbi	0x05, 0	; 5
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    362e:	8f ef       	ldi	r24, 0xFF	; 255
    3630:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    3632:	0d b4       	in	r0, 0x2d	; 45
    3634:	07 fe       	sbrs	r0, 7
    3636:	fd cf       	rjmp	.-6      	; 0x3632 <disk_ioctl+0x320>
	return SPDR;
    3638:	8e b5       	in	r24, 0x2e	; 46
    363a:	02 c0       	rjmp	.+4      	; 0x3640 <disk_ioctl+0x32e>
    363c:	24 e0       	ldi	r18, 0x04	; 4
    363e:	30 e0       	ldi	r19, 0x00	; 0

		deselect();
	}

	return res;
}
    3640:	c9 01       	movw	r24, r18
    3642:	60 96       	adiw	r28, 0x10	; 16
    3644:	e5 e0       	ldi	r30, 0x05	; 5
    3646:	0c 94 d8 2e 	jmp	0x5db0	; 0x5db0 <__epilogue_restores__+0x1a>

0000364a <disk_timerproc>:

void disk_timerproc (void)
{
   BYTE n;

   n=Timer1;                  /* 100Hz decrement timer */
    364a:	80 91 bf 02 	lds	r24, 0x02BF
   if(n)
    364e:	88 23       	and	r24, r24
    3650:	19 f0       	breq	.+6      	; 0x3658 <disk_timerproc+0xe>
      Timer1 = --n;
    3652:	81 50       	subi	r24, 0x01	; 1
    3654:	80 93 bf 02 	sts	0x02BF, r24
   n=Timer2;
    3658:	80 91 c0 02 	lds	r24, 0x02C0
   if(n)
    365c:	88 23       	and	r24, r24
    365e:	19 f0       	breq	.+6      	; 0x3666 <disk_timerproc+0x1c>
      Timer2 = --n; 
    3660:	81 50       	subi	r24, 0x01	; 1
    3662:	80 93 c0 02 	sts	0x02C0, r24
    3666:	08 95       	ret

00003668 <RTC_read>:
	char dev,		/* Device address */
	uint8_t adr,		/* Read start address */
	uint8_t cnt,		/* Read byte count */
	uint8_t *buff		/* Read data buffer */
)
{
    3668:	a0 e0       	ldi	r26, 0x00	; 0
    366a:	b0 e0       	ldi	r27, 0x00	; 0
    366c:	ea e3       	ldi	r30, 0x3A	; 58
    366e:	fb e1       	ldi	r31, 0x1B	; 27
    3670:	0c 94 ba 2e 	jmp	0x5d74	; 0x5d74 <__prologue_saves__+0x16>
    3674:	f8 2e       	mov	r15, r24
    3676:	06 2f       	mov	r16, r22
    3678:	14 2f       	mov	r17, r20
    367a:	e2 2e       	mov	r14, r18
    367c:	d3 2e       	mov	r13, r19
	uint8_t *rbuff = buff;
	uint8_t n;
	BOOL start = FALSE;
	uint8_t data;

	if (!cnt) return FALSE;
    367e:	44 23       	and	r20, r20
    3680:	09 f4       	brne	.+2      	; 0x3684 <RTC_read+0x1c>
    3682:	45 c0       	rjmp	.+138    	; 0x370e <RTC_read+0xa6>
	/*
	 * Start in master write mode to transmit read start address to slave
	 */
	if (!(TWI_start())) return FALSE;	/* send start condition */				
    3684:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <TWI_start>
    3688:	89 2b       	or	r24, r25
    368a:	09 f4       	brne	.+2      	; 0x368e <RTC_read+0x26>
    368c:	40 c0       	rjmp	.+128    	; 0x370e <RTC_read+0xa6>

	TWI_send(dev | TW_WRITE);		/* Select device dev */
    368e:	8f 2d       	mov	r24, r15
    3690:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <TWI_send>
	if (!(TW_STATUS == TW_MT_SLA_ACK)) return FALSE;	/* Device could not be selected */
    3694:	80 91 b9 00 	lds	r24, 0x00B9
    3698:	88 7f       	andi	r24, 0xF8	; 248
    369a:	88 31       	cpi	r24, 0x18	; 24
    369c:	c1 f5       	brne	.+112    	; 0x370e <RTC_read+0xa6>

	/* Send address for reading start position to slave device */	
	TWI_send(adr);
    369e:	80 2f       	mov	r24, r16
    36a0:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <TWI_send>
	if (!(TW_STATUS == TW_MT_DATA_ACK)) return FALSE;	/* No ACK from device return */
    36a4:	80 91 b9 00 	lds	r24, 0x00B9
    36a8:	88 7f       	andi	r24, 0xF8	; 248
    36aa:	88 32       	cpi	r24, 0x28	; 40
    36ac:	81 f5       	brne	.+96     	; 0x370e <RTC_read+0xa6>

	/*
	 * Switch to master read mode to recive data from slave 
	 */	
	if (!(TWI_start())) return FALSE;	/* send start condition */
    36ae:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <TWI_start>
    36b2:	89 2b       	or	r24, r25
    36b4:	61 f1       	breq	.+88     	; 0x370e <RTC_read+0xa6>

	TWI_send(dev | TW_READ);		/* Select device dev */
    36b6:	8f 2d       	mov	r24, r15
    36b8:	81 60       	ori	r24, 0x01	; 1
    36ba:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <TWI_send>
	if (!(TW_STATUS == TW_MR_SLA_ACK)) return FALSE;	/* Device could not be selected */
    36be:	80 91 b9 00 	lds	r24, 0x00B9
    36c2:	88 7f       	andi	r24, 0xF8	; 248
    36c4:	80 34       	cpi	r24, 0x40	; 64
    36c6:	19 f5       	brne	.+70     	; 0x370e <RTC_read+0xa6>
    36c8:	8e 2d       	mov	r24, r14
    36ca:	9d 2d       	mov	r25, r13
    36cc:	9c 01       	movw	r18, r24
    36ce:	e9 01       	movw	r28, r18

	/* Device should start sending now and first stop when do not recive a ACK after data transmition */
	do {					/* Receive data */
		cnt--;
    36d0:	11 50       	subi	r17, 0x01	; 1
		if (cnt > 0) {
    36d2:	61 f0       	breq	.+24     	; 0x36ec <RTC_read+0x84>
			data = TWI_rcvr(TRUE);		/* Send ACK after reviced data */
    36d4:	81 e0       	ldi	r24, 0x01	; 1
    36d6:	90 e0       	ldi	r25, 0x00	; 0
    36d8:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <TWI_rcvr>
    36dc:	98 2f       	mov	r25, r24
			if (!(TW_STATUS == TW_MR_DATA_ACK)) return FALSE; /* Return if an ACK not where send after data recived */
    36de:	80 91 b9 00 	lds	r24, 0x00B9
    36e2:	88 7f       	andi	r24, 0xF8	; 248
    36e4:	80 35       	cpi	r24, 0x50	; 80
    36e6:	99 f4       	brne	.+38     	; 0x370e <RTC_read+0xa6>
			*rbuff++ = data;
    36e8:	99 93       	st	Y+, r25
    36ea:	f2 cf       	rjmp	.-28     	; 0x36d0 <RTC_read+0x68>
		} else {
			data = TWI_rcvr(FALSE);		/* Send NACK after reviced data */
    36ec:	80 e0       	ldi	r24, 0x00	; 0
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <TWI_rcvr>
			if (!(TW_STATUS == TW_MR_DATA_NACK)) return FALSE; /* Return if an NACK not where send after data recived */
    36f4:	80 91 b9 00 	lds	r24, 0x00B9
    36f8:	88 7f       	andi	r24, 0xF8	; 248
    36fa:	88 35       	cpi	r24, 0x58	; 88
    36fc:	41 f4       	brne	.+16     	; 0x370e <RTC_read+0xa6>
			*rbuff++ = TWDR;
    36fe:	80 91 bb 00 	lds	r24, 0x00BB
    3702:	88 83       	st	Y, r24
		}
	} while (cnt);
	
	TWI_stop(); /* send stop condition */
    3704:	0e 94 a5 26 	call	0x4d4a	; 0x4d4a <TWI_stop>
    3708:	21 e0       	ldi	r18, 0x01	; 1
    370a:	30 e0       	ldi	r19, 0x00	; 0
    370c:	02 c0       	rjmp	.+4      	; 0x3712 <RTC_read+0xaa>
	return TRUE;
    370e:	20 e0       	ldi	r18, 0x00	; 0
    3710:	30 e0       	ldi	r19, 0x00	; 0
}
    3712:	c9 01       	movw	r24, r18
    3714:	cd b7       	in	r28, 0x3d	; 61
    3716:	de b7       	in	r29, 0x3e	; 62
    3718:	e7 e0       	ldi	r30, 0x07	; 7
    371a:	0c 94 d6 2e 	jmp	0x5dac	; 0x5dac <__epilogue_restores__+0x16>

0000371e <rtc_gettime>:

BOOL rtc_gettime (RTC *rtc)
{
    371e:	a7 e0       	ldi	r26, 0x07	; 7
    3720:	b0 e0       	ldi	r27, 0x00	; 0
    3722:	e5 e9       	ldi	r30, 0x95	; 149
    3724:	fb e1       	ldi	r31, 0x1B	; 27
    3726:	0c 94 bd 2e 	jmp	0x5d7a	; 0x5d7a <__prologue_saves__+0x1c>
    372a:	8c 01       	movw	r16, r24

	uint8_t buf[7];

	if (!RTC_read(0b11010000, 0x01, 7, buf)) return FALSE;
    372c:	80 ed       	ldi	r24, 0xD0	; 208
    372e:	61 e0       	ldi	r22, 0x01	; 1
    3730:	47 e0       	ldi	r20, 0x07	; 7
    3732:	9e 01       	movw	r18, r28
    3734:	2f 5f       	subi	r18, 0xFF	; 255
    3736:	3f 4f       	sbci	r19, 0xFF	; 255
    3738:	0e 94 34 1b 	call	0x3668	; 0x3668 <RTC_read>
    373c:	89 2b       	or	r24, r25
    373e:	19 f4       	brne	.+6      	; 0x3746 <rtc_gettime+0x28>
    3740:	20 e0       	ldi	r18, 0x00	; 0
    3742:	30 e0       	ldi	r19, 0x00	; 0
    3744:	67 c0       	rjmp	.+206    	; 0x3814 <rtc_gettime+0xf6>

	rtc->sec = (buf[0] & 0x0F) + ((buf[0] >> 4) & 7) * 10;
    3746:	49 81       	ldd	r20, Y+1	; 0x01
    3748:	84 2f       	mov	r24, r20
    374a:	82 95       	swap	r24
    374c:	8f 70       	andi	r24, 0x0F	; 15
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	87 70       	andi	r24, 0x07	; 7
    3752:	90 70       	andi	r25, 0x00	; 0
    3754:	9c 01       	movw	r18, r24
    3756:	63 e0       	ldi	r22, 0x03	; 3
    3758:	22 0f       	add	r18, r18
    375a:	33 1f       	adc	r19, r19
    375c:	6a 95       	dec	r22
    375e:	e1 f7       	brne	.-8      	; 0x3758 <rtc_gettime+0x3a>
    3760:	88 0f       	add	r24, r24
    3762:	99 1f       	adc	r25, r25
    3764:	28 0f       	add	r18, r24
    3766:	39 1f       	adc	r19, r25
    3768:	4f 70       	andi	r20, 0x0F	; 15
    376a:	42 0f       	add	r20, r18
    376c:	f8 01       	movw	r30, r16
    376e:	47 83       	std	Z+7, r20	; 0x07
	rtc->min = (buf[1] & 0x0F) + (buf[1] >> 4) * 10;
    3770:	2a 81       	ldd	r18, Y+2	; 0x02
    3772:	82 2f       	mov	r24, r18
    3774:	82 95       	swap	r24
    3776:	8f 70       	andi	r24, 0x0F	; 15
    3778:	5a e0       	ldi	r21, 0x0A	; 10
    377a:	85 9f       	mul	r24, r21
    377c:	c0 01       	movw	r24, r0
    377e:	11 24       	eor	r1, r1
    3780:	2f 70       	andi	r18, 0x0F	; 15
    3782:	28 0f       	add	r18, r24
    3784:	26 83       	std	Z+6, r18	; 0x06
	rtc->hour = (buf[2] & 0x0F) + ((buf[2] >> 4) & 3) * 10;
    3786:	4b 81       	ldd	r20, Y+3	; 0x03
    3788:	84 2f       	mov	r24, r20
    378a:	82 95       	swap	r24
    378c:	8f 70       	andi	r24, 0x0F	; 15
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	83 70       	andi	r24, 0x03	; 3
    3792:	90 70       	andi	r25, 0x00	; 0
    3794:	9c 01       	movw	r18, r24
    3796:	b3 e0       	ldi	r27, 0x03	; 3
    3798:	22 0f       	add	r18, r18
    379a:	33 1f       	adc	r19, r19
    379c:	ba 95       	dec	r27
    379e:	e1 f7       	brne	.-8      	; 0x3798 <rtc_gettime+0x7a>
    37a0:	88 0f       	add	r24, r24
    37a2:	99 1f       	adc	r25, r25
    37a4:	28 0f       	add	r18, r24
    37a6:	39 1f       	adc	r19, r25
    37a8:	4f 70       	andi	r20, 0x0F	; 15
    37aa:	42 0f       	add	r20, r18
    37ac:	45 83       	std	Z+5, r20	; 0x05
	rtc->wday = (buf[3] & 0x07);
    37ae:	8c 81       	ldd	r24, Y+4	; 0x04
    37b0:	87 70       	andi	r24, 0x07	; 7
    37b2:	84 83       	std	Z+4, r24	; 0x04
	rtc->mday = (buf[4] & 0x0F) + ((buf[4] >> 4) & 3) * 10;
    37b4:	4d 81       	ldd	r20, Y+5	; 0x05
    37b6:	84 2f       	mov	r24, r20
    37b8:	82 95       	swap	r24
    37ba:	8f 70       	andi	r24, 0x0F	; 15
    37bc:	90 e0       	ldi	r25, 0x00	; 0
    37be:	83 70       	andi	r24, 0x03	; 3
    37c0:	90 70       	andi	r25, 0x00	; 0
    37c2:	9c 01       	movw	r18, r24
    37c4:	73 e0       	ldi	r23, 0x03	; 3
    37c6:	22 0f       	add	r18, r18
    37c8:	33 1f       	adc	r19, r19
    37ca:	7a 95       	dec	r23
    37cc:	e1 f7       	brne	.-8      	; 0x37c6 <rtc_gettime+0xa8>
    37ce:	88 0f       	add	r24, r24
    37d0:	99 1f       	adc	r25, r25
    37d2:	28 0f       	add	r18, r24
    37d4:	39 1f       	adc	r19, r25
    37d6:	4f 70       	andi	r20, 0x0F	; 15
    37d8:	42 0f       	add	r20, r18
    37da:	43 83       	std	Z+3, r20	; 0x03
	rtc->month = (buf[5] & 0x0F) + (buf[5] >> 4) * 10;
    37dc:	2e 81       	ldd	r18, Y+6	; 0x06
    37de:	82 2f       	mov	r24, r18
    37e0:	82 95       	swap	r24
    37e2:	8f 70       	andi	r24, 0x0F	; 15
    37e4:	85 9f       	mul	r24, r21
    37e6:	c0 01       	movw	r24, r0
    37e8:	11 24       	eor	r1, r1
    37ea:	2f 70       	andi	r18, 0x0F	; 15
    37ec:	28 0f       	add	r18, r24
    37ee:	22 83       	std	Z+2, r18	; 0x02
	rtc->year = 2000 + (buf[6] & 0x0F) + (buf[6] >> 4) * 10;
    37f0:	2f 81       	ldd	r18, Y+7	; 0x07
    37f2:	82 2f       	mov	r24, r18
    37f4:	90 e0       	ldi	r25, 0x00	; 0
    37f6:	8f 70       	andi	r24, 0x0F	; 15
    37f8:	90 70       	andi	r25, 0x00	; 0
    37fa:	80 53       	subi	r24, 0x30	; 48
    37fc:	98 4f       	sbci	r25, 0xF8	; 248
    37fe:	22 95       	swap	r18
    3800:	2f 70       	andi	r18, 0x0F	; 15
    3802:	25 9f       	mul	r18, r21
    3804:	90 01       	movw	r18, r0
    3806:	11 24       	eor	r1, r1
    3808:	82 0f       	add	r24, r18
    380a:	93 1f       	adc	r25, r19
    380c:	91 83       	std	Z+1, r25	; 0x01
    380e:	80 83       	st	Z, r24
    3810:	21 e0       	ldi	r18, 0x01	; 1
    3812:	30 e0       	ldi	r19, 0x00	; 0
/*   rtc->month = 5;*/
/*   rtc->year = 2006;*/


   return TRUE;
}
    3814:	c9 01       	movw	r24, r18
    3816:	27 96       	adiw	r28, 0x07	; 7
    3818:	e4 e0       	ldi	r30, 0x04	; 4
    381a:	0c 94 d9 2e 	jmp	0x5db2	; 0x5db2 <__epilogue_restores__+0x1c>

0000381e <RTC_write>:
	char dev,		/* Device address */
	uint8_t adr,		/* Write start address */
	uint8_t cnt,		/* Write byte count */
	uint8_t *buff		/* Write data buffer */
)
{
    381e:	a0 e0       	ldi	r26, 0x00	; 0
    3820:	b0 e0       	ldi	r27, 0x00	; 0
    3822:	e5 e1       	ldi	r30, 0x15	; 21
    3824:	fc e1       	ldi	r31, 0x1C	; 28
    3826:	0c 94 ba 2e 	jmp	0x5d74	; 0x5d74 <__prologue_saves__+0x16>
    382a:	08 2f       	mov	r16, r24
    382c:	f6 2e       	mov	r15, r22
    382e:	14 2f       	mov	r17, r20
    3830:	e2 2e       	mov	r14, r18
    3832:	d3 2e       	mov	r13, r19
	uint8_t *wbuff = buff;
	
	if (!cnt) return FALSE;	
    3834:	44 23       	and	r20, r20
    3836:	39 f1       	breq	.+78     	; 0x3886 <RTC_write+0x68>
	/*
	 * Start in master write mode to transmit data to slave 
	 */
	if (!(TWI_start())) return FALSE;	/* send start condition */	
    3838:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <TWI_start>
    383c:	89 2b       	or	r24, r25
    383e:	19 f1       	breq	.+70     	; 0x3886 <RTC_write+0x68>

	TWI_send(dev | TW_WRITE);		/* Select device dev */
    3840:	80 2f       	mov	r24, r16
    3842:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <TWI_send>
	if (!(TW_STATUS == TW_MT_SLA_ACK)) return FALSE;	/* Device could not be selected */
    3846:	80 91 b9 00 	lds	r24, 0x00B9
    384a:	88 7f       	andi	r24, 0xF8	; 248
    384c:	88 31       	cpi	r24, 0x18	; 24
    384e:	d9 f4       	brne	.+54     	; 0x3886 <RTC_write+0x68>

	/* Send address for writing start position to slave device */	
	TWI_send(adr);
    3850:	8f 2d       	mov	r24, r15
    3852:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <TWI_send>
	if (!(TW_STATUS == TW_MT_DATA_ACK)) return FALSE;	/* No ACK from device return */
    3856:	80 91 b9 00 	lds	r24, 0x00B9
    385a:	88 7f       	andi	r24, 0xF8	; 248
    385c:	88 32       	cpi	r24, 0x28	; 40
    385e:	99 f4       	brne	.+38     	; 0x3886 <RTC_write+0x68>
    3860:	8e 2d       	mov	r24, r14
    3862:	9d 2d       	mov	r25, r13
    3864:	9c 01       	movw	r18, r24
    3866:	e9 01       	movw	r28, r18

	/* send data */
	do {
		TWI_send(*wbuff++);
    3868:	89 91       	ld	r24, Y+
    386a:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <TWI_send>
		if (!(TW_STATUS == TW_MT_DATA_ACK)) return FALSE;	/* No ACK from device return */
    386e:	80 91 b9 00 	lds	r24, 0x00B9
    3872:	88 7f       	andi	r24, 0xF8	; 248
    3874:	88 32       	cpi	r24, 0x28	; 40
    3876:	39 f4       	brne	.+14     	; 0x3886 <RTC_write+0x68>
	} while(--cnt);
    3878:	11 50       	subi	r17, 0x01	; 1
    387a:	b1 f7       	brne	.-20     	; 0x3868 <RTC_write+0x4a>

	/* send stop */
	TWI_stop();
    387c:	0e 94 a5 26 	call	0x4d4a	; 0x4d4a <TWI_stop>
    3880:	21 e0       	ldi	r18, 0x01	; 1
    3882:	30 e0       	ldi	r19, 0x00	; 0
    3884:	02 c0       	rjmp	.+4      	; 0x388a <RTC_write+0x6c>

	return TRUE;
    3886:	20 e0       	ldi	r18, 0x00	; 0
    3888:	30 e0       	ldi	r19, 0x00	; 0
}
    388a:	c9 01       	movw	r24, r18
    388c:	cd b7       	in	r28, 0x3d	; 61
    388e:	de b7       	in	r29, 0x3e	; 62
    3890:	e7 e0       	ldi	r30, 0x07	; 7
    3892:	0c 94 d6 2e 	jmp	0x5dac	; 0x5dac <__epilogue_restores__+0x16>

00003896 <rtc_settime>:

   return TRUE;
}

BOOL rtc_settime (const RTC *rtc)
{
    3896:	a7 e0       	ldi	r26, 0x07	; 7
    3898:	b0 e0       	ldi	r27, 0x00	; 0
    389a:	e1 e5       	ldi	r30, 0x51	; 81
    389c:	fc e1       	ldi	r31, 0x1C	; 28
    389e:	0c 94 bf 2e 	jmp	0x5d7e	; 0x5d7e <__prologue_saves__+0x20>
    38a2:	fc 01       	movw	r30, r24
	uint8_t buf[7];

	buf[0] = ((rtc->sec / 10) * 16 + rtc->sec % 10) & 0x7F;
    38a4:	47 81       	ldd	r20, Z+7	; 0x07
    38a6:	84 2f       	mov	r24, r20
    38a8:	6a e0       	ldi	r22, 0x0A	; 10
    38aa:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__udivmodqi4>
    38ae:	28 2f       	mov	r18, r24
    38b0:	30 e0       	ldi	r19, 0x00	; 0
    38b2:	54 e0       	ldi	r21, 0x04	; 4
    38b4:	22 0f       	add	r18, r18
    38b6:	33 1f       	adc	r19, r19
    38b8:	5a 95       	dec	r21
    38ba:	e1 f7       	brne	.-8      	; 0x38b4 <rtc_settime+0x1e>
    38bc:	84 2f       	mov	r24, r20
    38be:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__udivmodqi4>
    38c2:	92 0f       	add	r25, r18
    38c4:	9f 77       	andi	r25, 0x7F	; 127
    38c6:	99 83       	std	Y+1, r25	; 0x01
	buf[1] = ((rtc->min / 10) * 16 + rtc->min % 10) & 0xF7;
    38c8:	46 81       	ldd	r20, Z+6	; 0x06
    38ca:	84 2f       	mov	r24, r20
    38cc:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__udivmodqi4>
    38d0:	28 2f       	mov	r18, r24
    38d2:	30 e0       	ldi	r19, 0x00	; 0
    38d4:	94 e0       	ldi	r25, 0x04	; 4
    38d6:	22 0f       	add	r18, r18
    38d8:	33 1f       	adc	r19, r19
    38da:	9a 95       	dec	r25
    38dc:	e1 f7       	brne	.-8      	; 0x38d6 <rtc_settime+0x40>
    38de:	84 2f       	mov	r24, r20
    38e0:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__udivmodqi4>
    38e4:	92 0f       	add	r25, r18
    38e6:	97 7f       	andi	r25, 0xF7	; 247
    38e8:	9a 83       	std	Y+2, r25	; 0x02
	buf[2] = ((rtc->hour / 10) * 16 + rtc->hour % 10) & 0x3F;
    38ea:	45 81       	ldd	r20, Z+5	; 0x05
    38ec:	84 2f       	mov	r24, r20
    38ee:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__udivmodqi4>
    38f2:	28 2f       	mov	r18, r24
    38f4:	30 e0       	ldi	r19, 0x00	; 0
    38f6:	84 e0       	ldi	r24, 0x04	; 4
    38f8:	22 0f       	add	r18, r18
    38fa:	33 1f       	adc	r19, r19
    38fc:	8a 95       	dec	r24
    38fe:	e1 f7       	brne	.-8      	; 0x38f8 <rtc_settime+0x62>
    3900:	84 2f       	mov	r24, r20
    3902:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__udivmodqi4>
    3906:	92 0f       	add	r25, r18
    3908:	9f 73       	andi	r25, 0x3F	; 63
    390a:	9b 83       	std	Y+3, r25	; 0x03
	buf[3] = rtc->wday & 7;
    390c:	84 81       	ldd	r24, Z+4	; 0x04
    390e:	87 70       	andi	r24, 0x07	; 7
    3910:	8c 83       	std	Y+4, r24	; 0x04
	buf[4] = ((rtc->mday / 10) * 16 + rtc->mday % 10) & 0x3F;
    3912:	43 81       	ldd	r20, Z+3	; 0x03
    3914:	84 2f       	mov	r24, r20
    3916:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__udivmodqi4>
    391a:	28 2f       	mov	r18, r24
    391c:	30 e0       	ldi	r19, 0x00	; 0
    391e:	b4 e0       	ldi	r27, 0x04	; 4
    3920:	22 0f       	add	r18, r18
    3922:	33 1f       	adc	r19, r19
    3924:	ba 95       	dec	r27
    3926:	e1 f7       	brne	.-8      	; 0x3920 <rtc_settime+0x8a>
    3928:	84 2f       	mov	r24, r20
    392a:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__udivmodqi4>
    392e:	92 0f       	add	r25, r18
    3930:	9f 73       	andi	r25, 0x3F	; 63
    3932:	9d 83       	std	Y+5, r25	; 0x05
	buf[5] = ((rtc->month / 10) * 16 + rtc->month % 10) & 0x1F;
    3934:	42 81       	ldd	r20, Z+2	; 0x02
    3936:	84 2f       	mov	r24, r20
    3938:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__udivmodqi4>
    393c:	28 2f       	mov	r18, r24
    393e:	30 e0       	ldi	r19, 0x00	; 0
    3940:	a4 e0       	ldi	r26, 0x04	; 4
    3942:	22 0f       	add	r18, r18
    3944:	33 1f       	adc	r19, r19
    3946:	aa 95       	dec	r26
    3948:	e1 f7       	brne	.-8      	; 0x3942 <rtc_settime+0xac>
    394a:	84 2f       	mov	r24, r20
    394c:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__udivmodqi4>
    3950:	92 0f       	add	r25, r18
    3952:	9f 71       	andi	r25, 0x1F	; 31
    3954:	9e 83       	std	Y+6, r25	; 0x06
	buf[6] = ((rtc->year - 2000) / 10) * 16 + (rtc->year - 2000) % 10;
    3956:	01 90       	ld	r0, Z+
    3958:	f0 81       	ld	r31, Z
    395a:	e0 2d       	mov	r30, r0
    395c:	e0 5d       	subi	r30, 0xD0	; 208
    395e:	f7 40       	sbci	r31, 0x07	; 7
    3960:	cf 01       	movw	r24, r30
    3962:	6a e0       	ldi	r22, 0x0A	; 10
    3964:	70 e0       	ldi	r23, 0x00	; 0
    3966:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <__udivmodhi4>
    396a:	9b 01       	movw	r18, r22
    396c:	74 e0       	ldi	r23, 0x04	; 4
    396e:	22 0f       	add	r18, r18
    3970:	33 1f       	adc	r19, r19
    3972:	7a 95       	dec	r23
    3974:	e1 f7       	brne	.-8      	; 0x396e <rtc_settime+0xd8>
    3976:	cf 01       	movw	r24, r30
    3978:	6a e0       	ldi	r22, 0x0A	; 10
    397a:	70 e0       	ldi	r23, 0x00	; 0
    397c:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <__udivmodhi4>
    3980:	82 0f       	add	r24, r18
    3982:	8f 83       	std	Y+7, r24	; 0x07

	return RTC_write(0b11010000, 0x01, 7, buf);
    3984:	80 ed       	ldi	r24, 0xD0	; 208
    3986:	61 e0       	ldi	r22, 0x01	; 1
    3988:	47 e0       	ldi	r20, 0x07	; 7
    398a:	9e 01       	movw	r18, r28
    398c:	2f 5f       	subi	r18, 0xFF	; 255
    398e:	3f 4f       	sbci	r19, 0xFF	; 255
    3990:	0e 94 0f 1c 	call	0x381e	; 0x381e <RTC_write>
}
    3994:	27 96       	adiw	r28, 0x07	; 7
    3996:	e2 e0       	ldi	r30, 0x02	; 2
    3998:	0c 94 db 2e 	jmp	0x5db6	; 0x5db6 <__epilogue_restores__+0x20>

0000399c <rtc_clearHaltBit>:
#include <string.h>
#include "rtc.h"
#include "../twi/twi.h"

BOOL rtc_clearHaltBit(void)
{
    399c:	a1 e0       	ldi	r26, 0x01	; 1
    399e:	b0 e0       	ldi	r27, 0x00	; 0
    39a0:	e4 ed       	ldi	r30, 0xD4	; 212
    39a2:	fc e1       	ldi	r31, 0x1C	; 28
    39a4:	0c 94 bf 2e 	jmp	0x5d7e	; 0x5d7e <__prologue_saves__+0x20>
	uint8_t buf[1];
	buf[0] = 63;
    39a8:	8f e3       	ldi	r24, 0x3F	; 63
    39aa:	89 83       	std	Y+1, r24	; 0x01
	return RTC_write(0b11010000, 0x0C, 1, buf);
    39ac:	80 ed       	ldi	r24, 0xD0	; 208
    39ae:	6c e0       	ldi	r22, 0x0C	; 12
    39b0:	41 e0       	ldi	r20, 0x01	; 1
    39b2:	9e 01       	movw	r18, r28
    39b4:	2f 5f       	subi	r18, 0xFF	; 255
    39b6:	3f 4f       	sbci	r19, 0xFF	; 255
    39b8:	0e 94 0f 1c 	call	0x381e	; 0x381e <RTC_write>
}
    39bc:	21 96       	adiw	r28, 0x01	; 1
    39be:	e2 e0       	ldi	r30, 0x02	; 2
    39c0:	0c 94 db 2e 	jmp	0x5db6	; 0x5db6 <__epilogue_restores__+0x20>

000039c4 <rtc_init>:
}

BOOL rtc_init (void)
{
	/* This function should also test the RTC to ensure a valid clock is returned but this is work for the future */
	rtc_clearHaltBit();	/* Before this is cleared time read from RTC is time of last system power down */
    39c4:	0e 94 ce 1c 	call	0x399c	; 0x399c <rtc_clearHaltBit>

	return TRUE;
} 
    39c8:	81 e0       	ldi	r24, 0x01	; 1
    39ca:	90 e0       	ldi	r25, 0x00	; 0
    39cc:	08 95       	ret

000039ce <can_clear_all_mob>:
//! @param none
//!
//! @return none
//------------------------------------------------------------------------------
void can_clear_all_mob(void)
{
    39ce:	90 e0       	ldi	r25, 0x00	; 0
    U8  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        CANPAGE = (mob_number << 4);    //! Page index
    39d0:	89 2f       	mov	r24, r25
    39d2:	82 95       	swap	r24
    39d4:	80 7f       	andi	r24, 0xF0	; 240
    39d6:	80 93 ed 00 	sts	0x00ED, r24
    39da:	ee ee       	ldi	r30, 0xEE	; 238
    39dc:	f0 e0       	ldi	r31, 0x00	; 0
        Can_clear_mob();                //! All MOb Registers=0
    39de:	11 92       	st	Z+, r1
    39e0:	e8 3f       	cpi	r30, 0xF8	; 248
    39e2:	f1 05       	cpc	r31, r1
    39e4:	e1 f7       	brne	.-8      	; 0x39de <can_clear_all_mob+0x10>
U8  mob_number;
/*
    U8  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    39e6:	9f 5f       	subi	r25, 0xFF	; 255
    39e8:	9f 30       	cpi	r25, 0x0F	; 15
    39ea:	91 f7       	brne	.-28     	; 0x39d0 <can_clear_all_mob+0x2>
        {
            CANMSG = 0;                 //! MOb data FIFO
        }
*/
    }
}
    39ec:	08 95       	ret

000039ee <can_get_mob_free>:
//------------------------------------------------------------------------------
U8 can_get_mob_free(void)
{
    U8 mob_number, page_saved;

    page_saved = CANPAGE;
    39ee:	20 91 ed 00 	lds	r18, 0x00ED
    39f2:	90 e0       	ldi	r25, 0x00	; 0
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        Can_set_mob(mob_number);
    39f4:	89 2f       	mov	r24, r25
    39f6:	82 95       	swap	r24
    39f8:	80 7f       	andi	r24, 0xF0	; 240
    39fa:	80 93 ed 00 	sts	0x00ED, r24
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
    39fe:	80 91 ef 00 	lds	r24, 0x00EF
    3a02:	80 7c       	andi	r24, 0xC0	; 192
    3a04:	19 f4       	brne	.+6      	; 0x3a0c <can_get_mob_free+0x1e>
        {
            CANPAGE = page_saved;
    3a06:	20 93 ed 00 	sts	0x00ED, r18
    3a0a:	06 c0       	rjmp	.+12     	; 0x3a18 <can_get_mob_free+0x2a>
U8 can_get_mob_free(void)
{
    U8 mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    3a0c:	9f 5f       	subi	r25, 0xFF	; 255
    3a0e:	9f 30       	cpi	r25, 0x0F	; 15
    3a10:	89 f7       	brne	.-30     	; 0x39f4 <can_get_mob_free+0x6>
        {
            CANPAGE = page_saved;
            return (mob_number);
        }
    }
    CANPAGE = page_saved;
    3a12:	20 93 ed 00 	sts	0x00ED, r18
    3a16:	9f ef       	ldi	r25, 0xFF	; 255
    return (NO_MOB);
}
    3a18:	89 2f       	mov	r24, r25
    3a1a:	08 95       	ret

00003a1c <can_get_mob_status>:
U8 can_get_mob_status(void)
{
    U8 mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
    3a1c:	80 91 ef 00 	lds	r24, 0x00EF
    3a20:	80 7c       	andi	r24, 0xC0	; 192
    3a22:	11 f4       	brne	.+4      	; 0x3a28 <can_get_mob_status+0xc>
    3a24:	8f ef       	ldi	r24, 0xFF	; 255
    3a26:	08 95       	ret

    canstmob_copy = CANSTMOB; // Copy for test integrity
    3a28:	90 91 ee 00 	lds	r25, 0x00EE

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
    3a2c:	89 2f       	mov	r24, r25
    3a2e:	80 7e       	andi	r24, 0xE0	; 224
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
    3a30:	80 32       	cpi	r24, 0x20	; 32
    3a32:	31 f0       	breq	.+12     	; 0x3a40 <can_get_mob_status+0x24>
    3a34:	80 34       	cpi	r24, 0x40	; 64
    3a36:	21 f0       	breq	.+8      	; 0x3a40 <can_get_mob_status+0x24>
    3a38:	80 3a       	cpi	r24, 0xA0	; 160
    3a3a:	11 f0       	breq	.+4      	; 0x3a40 <can_get_mob_status+0x24>
    // - MOb Status bit_0 = MOB_ACK_ERROR
    // - MOb Status bit_1 = MOB_FORM_ERROR
    // - MOb Status bit_2 = MOB_CRC_ERROR
    // - MOb Status bit_3 = MOB_STUFF_ERROR
    // - MOb Status bit_4 = MOB_BIT_ERROR
    mob_status = canstmob_copy & ERR_MOB_MSK;
    3a3c:	89 2f       	mov	r24, r25
    3a3e:	8f 71       	andi	r24, 0x1F	; 31
    if (mob_status != 0) { return(mob_status); }

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
}
    3a40:	08 95       	ret

00003a42 <can_get_data>:
//! @param CAN message data address.
//!
//! @return none.
//------------------------------------------------------------------------------
void can_get_data(U8* p_can_message_data)
{
    3a42:	ac 01       	movw	r20, r24
    3a44:	20 e0       	ldi	r18, 0x00	; 0
    3a46:	06 c0       	rjmp	.+12     	; 0x3a54 <can_get_data+0x12>
    U8 data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
    {
        *(p_can_message_data + data_index) = CANMSG;
    3a48:	80 91 fa 00 	lds	r24, 0x00FA
    3a4c:	e4 0f       	add	r30, r20
    3a4e:	f5 1f       	adc	r31, r21
    3a50:	80 83       	st	Z, r24
//------------------------------------------------------------------------------
void can_get_data(U8* p_can_message_data)
{
    U8 data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
    3a52:	2f 5f       	subi	r18, 0xFF	; 255
    3a54:	80 91 ef 00 	lds	r24, 0x00EF
    3a58:	e2 2f       	mov	r30, r18
    3a5a:	f0 e0       	ldi	r31, 0x00	; 0
    3a5c:	90 e0       	ldi	r25, 0x00	; 0
    3a5e:	8f 70       	andi	r24, 0x0F	; 15
    3a60:	90 70       	andi	r25, 0x00	; 0
    3a62:	e8 17       	cp	r30, r24
    3a64:	f9 07       	cpc	r31, r25
    3a66:	84 f3       	brlt	.-32     	; 0x3a48 <can_get_data+0x6>
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
    3a68:	08 95       	ret

00003a6a <can_auto_baudrate>:
//! @return Baudrate Status
//!         ==0: research of bit timing configuration failed
//!         ==1: baudrate performed
//------------------------------------------------------------------------------
U8 can_auto_baudrate (U8 mode)
{
    3a6a:	9f 92       	push	r9
    3a6c:	af 92       	push	r10
    3a6e:	bf 92       	push	r11
    3a70:	cf 92       	push	r12
    3a72:	df 92       	push	r13
    3a74:	ef 92       	push	r14
    3a76:	ff 92       	push	r15
    3a78:	0f 93       	push	r16
    3a7a:	1f 93       	push	r17
    conf_index = 0;
    bt_not_found = 1;

    //! --- Init segment variables with MIN values if mode=0
    //!     or init segment variables with CANBTx if mode=1
    if (mode==0)
    3a7c:	88 23       	and	r24, r24
    3a7e:	61 f4       	brne	.+24     	; 0x3a98 <can_auto_baudrate+0x2e>
    3a80:	dd 24       	eor	r13, r13
    3a82:	d3 94       	inc	r13
    3a84:	b3 e0       	ldi	r27, 0x03	; 3
    3a86:	a8 e0       	ldi	r26, 0x08	; 8
    3a88:	62 e0       	ldi	r22, 0x02	; 2
    3a8a:	72 e0       	ldi	r23, 0x02	; 2
    3a8c:	50 e0       	ldi	r21, 0x00	; 0
    3a8e:	11 e0       	ldi	r17, 0x01	; 1
    3a90:	40 e0       	ldi	r20, 0x00	; 0
    3a92:	ff 24       	eor	r15, r15
    3a94:	f3 94       	inc	r15
    3a96:	54 c0       	rjmp	.+168    	; 0x3b40 <can_auto_baudrate+0xd6>
        try_conf = 1;       //! Try this configuration
        wait_for_rx = 1;    //! Enable "while (wait_for_rx ..." loop
    }
    else //! mode = 1
    {
        brp  = Max ((((CANBT1 &  BRP_MSK) >> 1) +1) , BRP_MIN );
    3a98:	80 91 e2 00 	lds	r24, 0x00E2
    3a9c:	8e 77       	andi	r24, 0x7E	; 126
    3a9e:	19 f4       	brne	.+6      	; 0x3aa6 <can_auto_baudrate+0x3c>
    3aa0:	dd 24       	eor	r13, r13
    3aa2:	d3 94       	inc	r13
    3aa4:	09 c0       	rjmp	.+18     	; 0x3ab8 <can_auto_baudrate+0x4e>
    3aa6:	80 91 e2 00 	lds	r24, 0x00E2
    3aaa:	90 e0       	ldi	r25, 0x00	; 0
    3aac:	8e 77       	andi	r24, 0x7E	; 126
    3aae:	90 70       	andi	r25, 0x00	; 0
    3ab0:	95 95       	asr	r25
    3ab2:	87 95       	ror	r24
    3ab4:	d8 2e       	mov	r13, r24
    3ab6:	d3 94       	inc	r13
        prs  = Max ((((CANBT2 &  PRS_MSK) >> 1) +1) , PRS_MIN );
    3ab8:	80 91 e3 00 	lds	r24, 0x00E3
    3abc:	8e 70       	andi	r24, 0x0E	; 14
    3abe:	11 f4       	brne	.+4      	; 0x3ac4 <can_auto_baudrate+0x5a>
    3ac0:	b1 e0       	ldi	r27, 0x01	; 1
    3ac2:	09 c0       	rjmp	.+18     	; 0x3ad6 <can_auto_baudrate+0x6c>
    3ac4:	80 91 e3 00 	lds	r24, 0x00E3
    3ac8:	90 e0       	ldi	r25, 0x00	; 0
    3aca:	8e 70       	andi	r24, 0x0E	; 14
    3acc:	90 70       	andi	r25, 0x00	; 0
    3ace:	95 95       	asr	r25
    3ad0:	87 95       	ror	r24
    3ad2:	b8 2f       	mov	r27, r24
    3ad4:	bf 5f       	subi	r27, 0xFF	; 255
        phs1 = Max ((((CANBT3 & PHS1_MSK) >> 1) +1) , PHS1_MIN);
    3ad6:	80 91 e4 00 	lds	r24, 0x00E4
    3ada:	8e 70       	andi	r24, 0x0E	; 14
    3adc:	83 30       	cpi	r24, 0x03	; 3
    3ade:	10 f4       	brcc	.+4      	; 0x3ae4 <can_auto_baudrate+0x7a>
    3ae0:	62 e0       	ldi	r22, 0x02	; 2
    3ae2:	09 c0       	rjmp	.+18     	; 0x3af6 <can_auto_baudrate+0x8c>
    3ae4:	80 91 e4 00 	lds	r24, 0x00E4
    3ae8:	90 e0       	ldi	r25, 0x00	; 0
    3aea:	8e 70       	andi	r24, 0x0E	; 14
    3aec:	90 70       	andi	r25, 0x00	; 0
    3aee:	95 95       	asr	r25
    3af0:	87 95       	ror	r24
    3af2:	68 2f       	mov	r22, r24
    3af4:	6f 5f       	subi	r22, 0xFF	; 255
        phs2 = Max ((((CANBT3 & PHS2_MSK) >> 4) +1) , PHS2_MIN);
    3af6:	80 91 e4 00 	lds	r24, 0x00E4
    3afa:	80 77       	andi	r24, 0x70	; 112
    3afc:	81 31       	cpi	r24, 0x11	; 17
    3afe:	10 f4       	brcc	.+4      	; 0x3b04 <can_auto_baudrate+0x9a>
    3b00:	72 e0       	ldi	r23, 0x02	; 2
    3b02:	0c c0       	rjmp	.+24     	; 0x3b1c <can_auto_baudrate+0xb2>
    3b04:	80 91 e4 00 	lds	r24, 0x00E4
    3b08:	90 e0       	ldi	r25, 0x00	; 0
    3b0a:	80 77       	andi	r24, 0x70	; 112
    3b0c:	90 70       	andi	r25, 0x00	; 0
    3b0e:	24 e0       	ldi	r18, 0x04	; 4
    3b10:	95 95       	asr	r25
    3b12:	87 95       	ror	r24
    3b14:	2a 95       	dec	r18
    3b16:	e1 f7       	brne	.-8      	; 0x3b10 <can_auto_baudrate+0xa6>
    3b18:	78 2f       	mov	r23, r24
    3b1a:	7f 5f       	subi	r23, 0xFF	; 255
        ntq  = Max ((prs + phs1 + phs2 + 1) , NTQ_MIN);
    3b1c:	8b 2f       	mov	r24, r27
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	86 0f       	add	r24, r22
    3b22:	91 1d       	adc	r25, r1
    3b24:	87 0f       	add	r24, r23
    3b26:	91 1d       	adc	r25, r1
    3b28:	08 97       	sbiw	r24, 0x08	; 8
    3b2a:	14 f4       	brge	.+4      	; 0x3b30 <can_auto_baudrate+0xc6>
    3b2c:	a8 e0       	ldi	r26, 0x08	; 8
    3b2e:	04 c0       	rjmp	.+8      	; 0x3b38 <can_auto_baudrate+0xce>
    3b30:	ab 2f       	mov	r26, r27
    3b32:	af 5f       	subi	r26, 0xFF	; 255
    3b34:	a6 0f       	add	r26, r22
    3b36:	a7 0f       	add	r26, r23
    3b38:	51 e0       	ldi	r21, 0x01	; 1
    3b3a:	10 e0       	ldi	r17, 0x00	; 0
    3b3c:	41 e0       	ldi	r20, 0x01	; 1
    3b3e:	ff 24       	eor	r15, r15
    3b40:	90 e0       	ldi	r25, 0x00	; 0
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
    {
        Can_set_mob(u8_temp0);  //! Page index
    3b42:	89 2f       	mov	r24, r25
    3b44:	82 95       	swap	r24
    3b46:	80 7f       	andi	r24, 0xF0	; 240
    3b48:	80 93 ed 00 	sts	0x00ED, r24
    3b4c:	ee ee       	ldi	r30, 0xEE	; 238
    3b4e:	f0 e0       	ldi	r31, 0x00	; 0
        Can_clear_mob();        //! All MOb Registers = 0x00
    3b50:	11 92       	st	Z+, r1
    3b52:	e8 3f       	cpi	r30, 0xF8	; 248
    3b54:	f1 05       	cpc	r31, r1
    3b56:	e1 f7       	brne	.-8      	; 0x3b50 <can_auto_baudrate+0xe6>
        try_conf = 0;       //! Look for the next configuration
        wait_for_rx = 0;    //! Skip "while (wait_for_rx ..." loop
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
    3b58:	9f 5f       	subi	r25, 0xFF	; 255
    3b5a:	9f 30       	cpi	r25, 0x0F	; 15
    3b5c:	91 f7       	brne	.-28     	; 0x3b42 <can_auto_baudrate+0xd8>
    3b5e:	ee 24       	eor	r14, r14
    3b60:	e0 e0       	ldi	r30, 0x00	; 0
    3b62:	f0 e0       	ldi	r31, 0x00	; 0
    3b64:	cc 24       	eor	r12, r12
            CANTCON = (U8)(conf_index >> 3);

            //! --- MOb configuration
            Can_set_mob(MOB_0);                 //! Use MOb-0
            CANSTMOB = 0;                       //! Reset MOb status (undone by "Can_reset()")
            CANCDMOB = (MOB_Rx_ENA  << CONMOB); //! MOb 0 in receive mode
    3b66:	90 e8       	ldi	r25, 0x80	; 128
    3b68:	a9 2e       	mov	r10, r25

            //! CAN controller configuration
            CANGCON = (1<<LISTEN) | (1<<ENASTB);//! Enable CAN controller in "listen" mode
    3b6a:	8a e0       	ldi	r24, 0x0A	; 10
    3b6c:	98 2e       	mov	r9, r24
            while ((CANGSTA & (1<<ENFG)) == 0); //! Wait for Enable OK
            CANGIT = 0xFF;                      //! Reset General errors and OVRTIM flag
    3b6e:	bb 24       	eor	r11, r11
    3b70:	ba 94       	dec	r11
        Can_clear_mob();        //! All MOb Registers = 0x00
    }

    while (bt_not_found == 1)
    {
        if (try_conf == 1)
    3b72:	81 e0       	ldi	r24, 0x01	; 1
    3b74:	f8 16       	cp	r15, r24
    3b76:	09 f0       	breq	.+2      	; 0x3b7a <can_auto_baudrate+0x110>
    3b78:	43 c0       	rjmp	.+134    	; 0x3c00 <can_auto_baudrate+0x196>
        {
            Can_reset();
    3b7a:	f0 92 d8 00 	sts	0x00D8, r15
            conf_index++;
    3b7e:	31 96       	adiw	r30, 0x01	; 1
            ovrtim_flag=0;

            //! --- CANBTx registers update (sjw = phs2/2, 3 sample points)
            CANBT1 = ((brp-1) << BRP);
    3b80:	8d 2d       	mov	r24, r13
    3b82:	81 50       	subi	r24, 0x01	; 1
    3b84:	88 0f       	add	r24, r24
    3b86:	80 93 e2 00 	sts	0x00E2, r24
            CANBT2 = (((phs2 >> 1)-1) << SJW) |((prs-1) << PRS);
    3b8a:	27 2f       	mov	r18, r23
    3b8c:	26 95       	lsr	r18
    3b8e:	30 e0       	ldi	r19, 0x00	; 0
    3b90:	21 50       	subi	r18, 0x01	; 1
    3b92:	30 40       	sbci	r19, 0x00	; 0
    3b94:	05 e0       	ldi	r16, 0x05	; 5
    3b96:	22 0f       	add	r18, r18
    3b98:	33 1f       	adc	r19, r19
    3b9a:	0a 95       	dec	r16
    3b9c:	e1 f7       	brne	.-8      	; 0x3b96 <can_auto_baudrate+0x12c>
    3b9e:	8b 2f       	mov	r24, r27
    3ba0:	90 e0       	ldi	r25, 0x00	; 0
    3ba2:	01 97       	sbiw	r24, 0x01	; 1
    3ba4:	88 0f       	add	r24, r24
    3ba6:	99 1f       	adc	r25, r25
    3ba8:	28 2b       	or	r18, r24
    3baa:	20 93 e3 00 	sts	0x00E3, r18
            CANBT3 = (((phs2-1) << PHS2) | ((phs1-1) << PHS1) | (1<<SMP));
    3bae:	27 2f       	mov	r18, r23
    3bb0:	30 e0       	ldi	r19, 0x00	; 0
    3bb2:	21 50       	subi	r18, 0x01	; 1
    3bb4:	30 40       	sbci	r19, 0x00	; 0
    3bb6:	04 e0       	ldi	r16, 0x04	; 4
    3bb8:	22 0f       	add	r18, r18
    3bba:	33 1f       	adc	r19, r19
    3bbc:	0a 95       	dec	r16
    3bbe:	e1 f7       	brne	.-8      	; 0x3bb8 <can_auto_baudrate+0x14e>
    3bc0:	86 2f       	mov	r24, r22
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	01 97       	sbiw	r24, 0x01	; 1
    3bc6:	88 0f       	add	r24, r24
    3bc8:	99 1f       	adc	r25, r25
    3bca:	28 2b       	or	r18, r24
    3bcc:	21 60       	ori	r18, 0x01	; 1
    3bce:	20 93 e4 00 	sts	0x00E4, r18

            //! --- Set CAN-Timer - Used for time-out
            //!     There are 641 (0x281) possible evaluations. The first one provides the faster
            //!         the faster bit timing, the last one gives the slower. It is necessary to
            //!         modulate the time-out versus bit timing (0x281>>3=0x50, matching an U8).
            CANTCON = (U8)(conf_index >> 3);
    3bd2:	cf 01       	movw	r24, r30
    3bd4:	23 e0       	ldi	r18, 0x03	; 3
    3bd6:	96 95       	lsr	r25
    3bd8:	87 95       	ror	r24
    3bda:	2a 95       	dec	r18
    3bdc:	e1 f7       	brne	.-8      	; 0x3bd6 <can_auto_baudrate+0x16c>
    3bde:	80 93 e5 00 	sts	0x00E5, r24

            //! --- MOb configuration
            Can_set_mob(MOB_0);                 //! Use MOb-0
    3be2:	10 92 ed 00 	sts	0x00ED, r1
            CANSTMOB = 0;                       //! Reset MOb status (undone by "Can_reset()")
    3be6:	10 92 ee 00 	sts	0x00EE, r1
            CANCDMOB = (MOB_Rx_ENA  << CONMOB); //! MOb 0 in receive mode
    3bea:	a0 92 ef 00 	sts	0x00EF, r10

            //! CAN controller configuration
            CANGCON = (1<<LISTEN) | (1<<ENASTB);//! Enable CAN controller in "listen" mode
    3bee:	90 92 d8 00 	sts	0x00D8, r9
            while ((CANGSTA & (1<<ENFG)) == 0); //! Wait for Enable OK
    3bf2:	80 91 d9 00 	lds	r24, 0x00D9
    3bf6:	82 ff       	sbrs	r24, 2
    3bf8:	fc cf       	rjmp	.-8      	; 0x3bf2 <can_auto_baudrate+0x188>
            CANGIT = 0xFF;                      //! Reset General errors and OVRTIM flag
    3bfa:	b0 92 da 00 	sts	0x00DA, r11
    3bfe:	ee 24       	eor	r14, r14
    3c00:	01 e0       	ldi	r16, 0x01	; 1
    3c02:	3a c0       	rjmp	.+116    	; 0x3c78 <can_auto_baudrate+0x20e>
        //!     Try to perform a CAN message reception in "LISTEN" mode without error and
        //!     before a time_out done by CAN-Timer.
        //!     Else gives the hand to "EVALUATE LOOP" to have a new set of bit timing.
        while (wait_for_rx == 1)
        {
            u8_temp0 = CANSTMOB;
    3c04:	80 91 ee 00 	lds	r24, 0x00EE
            //! --- RxOK received ?
            if ((u8_temp0 & (1<<RXOK)) != 0)
    3c08:	90 e0       	ldi	r25, 0x00	; 0
    3c0a:	85 ff       	sbrs	r24, 5
    3c0c:	10 c0       	rjmp	.+32     	; 0x3c2e <can_auto_baudrate+0x1c4>
            {   //! --- It is the successful output of "can_auto_baudrate" function
                wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
                evaluate = 0;       //! Will skip "while (evaluate ..." loop
                bt_not_found = 0;   //! Out of "while (bt_not_found ..." loop
                bt_performed = 1;   //! Return flag = TRUE
                DISABLE_MOB;        //! Disable MOb-0
    3c0e:	80 91 ef 00 	lds	r24, 0x00EF
    3c12:	8f 73       	andi	r24, 0x3F	; 63
    3c14:	80 93 ef 00 	sts	0x00EF, r24
                CANGCON = 0x00;     //! Disable CAN controller & reset "listen" mode
    3c18:	10 92 d8 00 	sts	0x00D8, r1
                while ((CANGSTA & (1<<ENFG)) != 0); //! Wait for Disable OK
    3c1c:	80 91 d9 00 	lds	r24, 0x00D9
    3c20:	82 fd       	sbrc	r24, 2
    3c22:	fc cf       	rjmp	.-8      	; 0x3c1c <can_auto_baudrate+0x1b2>
    3c24:	00 e0       	ldi	r16, 0x00	; 0
    3c26:	10 e0       	ldi	r17, 0x00	; 0
    3c28:	cc 24       	eor	r12, r12
    3c2a:	c3 94       	inc	r12
    3c2c:	81 c0       	rjmp	.+258    	; 0x3d30 <can_auto_baudrate+0x2c6>
            }
             //! --- Else stop if any errors
             else
            {
                //! --- MOb error ?
                if ((u8_temp0 & ((1<<BERR)|(1<<SERR)|(1<<CERR)|(1<<FERR)|(1<<AERR))) !=0)
    3c2e:	8f 71       	andi	r24, 0x1F	; 31
    3c30:	90 70       	andi	r25, 0x00	; 0
    3c32:	89 2b       	or	r24, r25
    3c34:	11 f0       	breq	.+4      	; 0x3c3a <can_auto_baudrate+0x1d0>
    3c36:	10 e0       	ldi	r17, 0x00	; 0
    3c38:	41 e0       	ldi	r20, 0x01	; 1
                {
                    evaluate = 1;       //! Will enter in "while (evaluate ..." loop
                    wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
                }

                u8_temp0 = CANGIT;
    3c3a:	80 91 da 00 	lds	r24, 0x00DA

                //! --- Time_out reached ?
                if ((u8_temp0 & (1<<OVRTIM)) !=0 )
    3c3e:	28 2f       	mov	r18, r24
    3c40:	30 e0       	ldi	r19, 0x00	; 0
    3c42:	85 ff       	sbrs	r24, 5
    3c44:	11 c0       	rjmp	.+34     	; 0x3c68 <can_auto_baudrate+0x1fe>
                {
                    if (ovrtim_flag==0)
    3c46:	ee 20       	and	r14, r14
    3c48:	41 f4       	brne	.+16     	; 0x3c5a <can_auto_baudrate+0x1f0>
                    {
                        //! --- First Time_out
                        CANGIT |= (1<<OVRTIM);  // Reset OVRTIM
    3c4a:	80 91 da 00 	lds	r24, 0x00DA
    3c4e:	80 62       	ori	r24, 0x20	; 32
    3c50:	80 93 da 00 	sts	0x00DA, r24
    3c54:	ee 24       	eor	r14, r14
    3c56:	e3 94       	inc	r14
    3c58:	07 c0       	rjmp	.+14     	; 0x3c68 <can_auto_baudrate+0x1fe>
                        ovrtim_flag++;
                    }
                    else
                    {
                        //! --- Second Time_out
                        CANGIT |= (1<<OVRTIM);  // Reset OVRTIM
    3c5a:	80 91 da 00 	lds	r24, 0x00DA
    3c5e:	80 62       	ori	r24, 0x20	; 32
    3c60:	80 93 da 00 	sts	0x00DA, r24
    3c64:	10 e0       	ldi	r17, 0x00	; 0
    3c66:	41 e0       	ldi	r20, 0x01	; 1
                        wait_for_rx = 0;        //! Out of "while (wait_for_rx ..." loop
                    }
                }

                //! --- General error ?
                if ((u8_temp0 & ((1<<SERG)|(1<<CERG)|(1<<FERG)|(1<<AERG))) !=0)
    3c68:	2f 70       	andi	r18, 0x0F	; 15
    3c6a:	30 70       	andi	r19, 0x00	; 0
    3c6c:	23 2b       	or	r18, r19
    3c6e:	21 f0       	breq	.+8      	; 0x3c78 <can_auto_baudrate+0x20e>
    3c70:	10 e0       	ldi	r17, 0x00	; 0
    3c72:	ff 24       	eor	r15, r15
    3c74:	f3 94       	inc	r15
    3c76:	03 c0       	rjmp	.+6      	; 0x3c7e <can_auto_baudrate+0x214>
        //! --- WAIT_FOR_RX LOOP:
        //!     ================
        //!     Try to perform a CAN message reception in "LISTEN" mode without error and
        //!     before a time_out done by CAN-Timer.
        //!     Else gives the hand to "EVALUATE LOOP" to have a new set of bit timing.
        while (wait_for_rx == 1)
    3c78:	11 30       	cpi	r17, 0x01	; 1
    3c7a:	21 f2       	breq	.-120    	; 0x3c04 <can_auto_baudrate+0x19a>
    3c7c:	56 c0       	rjmp	.+172    	; 0x3d2a <can_auto_baudrate+0x2c0>
        //!     limit and after it is the Prescaler. During the computing high (80%)
        //!     and low (75%) limits of sampling point location are tested. SJW and
        //!     the number of sampling points are not calculated in this loop.
        while (evaluate == 1)
        {
            if (phs1_inc != 0) phs1++;
    3c7e:	51 11       	cpse	r21, r1
    3c80:	6f 5f       	subi	r22, 0xFF	; 255
            phs1_inc = 1;

            // --- The following test takes into account the previous incrementation of phs1
            if ((phs1 > PHS1_MAX) && (phs2 >= PHS2_MAX))
    3c82:	69 30       	cpi	r22, 0x09	; 9
    3c84:	f8 f0       	brcs	.+62     	; 0x3cc4 <can_auto_baudrate+0x25a>
    3c86:	78 30       	cpi	r23, 0x08	; 8
    3c88:	e8 f0       	brcs	.+58     	; 0x3cc4 <can_auto_baudrate+0x25a>
            {
                phs1 = PHS1_MIN;
                phs2 = PHS2_MIN;
                phs1_inc = 0;
                if (ntq != NTQ_MAX) ntq++;
    3c8a:	a9 31       	cpi	r26, 0x19	; 25
    3c8c:	11 f0       	breq	.+4      	; 0x3c92 <can_auto_baudrate+0x228>
    3c8e:	af 5f       	subi	r26, 0xFF	; 255
    3c90:	05 c0       	rjmp	.+10     	; 0x3c9c <can_auto_baudrate+0x232>
                else
                {
                    ntq = NTQ_MIN;
                    if (brp != BRP_MAX) brp++;
    3c92:	80 e4       	ldi	r24, 0x40	; 64
    3c94:	d8 16       	cp	r13, r24
    3c96:	21 f0       	breq	.+8      	; 0x3ca0 <can_auto_baudrate+0x236>
    3c98:	d3 94       	inc	r13
    3c9a:	a8 e0       	ldi	r26, 0x08	; 8
    3c9c:	62 e0       	ldi	r22, 0x02	; 2
    3c9e:	14 c0       	rjmp	.+40     	; 0x3cc8 <can_auto_baudrate+0x25e>
                    {
                        //! --- It is the failing of "can_auto_baudrate" function
                        evaluate = 0;       //! Out of "while (evaluate ..." loop
                        bt_performed = 0;   //! Return flag = FALSE
                        bt_not_found = 0;   //! Out of "while (bt_not_found ..." loop
                        DISABLE_MOB;        //! Disable MOb-0
    3ca0:	80 91 ef 00 	lds	r24, 0x00EF
    3ca4:	8f 73       	andi	r24, 0x3F	; 63
    3ca6:	80 93 ef 00 	sts	0x00EF, r24
                        CANGCON = 0x00;     //! Disable CAN controller & reset "listen" mode
    3caa:	10 92 d8 00 	sts	0x00D8, r1
                        while ((CANGSTA & (1<<ENFG)) != 0); //! Wait for Disable OK
    3cae:	80 91 d9 00 	lds	r24, 0x00D9
    3cb2:	82 fd       	sbrc	r24, 2
    3cb4:	fc cf       	rjmp	.-8      	; 0x3cae <can_auto_baudrate+0x244>
    3cb6:	a8 e0       	ldi	r26, 0x08	; 8
    3cb8:	62 e0       	ldi	r22, 0x02	; 2
    3cba:	72 e0       	ldi	r23, 0x02	; 2
    3cbc:	50 e0       	ldi	r21, 0x00	; 0
    3cbe:	00 e0       	ldi	r16, 0x00	; 0
    3cc0:	cc 24       	eor	r12, r12
    3cc2:	36 c0       	rjmp	.+108    	; 0x3d30 <can_auto_baudrate+0x2c6>
                }
            }
            else    // if (phs1 > PHS1_MAX ...
            {
                //! --- If psh1 > 5 then phs1 =phs2 or =phs2+1, else phs1=phs2
                if (phs1>5)
    3cc4:	66 30       	cpi	r22, 0x06	; 6
    3cc6:	10 f4       	brcc	.+4      	; 0x3ccc <can_auto_baudrate+0x262>
    3cc8:	76 2f       	mov	r23, r22
    3cca:	0a c0       	rjmp	.+20     	; 0x3ce0 <can_auto_baudrate+0x276>
                {
                    if (phs1>(phs2+1)) phs1=(++phs2);
    3ccc:	26 2f       	mov	r18, r22
    3cce:	30 e0       	ldi	r19, 0x00	; 0
    3cd0:	87 2f       	mov	r24, r23
    3cd2:	90 e0       	ldi	r25, 0x00	; 0
    3cd4:	01 96       	adiw	r24, 0x01	; 1
    3cd6:	82 17       	cp	r24, r18
    3cd8:	93 07       	cpc	r25, r19
    3cda:	14 f4       	brge	.+4      	; 0x3ce0 <can_auto_baudrate+0x276>
    3cdc:	7f 5f       	subi	r23, 0xFF	; 255
    3cde:	67 2f       	mov	r22, r23
                }
                else
                {
                phs2=phs1;
                }
                prs = ntq - ( phs1 + phs2 + 1 );
    3ce0:	b7 2f       	mov	r27, r23
    3ce2:	b6 0f       	add	r27, r22
    3ce4:	b0 95       	com	r27
    3ce6:	ba 0f       	add	r27, r26

                //! --- Test PRS limits
                if ((prs <= PRS_MAX) && (prs >= PRS_MIN))
    3ce8:	8b 2f       	mov	r24, r27
    3cea:	81 50       	subi	r24, 0x01	; 1
    3cec:	88 30       	cpi	r24, 0x08	; 8
    3cee:	40 f6       	brcc	.-112    	; 0x3c80 <can_auto_baudrate+0x216>
                {
                    //! --- Values  accepted if  80% >= sampling point >= 75%
                    if (((phs2<<2) >= (1+prs+phs1)) && ((phs2+phs2+phs2) <= (1+prs+phs1)))
    3cf0:	47 2f       	mov	r20, r23
    3cf2:	50 e0       	ldi	r21, 0x00	; 0
    3cf4:	26 2f       	mov	r18, r22
    3cf6:	30 e0       	ldi	r19, 0x00	; 0
    3cf8:	2f 5f       	subi	r18, 0xFF	; 255
    3cfa:	3f 4f       	sbci	r19, 0xFF	; 255
    3cfc:	2b 0f       	add	r18, r27
    3cfe:	31 1d       	adc	r19, r1
    3d00:	ca 01       	movw	r24, r20
    3d02:	88 0f       	add	r24, r24
    3d04:	99 1f       	adc	r25, r25
    3d06:	88 0f       	add	r24, r24
    3d08:	99 1f       	adc	r25, r25
    3d0a:	82 17       	cp	r24, r18
    3d0c:	93 07       	cpc	r25, r19
    3d0e:	0c f4       	brge	.+2      	; 0x3d12 <can_auto_baudrate+0x2a8>
    3d10:	b7 cf       	rjmp	.-146    	; 0x3c80 <can_auto_baudrate+0x216>
    3d12:	ca 01       	movw	r24, r20
    3d14:	88 0f       	add	r24, r24
    3d16:	99 1f       	adc	r25, r25
    3d18:	84 0f       	add	r24, r20
    3d1a:	95 1f       	adc	r25, r21
    3d1c:	28 17       	cp	r18, r24
    3d1e:	39 07       	cpc	r19, r25
    3d20:	0c f4       	brge	.+2      	; 0x3d24 <can_auto_baudrate+0x2ba>
    3d22:	ae cf       	rjmp	.-164    	; 0x3c80 <can_auto_baudrate+0x216>
    3d24:	51 e0       	ldi	r21, 0x01	; 1
    3d26:	11 e0       	ldi	r17, 0x01	; 1
    3d28:	03 c0       	rjmp	.+6      	; 0x3d30 <can_auto_baudrate+0x2c6>
        //!     then Phase2=Phase1 and if Phase1>5, Phase1 can be equal to Phase2 or
        //!     Phase2+1. After this, the number of TQ is increased up to its high
        //!     limit and after it is the Prescaler. During the computing high (80%)
        //!     and low (75%) limits of sampling point location are tested. SJW and
        //!     the number of sampling points are not calculated in this loop.
        while (evaluate == 1)
    3d2a:	41 30       	cpi	r20, 0x01	; 1
    3d2c:	09 f4       	brne	.+2      	; 0x3d30 <can_auto_baudrate+0x2c6>
    3d2e:	a7 cf       	rjmp	.-178    	; 0x3c7e <can_auto_baudrate+0x214>
    3d30:	40 e0       	ldi	r20, 0x00	; 0
    {
        Can_set_mob(u8_temp0);  //! Page index
        Can_clear_mob();        //! All MOb Registers = 0x00
    }

    while (bt_not_found == 1)
    3d32:	01 30       	cpi	r16, 0x01	; 1
    3d34:	09 f4       	brne	.+2      	; 0x3d38 <can_auto_baudrate+0x2ce>
    3d36:	1d cf       	rjmp	.-454    	; 0x3b72 <can_auto_baudrate+0x108>
            }
        } // while (evaluate ...
    } // while (bt_not_found ...

    return (bt_performed);
}
    3d38:	8c 2d       	mov	r24, r12
    3d3a:	1f 91       	pop	r17
    3d3c:	0f 91       	pop	r16
    3d3e:	ff 90       	pop	r15
    3d40:	ef 90       	pop	r14
    3d42:	df 90       	pop	r13
    3d44:	cf 90       	pop	r12
    3d46:	bf 90       	pop	r11
    3d48:	af 90       	pop	r10
    3d4a:	9f 90       	pop	r9
    3d4c:	08 95       	ret

00003d4e <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
U8 can_fixed_baudrate(U8 mode)
{
    Can_reset();
    3d4e:	81 e0       	ldi	r24, 0x01	; 1
    3d50:	80 93 d8 00 	sts	0x00D8, r24
    Can_conf_bt();
    3d54:	86 e0       	ldi	r24, 0x06	; 6
    3d56:	80 93 e2 00 	sts	0x00E2, r24
    3d5a:	80 93 e3 00 	sts	0x00E3, r24
    3d5e:	84 e2       	ldi	r24, 0x24	; 36
    3d60:	80 93 e4 00 	sts	0x00E4, r24
    return 1;
}
    3d64:	81 e0       	ldi	r24, 0x01	; 1
    3d66:	08 95       	ret

00003d68 <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
U8 can_get_status (st_cmd_t* cmd)
{
    3d68:	1f 93       	push	r17
    3d6a:	cf 93       	push	r28
    3d6c:	df 93       	push	r29
    3d6e:	ec 01       	movw	r28, r24
    U8 a_status, rtn_val;
     
    a_status = cmd->status;
    3d70:	8a 85       	ldd	r24, Y+10	; 0x0a
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    3d72:	88 23       	and	r24, r24
    3d74:	09 f4       	brne	.+2      	; 0x3d78 <can_get_status+0x10>
    3d76:	86 c0       	rjmp	.+268    	; 0x3e84 <can_get_status+0x11c>
    3d78:	8f 31       	cpi	r24, 0x1F	; 31
    3d7a:	09 f4       	brne	.+2      	; 0x3d7e <can_get_status+0x16>
    3d7c:	83 c0       	rjmp	.+262    	; 0x3e84 <can_get_status+0x11c>
    3d7e:	8f 3f       	cpi	r24, 0xFF	; 255
    3d80:	09 f4       	brne	.+2      	; 0x3d84 <can_get_status+0x1c>
    3d82:	80 c0       	rjmp	.+256    	; 0x3e84 <can_get_status+0x11c>
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(cmd->handle);
    3d84:	88 81       	ld	r24, Y
    3d86:	82 95       	swap	r24
    3d88:	80 7f       	andi	r24, 0xF0	; 240
    3d8a:	80 93 ed 00 	sts	0x00ED, r24
    a_status = can_get_mob_status();
    3d8e:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <can_get_mob_status>
    3d92:	18 2f       	mov	r17, r24
    
    switch (a_status)
    3d94:	80 32       	cpi	r24, 0x20	; 32
    3d96:	71 f0       	breq	.+28     	; 0x3db4 <can_get_status+0x4c>
    3d98:	81 32       	cpi	r24, 0x21	; 33
    3d9a:	18 f4       	brcc	.+6      	; 0x3da2 <can_get_status+0x3a>
    3d9c:	88 23       	and	r24, r24
    3d9e:	41 f0       	breq	.+16     	; 0x3db0 <can_get_status+0x48>
    3da0:	69 c0       	rjmp	.+210    	; 0x3e74 <can_get_status+0x10c>
    3da2:	80 34       	cpi	r24, 0x40	; 64
    3da4:	09 f4       	brne	.+2      	; 0x3da8 <can_get_status+0x40>
    3da6:	5c c0       	rjmp	.+184    	; 0x3e60 <can_get_status+0xf8>
    3da8:	80 3a       	cpi	r24, 0xA0	; 160
    3daa:	09 f0       	breq	.+2      	; 0x3dae <can_get_status+0x46>
    3dac:	63 c0       	rjmp	.+198    	; 0x3e74 <can_get_status+0x10c>
    3dae:	02 c0       	rjmp	.+4      	; 0x3db4 <can_get_status+0x4c>
    3db0:	81 e0       	ldi	r24, 0x01	; 1
    3db2:	69 c0       	rjmp	.+210    	; 0x3e86 <can_get_status+0x11e>
            rtn_val = CAN_STATUS_NOT_COMPLETED;
            break;
        //---------------      
        case MOB_RX_COMPLETED:     
        case MOB_RX_COMPLETED_DLCW:
            cmd->dlc = Can_get_dlc();
    3db4:	80 91 ef 00 	lds	r24, 0x00EF
    3db8:	8f 70       	andi	r24, 0x0F	; 15
    3dba:	8f 83       	std	Y+7, r24	; 0x07
            can_get_data(cmd->pt_data);
    3dbc:	88 85       	ldd	r24, Y+8	; 0x08
    3dbe:	99 85       	ldd	r25, Y+9	; 0x09
    3dc0:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <can_get_data>
            cmd->ctrl.rtr = Can_get_rtr();
    3dc4:	80 91 f0 00 	lds	r24, 0x00F0
    3dc8:	90 e0       	ldi	r25, 0x00	; 0
    3dca:	84 70       	andi	r24, 0x04	; 4
    3dcc:	90 70       	andi	r25, 0x00	; 0
    3dce:	95 95       	asr	r25
    3dd0:	87 95       	ror	r24
    3dd2:	95 95       	asr	r25
    3dd4:	87 95       	ror	r24
    3dd6:	8b 87       	std	Y+11, r24	; 0x0b
            if (Can_get_ide()) // if extended frame
    3dd8:	80 91 ef 00 	lds	r24, 0x00EF
    3ddc:	fe 01       	movw	r30, r28
    3dde:	33 96       	adiw	r30, 0x03	; 3
    3de0:	84 ff       	sbrs	r24, 4
    3de2:	2b c0       	rjmp	.+86     	; 0x3e3a <can_get_status+0xd2>
            {
                cmd->ctrl.ide = 1; // extended frame
    3de4:	81 e0       	ldi	r24, 0x01	; 1
    3de6:	8c 87       	std	Y+12, r24	; 0x0c
                Can_get_ext_id(cmd->id.ext);
    3de8:	80 91 f3 00 	lds	r24, 0x00F3
    3dec:	86 95       	lsr	r24
    3dee:	86 95       	lsr	r24
    3df0:	86 95       	lsr	r24
    3df2:	83 83       	std	Z+3, r24	; 0x03
    3df4:	90 91 f2 00 	lds	r25, 0x00F2
    3df8:	80 91 f3 00 	lds	r24, 0x00F3
    3dfc:	82 95       	swap	r24
    3dfe:	88 0f       	add	r24, r24
    3e00:	80 7e       	andi	r24, 0xE0	; 224
    3e02:	96 95       	lsr	r25
    3e04:	96 95       	lsr	r25
    3e06:	96 95       	lsr	r25
    3e08:	89 0f       	add	r24, r25
    3e0a:	82 83       	std	Z+2, r24	; 0x02
    3e0c:	90 91 f1 00 	lds	r25, 0x00F1
    3e10:	80 91 f2 00 	lds	r24, 0x00F2
    3e14:	82 95       	swap	r24
    3e16:	88 0f       	add	r24, r24
    3e18:	80 7e       	andi	r24, 0xE0	; 224
    3e1a:	96 95       	lsr	r25
    3e1c:	96 95       	lsr	r25
    3e1e:	96 95       	lsr	r25
    3e20:	89 0f       	add	r24, r25
    3e22:	81 83       	std	Z+1, r24	; 0x01
    3e24:	90 91 f0 00 	lds	r25, 0x00F0
    3e28:	80 91 f1 00 	lds	r24, 0x00F1
    3e2c:	82 95       	swap	r24
    3e2e:	88 0f       	add	r24, r24
    3e30:	80 7e       	andi	r24, 0xE0	; 224
    3e32:	96 95       	lsr	r25
    3e34:	96 95       	lsr	r25
    3e36:	96 95       	lsr	r25
    3e38:	11 c0       	rjmp	.+34     	; 0x3e5c <can_get_status+0xf4>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    3e3a:	1c 86       	std	Y+12, r1	; 0x0c
                    Can_get_std_id(cmd->id.std);
    3e3c:	80 91 f3 00 	lds	r24, 0x00F3
    3e40:	82 95       	swap	r24
    3e42:	86 95       	lsr	r24
    3e44:	87 70       	andi	r24, 0x07	; 7
    3e46:	81 83       	std	Z+1, r24	; 0x01
    3e48:	90 91 f2 00 	lds	r25, 0x00F2
    3e4c:	80 91 f3 00 	lds	r24, 0x00F3
    3e50:	88 0f       	add	r24, r24
    3e52:	88 0f       	add	r24, r24
    3e54:	88 0f       	add	r24, r24
    3e56:	92 95       	swap	r25
    3e58:	96 95       	lsr	r25
    3e5a:	97 70       	andi	r25, 0x07	; 7
    3e5c:	89 0f       	add	r24, r25
    3e5e:	8b 83       	std	Y+3, r24	; 0x03
            rtn_val = CAN_STATUS_COMPLETED;
            break;
        //---------------      
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    3e60:	1a 87       	std	Y+10, r17	; 0x0a
            Can_mob_abort();        // Freed the MOB
    3e62:	80 91 ef 00 	lds	r24, 0x00EF
    3e66:	8f 73       	andi	r24, 0x3F	; 63
    3e68:	80 93 ef 00 	sts	0x00EF, r24
            Can_clear_status_mob(); //   and reset MOb status
    3e6c:	10 92 ee 00 	sts	0x00EE, r1
    3e70:	80 e0       	ldi	r24, 0x00	; 0
    3e72:	09 c0       	rjmp	.+18     	; 0x3e86 <can_get_status+0x11e>
            rtn_val = CAN_STATUS_COMPLETED;
            break;
        //---------------      
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    3e74:	1a 87       	std	Y+10, r17	; 0x0a
            Can_mob_abort();        // Freed the MOB
    3e76:	80 91 ef 00 	lds	r24, 0x00EF
    3e7a:	8f 73       	andi	r24, 0x3F	; 63
    3e7c:	80 93 ef 00 	sts	0x00EF, r24
            Can_clear_status_mob(); //   and reset MOb status
    3e80:	10 92 ee 00 	sts	0x00EE, r1
    3e84:	82 e0       	ldi	r24, 0x02	; 2
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
    3e86:	df 91       	pop	r29
    3e88:	cf 91       	pop	r28
    3e8a:	1f 91       	pop	r17
    3e8c:	08 95       	ret

00003e8e <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
U8 can_cmd(st_cmd_t* cmd)
{
    3e8e:	a4 e0       	ldi	r26, 0x04	; 4
    3e90:	b0 e0       	ldi	r27, 0x00	; 0
    3e92:	ed e4       	ldi	r30, 0x4D	; 77
    3e94:	ff e1       	ldi	r31, 0x1F	; 31
    3e96:	0c 94 bd 2e 	jmp	0x5d7a	; 0x5d7a <__prologue_saves__+0x1c>
    3e9a:	8c 01       	movw	r16, r24
  U8 mob_handle, cpt;
  U32 u32_temp;
  U16 tmp;
  
  if (cmd->cmd == CMD_ABORT)
    3e9c:	dc 01       	movw	r26, r24
    3e9e:	11 96       	adiw	r26, 0x01	; 1
    3ea0:	8d 91       	ld	r24, X+
    3ea2:	9c 91       	ld	r25, X
    3ea4:	12 97       	sbiw	r26, 0x02	; 2
    3ea6:	0c 97       	sbiw	r24, 0x0c	; 12
    3ea8:	a9 f4       	brne	.+42     	; 0x3ed4 <can_cmd+0x46>
  {
    if (cmd->status == MOB_PENDING)
    3eaa:	1a 96       	adiw	r26, 0x0a	; 10
    3eac:	8c 91       	ld	r24, X
    3eae:	1a 97       	sbiw	r26, 0x0a	; 10
    3eb0:	80 36       	cpi	r24, 0x60	; 96
    3eb2:	69 f4       	brne	.+26     	; 0x3ece <can_cmd+0x40>
    {
      // Rx or Tx not yet performed
      Can_set_mob(cmd->handle);
    3eb4:	8c 91       	ld	r24, X
    3eb6:	82 95       	swap	r24
    3eb8:	80 7f       	andi	r24, 0xF0	; 240
    3eba:	80 93 ed 00 	sts	0x00ED, r24
      Can_mob_abort();
    3ebe:	80 91 ef 00 	lds	r24, 0x00EF
    3ec2:	8f 73       	andi	r24, 0x3F	; 63
    3ec4:	80 93 ef 00 	sts	0x00EF, r24
      Can_clear_status_mob();       // To be sure !
    3ec8:	10 92 ee 00 	sts	0x00EE, r1
      cmd->handle = 0;
    3ecc:	1c 92       	st	X, r1
    }
    cmd->status = STATUS_CLEARED; 
    3ece:	f8 01       	movw	r30, r16
    3ed0:	12 86       	std	Z+10, r1	; 0x0a
    3ed2:	3b c1       	rjmp	.+630    	; 0x414a <can_cmd+0x2bc>
  }
  else
  {
    mob_handle = can_get_mob_free();
    3ed4:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <can_get_mob_free>
    3ed8:	48 2f       	mov	r20, r24
    if (mob_handle!= NO_MOB)
    3eda:	8f 3f       	cpi	r24, 0xFF	; 255
    3edc:	09 f4       	brne	.+2      	; 0x3ee0 <can_cmd+0x52>
    3ede:	09 c5       	rjmp	.+2578   	; 0x48f2 <can_cmd+0xa64>
    {
      cmd->status = MOB_PENDING; 
    3ee0:	80 e6       	ldi	r24, 0x60	; 96
    3ee2:	d8 01       	movw	r26, r16
    3ee4:	1a 96       	adiw	r26, 0x0a	; 10
    3ee6:	8c 93       	st	X, r24
    3ee8:	1a 97       	sbiw	r26, 0x0a	; 10
      cmd->handle = mob_handle;
    3eea:	4c 93       	st	X, r20
      Can_set_mob(mob_handle);
    3eec:	84 2f       	mov	r24, r20
    3eee:	82 95       	swap	r24
    3ef0:	80 7f       	andi	r24, 0xF0	; 240
    3ef2:	80 93 ed 00 	sts	0x00ED, r24
    3ef6:	ee ee       	ldi	r30, 0xEE	; 238
    3ef8:	f0 e0       	ldi	r31, 0x00	; 0
      Can_clear_mob();
    3efa:	11 92       	st	Z+, r1
    3efc:	e8 3f       	cpi	r30, 0xF8	; 248
    3efe:	f1 05       	cpc	r31, r1
    3f00:	e1 f7       	brne	.-8      	; 0x3efa <can_cmd+0x6c>
          
      switch (cmd->cmd)
    3f02:	d8 01       	movw	r26, r16
    3f04:	11 96       	adiw	r26, 0x01	; 1
    3f06:	ed 91       	ld	r30, X+
    3f08:	fc 91       	ld	r31, X
    3f0a:	12 97       	sbiw	r26, 0x02	; 2
    3f0c:	31 97       	sbiw	r30, 0x01	; 1
    3f0e:	eb 30       	cpi	r30, 0x0B	; 11
    3f10:	f1 05       	cpc	r31, r1
    3f12:	08 f0       	brcs	.+2      	; 0x3f16 <can_cmd+0x88>
    3f14:	ea c4       	rjmp	.+2516   	; 0x48ea <can_cmd+0xa5c>
    3f16:	e7 5a       	subi	r30, 0xA7	; 167
    3f18:	ff 4f       	sbci	r31, 0xFF	; 255
    3f1a:	0c 94 e6 2e 	jmp	0x5dcc	; 0x5dcc <__tablejump2__>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    3f1e:	f8 01       	movw	r30, r16
    3f20:	47 81       	ldd	r20, Z+7	; 0x07
    3f22:	90 e0       	ldi	r25, 0x00	; 0
    3f24:	f4 c3       	rjmp	.+2024   	; 0x470e <can_cmd+0x880>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    3f26:	d8 01       	movw	r26, r16
    3f28:	1c 96       	adiw	r26, 0x0c	; 12
    3f2a:	8c 91       	ld	r24, X
    3f2c:	f8 01       	movw	r30, r16
    3f2e:	33 96       	adiw	r30, 0x03	; 3
    3f30:	88 23       	and	r24, r24
    3f32:	91 f1       	breq	.+100    	; 0x3f98 <can_cmd+0x10a>
    3f34:	32 81       	ldd	r19, Z+2	; 0x02
    3f36:	93 2f       	mov	r25, r19
    3f38:	92 95       	swap	r25
    3f3a:	96 95       	lsr	r25
    3f3c:	97 70       	andi	r25, 0x07	; 7
    3f3e:	83 81       	ldd	r24, Z+3	; 0x03
    3f40:	88 0f       	add	r24, r24
    3f42:	88 0f       	add	r24, r24
    3f44:	88 0f       	add	r24, r24
    3f46:	98 0f       	add	r25, r24
    3f48:	90 93 f3 00 	sts	0x00F3, r25
    3f4c:	21 81       	ldd	r18, Z+1	; 0x01
    3f4e:	82 2f       	mov	r24, r18
    3f50:	82 95       	swap	r24
    3f52:	86 95       	lsr	r24
    3f54:	87 70       	andi	r24, 0x07	; 7
    3f56:	33 0f       	add	r19, r19
    3f58:	33 0f       	add	r19, r19
    3f5a:	33 0f       	add	r19, r19
    3f5c:	83 0f       	add	r24, r19
    3f5e:	80 93 f2 00 	sts	0x00F2, r24
    3f62:	f8 01       	movw	r30, r16
    3f64:	93 81       	ldd	r25, Z+3	; 0x03
    3f66:	22 0f       	add	r18, r18
    3f68:	22 0f       	add	r18, r18
    3f6a:	22 0f       	add	r18, r18
    3f6c:	89 2f       	mov	r24, r25
    3f6e:	82 95       	swap	r24
    3f70:	86 95       	lsr	r24
    3f72:	87 70       	andi	r24, 0x07	; 7
    3f74:	28 0f       	add	r18, r24
    3f76:	20 93 f1 00 	sts	0x00F1, r18
    3f7a:	99 0f       	add	r25, r25
    3f7c:	99 0f       	add	r25, r25
    3f7e:	99 0f       	add	r25, r25
    3f80:	90 93 f0 00 	sts	0x00F0, r25
    3f84:	80 91 ef 00 	lds	r24, 0x00EF
    3f88:	80 61       	ori	r24, 0x10	; 16
    3f8a:	80 93 ef 00 	sts	0x00EF, r24
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    3f8e:	d8 01       	movw	r26, r16
    3f90:	17 96       	adiw	r26, 0x07	; 7
    3f92:	2c 91       	ld	r18, X
    3f94:	90 e0       	ldi	r25, 0x00	; 0
    3f96:	22 c0       	rjmp	.+68     	; 0x3fdc <can_cmd+0x14e>
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
    3f98:	d8 01       	movw	r26, r16
    3f9a:	13 96       	adiw	r26, 0x03	; 3
    3f9c:	2c 91       	ld	r18, X
    3f9e:	81 81       	ldd	r24, Z+1	; 0x01
    3fa0:	82 95       	swap	r24
    3fa2:	88 0f       	add	r24, r24
    3fa4:	80 7e       	andi	r24, 0xE0	; 224
    3fa6:	92 2f       	mov	r25, r18
    3fa8:	96 95       	lsr	r25
    3faa:	96 95       	lsr	r25
    3fac:	96 95       	lsr	r25
    3fae:	89 0f       	add	r24, r25
    3fb0:	80 93 f3 00 	sts	0x00F3, r24
    3fb4:	22 95       	swap	r18
    3fb6:	22 0f       	add	r18, r18
    3fb8:	20 7e       	andi	r18, 0xE0	; 224
    3fba:	20 93 f2 00 	sts	0x00F2, r18
    3fbe:	80 91 ef 00 	lds	r24, 0x00EF
    3fc2:	8f 7e       	andi	r24, 0xEF	; 239
    3fc4:	e2 cf       	rjmp	.-60     	; 0x3f8a <can_cmd+0xfc>
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    3fc6:	d8 01       	movw	r26, r16
    3fc8:	18 96       	adiw	r26, 0x08	; 8
    3fca:	ed 91       	ld	r30, X+
    3fcc:	fc 91       	ld	r31, X
    3fce:	19 97       	sbiw	r26, 0x09	; 9
    3fd0:	e9 0f       	add	r30, r25
    3fd2:	f1 1d       	adc	r31, r1
    3fd4:	80 81       	ld	r24, Z
    3fd6:	80 93 fa 00 	sts	0x00FA, r24
    3fda:	9f 5f       	subi	r25, 0xFF	; 255
    3fdc:	92 17       	cp	r25, r18
    3fde:	98 f3       	brcs	.-26     	; 0x3fc6 <can_cmd+0x138>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
    3fe0:	f8 01       	movw	r30, r16
    3fe2:	83 85       	ldd	r24, Z+11	; 0x0b
    3fe4:	88 23       	and	r24, r24
    3fe6:	21 f0       	breq	.+8      	; 0x3ff0 <can_cmd+0x162>
    3fe8:	80 91 f0 00 	lds	r24, 0x00F0
    3fec:	84 60       	ori	r24, 0x04	; 4
    3fee:	03 c0       	rjmp	.+6      	; 0x3ff6 <can_cmd+0x168>
            else Can_clear_rtr();    
    3ff0:	80 91 f0 00 	lds	r24, 0x00F0
    3ff4:	8b 7f       	andi	r24, 0xFB	; 251
    3ff6:	80 93 f0 00 	sts	0x00F0, r24
          Can_set_dlc(cmd->dlc);
    3ffa:	80 91 ef 00 	lds	r24, 0x00EF
    3ffe:	28 2b       	or	r18, r24
    4000:	20 93 ef 00 	sts	0x00EF, r18
          Can_config_tx();
    4004:	80 91 ef 00 	lds	r24, 0x00EF
    4008:	8f 73       	andi	r24, 0x3F	; 63
    400a:	80 93 ef 00 	sts	0x00EF, r24
    400e:	80 91 ef 00 	lds	r24, 0x00EF
    4012:	80 64       	ori	r24, 0x40	; 64
    4014:	80 93 ef 00 	sts	0x00EF, r24
    4018:	98 c0       	rjmp	.+304    	; 0x414a <can_cmd+0x2bc>
          break;
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    401a:	d8 01       	movw	r26, r16
    401c:	1c 96       	adiw	r26, 0x0c	; 12
    401e:	8c 91       	ld	r24, X
    4020:	f8 01       	movw	r30, r16
    4022:	33 96       	adiw	r30, 0x03	; 3
    4024:	88 23       	and	r24, r24
    4026:	91 f1       	breq	.+100    	; 0x408c <can_cmd+0x1fe>
    4028:	32 81       	ldd	r19, Z+2	; 0x02
    402a:	93 2f       	mov	r25, r19
    402c:	92 95       	swap	r25
    402e:	96 95       	lsr	r25
    4030:	97 70       	andi	r25, 0x07	; 7
    4032:	83 81       	ldd	r24, Z+3	; 0x03
    4034:	88 0f       	add	r24, r24
    4036:	88 0f       	add	r24, r24
    4038:	88 0f       	add	r24, r24
    403a:	98 0f       	add	r25, r24
    403c:	90 93 f3 00 	sts	0x00F3, r25
    4040:	21 81       	ldd	r18, Z+1	; 0x01
    4042:	82 2f       	mov	r24, r18
    4044:	82 95       	swap	r24
    4046:	86 95       	lsr	r24
    4048:	87 70       	andi	r24, 0x07	; 7
    404a:	33 0f       	add	r19, r19
    404c:	33 0f       	add	r19, r19
    404e:	33 0f       	add	r19, r19
    4050:	83 0f       	add	r24, r19
    4052:	80 93 f2 00 	sts	0x00F2, r24
    4056:	f8 01       	movw	r30, r16
    4058:	93 81       	ldd	r25, Z+3	; 0x03
    405a:	22 0f       	add	r18, r18
    405c:	22 0f       	add	r18, r18
    405e:	22 0f       	add	r18, r18
    4060:	89 2f       	mov	r24, r25
    4062:	82 95       	swap	r24
    4064:	86 95       	lsr	r24
    4066:	87 70       	andi	r24, 0x07	; 7
    4068:	28 0f       	add	r18, r24
    406a:	20 93 f1 00 	sts	0x00F1, r18
    406e:	99 0f       	add	r25, r25
    4070:	99 0f       	add	r25, r25
    4072:	99 0f       	add	r25, r25
    4074:	90 93 f0 00 	sts	0x00F0, r25
    4078:	80 91 ef 00 	lds	r24, 0x00EF
    407c:	80 61       	ori	r24, 0x10	; 16
    407e:	80 93 ef 00 	sts	0x00EF, r24
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    4082:	d8 01       	movw	r26, r16
    4084:	17 96       	adiw	r26, 0x07	; 7
    4086:	2c 91       	ld	r18, X
    4088:	90 e0       	ldi	r25, 0x00	; 0
    408a:	22 c0       	rjmp	.+68     	; 0x40d0 <can_cmd+0x242>
          Can_config_tx();
          break;
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
    408c:	d8 01       	movw	r26, r16
    408e:	13 96       	adiw	r26, 0x03	; 3
    4090:	2c 91       	ld	r18, X
    4092:	81 81       	ldd	r24, Z+1	; 0x01
    4094:	82 95       	swap	r24
    4096:	88 0f       	add	r24, r24
    4098:	80 7e       	andi	r24, 0xE0	; 224
    409a:	92 2f       	mov	r25, r18
    409c:	96 95       	lsr	r25
    409e:	96 95       	lsr	r25
    40a0:	96 95       	lsr	r25
    40a2:	89 0f       	add	r24, r25
    40a4:	80 93 f3 00 	sts	0x00F3, r24
    40a8:	22 95       	swap	r18
    40aa:	22 0f       	add	r18, r18
    40ac:	20 7e       	andi	r18, 0xE0	; 224
    40ae:	20 93 f2 00 	sts	0x00F2, r18
    40b2:	80 91 ef 00 	lds	r24, 0x00EF
    40b6:	8f 7e       	andi	r24, 0xEF	; 239
    40b8:	e2 cf       	rjmp	.-60     	; 0x407e <can_cmd+0x1f0>
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    40ba:	d8 01       	movw	r26, r16
    40bc:	18 96       	adiw	r26, 0x08	; 8
    40be:	ed 91       	ld	r30, X+
    40c0:	fc 91       	ld	r31, X
    40c2:	19 97       	sbiw	r26, 0x09	; 9
    40c4:	e9 0f       	add	r30, r25
    40c6:	f1 1d       	adc	r31, r1
    40c8:	80 81       	ld	r24, Z
    40ca:	80 93 fa 00 	sts	0x00FA, r24
    40ce:	9f 5f       	subi	r25, 0xFF	; 255
    40d0:	92 17       	cp	r25, r18
    40d2:	98 f3       	brcs	.-26     	; 0x40ba <can_cmd+0x22c>
          cmd->ctrl.rtr=0; Can_clear_rtr();
    40d4:	f8 01       	movw	r30, r16
    40d6:	13 86       	std	Z+11, r1	; 0x0b
    40d8:	80 91 f0 00 	lds	r24, 0x00F0
    40dc:	8b 7f       	andi	r24, 0xFB	; 251
    40de:	80 93 f0 00 	sts	0x00F0, r24
          Can_set_dlc(cmd->dlc);
    40e2:	80 91 ef 00 	lds	r24, 0x00EF
    40e6:	97 81       	ldd	r25, Z+7	; 0x07
    40e8:	89 2b       	or	r24, r25
    40ea:	80 93 ef 00 	sts	0x00EF, r24
          Can_config_tx();
    40ee:	80 91 ef 00 	lds	r24, 0x00EF
    40f2:	8f 73       	andi	r24, 0x3F	; 63
    40f4:	80 93 ef 00 	sts	0x00EF, r24
    40f8:	80 91 ef 00 	lds	r24, 0x00EF
    40fc:	80 64       	ori	r24, 0x40	; 64
    40fe:	80 93 ef 00 	sts	0x00EF, r24
	  if(!cmd->blocking){	/* Enable interrupt */
    4102:	85 85       	ldd	r24, Z+13	; 0x0d
    4104:	88 23       	and	r24, r24
    4106:	09 f5       	brne	.+66     	; 0x414a <can_cmd+0x2bc>
        Can_set_mob_int(mob_handle) /* Ser ud til at virke */
    4108:	20 91 de 00 	lds	r18, 0x00DE
    410c:	81 e0       	ldi	r24, 0x01	; 1
    410e:	90 e0       	ldi	r25, 0x00	; 0
    4110:	02 c0       	rjmp	.+4      	; 0x4116 <can_cmd+0x288>
    4112:	88 0f       	add	r24, r24
    4114:	99 1f       	adc	r25, r25
    4116:	4a 95       	dec	r20
    4118:	e2 f7       	brpl	.-8      	; 0x4112 <can_cmd+0x284>
    411a:	28 2b       	or	r18, r24
    411c:	20 93 de 00 	sts	0x00DE, r18
    4120:	20 91 df 00 	lds	r18, 0x00DF
    4124:	89 2f       	mov	r24, r25
    4126:	99 0f       	add	r25, r25
    4128:	99 0b       	sbc	r25, r25
    412a:	8f 77       	andi	r24, 0x7F	; 127
    412c:	82 2b       	or	r24, r18
    412e:	80 93 df 00 	sts	0x00DF, r24
		tIntReg = (CANIE1<<8) + CANIE2; /* test var */
    4132:	20 91 df 00 	lds	r18, 0x00DF
    4136:	30 91 de 00 	lds	r19, 0x00DE
    413a:	92 2f       	mov	r25, r18
    413c:	80 e0       	ldi	r24, 0x00	; 0
    413e:	83 0f       	add	r24, r19
    4140:	91 1d       	adc	r25, r1
    4142:	90 93 cd 02 	sts	0x02CD, r25
    4146:	80 93 cc 02 	sts	0x02CC, r24
    414a:	80 e0       	ldi	r24, 0x00	; 0
    414c:	d6 c3       	rjmp	.+1964   	; 0x48fa <can_cmd+0xa6c>
	  }
          break;
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    414e:	d8 01       	movw	r26, r16
    4150:	1c 96       	adiw	r26, 0x0c	; 12
    4152:	8c 91       	ld	r24, X
    4154:	f8 01       	movw	r30, r16
    4156:	33 96       	adiw	r30, 0x03	; 3
    4158:	88 23       	and	r24, r24
    415a:	61 f1       	breq	.+88     	; 0x41b4 <can_cmd+0x326>
    415c:	32 81       	ldd	r19, Z+2	; 0x02
    415e:	93 2f       	mov	r25, r19
    4160:	92 95       	swap	r25
    4162:	96 95       	lsr	r25
    4164:	97 70       	andi	r25, 0x07	; 7
    4166:	83 81       	ldd	r24, Z+3	; 0x03
    4168:	88 0f       	add	r24, r24
    416a:	88 0f       	add	r24, r24
    416c:	88 0f       	add	r24, r24
    416e:	98 0f       	add	r25, r24
    4170:	90 93 f3 00 	sts	0x00F3, r25
    4174:	21 81       	ldd	r18, Z+1	; 0x01
    4176:	82 2f       	mov	r24, r18
    4178:	82 95       	swap	r24
    417a:	86 95       	lsr	r24
    417c:	87 70       	andi	r24, 0x07	; 7
    417e:	33 0f       	add	r19, r19
    4180:	33 0f       	add	r19, r19
    4182:	33 0f       	add	r19, r19
    4184:	83 0f       	add	r24, r19
    4186:	80 93 f2 00 	sts	0x00F2, r24
    418a:	f8 01       	movw	r30, r16
    418c:	93 81       	ldd	r25, Z+3	; 0x03
    418e:	22 0f       	add	r18, r18
    4190:	22 0f       	add	r18, r18
    4192:	22 0f       	add	r18, r18
    4194:	89 2f       	mov	r24, r25
    4196:	82 95       	swap	r24
    4198:	86 95       	lsr	r24
    419a:	87 70       	andi	r24, 0x07	; 7
    419c:	28 0f       	add	r18, r24
    419e:	20 93 f1 00 	sts	0x00F1, r18
    41a2:	99 0f       	add	r25, r25
    41a4:	99 0f       	add	r25, r25
    41a6:	99 0f       	add	r25, r25
    41a8:	90 93 f0 00 	sts	0x00F0, r25
    41ac:	80 91 ef 00 	lds	r24, 0x00EF
    41b0:	80 61       	ori	r24, 0x10	; 16
    41b2:	16 c0       	rjmp	.+44     	; 0x41e0 <can_cmd+0x352>
          else              { Can_set_std_id(cmd->id.std);}
    41b4:	d8 01       	movw	r26, r16
    41b6:	13 96       	adiw	r26, 0x03	; 3
    41b8:	2c 91       	ld	r18, X
    41ba:	81 81       	ldd	r24, Z+1	; 0x01
    41bc:	82 95       	swap	r24
    41be:	88 0f       	add	r24, r24
    41c0:	80 7e       	andi	r24, 0xE0	; 224
    41c2:	92 2f       	mov	r25, r18
    41c4:	96 95       	lsr	r25
    41c6:	96 95       	lsr	r25
    41c8:	96 95       	lsr	r25
    41ca:	89 0f       	add	r24, r25
    41cc:	80 93 f3 00 	sts	0x00F3, r24
    41d0:	22 95       	swap	r18
    41d2:	22 0f       	add	r18, r18
    41d4:	20 7e       	andi	r18, 0xE0	; 224
    41d6:	20 93 f2 00 	sts	0x00F2, r18
    41da:	80 91 ef 00 	lds	r24, 0x00EF
    41de:	8f 7e       	andi	r24, 0xEF	; 239
    41e0:	80 93 ef 00 	sts	0x00EF, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
    41e4:	81 e0       	ldi	r24, 0x01	; 1
    41e6:	f8 01       	movw	r30, r16
    41e8:	83 87       	std	Z+11, r24	; 0x0b
    41ea:	80 91 f0 00 	lds	r24, 0x00F0
    41ee:	84 60       	ori	r24, 0x04	; 4
    41f0:	80 93 f0 00 	sts	0x00F0, r24
          Can_set_dlc(cmd->dlc);
    41f4:	80 91 ef 00 	lds	r24, 0x00EF
    41f8:	97 81       	ldd	r25, Z+7	; 0x07
    41fa:	89 2b       	or	r24, r25
    41fc:	80 93 ef 00 	sts	0x00EF, r24
    4200:	01 cf       	rjmp	.-510    	; 0x4004 <can_cmd+0x176>
          Can_config_tx();
          break;
        //------------      
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    4202:	19 82       	std	Y+1, r1	; 0x01
    4204:	1a 82       	std	Y+2, r1	; 0x02
    4206:	1b 82       	std	Y+3, r1	; 0x03
    4208:	1c 82       	std	Y+4, r1	; 0x04
    420a:	fe 01       	movw	r30, r28
    420c:	31 96       	adiw	r30, 0x01	; 1
    420e:	32 81       	ldd	r19, Z+2	; 0x02
    4210:	93 2f       	mov	r25, r19
    4212:	92 95       	swap	r25
    4214:	96 95       	lsr	r25
    4216:	97 70       	andi	r25, 0x07	; 7
    4218:	83 81       	ldd	r24, Z+3	; 0x03
    421a:	88 0f       	add	r24, r24
    421c:	88 0f       	add	r24, r24
    421e:	88 0f       	add	r24, r24
    4220:	98 0f       	add	r25, r24
    4222:	90 93 f7 00 	sts	0x00F7, r25
    4226:	21 81       	ldd	r18, Z+1	; 0x01
    4228:	82 2f       	mov	r24, r18
    422a:	82 95       	swap	r24
    422c:	86 95       	lsr	r24
    422e:	87 70       	andi	r24, 0x07	; 7
    4230:	33 0f       	add	r19, r19
    4232:	33 0f       	add	r19, r19
    4234:	33 0f       	add	r19, r19
    4236:	83 0f       	add	r24, r19
    4238:	80 93 f6 00 	sts	0x00F6, r24
    423c:	99 81       	ldd	r25, Y+1	; 0x01
    423e:	22 0f       	add	r18, r18
    4240:	22 0f       	add	r18, r18
    4242:	22 0f       	add	r18, r18
    4244:	89 2f       	mov	r24, r25
    4246:	82 95       	swap	r24
    4248:	86 95       	lsr	r24
    424a:	87 70       	andi	r24, 0x07	; 7
    424c:	28 0f       	add	r18, r24
    424e:	20 93 f5 00 	sts	0x00F5, r18
    4252:	99 0f       	add	r25, r25
    4254:	99 0f       	add	r25, r25
    4256:	99 0f       	add	r25, r25
    4258:	90 93 f4 00 	sts	0x00F4, r25
          Can_set_dlc(cmd->dlc);
    425c:	80 91 ef 00 	lds	r24, 0x00EF
    4260:	d8 01       	movw	r26, r16
    4262:	17 96       	adiw	r26, 0x07	; 7
    4264:	9c 91       	ld	r25, X
    4266:	89 2b       	or	r24, r25
    4268:	80 93 ef 00 	sts	0x00EF, r24
          Can_clear_rtrmsk();
    426c:	80 91 f4 00 	lds	r24, 0x00F4
    4270:	8b 7f       	andi	r24, 0xFB	; 251
    4272:	80 93 f4 00 	sts	0x00F4, r24
    4276:	91 c2       	rjmp	.+1314   	; 0x479a <can_cmd+0x90c>
          Can_clear_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_RX_DATA:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    4278:	19 82       	std	Y+1, r1	; 0x01
    427a:	1a 82       	std	Y+2, r1	; 0x02
    427c:	1b 82       	std	Y+3, r1	; 0x03
    427e:	1c 82       	std	Y+4, r1	; 0x04
    4280:	fe 01       	movw	r30, r28
    4282:	31 96       	adiw	r30, 0x01	; 1
    4284:	32 81       	ldd	r19, Z+2	; 0x02
    4286:	93 2f       	mov	r25, r19
    4288:	92 95       	swap	r25
    428a:	96 95       	lsr	r25
    428c:	97 70       	andi	r25, 0x07	; 7
    428e:	83 81       	ldd	r24, Z+3	; 0x03
    4290:	88 0f       	add	r24, r24
    4292:	88 0f       	add	r24, r24
    4294:	88 0f       	add	r24, r24
    4296:	98 0f       	add	r25, r24
    4298:	90 93 f7 00 	sts	0x00F7, r25
    429c:	21 81       	ldd	r18, Z+1	; 0x01
    429e:	82 2f       	mov	r24, r18
    42a0:	82 95       	swap	r24
    42a2:	86 95       	lsr	r24
    42a4:	87 70       	andi	r24, 0x07	; 7
    42a6:	33 0f       	add	r19, r19
    42a8:	33 0f       	add	r19, r19
    42aa:	33 0f       	add	r19, r19
    42ac:	83 0f       	add	r24, r19
    42ae:	80 93 f6 00 	sts	0x00F6, r24
    42b2:	99 81       	ldd	r25, Y+1	; 0x01
    42b4:	22 0f       	add	r18, r18
    42b6:	22 0f       	add	r18, r18
    42b8:	22 0f       	add	r18, r18
    42ba:	89 2f       	mov	r24, r25
    42bc:	82 95       	swap	r24
    42be:	86 95       	lsr	r24
    42c0:	87 70       	andi	r24, 0x07	; 7
    42c2:	28 0f       	add	r18, r24
    42c4:	20 93 f5 00 	sts	0x00F5, r18
    42c8:	99 0f       	add	r25, r25
    42ca:	99 0f       	add	r25, r25
    42cc:	99 0f       	add	r25, r25
    42ce:	90 93 f4 00 	sts	0x00F4, r25
          Can_set_dlc(cmd->dlc);
    42d2:	80 91 ef 00 	lds	r24, 0x00EF
    42d6:	f8 01       	movw	r30, r16
    42d8:	97 81       	ldd	r25, Z+7	; 0x07
    42da:	89 2b       	or	r24, r25
    42dc:	80 93 ef 00 	sts	0x00EF, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    42e0:	13 86       	std	Z+11, r1	; 0x0b
    42e2:	80 91 f4 00 	lds	r24, 0x00F4
    42e6:	84 60       	ori	r24, 0x04	; 4
    42e8:	80 93 f4 00 	sts	0x00F4, r24
    42ec:	80 91 f0 00 	lds	r24, 0x00F0
    42f0:	8b 7f       	andi	r24, 0xFB	; 251
    42f2:	80 93 f0 00 	sts	0x00F0, r24
    42f6:	51 c2       	rjmp	.+1186   	; 0x479a <can_cmd+0x90c>
          Can_clear_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_RX_REMOTE:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    42f8:	19 82       	std	Y+1, r1	; 0x01
    42fa:	1a 82       	std	Y+2, r1	; 0x02
    42fc:	1b 82       	std	Y+3, r1	; 0x03
    42fe:	1c 82       	std	Y+4, r1	; 0x04
    4300:	fe 01       	movw	r30, r28
    4302:	31 96       	adiw	r30, 0x01	; 1
    4304:	32 81       	ldd	r19, Z+2	; 0x02
    4306:	93 2f       	mov	r25, r19
    4308:	92 95       	swap	r25
    430a:	96 95       	lsr	r25
    430c:	97 70       	andi	r25, 0x07	; 7
    430e:	83 81       	ldd	r24, Z+3	; 0x03
    4310:	88 0f       	add	r24, r24
    4312:	88 0f       	add	r24, r24
    4314:	88 0f       	add	r24, r24
    4316:	98 0f       	add	r25, r24
    4318:	90 93 f7 00 	sts	0x00F7, r25
    431c:	21 81       	ldd	r18, Z+1	; 0x01
    431e:	82 2f       	mov	r24, r18
    4320:	82 95       	swap	r24
    4322:	86 95       	lsr	r24
    4324:	87 70       	andi	r24, 0x07	; 7
    4326:	33 0f       	add	r19, r19
    4328:	33 0f       	add	r19, r19
    432a:	33 0f       	add	r19, r19
    432c:	83 0f       	add	r24, r19
    432e:	80 93 f6 00 	sts	0x00F6, r24
    4332:	99 81       	ldd	r25, Y+1	; 0x01
    4334:	22 0f       	add	r18, r18
    4336:	22 0f       	add	r18, r18
    4338:	22 0f       	add	r18, r18
    433a:	89 2f       	mov	r24, r25
    433c:	82 95       	swap	r24
    433e:	86 95       	lsr	r24
    4340:	87 70       	andi	r24, 0x07	; 7
    4342:	28 0f       	add	r18, r24
    4344:	20 93 f5 00 	sts	0x00F5, r18
    4348:	99 0f       	add	r25, r25
    434a:	99 0f       	add	r25, r25
    434c:	99 0f       	add	r25, r25
    434e:	90 93 f4 00 	sts	0x00F4, r25
          Can_set_dlc(cmd->dlc);
    4352:	80 91 ef 00 	lds	r24, 0x00EF
    4356:	d8 01       	movw	r26, r16
    4358:	17 96       	adiw	r26, 0x07	; 7
    435a:	9c 91       	ld	r25, X
    435c:	17 97       	sbiw	r26, 0x07	; 7
    435e:	89 2b       	or	r24, r25
    4360:	80 93 ef 00 	sts	0x00EF, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    4364:	81 e0       	ldi	r24, 0x01	; 1
    4366:	1b 96       	adiw	r26, 0x0b	; 11
    4368:	8c 93       	st	X, r24
    436a:	80 91 f4 00 	lds	r24, 0x00F4
    436e:	84 60       	ori	r24, 0x04	; 4
    4370:	80 93 f4 00 	sts	0x00F4, r24
    4374:	80 91 f0 00 	lds	r24, 0x00F0
    4378:	84 60       	ori	r24, 0x04	; 4
    437a:	80 93 f0 00 	sts	0x00F0, r24
          Can_clear_rplv();
    437e:	80 91 ef 00 	lds	r24, 0x00EF
    4382:	8f 7d       	andi	r24, 0xDF	; 223
    4384:	08 c2       	rjmp	.+1040   	; 0x4796 <can_cmd+0x908>
          Can_clear_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    4386:	f8 01       	movw	r30, r16
    4388:	84 85       	ldd	r24, Z+12	; 0x0c
    438a:	33 96       	adiw	r30, 0x03	; 3
    438c:	88 23       	and	r24, r24
    438e:	69 f1       	breq	.+90     	; 0x43ea <can_cmd+0x55c>
    4390:	32 81       	ldd	r19, Z+2	; 0x02
    4392:	93 2f       	mov	r25, r19
    4394:	92 95       	swap	r25
    4396:	96 95       	lsr	r25
    4398:	97 70       	andi	r25, 0x07	; 7
    439a:	83 81       	ldd	r24, Z+3	; 0x03
    439c:	88 0f       	add	r24, r24
    439e:	88 0f       	add	r24, r24
    43a0:	88 0f       	add	r24, r24
    43a2:	98 0f       	add	r25, r24
    43a4:	90 93 f3 00 	sts	0x00F3, r25
    43a8:	21 81       	ldd	r18, Z+1	; 0x01
    43aa:	82 2f       	mov	r24, r18
    43ac:	82 95       	swap	r24
    43ae:	86 95       	lsr	r24
    43b0:	87 70       	andi	r24, 0x07	; 7
    43b2:	33 0f       	add	r19, r19
    43b4:	33 0f       	add	r19, r19
    43b6:	33 0f       	add	r19, r19
    43b8:	83 0f       	add	r24, r19
    43ba:	80 93 f2 00 	sts	0x00F2, r24
    43be:	d8 01       	movw	r26, r16
    43c0:	13 96       	adiw	r26, 0x03	; 3
    43c2:	9c 91       	ld	r25, X
    43c4:	22 0f       	add	r18, r18
    43c6:	22 0f       	add	r18, r18
    43c8:	22 0f       	add	r18, r18
    43ca:	89 2f       	mov	r24, r25
    43cc:	82 95       	swap	r24
    43ce:	86 95       	lsr	r24
    43d0:	87 70       	andi	r24, 0x07	; 7
    43d2:	28 0f       	add	r18, r24
    43d4:	20 93 f1 00 	sts	0x00F1, r18
    43d8:	99 0f       	add	r25, r25
    43da:	99 0f       	add	r25, r25
    43dc:	99 0f       	add	r25, r25
    43de:	90 93 f0 00 	sts	0x00F0, r25
    43e2:	80 91 ef 00 	lds	r24, 0x00EF
    43e6:	80 61       	ori	r24, 0x10	; 16
    43e8:	16 c0       	rjmp	.+44     	; 0x4416 <can_cmd+0x588>
          else              { Can_set_std_id(cmd->id.std);}
    43ea:	d8 01       	movw	r26, r16
    43ec:	13 96       	adiw	r26, 0x03	; 3
    43ee:	2c 91       	ld	r18, X
    43f0:	81 81       	ldd	r24, Z+1	; 0x01
    43f2:	82 95       	swap	r24
    43f4:	88 0f       	add	r24, r24
    43f6:	80 7e       	andi	r24, 0xE0	; 224
    43f8:	92 2f       	mov	r25, r18
    43fa:	96 95       	lsr	r25
    43fc:	96 95       	lsr	r25
    43fe:	96 95       	lsr	r25
    4400:	89 0f       	add	r24, r25
    4402:	80 93 f3 00 	sts	0x00F3, r24
    4406:	22 95       	swap	r18
    4408:	22 0f       	add	r18, r18
    440a:	20 7e       	andi	r18, 0xE0	; 224
    440c:	20 93 f2 00 	sts	0x00F2, r18
    4410:	80 91 ef 00 	lds	r24, 0x00EF
    4414:	8f 7e       	andi	r24, 0xEF	; 239
    4416:	80 93 ef 00 	sts	0x00EF, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    441a:	8f ef       	ldi	r24, 0xFF	; 255
    441c:	9f ef       	ldi	r25, 0xFF	; 255
    441e:	af ef       	ldi	r26, 0xFF	; 255
    4420:	bf ef       	ldi	r27, 0xFF	; 255
    4422:	89 83       	std	Y+1, r24	; 0x01
    4424:	9a 83       	std	Y+2, r25	; 0x02
    4426:	ab 83       	std	Y+3, r26	; 0x03
    4428:	bc 83       	std	Y+4, r27	; 0x04
    442a:	fe 01       	movw	r30, r28
    442c:	31 96       	adiw	r30, 0x01	; 1
    442e:	32 81       	ldd	r19, Z+2	; 0x02
    4430:	93 2f       	mov	r25, r19
    4432:	92 95       	swap	r25
    4434:	96 95       	lsr	r25
    4436:	97 70       	andi	r25, 0x07	; 7
    4438:	83 81       	ldd	r24, Z+3	; 0x03
    443a:	88 0f       	add	r24, r24
    443c:	88 0f       	add	r24, r24
    443e:	88 0f       	add	r24, r24
    4440:	98 0f       	add	r25, r24
    4442:	90 93 f7 00 	sts	0x00F7, r25
    4446:	21 81       	ldd	r18, Z+1	; 0x01
    4448:	82 2f       	mov	r24, r18
    444a:	82 95       	swap	r24
    444c:	86 95       	lsr	r24
    444e:	87 70       	andi	r24, 0x07	; 7
    4450:	33 0f       	add	r19, r19
    4452:	33 0f       	add	r19, r19
    4454:	33 0f       	add	r19, r19
    4456:	83 0f       	add	r24, r19
    4458:	80 93 f6 00 	sts	0x00F6, r24
    445c:	99 81       	ldd	r25, Y+1	; 0x01
    445e:	22 0f       	add	r18, r18
    4460:	22 0f       	add	r18, r18
    4462:	22 0f       	add	r18, r18
    4464:	89 2f       	mov	r24, r25
    4466:	82 95       	swap	r24
    4468:	86 95       	lsr	r24
    446a:	87 70       	andi	r24, 0x07	; 7
    446c:	28 0f       	add	r18, r24
    446e:	20 93 f5 00 	sts	0x00F5, r18
    4472:	99 0f       	add	r25, r25
    4474:	99 0f       	add	r25, r25
    4476:	99 0f       	add	r25, r25
    4478:	90 93 f4 00 	sts	0x00F4, r25
          Can_set_dlc(cmd->dlc);
    447c:	80 91 ef 00 	lds	r24, 0x00EF
    4480:	f8 01       	movw	r30, r16
    4482:	97 81       	ldd	r25, Z+7	; 0x07
    4484:	89 2b       	or	r24, r25
    4486:	80 93 ef 00 	sts	0x00EF, r24
          Can_clear_rtrmsk();
    448a:	80 91 f4 00 	lds	r24, 0x00F4
    448e:	8b 7f       	andi	r24, 0xFB	; 251
    4490:	80 93 f4 00 	sts	0x00F4, r24
          Can_set_idemsk();
    4494:	80 91 f4 00 	lds	r24, 0x00F4
    4498:	81 60       	ori	r24, 0x01	; 1
    449a:	80 93 f4 00 	sts	0x00F4, r24
          Can_config_rx();       
    449e:	80 91 ef 00 	lds	r24, 0x00EF
    44a2:	8f 73       	andi	r24, 0x3F	; 63
    44a4:	80 93 ef 00 	sts	0x00EF, r24
    44a8:	80 91 ef 00 	lds	r24, 0x00EF
    44ac:	80 68       	ori	r24, 0x80	; 128
    44ae:	b2 cd       	rjmp	.-1180   	; 0x4014 <can_cmd+0x186>
          break;
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    44b0:	d8 01       	movw	r26, r16
    44b2:	1c 96       	adiw	r26, 0x0c	; 12
    44b4:	8c 91       	ld	r24, X
    44b6:	f8 01       	movw	r30, r16
    44b8:	33 96       	adiw	r30, 0x03	; 3
    44ba:	88 23       	and	r24, r24
    44bc:	61 f1       	breq	.+88     	; 0x4516 <can_cmd+0x688>
    44be:	32 81       	ldd	r19, Z+2	; 0x02
    44c0:	93 2f       	mov	r25, r19
    44c2:	92 95       	swap	r25
    44c4:	96 95       	lsr	r25
    44c6:	97 70       	andi	r25, 0x07	; 7
    44c8:	83 81       	ldd	r24, Z+3	; 0x03
    44ca:	88 0f       	add	r24, r24
    44cc:	88 0f       	add	r24, r24
    44ce:	88 0f       	add	r24, r24
    44d0:	98 0f       	add	r25, r24
    44d2:	90 93 f3 00 	sts	0x00F3, r25
    44d6:	21 81       	ldd	r18, Z+1	; 0x01
    44d8:	82 2f       	mov	r24, r18
    44da:	82 95       	swap	r24
    44dc:	86 95       	lsr	r24
    44de:	87 70       	andi	r24, 0x07	; 7
    44e0:	33 0f       	add	r19, r19
    44e2:	33 0f       	add	r19, r19
    44e4:	33 0f       	add	r19, r19
    44e6:	83 0f       	add	r24, r19
    44e8:	80 93 f2 00 	sts	0x00F2, r24
    44ec:	f8 01       	movw	r30, r16
    44ee:	93 81       	ldd	r25, Z+3	; 0x03
    44f0:	22 0f       	add	r18, r18
    44f2:	22 0f       	add	r18, r18
    44f4:	22 0f       	add	r18, r18
    44f6:	89 2f       	mov	r24, r25
    44f8:	82 95       	swap	r24
    44fa:	86 95       	lsr	r24
    44fc:	87 70       	andi	r24, 0x07	; 7
    44fe:	28 0f       	add	r18, r24
    4500:	20 93 f1 00 	sts	0x00F1, r18
    4504:	99 0f       	add	r25, r25
    4506:	99 0f       	add	r25, r25
    4508:	99 0f       	add	r25, r25
    450a:	90 93 f0 00 	sts	0x00F0, r25
    450e:	80 91 ef 00 	lds	r24, 0x00EF
    4512:	80 61       	ori	r24, 0x10	; 16
    4514:	16 c0       	rjmp	.+44     	; 0x4542 <can_cmd+0x6b4>
          else              { Can_set_std_id(cmd->id.std);}
    4516:	d8 01       	movw	r26, r16
    4518:	13 96       	adiw	r26, 0x03	; 3
    451a:	2c 91       	ld	r18, X
    451c:	81 81       	ldd	r24, Z+1	; 0x01
    451e:	82 95       	swap	r24
    4520:	88 0f       	add	r24, r24
    4522:	80 7e       	andi	r24, 0xE0	; 224
    4524:	92 2f       	mov	r25, r18
    4526:	96 95       	lsr	r25
    4528:	96 95       	lsr	r25
    452a:	96 95       	lsr	r25
    452c:	89 0f       	add	r24, r25
    452e:	80 93 f3 00 	sts	0x00F3, r24
    4532:	22 95       	swap	r18
    4534:	22 0f       	add	r18, r18
    4536:	20 7e       	andi	r18, 0xE0	; 224
    4538:	20 93 f2 00 	sts	0x00F2, r18
    453c:	80 91 ef 00 	lds	r24, 0x00EF
    4540:	8f 7e       	andi	r24, 0xEF	; 239
    4542:	80 93 ef 00 	sts	0x00EF, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    4546:	8f ef       	ldi	r24, 0xFF	; 255
    4548:	9f ef       	ldi	r25, 0xFF	; 255
    454a:	af ef       	ldi	r26, 0xFF	; 255
    454c:	bf ef       	ldi	r27, 0xFF	; 255
    454e:	89 83       	std	Y+1, r24	; 0x01
    4550:	9a 83       	std	Y+2, r25	; 0x02
    4552:	ab 83       	std	Y+3, r26	; 0x03
    4554:	bc 83       	std	Y+4, r27	; 0x04
    4556:	fe 01       	movw	r30, r28
    4558:	31 96       	adiw	r30, 0x01	; 1
    455a:	32 81       	ldd	r19, Z+2	; 0x02
    455c:	93 2f       	mov	r25, r19
    455e:	92 95       	swap	r25
    4560:	96 95       	lsr	r25
    4562:	97 70       	andi	r25, 0x07	; 7
    4564:	83 81       	ldd	r24, Z+3	; 0x03
    4566:	88 0f       	add	r24, r24
    4568:	88 0f       	add	r24, r24
    456a:	88 0f       	add	r24, r24
    456c:	98 0f       	add	r25, r24
    456e:	90 93 f7 00 	sts	0x00F7, r25
    4572:	21 81       	ldd	r18, Z+1	; 0x01
    4574:	82 2f       	mov	r24, r18
    4576:	82 95       	swap	r24
    4578:	86 95       	lsr	r24
    457a:	87 70       	andi	r24, 0x07	; 7
    457c:	33 0f       	add	r19, r19
    457e:	33 0f       	add	r19, r19
    4580:	33 0f       	add	r19, r19
    4582:	83 0f       	add	r24, r19
    4584:	80 93 f6 00 	sts	0x00F6, r24
    4588:	99 81       	ldd	r25, Y+1	; 0x01
    458a:	22 0f       	add	r18, r18
    458c:	22 0f       	add	r18, r18
    458e:	22 0f       	add	r18, r18
    4590:	89 2f       	mov	r24, r25
    4592:	82 95       	swap	r24
    4594:	86 95       	lsr	r24
    4596:	87 70       	andi	r24, 0x07	; 7
    4598:	28 0f       	add	r18, r24
    459a:	20 93 f5 00 	sts	0x00F5, r18
    459e:	99 0f       	add	r25, r25
    45a0:	99 0f       	add	r25, r25
    45a2:	99 0f       	add	r25, r25
    45a4:	90 93 f4 00 	sts	0x00F4, r25
          Can_set_dlc(cmd->dlc);
    45a8:	80 91 ef 00 	lds	r24, 0x00EF
    45ac:	f8 01       	movw	r30, r16
    45ae:	97 81       	ldd	r25, Z+7	; 0x07
    45b0:	89 2b       	or	r24, r25
    45b2:	80 93 ef 00 	sts	0x00EF, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    45b6:	13 86       	std	Z+11, r1	; 0x0b
    45b8:	80 91 f4 00 	lds	r24, 0x00F4
    45bc:	84 60       	ori	r24, 0x04	; 4
    45be:	80 93 f4 00 	sts	0x00F4, r24
    45c2:	80 91 f0 00 	lds	r24, 0x00F0
    45c6:	8b 7f       	andi	r24, 0xFB	; 251
    45c8:	80 93 f0 00 	sts	0x00F0, r24
    45cc:	63 cf       	rjmp	.-314    	; 0x4494 <can_cmd+0x606>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    45ce:	d8 01       	movw	r26, r16
    45d0:	1c 96       	adiw	r26, 0x0c	; 12
    45d2:	8c 91       	ld	r24, X
    45d4:	f8 01       	movw	r30, r16
    45d6:	33 96       	adiw	r30, 0x03	; 3
    45d8:	88 23       	and	r24, r24
    45da:	61 f1       	breq	.+88     	; 0x4634 <can_cmd+0x7a6>
    45dc:	32 81       	ldd	r19, Z+2	; 0x02
    45de:	93 2f       	mov	r25, r19
    45e0:	92 95       	swap	r25
    45e2:	96 95       	lsr	r25
    45e4:	97 70       	andi	r25, 0x07	; 7
    45e6:	83 81       	ldd	r24, Z+3	; 0x03
    45e8:	88 0f       	add	r24, r24
    45ea:	88 0f       	add	r24, r24
    45ec:	88 0f       	add	r24, r24
    45ee:	98 0f       	add	r25, r24
    45f0:	90 93 f3 00 	sts	0x00F3, r25
    45f4:	21 81       	ldd	r18, Z+1	; 0x01
    45f6:	82 2f       	mov	r24, r18
    45f8:	82 95       	swap	r24
    45fa:	86 95       	lsr	r24
    45fc:	87 70       	andi	r24, 0x07	; 7
    45fe:	33 0f       	add	r19, r19
    4600:	33 0f       	add	r19, r19
    4602:	33 0f       	add	r19, r19
    4604:	83 0f       	add	r24, r19
    4606:	80 93 f2 00 	sts	0x00F2, r24
    460a:	f8 01       	movw	r30, r16
    460c:	93 81       	ldd	r25, Z+3	; 0x03
    460e:	22 0f       	add	r18, r18
    4610:	22 0f       	add	r18, r18
    4612:	22 0f       	add	r18, r18
    4614:	89 2f       	mov	r24, r25
    4616:	82 95       	swap	r24
    4618:	86 95       	lsr	r24
    461a:	87 70       	andi	r24, 0x07	; 7
    461c:	28 0f       	add	r18, r24
    461e:	20 93 f1 00 	sts	0x00F1, r18
    4622:	99 0f       	add	r25, r25
    4624:	99 0f       	add	r25, r25
    4626:	99 0f       	add	r25, r25
    4628:	90 93 f0 00 	sts	0x00F0, r25
    462c:	80 91 ef 00 	lds	r24, 0x00EF
    4630:	80 61       	ori	r24, 0x10	; 16
    4632:	16 c0       	rjmp	.+44     	; 0x4660 <can_cmd+0x7d2>
          else              { Can_set_std_id(cmd->id.std);}
    4634:	d8 01       	movw	r26, r16
    4636:	13 96       	adiw	r26, 0x03	; 3
    4638:	2c 91       	ld	r18, X
    463a:	81 81       	ldd	r24, Z+1	; 0x01
    463c:	82 95       	swap	r24
    463e:	88 0f       	add	r24, r24
    4640:	80 7e       	andi	r24, 0xE0	; 224
    4642:	92 2f       	mov	r25, r18
    4644:	96 95       	lsr	r25
    4646:	96 95       	lsr	r25
    4648:	96 95       	lsr	r25
    464a:	89 0f       	add	r24, r25
    464c:	80 93 f3 00 	sts	0x00F3, r24
    4650:	22 95       	swap	r18
    4652:	22 0f       	add	r18, r18
    4654:	20 7e       	andi	r18, 0xE0	; 224
    4656:	20 93 f2 00 	sts	0x00F2, r18
    465a:	80 91 ef 00 	lds	r24, 0x00EF
    465e:	8f 7e       	andi	r24, 0xEF	; 239
    4660:	80 93 ef 00 	sts	0x00EF, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    4664:	8f ef       	ldi	r24, 0xFF	; 255
    4666:	9f ef       	ldi	r25, 0xFF	; 255
    4668:	af ef       	ldi	r26, 0xFF	; 255
    466a:	bf ef       	ldi	r27, 0xFF	; 255
    466c:	89 83       	std	Y+1, r24	; 0x01
    466e:	9a 83       	std	Y+2, r25	; 0x02
    4670:	ab 83       	std	Y+3, r26	; 0x03
    4672:	bc 83       	std	Y+4, r27	; 0x04
    4674:	fe 01       	movw	r30, r28
    4676:	31 96       	adiw	r30, 0x01	; 1
    4678:	32 81       	ldd	r19, Z+2	; 0x02
    467a:	93 2f       	mov	r25, r19
    467c:	92 95       	swap	r25
    467e:	96 95       	lsr	r25
    4680:	97 70       	andi	r25, 0x07	; 7
    4682:	83 81       	ldd	r24, Z+3	; 0x03
    4684:	88 0f       	add	r24, r24
    4686:	88 0f       	add	r24, r24
    4688:	88 0f       	add	r24, r24
    468a:	98 0f       	add	r25, r24
    468c:	90 93 f7 00 	sts	0x00F7, r25
    4690:	21 81       	ldd	r18, Z+1	; 0x01
    4692:	82 2f       	mov	r24, r18
    4694:	82 95       	swap	r24
    4696:	86 95       	lsr	r24
    4698:	87 70       	andi	r24, 0x07	; 7
    469a:	33 0f       	add	r19, r19
    469c:	33 0f       	add	r19, r19
    469e:	33 0f       	add	r19, r19
    46a0:	83 0f       	add	r24, r19
    46a2:	80 93 f6 00 	sts	0x00F6, r24
    46a6:	99 81       	ldd	r25, Y+1	; 0x01
    46a8:	22 0f       	add	r18, r18
    46aa:	22 0f       	add	r18, r18
    46ac:	22 0f       	add	r18, r18
    46ae:	89 2f       	mov	r24, r25
    46b0:	82 95       	swap	r24
    46b2:	86 95       	lsr	r24
    46b4:	87 70       	andi	r24, 0x07	; 7
    46b6:	28 0f       	add	r18, r24
    46b8:	20 93 f5 00 	sts	0x00F5, r18
    46bc:	99 0f       	add	r25, r25
    46be:	99 0f       	add	r25, r25
    46c0:	99 0f       	add	r25, r25
    46c2:	90 93 f4 00 	sts	0x00F4, r25
          Can_set_dlc(cmd->dlc);
    46c6:	80 91 ef 00 	lds	r24, 0x00EF
    46ca:	f8 01       	movw	r30, r16
    46cc:	97 81       	ldd	r25, Z+7	; 0x07
    46ce:	89 2b       	or	r24, r25
    46d0:	80 93 ef 00 	sts	0x00EF, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    46d4:	81 e0       	ldi	r24, 0x01	; 1
    46d6:	83 87       	std	Z+11, r24	; 0x0b
    46d8:	80 91 f4 00 	lds	r24, 0x00F4
    46dc:	84 60       	ori	r24, 0x04	; 4
    46de:	80 93 f4 00 	sts	0x00F4, r24
    46e2:	80 91 f0 00 	lds	r24, 0x00F0
    46e6:	84 60       	ori	r24, 0x04	; 4
    46e8:	80 93 f0 00 	sts	0x00F0, r24
          Can_clear_rplv();
    46ec:	80 91 ef 00 	lds	r24, 0x00EF
    46f0:	8f 7d       	andi	r24, 0xDF	; 223
    46f2:	80 93 ef 00 	sts	0x00EF, r24
    46f6:	ce ce       	rjmp	.-612    	; 0x4494 <can_cmd+0x606>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    46f8:	d8 01       	movw	r26, r16
    46fa:	18 96       	adiw	r26, 0x08	; 8
    46fc:	ed 91       	ld	r30, X+
    46fe:	fc 91       	ld	r31, X
    4700:	19 97       	sbiw	r26, 0x09	; 9
    4702:	e9 0f       	add	r30, r25
    4704:	f1 1d       	adc	r31, r1
    4706:	80 81       	ld	r24, Z
    4708:	80 93 fa 00 	sts	0x00FA, r24
    470c:	9f 5f       	subi	r25, 0xFF	; 255
    470e:	94 17       	cp	r25, r20
    4710:	98 f3       	brcs	.-26     	; 0x46f8 <can_cmd+0x86a>
          u32_temp=0; Can_set_ext_msk(u32_temp);
    4712:	19 82       	std	Y+1, r1	; 0x01
    4714:	1a 82       	std	Y+2, r1	; 0x02
    4716:	1b 82       	std	Y+3, r1	; 0x03
    4718:	1c 82       	std	Y+4, r1	; 0x04
    471a:	fe 01       	movw	r30, r28
    471c:	31 96       	adiw	r30, 0x01	; 1
    471e:	32 81       	ldd	r19, Z+2	; 0x02
    4720:	93 2f       	mov	r25, r19
    4722:	92 95       	swap	r25
    4724:	96 95       	lsr	r25
    4726:	97 70       	andi	r25, 0x07	; 7
    4728:	83 81       	ldd	r24, Z+3	; 0x03
    472a:	88 0f       	add	r24, r24
    472c:	88 0f       	add	r24, r24
    472e:	88 0f       	add	r24, r24
    4730:	98 0f       	add	r25, r24
    4732:	90 93 f7 00 	sts	0x00F7, r25
    4736:	21 81       	ldd	r18, Z+1	; 0x01
    4738:	82 2f       	mov	r24, r18
    473a:	82 95       	swap	r24
    473c:	86 95       	lsr	r24
    473e:	87 70       	andi	r24, 0x07	; 7
    4740:	33 0f       	add	r19, r19
    4742:	33 0f       	add	r19, r19
    4744:	33 0f       	add	r19, r19
    4746:	83 0f       	add	r24, r19
    4748:	80 93 f6 00 	sts	0x00F6, r24
    474c:	99 81       	ldd	r25, Y+1	; 0x01
    474e:	22 0f       	add	r18, r18
    4750:	22 0f       	add	r18, r18
    4752:	22 0f       	add	r18, r18
    4754:	89 2f       	mov	r24, r25
    4756:	82 95       	swap	r24
    4758:	86 95       	lsr	r24
    475a:	87 70       	andi	r24, 0x07	; 7
    475c:	28 0f       	add	r18, r24
    475e:	20 93 f5 00 	sts	0x00F5, r18
    4762:	99 0f       	add	r25, r25
    4764:	99 0f       	add	r25, r25
    4766:	99 0f       	add	r25, r25
    4768:	90 93 f4 00 	sts	0x00F4, r25
          Can_set_dlc(cmd->dlc);
    476c:	80 91 ef 00 	lds	r24, 0x00EF
    4770:	48 2b       	or	r20, r24
    4772:	40 93 ef 00 	sts	0x00EF, r20
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    4776:	81 e0       	ldi	r24, 0x01	; 1
    4778:	f8 01       	movw	r30, r16
    477a:	83 87       	std	Z+11, r24	; 0x0b
    477c:	80 91 f4 00 	lds	r24, 0x00F4
    4780:	84 60       	ori	r24, 0x04	; 4
    4782:	80 93 f4 00 	sts	0x00F4, r24
    4786:	80 91 f0 00 	lds	r24, 0x00F0
    478a:	84 60       	ori	r24, 0x04	; 4
    478c:	80 93 f0 00 	sts	0x00F0, r24
          Can_set_rplv();
    4790:	80 91 ef 00 	lds	r24, 0x00EF
    4794:	80 62       	ori	r24, 0x20	; 32
    4796:	80 93 ef 00 	sts	0x00EF, r24
          Can_clear_idemsk();
    479a:	80 91 f4 00 	lds	r24, 0x00F4
    479e:	8e 7f       	andi	r24, 0xFE	; 254
    47a0:	7c ce       	rjmp	.-776    	; 0x449a <can_cmd+0x60c>
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    47a2:	d8 01       	movw	r26, r16
    47a4:	1c 96       	adiw	r26, 0x0c	; 12
    47a6:	8c 91       	ld	r24, X
    47a8:	f8 01       	movw	r30, r16
    47aa:	33 96       	adiw	r30, 0x03	; 3
    47ac:	88 23       	and	r24, r24
    47ae:	91 f1       	breq	.+100    	; 0x4814 <can_cmd+0x986>
    47b0:	32 81       	ldd	r19, Z+2	; 0x02
    47b2:	93 2f       	mov	r25, r19
    47b4:	92 95       	swap	r25
    47b6:	96 95       	lsr	r25
    47b8:	97 70       	andi	r25, 0x07	; 7
    47ba:	83 81       	ldd	r24, Z+3	; 0x03
    47bc:	88 0f       	add	r24, r24
    47be:	88 0f       	add	r24, r24
    47c0:	88 0f       	add	r24, r24
    47c2:	98 0f       	add	r25, r24
    47c4:	90 93 f3 00 	sts	0x00F3, r25
    47c8:	21 81       	ldd	r18, Z+1	; 0x01
    47ca:	82 2f       	mov	r24, r18
    47cc:	82 95       	swap	r24
    47ce:	86 95       	lsr	r24
    47d0:	87 70       	andi	r24, 0x07	; 7
    47d2:	33 0f       	add	r19, r19
    47d4:	33 0f       	add	r19, r19
    47d6:	33 0f       	add	r19, r19
    47d8:	83 0f       	add	r24, r19
    47da:	80 93 f2 00 	sts	0x00F2, r24
    47de:	f8 01       	movw	r30, r16
    47e0:	93 81       	ldd	r25, Z+3	; 0x03
    47e2:	22 0f       	add	r18, r18
    47e4:	22 0f       	add	r18, r18
    47e6:	22 0f       	add	r18, r18
    47e8:	89 2f       	mov	r24, r25
    47ea:	82 95       	swap	r24
    47ec:	86 95       	lsr	r24
    47ee:	87 70       	andi	r24, 0x07	; 7
    47f0:	28 0f       	add	r18, r24
    47f2:	20 93 f1 00 	sts	0x00F1, r18
    47f6:	99 0f       	add	r25, r25
    47f8:	99 0f       	add	r25, r25
    47fa:	99 0f       	add	r25, r25
    47fc:	90 93 f0 00 	sts	0x00F0, r25
    4800:	80 91 ef 00 	lds	r24, 0x00EF
    4804:	80 61       	ori	r24, 0x10	; 16
    4806:	80 93 ef 00 	sts	0x00EF, r24
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    480a:	d8 01       	movw	r26, r16
    480c:	17 96       	adiw	r26, 0x07	; 7
    480e:	4c 91       	ld	r20, X
    4810:	90 e0       	ldi	r25, 0x00	; 0
    4812:	22 c0       	rjmp	.+68     	; 0x4858 <can_cmd+0x9ca>
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
    4814:	d8 01       	movw	r26, r16
    4816:	13 96       	adiw	r26, 0x03	; 3
    4818:	2c 91       	ld	r18, X
    481a:	81 81       	ldd	r24, Z+1	; 0x01
    481c:	82 95       	swap	r24
    481e:	88 0f       	add	r24, r24
    4820:	80 7e       	andi	r24, 0xE0	; 224
    4822:	92 2f       	mov	r25, r18
    4824:	96 95       	lsr	r25
    4826:	96 95       	lsr	r25
    4828:	96 95       	lsr	r25
    482a:	89 0f       	add	r24, r25
    482c:	80 93 f3 00 	sts	0x00F3, r24
    4830:	22 95       	swap	r18
    4832:	22 0f       	add	r18, r18
    4834:	20 7e       	andi	r18, 0xE0	; 224
    4836:	20 93 f2 00 	sts	0x00F2, r18
    483a:	80 91 ef 00 	lds	r24, 0x00EF
    483e:	8f 7e       	andi	r24, 0xEF	; 239
    4840:	e2 cf       	rjmp	.-60     	; 0x4806 <can_cmd+0x978>
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    4842:	d8 01       	movw	r26, r16
    4844:	18 96       	adiw	r26, 0x08	; 8
    4846:	ed 91       	ld	r30, X+
    4848:	fc 91       	ld	r31, X
    484a:	19 97       	sbiw	r26, 0x09	; 9
    484c:	e9 0f       	add	r30, r25
    484e:	f1 1d       	adc	r31, r1
    4850:	80 81       	ld	r24, Z
    4852:	80 93 fa 00 	sts	0x00FA, r24
    4856:	9f 5f       	subi	r25, 0xFF	; 255
    4858:	94 17       	cp	r25, r20
    485a:	98 f3       	brcs	.-26     	; 0x4842 <can_cmd+0x9b4>
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    485c:	8f ef       	ldi	r24, 0xFF	; 255
    485e:	9f ef       	ldi	r25, 0xFF	; 255
    4860:	af ef       	ldi	r26, 0xFF	; 255
    4862:	bf ef       	ldi	r27, 0xFF	; 255
    4864:	89 83       	std	Y+1, r24	; 0x01
    4866:	9a 83       	std	Y+2, r25	; 0x02
    4868:	ab 83       	std	Y+3, r26	; 0x03
    486a:	bc 83       	std	Y+4, r27	; 0x04
    486c:	fe 01       	movw	r30, r28
    486e:	31 96       	adiw	r30, 0x01	; 1
    4870:	32 81       	ldd	r19, Z+2	; 0x02
    4872:	93 2f       	mov	r25, r19
    4874:	92 95       	swap	r25
    4876:	96 95       	lsr	r25
    4878:	97 70       	andi	r25, 0x07	; 7
    487a:	83 81       	ldd	r24, Z+3	; 0x03
    487c:	88 0f       	add	r24, r24
    487e:	88 0f       	add	r24, r24
    4880:	88 0f       	add	r24, r24
    4882:	98 0f       	add	r25, r24
    4884:	90 93 f7 00 	sts	0x00F7, r25
    4888:	21 81       	ldd	r18, Z+1	; 0x01
    488a:	82 2f       	mov	r24, r18
    488c:	82 95       	swap	r24
    488e:	86 95       	lsr	r24
    4890:	87 70       	andi	r24, 0x07	; 7
    4892:	33 0f       	add	r19, r19
    4894:	33 0f       	add	r19, r19
    4896:	33 0f       	add	r19, r19
    4898:	83 0f       	add	r24, r19
    489a:	80 93 f6 00 	sts	0x00F6, r24
    489e:	99 81       	ldd	r25, Y+1	; 0x01
    48a0:	22 0f       	add	r18, r18
    48a2:	22 0f       	add	r18, r18
    48a4:	22 0f       	add	r18, r18
    48a6:	89 2f       	mov	r24, r25
    48a8:	82 95       	swap	r24
    48aa:	86 95       	lsr	r24
    48ac:	87 70       	andi	r24, 0x07	; 7
    48ae:	28 0f       	add	r18, r24
    48b0:	20 93 f5 00 	sts	0x00F5, r18
    48b4:	99 0f       	add	r25, r25
    48b6:	99 0f       	add	r25, r25
    48b8:	99 0f       	add	r25, r25
    48ba:	90 93 f4 00 	sts	0x00F4, r25
          Can_set_dlc(cmd->dlc);
    48be:	80 91 ef 00 	lds	r24, 0x00EF
    48c2:	48 2b       	or	r20, r24
    48c4:	40 93 ef 00 	sts	0x00EF, r20
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    48c8:	81 e0       	ldi	r24, 0x01	; 1
    48ca:	f8 01       	movw	r30, r16
    48cc:	83 87       	std	Z+11, r24	; 0x0b
    48ce:	80 91 f4 00 	lds	r24, 0x00F4
    48d2:	84 60       	ori	r24, 0x04	; 4
    48d4:	80 93 f4 00 	sts	0x00F4, r24
    48d8:	80 91 f0 00 	lds	r24, 0x00F0
    48dc:	84 60       	ori	r24, 0x04	; 4
    48de:	80 93 f0 00 	sts	0x00F0, r24
          Can_set_rplv();
    48e2:	80 91 ef 00 	lds	r24, 0x00EF
    48e6:	80 62       	ori	r24, 0x20	; 32
    48e8:	04 cf       	rjmp	.-504    	; 0x46f2 <can_cmd+0x864>
          Can_config_rx();       
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    48ea:	d8 01       	movw	r26, r16
    48ec:	1a 96       	adiw	r26, 0x0a	; 10
    48ee:	1c 92       	st	X, r1
    48f0:	2c cc       	rjmp	.-1960   	; 0x414a <can_cmd+0x2bc>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    48f2:	8f e1       	ldi	r24, 0x1F	; 31
    48f4:	f8 01       	movw	r30, r16
    48f6:	82 87       	std	Z+10, r24	; 0x0a
    48f8:	8f ef       	ldi	r24, 0xFF	; 255
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
    48fa:	24 96       	adiw	r28, 0x04	; 4
    48fc:	e4 e0       	ldi	r30, 0x04	; 4
    48fe:	0c 94 d9 2e 	jmp	0x5db2	; 0x5db2 <__epilogue_restores__+0x1c>

00004902 <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
U8 can_init(U8 mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
    4902:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <can_fixed_baudrate>
    4906:	88 23       	and	r24, r24
    4908:	41 f0       	breq	.+16     	; 0x491a <can_init+0x18>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
    490a:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <can_clear_all_mob>
    Can_enable();                               // c.f. macro in "can_drv.h" 
    490e:	80 91 d8 00 	lds	r24, 0x00D8
    4912:	82 60       	ori	r24, 0x02	; 2
    4914:	80 93 d8 00 	sts	0x00D8, r24
    4918:	81 e0       	ldi	r24, 0x01	; 1
    return (1);
}
    491a:	08 95       	ret

0000491c <init_can_data_mobs>:

U8 tx_remote_buffer[8];
st_cmd_t tx_remote_msg;

void init_can_data_mobs(void)
{
    491c:	a0 ee       	ldi	r26, 0xE0	; 224
    491e:	b9 e0       	ldi	r27, 0x09	; 9
    4920:	4a ea       	ldi	r20, 0xAA	; 170
    4922:	59 e0       	ldi	r21, 0x09	; 9
    4924:	20 e0       	ldi	r18, 0x00	; 0
    4926:	30 e0       	ldi	r19, 0x00	; 0
    U8 i,j;

    for (i=0; i<num_of_response_mobs; i++) {
        response_msg[i].pt_data = &response_buffer[i][0];
    4928:	11 96       	adiw	r26, 0x01	; 1
    492a:	5c 93       	st	X, r21
    492c:	4e 93       	st	-X, r20
        response_msg[i].status = 0;
    492e:	12 96       	adiw	r26, 0x02	; 2
    4930:	1c 92       	st	X, r1
    4932:	12 97       	sbiw	r26, 0x02	; 2
    4934:	f9 01       	movw	r30, r18
    4936:	83 e0       	ldi	r24, 0x03	; 3
    4938:	ee 0f       	add	r30, r30
    493a:	ff 1f       	adc	r31, r31
    493c:	8a 95       	dec	r24
    493e:	e1 f7       	brne	.-8      	; 0x4938 <init_can_data_mobs+0x1c>
    4940:	e6 55       	subi	r30, 0x56	; 86
    4942:	f6 4f       	sbci	r31, 0xF6	; 246
    4944:	80 e0       	ldi	r24, 0x00	; 0
        for (j=0; j<9; j++) {
                response_buffer[i][j] = 0;
    4946:	11 92       	st	Z+, r1
    U8 i,j;

    for (i=0; i<num_of_response_mobs; i++) {
        response_msg[i].pt_data = &response_buffer[i][0];
        response_msg[i].status = 0;
        for (j=0; j<9; j++) {
    4948:	8f 5f       	subi	r24, 0xFF	; 255
    494a:	89 30       	cpi	r24, 0x09	; 9
    494c:	e1 f7       	brne	.-8      	; 0x4946 <init_can_data_mobs+0x2a>
    494e:	2f 5f       	subi	r18, 0xFF	; 255
    4950:	3f 4f       	sbci	r19, 0xFF	; 255
    4952:	1e 96       	adiw	r26, 0x0e	; 14
    4954:	48 5f       	subi	r20, 0xF8	; 248
    4956:	5f 4f       	sbci	r21, 0xFF	; 255

void init_can_data_mobs(void)
{
    U8 i,j;

    for (i=0; i<num_of_response_mobs; i++) {
    4958:	22 30       	cpi	r18, 0x02	; 2
    495a:	31 05       	cpc	r19, r1
    495c:	29 f7       	brne	.-54     	; 0x4928 <init_can_data_mobs+0xc>
        response_msg[i].status = 0;
        for (j=0; j<9; j++) {
                response_buffer[i][j] = 0;
        }
    }
}
    495e:	08 95       	ret

00004960 <can_update_rx_msg>:

    while (can_get_status(&tx_remote_msg) == CAN_STATUS_NOT_COMPLETED);
}

unsigned short int can_update_rx_msg(st_cmd_t* msg, U8 msg_id, U8 dlc)
{
    4960:	cf 93       	push	r28
    4962:	df 93       	push	r29
    4964:	ec 01       	movw	r28, r24
        U8 i;
        
        msg->id.std = msg_id;
    4966:	6b 83       	std	Y+3, r22	; 0x03
    4968:	1c 82       	std	Y+4, r1	; 0x04
        msg->ctrl.ide = 0;
    496a:	1c 86       	std	Y+12, r1	; 0x0c
        msg->ctrl.rtr = 0;
    496c:	1b 86       	std	Y+11, r1	; 0x0b
        msg->dlc = dlc;
    496e:	4f 83       	std	Y+7, r20	; 0x07
        msg->cmd = CMD_RX_DATA_MASKED;
    4970:	88 e0       	ldi	r24, 0x08	; 8
    4972:	90 e0       	ldi	r25, 0x00	; 0
    4974:	9a 83       	std	Y+2, r25	; 0x02
    4976:	89 83       	std	Y+1, r24	; 0x01

        while(can_cmd(msg) != CAN_CMD_ACCEPTED);
    4978:	ce 01       	movw	r24, r28
    497a:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <can_cmd>
    497e:	88 23       	and	r24, r24
    4980:	d9 f7       	brne	.-10     	; 0x4978 <can_update_rx_msg+0x18>
}
    4982:	df 91       	pop	r29
    4984:	cf 91       	pop	r28
    4986:	08 95       	ret

00004988 <can_data_mob_setup>:
        }
    }
}

void can_data_mob_setup(U8 mob_num)
{
    4988:	cf 93       	push	r28
    498a:	df 93       	push	r29
    response_msg[mob_num].id.std = 128;
    498c:	28 2f       	mov	r18, r24
    498e:	30 e0       	ldi	r19, 0x00	; 0
    4990:	22 0f       	add	r18, r18
    4992:	33 1f       	adc	r19, r19
    4994:	f9 01       	movw	r30, r18
    4996:	93 e0       	ldi	r25, 0x03	; 3
    4998:	ee 0f       	add	r30, r30
    499a:	ff 1f       	adc	r31, r31
    499c:	9a 95       	dec	r25
    499e:	e1 f7       	brne	.-8      	; 0x4998 <can_data_mob_setup+0x10>
    49a0:	e2 1b       	sub	r30, r18
    49a2:	f3 0b       	sbc	r31, r19
    49a4:	e8 52       	subi	r30, 0x28	; 40
    49a6:	f6 4f       	sbci	r31, 0xF6	; 246
    49a8:	20 e8       	ldi	r18, 0x80	; 128
    49aa:	30 e0       	ldi	r19, 0x00	; 0
    49ac:	34 83       	std	Z+4, r19	; 0x04
    49ae:	23 83       	std	Z+3, r18	; 0x03
    response_msg[mob_num].ctrl.ide = 0;
    49b0:	28 2f       	mov	r18, r24
    49b2:	30 e0       	ldi	r19, 0x00	; 0
    49b4:	22 0f       	add	r18, r18
    49b6:	33 1f       	adc	r19, r19
    49b8:	f9 01       	movw	r30, r18
    49ba:	a3 e0       	ldi	r26, 0x03	; 3
    49bc:	ee 0f       	add	r30, r30
    49be:	ff 1f       	adc	r31, r31
    49c0:	aa 95       	dec	r26
    49c2:	e1 f7       	brne	.-8      	; 0x49bc <can_data_mob_setup+0x34>
    49c4:	e2 1b       	sub	r30, r18
    49c6:	f3 0b       	sbc	r31, r19
    49c8:	e8 52       	subi	r30, 0x28	; 40
    49ca:	f6 4f       	sbci	r31, 0xF6	; 246
    49cc:	14 86       	std	Z+12, r1	; 0x0c
    response_msg[mob_num].ctrl.rtr = 0;
    49ce:	28 2f       	mov	r18, r24
    49d0:	30 e0       	ldi	r19, 0x00	; 0
    49d2:	22 0f       	add	r18, r18
    49d4:	33 1f       	adc	r19, r19
    49d6:	f9 01       	movw	r30, r18
    49d8:	73 e0       	ldi	r23, 0x03	; 3
    49da:	ee 0f       	add	r30, r30
    49dc:	ff 1f       	adc	r31, r31
    49de:	7a 95       	dec	r23
    49e0:	e1 f7       	brne	.-8      	; 0x49da <can_data_mob_setup+0x52>
    49e2:	e2 1b       	sub	r30, r18
    49e4:	f3 0b       	sbc	r31, r19
    49e6:	e8 52       	subi	r30, 0x28	; 40
    49e8:	f6 4f       	sbci	r31, 0xF6	; 246
    49ea:	13 86       	std	Z+11, r1	; 0x0b
    response_msg[mob_num].dlc = 8;
    49ec:	28 2f       	mov	r18, r24
    49ee:	30 e0       	ldi	r19, 0x00	; 0
    49f0:	22 0f       	add	r18, r18
    49f2:	33 1f       	adc	r19, r19
    49f4:	f9 01       	movw	r30, r18
    49f6:	53 e0       	ldi	r21, 0x03	; 3
    49f8:	ee 0f       	add	r30, r30
    49fa:	ff 1f       	adc	r31, r31
    49fc:	5a 95       	dec	r21
    49fe:	e1 f7       	brne	.-8      	; 0x49f8 <can_data_mob_setup+0x70>
    4a00:	e2 1b       	sub	r30, r18
    4a02:	f3 0b       	sbc	r31, r19
    4a04:	e8 52       	subi	r30, 0x28	; 40
    4a06:	f6 4f       	sbci	r31, 0xF6	; 246
    4a08:	98 e0       	ldi	r25, 0x08	; 8
    4a0a:	97 83       	std	Z+7, r25	; 0x07
    response_msg[mob_num].cmd = CMD_RX_DATA_MASKED;
    4a0c:	28 2f       	mov	r18, r24
    4a0e:	30 e0       	ldi	r19, 0x00	; 0
    4a10:	22 0f       	add	r18, r18
    4a12:	33 1f       	adc	r19, r19
    4a14:	f9 01       	movw	r30, r18
    4a16:	93 e0       	ldi	r25, 0x03	; 3
    4a18:	ee 0f       	add	r30, r30
    4a1a:	ff 1f       	adc	r31, r31
    4a1c:	9a 95       	dec	r25
    4a1e:	e1 f7       	brne	.-8      	; 0x4a18 <can_data_mob_setup+0x90>
    4a20:	e2 1b       	sub	r30, r18
    4a22:	f3 0b       	sbc	r31, r19
    4a24:	e8 52       	subi	r30, 0x28	; 40
    4a26:	f6 4f       	sbci	r31, 0xF6	; 246
    4a28:	28 e0       	ldi	r18, 0x08	; 8
    4a2a:	30 e0       	ldi	r19, 0x00	; 0
    4a2c:	32 83       	std	Z+2, r19	; 0x02
    4a2e:	21 83       	std	Z+1, r18	; 0x01
    
    while (can_cmd(&response_msg[mob_num]) != CAN_CMD_ACCEPTED);
    4a30:	9e e0       	ldi	r25, 0x0E	; 14
    4a32:	89 9f       	mul	r24, r25
    4a34:	e0 01       	movw	r28, r0
    4a36:	11 24       	eor	r1, r1
    4a38:	c8 52       	subi	r28, 0x28	; 40
    4a3a:	d6 4f       	sbci	r29, 0xF6	; 246
    4a3c:	ce 01       	movw	r24, r28
    4a3e:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <can_cmd>
    4a42:	88 23       	and	r24, r24
    4a44:	d9 f7       	brne	.-10     	; 0x4a3c <can_data_mob_setup+0xb4>
}
    4a46:	df 91       	pop	r29
    4a48:	cf 91       	pop	r28
    4a4a:	08 95       	ret

00004a4c <can_send>:

/* funktion til at sende en besked der er 1 byte lang */
void can_send(U8 msg_id, U8 msg, U8 dlc)
{
    tx_remote_buffer[0] = msg; 
    4a4c:	60 93 a2 09 	sts	0x09A2, r22

    tx_remote_msg.id.std = msg_id;
    4a50:	80 93 bd 09 	sts	0x09BD, r24
    4a54:	10 92 be 09 	sts	0x09BE, r1
    tx_remote_msg.ctrl.ide = 0;
    4a58:	10 92 c6 09 	sts	0x09C6, r1
    tx_remote_msg.ctrl.rtr = 1;
    4a5c:	81 e0       	ldi	r24, 0x01	; 1
    4a5e:	80 93 c5 09 	sts	0x09C5, r24
    tx_remote_msg.dlc = dlc;
    4a62:	40 93 c1 09 	sts	0x09C1, r20
    tx_remote_msg.cmd = CMD_TX_DATA;
    4a66:	82 e0       	ldi	r24, 0x02	; 2
    4a68:	90 e0       	ldi	r25, 0x00	; 0
    4a6a:	90 93 bc 09 	sts	0x09BC, r25
    4a6e:	80 93 bb 09 	sts	0x09BB, r24

    while (can_cmd(&tx_remote_msg) != CAN_CMD_ACCEPTED);
    4a72:	8a eb       	ldi	r24, 0xBA	; 186
    4a74:	99 e0       	ldi	r25, 0x09	; 9
    4a76:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <can_cmd>
    4a7a:	88 23       	and	r24, r24
    4a7c:	d1 f7       	brne	.-12     	; 0x4a72 <can_send+0x26>

    while (can_get_status(&tx_remote_msg) == CAN_STATUS_NOT_COMPLETED);
    4a7e:	8a eb       	ldi	r24, 0xBA	; 186
    4a80:	99 e0       	ldi	r25, 0x09	; 9
    4a82:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <can_get_status>
    4a86:	81 30       	cpi	r24, 0x01	; 1
    4a88:	d1 f3       	breq	.-12     	; 0x4a7e <can_send+0x32>
}
    4a8a:	08 95       	ret

00004a8c <__vector_21>:
	}
}

/* Funktion til at læse data fra ECU */
ISR(USART0_RX_vect)
{
    4a8c:	1f 92       	push	r1
    4a8e:	0f 92       	push	r0
    4a90:	0f b6       	in	r0, 0x3f	; 63
    4a92:	0f 92       	push	r0
    4a94:	0b b6       	in	r0, 0x3b	; 59
    4a96:	0f 92       	push	r0
    4a98:	11 24       	eor	r1, r1
    4a9a:	2f 93       	push	r18
    4a9c:	3f 93       	push	r19
    4a9e:	8f 93       	push	r24
    4aa0:	ef 93       	push	r30
    4aa2:	ff 93       	push	r31
	if (RecIndex <= 114) {			// Der skal modtages 228 bytes fra ECU'en
    4aa4:	20 91 c3 02 	lds	r18, 0x02C3
    4aa8:	30 91 c4 02 	lds	r19, 0x02C4
    4aac:	23 37       	cpi	r18, 0x73	; 115
    4aae:	31 05       	cpc	r19, r1
    4ab0:	64 f4       	brge	.+24     	; 0x4aca <__vector_21+0x3e>
		EcuData[RecIndex] = UDR0;	// Gem data fra ECU
    4ab2:	80 91 c6 00 	lds	r24, 0x00C6
    4ab6:	f9 01       	movw	r30, r18
    4ab8:	e5 59       	subi	r30, 0x95	; 149
    4aba:	fe 4f       	sbci	r31, 0xFE	; 254
    4abc:	80 83       	st	Z, r24
		RecIndex++;
    4abe:	2f 5f       	subi	r18, 0xFF	; 255
    4ac0:	3f 4f       	sbci	r19, 0xFF	; 255
    4ac2:	30 93 c4 02 	sts	0x02C4, r19
    4ac6:	20 93 c3 02 	sts	0x02C3, r18
	}
}
    4aca:	ff 91       	pop	r31
    4acc:	ef 91       	pop	r30
    4ace:	8f 91       	pop	r24
    4ad0:	3f 91       	pop	r19
    4ad2:	2f 91       	pop	r18
    4ad4:	0f 90       	pop	r0
    4ad6:	0b be       	out	0x3b, r0	; 59
    4ad8:	0f 90       	pop	r0
    4ada:	0f be       	out	0x3f, r0	; 63
    4adc:	0f 90       	pop	r0
    4ade:	1f 90       	pop	r1
    4ae0:	18 95       	reti

00004ae2 <__vector_33>:

/* ISR to take care of xbee data sending */
ISR(USART1_UDRE_vect)
{
    4ae2:	1f 92       	push	r1
    4ae4:	0f 92       	push	r0
    4ae6:	0f b6       	in	r0, 0x3f	; 63
    4ae8:	0f 92       	push	r0
    4aea:	0b b6       	in	r0, 0x3b	; 59
    4aec:	0f 92       	push	r0
    4aee:	11 24       	eor	r1, r1
    4af0:	2f 93       	push	r18
    4af2:	5f 93       	push	r21
    4af4:	6f 93       	push	r22
    4af6:	7f 93       	push	r23
    4af8:	8f 93       	push	r24
    4afa:	9f 93       	push	r25
    4afc:	af 93       	push	r26
    4afe:	bf 93       	push	r27
    4b00:	ef 93       	push	r30
    4b02:	ff 93       	push	r31
	uint8_t tmp;

	/* if xbee_seq_index is less than 3 send package start sequence */
	if (xbee_seq_index<3) {
    4b04:	80 91 cb 02 	lds	r24, 0x02CB
    4b08:	83 30       	cpi	r24, 0x03	; 3
    4b0a:	68 f4       	brcc	.+26     	; 0x4b26 <__vector_33+0x44>
		UDR1 = start_sequence[xbee_seq_index++];
    4b0c:	80 91 cb 02 	lds	r24, 0x02CB
    4b10:	e8 2f       	mov	r30, r24
    4b12:	f0 e0       	ldi	r31, 0x00	; 0
    4b14:	e1 5f       	subi	r30, 0xF1	; 241
    4b16:	fe 4f       	sbci	r31, 0xFE	; 254
    4b18:	90 81       	ld	r25, Z
    4b1a:	90 93 ce 00 	sts	0x00CE, r25
    4b1e:	8f 5f       	subi	r24, 0xFF	; 255
    4b20:	80 93 cb 02 	sts	0x02CB, r24
    4b24:	3c c0       	rjmp	.+120    	; 0x4b9e <__vector_33+0xbc>
	}else{
		QUEUE_GET(xbee_q, tmp);
    4b26:	80 91 22 09 	lds	r24, 0x0922
    4b2a:	90 91 23 09 	lds	r25, 0x0923
    4b2e:	fc 01       	movw	r30, r24
    4b30:	ee 5d       	subi	r30, 0xDE	; 222
    4b32:	f6 4f       	sbci	r31, 0xF6	; 246
    4b34:	27 81       	ldd	r18, Z+7	; 0x07
    4b36:	60 91 26 09 	lds	r22, 0x0926
    4b3a:	70 91 27 09 	lds	r23, 0x0927
    4b3e:	01 96       	adiw	r24, 0x01	; 1
    4b40:	0e 94 7a 2e 	call	0x5cf4	; 0x5cf4 <__divmodhi4>
    4b44:	90 93 23 09 	sts	0x0923, r25
    4b48:	80 93 22 09 	sts	0x0922, r24
    4b4c:	80 91 28 09 	lds	r24, 0x0928
    4b50:	81 50       	subi	r24, 0x01	; 1
    4b52:	80 93 28 09 	sts	0x0928, r24
		if (nextId == 0) {
    4b56:	80 91 c8 02 	lds	r24, 0x02C8
    4b5a:	88 23       	and	r24, r24
    4b5c:	51 f4       	brne	.+20     	; 0x4b72 <__vector_33+0x90>
			nextId = valueObjects[tmp].length+8;
    4b5e:	e2 2f       	mov	r30, r18
    4b60:	f0 e0       	ldi	r31, 0x00	; 0
    4b62:	ee 0f       	add	r30, r30
    4b64:	ff 1f       	adc	r31, r31
    4b66:	ee 5e       	subi	r30, 0xEE	; 238
    4b68:	fe 4f       	sbci	r31, 0xFE	; 254
    4b6a:	80 81       	ld	r24, Z
    4b6c:	88 5f       	subi	r24, 0xF8	; 248
    4b6e:	80 93 c8 02 	sts	0x02C8, r24
		}
		UDR1 = tmp;
    4b72:	20 93 ce 00 	sts	0x00CE, r18
		nextId = nextId - 8;
    4b76:	80 91 c8 02 	lds	r24, 0x02C8
    4b7a:	88 50       	subi	r24, 0x08	; 8
    4b7c:	80 93 c8 02 	sts	0x02C8, r24
	    	if (nextId == 0) {
    4b80:	80 91 c8 02 	lds	r24, 0x02C8
    4b84:	88 23       	and	r24, r24
    4b86:	59 f4       	brne	.+22     	; 0x4b9e <__vector_33+0xbc>
			if (QUEUE_GET_NUM_ELE(xbee_q) <= 4) {
    4b88:	80 91 28 09 	lds	r24, 0x0928
    4b8c:	85 30       	cpi	r24, 0x05	; 5
    4b8e:	38 f4       	brcc	.+14     	; 0x4b9e <__vector_33+0xbc>
				xbee_sending = 0;
    4b90:	10 92 c7 02 	sts	0x02C7, r1
				Usart1_tx_ei_dis();
    4b94:	80 91 c9 00 	lds	r24, 0x00C9
    4b98:	8f 7d       	andi	r24, 0xDF	; 223
    4b9a:	80 93 c9 00 	sts	0x00C9, r24
			}
		}
	}
}
    4b9e:	ff 91       	pop	r31
    4ba0:	ef 91       	pop	r30
    4ba2:	bf 91       	pop	r27
    4ba4:	af 91       	pop	r26
    4ba6:	9f 91       	pop	r25
    4ba8:	8f 91       	pop	r24
    4baa:	7f 91       	pop	r23
    4bac:	6f 91       	pop	r22
    4bae:	5f 91       	pop	r21
    4bb0:	2f 91       	pop	r18
    4bb2:	0f 90       	pop	r0
    4bb4:	0b be       	out	0x3b, r0	; 59
    4bb6:	0f 90       	pop	r0
    4bb8:	0f be       	out	0x3f, r0	; 63
    4bba:	0f 90       	pop	r0
    4bbc:	1f 90       	pop	r1
    4bbe:	18 95       	reti

00004bc0 <__vector_16>:
volatile uint8_t xbee_sending = 0;
volatile uint8_t nextId = 0;

/* Funktion der sender data request til ECU */
ISR(TIMER0_COMP_vect)
{
    4bc0:	1f 92       	push	r1
    4bc2:	0f 92       	push	r0
    4bc4:	0f b6       	in	r0, 0x3f	; 63
    4bc6:	0f 92       	push	r0
    4bc8:	0b b6       	in	r0, 0x3b	; 59
    4bca:	0f 92       	push	r0
    4bcc:	11 24       	eor	r1, r1
    4bce:	2f 93       	push	r18
    4bd0:	3f 93       	push	r19
    4bd2:	4f 93       	push	r20
    4bd4:	5f 93       	push	r21
    4bd6:	6f 93       	push	r22
    4bd8:	7f 93       	push	r23
    4bda:	8f 93       	push	r24
    4bdc:	9f 93       	push	r25
    4bde:	af 93       	push	r26
    4be0:	bf 93       	push	r27
    4be2:	cf 93       	push	r28
    4be4:	df 93       	push	r29
    4be6:	ef 93       	push	r30
    4be8:	ff 93       	push	r31
	int i;
	testvar++;
    4bea:	80 91 c5 02 	lds	r24, 0x02C5
    4bee:	90 91 c6 02 	lds	r25, 0x02C6
    4bf2:	01 96       	adiw	r24, 0x01	; 1
    4bf4:	90 93 c6 02 	sts	0x02C6, r25
    4bf8:	80 93 c5 02 	sts	0x02C5, r24
	if (testvar == 4) {
    4bfc:	04 97       	sbiw	r24, 0x04	; 4
    4bfe:	a1 f5       	brne	.+104    	; 0x4c68 <__vector_16+0xa8>
		if (RecIndex != 114 && EcuErrorTmp < 5) { // Test for fejl
    4c00:	20 91 c3 02 	lds	r18, 0x02C3
    4c04:	30 91 c4 02 	lds	r19, 0x02C4
    4c08:	22 37       	cpi	r18, 0x72	; 114
    4c0a:	31 05       	cpc	r19, r1
    4c0c:	69 f0       	breq	.+26     	; 0x4c28 <__vector_16+0x68>
    4c0e:	80 91 ca 02 	lds	r24, 0x02CA
    4c12:	85 30       	cpi	r24, 0x05	; 5
    4c14:	48 f4       	brcc	.+18     	; 0x4c28 <__vector_16+0x68>
			EcuErrorTmp++;
    4c16:	8f 5f       	subi	r24, 0xFF	; 255
    4c18:	80 93 ca 02 	sts	0x02CA, r24
			if (EcuErrorTmp == 5) {
    4c1c:	85 30       	cpi	r24, 0x05	; 5
    4c1e:	81 f4       	brne	.+32     	; 0x4c40 <__vector_16+0x80>
				EcuCommError = 1;
    4c20:	81 e0       	ldi	r24, 0x01	; 1
    4c22:	80 93 c9 02 	sts	0x02C9, r24
    4c26:	0c c0       	rjmp	.+24     	; 0x4c40 <__vector_16+0x80>
			}
		} else if (EcuErrorTmp > 0 && RecIndex == 114) {
    4c28:	80 91 ca 02 	lds	r24, 0x02CA
    4c2c:	88 23       	and	r24, r24
    4c2e:	41 f0       	breq	.+16     	; 0x4c40 <__vector_16+0x80>
    4c30:	22 37       	cpi	r18, 0x72	; 114
    4c32:	31 05       	cpc	r19, r1
    4c34:	29 f4       	brne	.+10     	; 0x4c40 <__vector_16+0x80>
			EcuErrorTmp--;
    4c36:	81 50       	subi	r24, 0x01	; 1
    4c38:	80 93 ca 02 	sts	0x02CA, r24
			EcuCommError = 0;
    4c3c:	10 92 c9 02 	sts	0x02C9, r1
		}
		testvar=0;
    4c40:	10 92 c6 02 	sts	0x02C6, r1
    4c44:	10 92 c5 02 	sts	0x02C5, r1
		RecIndex = 0;
    4c48:	10 92 c4 02 	sts	0x02C4, r1
    4c4c:	10 92 c3 02 	sts	0x02C3, r1
    4c50:	ce e5       	ldi	r28, 0x5E	; 94
    4c52:	d1 e0       	ldi	r29, 0x01	; 1
		for (i=0;i<=9;i++) {		// Send data req streng
			USART0_Transmit(ecu_data[i]); 
    4c54:	89 91       	ld	r24, Y+
    4c56:	99 27       	eor	r25, r25
    4c58:	87 fd       	sbrc	r24, 7
    4c5a:	90 95       	com	r25
    4c5c:	0e 94 06 03 	call	0x60c	; 0x60c <USART0_Transmit>
			EcuErrorTmp--;
			EcuCommError = 0;
		}
		testvar=0;
		RecIndex = 0;
		for (i=0;i<=9;i++) {		// Send data req streng
    4c60:	81 e0       	ldi	r24, 0x01	; 1
    4c62:	c8 36       	cpi	r28, 0x68	; 104
    4c64:	d8 07       	cpc	r29, r24
    4c66:	b1 f7       	brne	.-20     	; 0x4c54 <__vector_16+0x94>
			USART0_Transmit(ecu_data[i]); 
		}
	}
}
    4c68:	ff 91       	pop	r31
    4c6a:	ef 91       	pop	r30
    4c6c:	df 91       	pop	r29
    4c6e:	cf 91       	pop	r28
    4c70:	bf 91       	pop	r27
    4c72:	af 91       	pop	r26
    4c74:	9f 91       	pop	r25
    4c76:	8f 91       	pop	r24
    4c78:	7f 91       	pop	r23
    4c7a:	6f 91       	pop	r22
    4c7c:	5f 91       	pop	r21
    4c7e:	4f 91       	pop	r20
    4c80:	3f 91       	pop	r19
    4c82:	2f 91       	pop	r18
    4c84:	0f 90       	pop	r0
    4c86:	0b be       	out	0x3b, r0	; 59
    4c88:	0f 90       	pop	r0
    4c8a:	0f be       	out	0x3f, r0	; 63
    4c8c:	0f 90       	pop	r0
    4c8e:	1f 90       	pop	r1
    4c90:	18 95       	reti

00004c92 <xbee_send_trigger>:
	 * 
	 *
	 * -Trigger package send 
	 */
	/* Check if xbee is already sending and if true just return */
	if (xbee_sending) return;
    4c92:	80 91 c7 02 	lds	r24, 0x02C7
    4c96:	88 23       	and	r24, r24
    4c98:	d1 f4       	brne	.+52     	; 0x4cce <xbee_send_trigger+0x3c>

	/* If number of bytes in send buffer is greater than X send data */
	if (QUEUE_GET_NUM_ELE(xbee_q)>=10){
    4c9a:	80 91 28 09 	lds	r24, 0x0928
    4c9e:	8a 30       	cpi	r24, 0x0A	; 10
    4ca0:	b0 f0       	brcs	.+44     	; 0x4cce <xbee_send_trigger+0x3c>
		xbee_sending = 1;
    4ca2:	81 e0       	ldi	r24, 0x01	; 1
    4ca4:	80 93 c7 02 	sts	0x02C7, r24
		xbee_seq_index = 0;
    4ca8:	10 92 cb 02 	sts	0x02CB, r1
	    	Usart1_tx_ei_en();	/* Remove when done testing */
    4cac:	80 91 c9 00 	lds	r24, 0x00C9
    4cb0:	80 62       	ori	r24, 0x20	; 32
    4cb2:	80 93 c9 00 	sts	0x00C9, r24
		UDR1 = start_sequence[xbee_seq_index++];
    4cb6:	90 91 cb 02 	lds	r25, 0x02CB
    4cba:	e9 2f       	mov	r30, r25
    4cbc:	f0 e0       	ldi	r31, 0x00	; 0
    4cbe:	e8 59       	subi	r30, 0x98	; 152
    4cc0:	fe 4f       	sbci	r31, 0xFE	; 254
    4cc2:	80 81       	ld	r24, Z
    4cc4:	80 93 ce 00 	sts	0x00CE, r24
    4cc8:	9f 5f       	subi	r25, 0xFF	; 255
    4cca:	90 93 cb 02 	sts	0x02CB, r25
    4cce:	08 95       	ret

00004cd0 <TWI_init>:
#include <util/twi.h>
#include "twi.h"

void TWI_init(void)
{
	PORTD |= (1<<PORTD0)|(1<<PORTD1);	/* Enable pull-up on TWI pins */
    4cd0:	8b b1       	in	r24, 0x0b	; 11
    4cd2:	83 60       	ori	r24, 0x03	; 3
    4cd4:	8b b9       	out	0x0b, r24	; 11

	/* Set TWI clock */
	TWSR = 0;	/* Set prescaler to 1 */
    4cd6:	10 92 b9 00 	sts	0x00B9, r1
	TWBR = (F_CPU/TWI_CLOCK-16)/2;	/* Calculate TWBR value */
    4cda:	8f e2       	ldi	r24, 0x2F	; 47
    4cdc:	80 93 b8 00 	sts	0x00B8, r24
}
    4ce0:	08 95       	ret

00004ce2 <TWI_start>:

BOOL TWI_start(void)
{
	TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);	/* send start condition */
    4ce2:	84 ea       	ldi	r24, 0xA4	; 164
    4ce4:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    4ce8:	80 91 bc 00 	lds	r24, 0x00BC
    4cec:	87 ff       	sbrs	r24, 7
    4cee:	fc cf       	rjmp	.-8      	; 0x4ce8 <TWI_start+0x6>
	if (!((TW_STATUS == TW_REP_START) || (TW_STATUS == TW_START))) return FALSE; /* Return if communication could not be started */
    4cf0:	80 91 b9 00 	lds	r24, 0x00B9
    4cf4:	88 7f       	andi	r24, 0xF8	; 248
    4cf6:	80 31       	cpi	r24, 0x10	; 16
    4cf8:	19 f4       	brne	.+6      	; 0x4d00 <TWI_start+0x1e>
    4cfa:	21 e0       	ldi	r18, 0x01	; 1
    4cfc:	30 e0       	ldi	r19, 0x00	; 0
    4cfe:	0b c0       	rjmp	.+22     	; 0x4d16 <TWI_start+0x34>
    4d00:	80 91 b9 00 	lds	r24, 0x00B9
    4d04:	90 e0       	ldi	r25, 0x00	; 0
    4d06:	88 7f       	andi	r24, 0xF8	; 248
    4d08:	88 30       	cpi	r24, 0x08	; 8
    4d0a:	09 f0       	breq	.+2      	; 0x4d0e <TWI_start+0x2c>
    4d0c:	91 e0       	ldi	r25, 0x01	; 1
    4d0e:	81 e0       	ldi	r24, 0x01	; 1
    4d10:	98 27       	eor	r25, r24
    4d12:	29 2f       	mov	r18, r25
    4d14:	30 e0       	ldi	r19, 0x00	; 0
	return TRUE;
}
    4d16:	c9 01       	movw	r24, r18
    4d18:	08 95       	ret

00004d1a <TWI_send>:

/* Send a byte to the TWI bus */
void TWI_send(uint8_t data)
{
	TWDR = data;
    4d1a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    4d1e:	84 e8       	ldi	r24, 0x84	; 132
    4d20:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    4d24:	80 91 bc 00 	lds	r24, 0x00BC
    4d28:	87 ff       	sbrs	r24, 7
    4d2a:	fc cf       	rjmp	.-8      	; 0x4d24 <TWI_send+0xa>
}	
    4d2c:	08 95       	ret

00004d2e <TWI_rcvr>:

/* Read a byte from the TWI bus */
uint8_t TWI_rcvr(BOOL ack)
{
	if (ack) {
    4d2e:	89 2b       	or	r24, r25
    4d30:	11 f0       	breq	.+4      	; 0x4d36 <TWI_rcvr+0x8>
		TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA); 	/* send ACK after data recived */
    4d32:	84 ec       	ldi	r24, 0xC4	; 196
    4d34:	01 c0       	rjmp	.+2      	; 0x4d38 <TWI_rcvr+0xa>
	} else {
		TWCR = _BV(TWINT) | _BV(TWEN);			/* send NACK after data recived */
    4d36:	84 e8       	ldi	r24, 0x84	; 132
    4d38:	80 93 bc 00 	sts	0x00BC, r24
	}		 
	while ((TWCR & _BV(TWINT)) == 0) ; 			/* wait for transmission */	
    4d3c:	80 91 bc 00 	lds	r24, 0x00BC
    4d40:	87 ff       	sbrs	r24, 7
    4d42:	fc cf       	rjmp	.-8      	; 0x4d3c <TWI_rcvr+0xe>
	return 	TWDR;
    4d44:	80 91 bb 00 	lds	r24, 0x00BB
}
    4d48:	08 95       	ret

00004d4a <TWI_stop>:
		
void TWI_stop(void)
{
	TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */
    4d4a:	84 e9       	ldi	r24, 0x94	; 148
    4d4c:	80 93 bc 00 	sts	0x00BC, r24
}
    4d50:	08 95       	ret

00004d52 <get_free_log_number>:
#if _USE_LFN
char Lfname[_MAX_LFN+1];
#endif

int get_free_log_number( DIR *dir )
{
    4d52:	0f 93       	push	r16
    4d54:	1f 93       	push	r17
    4d56:	cf 93       	push	r28
    4d58:	df 93       	push	r29
    4d5a:	8c 01       	movw	r16, r24
    4d5c:	c0 e0       	ldi	r28, 0x00	; 0
    4d5e:	d0 e0       	ldi	r29, 0x00	; 0
#if _USE_LFN
	Finfo.lfname = Lfname;
	Finfo.lfsize = sizeof(Lfname);
#endif
	for(;;) {
		res = f_readdir(dir, &Finfo);
    4d60:	c8 01       	movw	r24, r16
    4d62:	62 e0       	ldi	r22, 0x02	; 2
    4d64:	75 e0       	ldi	r23, 0x05	; 5
    4d66:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <f_readdir>
		if ((res != FR_OK) || !Finfo.fname[0]) break;
    4d6a:	88 23       	and	r24, r24
    4d6c:	89 f4       	brne	.+34     	; 0x4d90 <get_free_log_number+0x3e>
    4d6e:	80 91 0b 05 	lds	r24, 0x050B
    4d72:	88 23       	and	r24, r24
    4d74:	69 f0       	breq	.+26     	; 0x4d90 <get_free_log_number+0x3e>
		if ( atoi(&(Finfo.fname[0])) > maxname )
    4d76:	8b e0       	ldi	r24, 0x0B	; 11
    4d78:	95 e0       	ldi	r25, 0x05	; 5
    4d7a:	0e 94 ec 2e 	call	0x5dd8	; 0x5dd8 <atoi>
    4d7e:	c8 17       	cp	r28, r24
    4d80:	d9 07       	cpc	r29, r25
    4d82:	70 f7       	brcc	.-36     	; 0x4d60 <get_free_log_number+0xe>
			maxname = atoi(&(Finfo.fname[0]));
    4d84:	8b e0       	ldi	r24, 0x0B	; 11
    4d86:	95 e0       	ldi	r25, 0x05	; 5
    4d88:	0e 94 ec 2e 	call	0x5dd8	; 0x5dd8 <atoi>
    4d8c:	ec 01       	movw	r28, r24
    4d8e:	e8 cf       	rjmp	.-48     	; 0x4d60 <get_free_log_number+0xe>
    4d90:	9e 01       	movw	r18, r28
    4d92:	2f 5f       	subi	r18, 0xFF	; 255
    4d94:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	return maxname + 1;
}
    4d96:	c9 01       	movw	r24, r18
    4d98:	df 91       	pop	r29
    4d9a:	cf 91       	pop	r28
    4d9c:	1f 91       	pop	r17
    4d9e:	0f 91       	pop	r16
    4da0:	08 95       	ret

00004da2 <ecu_val_to_xbee>:
    48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
    73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,
    98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114};

void ecu_val_to_xbee(uint8_t i, uint8_t j)
{
    4da2:	0f 93       	push	r16
    4da4:	1f 93       	push	r17
    4da6:	cf 93       	push	r28
    4da8:	df 93       	push	r29
    4daa:	38 2f       	mov	r19, r24
    4dac:	06 2f       	mov	r16, r22
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4dae:	f8 94       	cli
	uint8_t k=0;
//	xprintf(PSTR("i%d,j%d \n"), i, j);
	/* Add value to xbee buffer */
    	ATOMIC_BLOCK(ATOMIC_FORCEON)
    	{
		QUEUE_PUT(xbee_q, ECUObjects[j].id);	/* Add id */
    4db0:	80 91 24 09 	lds	r24, 0x0924
    4db4:	90 91 25 09 	lds	r25, 0x0925
    4db8:	10 e0       	ldi	r17, 0x00	; 0
    4dba:	dc 01       	movw	r26, r24
    4dbc:	ae 5d       	subi	r26, 0xDE	; 222
    4dbe:	b6 4f       	sbci	r27, 0xF6	; 246
    4dc0:	f8 01       	movw	r30, r16
    4dc2:	ee 0f       	add	r30, r30
    4dc4:	ff 1f       	adc	r31, r31
    4dc6:	e0 0f       	add	r30, r16
    4dc8:	f1 1f       	adc	r31, r17
    4dca:	e2 52       	subi	r30, 0x22	; 34
    4dcc:	fe 4f       	sbci	r31, 0xFE	; 254
    4dce:	21 81       	ldd	r18, Z+1	; 0x01
    4dd0:	17 96       	adiw	r26, 0x07	; 7
    4dd2:	2c 93       	st	X, r18
    4dd4:	60 91 26 09 	lds	r22, 0x0926
    4dd8:	70 91 27 09 	lds	r23, 0x0927
    4ddc:	01 96       	adiw	r24, 0x01	; 1
    4dde:	0e 94 7a 2e 	call	0x5cf4	; 0x5cf4 <__divmodhi4>
    4de2:	90 93 25 09 	sts	0x0925, r25
    4de6:	80 93 24 09 	sts	0x0924, r24
    4dea:	80 91 28 09 	lds	r24, 0x0928
    4dee:	8f 5f       	subi	r24, 0xFF	; 255
    4df0:	80 93 28 09 	sts	0x0928, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    4df4:	78 94       	sei
	}
	for (k=0;k<ECUObjects[j].length;k++) {	/* Add value */
    4df6:	f8 01       	movw	r30, r16
    4df8:	ee 0f       	add	r30, r30
    4dfa:	ff 1f       	adc	r31, r31
    4dfc:	e0 0f       	add	r30, r16
    4dfe:	f1 1f       	adc	r31, r17
    4e00:	e2 52       	subi	r30, 0x22	; 34
    4e02:	fe 4f       	sbci	r31, 0xFE	; 254
    4e04:	80 81       	ld	r24, Z
    4e06:	23 2f       	mov	r18, r19
    4e08:	30 e0       	ldi	r19, 0x00	; 0
    4e0a:	89 01       	movw	r16, r18
    4e0c:	05 59       	subi	r16, 0x95	; 149
    4e0e:	1e 4f       	sbci	r17, 0xFE	; 254
    4e10:	e9 01       	movw	r28, r18
    4e12:	c8 0f       	add	r28, r24
    4e14:	d1 1d       	adc	r29, r1
    4e16:	c5 59       	subi	r28, 0x95	; 149
    4e18:	de 4f       	sbci	r29, 0xFE	; 254
    4e1a:	1d c0       	rjmp	.+58     	; 0x4e56 <ecu_val_to_xbee+0xb4>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4e1c:	f8 94       	cli
    		ATOMIC_BLOCK(ATOMIC_FORCEON)
    		{
			QUEUE_PUT(xbee_q, EcuData[i+k]);
    4e1e:	80 91 24 09 	lds	r24, 0x0924
    4e22:	90 91 25 09 	lds	r25, 0x0925
    4e26:	fc 01       	movw	r30, r24
    4e28:	ee 5d       	subi	r30, 0xDE	; 222
    4e2a:	f6 4f       	sbci	r31, 0xF6	; 246
    4e2c:	d8 01       	movw	r26, r16
    4e2e:	2d 91       	ld	r18, X+
    4e30:	8d 01       	movw	r16, r26
    4e32:	27 83       	std	Z+7, r18	; 0x07
    4e34:	60 91 26 09 	lds	r22, 0x0926
    4e38:	70 91 27 09 	lds	r23, 0x0927
    4e3c:	01 96       	adiw	r24, 0x01	; 1
    4e3e:	0e 94 7a 2e 	call	0x5cf4	; 0x5cf4 <__divmodhi4>
    4e42:	90 93 25 09 	sts	0x0925, r25
    4e46:	80 93 24 09 	sts	0x0924, r24
    4e4a:	80 91 28 09 	lds	r24, 0x0928
    4e4e:	8f 5f       	subi	r24, 0xFF	; 255
    4e50:	80 93 28 09 	sts	0x0928, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    4e54:	78 94       	sei
	/* Add value to xbee buffer */
    	ATOMIC_BLOCK(ATOMIC_FORCEON)
    	{
		QUEUE_PUT(xbee_q, ECUObjects[j].id);	/* Add id */
	}
	for (k=0;k<ECUObjects[j].length;k++) {	/* Add value */
    4e56:	0c 17       	cp	r16, r28
    4e58:	1d 07       	cpc	r17, r29
    4e5a:	01 f7       	brne	.-64     	; 0x4e1c <ecu_val_to_xbee+0x7a>
    		{
			QUEUE_PUT(xbee_q, EcuData[i+k]);
		}
	}
	/* Check if more than 20 elements in xbee buffer */
	if (QUEUE_GET_NUM_ELE(xbee_q) >= 20) {
    4e5c:	80 91 28 09 	lds	r24, 0x0928
    4e60:	84 31       	cpi	r24, 0x14	; 20
    4e62:	10 f0       	brcs	.+4      	; 0x4e68 <ecu_val_to_xbee+0xc6>
		//xprintf(PSTR("More than 20 elements\n"));
		xbee_send_trigger();
    4e64:	0e 94 49 26 	call	0x4c92	; 0x4c92 <xbee_send_trigger>
	}
}
    4e68:	df 91       	pop	r29
    4e6a:	cf 91       	pop	r28
    4e6c:	1f 91       	pop	r17
    4e6e:	0f 91       	pop	r16
    4e70:	08 95       	ret

00004e72 <ecu_data_handler>:

void ecu_data_handler( void )
{
    4e72:	ef 92       	push	r14
    4e74:	ff 92       	push	r15
    4e76:	0f 93       	push	r16
    4e78:	1f 93       	push	r17
    4e7a:	cf 93       	push	r28
    4e7c:	df 93       	push	r29
    4e7e:	ff 24       	eor	r15, r15
    4e80:	ee 24       	eor	r14, r14
	uint8_t	j=0;

	/* Loop over all values in EcuData */
	while(i<=114) {
		/* Check if anything to be done for value */
		if (valueObjects[ECUObjects[j].id].action & (TO_XBEE | TO_SD | TO_CAN) ) {
    4e82:	0e 2d       	mov	r16, r14
    4e84:	10 e0       	ldi	r17, 0x00	; 0
    4e86:	f8 01       	movw	r30, r16
    4e88:	ee 0f       	add	r30, r30
    4e8a:	ff 1f       	adc	r31, r31
    4e8c:	e0 0f       	add	r30, r16
    4e8e:	f1 1f       	adc	r31, r17
    4e90:	e2 52       	subi	r30, 0x22	; 34
    4e92:	fe 4f       	sbci	r31, 0xFE	; 254
    4e94:	01 80       	ldd	r0, Z+1	; 0x01
    4e96:	f2 81       	ldd	r31, Z+2	; 0x02
    4e98:	e0 2d       	mov	r30, r0
    4e9a:	ee 0f       	add	r30, r30
    4e9c:	ff 1f       	adc	r31, r31
    4e9e:	eb 59       	subi	r30, 0x9B	; 155
    4ea0:	fd 4f       	sbci	r31, 0xFD	; 253
    4ea2:	81 81       	ldd	r24, Z+1	; 0x01
    4ea4:	c8 2f       	mov	r28, r24
    4ea6:	d0 e0       	ldi	r29, 0x00	; 0
    4ea8:	ce 01       	movw	r24, r28
    4eaa:	87 70       	andi	r24, 0x07	; 7
    4eac:	90 70       	andi	r25, 0x00	; 0
    4eae:	89 2b       	or	r24, r25
    4eb0:	b9 f0       	breq	.+46     	; 0x4ee0 <ecu_data_handler+0x6e>
			/* Value to xbee? */
			if (valueObjects[ECUObjects[j].id].action & TO_XBEE) {
    4eb2:	c2 ff       	sbrs	r28, 2
    4eb4:	04 c0       	rjmp	.+8      	; 0x4ebe <ecu_data_handler+0x4c>
			    	//_delay_us(10);
				ecu_val_to_xbee(i,j);
    4eb6:	8f 2d       	mov	r24, r15
    4eb8:	6e 2d       	mov	r22, r14
    4eba:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <ecu_val_to_xbee>
				 * made
				 */
			}
	
			/* Value to CAN? */
			if (valueObjects[ECUObjects[j].id].action & TO_CAN) {
    4ebe:	c0 ff       	sbrs	r28, 0
    4ec0:	0f c0       	rjmp	.+30     	; 0x4ee0 <ecu_data_handler+0x6e>
				/* TODO
				 * Insert call to val_to_CAN() when the function is
				 * made
				 */
				can_send_non_blocking(rpm_msgid, &EcuData[i], ECUObjects[j].length);
    4ec2:	6f 2d       	mov	r22, r15
    4ec4:	70 e0       	ldi	r23, 0x00	; 0
    4ec6:	65 59       	subi	r22, 0x95	; 149
    4ec8:	7e 4f       	sbci	r23, 0xFE	; 254
    4eca:	f8 01       	movw	r30, r16
    4ecc:	ee 0f       	add	r30, r30
    4ece:	ff 1f       	adc	r31, r31
    4ed0:	e0 0f       	add	r30, r16
    4ed2:	f1 1f       	adc	r31, r17
    4ed4:	e2 52       	subi	r30, 0x22	; 34
    4ed6:	fe 4f       	sbci	r31, 0xFE	; 254
    4ed8:	85 e8       	ldi	r24, 0x85	; 133
    4eda:	40 81       	ld	r20, Z
    4edc:	0e 94 1f 28 	call	0x503e	; 0x503e <can_send_non_blocking>
			}
		}
		
		/* Find index for next value */
		i += ECUObjects[j].length;
    4ee0:	f8 01       	movw	r30, r16
    4ee2:	ee 0f       	add	r30, r30
    4ee4:	ff 1f       	adc	r31, r31
    4ee6:	e0 0f       	add	r30, r16
    4ee8:	f1 1f       	adc	r31, r17
    4eea:	e2 52       	subi	r30, 0x22	; 34
    4eec:	fe 4f       	sbci	r31, 0xFE	; 254
    4eee:	80 81       	ld	r24, Z
    4ef0:	f8 0e       	add	r15, r24
{
	uint8_t i=0;
	uint8_t	j=0;

	/* Loop over all values in EcuData */
	while(i<=114) {
    4ef2:	82 e7       	ldi	r24, 0x72	; 114
    4ef4:	8f 15       	cp	r24, r15
    4ef6:	10 f0       	brcs	.+4      	; 0x4efc <ecu_data_handler+0x8a>
			}
		}
		
		/* Find index for next value */
		i += ECUObjects[j].length;
		j++;
    4ef8:	e3 94       	inc	r14
    4efa:	c3 cf       	rjmp	.-122    	; 0x4e82 <ecu_data_handler+0x10>
	}
}
    4efc:	cd b7       	in	r28, 0x3d	; 61
    4efe:	de b7       	in	r29, 0x3e	; 62
    4f00:	e6 e0       	ldi	r30, 0x06	; 6
    4f02:	0c 94 d7 2e 	jmp	0x5dae	; 0x5dae <__epilogue_restores__+0x18>

00004f06 <__vector_18>:

st_cmd_t tx_remote_msg;

/* Interrupt routine to take care of can interrupts */
ISR(CANIT_vect)
{
    4f06:	1f 92       	push	r1
    4f08:	0f 92       	push	r0
    4f0a:	0f b6       	in	r0, 0x3f	; 63
    4f0c:	0f 92       	push	r0
    4f0e:	0b b6       	in	r0, 0x3b	; 59
    4f10:	0f 92       	push	r0
    4f12:	11 24       	eor	r1, r1
    4f14:	0f 93       	push	r16
    4f16:	1f 93       	push	r17
    4f18:	2f 93       	push	r18
    4f1a:	3f 93       	push	r19
    4f1c:	4f 93       	push	r20
    4f1e:	5f 93       	push	r21
    4f20:	6f 93       	push	r22
    4f22:	7f 93       	push	r23
    4f24:	8f 93       	push	r24
    4f26:	9f 93       	push	r25
    4f28:	af 93       	push	r26
    4f2a:	bf 93       	push	r27
    4f2c:	cf 93       	push	r28
    4f2e:	df 93       	push	r29
    4f30:	ef 93       	push	r30
    4f32:	ff 93       	push	r31
	 * TXOK just need to call Can_mob_abort() and Can_clear_status_mob()
	 * Proper action for all other types is TODO
	*/

	/* Test mob's for pending interrupt */
	tmp = CANSIT2+(CANSIT1<<8);
    4f34:	30 91 e0 00 	lds	r19, 0x00E0
    4f38:	20 91 e1 00 	lds	r18, 0x00E1
    4f3c:	92 2f       	mov	r25, r18
    4f3e:	80 e0       	ldi	r24, 0x00	; 0
    4f40:	dc 01       	movw	r26, r24
    4f42:	a3 0f       	add	r26, r19
    4f44:	b1 1d       	adc	r27, r1
    4f46:	e1 e0       	ldi	r30, 0x01	; 1
    4f48:	f0 e0       	ldi	r31, 0x00	; 0
    4f4a:	60 e0       	ldi	r22, 0x00	; 0
    4f4c:	70 e0       	ldi	r23, 0x00	; 0
					/* TODO */
				case MOB_TX_COMPLETED:
					Can_mob_abort();        // Freed the MOB
					Can_clear_status_mob(); // and reset MOb status	
					/* Disable interrupt */
					Can_unset_mob_int(i);
    4f4e:	0f ef       	ldi	r16, 0xFF	; 255
    4f50:	10 e0       	ldi	r17, 0x00	; 0
    4f52:	c1 e0       	ldi	r28, 0x01	; 1
    4f54:	d0 e0       	ldi	r29, 0x00	; 0
	 * TXOK just need to call Can_mob_abort() and Can_clear_status_mob()
	 * Proper action for all other types is TODO
	*/

	/* Test mob's for pending interrupt */
	tmp = CANSIT2+(CANSIT1<<8);
    4f56:	26 2f       	mov	r18, r22
	for(i=0;i<=14;i++){
		if(tmp & mask){	/* True if mob have pending interrupt */
    4f58:	cf 01       	movw	r24, r30
    4f5a:	8a 23       	and	r24, r26
    4f5c:	9b 23       	and	r25, r27
    4f5e:	89 2b       	or	r24, r25
    4f60:	09 f4       	brne	.+2      	; 0x4f64 <__vector_18+0x5e>
    4f62:	4e c0       	rjmp	.+156    	; 0x5000 <__vector_18+0xfa>
			Can_set_mob(i); /* Switch to mob */
    4f64:	22 95       	swap	r18
    4f66:	20 7f       	andi	r18, 0xF0	; 240
    4f68:	20 93 ed 00 	sts	0x00ED, r18
			interrupt = (CANSTMOB & INT_MOB_MSK);
    4f6c:	80 91 ee 00 	lds	r24, 0x00EE

			switch (interrupt){
    4f70:	8f 77       	andi	r24, 0x7F	; 127
    4f72:	88 30       	cpi	r24, 0x08	; 8
    4f74:	09 f4       	brne	.+2      	; 0x4f78 <__vector_18+0x72>
    4f76:	44 c0       	rjmp	.+136    	; 0x5000 <__vector_18+0xfa>
    4f78:	89 30       	cpi	r24, 0x09	; 9
    4f7a:	38 f4       	brcc	.+14     	; 0x4f8a <__vector_18+0x84>
    4f7c:	81 30       	cpi	r24, 0x01	; 1
    4f7e:	c8 f1       	brcs	.+114    	; 0x4ff2 <__vector_18+0xec>
    4f80:	83 30       	cpi	r24, 0x03	; 3
    4f82:	f0 f1       	brcs	.+124    	; 0x5000 <__vector_18+0xfa>
    4f84:	84 30       	cpi	r24, 0x04	; 4
    4f86:	a9 f5       	brne	.+106    	; 0x4ff2 <__vector_18+0xec>
    4f88:	3b c0       	rjmp	.+118    	; 0x5000 <__vector_18+0xfa>
    4f8a:	80 32       	cpi	r24, 0x20	; 32
    4f8c:	29 f0       	breq	.+10     	; 0x4f98 <__vector_18+0x92>
    4f8e:	80 34       	cpi	r24, 0x40	; 64
    4f90:	19 f0       	breq	.+6      	; 0x4f98 <__vector_18+0x92>
    4f92:	80 31       	cpi	r24, 0x10	; 16
    4f94:	71 f5       	brne	.+92     	; 0x4ff2 <__vector_18+0xec>
    4f96:	34 c0       	rjmp	.+104    	; 0x5000 <__vector_18+0xfa>
				case MOB_RX_COMPLETED:
					/* TODO */
				case MOB_TX_COMPLETED:
					Can_mob_abort();        // Freed the MOB
    4f98:	80 91 ef 00 	lds	r24, 0x00EF
    4f9c:	8f 73       	andi	r24, 0x3F	; 63
    4f9e:	80 93 ef 00 	sts	0x00EF, r24
					Can_clear_status_mob(); // and reset MOb status	
    4fa2:	10 92 ee 00 	sts	0x00EE, r1
					/* Disable interrupt */
					Can_unset_mob_int(i);
    4fa6:	40 91 de 00 	lds	r20, 0x00DE
    4faa:	c8 01       	movw	r24, r16
    4fac:	06 2e       	mov	r0, r22
    4fae:	02 c0       	rjmp	.+4      	; 0x4fb4 <__vector_18+0xae>
    4fb0:	95 95       	asr	r25
    4fb2:	87 95       	ror	r24
    4fb4:	0a 94       	dec	r0
    4fb6:	e2 f7       	brpl	.-8      	; 0x4fb0 <__vector_18+0xaa>
    4fb8:	8c 27       	eor	r24, r28
    4fba:	9d 27       	eor	r25, r29
    4fbc:	81 70       	andi	r24, 0x01	; 1
    4fbe:	84 23       	and	r24, r20
    4fc0:	80 93 de 00 	sts	0x00DE, r24
    4fc4:	90 91 df 00 	lds	r25, 0x00DF
    4fc8:	80 e0       	ldi	r24, 0x00	; 0
    4fca:	ae 01       	movw	r20, r28
    4fcc:	06 2e       	mov	r0, r22
    4fce:	02 c0       	rjmp	.+4      	; 0x4fd4 <__vector_18+0xce>
    4fd0:	44 0f       	add	r20, r20
    4fd2:	55 1f       	adc	r21, r21
    4fd4:	0a 94       	dec	r0
    4fd6:	e2 f7       	brpl	.-8      	; 0x4fd0 <__vector_18+0xca>
    4fd8:	9a 01       	movw	r18, r20
    4fda:	23 2f       	mov	r18, r19
    4fdc:	33 0f       	add	r19, r19
    4fde:	33 0b       	sbc	r19, r19
    4fe0:	2f 77       	andi	r18, 0x7F	; 127
    4fe2:	30 70       	andi	r19, 0x00	; 0
    4fe4:	23 2b       	or	r18, r19
    4fe6:	09 f4       	brne	.+2      	; 0x4fea <__vector_18+0xe4>
    4fe8:	81 e0       	ldi	r24, 0x01	; 1
    4fea:	89 23       	and	r24, r25
    4fec:	80 93 df 00 	sts	0x00DF, r24
    4ff0:	07 c0       	rjmp	.+14     	; 0x5000 <__vector_18+0xfa>
					break;
				case MOB_BIT_ERROR:
					/* TODO */
					break;
				default:
					Can_mob_abort();        // Freed the MOB
    4ff2:	80 91 ef 00 	lds	r24, 0x00EF
    4ff6:	8f 73       	andi	r24, 0x3F	; 63
    4ff8:	80 93 ef 00 	sts	0x00EF, r24
					Can_clear_status_mob(); // and reset MOb status
    4ffc:	10 92 ee 00 	sts	0x00EE, r1
    5000:	6f 5f       	subi	r22, 0xFF	; 255
    5002:	7f 4f       	sbci	r23, 0xFF	; 255
	 * Proper action for all other types is TODO
	*/

	/* Test mob's for pending interrupt */
	tmp = CANSIT2+(CANSIT1<<8);
	for(i=0;i<=14;i++){
    5004:	6f 30       	cpi	r22, 0x0F	; 15
    5006:	71 05       	cpc	r23, r1
    5008:	19 f0       	breq	.+6      	; 0x5010 <__vector_18+0x10a>
					Can_mob_abort();        // Freed the MOB
					Can_clear_status_mob(); // and reset MOb status
					break;
			}
		}
		mask = mask<<1;
    500a:	ee 0f       	add	r30, r30
    500c:	ff 1f       	adc	r31, r31
    500e:	a3 cf       	rjmp	.-186    	; 0x4f56 <__vector_18+0x50>
	}
}
    5010:	ff 91       	pop	r31
    5012:	ef 91       	pop	r30
    5014:	df 91       	pop	r29
    5016:	cf 91       	pop	r28
    5018:	bf 91       	pop	r27
    501a:	af 91       	pop	r26
    501c:	9f 91       	pop	r25
    501e:	8f 91       	pop	r24
    5020:	7f 91       	pop	r23
    5022:	6f 91       	pop	r22
    5024:	5f 91       	pop	r21
    5026:	4f 91       	pop	r20
    5028:	3f 91       	pop	r19
    502a:	2f 91       	pop	r18
    502c:	1f 91       	pop	r17
    502e:	0f 91       	pop	r16
    5030:	0f 90       	pop	r0
    5032:	0b be       	out	0x3b, r0	; 59
    5034:	0f 90       	pop	r0
    5036:	0f be       	out	0x3f, r0	; 63
    5038:	0f 90       	pop	r0
    503a:	1f 90       	pop	r1
    503c:	18 95       	reti

0000503e <can_send_non_blocking>:
 * 0 = Besked ikke kommet i udbakke
 * 1 = Besked kommet i udbakke
*/
U8 can_send_non_blocking(U8 msg_id, void* buf, U8 dlc)
{
	tx_remote_msg.pt_data = buf; 
    503e:	70 93 c3 09 	sts	0x09C3, r23
    5042:	60 93 c2 09 	sts	0x09C2, r22
	tx_remote_msg.id.std = msg_id;
    5046:	80 93 bd 09 	sts	0x09BD, r24
    504a:	10 92 be 09 	sts	0x09BE, r1
	tx_remote_msg.ctrl.ide = 0;
    504e:	10 92 c6 09 	sts	0x09C6, r1
	tx_remote_msg.ctrl.rtr = 1;
    5052:	81 e0       	ldi	r24, 0x01	; 1
    5054:	80 93 c5 09 	sts	0x09C5, r24
	tx_remote_msg.dlc = dlc;
    5058:	40 93 c1 09 	sts	0x09C1, r20
	tx_remote_msg.cmd = CMD_TX_DATA;
    505c:	82 e0       	ldi	r24, 0x02	; 2
    505e:	90 e0       	ldi	r25, 0x00	; 0
    5060:	90 93 bc 09 	sts	0x09BC, r25
    5064:	80 93 bb 09 	sts	0x09BB, r24
	tx_remote_msg.blocking = 0;	/* For non blocking */
    5068:	10 92 c7 09 	sts	0x09C7, r1

	/* can_cmd function extended with a feature to enable interrupt for
	 * the message mob picked for the message
	*/
	if (can_cmd(&tx_remote_msg) != CAN_CMD_ACCEPTED){
    506c:	8a eb       	ldi	r24, 0xBA	; 186
    506e:	99 e0       	ldi	r25, 0x09	; 9
    5070:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <can_cmd>
    5074:	90 e0       	ldi	r25, 0x00	; 0
    5076:	88 23       	and	r24, r24
    5078:	09 f4       	brne	.+2      	; 0x507c <can_send_non_blocking+0x3e>
    507a:	91 e0       	ldi	r25, 0x01	; 1
		return 0;	// No free mob could not put message in mail box
	}else{
		return 1;
	}
}
    507c:	89 2f       	mov	r24, r25
    507e:	08 95       	ret

00005080 <xputc>:

.global xputc
.func xputc
xputc:
#ifdef CR_CRLF
	cpi	r24, 10		;LF --> CRLF
    5080:	8a 30       	cpi	r24, 0x0A	; 10
	brne	1f		;
    5082:	19 f4       	brne	.+6      	; 0x508a <xputc+0xa>
	ldi	r24, 13		;
    5084:	8d e0       	ldi	r24, 0x0D	; 13
	rcall	1f		;
    5086:	01 d0       	rcall	.+2      	; 0x508a <xputc+0xa>
	ldi	r24, 10		;/
    5088:	8a e0       	ldi	r24, 0x0A	; 10
1:
#endif
	push	ZH
    508a:	ff 93       	push	r31
	push	ZL
    508c:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
    508e:	e0 91 ce 02 	lds	r30, 0x02CE
	lds	ZH, xfunc_out+1	;/
    5092:	f0 91 cf 02 	lds	r31, 0x02CF
	icall
    5096:	09 95       	icall
	pop	ZL
    5098:	ef 91       	pop	r30
	pop	ZH
    509a:	ff 91       	pop	r31
	ret
    509c:	08 95       	ret

0000509e <xputs>:

#ifdef USE_XPUTS
.global xputs
.func xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
    509e:	fc 01       	movw	r30, r24
1:	_LPMI	r24
    50a0:	85 91       	lpm	r24, Z+
	cpi	r24, 0
    50a2:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
    50a4:	11 f0       	breq	.+4      	; 0x50aa <xputs+0xc>
	rcall	xputc
    50a6:	ec df       	rcall	.-40     	; 0x5080 <xputc>
	rjmp	1b
    50a8:	fb cf       	rjmp	.-10     	; 0x50a0 <xputs+0x2>
2:	ret
    50aa:	08 95       	ret

000050ac <xitoa>:
#ifdef USE_XITOA
.global xitoa
.func xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
    50ac:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
    50ae:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
    50b0:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
    50b2:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
    50b4:	0c c0       	rjmp	.+24     	; 0x50ce <xitoa+0x22>
	neg	r20		;
    50b6:	41 95       	neg	r20
	sbrs	r25, 7		;
    50b8:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
    50ba:	09 c0       	rjmp	.+18     	; 0x50ce <xitoa+0x22>
	ldi	r30, '-'	;
    50bc:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
    50be:	60 95       	com	r22
	com	r23		;
    50c0:	70 95       	com	r23
	com	r24		;
    50c2:	80 95       	com	r24
	com	r25		;
    50c4:	90 95       	com	r25
	adc	r22, r1		;
    50c6:	61 1d       	adc	r22, r1
	adc	r23, r1		;
    50c8:	71 1d       	adc	r23, r1
	adc	r24, r1		;
    50ca:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
    50cc:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
    50ce:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
    50d0:	02 c0       	rjmp	.+4      	; 0x50d6 <xitoa+0x2a>
	neg	r18		;
    50d2:	21 95       	neg	r18
	ldi	r19, '0'	;/
    50d4:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
    50d6:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
    50d8:	aa 27       	eor	r26, r26
2:	lsl	r22		;
    50da:	66 0f       	add	r22, r22
	rol	r23		;
    50dc:	77 1f       	adc	r23, r23
	rol	r24		;
    50de:	88 1f       	adc	r24, r24
	rol	r25		;
    50e0:	99 1f       	adc	r25, r25
	rol	r26		;
    50e2:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
    50e4:	a4 17       	cp	r26, r20
	brcs	3f		;
    50e6:	10 f0       	brcs	.+4      	; 0x50ec <xitoa+0x40>
	sub	r26, r20	;
    50e8:	a4 1b       	sub	r26, r20
	inc	r22		;
    50ea:	63 95       	inc	r22
3:	dec	r21		;
    50ec:	5a 95       	dec	r21
	brne	2b		;/
    50ee:	a9 f7       	brne	.-22     	; 0x50da <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
    50f0:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
    50f2:	08 f0       	brcs	.+2      	; 0x50f6 <xitoa+0x4a>
	subi	r26, -7		;
    50f4:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
    50f6:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
    50f8:	af 93       	push	r26
	inc	r31		;/
    50fa:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
    50fc:	61 15       	cp	r22, r1
	cpc	r23, r1		;
    50fe:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
    5100:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
    5102:	91 05       	cpc	r25, r1
	brne	1b		;/
    5104:	41 f7       	brne	.-48     	; 0x50d6 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
    5106:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
    5108:	11 f4       	brne	.+4      	; 0x510e <xitoa+0x62>
	push	r30		;
    510a:	ef 93       	push	r30
	inc	r31		;/
    510c:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
    510e:	f2 17       	cp	r31, r18
	brcc	6f		;
    5110:	18 f4       	brcc	.+6      	; 0x5118 <xitoa+0x6c>
	push	r19		;
    5112:	3f 93       	push	r19
	inc	r31		;
    5114:	f3 95       	inc	r31
	rjmp	5b		;/
    5116:	fb cf       	rjmp	.-10     	; 0x510e <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
    5118:	8f 91       	pop	r24
	rcall	xputc		;
    511a:	b2 df       	rcall	.-156    	; 0x5080 <xputc>
	dec	r31		;
    511c:	fa 95       	dec	r31
	brne	6b		;/
    511e:	e1 f7       	brne	.-8      	; 0x5118 <xitoa+0x6c>

	ret
    5120:	08 95       	ret

00005122 <xprintf>:

#ifdef USE_XPRINTF
.global xprintf
.func xprintf
xprintf:
	push	YH
    5122:	df 93       	push	r29
	push	YL
    5124:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
    5126:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
    5128:	de b7       	in	r29, 0x3e	; 62
	clr	YH
#endif
#if FLASHEND > 0x1FFFF
	adiw	YL, 6		;Y = pointer to arguments
#else
	adiw	YL, 5		;Y = pointer to arguments
    512a:	25 96       	adiw	r28, 0x05	; 5
#endif
	ld	ZL, Y+		;Z = pointer to format string
    512c:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
    512e:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
    5130:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
    5132:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
    5134:	21 f0       	breq	.+8      	; 0x513e <xprintf+0x1c>
	cpi	r24, '%'	;Is format?
    5136:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
    5138:	29 f0       	breq	.+10     	; 0x5144 <xprintf+0x22>
1:	rcall	xputc		;Put a normal character
    513a:	a2 df       	rcall	.-188    	; 0x5080 <xputc>
	rjmp	0b		;/
    513c:	f9 cf       	rjmp	.-14     	; 0x5130 <xprintf+0xe>
90:	pop	YL
    513e:	cf 91       	pop	r28
	pop	YH
    5140:	df 91       	pop	r29
	ret
    5142:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
    5144:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
    5146:	e8 94       	clt
	_LPMI	r21		;Get flags
    5148:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
    514a:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
    514c:	b1 f3       	breq	.-20     	; 0x513a <xprintf+0x18>
	cpi	r21, '0'	;Zero filled?
    514e:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
    5150:	11 f4       	brne	.+4      	; 0x5156 <xprintf+0x34>
	set			;/
    5152:	68 94       	set
22:	_LPMI	r21		;Get width
    5154:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
    5156:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
    5158:	48 f4       	brcc	.+18     	; 0x516c <xprintf+0x4a>
	subi	r21, '0'	;
    515a:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
    515c:	80 f3       	brcs	.-32     	; 0x513e <xprintf+0x1c>
	lsl	r18		;
    515e:	22 0f       	add	r18, r18
	mov	r0, r18		;
    5160:	02 2e       	mov	r0, r18
	lsl	r18		;
    5162:	22 0f       	add	r18, r18
	lsl	r18		;
    5164:	22 0f       	add	r18, r18
	add	r18, r0		;
    5166:	20 0d       	add	r18, r0
	add	r18, r21	;
    5168:	25 0f       	add	r18, r21
	rjmp	22b		;/
    516a:	f4 cf       	rjmp	.-24     	; 0x5154 <xprintf+0x32>

24:	brtc	25f		;get value (low word)
    516c:	0e f4       	brtc	.+2      	; 0x5170 <xprintf+0x4e>
	neg	r18		;
    516e:	21 95       	neg	r18
25:	ld	r24, Y+		;
    5170:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
    5172:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
    5174:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
    5176:	09 f3       	breq	.-62     	; 0x513a <xprintf+0x18>
	cpi	r21, 's'	;Is type RAM string?
    5178:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
    517a:	29 f1       	breq	.+74     	; 0x51c6 <xprintf+0xa4>
	cpi	r21, 'S'	;Is type ROM string?
    517c:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
    517e:	59 f1       	breq	.+86     	; 0x51d6 <xprintf+0xb4>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
    5180:	bc 01       	movw	r22, r24
	clr	r24		;
    5182:	88 27       	eor	r24, r24
	clr	r25		;
    5184:	99 27       	eor	r25, r25
	clt			;/
    5186:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
    5188:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
    518a:	21 f4       	brne	.+8      	; 0x5194 <xprintf+0x72>
	ld	r24, Y+		;get value (high word)
    518c:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
    518e:	99 91       	ld	r25, Y+
	set			;
    5190:	68 94       	set
	_LPMI	r21		;/
    5192:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
    5194:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
    5196:	39 f4       	brne	.+14     	; 0x51a6 <xprintf+0x84>
	ldi	r20, -10	;
    5198:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
    519a:	7e f0       	brts	.+30     	; 0x51ba <xprintf+0x98>
	sbrs	r23, 7		;
    519c:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
    519e:	0d c0       	rjmp	.+26     	; 0x51ba <xprintf+0x98>
	ldi	r24, -1		;
    51a0:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
    51a2:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
    51a4:	0a c0       	rjmp	.+20     	; 0x51ba <xprintf+0x98>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
    51a6:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
    51a8:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
    51aa:	39 f0       	breq	.+14     	; 0x51ba <xprintf+0x98>
	cpi	r21, 'X'	;Is type hexdecimal?
    51ac:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
    51ae:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
    51b0:	21 f0       	breq	.+8      	; 0x51ba <xprintf+0x98>
	cpi	r21, 'b'	;Is type binary?
    51b2:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
    51b4:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
    51b6:	09 f0       	breq	.+2      	; 0x51ba <xprintf+0x98>
	rjmp	90b		;abort
    51b8:	c2 cf       	rjmp	.-124    	; 0x513e <xprintf+0x1c>
40:	push	ZH		;Output the value
    51ba:	ff 93       	push	r31
	push	ZL		;
    51bc:	ef 93       	push	r30
	rcall	xitoa		;
    51be:	76 df       	rcall	.-276    	; 0x50ac <xitoa>
42:	pop	ZL		;
    51c0:	ef 91       	pop	r30
	pop	ZH		;
    51c2:	ff 91       	pop	r31
	rjmp	0b		;/
    51c4:	b5 cf       	rjmp	.-150    	; 0x5130 <xprintf+0xe>

50:	push	ZH		;Put a string on the RAM
    51c6:	ff 93       	push	r31
	push	ZL
    51c8:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
    51ca:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
    51cc:	81 91       	ld	r24, Z+
	cpi	r24, 0
    51ce:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
    51d0:	b9 f3       	breq	.-18     	; 0x51c0 <xprintf+0x9e>
	rcall	xputc
    51d2:	56 df       	rcall	.-340    	; 0x5080 <xputc>
	rjmp	51b
    51d4:	fb cf       	rjmp	.-10     	; 0x51cc <xprintf+0xaa>

60:	push	ZH		;Put a string on the ROM
    51d6:	ff 93       	push	r31
	push	ZL
    51d8:	ef 93       	push	r30
	rcall	xputs
    51da:	61 df       	rcall	.-318    	; 0x509e <xputs>
	rjmp	42b
    51dc:	f1 cf       	rjmp	.-30     	; 0x51c0 <xprintf+0x9e>

000051de <xatoi>:

#ifdef USE_XATOI
.global xatoi
.func xatoi
xatoi:
	_MOVW	r1, r0, r23, r22
    51de:	0b 01       	movw	r0, r22
	_MOVW	XH, XL, r25, r24
    51e0:	dc 01       	movw	r26, r24
	ld	ZL, X+
    51e2:	ed 91       	ld	r30, X+
	ld	ZH, X+
    51e4:	fd 91       	ld	r31, X+
	clr	r18		;r21:r18 = 0;
    51e6:	22 27       	eor	r18, r18
	clr	r19		;
    51e8:	33 27       	eor	r19, r19
	clr	r20		;
    51ea:	44 27       	eor	r20, r20
	clr	r21		;/
    51ec:	55 27       	eor	r21, r21
	clt			;T = 0;
    51ee:	e8 94       	clt

	ldi	r25, 10		;r25 = 10;
    51f0:	9a e0       	ldi	r25, 0x0A	; 10
	rjmp	41f		;/
    51f2:	01 c0       	rjmp	.+2      	; 0x51f6 <xatoi+0x18>
40:	adiw	ZL, 1		;Z++;
    51f4:	31 96       	adiw	r30, 0x01	; 1
41:	ld	r22, Z		;r22 = *Z;
    51f6:	60 81       	ld	r22, Z
	cpi	r22, ' '	;if(r22 == ' ') continue
    51f8:	60 32       	cpi	r22, 0x20	; 32
	breq	40b		;/
    51fa:	e1 f3       	breq	.-8      	; 0x51f4 <xatoi+0x16>
	brcs	70f		;if(r22 < ' ') error;
    51fc:	a8 f1       	brcs	.+106    	; 0x5268 <xatoi+0x8a>
	cpi	r22, '-'	;if(r22 == '-') {
    51fe:	6d 32       	cpi	r22, 0x2D	; 45
	brne	42f		; T = 1;
    5200:	11 f4       	brne	.+4      	; 0x5206 <xatoi+0x28>
	set			; continue;
    5202:	68 94       	set
	rjmp	40b		;}
    5204:	f7 cf       	rjmp	.-18     	; 0x51f4 <xatoi+0x16>
42:	cpi	r22, '9'+1	;if(r22 > '9') error;
    5206:	6a 33       	cpi	r22, 0x3A	; 58
	brcc	70f		;/
    5208:	78 f5       	brcc	.+94     	; 0x5268 <xatoi+0x8a>
	cpi	r22, '0'	;if(r22 < '0') error;
    520a:	60 33       	cpi	r22, 0x30	; 48
	brcs	70f		;/
    520c:	68 f1       	brcs	.+90     	; 0x5268 <xatoi+0x8a>
	brne	51f		;if(r22 > '0') cv_start;
    520e:	71 f4       	brne	.+28     	; 0x522c <xatoi+0x4e>
	ldi	r25, 8		;r25 = 8;
    5210:	98 e0       	ldi	r25, 0x08	; 8
	adiw	ZL, 1		;r22 = *(++Z);
    5212:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;/
    5214:	60 81       	ld	r22, Z
	cpi	r22, ' '+1	;if(r22 <= ' ') exit;
    5216:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    5218:	48 f1       	brcs	.+82     	; 0x526c <xatoi+0x8e>
	cpi	r22, 'b'	;if(r22 == 'b') {
    521a:	62 36       	cpi	r22, 0x62	; 98
	brne	43f		; r25 = 2;
    521c:	11 f4       	brne	.+4      	; 0x5222 <xatoi+0x44>
	ldi	r25, 2		; cv_start;
    521e:	92 e0       	ldi	r25, 0x02	; 2
	rjmp	50f		;}
    5220:	03 c0       	rjmp	.+6      	; 0x5228 <xatoi+0x4a>
43:	cpi	r22, 'x'	;if(r22 != 'x') error;
    5222:	68 37       	cpi	r22, 0x78	; 120
	brne	51f		;/
    5224:	19 f4       	brne	.+6      	; 0x522c <xatoi+0x4e>
	ldi	r25, 16		;r25 = 16;
    5226:	90 e1       	ldi	r25, 0x10	; 16

50:	adiw	ZL, 1		;Z++;
    5228:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;r22 = *Z;
    522a:	60 81       	ld	r22, Z
51:	cpi	r22, ' '+1	;if(r22 <= ' ') break;
    522c:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    522e:	f0 f0       	brcs	.+60     	; 0x526c <xatoi+0x8e>
	cpi	r22, 'a'	;if(r22 >= 'a') r22 =- 0x20;
    5230:	61 36       	cpi	r22, 0x61	; 97
	brcs	52f		;
    5232:	08 f0       	brcs	.+2      	; 0x5236 <xatoi+0x58>
	subi	r22, 0x20	;/
    5234:	60 52       	subi	r22, 0x20	; 32
52:	subi	r22, '0'	;if((r22 -= '0') < 0) error;
    5236:	60 53       	subi	r22, 0x30	; 48
	brcs	70f		;/
    5238:	b8 f0       	brcs	.+46     	; 0x5268 <xatoi+0x8a>
	cpi	r22, 10		;if(r22 >= 10) {
    523a:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	53f		; r22 -= 7;
    523c:	18 f0       	brcs	.+6      	; 0x5244 <xatoi+0x66>
	subi	r22, 7		; if(r22 < 10) 
    523e:	67 50       	subi	r22, 0x07	; 7
	cpi	r22, 10		;
    5240:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	70f		;}
    5242:	90 f0       	brcs	.+36     	; 0x5268 <xatoi+0x8a>
53:	cp	r22, r25	;if(r22 >= r25) error;
    5244:	69 17       	cp	r22, r25
	brcc	70f		;/
    5246:	80 f4       	brcc	.+32     	; 0x5268 <xatoi+0x8a>
60:	ldi	r24, 33		;r21:r18 *= r25;
    5248:	81 e2       	ldi	r24, 0x21	; 33
	sub	r23, r23	;
    524a:	77 1b       	sub	r23, r23
61:	brcc	62f		;
    524c:	08 f4       	brcc	.+2      	; 0x5250 <xatoi+0x72>
	add	r23, r25	;
    524e:	79 0f       	add	r23, r25
62:	lsr	r23		;
    5250:	76 95       	lsr	r23
	ror	r21		;
    5252:	57 95       	ror	r21
	ror	r20		;
    5254:	47 95       	ror	r20
	ror	r19		;
    5256:	37 95       	ror	r19
	ror	r18		;
    5258:	27 95       	ror	r18
	dec	r24		;
    525a:	8a 95       	dec	r24
	brne	61b		;/
    525c:	b9 f7       	brne	.-18     	; 0x524c <xatoi+0x6e>
	add	r18, r22	;r21:r18 += r22;
    525e:	26 0f       	add	r18, r22
	adc	r19, r24	;
    5260:	38 1f       	adc	r19, r24
	adc	r20, r24	;
    5262:	48 1f       	adc	r20, r24
	adc	r21, r24	;/
    5264:	58 1f       	adc	r21, r24
	rjmp	50b		;repeat
    5266:	e0 cf       	rjmp	.-64     	; 0x5228 <xatoi+0x4a>

70:	ldi	r24, 0
    5268:	80 e0       	ldi	r24, 0x00	; 0
	rjmp	81f
    526a:	01 c0       	rjmp	.+2      	; 0x526e <xatoi+0x90>
80:	ldi	r24, 1
    526c:	81 e0       	ldi	r24, 0x01	; 1
81:	brtc	82f
    526e:	4e f4       	brtc	.+18     	; 0x5282 <xatoi+0xa4>
	clr	r22
    5270:	66 27       	eor	r22, r22
	com	r18
    5272:	20 95       	com	r18
	com	r19
    5274:	30 95       	com	r19
	com	r20
    5276:	40 95       	com	r20
	com	r21
    5278:	50 95       	com	r21
	adc	r18, r22
    527a:	26 1f       	adc	r18, r22
	adc	r19, r22
    527c:	36 1f       	adc	r19, r22
	adc	r20, r22
    527e:	46 1f       	adc	r20, r22
	adc	r21, r22
    5280:	56 1f       	adc	r21, r22
82:	st	-X, ZH
    5282:	fe 93       	st	-X, r31
	st	-X, ZL
    5284:	ee 93       	st	-X, r30
	_MOVW	XH, XL, r1, r0
    5286:	d0 01       	movw	r26, r0
	st	X+, r18
    5288:	2d 93       	st	X+, r18
	st	X+, r19
    528a:	3d 93       	st	X+, r19
	st	X+, r20
    528c:	4d 93       	st	X+, r20
	st	X+, r21
    528e:	5d 93       	st	X+, r21
	clr	r1
    5290:	11 24       	eor	r1, r1
	ret
    5292:	08 95       	ret

00005294 <_fpadd_parts>:
    5294:	a0 e0       	ldi	r26, 0x00	; 0
    5296:	b0 e0       	ldi	r27, 0x00	; 0
    5298:	e0 e5       	ldi	r30, 0x50	; 80
    529a:	f9 e2       	ldi	r31, 0x29	; 41
    529c:	0c 94 af 2e 	jmp	0x5d5e	; 0x5d5e <__prologue_saves__>
    52a0:	dc 01       	movw	r26, r24
    52a2:	2b 01       	movw	r4, r22
    52a4:	fa 01       	movw	r30, r20
    52a6:	9c 91       	ld	r25, X
    52a8:	92 30       	cpi	r25, 0x02	; 2
    52aa:	08 f4       	brcc	.+2      	; 0x52ae <_fpadd_parts+0x1a>
    52ac:	39 c1       	rjmp	.+626    	; 0x5520 <_fpadd_parts+0x28c>
    52ae:	eb 01       	movw	r28, r22
    52b0:	88 81       	ld	r24, Y
    52b2:	82 30       	cpi	r24, 0x02	; 2
    52b4:	08 f4       	brcc	.+2      	; 0x52b8 <_fpadd_parts+0x24>
    52b6:	33 c1       	rjmp	.+614    	; 0x551e <_fpadd_parts+0x28a>
    52b8:	94 30       	cpi	r25, 0x04	; 4
    52ba:	69 f4       	brne	.+26     	; 0x52d6 <_fpadd_parts+0x42>
    52bc:	84 30       	cpi	r24, 0x04	; 4
    52be:	09 f0       	breq	.+2      	; 0x52c2 <_fpadd_parts+0x2e>
    52c0:	2f c1       	rjmp	.+606    	; 0x5520 <_fpadd_parts+0x28c>
    52c2:	11 96       	adiw	r26, 0x01	; 1
    52c4:	9c 91       	ld	r25, X
    52c6:	11 97       	sbiw	r26, 0x01	; 1
    52c8:	89 81       	ldd	r24, Y+1	; 0x01
    52ca:	98 17       	cp	r25, r24
    52cc:	09 f4       	brne	.+2      	; 0x52d0 <_fpadd_parts+0x3c>
    52ce:	28 c1       	rjmp	.+592    	; 0x5520 <_fpadd_parts+0x28c>
    52d0:	a1 eb       	ldi	r26, 0xB1	; 177
    52d2:	b2 e0       	ldi	r27, 0x02	; 2
    52d4:	25 c1       	rjmp	.+586    	; 0x5520 <_fpadd_parts+0x28c>
    52d6:	84 30       	cpi	r24, 0x04	; 4
    52d8:	09 f4       	brne	.+2      	; 0x52dc <_fpadd_parts+0x48>
    52da:	21 c1       	rjmp	.+578    	; 0x551e <_fpadd_parts+0x28a>
    52dc:	82 30       	cpi	r24, 0x02	; 2
    52de:	a9 f4       	brne	.+42     	; 0x530a <_fpadd_parts+0x76>
    52e0:	92 30       	cpi	r25, 0x02	; 2
    52e2:	09 f0       	breq	.+2      	; 0x52e6 <_fpadd_parts+0x52>
    52e4:	1d c1       	rjmp	.+570    	; 0x5520 <_fpadd_parts+0x28c>
    52e6:	9a 01       	movw	r18, r20
    52e8:	ad 01       	movw	r20, r26
    52ea:	88 e0       	ldi	r24, 0x08	; 8
    52ec:	ea 01       	movw	r28, r20
    52ee:	09 90       	ld	r0, Y+
    52f0:	ae 01       	movw	r20, r28
    52f2:	e9 01       	movw	r28, r18
    52f4:	09 92       	st	Y+, r0
    52f6:	9e 01       	movw	r18, r28
    52f8:	81 50       	subi	r24, 0x01	; 1
    52fa:	c1 f7       	brne	.-16     	; 0x52ec <_fpadd_parts+0x58>
    52fc:	e2 01       	movw	r28, r4
    52fe:	89 81       	ldd	r24, Y+1	; 0x01
    5300:	11 96       	adiw	r26, 0x01	; 1
    5302:	9c 91       	ld	r25, X
    5304:	89 23       	and	r24, r25
    5306:	81 83       	std	Z+1, r24	; 0x01
    5308:	08 c1       	rjmp	.+528    	; 0x551a <_fpadd_parts+0x286>
    530a:	92 30       	cpi	r25, 0x02	; 2
    530c:	09 f4       	brne	.+2      	; 0x5310 <_fpadd_parts+0x7c>
    530e:	07 c1       	rjmp	.+526    	; 0x551e <_fpadd_parts+0x28a>
    5310:	12 96       	adiw	r26, 0x02	; 2
    5312:	2d 90       	ld	r2, X+
    5314:	3c 90       	ld	r3, X
    5316:	13 97       	sbiw	r26, 0x03	; 3
    5318:	eb 01       	movw	r28, r22
    531a:	8a 81       	ldd	r24, Y+2	; 0x02
    531c:	9b 81       	ldd	r25, Y+3	; 0x03
    531e:	14 96       	adiw	r26, 0x04	; 4
    5320:	ad 90       	ld	r10, X+
    5322:	bd 90       	ld	r11, X+
    5324:	cd 90       	ld	r12, X+
    5326:	dc 90       	ld	r13, X
    5328:	17 97       	sbiw	r26, 0x07	; 7
    532a:	ec 80       	ldd	r14, Y+4	; 0x04
    532c:	fd 80       	ldd	r15, Y+5	; 0x05
    532e:	0e 81       	ldd	r16, Y+6	; 0x06
    5330:	1f 81       	ldd	r17, Y+7	; 0x07
    5332:	91 01       	movw	r18, r2
    5334:	28 1b       	sub	r18, r24
    5336:	39 0b       	sbc	r19, r25
    5338:	b9 01       	movw	r22, r18
    533a:	37 ff       	sbrs	r19, 7
    533c:	04 c0       	rjmp	.+8      	; 0x5346 <_fpadd_parts+0xb2>
    533e:	66 27       	eor	r22, r22
    5340:	77 27       	eor	r23, r23
    5342:	62 1b       	sub	r22, r18
    5344:	73 0b       	sbc	r23, r19
    5346:	60 32       	cpi	r22, 0x20	; 32
    5348:	71 05       	cpc	r23, r1
    534a:	0c f0       	brlt	.+2      	; 0x534e <_fpadd_parts+0xba>
    534c:	61 c0       	rjmp	.+194    	; 0x5410 <_fpadd_parts+0x17c>
    534e:	12 16       	cp	r1, r18
    5350:	13 06       	cpc	r1, r19
    5352:	6c f5       	brge	.+90     	; 0x53ae <_fpadd_parts+0x11a>
    5354:	37 01       	movw	r6, r14
    5356:	48 01       	movw	r8, r16
    5358:	06 2e       	mov	r0, r22
    535a:	04 c0       	rjmp	.+8      	; 0x5364 <_fpadd_parts+0xd0>
    535c:	96 94       	lsr	r9
    535e:	87 94       	ror	r8
    5360:	77 94       	ror	r7
    5362:	67 94       	ror	r6
    5364:	0a 94       	dec	r0
    5366:	d2 f7       	brpl	.-12     	; 0x535c <_fpadd_parts+0xc8>
    5368:	21 e0       	ldi	r18, 0x01	; 1
    536a:	30 e0       	ldi	r19, 0x00	; 0
    536c:	40 e0       	ldi	r20, 0x00	; 0
    536e:	50 e0       	ldi	r21, 0x00	; 0
    5370:	04 c0       	rjmp	.+8      	; 0x537a <_fpadd_parts+0xe6>
    5372:	22 0f       	add	r18, r18
    5374:	33 1f       	adc	r19, r19
    5376:	44 1f       	adc	r20, r20
    5378:	55 1f       	adc	r21, r21
    537a:	6a 95       	dec	r22
    537c:	d2 f7       	brpl	.-12     	; 0x5372 <_fpadd_parts+0xde>
    537e:	21 50       	subi	r18, 0x01	; 1
    5380:	30 40       	sbci	r19, 0x00	; 0
    5382:	40 40       	sbci	r20, 0x00	; 0
    5384:	50 40       	sbci	r21, 0x00	; 0
    5386:	2e 21       	and	r18, r14
    5388:	3f 21       	and	r19, r15
    538a:	40 23       	and	r20, r16
    538c:	51 23       	and	r21, r17
    538e:	21 15       	cp	r18, r1
    5390:	31 05       	cpc	r19, r1
    5392:	41 05       	cpc	r20, r1
    5394:	51 05       	cpc	r21, r1
    5396:	21 f0       	breq	.+8      	; 0x53a0 <_fpadd_parts+0x10c>
    5398:	21 e0       	ldi	r18, 0x01	; 1
    539a:	30 e0       	ldi	r19, 0x00	; 0
    539c:	40 e0       	ldi	r20, 0x00	; 0
    539e:	50 e0       	ldi	r21, 0x00	; 0
    53a0:	79 01       	movw	r14, r18
    53a2:	8a 01       	movw	r16, r20
    53a4:	e6 28       	or	r14, r6
    53a6:	f7 28       	or	r15, r7
    53a8:	08 29       	or	r16, r8
    53aa:	19 29       	or	r17, r9
    53ac:	3c c0       	rjmp	.+120    	; 0x5426 <_fpadd_parts+0x192>
    53ae:	23 2b       	or	r18, r19
    53b0:	d1 f1       	breq	.+116    	; 0x5426 <_fpadd_parts+0x192>
    53b2:	26 0e       	add	r2, r22
    53b4:	37 1e       	adc	r3, r23
    53b6:	35 01       	movw	r6, r10
    53b8:	46 01       	movw	r8, r12
    53ba:	06 2e       	mov	r0, r22
    53bc:	04 c0       	rjmp	.+8      	; 0x53c6 <_fpadd_parts+0x132>
    53be:	96 94       	lsr	r9
    53c0:	87 94       	ror	r8
    53c2:	77 94       	ror	r7
    53c4:	67 94       	ror	r6
    53c6:	0a 94       	dec	r0
    53c8:	d2 f7       	brpl	.-12     	; 0x53be <_fpadd_parts+0x12a>
    53ca:	21 e0       	ldi	r18, 0x01	; 1
    53cc:	30 e0       	ldi	r19, 0x00	; 0
    53ce:	40 e0       	ldi	r20, 0x00	; 0
    53d0:	50 e0       	ldi	r21, 0x00	; 0
    53d2:	04 c0       	rjmp	.+8      	; 0x53dc <_fpadd_parts+0x148>
    53d4:	22 0f       	add	r18, r18
    53d6:	33 1f       	adc	r19, r19
    53d8:	44 1f       	adc	r20, r20
    53da:	55 1f       	adc	r21, r21
    53dc:	6a 95       	dec	r22
    53de:	d2 f7       	brpl	.-12     	; 0x53d4 <_fpadd_parts+0x140>
    53e0:	21 50       	subi	r18, 0x01	; 1
    53e2:	30 40       	sbci	r19, 0x00	; 0
    53e4:	40 40       	sbci	r20, 0x00	; 0
    53e6:	50 40       	sbci	r21, 0x00	; 0
    53e8:	2a 21       	and	r18, r10
    53ea:	3b 21       	and	r19, r11
    53ec:	4c 21       	and	r20, r12
    53ee:	5d 21       	and	r21, r13
    53f0:	21 15       	cp	r18, r1
    53f2:	31 05       	cpc	r19, r1
    53f4:	41 05       	cpc	r20, r1
    53f6:	51 05       	cpc	r21, r1
    53f8:	21 f0       	breq	.+8      	; 0x5402 <_fpadd_parts+0x16e>
    53fa:	21 e0       	ldi	r18, 0x01	; 1
    53fc:	30 e0       	ldi	r19, 0x00	; 0
    53fe:	40 e0       	ldi	r20, 0x00	; 0
    5400:	50 e0       	ldi	r21, 0x00	; 0
    5402:	59 01       	movw	r10, r18
    5404:	6a 01       	movw	r12, r20
    5406:	a6 28       	or	r10, r6
    5408:	b7 28       	or	r11, r7
    540a:	c8 28       	or	r12, r8
    540c:	d9 28       	or	r13, r9
    540e:	0b c0       	rjmp	.+22     	; 0x5426 <_fpadd_parts+0x192>
    5410:	82 15       	cp	r24, r2
    5412:	93 05       	cpc	r25, r3
    5414:	2c f0       	brlt	.+10     	; 0x5420 <_fpadd_parts+0x18c>
    5416:	1c 01       	movw	r2, r24
    5418:	aa 24       	eor	r10, r10
    541a:	bb 24       	eor	r11, r11
    541c:	65 01       	movw	r12, r10
    541e:	03 c0       	rjmp	.+6      	; 0x5426 <_fpadd_parts+0x192>
    5420:	ee 24       	eor	r14, r14
    5422:	ff 24       	eor	r15, r15
    5424:	87 01       	movw	r16, r14
    5426:	11 96       	adiw	r26, 0x01	; 1
    5428:	9c 91       	ld	r25, X
    542a:	d2 01       	movw	r26, r4
    542c:	11 96       	adiw	r26, 0x01	; 1
    542e:	8c 91       	ld	r24, X
    5430:	98 17       	cp	r25, r24
    5432:	09 f4       	brne	.+2      	; 0x5436 <_fpadd_parts+0x1a2>
    5434:	45 c0       	rjmp	.+138    	; 0x54c0 <_fpadd_parts+0x22c>
    5436:	99 23       	and	r25, r25
    5438:	39 f0       	breq	.+14     	; 0x5448 <_fpadd_parts+0x1b4>
    543a:	a8 01       	movw	r20, r16
    543c:	97 01       	movw	r18, r14
    543e:	2a 19       	sub	r18, r10
    5440:	3b 09       	sbc	r19, r11
    5442:	4c 09       	sbc	r20, r12
    5444:	5d 09       	sbc	r21, r13
    5446:	06 c0       	rjmp	.+12     	; 0x5454 <_fpadd_parts+0x1c0>
    5448:	a6 01       	movw	r20, r12
    544a:	95 01       	movw	r18, r10
    544c:	2e 19       	sub	r18, r14
    544e:	3f 09       	sbc	r19, r15
    5450:	40 0b       	sbc	r20, r16
    5452:	51 0b       	sbc	r21, r17
    5454:	57 fd       	sbrc	r21, 7
    5456:	08 c0       	rjmp	.+16     	; 0x5468 <_fpadd_parts+0x1d4>
    5458:	11 82       	std	Z+1, r1	; 0x01
    545a:	33 82       	std	Z+3, r3	; 0x03
    545c:	22 82       	std	Z+2, r2	; 0x02
    545e:	24 83       	std	Z+4, r18	; 0x04
    5460:	35 83       	std	Z+5, r19	; 0x05
    5462:	46 83       	std	Z+6, r20	; 0x06
    5464:	57 83       	std	Z+7, r21	; 0x07
    5466:	1d c0       	rjmp	.+58     	; 0x54a2 <_fpadd_parts+0x20e>
    5468:	81 e0       	ldi	r24, 0x01	; 1
    546a:	81 83       	std	Z+1, r24	; 0x01
    546c:	33 82       	std	Z+3, r3	; 0x03
    546e:	22 82       	std	Z+2, r2	; 0x02
    5470:	88 27       	eor	r24, r24
    5472:	99 27       	eor	r25, r25
    5474:	dc 01       	movw	r26, r24
    5476:	82 1b       	sub	r24, r18
    5478:	93 0b       	sbc	r25, r19
    547a:	a4 0b       	sbc	r26, r20
    547c:	b5 0b       	sbc	r27, r21
    547e:	84 83       	std	Z+4, r24	; 0x04
    5480:	95 83       	std	Z+5, r25	; 0x05
    5482:	a6 83       	std	Z+6, r26	; 0x06
    5484:	b7 83       	std	Z+7, r27	; 0x07
    5486:	0d c0       	rjmp	.+26     	; 0x54a2 <_fpadd_parts+0x20e>
    5488:	22 0f       	add	r18, r18
    548a:	33 1f       	adc	r19, r19
    548c:	44 1f       	adc	r20, r20
    548e:	55 1f       	adc	r21, r21
    5490:	24 83       	std	Z+4, r18	; 0x04
    5492:	35 83       	std	Z+5, r19	; 0x05
    5494:	46 83       	std	Z+6, r20	; 0x06
    5496:	57 83       	std	Z+7, r21	; 0x07
    5498:	82 81       	ldd	r24, Z+2	; 0x02
    549a:	93 81       	ldd	r25, Z+3	; 0x03
    549c:	01 97       	sbiw	r24, 0x01	; 1
    549e:	93 83       	std	Z+3, r25	; 0x03
    54a0:	82 83       	std	Z+2, r24	; 0x02
    54a2:	24 81       	ldd	r18, Z+4	; 0x04
    54a4:	35 81       	ldd	r19, Z+5	; 0x05
    54a6:	46 81       	ldd	r20, Z+6	; 0x06
    54a8:	57 81       	ldd	r21, Z+7	; 0x07
    54aa:	da 01       	movw	r26, r20
    54ac:	c9 01       	movw	r24, r18
    54ae:	01 97       	sbiw	r24, 0x01	; 1
    54b0:	a1 09       	sbc	r26, r1
    54b2:	b1 09       	sbc	r27, r1
    54b4:	8f 5f       	subi	r24, 0xFF	; 255
    54b6:	9f 4f       	sbci	r25, 0xFF	; 255
    54b8:	af 4f       	sbci	r26, 0xFF	; 255
    54ba:	bf 43       	sbci	r27, 0x3F	; 63
    54bc:	28 f3       	brcs	.-54     	; 0x5488 <_fpadd_parts+0x1f4>
    54be:	0b c0       	rjmp	.+22     	; 0x54d6 <_fpadd_parts+0x242>
    54c0:	91 83       	std	Z+1, r25	; 0x01
    54c2:	33 82       	std	Z+3, r3	; 0x03
    54c4:	22 82       	std	Z+2, r2	; 0x02
    54c6:	ea 0c       	add	r14, r10
    54c8:	fb 1c       	adc	r15, r11
    54ca:	0c 1d       	adc	r16, r12
    54cc:	1d 1d       	adc	r17, r13
    54ce:	e4 82       	std	Z+4, r14	; 0x04
    54d0:	f5 82       	std	Z+5, r15	; 0x05
    54d2:	06 83       	std	Z+6, r16	; 0x06
    54d4:	17 83       	std	Z+7, r17	; 0x07
    54d6:	83 e0       	ldi	r24, 0x03	; 3
    54d8:	80 83       	st	Z, r24
    54da:	24 81       	ldd	r18, Z+4	; 0x04
    54dc:	35 81       	ldd	r19, Z+5	; 0x05
    54de:	46 81       	ldd	r20, Z+6	; 0x06
    54e0:	57 81       	ldd	r21, Z+7	; 0x07
    54e2:	57 ff       	sbrs	r21, 7
    54e4:	1a c0       	rjmp	.+52     	; 0x551a <_fpadd_parts+0x286>
    54e6:	c9 01       	movw	r24, r18
    54e8:	aa 27       	eor	r26, r26
    54ea:	97 fd       	sbrc	r25, 7
    54ec:	a0 95       	com	r26
    54ee:	ba 2f       	mov	r27, r26
    54f0:	81 70       	andi	r24, 0x01	; 1
    54f2:	90 70       	andi	r25, 0x00	; 0
    54f4:	a0 70       	andi	r26, 0x00	; 0
    54f6:	b0 70       	andi	r27, 0x00	; 0
    54f8:	56 95       	lsr	r21
    54fa:	47 95       	ror	r20
    54fc:	37 95       	ror	r19
    54fe:	27 95       	ror	r18
    5500:	82 2b       	or	r24, r18
    5502:	93 2b       	or	r25, r19
    5504:	a4 2b       	or	r26, r20
    5506:	b5 2b       	or	r27, r21
    5508:	84 83       	std	Z+4, r24	; 0x04
    550a:	95 83       	std	Z+5, r25	; 0x05
    550c:	a6 83       	std	Z+6, r26	; 0x06
    550e:	b7 83       	std	Z+7, r27	; 0x07
    5510:	82 81       	ldd	r24, Z+2	; 0x02
    5512:	93 81       	ldd	r25, Z+3	; 0x03
    5514:	01 96       	adiw	r24, 0x01	; 1
    5516:	93 83       	std	Z+3, r25	; 0x03
    5518:	82 83       	std	Z+2, r24	; 0x02
    551a:	df 01       	movw	r26, r30
    551c:	01 c0       	rjmp	.+2      	; 0x5520 <_fpadd_parts+0x28c>
    551e:	d2 01       	movw	r26, r4
    5520:	cd 01       	movw	r24, r26
    5522:	cd b7       	in	r28, 0x3d	; 61
    5524:	de b7       	in	r29, 0x3e	; 62
    5526:	e2 e1       	ldi	r30, 0x12	; 18
    5528:	0c 94 cb 2e 	jmp	0x5d96	; 0x5d96 <__epilogue_restores__>

0000552c <__subsf3>:
    552c:	a0 e2       	ldi	r26, 0x20	; 32
    552e:	b0 e0       	ldi	r27, 0x00	; 0
    5530:	ec e9       	ldi	r30, 0x9C	; 156
    5532:	fa e2       	ldi	r31, 0x2A	; 42
    5534:	0c 94 bb 2e 	jmp	0x5d76	; 0x5d76 <__prologue_saves__+0x18>
    5538:	69 83       	std	Y+1, r22	; 0x01
    553a:	7a 83       	std	Y+2, r23	; 0x02
    553c:	8b 83       	std	Y+3, r24	; 0x03
    553e:	9c 83       	std	Y+4, r25	; 0x04
    5540:	2d 83       	std	Y+5, r18	; 0x05
    5542:	3e 83       	std	Y+6, r19	; 0x06
    5544:	4f 83       	std	Y+7, r20	; 0x07
    5546:	58 87       	std	Y+8, r21	; 0x08
    5548:	e9 e0       	ldi	r30, 0x09	; 9
    554a:	ee 2e       	mov	r14, r30
    554c:	f1 2c       	mov	r15, r1
    554e:	ec 0e       	add	r14, r28
    5550:	fd 1e       	adc	r15, r29
    5552:	ce 01       	movw	r24, r28
    5554:	01 96       	adiw	r24, 0x01	; 1
    5556:	b7 01       	movw	r22, r14
    5558:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <__unpack_f>
    555c:	8e 01       	movw	r16, r28
    555e:	0f 5e       	subi	r16, 0xEF	; 239
    5560:	1f 4f       	sbci	r17, 0xFF	; 255
    5562:	ce 01       	movw	r24, r28
    5564:	05 96       	adiw	r24, 0x05	; 5
    5566:	b8 01       	movw	r22, r16
    5568:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <__unpack_f>
    556c:	8a 89       	ldd	r24, Y+18	; 0x12
    556e:	91 e0       	ldi	r25, 0x01	; 1
    5570:	89 27       	eor	r24, r25
    5572:	8a 8b       	std	Y+18, r24	; 0x12
    5574:	c7 01       	movw	r24, r14
    5576:	b8 01       	movw	r22, r16
    5578:	ae 01       	movw	r20, r28
    557a:	47 5e       	subi	r20, 0xE7	; 231
    557c:	5f 4f       	sbci	r21, 0xFF	; 255
    557e:	0e 94 4a 29 	call	0x5294	; 0x5294 <_fpadd_parts>
    5582:	0e 94 ee 2c 	call	0x59dc	; 0x59dc <__pack_f>
    5586:	a0 96       	adiw	r28, 0x20	; 32
    5588:	e6 e0       	ldi	r30, 0x06	; 6
    558a:	0c 94 d7 2e 	jmp	0x5dae	; 0x5dae <__epilogue_restores__+0x18>

0000558e <__addsf3>:
    558e:	a0 e2       	ldi	r26, 0x20	; 32
    5590:	b0 e0       	ldi	r27, 0x00	; 0
    5592:	ed ec       	ldi	r30, 0xCD	; 205
    5594:	fa e2       	ldi	r31, 0x2A	; 42
    5596:	0c 94 bb 2e 	jmp	0x5d76	; 0x5d76 <__prologue_saves__+0x18>
    559a:	69 83       	std	Y+1, r22	; 0x01
    559c:	7a 83       	std	Y+2, r23	; 0x02
    559e:	8b 83       	std	Y+3, r24	; 0x03
    55a0:	9c 83       	std	Y+4, r25	; 0x04
    55a2:	2d 83       	std	Y+5, r18	; 0x05
    55a4:	3e 83       	std	Y+6, r19	; 0x06
    55a6:	4f 83       	std	Y+7, r20	; 0x07
    55a8:	58 87       	std	Y+8, r21	; 0x08
    55aa:	f9 e0       	ldi	r31, 0x09	; 9
    55ac:	ef 2e       	mov	r14, r31
    55ae:	f1 2c       	mov	r15, r1
    55b0:	ec 0e       	add	r14, r28
    55b2:	fd 1e       	adc	r15, r29
    55b4:	ce 01       	movw	r24, r28
    55b6:	01 96       	adiw	r24, 0x01	; 1
    55b8:	b7 01       	movw	r22, r14
    55ba:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <__unpack_f>
    55be:	8e 01       	movw	r16, r28
    55c0:	0f 5e       	subi	r16, 0xEF	; 239
    55c2:	1f 4f       	sbci	r17, 0xFF	; 255
    55c4:	ce 01       	movw	r24, r28
    55c6:	05 96       	adiw	r24, 0x05	; 5
    55c8:	b8 01       	movw	r22, r16
    55ca:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <__unpack_f>
    55ce:	c7 01       	movw	r24, r14
    55d0:	b8 01       	movw	r22, r16
    55d2:	ae 01       	movw	r20, r28
    55d4:	47 5e       	subi	r20, 0xE7	; 231
    55d6:	5f 4f       	sbci	r21, 0xFF	; 255
    55d8:	0e 94 4a 29 	call	0x5294	; 0x5294 <_fpadd_parts>
    55dc:	0e 94 ee 2c 	call	0x59dc	; 0x59dc <__pack_f>
    55e0:	a0 96       	adiw	r28, 0x20	; 32
    55e2:	e6 e0       	ldi	r30, 0x06	; 6
    55e4:	0c 94 d7 2e 	jmp	0x5dae	; 0x5dae <__epilogue_restores__+0x18>

000055e8 <__mulsf3>:
    55e8:	a0 e2       	ldi	r26, 0x20	; 32
    55ea:	b0 e0       	ldi	r27, 0x00	; 0
    55ec:	ea ef       	ldi	r30, 0xFA	; 250
    55ee:	fa e2       	ldi	r31, 0x2A	; 42
    55f0:	0c 94 af 2e 	jmp	0x5d5e	; 0x5d5e <__prologue_saves__>
    55f4:	69 83       	std	Y+1, r22	; 0x01
    55f6:	7a 83       	std	Y+2, r23	; 0x02
    55f8:	8b 83       	std	Y+3, r24	; 0x03
    55fa:	9c 83       	std	Y+4, r25	; 0x04
    55fc:	2d 83       	std	Y+5, r18	; 0x05
    55fe:	3e 83       	std	Y+6, r19	; 0x06
    5600:	4f 83       	std	Y+7, r20	; 0x07
    5602:	58 87       	std	Y+8, r21	; 0x08
    5604:	ce 01       	movw	r24, r28
    5606:	01 96       	adiw	r24, 0x01	; 1
    5608:	be 01       	movw	r22, r28
    560a:	67 5f       	subi	r22, 0xF7	; 247
    560c:	7f 4f       	sbci	r23, 0xFF	; 255
    560e:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <__unpack_f>
    5612:	ce 01       	movw	r24, r28
    5614:	05 96       	adiw	r24, 0x05	; 5
    5616:	be 01       	movw	r22, r28
    5618:	6f 5e       	subi	r22, 0xEF	; 239
    561a:	7f 4f       	sbci	r23, 0xFF	; 255
    561c:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <__unpack_f>
    5620:	99 85       	ldd	r25, Y+9	; 0x09
    5622:	92 30       	cpi	r25, 0x02	; 2
    5624:	88 f0       	brcs	.+34     	; 0x5648 <__mulsf3+0x60>
    5626:	89 89       	ldd	r24, Y+17	; 0x11
    5628:	82 30       	cpi	r24, 0x02	; 2
    562a:	c8 f0       	brcs	.+50     	; 0x565e <__mulsf3+0x76>
    562c:	94 30       	cpi	r25, 0x04	; 4
    562e:	19 f4       	brne	.+6      	; 0x5636 <__mulsf3+0x4e>
    5630:	82 30       	cpi	r24, 0x02	; 2
    5632:	51 f4       	brne	.+20     	; 0x5648 <__mulsf3+0x60>
    5634:	04 c0       	rjmp	.+8      	; 0x563e <__mulsf3+0x56>
    5636:	84 30       	cpi	r24, 0x04	; 4
    5638:	29 f4       	brne	.+10     	; 0x5644 <__mulsf3+0x5c>
    563a:	92 30       	cpi	r25, 0x02	; 2
    563c:	81 f4       	brne	.+32     	; 0x565e <__mulsf3+0x76>
    563e:	81 eb       	ldi	r24, 0xB1	; 177
    5640:	92 e0       	ldi	r25, 0x02	; 2
    5642:	c6 c0       	rjmp	.+396    	; 0x57d0 <__mulsf3+0x1e8>
    5644:	92 30       	cpi	r25, 0x02	; 2
    5646:	49 f4       	brne	.+18     	; 0x565a <__mulsf3+0x72>
    5648:	20 e0       	ldi	r18, 0x00	; 0
    564a:	9a 85       	ldd	r25, Y+10	; 0x0a
    564c:	8a 89       	ldd	r24, Y+18	; 0x12
    564e:	98 13       	cpse	r25, r24
    5650:	21 e0       	ldi	r18, 0x01	; 1
    5652:	2a 87       	std	Y+10, r18	; 0x0a
    5654:	ce 01       	movw	r24, r28
    5656:	09 96       	adiw	r24, 0x09	; 9
    5658:	bb c0       	rjmp	.+374    	; 0x57d0 <__mulsf3+0x1e8>
    565a:	82 30       	cpi	r24, 0x02	; 2
    565c:	49 f4       	brne	.+18     	; 0x5670 <__mulsf3+0x88>
    565e:	20 e0       	ldi	r18, 0x00	; 0
    5660:	9a 85       	ldd	r25, Y+10	; 0x0a
    5662:	8a 89       	ldd	r24, Y+18	; 0x12
    5664:	98 13       	cpse	r25, r24
    5666:	21 e0       	ldi	r18, 0x01	; 1
    5668:	2a 8b       	std	Y+18, r18	; 0x12
    566a:	ce 01       	movw	r24, r28
    566c:	41 96       	adiw	r24, 0x11	; 17
    566e:	b0 c0       	rjmp	.+352    	; 0x57d0 <__mulsf3+0x1e8>
    5670:	2d 84       	ldd	r2, Y+13	; 0x0d
    5672:	3e 84       	ldd	r3, Y+14	; 0x0e
    5674:	4f 84       	ldd	r4, Y+15	; 0x0f
    5676:	58 88       	ldd	r5, Y+16	; 0x10
    5678:	6d 88       	ldd	r6, Y+21	; 0x15
    567a:	7e 88       	ldd	r7, Y+22	; 0x16
    567c:	8f 88       	ldd	r8, Y+23	; 0x17
    567e:	98 8c       	ldd	r9, Y+24	; 0x18
    5680:	ee 24       	eor	r14, r14
    5682:	ff 24       	eor	r15, r15
    5684:	87 01       	movw	r16, r14
    5686:	aa 24       	eor	r10, r10
    5688:	bb 24       	eor	r11, r11
    568a:	65 01       	movw	r12, r10
    568c:	40 e0       	ldi	r20, 0x00	; 0
    568e:	50 e0       	ldi	r21, 0x00	; 0
    5690:	60 e0       	ldi	r22, 0x00	; 0
    5692:	70 e0       	ldi	r23, 0x00	; 0
    5694:	e0 e0       	ldi	r30, 0x00	; 0
    5696:	f0 e0       	ldi	r31, 0x00	; 0
    5698:	c1 01       	movw	r24, r2
    569a:	81 70       	andi	r24, 0x01	; 1
    569c:	90 70       	andi	r25, 0x00	; 0
    569e:	89 2b       	or	r24, r25
    56a0:	e9 f0       	breq	.+58     	; 0x56dc <__mulsf3+0xf4>
    56a2:	e6 0c       	add	r14, r6
    56a4:	f7 1c       	adc	r15, r7
    56a6:	08 1d       	adc	r16, r8
    56a8:	19 1d       	adc	r17, r9
    56aa:	9a 01       	movw	r18, r20
    56ac:	ab 01       	movw	r20, r22
    56ae:	2a 0d       	add	r18, r10
    56b0:	3b 1d       	adc	r19, r11
    56b2:	4c 1d       	adc	r20, r12
    56b4:	5d 1d       	adc	r21, r13
    56b6:	80 e0       	ldi	r24, 0x00	; 0
    56b8:	90 e0       	ldi	r25, 0x00	; 0
    56ba:	a0 e0       	ldi	r26, 0x00	; 0
    56bc:	b0 e0       	ldi	r27, 0x00	; 0
    56be:	e6 14       	cp	r14, r6
    56c0:	f7 04       	cpc	r15, r7
    56c2:	08 05       	cpc	r16, r8
    56c4:	19 05       	cpc	r17, r9
    56c6:	20 f4       	brcc	.+8      	; 0x56d0 <__mulsf3+0xe8>
    56c8:	81 e0       	ldi	r24, 0x01	; 1
    56ca:	90 e0       	ldi	r25, 0x00	; 0
    56cc:	a0 e0       	ldi	r26, 0x00	; 0
    56ce:	b0 e0       	ldi	r27, 0x00	; 0
    56d0:	ba 01       	movw	r22, r20
    56d2:	a9 01       	movw	r20, r18
    56d4:	48 0f       	add	r20, r24
    56d6:	59 1f       	adc	r21, r25
    56d8:	6a 1f       	adc	r22, r26
    56da:	7b 1f       	adc	r23, r27
    56dc:	aa 0c       	add	r10, r10
    56de:	bb 1c       	adc	r11, r11
    56e0:	cc 1c       	adc	r12, r12
    56e2:	dd 1c       	adc	r13, r13
    56e4:	97 fe       	sbrs	r9, 7
    56e6:	08 c0       	rjmp	.+16     	; 0x56f8 <__mulsf3+0x110>
    56e8:	81 e0       	ldi	r24, 0x01	; 1
    56ea:	90 e0       	ldi	r25, 0x00	; 0
    56ec:	a0 e0       	ldi	r26, 0x00	; 0
    56ee:	b0 e0       	ldi	r27, 0x00	; 0
    56f0:	a8 2a       	or	r10, r24
    56f2:	b9 2a       	or	r11, r25
    56f4:	ca 2a       	or	r12, r26
    56f6:	db 2a       	or	r13, r27
    56f8:	31 96       	adiw	r30, 0x01	; 1
    56fa:	e0 32       	cpi	r30, 0x20	; 32
    56fc:	f1 05       	cpc	r31, r1
    56fe:	49 f0       	breq	.+18     	; 0x5712 <__mulsf3+0x12a>
    5700:	66 0c       	add	r6, r6
    5702:	77 1c       	adc	r7, r7
    5704:	88 1c       	adc	r8, r8
    5706:	99 1c       	adc	r9, r9
    5708:	56 94       	lsr	r5
    570a:	47 94       	ror	r4
    570c:	37 94       	ror	r3
    570e:	27 94       	ror	r2
    5710:	c3 cf       	rjmp	.-122    	; 0x5698 <__mulsf3+0xb0>
    5712:	fa 85       	ldd	r31, Y+10	; 0x0a
    5714:	ea 89       	ldd	r30, Y+18	; 0x12
    5716:	2b 89       	ldd	r18, Y+19	; 0x13
    5718:	3c 89       	ldd	r19, Y+20	; 0x14
    571a:	8b 85       	ldd	r24, Y+11	; 0x0b
    571c:	9c 85       	ldd	r25, Y+12	; 0x0c
    571e:	28 0f       	add	r18, r24
    5720:	39 1f       	adc	r19, r25
    5722:	2e 5f       	subi	r18, 0xFE	; 254
    5724:	3f 4f       	sbci	r19, 0xFF	; 255
    5726:	17 c0       	rjmp	.+46     	; 0x5756 <__mulsf3+0x16e>
    5728:	ca 01       	movw	r24, r20
    572a:	81 70       	andi	r24, 0x01	; 1
    572c:	90 70       	andi	r25, 0x00	; 0
    572e:	89 2b       	or	r24, r25
    5730:	61 f0       	breq	.+24     	; 0x574a <__mulsf3+0x162>
    5732:	16 95       	lsr	r17
    5734:	07 95       	ror	r16
    5736:	f7 94       	ror	r15
    5738:	e7 94       	ror	r14
    573a:	80 e0       	ldi	r24, 0x00	; 0
    573c:	90 e0       	ldi	r25, 0x00	; 0
    573e:	a0 e0       	ldi	r26, 0x00	; 0
    5740:	b0 e8       	ldi	r27, 0x80	; 128
    5742:	e8 2a       	or	r14, r24
    5744:	f9 2a       	or	r15, r25
    5746:	0a 2b       	or	r16, r26
    5748:	1b 2b       	or	r17, r27
    574a:	76 95       	lsr	r23
    574c:	67 95       	ror	r22
    574e:	57 95       	ror	r21
    5750:	47 95       	ror	r20
    5752:	2f 5f       	subi	r18, 0xFF	; 255
    5754:	3f 4f       	sbci	r19, 0xFF	; 255
    5756:	77 fd       	sbrc	r23, 7
    5758:	e7 cf       	rjmp	.-50     	; 0x5728 <__mulsf3+0x140>
    575a:	0c c0       	rjmp	.+24     	; 0x5774 <__mulsf3+0x18c>
    575c:	44 0f       	add	r20, r20
    575e:	55 1f       	adc	r21, r21
    5760:	66 1f       	adc	r22, r22
    5762:	77 1f       	adc	r23, r23
    5764:	17 fd       	sbrc	r17, 7
    5766:	41 60       	ori	r20, 0x01	; 1
    5768:	ee 0c       	add	r14, r14
    576a:	ff 1c       	adc	r15, r15
    576c:	00 1f       	adc	r16, r16
    576e:	11 1f       	adc	r17, r17
    5770:	21 50       	subi	r18, 0x01	; 1
    5772:	30 40       	sbci	r19, 0x00	; 0
    5774:	40 30       	cpi	r20, 0x00	; 0
    5776:	90 e0       	ldi	r25, 0x00	; 0
    5778:	59 07       	cpc	r21, r25
    577a:	90 e0       	ldi	r25, 0x00	; 0
    577c:	69 07       	cpc	r22, r25
    577e:	90 e4       	ldi	r25, 0x40	; 64
    5780:	79 07       	cpc	r23, r25
    5782:	60 f3       	brcs	.-40     	; 0x575c <__mulsf3+0x174>
    5784:	2b 8f       	std	Y+27, r18	; 0x1b
    5786:	3c 8f       	std	Y+28, r19	; 0x1c
    5788:	db 01       	movw	r26, r22
    578a:	ca 01       	movw	r24, r20
    578c:	8f 77       	andi	r24, 0x7F	; 127
    578e:	90 70       	andi	r25, 0x00	; 0
    5790:	a0 70       	andi	r26, 0x00	; 0
    5792:	b0 70       	andi	r27, 0x00	; 0
    5794:	80 34       	cpi	r24, 0x40	; 64
    5796:	91 05       	cpc	r25, r1
    5798:	a1 05       	cpc	r26, r1
    579a:	b1 05       	cpc	r27, r1
    579c:	61 f4       	brne	.+24     	; 0x57b6 <__mulsf3+0x1ce>
    579e:	47 fd       	sbrc	r20, 7
    57a0:	0a c0       	rjmp	.+20     	; 0x57b6 <__mulsf3+0x1ce>
    57a2:	e1 14       	cp	r14, r1
    57a4:	f1 04       	cpc	r15, r1
    57a6:	01 05       	cpc	r16, r1
    57a8:	11 05       	cpc	r17, r1
    57aa:	29 f0       	breq	.+10     	; 0x57b6 <__mulsf3+0x1ce>
    57ac:	40 5c       	subi	r20, 0xC0	; 192
    57ae:	5f 4f       	sbci	r21, 0xFF	; 255
    57b0:	6f 4f       	sbci	r22, 0xFF	; 255
    57b2:	7f 4f       	sbci	r23, 0xFF	; 255
    57b4:	40 78       	andi	r20, 0x80	; 128
    57b6:	1a 8e       	std	Y+26, r1	; 0x1a
    57b8:	fe 17       	cp	r31, r30
    57ba:	11 f0       	breq	.+4      	; 0x57c0 <__mulsf3+0x1d8>
    57bc:	81 e0       	ldi	r24, 0x01	; 1
    57be:	8a 8f       	std	Y+26, r24	; 0x1a
    57c0:	4d 8f       	std	Y+29, r20	; 0x1d
    57c2:	5e 8f       	std	Y+30, r21	; 0x1e
    57c4:	6f 8f       	std	Y+31, r22	; 0x1f
    57c6:	78 a3       	std	Y+32, r23	; 0x20
    57c8:	83 e0       	ldi	r24, 0x03	; 3
    57ca:	89 8f       	std	Y+25, r24	; 0x19
    57cc:	ce 01       	movw	r24, r28
    57ce:	49 96       	adiw	r24, 0x19	; 25
    57d0:	0e 94 ee 2c 	call	0x59dc	; 0x59dc <__pack_f>
    57d4:	a0 96       	adiw	r28, 0x20	; 32
    57d6:	e2 e1       	ldi	r30, 0x12	; 18
    57d8:	0c 94 cb 2e 	jmp	0x5d96	; 0x5d96 <__epilogue_restores__>

000057dc <__divsf3>:
    57dc:	a8 e1       	ldi	r26, 0x18	; 24
    57de:	b0 e0       	ldi	r27, 0x00	; 0
    57e0:	e4 ef       	ldi	r30, 0xF4	; 244
    57e2:	fb e2       	ldi	r31, 0x2B	; 43
    57e4:	0c 94 b7 2e 	jmp	0x5d6e	; 0x5d6e <__prologue_saves__+0x10>
    57e8:	69 83       	std	Y+1, r22	; 0x01
    57ea:	7a 83       	std	Y+2, r23	; 0x02
    57ec:	8b 83       	std	Y+3, r24	; 0x03
    57ee:	9c 83       	std	Y+4, r25	; 0x04
    57f0:	2d 83       	std	Y+5, r18	; 0x05
    57f2:	3e 83       	std	Y+6, r19	; 0x06
    57f4:	4f 83       	std	Y+7, r20	; 0x07
    57f6:	58 87       	std	Y+8, r21	; 0x08
    57f8:	b9 e0       	ldi	r27, 0x09	; 9
    57fa:	eb 2e       	mov	r14, r27
    57fc:	f1 2c       	mov	r15, r1
    57fe:	ec 0e       	add	r14, r28
    5800:	fd 1e       	adc	r15, r29
    5802:	ce 01       	movw	r24, r28
    5804:	01 96       	adiw	r24, 0x01	; 1
    5806:	b7 01       	movw	r22, r14
    5808:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <__unpack_f>
    580c:	8e 01       	movw	r16, r28
    580e:	0f 5e       	subi	r16, 0xEF	; 239
    5810:	1f 4f       	sbci	r17, 0xFF	; 255
    5812:	ce 01       	movw	r24, r28
    5814:	05 96       	adiw	r24, 0x05	; 5
    5816:	b8 01       	movw	r22, r16
    5818:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <__unpack_f>
    581c:	29 85       	ldd	r18, Y+9	; 0x09
    581e:	22 30       	cpi	r18, 0x02	; 2
    5820:	08 f4       	brcc	.+2      	; 0x5824 <__divsf3+0x48>
    5822:	7e c0       	rjmp	.+252    	; 0x5920 <__divsf3+0x144>
    5824:	39 89       	ldd	r19, Y+17	; 0x11
    5826:	32 30       	cpi	r19, 0x02	; 2
    5828:	10 f4       	brcc	.+4      	; 0x582e <__divsf3+0x52>
    582a:	b8 01       	movw	r22, r16
    582c:	7c c0       	rjmp	.+248    	; 0x5926 <__divsf3+0x14a>
    582e:	8a 85       	ldd	r24, Y+10	; 0x0a
    5830:	9a 89       	ldd	r25, Y+18	; 0x12
    5832:	89 27       	eor	r24, r25
    5834:	8a 87       	std	Y+10, r24	; 0x0a
    5836:	24 30       	cpi	r18, 0x04	; 4
    5838:	11 f0       	breq	.+4      	; 0x583e <__divsf3+0x62>
    583a:	22 30       	cpi	r18, 0x02	; 2
    583c:	31 f4       	brne	.+12     	; 0x584a <__divsf3+0x6e>
    583e:	23 17       	cp	r18, r19
    5840:	09 f0       	breq	.+2      	; 0x5844 <__divsf3+0x68>
    5842:	6e c0       	rjmp	.+220    	; 0x5920 <__divsf3+0x144>
    5844:	61 eb       	ldi	r22, 0xB1	; 177
    5846:	72 e0       	ldi	r23, 0x02	; 2
    5848:	6e c0       	rjmp	.+220    	; 0x5926 <__divsf3+0x14a>
    584a:	34 30       	cpi	r19, 0x04	; 4
    584c:	39 f4       	brne	.+14     	; 0x585c <__divsf3+0x80>
    584e:	1d 86       	std	Y+13, r1	; 0x0d
    5850:	1e 86       	std	Y+14, r1	; 0x0e
    5852:	1f 86       	std	Y+15, r1	; 0x0f
    5854:	18 8a       	std	Y+16, r1	; 0x10
    5856:	1c 86       	std	Y+12, r1	; 0x0c
    5858:	1b 86       	std	Y+11, r1	; 0x0b
    585a:	04 c0       	rjmp	.+8      	; 0x5864 <__divsf3+0x88>
    585c:	32 30       	cpi	r19, 0x02	; 2
    585e:	21 f4       	brne	.+8      	; 0x5868 <__divsf3+0x8c>
    5860:	84 e0       	ldi	r24, 0x04	; 4
    5862:	89 87       	std	Y+9, r24	; 0x09
    5864:	b7 01       	movw	r22, r14
    5866:	5f c0       	rjmp	.+190    	; 0x5926 <__divsf3+0x14a>
    5868:	2b 85       	ldd	r18, Y+11	; 0x0b
    586a:	3c 85       	ldd	r19, Y+12	; 0x0c
    586c:	8b 89       	ldd	r24, Y+19	; 0x13
    586e:	9c 89       	ldd	r25, Y+20	; 0x14
    5870:	28 1b       	sub	r18, r24
    5872:	39 0b       	sbc	r19, r25
    5874:	3c 87       	std	Y+12, r19	; 0x0c
    5876:	2b 87       	std	Y+11, r18	; 0x0b
    5878:	ed 84       	ldd	r14, Y+13	; 0x0d
    587a:	fe 84       	ldd	r15, Y+14	; 0x0e
    587c:	0f 85       	ldd	r16, Y+15	; 0x0f
    587e:	18 89       	ldd	r17, Y+16	; 0x10
    5880:	ad 88       	ldd	r10, Y+21	; 0x15
    5882:	be 88       	ldd	r11, Y+22	; 0x16
    5884:	cf 88       	ldd	r12, Y+23	; 0x17
    5886:	d8 8c       	ldd	r13, Y+24	; 0x18
    5888:	ea 14       	cp	r14, r10
    588a:	fb 04       	cpc	r15, r11
    588c:	0c 05       	cpc	r16, r12
    588e:	1d 05       	cpc	r17, r13
    5890:	40 f4       	brcc	.+16     	; 0x58a2 <__divsf3+0xc6>
    5892:	ee 0c       	add	r14, r14
    5894:	ff 1c       	adc	r15, r15
    5896:	00 1f       	adc	r16, r16
    5898:	11 1f       	adc	r17, r17
    589a:	21 50       	subi	r18, 0x01	; 1
    589c:	30 40       	sbci	r19, 0x00	; 0
    589e:	3c 87       	std	Y+12, r19	; 0x0c
    58a0:	2b 87       	std	Y+11, r18	; 0x0b
    58a2:	20 e0       	ldi	r18, 0x00	; 0
    58a4:	30 e0       	ldi	r19, 0x00	; 0
    58a6:	40 e0       	ldi	r20, 0x00	; 0
    58a8:	50 e0       	ldi	r21, 0x00	; 0
    58aa:	80 e0       	ldi	r24, 0x00	; 0
    58ac:	90 e0       	ldi	r25, 0x00	; 0
    58ae:	a0 e0       	ldi	r26, 0x00	; 0
    58b0:	b0 e4       	ldi	r27, 0x40	; 64
    58b2:	60 e0       	ldi	r22, 0x00	; 0
    58b4:	70 e0       	ldi	r23, 0x00	; 0
    58b6:	ea 14       	cp	r14, r10
    58b8:	fb 04       	cpc	r15, r11
    58ba:	0c 05       	cpc	r16, r12
    58bc:	1d 05       	cpc	r17, r13
    58be:	40 f0       	brcs	.+16     	; 0x58d0 <__divsf3+0xf4>
    58c0:	28 2b       	or	r18, r24
    58c2:	39 2b       	or	r19, r25
    58c4:	4a 2b       	or	r20, r26
    58c6:	5b 2b       	or	r21, r27
    58c8:	ea 18       	sub	r14, r10
    58ca:	fb 08       	sbc	r15, r11
    58cc:	0c 09       	sbc	r16, r12
    58ce:	1d 09       	sbc	r17, r13
    58d0:	b6 95       	lsr	r27
    58d2:	a7 95       	ror	r26
    58d4:	97 95       	ror	r25
    58d6:	87 95       	ror	r24
    58d8:	ee 0c       	add	r14, r14
    58da:	ff 1c       	adc	r15, r15
    58dc:	00 1f       	adc	r16, r16
    58de:	11 1f       	adc	r17, r17
    58e0:	6f 5f       	subi	r22, 0xFF	; 255
    58e2:	7f 4f       	sbci	r23, 0xFF	; 255
    58e4:	6f 31       	cpi	r22, 0x1F	; 31
    58e6:	71 05       	cpc	r23, r1
    58e8:	31 f7       	brne	.-52     	; 0x58b6 <__divsf3+0xda>
    58ea:	da 01       	movw	r26, r20
    58ec:	c9 01       	movw	r24, r18
    58ee:	8f 77       	andi	r24, 0x7F	; 127
    58f0:	90 70       	andi	r25, 0x00	; 0
    58f2:	a0 70       	andi	r26, 0x00	; 0
    58f4:	b0 70       	andi	r27, 0x00	; 0
    58f6:	80 34       	cpi	r24, 0x40	; 64
    58f8:	91 05       	cpc	r25, r1
    58fa:	a1 05       	cpc	r26, r1
    58fc:	b1 05       	cpc	r27, r1
    58fe:	61 f4       	brne	.+24     	; 0x5918 <__divsf3+0x13c>
    5900:	27 fd       	sbrc	r18, 7
    5902:	0a c0       	rjmp	.+20     	; 0x5918 <__divsf3+0x13c>
    5904:	e1 14       	cp	r14, r1
    5906:	f1 04       	cpc	r15, r1
    5908:	01 05       	cpc	r16, r1
    590a:	11 05       	cpc	r17, r1
    590c:	29 f0       	breq	.+10     	; 0x5918 <__divsf3+0x13c>
    590e:	20 5c       	subi	r18, 0xC0	; 192
    5910:	3f 4f       	sbci	r19, 0xFF	; 255
    5912:	4f 4f       	sbci	r20, 0xFF	; 255
    5914:	5f 4f       	sbci	r21, 0xFF	; 255
    5916:	20 78       	andi	r18, 0x80	; 128
    5918:	2d 87       	std	Y+13, r18	; 0x0d
    591a:	3e 87       	std	Y+14, r19	; 0x0e
    591c:	4f 87       	std	Y+15, r20	; 0x0f
    591e:	58 8b       	std	Y+16, r21	; 0x10
    5920:	be 01       	movw	r22, r28
    5922:	67 5f       	subi	r22, 0xF7	; 247
    5924:	7f 4f       	sbci	r23, 0xFF	; 255
    5926:	cb 01       	movw	r24, r22
    5928:	0e 94 ee 2c 	call	0x59dc	; 0x59dc <__pack_f>
    592c:	68 96       	adiw	r28, 0x18	; 24
    592e:	ea e0       	ldi	r30, 0x0A	; 10
    5930:	0c 94 d3 2e 	jmp	0x5da6	; 0x5da6 <__epilogue_restores__+0x10>

00005934 <__fixsfsi>:
    5934:	ac e0       	ldi	r26, 0x0C	; 12
    5936:	b0 e0       	ldi	r27, 0x00	; 0
    5938:	e0 ea       	ldi	r30, 0xA0	; 160
    593a:	fc e2       	ldi	r31, 0x2C	; 44
    593c:	0c 94 bf 2e 	jmp	0x5d7e	; 0x5d7e <__prologue_saves__+0x20>
    5940:	69 83       	std	Y+1, r22	; 0x01
    5942:	7a 83       	std	Y+2, r23	; 0x02
    5944:	8b 83       	std	Y+3, r24	; 0x03
    5946:	9c 83       	std	Y+4, r25	; 0x04
    5948:	ce 01       	movw	r24, r28
    594a:	01 96       	adiw	r24, 0x01	; 1
    594c:	be 01       	movw	r22, r28
    594e:	6b 5f       	subi	r22, 0xFB	; 251
    5950:	7f 4f       	sbci	r23, 0xFF	; 255
    5952:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <__unpack_f>
    5956:	8d 81       	ldd	r24, Y+5	; 0x05
    5958:	82 30       	cpi	r24, 0x02	; 2
    595a:	61 f1       	breq	.+88     	; 0x59b4 <__fixsfsi+0x80>
    595c:	82 30       	cpi	r24, 0x02	; 2
    595e:	50 f1       	brcs	.+84     	; 0x59b4 <__fixsfsi+0x80>
    5960:	84 30       	cpi	r24, 0x04	; 4
    5962:	21 f4       	brne	.+8      	; 0x596c <__fixsfsi+0x38>
    5964:	8e 81       	ldd	r24, Y+6	; 0x06
    5966:	88 23       	and	r24, r24
    5968:	51 f1       	breq	.+84     	; 0x59be <__fixsfsi+0x8a>
    596a:	2e c0       	rjmp	.+92     	; 0x59c8 <__fixsfsi+0x94>
    596c:	2f 81       	ldd	r18, Y+7	; 0x07
    596e:	38 85       	ldd	r19, Y+8	; 0x08
    5970:	37 fd       	sbrc	r19, 7
    5972:	20 c0       	rjmp	.+64     	; 0x59b4 <__fixsfsi+0x80>
    5974:	6e 81       	ldd	r22, Y+6	; 0x06
    5976:	2f 31       	cpi	r18, 0x1F	; 31
    5978:	31 05       	cpc	r19, r1
    597a:	1c f0       	brlt	.+6      	; 0x5982 <__fixsfsi+0x4e>
    597c:	66 23       	and	r22, r22
    597e:	f9 f0       	breq	.+62     	; 0x59be <__fixsfsi+0x8a>
    5980:	23 c0       	rjmp	.+70     	; 0x59c8 <__fixsfsi+0x94>
    5982:	8e e1       	ldi	r24, 0x1E	; 30
    5984:	90 e0       	ldi	r25, 0x00	; 0
    5986:	82 1b       	sub	r24, r18
    5988:	93 0b       	sbc	r25, r19
    598a:	29 85       	ldd	r18, Y+9	; 0x09
    598c:	3a 85       	ldd	r19, Y+10	; 0x0a
    598e:	4b 85       	ldd	r20, Y+11	; 0x0b
    5990:	5c 85       	ldd	r21, Y+12	; 0x0c
    5992:	04 c0       	rjmp	.+8      	; 0x599c <__fixsfsi+0x68>
    5994:	56 95       	lsr	r21
    5996:	47 95       	ror	r20
    5998:	37 95       	ror	r19
    599a:	27 95       	ror	r18
    599c:	8a 95       	dec	r24
    599e:	d2 f7       	brpl	.-12     	; 0x5994 <__fixsfsi+0x60>
    59a0:	66 23       	and	r22, r22
    59a2:	b1 f0       	breq	.+44     	; 0x59d0 <__fixsfsi+0x9c>
    59a4:	50 95       	com	r21
    59a6:	40 95       	com	r20
    59a8:	30 95       	com	r19
    59aa:	21 95       	neg	r18
    59ac:	3f 4f       	sbci	r19, 0xFF	; 255
    59ae:	4f 4f       	sbci	r20, 0xFF	; 255
    59b0:	5f 4f       	sbci	r21, 0xFF	; 255
    59b2:	0e c0       	rjmp	.+28     	; 0x59d0 <__fixsfsi+0x9c>
    59b4:	20 e0       	ldi	r18, 0x00	; 0
    59b6:	30 e0       	ldi	r19, 0x00	; 0
    59b8:	40 e0       	ldi	r20, 0x00	; 0
    59ba:	50 e0       	ldi	r21, 0x00	; 0
    59bc:	09 c0       	rjmp	.+18     	; 0x59d0 <__fixsfsi+0x9c>
    59be:	2f ef       	ldi	r18, 0xFF	; 255
    59c0:	3f ef       	ldi	r19, 0xFF	; 255
    59c2:	4f ef       	ldi	r20, 0xFF	; 255
    59c4:	5f e7       	ldi	r21, 0x7F	; 127
    59c6:	04 c0       	rjmp	.+8      	; 0x59d0 <__fixsfsi+0x9c>
    59c8:	20 e0       	ldi	r18, 0x00	; 0
    59ca:	30 e0       	ldi	r19, 0x00	; 0
    59cc:	40 e0       	ldi	r20, 0x00	; 0
    59ce:	50 e8       	ldi	r21, 0x80	; 128
    59d0:	b9 01       	movw	r22, r18
    59d2:	ca 01       	movw	r24, r20
    59d4:	2c 96       	adiw	r28, 0x0c	; 12
    59d6:	e2 e0       	ldi	r30, 0x02	; 2
    59d8:	0c 94 db 2e 	jmp	0x5db6	; 0x5db6 <__epilogue_restores__+0x20>

000059dc <__pack_f>:
    59dc:	df 92       	push	r13
    59de:	ef 92       	push	r14
    59e0:	ff 92       	push	r15
    59e2:	0f 93       	push	r16
    59e4:	1f 93       	push	r17
    59e6:	fc 01       	movw	r30, r24
    59e8:	e4 80       	ldd	r14, Z+4	; 0x04
    59ea:	f5 80       	ldd	r15, Z+5	; 0x05
    59ec:	06 81       	ldd	r16, Z+6	; 0x06
    59ee:	17 81       	ldd	r17, Z+7	; 0x07
    59f0:	d1 80       	ldd	r13, Z+1	; 0x01
    59f2:	80 81       	ld	r24, Z
    59f4:	82 30       	cpi	r24, 0x02	; 2
    59f6:	48 f4       	brcc	.+18     	; 0x5a0a <__pack_f+0x2e>
    59f8:	80 e0       	ldi	r24, 0x00	; 0
    59fa:	90 e0       	ldi	r25, 0x00	; 0
    59fc:	a0 e1       	ldi	r26, 0x10	; 16
    59fe:	b0 e0       	ldi	r27, 0x00	; 0
    5a00:	e8 2a       	or	r14, r24
    5a02:	f9 2a       	or	r15, r25
    5a04:	0a 2b       	or	r16, r26
    5a06:	1b 2b       	or	r17, r27
    5a08:	a5 c0       	rjmp	.+330    	; 0x5b54 <__pack_f+0x178>
    5a0a:	84 30       	cpi	r24, 0x04	; 4
    5a0c:	09 f4       	brne	.+2      	; 0x5a10 <__pack_f+0x34>
    5a0e:	9f c0       	rjmp	.+318    	; 0x5b4e <__pack_f+0x172>
    5a10:	82 30       	cpi	r24, 0x02	; 2
    5a12:	21 f4       	brne	.+8      	; 0x5a1c <__pack_f+0x40>
    5a14:	ee 24       	eor	r14, r14
    5a16:	ff 24       	eor	r15, r15
    5a18:	87 01       	movw	r16, r14
    5a1a:	05 c0       	rjmp	.+10     	; 0x5a26 <__pack_f+0x4a>
    5a1c:	e1 14       	cp	r14, r1
    5a1e:	f1 04       	cpc	r15, r1
    5a20:	01 05       	cpc	r16, r1
    5a22:	11 05       	cpc	r17, r1
    5a24:	19 f4       	brne	.+6      	; 0x5a2c <__pack_f+0x50>
    5a26:	e0 e0       	ldi	r30, 0x00	; 0
    5a28:	f0 e0       	ldi	r31, 0x00	; 0
    5a2a:	96 c0       	rjmp	.+300    	; 0x5b58 <__pack_f+0x17c>
    5a2c:	62 81       	ldd	r22, Z+2	; 0x02
    5a2e:	73 81       	ldd	r23, Z+3	; 0x03
    5a30:	9f ef       	ldi	r25, 0xFF	; 255
    5a32:	62 38       	cpi	r22, 0x82	; 130
    5a34:	79 07       	cpc	r23, r25
    5a36:	0c f0       	brlt	.+2      	; 0x5a3a <__pack_f+0x5e>
    5a38:	5b c0       	rjmp	.+182    	; 0x5af0 <__pack_f+0x114>
    5a3a:	22 e8       	ldi	r18, 0x82	; 130
    5a3c:	3f ef       	ldi	r19, 0xFF	; 255
    5a3e:	26 1b       	sub	r18, r22
    5a40:	37 0b       	sbc	r19, r23
    5a42:	2a 31       	cpi	r18, 0x1A	; 26
    5a44:	31 05       	cpc	r19, r1
    5a46:	2c f0       	brlt	.+10     	; 0x5a52 <__pack_f+0x76>
    5a48:	20 e0       	ldi	r18, 0x00	; 0
    5a4a:	30 e0       	ldi	r19, 0x00	; 0
    5a4c:	40 e0       	ldi	r20, 0x00	; 0
    5a4e:	50 e0       	ldi	r21, 0x00	; 0
    5a50:	2a c0       	rjmp	.+84     	; 0x5aa6 <__pack_f+0xca>
    5a52:	b8 01       	movw	r22, r16
    5a54:	a7 01       	movw	r20, r14
    5a56:	02 2e       	mov	r0, r18
    5a58:	04 c0       	rjmp	.+8      	; 0x5a62 <__pack_f+0x86>
    5a5a:	76 95       	lsr	r23
    5a5c:	67 95       	ror	r22
    5a5e:	57 95       	ror	r21
    5a60:	47 95       	ror	r20
    5a62:	0a 94       	dec	r0
    5a64:	d2 f7       	brpl	.-12     	; 0x5a5a <__pack_f+0x7e>
    5a66:	81 e0       	ldi	r24, 0x01	; 1
    5a68:	90 e0       	ldi	r25, 0x00	; 0
    5a6a:	a0 e0       	ldi	r26, 0x00	; 0
    5a6c:	b0 e0       	ldi	r27, 0x00	; 0
    5a6e:	04 c0       	rjmp	.+8      	; 0x5a78 <__pack_f+0x9c>
    5a70:	88 0f       	add	r24, r24
    5a72:	99 1f       	adc	r25, r25
    5a74:	aa 1f       	adc	r26, r26
    5a76:	bb 1f       	adc	r27, r27
    5a78:	2a 95       	dec	r18
    5a7a:	d2 f7       	brpl	.-12     	; 0x5a70 <__pack_f+0x94>
    5a7c:	01 97       	sbiw	r24, 0x01	; 1
    5a7e:	a1 09       	sbc	r26, r1
    5a80:	b1 09       	sbc	r27, r1
    5a82:	8e 21       	and	r24, r14
    5a84:	9f 21       	and	r25, r15
    5a86:	a0 23       	and	r26, r16
    5a88:	b1 23       	and	r27, r17
    5a8a:	00 97       	sbiw	r24, 0x00	; 0
    5a8c:	a1 05       	cpc	r26, r1
    5a8e:	b1 05       	cpc	r27, r1
    5a90:	21 f0       	breq	.+8      	; 0x5a9a <__pack_f+0xbe>
    5a92:	81 e0       	ldi	r24, 0x01	; 1
    5a94:	90 e0       	ldi	r25, 0x00	; 0
    5a96:	a0 e0       	ldi	r26, 0x00	; 0
    5a98:	b0 e0       	ldi	r27, 0x00	; 0
    5a9a:	9a 01       	movw	r18, r20
    5a9c:	ab 01       	movw	r20, r22
    5a9e:	28 2b       	or	r18, r24
    5aa0:	39 2b       	or	r19, r25
    5aa2:	4a 2b       	or	r20, r26
    5aa4:	5b 2b       	or	r21, r27
    5aa6:	da 01       	movw	r26, r20
    5aa8:	c9 01       	movw	r24, r18
    5aaa:	8f 77       	andi	r24, 0x7F	; 127
    5aac:	90 70       	andi	r25, 0x00	; 0
    5aae:	a0 70       	andi	r26, 0x00	; 0
    5ab0:	b0 70       	andi	r27, 0x00	; 0
    5ab2:	80 34       	cpi	r24, 0x40	; 64
    5ab4:	91 05       	cpc	r25, r1
    5ab6:	a1 05       	cpc	r26, r1
    5ab8:	b1 05       	cpc	r27, r1
    5aba:	39 f4       	brne	.+14     	; 0x5aca <__pack_f+0xee>
    5abc:	27 ff       	sbrs	r18, 7
    5abe:	09 c0       	rjmp	.+18     	; 0x5ad2 <__pack_f+0xf6>
    5ac0:	20 5c       	subi	r18, 0xC0	; 192
    5ac2:	3f 4f       	sbci	r19, 0xFF	; 255
    5ac4:	4f 4f       	sbci	r20, 0xFF	; 255
    5ac6:	5f 4f       	sbci	r21, 0xFF	; 255
    5ac8:	04 c0       	rjmp	.+8      	; 0x5ad2 <__pack_f+0xf6>
    5aca:	21 5c       	subi	r18, 0xC1	; 193
    5acc:	3f 4f       	sbci	r19, 0xFF	; 255
    5ace:	4f 4f       	sbci	r20, 0xFF	; 255
    5ad0:	5f 4f       	sbci	r21, 0xFF	; 255
    5ad2:	e0 e0       	ldi	r30, 0x00	; 0
    5ad4:	f0 e0       	ldi	r31, 0x00	; 0
    5ad6:	20 30       	cpi	r18, 0x00	; 0
    5ad8:	a0 e0       	ldi	r26, 0x00	; 0
    5ada:	3a 07       	cpc	r19, r26
    5adc:	a0 e0       	ldi	r26, 0x00	; 0
    5ade:	4a 07       	cpc	r20, r26
    5ae0:	a0 e4       	ldi	r26, 0x40	; 64
    5ae2:	5a 07       	cpc	r21, r26
    5ae4:	10 f0       	brcs	.+4      	; 0x5aea <__pack_f+0x10e>
    5ae6:	e1 e0       	ldi	r30, 0x01	; 1
    5ae8:	f0 e0       	ldi	r31, 0x00	; 0
    5aea:	79 01       	movw	r14, r18
    5aec:	8a 01       	movw	r16, r20
    5aee:	27 c0       	rjmp	.+78     	; 0x5b3e <__pack_f+0x162>
    5af0:	60 38       	cpi	r22, 0x80	; 128
    5af2:	71 05       	cpc	r23, r1
    5af4:	64 f5       	brge	.+88     	; 0x5b4e <__pack_f+0x172>
    5af6:	fb 01       	movw	r30, r22
    5af8:	e1 58       	subi	r30, 0x81	; 129
    5afa:	ff 4f       	sbci	r31, 0xFF	; 255
    5afc:	d8 01       	movw	r26, r16
    5afe:	c7 01       	movw	r24, r14
    5b00:	8f 77       	andi	r24, 0x7F	; 127
    5b02:	90 70       	andi	r25, 0x00	; 0
    5b04:	a0 70       	andi	r26, 0x00	; 0
    5b06:	b0 70       	andi	r27, 0x00	; 0
    5b08:	80 34       	cpi	r24, 0x40	; 64
    5b0a:	91 05       	cpc	r25, r1
    5b0c:	a1 05       	cpc	r26, r1
    5b0e:	b1 05       	cpc	r27, r1
    5b10:	39 f4       	brne	.+14     	; 0x5b20 <__pack_f+0x144>
    5b12:	e7 fe       	sbrs	r14, 7
    5b14:	0d c0       	rjmp	.+26     	; 0x5b30 <__pack_f+0x154>
    5b16:	80 e4       	ldi	r24, 0x40	; 64
    5b18:	90 e0       	ldi	r25, 0x00	; 0
    5b1a:	a0 e0       	ldi	r26, 0x00	; 0
    5b1c:	b0 e0       	ldi	r27, 0x00	; 0
    5b1e:	04 c0       	rjmp	.+8      	; 0x5b28 <__pack_f+0x14c>
    5b20:	8f e3       	ldi	r24, 0x3F	; 63
    5b22:	90 e0       	ldi	r25, 0x00	; 0
    5b24:	a0 e0       	ldi	r26, 0x00	; 0
    5b26:	b0 e0       	ldi	r27, 0x00	; 0
    5b28:	e8 0e       	add	r14, r24
    5b2a:	f9 1e       	adc	r15, r25
    5b2c:	0a 1f       	adc	r16, r26
    5b2e:	1b 1f       	adc	r17, r27
    5b30:	17 ff       	sbrs	r17, 7
    5b32:	05 c0       	rjmp	.+10     	; 0x5b3e <__pack_f+0x162>
    5b34:	16 95       	lsr	r17
    5b36:	07 95       	ror	r16
    5b38:	f7 94       	ror	r15
    5b3a:	e7 94       	ror	r14
    5b3c:	31 96       	adiw	r30, 0x01	; 1
    5b3e:	87 e0       	ldi	r24, 0x07	; 7
    5b40:	16 95       	lsr	r17
    5b42:	07 95       	ror	r16
    5b44:	f7 94       	ror	r15
    5b46:	e7 94       	ror	r14
    5b48:	8a 95       	dec	r24
    5b4a:	d1 f7       	brne	.-12     	; 0x5b40 <__pack_f+0x164>
    5b4c:	05 c0       	rjmp	.+10     	; 0x5b58 <__pack_f+0x17c>
    5b4e:	ee 24       	eor	r14, r14
    5b50:	ff 24       	eor	r15, r15
    5b52:	87 01       	movw	r16, r14
    5b54:	ef ef       	ldi	r30, 0xFF	; 255
    5b56:	f0 e0       	ldi	r31, 0x00	; 0
    5b58:	6e 2f       	mov	r22, r30
    5b5a:	67 95       	ror	r22
    5b5c:	66 27       	eor	r22, r22
    5b5e:	67 95       	ror	r22
    5b60:	90 2f       	mov	r25, r16
    5b62:	9f 77       	andi	r25, 0x7F	; 127
    5b64:	d7 94       	ror	r13
    5b66:	dd 24       	eor	r13, r13
    5b68:	d7 94       	ror	r13
    5b6a:	8e 2f       	mov	r24, r30
    5b6c:	86 95       	lsr	r24
    5b6e:	49 2f       	mov	r20, r25
    5b70:	46 2b       	or	r20, r22
    5b72:	58 2f       	mov	r21, r24
    5b74:	5d 29       	or	r21, r13
    5b76:	b7 01       	movw	r22, r14
    5b78:	ca 01       	movw	r24, r20
    5b7a:	1f 91       	pop	r17
    5b7c:	0f 91       	pop	r16
    5b7e:	ff 90       	pop	r15
    5b80:	ef 90       	pop	r14
    5b82:	df 90       	pop	r13
    5b84:	08 95       	ret

00005b86 <__unpack_f>:
    5b86:	fc 01       	movw	r30, r24
    5b88:	db 01       	movw	r26, r22
    5b8a:	40 81       	ld	r20, Z
    5b8c:	51 81       	ldd	r21, Z+1	; 0x01
    5b8e:	22 81       	ldd	r18, Z+2	; 0x02
    5b90:	62 2f       	mov	r22, r18
    5b92:	6f 77       	andi	r22, 0x7F	; 127
    5b94:	70 e0       	ldi	r23, 0x00	; 0
    5b96:	22 1f       	adc	r18, r18
    5b98:	22 27       	eor	r18, r18
    5b9a:	22 1f       	adc	r18, r18
    5b9c:	93 81       	ldd	r25, Z+3	; 0x03
    5b9e:	89 2f       	mov	r24, r25
    5ba0:	88 0f       	add	r24, r24
    5ba2:	82 2b       	or	r24, r18
    5ba4:	28 2f       	mov	r18, r24
    5ba6:	30 e0       	ldi	r19, 0x00	; 0
    5ba8:	99 1f       	adc	r25, r25
    5baa:	99 27       	eor	r25, r25
    5bac:	99 1f       	adc	r25, r25
    5bae:	11 96       	adiw	r26, 0x01	; 1
    5bb0:	9c 93       	st	X, r25
    5bb2:	11 97       	sbiw	r26, 0x01	; 1
    5bb4:	21 15       	cp	r18, r1
    5bb6:	31 05       	cpc	r19, r1
    5bb8:	a9 f5       	brne	.+106    	; 0x5c24 <__unpack_f+0x9e>
    5bba:	41 15       	cp	r20, r1
    5bbc:	51 05       	cpc	r21, r1
    5bbe:	61 05       	cpc	r22, r1
    5bc0:	71 05       	cpc	r23, r1
    5bc2:	11 f4       	brne	.+4      	; 0x5bc8 <__unpack_f+0x42>
    5bc4:	82 e0       	ldi	r24, 0x02	; 2
    5bc6:	37 c0       	rjmp	.+110    	; 0x5c36 <__unpack_f+0xb0>
    5bc8:	82 e8       	ldi	r24, 0x82	; 130
    5bca:	9f ef       	ldi	r25, 0xFF	; 255
    5bcc:	13 96       	adiw	r26, 0x03	; 3
    5bce:	9c 93       	st	X, r25
    5bd0:	8e 93       	st	-X, r24
    5bd2:	12 97       	sbiw	r26, 0x02	; 2
    5bd4:	9a 01       	movw	r18, r20
    5bd6:	ab 01       	movw	r20, r22
    5bd8:	67 e0       	ldi	r22, 0x07	; 7
    5bda:	22 0f       	add	r18, r18
    5bdc:	33 1f       	adc	r19, r19
    5bde:	44 1f       	adc	r20, r20
    5be0:	55 1f       	adc	r21, r21
    5be2:	6a 95       	dec	r22
    5be4:	d1 f7       	brne	.-12     	; 0x5bda <__unpack_f+0x54>
    5be6:	83 e0       	ldi	r24, 0x03	; 3
    5be8:	8c 93       	st	X, r24
    5bea:	0d c0       	rjmp	.+26     	; 0x5c06 <__unpack_f+0x80>
    5bec:	22 0f       	add	r18, r18
    5bee:	33 1f       	adc	r19, r19
    5bf0:	44 1f       	adc	r20, r20
    5bf2:	55 1f       	adc	r21, r21
    5bf4:	12 96       	adiw	r26, 0x02	; 2
    5bf6:	8d 91       	ld	r24, X+
    5bf8:	9c 91       	ld	r25, X
    5bfa:	13 97       	sbiw	r26, 0x03	; 3
    5bfc:	01 97       	sbiw	r24, 0x01	; 1
    5bfe:	13 96       	adiw	r26, 0x03	; 3
    5c00:	9c 93       	st	X, r25
    5c02:	8e 93       	st	-X, r24
    5c04:	12 97       	sbiw	r26, 0x02	; 2
    5c06:	20 30       	cpi	r18, 0x00	; 0
    5c08:	80 e0       	ldi	r24, 0x00	; 0
    5c0a:	38 07       	cpc	r19, r24
    5c0c:	80 e0       	ldi	r24, 0x00	; 0
    5c0e:	48 07       	cpc	r20, r24
    5c10:	80 e4       	ldi	r24, 0x40	; 64
    5c12:	58 07       	cpc	r21, r24
    5c14:	58 f3       	brcs	.-42     	; 0x5bec <__unpack_f+0x66>
    5c16:	14 96       	adiw	r26, 0x04	; 4
    5c18:	2d 93       	st	X+, r18
    5c1a:	3d 93       	st	X+, r19
    5c1c:	4d 93       	st	X+, r20
    5c1e:	5c 93       	st	X, r21
    5c20:	17 97       	sbiw	r26, 0x07	; 7
    5c22:	08 95       	ret
    5c24:	2f 3f       	cpi	r18, 0xFF	; 255
    5c26:	31 05       	cpc	r19, r1
    5c28:	79 f4       	brne	.+30     	; 0x5c48 <__unpack_f+0xc2>
    5c2a:	41 15       	cp	r20, r1
    5c2c:	51 05       	cpc	r21, r1
    5c2e:	61 05       	cpc	r22, r1
    5c30:	71 05       	cpc	r23, r1
    5c32:	19 f4       	brne	.+6      	; 0x5c3a <__unpack_f+0xb4>
    5c34:	84 e0       	ldi	r24, 0x04	; 4
    5c36:	8c 93       	st	X, r24
    5c38:	08 95       	ret
    5c3a:	64 ff       	sbrs	r22, 4
    5c3c:	03 c0       	rjmp	.+6      	; 0x5c44 <__unpack_f+0xbe>
    5c3e:	81 e0       	ldi	r24, 0x01	; 1
    5c40:	8c 93       	st	X, r24
    5c42:	12 c0       	rjmp	.+36     	; 0x5c68 <__unpack_f+0xe2>
    5c44:	1c 92       	st	X, r1
    5c46:	10 c0       	rjmp	.+32     	; 0x5c68 <__unpack_f+0xe2>
    5c48:	2f 57       	subi	r18, 0x7F	; 127
    5c4a:	30 40       	sbci	r19, 0x00	; 0
    5c4c:	13 96       	adiw	r26, 0x03	; 3
    5c4e:	3c 93       	st	X, r19
    5c50:	2e 93       	st	-X, r18
    5c52:	12 97       	sbiw	r26, 0x02	; 2
    5c54:	83 e0       	ldi	r24, 0x03	; 3
    5c56:	8c 93       	st	X, r24
    5c58:	87 e0       	ldi	r24, 0x07	; 7
    5c5a:	44 0f       	add	r20, r20
    5c5c:	55 1f       	adc	r21, r21
    5c5e:	66 1f       	adc	r22, r22
    5c60:	77 1f       	adc	r23, r23
    5c62:	8a 95       	dec	r24
    5c64:	d1 f7       	brne	.-12     	; 0x5c5a <__unpack_f+0xd4>
    5c66:	70 64       	ori	r23, 0x40	; 64
    5c68:	14 96       	adiw	r26, 0x04	; 4
    5c6a:	4d 93       	st	X+, r20
    5c6c:	5d 93       	st	X+, r21
    5c6e:	6d 93       	st	X+, r22
    5c70:	7c 93       	st	X, r23
    5c72:	17 97       	sbiw	r26, 0x07	; 7
    5c74:	08 95       	ret

00005c76 <__mulsi3>:
    5c76:	62 9f       	mul	r22, r18
    5c78:	d0 01       	movw	r26, r0
    5c7a:	73 9f       	mul	r23, r19
    5c7c:	f0 01       	movw	r30, r0
    5c7e:	82 9f       	mul	r24, r18
    5c80:	e0 0d       	add	r30, r0
    5c82:	f1 1d       	adc	r31, r1
    5c84:	64 9f       	mul	r22, r20
    5c86:	e0 0d       	add	r30, r0
    5c88:	f1 1d       	adc	r31, r1
    5c8a:	92 9f       	mul	r25, r18
    5c8c:	f0 0d       	add	r31, r0
    5c8e:	83 9f       	mul	r24, r19
    5c90:	f0 0d       	add	r31, r0
    5c92:	74 9f       	mul	r23, r20
    5c94:	f0 0d       	add	r31, r0
    5c96:	65 9f       	mul	r22, r21
    5c98:	f0 0d       	add	r31, r0
    5c9a:	99 27       	eor	r25, r25
    5c9c:	72 9f       	mul	r23, r18
    5c9e:	b0 0d       	add	r27, r0
    5ca0:	e1 1d       	adc	r30, r1
    5ca2:	f9 1f       	adc	r31, r25
    5ca4:	63 9f       	mul	r22, r19
    5ca6:	b0 0d       	add	r27, r0
    5ca8:	e1 1d       	adc	r30, r1
    5caa:	f9 1f       	adc	r31, r25
    5cac:	bd 01       	movw	r22, r26
    5cae:	cf 01       	movw	r24, r30
    5cb0:	11 24       	eor	r1, r1
    5cb2:	08 95       	ret

00005cb4 <__udivmodqi4>:
    5cb4:	99 1b       	sub	r25, r25
    5cb6:	79 e0       	ldi	r23, 0x09	; 9
    5cb8:	04 c0       	rjmp	.+8      	; 0x5cc2 <__udivmodqi4_ep>

00005cba <__udivmodqi4_loop>:
    5cba:	99 1f       	adc	r25, r25
    5cbc:	96 17       	cp	r25, r22
    5cbe:	08 f0       	brcs	.+2      	; 0x5cc2 <__udivmodqi4_ep>
    5cc0:	96 1b       	sub	r25, r22

00005cc2 <__udivmodqi4_ep>:
    5cc2:	88 1f       	adc	r24, r24
    5cc4:	7a 95       	dec	r23
    5cc6:	c9 f7       	brne	.-14     	; 0x5cba <__udivmodqi4_loop>
    5cc8:	80 95       	com	r24
    5cca:	08 95       	ret

00005ccc <__udivmodhi4>:
    5ccc:	aa 1b       	sub	r26, r26
    5cce:	bb 1b       	sub	r27, r27
    5cd0:	51 e1       	ldi	r21, 0x11	; 17
    5cd2:	07 c0       	rjmp	.+14     	; 0x5ce2 <__udivmodhi4_ep>

00005cd4 <__udivmodhi4_loop>:
    5cd4:	aa 1f       	adc	r26, r26
    5cd6:	bb 1f       	adc	r27, r27
    5cd8:	a6 17       	cp	r26, r22
    5cda:	b7 07       	cpc	r27, r23
    5cdc:	10 f0       	brcs	.+4      	; 0x5ce2 <__udivmodhi4_ep>
    5cde:	a6 1b       	sub	r26, r22
    5ce0:	b7 0b       	sbc	r27, r23

00005ce2 <__udivmodhi4_ep>:
    5ce2:	88 1f       	adc	r24, r24
    5ce4:	99 1f       	adc	r25, r25
    5ce6:	5a 95       	dec	r21
    5ce8:	a9 f7       	brne	.-22     	; 0x5cd4 <__udivmodhi4_loop>
    5cea:	80 95       	com	r24
    5cec:	90 95       	com	r25
    5cee:	bc 01       	movw	r22, r24
    5cf0:	cd 01       	movw	r24, r26
    5cf2:	08 95       	ret

00005cf4 <__divmodhi4>:
    5cf4:	97 fb       	bst	r25, 7
    5cf6:	09 2e       	mov	r0, r25
    5cf8:	07 26       	eor	r0, r23
    5cfa:	0a d0       	rcall	.+20     	; 0x5d10 <__divmodhi4_neg1>
    5cfc:	77 fd       	sbrc	r23, 7
    5cfe:	04 d0       	rcall	.+8      	; 0x5d08 <__divmodhi4_neg2>
    5d00:	e5 df       	rcall	.-54     	; 0x5ccc <__udivmodhi4>
    5d02:	06 d0       	rcall	.+12     	; 0x5d10 <__divmodhi4_neg1>
    5d04:	00 20       	and	r0, r0
    5d06:	1a f4       	brpl	.+6      	; 0x5d0e <__divmodhi4_exit>

00005d08 <__divmodhi4_neg2>:
    5d08:	70 95       	com	r23
    5d0a:	61 95       	neg	r22
    5d0c:	7f 4f       	sbci	r23, 0xFF	; 255

00005d0e <__divmodhi4_exit>:
    5d0e:	08 95       	ret

00005d10 <__divmodhi4_neg1>:
    5d10:	f6 f7       	brtc	.-4      	; 0x5d0e <__divmodhi4_exit>
    5d12:	90 95       	com	r25
    5d14:	81 95       	neg	r24
    5d16:	9f 4f       	sbci	r25, 0xFF	; 255
    5d18:	08 95       	ret

00005d1a <__udivmodsi4>:
    5d1a:	a1 e2       	ldi	r26, 0x21	; 33
    5d1c:	1a 2e       	mov	r1, r26
    5d1e:	aa 1b       	sub	r26, r26
    5d20:	bb 1b       	sub	r27, r27
    5d22:	fd 01       	movw	r30, r26
    5d24:	0d c0       	rjmp	.+26     	; 0x5d40 <__udivmodsi4_ep>

00005d26 <__udivmodsi4_loop>:
    5d26:	aa 1f       	adc	r26, r26
    5d28:	bb 1f       	adc	r27, r27
    5d2a:	ee 1f       	adc	r30, r30
    5d2c:	ff 1f       	adc	r31, r31
    5d2e:	a2 17       	cp	r26, r18
    5d30:	b3 07       	cpc	r27, r19
    5d32:	e4 07       	cpc	r30, r20
    5d34:	f5 07       	cpc	r31, r21
    5d36:	20 f0       	brcs	.+8      	; 0x5d40 <__udivmodsi4_ep>
    5d38:	a2 1b       	sub	r26, r18
    5d3a:	b3 0b       	sbc	r27, r19
    5d3c:	e4 0b       	sbc	r30, r20
    5d3e:	f5 0b       	sbc	r31, r21

00005d40 <__udivmodsi4_ep>:
    5d40:	66 1f       	adc	r22, r22
    5d42:	77 1f       	adc	r23, r23
    5d44:	88 1f       	adc	r24, r24
    5d46:	99 1f       	adc	r25, r25
    5d48:	1a 94       	dec	r1
    5d4a:	69 f7       	brne	.-38     	; 0x5d26 <__udivmodsi4_loop>
    5d4c:	60 95       	com	r22
    5d4e:	70 95       	com	r23
    5d50:	80 95       	com	r24
    5d52:	90 95       	com	r25
    5d54:	9b 01       	movw	r18, r22
    5d56:	ac 01       	movw	r20, r24
    5d58:	bd 01       	movw	r22, r26
    5d5a:	cf 01       	movw	r24, r30
    5d5c:	08 95       	ret

00005d5e <__prologue_saves__>:
    5d5e:	2f 92       	push	r2
    5d60:	3f 92       	push	r3
    5d62:	4f 92       	push	r4
    5d64:	5f 92       	push	r5
    5d66:	6f 92       	push	r6
    5d68:	7f 92       	push	r7
    5d6a:	8f 92       	push	r8
    5d6c:	9f 92       	push	r9
    5d6e:	af 92       	push	r10
    5d70:	bf 92       	push	r11
    5d72:	cf 92       	push	r12
    5d74:	df 92       	push	r13
    5d76:	ef 92       	push	r14
    5d78:	ff 92       	push	r15
    5d7a:	0f 93       	push	r16
    5d7c:	1f 93       	push	r17
    5d7e:	cf 93       	push	r28
    5d80:	df 93       	push	r29
    5d82:	cd b7       	in	r28, 0x3d	; 61
    5d84:	de b7       	in	r29, 0x3e	; 62
    5d86:	ca 1b       	sub	r28, r26
    5d88:	db 0b       	sbc	r29, r27
    5d8a:	0f b6       	in	r0, 0x3f	; 63
    5d8c:	f8 94       	cli
    5d8e:	de bf       	out	0x3e, r29	; 62
    5d90:	0f be       	out	0x3f, r0	; 63
    5d92:	cd bf       	out	0x3d, r28	; 61
    5d94:	09 94       	ijmp

00005d96 <__epilogue_restores__>:
    5d96:	2a 88       	ldd	r2, Y+18	; 0x12
    5d98:	39 88       	ldd	r3, Y+17	; 0x11
    5d9a:	48 88       	ldd	r4, Y+16	; 0x10
    5d9c:	5f 84       	ldd	r5, Y+15	; 0x0f
    5d9e:	6e 84       	ldd	r6, Y+14	; 0x0e
    5da0:	7d 84       	ldd	r7, Y+13	; 0x0d
    5da2:	8c 84       	ldd	r8, Y+12	; 0x0c
    5da4:	9b 84       	ldd	r9, Y+11	; 0x0b
    5da6:	aa 84       	ldd	r10, Y+10	; 0x0a
    5da8:	b9 84       	ldd	r11, Y+9	; 0x09
    5daa:	c8 84       	ldd	r12, Y+8	; 0x08
    5dac:	df 80       	ldd	r13, Y+7	; 0x07
    5dae:	ee 80       	ldd	r14, Y+6	; 0x06
    5db0:	fd 80       	ldd	r15, Y+5	; 0x05
    5db2:	0c 81       	ldd	r16, Y+4	; 0x04
    5db4:	1b 81       	ldd	r17, Y+3	; 0x03
    5db6:	aa 81       	ldd	r26, Y+2	; 0x02
    5db8:	b9 81       	ldd	r27, Y+1	; 0x01
    5dba:	ce 0f       	add	r28, r30
    5dbc:	d1 1d       	adc	r29, r1
    5dbe:	0f b6       	in	r0, 0x3f	; 63
    5dc0:	f8 94       	cli
    5dc2:	de bf       	out	0x3e, r29	; 62
    5dc4:	0f be       	out	0x3f, r0	; 63
    5dc6:	cd bf       	out	0x3d, r28	; 61
    5dc8:	ed 01       	movw	r28, r26
    5dca:	08 95       	ret

00005dcc <__tablejump2__>:
    5dcc:	ee 0f       	add	r30, r30
    5dce:	ff 1f       	adc	r31, r31

00005dd0 <__tablejump__>:
    5dd0:	05 90       	lpm	r0, Z+
    5dd2:	f4 91       	lpm	r31, Z+
    5dd4:	e0 2d       	mov	r30, r0
    5dd6:	09 94       	ijmp

00005dd8 <atoi>:
    5dd8:	fc 01       	movw	r30, r24
    5dda:	88 27       	eor	r24, r24
    5ddc:	99 27       	eor	r25, r25
    5dde:	e8 94       	clt
    5de0:	21 91       	ld	r18, Z+
    5de2:	20 32       	cpi	r18, 0x20	; 32
    5de4:	e9 f3       	breq	.-6      	; 0x5de0 <atoi+0x8>
    5de6:	29 30       	cpi	r18, 0x09	; 9
    5de8:	10 f0       	brcs	.+4      	; 0x5dee <atoi+0x16>
    5dea:	2e 30       	cpi	r18, 0x0E	; 14
    5dec:	c8 f3       	brcs	.-14     	; 0x5de0 <atoi+0x8>
    5dee:	2b 32       	cpi	r18, 0x2B	; 43
    5df0:	41 f0       	breq	.+16     	; 0x5e02 <atoi+0x2a>
    5df2:	2d 32       	cpi	r18, 0x2D	; 45
    5df4:	39 f4       	brne	.+14     	; 0x5e04 <atoi+0x2c>
    5df6:	68 94       	set
    5df8:	04 c0       	rjmp	.+8      	; 0x5e02 <atoi+0x2a>
    5dfa:	0e 94 2b 2f 	call	0x5e56	; 0x5e56 <__mulhi_const_10>
    5dfe:	82 0f       	add	r24, r18
    5e00:	91 1d       	adc	r25, r1
    5e02:	21 91       	ld	r18, Z+
    5e04:	20 53       	subi	r18, 0x30	; 48
    5e06:	2a 30       	cpi	r18, 0x0A	; 10
    5e08:	c0 f3       	brcs	.-16     	; 0x5dfa <atoi+0x22>
    5e0a:	1e f4       	brtc	.+6      	; 0x5e12 <atoi+0x3a>
    5e0c:	90 95       	com	r25
    5e0e:	81 95       	neg	r24
    5e10:	9f 4f       	sbci	r25, 0xFF	; 255
    5e12:	08 95       	ret

00005e14 <itoa>:
    5e14:	fb 01       	movw	r30, r22
    5e16:	9f 01       	movw	r18, r30
    5e18:	e8 94       	clt
    5e1a:	42 30       	cpi	r20, 0x02	; 2
    5e1c:	c4 f0       	brlt	.+48     	; 0x5e4e <itoa+0x3a>
    5e1e:	45 32       	cpi	r20, 0x25	; 37
    5e20:	b4 f4       	brge	.+44     	; 0x5e4e <itoa+0x3a>
    5e22:	4a 30       	cpi	r20, 0x0A	; 10
    5e24:	29 f4       	brne	.+10     	; 0x5e30 <itoa+0x1c>
    5e26:	97 fb       	bst	r25, 7
    5e28:	1e f4       	brtc	.+6      	; 0x5e30 <itoa+0x1c>
    5e2a:	90 95       	com	r25
    5e2c:	81 95       	neg	r24
    5e2e:	9f 4f       	sbci	r25, 0xFF	; 255
    5e30:	64 2f       	mov	r22, r20
    5e32:	77 27       	eor	r23, r23
    5e34:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <__udivmodhi4>
    5e38:	80 5d       	subi	r24, 0xD0	; 208
    5e3a:	8a 33       	cpi	r24, 0x3A	; 58
    5e3c:	0c f0       	brlt	.+2      	; 0x5e40 <itoa+0x2c>
    5e3e:	89 5d       	subi	r24, 0xD9	; 217
    5e40:	81 93       	st	Z+, r24
    5e42:	cb 01       	movw	r24, r22
    5e44:	00 97       	sbiw	r24, 0x00	; 0
    5e46:	a1 f7       	brne	.-24     	; 0x5e30 <itoa+0x1c>
    5e48:	16 f4       	brtc	.+4      	; 0x5e4e <itoa+0x3a>
    5e4a:	5d e2       	ldi	r21, 0x2D	; 45
    5e4c:	51 93       	st	Z+, r21
    5e4e:	10 82       	st	Z, r1
    5e50:	c9 01       	movw	r24, r18
    5e52:	0c 94 33 2f 	jmp	0x5e66	; 0x5e66 <strrev>

00005e56 <__mulhi_const_10>:
    5e56:	7a e0       	ldi	r23, 0x0A	; 10
    5e58:	97 9f       	mul	r25, r23
    5e5a:	90 2d       	mov	r25, r0
    5e5c:	87 9f       	mul	r24, r23
    5e5e:	80 2d       	mov	r24, r0
    5e60:	91 0d       	add	r25, r1
    5e62:	11 24       	eor	r1, r1
    5e64:	08 95       	ret

00005e66 <strrev>:
    5e66:	dc 01       	movw	r26, r24
    5e68:	fc 01       	movw	r30, r24
    5e6a:	67 2f       	mov	r22, r23
    5e6c:	71 91       	ld	r23, Z+
    5e6e:	77 23       	and	r23, r23
    5e70:	e1 f7       	brne	.-8      	; 0x5e6a <strrev+0x4>
    5e72:	32 97       	sbiw	r30, 0x02	; 2
    5e74:	04 c0       	rjmp	.+8      	; 0x5e7e <strrev+0x18>
    5e76:	7c 91       	ld	r23, X
    5e78:	6d 93       	st	X+, r22
    5e7a:	70 83       	st	Z, r23
    5e7c:	62 91       	ld	r22, -Z
    5e7e:	ae 17       	cp	r26, r30
    5e80:	bf 07       	cpc	r27, r31
    5e82:	c8 f3       	brcs	.-14     	; 0x5e76 <strrev+0x10>
    5e84:	08 95       	ret

00005e86 <_exit>:
    5e86:	f8 94       	cli

00005e88 <__stop_program>:
    5e88:	ff cf       	rjmp	.-2      	; 0x5e88 <__stop_program>
