
node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000228  00800100  00005e70  00005f04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005e70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006fa  00800328  00800328  0000612c  2**0
                  ALLOC
  3 .stab         000018c0  00000000  00000000  0000612c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000152  00000000  00000000  000079ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000068c  00000000  00000000  00007cde  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004d16  00000000  00000000  0000836a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000d080  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000035b0  00000000  00000000  0000e406  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005c0  00000000  00000000  000119b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000e6f  00000000  00000000  00011f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003be4  00000000  00000000  00012de7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000198  00000000  00000000  000169cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__ctors_end>
       4:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
       8:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
       c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      10:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      14:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      18:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      1c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      20:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      24:	0c 94 76 03 	jmp	0x6ec	; 0x6ec <__vector_9>
      28:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      2c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      30:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      34:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      38:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      3c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      40:	0c 94 24 26 	jmp	0x4c48	; 0x4c48 <__vector_16>
      44:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      48:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      4c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      50:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      54:	0c 94 77 25 	jmp	0x4aee	; 0x4aee <__vector_21>
      58:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      5c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      60:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      64:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      68:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      6c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      70:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      74:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      78:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      7c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      80:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      84:	0c 94 a2 25 	jmp	0x4b44	; 0x4b44 <__vector_33>
      88:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      8c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      90:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__bad_interrupt>
      94:	69 1a       	sub	r6, r25
      96:	76 1a       	sub	r7, r22
      98:	d7 1a       	sub	r13, r23
      9a:	dd 1a       	sub	r13, r29
      9c:	66 1a       	sub	r6, r22
      9e:	66 1a       	sub	r6, r22
      a0:	66 1a       	sub	r6, r22
      a2:	66 1a       	sub	r6, r22
      a4:	66 1a       	sub	r6, r22
      a6:	66 1a       	sub	r6, r22
      a8:	70 1b       	sub	r23, r16
      aa:	75 1b       	sub	r23, r21
      ac:	77 1b       	sub	r23, r23
      ae:	84 1b       	sub	r24, r20
      b0:	9d 1b       	sub	r25, r29
      b2:	33 20       	and	r3, r3
      b4:	a3 20       	and	r10, r3
      b6:	19 21       	and	r17, r9
      b8:	6b 21       	and	r22, r11
      ba:	a6 21       	and	r26, r6
      bc:	e6 21       	and	r30, r6
      be:	2d 22       	and	r2, r29
      c0:	c2 22       	and	r12, r18
      c2:	51 23       	and	r21, r17
      c4:	2f 20       	and	r2, r15
      c6:	3b 24       	eor	r3, r11

000000c8 <__c.2172>:
      c8:	57 72 69 74 65 20 65 72 72 6f 72 0d 0a 00           Write error...

000000d6 <__c.2167>:
      d6:	42 20 25 64 00                                      B %d.

000000db <__c.2159>:
      db:	42 75 66 66 65 72 20 66 75 6c 6c 20 65 72 72 6f     Buffer full erro
      eb:	72 0a 00                                            r..

000000ee <__c.2116>:
      ee:	72 63 3d 25 64 0a 00                                rc=%d..

000000f5 <__c.2114>:
      f5:	4f 70 65 6e 69 6e 67 20 66 69 6c 65 20 25 73 0a     Opening file %s.
	...

00000106 <__c.2112>:
     106:	46 72 65 65 20 6c 6f 67 20 6e 72 20 25 64 0a 00     Free log nr %d..

00000116 <__c.2110>:
     116:	72 63 3d 25 64 0a 00                                rc=%d..

0000011d <__c.2108>:
     11d:	6f 70 65 6e 20 64 69 72 20 0a 00                    open dir ..

00000128 <__c.2106>:
     128:	72 63 3d 25 64 0a 00                                rc=%d..

0000012f <__c.2104>:
     12f:	49 6e 69 74 69 61 6c 69 7a 65 20 6c 6f 67 69 63     Initialize logic
     13f:	61 6c 20 64 72 69 63 65 20 30 0a 00                 al drice 0..

0000014b <__c.2102>:
     14b:	72 63 3d 25 64 0a 00                                rc=%d..

00000152 <__c.2100>:
     152:	74 65 73 74 32 20 25 64 20 25 64 20 25 64 20 25     test2 %d %d %d %
     162:	64 0a 00                                            d..

00000165 <__c.2098>:
     165:	74 65 73 74 20 25 64 20 25 64 20 25 64 20 25 64     test %d %d %d %d
     175:	0a 00                                               ..

00000177 <__c.2096>:
     177:	49 6e 69 74 69 61 6c 69 7a 65 20 64 69 73 6b 20     Initialize disk 
     187:	30 0a 00                                            0..

0000018a <__c.2094>:
     18a:	25 64 2d 25 64 2d 25 64 54 25 64 3a 25 64 3a 25     %d-%d-%dT%d:%d:%
     19a:	64 0a 00                                            d..

0000019d <__c.2092>:
     19d:	53 79 73 74 65 6d 20 73 74 61 72 74 65 74 0a 00     System startet..
	...

000001ae <__ctors_end>:
     1ae:	11 24       	eor	r1, r1
     1b0:	1f be       	out	0x3f, r1	; 63
     1b2:	cf ef       	ldi	r28, 0xFF	; 255
     1b4:	d0 e1       	ldi	r29, 0x10	; 16
     1b6:	de bf       	out	0x3e, r29	; 62
     1b8:	cd bf       	out	0x3d, r28	; 61

000001ba <__do_copy_data>:
     1ba:	13 e0       	ldi	r17, 0x03	; 3
     1bc:	a0 e0       	ldi	r26, 0x00	; 0
     1be:	b1 e0       	ldi	r27, 0x01	; 1
     1c0:	e0 e7       	ldi	r30, 0x70	; 112
     1c2:	fe e5       	ldi	r31, 0x5E	; 94
     1c4:	00 e0       	ldi	r16, 0x00	; 0
     1c6:	0b bf       	out	0x3b, r16	; 59
     1c8:	02 c0       	rjmp	.+4      	; 0x1ce <__do_copy_data+0x14>
     1ca:	07 90       	elpm	r0, Z+
     1cc:	0d 92       	st	X+, r0
     1ce:	a8 32       	cpi	r26, 0x28	; 40
     1d0:	b1 07       	cpc	r27, r17
     1d2:	d9 f7       	brne	.-10     	; 0x1ca <__do_copy_data+0x10>

000001d4 <__do_clear_bss>:
     1d4:	1a e0       	ldi	r17, 0x0A	; 10
     1d6:	a8 e2       	ldi	r26, 0x28	; 40
     1d8:	b3 e0       	ldi	r27, 0x03	; 3
     1da:	01 c0       	rjmp	.+2      	; 0x1de <.do_clear_bss_start>

000001dc <.do_clear_bss_loop>:
     1dc:	1d 92       	st	X+, r1

000001de <.do_clear_bss_start>:
     1de:	a2 32       	cpi	r26, 0x22	; 34
     1e0:	b1 07       	cpc	r27, r17
     1e2:	e1 f7       	brne	.-8      	; 0x1dc <.do_clear_bss_loop>
     1e4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <main>
     1e8:	0c 94 36 2f 	jmp	0x5e6c	; 0x5e6c <_exit>

000001ec <__bad_interrupt>:
     1ec:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001f0 <can>:
}


/* eksempel kode til at vise hvordan end besked modtaget fra can skrives til sdcard */
void can(FIL *file)
{
     1f0:	a0 e0       	ldi	r26, 0x00	; 0
     1f2:	b0 e0       	ldi	r27, 0x00	; 0
     1f4:	ee ef       	ldi	r30, 0xFE	; 254
     1f6:	f0 e0       	ldi	r31, 0x00	; 0
     1f8:	0c 94 aa 2e 	jmp	0x5d54	; 0x5d54 <__prologue_saves__+0x10>
     1fc:	6c 01       	movw	r12, r24
     1fe:	48 e0       	ldi	r20, 0x08	; 8
     200:	e4 2e       	mov	r14, r20
     202:	4a e0       	ldi	r20, 0x0A	; 10
     204:	f4 2e       	mov	r15, r20
     206:	04 ee       	ldi	r16, 0xE4	; 228
     208:	19 e0       	ldi	r17, 0x09	; 9
     20a:	c0 e0       	ldi	r28, 0x00	; 0
     20c:	d0 e0       	ldi	r29, 0x00	; 0
    int *e;

    for (j=0; j<num_of_response_mobs; j++){
        if (can_get_status(&response_msg[j]) == CAN_STATUS_COMPLETED){
            if (bufferindex >= data_buffer_num){
                xprintf(PSTR("Buffer full error\n"));
     20e:	3b ed       	ldi	r19, 0xDB	; 219
     210:	a3 2e       	mov	r10, r19
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	b3 2e       	mov	r11, r19
{
    U8 i,j;
    int *e;

    for (j=0; j<num_of_response_mobs; j++){
        if (can_get_status(&response_msg[j]) == CAN_STATUS_COMPLETED){
     216:	c7 01       	movw	r24, r14
     218:	0e 94 55 1f 	call	0x3eaa	; 0x3eaa <can_get_status>
     21c:	88 23       	and	r24, r24
     21e:	69 f5       	brne	.+90     	; 0x27a <can+0x8a>
            if (bufferindex >= data_buffer_num){
     220:	90 91 30 03 	lds	r25, 0x0330
     224:	92 30       	cpi	r25, 0x02	; 2
     226:	60 f0       	brcs	.+24     	; 0x240 <can+0x50>
                xprintf(PSTR("Buffer full error\n"));
     228:	00 d0       	rcall	.+0      	; 0x22a <can+0x3a>
     22a:	ad b7       	in	r26, 0x3d	; 61
     22c:	be b7       	in	r27, 0x3e	; 62
     22e:	12 96       	adiw	r26, 0x02	; 2
     230:	bc 92       	st	X, r11
     232:	ae 92       	st	-X, r10
     234:	11 97       	sbiw	r26, 0x01	; 1
     236:	0e 94 84 28 	call	0x5108	; 0x5108 <xprintf>
     23a:	0f 90       	pop	r0
     23c:	0f 90       	pop	r0
     23e:	1a c0       	rjmp	.+52     	; 0x274 <can+0x84>
     240:	de 01       	movw	r26, r28
     242:	23 e0       	ldi	r18, 0x03	; 3
     244:	aa 0f       	add	r26, r26
     246:	bb 1f       	adc	r27, r27
     248:	2a 95       	dec	r18
     24a:	e1 f7       	brne	.-8      	; 0x244 <can+0x54>
     24c:	a5 52       	subi	r26, 0x25	; 37
     24e:	b6 4f       	sbci	r27, 0xF6	; 246
     250:	e9 2f       	mov	r30, r25
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	83 e0       	ldi	r24, 0x03	; 3
     256:	ee 0f       	add	r30, r30
     258:	ff 1f       	adc	r31, r31
     25a:	8a 95       	dec	r24
     25c:	e1 f7       	brne	.-8      	; 0x256 <can+0x66>
     25e:	e8 50       	subi	r30, 0x08	; 8
     260:	f6 4f       	sbci	r31, 0xF6	; 246
            } else {
                for (i=0; i<9; i++) {
                        databuffer[bufferindex][i] = response_buffer[j][i];
     262:	8c 91       	ld	r24, X
     264:	81 93       	st	Z+, r24
                        response_buffer[j][i] = 0;
     266:	1d 92       	st	X+, r1
    for (j=0; j<num_of_response_mobs; j++){
        if (can_get_status(&response_msg[j]) == CAN_STATUS_COMPLETED){
            if (bufferindex >= data_buffer_num){
                xprintf(PSTR("Buffer full error\n"));
            } else {
                for (i=0; i<9; i++) {
     268:	a0 17       	cp	r26, r16
     26a:	b1 07       	cpc	r27, r17
     26c:	d1 f7       	brne	.-12     	; 0x262 <can+0x72>
                        databuffer[bufferindex][i] = response_buffer[j][i];
                        response_buffer[j][i] = 0;
                }
                bufferindex++;
     26e:	9f 5f       	subi	r25, 0xFF	; 255
     270:	90 93 30 03 	sts	0x0330, r25
            }
            can_data_mob_setup(i);
     274:	89 e0       	ldi	r24, 0x09	; 9
     276:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <can_data_mob_setup>
     27a:	21 96       	adiw	r28, 0x01	; 1
     27c:	ed e0       	ldi	r30, 0x0D	; 13
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	ee 0e       	add	r14, r30
     282:	ff 1e       	adc	r15, r31
     284:	08 5f       	subi	r16, 0xF8	; 248
     286:	1f 4f       	sbci	r17, 0xFF	; 255
void can(FIL *file)
{
    U8 i,j;
    int *e;

    for (j=0; j<num_of_response_mobs; j++){
     288:	c2 30       	cpi	r28, 0x02	; 2
     28a:	d1 05       	cpc	r29, r1
     28c:	21 f6       	brne	.-120    	; 0x216 <can+0x26>
     28e:	10 e0       	ldi	r17, 0x00	; 0
            can_data_mob_setup(i);
        }
    }

    for (i=0; i<bufferindex; i++) {         
        xprintf(PSTR("B %d"), i); 
     290:	c6 ed       	ldi	r28, 0xD6	; 214
     292:	d0 e0       	ldi	r29, 0x00	; 0
     294:	14 c0       	rjmp	.+40     	; 0x2be <can+0xce>
     296:	00 d0       	rcall	.+0      	; 0x298 <can+0xa8>
     298:	00 d0       	rcall	.+0      	; 0x29a <can+0xaa>
     29a:	ed b7       	in	r30, 0x3d	; 61
     29c:	fe b7       	in	r31, 0x3e	; 62
     29e:	31 96       	adiw	r30, 0x01	; 1
     2a0:	ad b7       	in	r26, 0x3d	; 61
     2a2:	be b7       	in	r27, 0x3e	; 62
     2a4:	12 96       	adiw	r26, 0x02	; 2
     2a6:	dc 93       	st	X, r29
     2a8:	ce 93       	st	-X, r28
     2aa:	11 97       	sbiw	r26, 0x01	; 1
     2ac:	12 83       	std	Z+2, r17	; 0x02
     2ae:	13 82       	std	Z+3, r1	; 0x03
     2b0:	0e 94 84 28 	call	0x5108	; 0x5108 <xprintf>
            }
            can_data_mob_setup(i);
        }
    }

    for (i=0; i<bufferindex; i++) {         
     2b4:	1f 5f       	subi	r17, 0xFF	; 255
     2b6:	0f 90       	pop	r0
     2b8:	0f 90       	pop	r0
     2ba:	0f 90       	pop	r0
     2bc:	0f 90       	pop	r0
     2be:	80 91 30 03 	lds	r24, 0x0330
     2c2:	18 17       	cp	r17, r24
     2c4:	40 f3       	brcs	.-48     	; 0x296 <can+0xa6>
        xprintf(PSTR(", Data6: %03d"), databuffer[i][5]);
	    xprintf(PSTR(", Data7: %03d"), databuffer[i][6]);                
    	xprintf(PSTR(", Data8: %03d"), databuffer[i][7]);
	    xprintf(PSTR("\r\n"));*/
    }
    if (f_write(file, databuffer, 9*bufferindex, e) != 0)
     2c6:	49 e0       	ldi	r20, 0x09	; 9
     2c8:	84 9f       	mul	r24, r20
     2ca:	a0 01       	movw	r20, r0
     2cc:	11 24       	eor	r1, r1
     2ce:	c6 01       	movw	r24, r12
     2d0:	68 ef       	ldi	r22, 0xF8	; 248
     2d2:	79 e0       	ldi	r23, 0x09	; 9
     2d4:	20 e0       	ldi	r18, 0x00	; 0
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <f_write>
     2dc:	89 2b       	or	r24, r25
     2de:	59 f0       	breq	.+22     	; 0x2f6 <can+0x106>
            xprintf(PSTR("Write error\r\n"));
     2e0:	00 d0       	rcall	.+0      	; 0x2e2 <can+0xf2>
     2e2:	88 ec       	ldi	r24, 0xC8	; 200
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	ed b7       	in	r30, 0x3d	; 61
     2e8:	fe b7       	in	r31, 0x3e	; 62
     2ea:	92 83       	std	Z+2, r25	; 0x02
     2ec:	81 83       	std	Z+1, r24	; 0x01
     2ee:	0e 94 84 28 	call	0x5108	; 0x5108 <xprintf>
     2f2:	0f 90       	pop	r0
     2f4:	0f 90       	pop	r0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2f6:	8c e5       	ldi	r24, 0x5C	; 92
     2f8:	92 e1       	ldi	r25, 0x12	; 18
     2fa:	01 97       	sbiw	r24, 0x01	; 1
     2fc:	f1 f7       	brne	.-4      	; 0x2fa <can+0x10a>
    _delay_us(1700);
    bufferindex = 0;
     2fe:	10 92 30 03 	sts	0x0330, r1
}
     302:	cd b7       	in	r28, 0x3d	; 61
     304:	de b7       	in	r29, 0x3e	; 62
     306:	ea e0       	ldi	r30, 0x0A	; 10
     308:	0c 94 c6 2e 	jmp	0x5d8c	; 0x5d8c <__epilogue_restores__+0x10>

0000030c <get_fattime>:
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */
/* This is not required in read-only configuration.        */

DWORD get_fattime ()
{
     30c:	a8 e0       	ldi	r26, 0x08	; 8
     30e:	b0 e0       	ldi	r27, 0x00	; 0
     310:	ec e8       	ldi	r30, 0x8C	; 140
     312:	f1 e0       	ldi	r31, 0x01	; 1
     314:	0c 94 b2 2e 	jmp	0x5d64	; 0x5d64 <__prologue_saves__+0x20>
	RTC rtc;

	/* Get local time */
	rtc_gettime(&rtc);
     318:	ce 01       	movw	r24, r28
     31a:	01 96       	adiw	r24, 0x01	; 1
     31c:	0e 94 30 1c 	call	0x3860	; 0x3860 <rtc_gettime>
     320:	2c 81       	ldd	r18, Y+4	; 0x04
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	40 e0       	ldi	r20, 0x00	; 0
     326:	50 e0       	ldi	r21, 0x00	; 0
     328:	a9 01       	movw	r20, r18
     32a:	33 27       	eor	r19, r19
     32c:	22 27       	eor	r18, r18
     32e:	8b 81       	ldd	r24, Y+3	; 0x03
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	a0 e0       	ldi	r26, 0x00	; 0
     334:	b0 e0       	ldi	r27, 0x00	; 0
     336:	f5 e1       	ldi	r31, 0x15	; 21
     338:	88 0f       	add	r24, r24
     33a:	99 1f       	adc	r25, r25
     33c:	aa 1f       	adc	r26, r26
     33e:	bb 1f       	adc	r27, r27
     340:	fa 95       	dec	r31
     342:	d1 f7       	brne	.-12     	; 0x338 <get_fattime+0x2c>
     344:	28 2b       	or	r18, r24
     346:	39 2b       	or	r19, r25
     348:	4a 2b       	or	r20, r26
     34a:	5b 2b       	or	r21, r27
     34c:	8e 81       	ldd	r24, Y+6	; 0x06
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	a0 e0       	ldi	r26, 0x00	; 0
     352:	b0 e0       	ldi	r27, 0x00	; 0
     354:	eb e0       	ldi	r30, 0x0B	; 11
     356:	88 0f       	add	r24, r24
     358:	99 1f       	adc	r25, r25
     35a:	aa 1f       	adc	r26, r26
     35c:	bb 1f       	adc	r27, r27
     35e:	ea 95       	dec	r30
     360:	d1 f7       	brne	.-12     	; 0x356 <get_fattime+0x4a>
     362:	28 2b       	or	r18, r24
     364:	39 2b       	or	r19, r25
     366:	4a 2b       	or	r20, r26
     368:	5b 2b       	or	r21, r27
     36a:	8f 81       	ldd	r24, Y+7	; 0x07
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	a0 e0       	ldi	r26, 0x00	; 0
     370:	b0 e0       	ldi	r27, 0x00	; 0
     372:	75 e0       	ldi	r23, 0x05	; 5
     374:	88 0f       	add	r24, r24
     376:	99 1f       	adc	r25, r25
     378:	aa 1f       	adc	r26, r26
     37a:	bb 1f       	adc	r27, r27
     37c:	7a 95       	dec	r23
     37e:	d1 f7       	brne	.-12     	; 0x374 <get_fattime+0x68>
     380:	28 2b       	or	r18, r24
     382:	39 2b       	or	r19, r25
     384:	4a 2b       	or	r20, r26
     386:	5b 2b       	or	r21, r27
     388:	88 85       	ldd	r24, Y+8	; 0x08
     38a:	86 95       	lsr	r24
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	a0 e0       	ldi	r26, 0x00	; 0
     390:	b0 e0       	ldi	r27, 0x00	; 0
     392:	28 2b       	or	r18, r24
     394:	39 2b       	or	r19, r25
     396:	4a 2b       	or	r20, r26
     398:	5b 2b       	or	r21, r27
     39a:	89 81       	ldd	r24, Y+1	; 0x01
     39c:	9a 81       	ldd	r25, Y+2	; 0x02
     39e:	8c 5b       	subi	r24, 0xBC	; 188
     3a0:	97 40       	sbci	r25, 0x07	; 7
     3a2:	a0 e0       	ldi	r26, 0x00	; 0
     3a4:	b0 e0       	ldi	r27, 0x00	; 0
     3a6:	69 e1       	ldi	r22, 0x19	; 25
     3a8:	88 0f       	add	r24, r24
     3aa:	99 1f       	adc	r25, r25
     3ac:	aa 1f       	adc	r26, r26
     3ae:	bb 1f       	adc	r27, r27
     3b0:	6a 95       	dec	r22
     3b2:	d1 f7       	brne	.-12     	; 0x3a8 <get_fattime+0x9c>
     3b4:	28 2b       	or	r18, r24
     3b6:	39 2b       	or	r19, r25
     3b8:	4a 2b       	or	r20, r26
     3ba:	5b 2b       	or	r21, r27
			| ((DWORD)rtc.month << 21)
			| ((DWORD)rtc.mday << 16)
			| ((DWORD)rtc.hour << 11)
			| ((DWORD)rtc.min << 5)
			| ((DWORD)rtc.sec >> 1);
}
     3bc:	b9 01       	movw	r22, r18
     3be:	ca 01       	movw	r24, r20
     3c0:	28 96       	adiw	r28, 0x08	; 8
     3c2:	e2 e0       	ldi	r30, 0x02	; 2
     3c4:	0c 94 ce 2e 	jmp	0x5d9c	; 0x5d9c <__epilogue_restores__+0x20>

000003c8 <main>:
}

/*-----------------------------------------------------------------------*/
/* Main                                                                  */
int main (void)
{
     3c8:	ad e5       	ldi	r26, 0x5D	; 93
     3ca:	b0 e0       	ldi	r27, 0x00	; 0
     3cc:	ea ee       	ldi	r30, 0xEA	; 234
     3ce:	f1 e0       	ldi	r31, 0x01	; 1
     3d0:	0c 94 ae 2e 	jmp	0x5d5c	; 0x5d5c <__prologue_saves__+0x18>
	int i;
	// Recieve buffer
	U8 rpm_response_buffer[8];
	st_cmd_t rpm_msg;
	
	TWI_init();	/* Init TWI interface */
     3d4:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <TWI_init>

static
void IoInit ()
{
	/* Timer2 used for filesystem functions */
	OCR2A = 90-1;      // Timer2: 100Hz interval (OC2)
     3d8:	89 e5       	ldi	r24, 0x59	; 89
     3da:	80 93 b3 00 	sts	0x00B3, r24
	TCCR2A = 0b00001101;
     3de:	8d e0       	ldi	r24, 0x0D	; 13
     3e0:	80 93 b0 00 	sts	0x00B0, r24
	TIMSK2 = 0b00000010;   // Enable TC2.oc interrupt
     3e4:	82 e0       	ldi	r24, 0x02	; 2
     3e6:	80 93 70 00 	sts	0x0070, r24

	/* Timer0 bruges til at sende data req til ECU */
	OCR0A = 100;			// Sæt start værdi
     3ea:	84 e6       	ldi	r24, 0x64	; 100
     3ec:	87 bd       	out	0x27, r24	; 39
	TCCR0A |= 1<<CS02 | 1<<CS00;    // prescaler til 1024
     3ee:	84 b5       	in	r24, 0x24	; 36
     3f0:	85 60       	ori	r24, 0x05	; 5
     3f2:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= 1<<OCIE0A; 		// Slår timer compare match interrupt til
     3f4:	80 91 6e 00 	lds	r24, 0x006E
     3f8:	82 60       	ori	r24, 0x02	; 2
     3fa:	80 93 6e 00 	sts	0x006E, r24

	rtc_init();         // Initialize RTC
     3fe:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <rtc_init>
	can_init(0);		/* Initialize can controllor */
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	0e 94 eb 24 	call	0x49d6	; 0x49d6 <can_init>
	uart_init();		/* Initialize uart 0 and 1 for ecu and xbee */
     408:	0e 94 2e 04 	call	0x85c	; 0x85c <uart_init>
	
	TWI_init();	/* Init TWI interface */
	IoInit();

	/* Join xitoa module to uart module */
	xfunc_out = (void (*)(char))uart_put;		/* xprintf writes to uart connected to the xbee */
     40c:	8d e5       	ldi	r24, 0x5D	; 93
     40e:	94 e0       	ldi	r25, 0x04	; 4
     410:	90 93 3c 03 	sts	0x033C, r25
     414:	80 93 3b 03 	sts	0x033B, r24
     418:	88 e8       	ldi	r24, 0x88	; 136
     41a:	93 e1       	ldi	r25, 0x13	; 19
     41c:	24 e1       	ldi	r18, 0x14	; 20
     41e:	31 e0       	ldi	r19, 0x01	; 1
     420:	f9 01       	movw	r30, r18
     422:	31 97       	sbiw	r30, 0x01	; 1
     424:	f1 f7       	brne	.-4      	; 0x422 <main+0x5a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     426:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     428:	d9 f7       	brne	.-10     	; 0x420 <main+0x58>

	_delay_ms(500);
	xprintf(PSTR("System startet\n"));
     42a:	00 d0       	rcall	.+0      	; 0x42c <main+0x64>
     42c:	8d e9       	ldi	r24, 0x9D	; 157
     42e:	91 e0       	ldi	r25, 0x01	; 1
     430:	ad b7       	in	r26, 0x3d	; 61
     432:	be b7       	in	r27, 0x3e	; 62
     434:	12 96       	adiw	r26, 0x02	; 2
     436:	9c 93       	st	X, r25
     438:	8e 93       	st	-X, r24
     43a:	11 97       	sbiw	r26, 0x01	; 1
     43c:	0e 94 84 28 	call	0x5108	; 0x5108 <xprintf>

	res = rtc_gettime(&rtc);
     440:	0f 90       	pop	r0
     442:	0f 90       	pop	r0
     444:	ce 01       	movw	r24, r28
     446:	01 96       	adiw	r24, 0x01	; 1
     448:	0e 94 30 1c 	call	0x3860	; 0x3860 <rtc_gettime>
	xprintf(PSTR("%d-%d-%dT%d:%d:%d\n"), rtc.year, rtc.month, rtc.mday, rtc.hour, rtc.min, rtc.sec);
     44c:	ed b7       	in	r30, 0x3d	; 61
     44e:	fe b7       	in	r31, 0x3e	; 62
     450:	3e 97       	sbiw	r30, 0x0e	; 14
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	f8 94       	cli
     456:	fe bf       	out	0x3e, r31	; 62
     458:	0f be       	out	0x3f, r0	; 63
     45a:	ed bf       	out	0x3d, r30	; 61
     45c:	31 96       	adiw	r30, 0x01	; 1
     45e:	8a e8       	ldi	r24, 0x8A	; 138
     460:	91 e0       	ldi	r25, 0x01	; 1
     462:	ad b7       	in	r26, 0x3d	; 61
     464:	be b7       	in	r27, 0x3e	; 62
     466:	12 96       	adiw	r26, 0x02	; 2
     468:	9c 93       	st	X, r25
     46a:	8e 93       	st	-X, r24
     46c:	11 97       	sbiw	r26, 0x01	; 1
     46e:	89 81       	ldd	r24, Y+1	; 0x01
     470:	9a 81       	ldd	r25, Y+2	; 0x02
     472:	93 83       	std	Z+3, r25	; 0x03
     474:	82 83       	std	Z+2, r24	; 0x02
     476:	8b 81       	ldd	r24, Y+3	; 0x03
     478:	84 83       	std	Z+4, r24	; 0x04
     47a:	15 82       	std	Z+5, r1	; 0x05
     47c:	8c 81       	ldd	r24, Y+4	; 0x04
     47e:	86 83       	std	Z+6, r24	; 0x06
     480:	17 82       	std	Z+7, r1	; 0x07
     482:	8e 81       	ldd	r24, Y+6	; 0x06
     484:	80 87       	std	Z+8, r24	; 0x08
     486:	11 86       	std	Z+9, r1	; 0x09
     488:	8f 81       	ldd	r24, Y+7	; 0x07
     48a:	82 87       	std	Z+10, r24	; 0x0a
     48c:	13 86       	std	Z+11, r1	; 0x0b
     48e:	88 85       	ldd	r24, Y+8	; 0x08
     490:	84 87       	std	Z+12, r24	; 0x0c
     492:	15 86       	std	Z+13, r1	; 0x0d
     494:	0e 94 84 28 	call	0x5108	; 0x5108 <xprintf>

	xprintf(PSTR("Initialize disk 0\n"));
     498:	ed b7       	in	r30, 0x3d	; 61
     49a:	fe b7       	in	r31, 0x3e	; 62
     49c:	3c 96       	adiw	r30, 0x0c	; 12
     49e:	0f b6       	in	r0, 0x3f	; 63
     4a0:	f8 94       	cli
     4a2:	fe bf       	out	0x3e, r31	; 62
     4a4:	0f be       	out	0x3f, r0	; 63
     4a6:	ed bf       	out	0x3d, r30	; 61
     4a8:	87 e7       	ldi	r24, 0x77	; 119
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	92 83       	std	Z+2, r25	; 0x02
     4ae:	81 83       	std	Z+1, r24	; 0x01
     4b0:	0e 94 84 28 	call	0x5108	; 0x5108 <xprintf>
	xprintf(PSTR("test %d %d %d %d\n"), ECUObjects[0].length, ECUObjects[0].id, ECUObjects[1].length, ECUObjects[1].id);
     4b4:	8d b7       	in	r24, 0x3d	; 61
     4b6:	9e b7       	in	r25, 0x3e	; 62
     4b8:	08 97       	sbiw	r24, 0x08	; 8
     4ba:	0f b6       	in	r0, 0x3f	; 63
     4bc:	f8 94       	cli
     4be:	9e bf       	out	0x3e, r25	; 62
     4c0:	0f be       	out	0x3f, r0	; 63
     4c2:	8d bf       	out	0x3d, r24	; 61
     4c4:	ed b7       	in	r30, 0x3d	; 61
     4c6:	fe b7       	in	r31, 0x3e	; 62
     4c8:	31 96       	adiw	r30, 0x01	; 1
     4ca:	85 e6       	ldi	r24, 0x65	; 101
     4cc:	91 e0       	ldi	r25, 0x01	; 1
     4ce:	ad b7       	in	r26, 0x3d	; 61
     4d0:	be b7       	in	r27, 0x3e	; 62
     4d2:	12 96       	adiw	r26, 0x02	; 2
     4d4:	9c 93       	st	X, r25
     4d6:	8e 93       	st	-X, r24
     4d8:	11 97       	sbiw	r26, 0x01	; 1
     4da:	22 e0       	ldi	r18, 0x02	; 2
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	33 83       	std	Z+3, r19	; 0x03
     4e0:	22 83       	std	Z+2, r18	; 0x02
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	95 83       	std	Z+5, r25	; 0x05
     4e8:	84 83       	std	Z+4, r24	; 0x04
     4ea:	37 83       	std	Z+7, r19	; 0x07
     4ec:	26 83       	std	Z+6, r18	; 0x06
     4ee:	31 87       	std	Z+9, r19	; 0x09
     4f0:	20 87       	std	Z+8, r18	; 0x08
     4f2:	0e 94 84 28 	call	0x5108	; 0x5108 <xprintf>
	xprintf(PSTR("test2 %d %d %d %d\n"), valueObjects[ECUObjects[0].id].length, valueObjects[ECUObjects[0].id].action, valueObjects[ECUObjects[1].id].length, valueObjects[ECUObjects[1].id].action);
     4f6:	ed b7       	in	r30, 0x3d	; 61
     4f8:	fe b7       	in	r31, 0x3e	; 62
     4fa:	31 96       	adiw	r30, 0x01	; 1
     4fc:	82 e5       	ldi	r24, 0x52	; 82
     4fe:	91 e0       	ldi	r25, 0x01	; 1
     500:	ad b7       	in	r26, 0x3d	; 61
     502:	be b7       	in	r27, 0x3e	; 62
     504:	12 96       	adiw	r26, 0x02	; 2
     506:	9c 93       	st	X, r25
     508:	8e 93       	st	-X, r24
     50a:	11 97       	sbiw	r26, 0x01	; 1
     50c:	80 e1       	ldi	r24, 0x10	; 16
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	93 83       	std	Z+3, r25	; 0x03
     512:	82 83       	std	Z+2, r24	; 0x02
     514:	15 82       	std	Z+5, r1	; 0x05
     516:	14 82       	std	Z+4, r1	; 0x04
     518:	97 83       	std	Z+7, r25	; 0x07
     51a:	86 83       	std	Z+6, r24	; 0x06
     51c:	11 86       	std	Z+9, r1	; 0x09
     51e:	10 86       	std	Z+8, r1	; 0x08
     520:	0e 94 84 28 	call	0x5108	; 0x5108 <xprintf>
	xprintf(PSTR("rc=%d\n"), (WORD)disk_initialize(0));		/* initialize filesystem */
     524:	ed b7       	in	r30, 0x3d	; 61
     526:	fe b7       	in	r31, 0x3e	; 62
     528:	3a 96       	adiw	r30, 0x0a	; 10
     52a:	0f b6       	in	r0, 0x3f	; 63
     52c:	f8 94       	cli
     52e:	fe bf       	out	0x3e, r31	; 62
     530:	0f be       	out	0x3f, r0	; 63
     532:	ed bf       	out	0x3d, r30	; 61
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	0e 94 8b 18 	call	0x3116	; 0x3116 <disk_initialize>
     53a:	00 d0       	rcall	.+0      	; 0x53c <main+0x174>
     53c:	00 d0       	rcall	.+0      	; 0x53e <main+0x176>
     53e:	ed b7       	in	r30, 0x3d	; 61
     540:	fe b7       	in	r31, 0x3e	; 62
     542:	31 96       	adiw	r30, 0x01	; 1
     544:	2b e4       	ldi	r18, 0x4B	; 75
     546:	31 e0       	ldi	r19, 0x01	; 1
     548:	ad b7       	in	r26, 0x3d	; 61
     54a:	be b7       	in	r27, 0x3e	; 62
     54c:	12 96       	adiw	r26, 0x02	; 2
     54e:	3c 93       	st	X, r19
     550:	2e 93       	st	-X, r18
     552:	11 97       	sbiw	r26, 0x01	; 1
     554:	82 83       	std	Z+2, r24	; 0x02
     556:	13 82       	std	Z+3, r1	; 0x03
     558:	0e 94 84 28 	call	0x5108	; 0x5108 <xprintf>
	xprintf(PSTR("Initialize logical drice 0\n"));	
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	8f e2       	ldi	r24, 0x2F	; 47
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	ed b7       	in	r30, 0x3d	; 61
     566:	fe b7       	in	r31, 0x3e	; 62
     568:	92 83       	std	Z+2, r25	; 0x02
     56a:	81 83       	std	Z+1, r24	; 0x01
     56c:	0e 94 84 28 	call	0x5108	; 0x5108 <xprintf>
	xprintf(PSTR("rc=%d\n"), (WORD)f_mount(0, &Fatfs[0]));		/* mount filesystem */
     570:	0f 90       	pop	r0
     572:	0f 90       	pop	r0
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	6d e3       	ldi	r22, 0x3D	; 61
     578:	73 e0       	ldi	r23, 0x03	; 3
     57a:	0e 94 c2 04 	call	0x984	; 0x984 <f_mount>
     57e:	00 d0       	rcall	.+0      	; 0x580 <main+0x1b8>
     580:	00 d0       	rcall	.+0      	; 0x582 <main+0x1ba>
     582:	28 e2       	ldi	r18, 0x28	; 40
     584:	31 e0       	ldi	r19, 0x01	; 1
     586:	ad b7       	in	r26, 0x3d	; 61
     588:	be b7       	in	r27, 0x3e	; 62
     58a:	12 96       	adiw	r26, 0x02	; 2
     58c:	3c 93       	st	X, r19
     58e:	2e 93       	st	-X, r18
     590:	11 97       	sbiw	r26, 0x01	; 1
     592:	14 96       	adiw	r26, 0x04	; 4
     594:	9c 93       	st	X, r25
     596:	8e 93       	st	-X, r24
     598:	13 97       	sbiw	r26, 0x03	; 3
     59a:	0e 94 84 28 	call	0x5108	; 0x5108 <xprintf>
	xprintf(PSTR("open dir \n")); 
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	8d e1       	ldi	r24, 0x1D	; 29
     5a4:	91 e0       	ldi	r25, 0x01	; 1
     5a6:	ed b7       	in	r30, 0x3d	; 61
     5a8:	fe b7       	in	r31, 0x3e	; 62
     5aa:	92 83       	std	Z+2, r25	; 0x02
     5ac:	81 83       	std	Z+1, r24	; 0x01
     5ae:	0e 94 84 28 	call	0x5108	; 0x5108 <xprintf>
	xprintf(PSTR("rc=%d\n"), f_opendir(&dir, "0:"));	/* open root dir on fs */
     5b2:	0f 90       	pop	r0
     5b4:	0f 90       	pop	r0
     5b6:	8e 01       	movw	r16, r28
     5b8:	08 5d       	subi	r16, 0xD8	; 216
     5ba:	1f 4f       	sbci	r17, 0xFF	; 255
     5bc:	c8 01       	movw	r24, r16
     5be:	60 e0       	ldi	r22, 0x00	; 0
     5c0:	71 e0       	ldi	r23, 0x01	; 1
     5c2:	0e 94 d7 14 	call	0x29ae	; 0x29ae <f_opendir>
     5c6:	00 d0       	rcall	.+0      	; 0x5c8 <main+0x200>
     5c8:	00 d0       	rcall	.+0      	; 0x5ca <main+0x202>
     5ca:	26 e1       	ldi	r18, 0x16	; 22
     5cc:	31 e0       	ldi	r19, 0x01	; 1
     5ce:	ad b7       	in	r26, 0x3d	; 61
     5d0:	be b7       	in	r27, 0x3e	; 62
     5d2:	12 96       	adiw	r26, 0x02	; 2
     5d4:	3c 93       	st	X, r19
     5d6:	2e 93       	st	-X, r18
     5d8:	11 97       	sbiw	r26, 0x01	; 1
     5da:	14 96       	adiw	r26, 0x04	; 4
     5dc:	9c 93       	st	X, r25
     5de:	8e 93       	st	-X, r24
     5e0:	13 97       	sbiw	r26, 0x03	; 3
     5e2:	0e 94 84 28 	call	0x5108	; 0x5108 <xprintf>
	freelognumber = get_free_log_number(&dir);		/* Get lowest free log number */
     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	c8 01       	movw	r24, r16
     5f0:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <get_free_log_number>
     5f4:	7c 01       	movw	r14, r24
	xprintf(PSTR("Free log nr %d\n"), freelognumber);
     5f6:	00 d0       	rcall	.+0      	; 0x5f8 <main+0x230>
     5f8:	00 d0       	rcall	.+0      	; 0x5fa <main+0x232>
     5fa:	86 e0       	ldi	r24, 0x06	; 6
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	ed b7       	in	r30, 0x3d	; 61
     600:	fe b7       	in	r31, 0x3e	; 62
     602:	92 83       	std	Z+2, r25	; 0x02
     604:	81 83       	std	Z+1, r24	; 0x01
     606:	f4 82       	std	Z+4, r15	; 0x04
     608:	e3 82       	std	Z+3, r14	; 0x03
     60a:	0e 94 84 28 	call	0x5108	; 0x5108 <xprintf>
	itoa(freelognumber, filename, 10);			/* Convert to string for use in f_open() */
     60e:	0f 90       	pop	r0
     610:	0f 90       	pop	r0
     612:	0f 90       	pop	r0
     614:	0f 90       	pop	r0
     616:	8e 01       	movw	r16, r28
     618:	0f 5e       	subi	r16, 0xEF	; 239
     61a:	1f 4f       	sbci	r17, 0xFF	; 255
     61c:	c7 01       	movw	r24, r14
     61e:	b8 01       	movw	r22, r16
     620:	4a e0       	ldi	r20, 0x0A	; 10
     622:	50 e0       	ldi	r21, 0x00	; 0
     624:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <itoa>
	xprintf(PSTR("Opening file %s\n"), filename);
     628:	00 d0       	rcall	.+0      	; 0x62a <main+0x262>
     62a:	00 d0       	rcall	.+0      	; 0x62c <main+0x264>
     62c:	85 ef       	ldi	r24, 0xF5	; 245
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	ad b7       	in	r26, 0x3d	; 61
     632:	be b7       	in	r27, 0x3e	; 62
     634:	12 96       	adiw	r26, 0x02	; 2
     636:	9c 93       	st	X, r25
     638:	8e 93       	st	-X, r24
     63a:	11 97       	sbiw	r26, 0x01	; 1
     63c:	14 96       	adiw	r26, 0x04	; 4
     63e:	1c 93       	st	X, r17
     640:	0e 93       	st	-X, r16
     642:	13 97       	sbiw	r26, 0x03	; 3
     644:	0e 94 84 28 	call	0x5108	; 0x5108 <xprintf>
	xprintf(PSTR("rc=%d\n"), (WORD)f_open(&file1, filename, FA_CREATE_NEW | FA_WRITE));	/* Create new logfile for writing */
     648:	0f 90       	pop	r0
     64a:	0f 90       	pop	r0
     64c:	0f 90       	pop	r0
     64e:	0f 90       	pop	r0
     650:	be e3       	ldi	r27, 0x3E	; 62
     652:	eb 2e       	mov	r14, r27
     654:	f1 2c       	mov	r15, r1
     656:	ec 0e       	add	r14, r28
     658:	fd 1e       	adc	r15, r29
     65a:	c7 01       	movw	r24, r14
     65c:	b8 01       	movw	r22, r16
     65e:	46 e0       	ldi	r20, 0x06	; 6
     660:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <f_open>
     664:	00 d0       	rcall	.+0      	; 0x666 <main+0x29e>
     666:	00 d0       	rcall	.+0      	; 0x668 <main+0x2a0>
     668:	2e ee       	ldi	r18, 0xEE	; 238
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	ed b7       	in	r30, 0x3d	; 61
     66e:	fe b7       	in	r31, 0x3e	; 62
     670:	32 83       	std	Z+2, r19	; 0x02
     672:	21 83       	std	Z+1, r18	; 0x01
     674:	94 83       	std	Z+4, r25	; 0x04
     676:	83 83       	std	Z+3, r24	; 0x03
     678:	0e 94 84 28 	call	0x5108	; 0x5108 <xprintf>
	f_sync(&file1);			/* Sync filesystem to write changes to disk */
     67c:	0f 90       	pop	r0
     67e:	0f 90       	pop	r0
     680:	0f 90       	pop	r0
     682:	0f 90       	pop	r0
     684:	c7 01       	movw	r24, r14
     686:	0e 94 54 12 	call	0x24a8	; 0x24a8 <f_sync>
     68a:	80 e1       	ldi	r24, 0x10	; 16
     68c:	97 e2       	ldi	r25, 0x27	; 39
     68e:	24 e1       	ldi	r18, 0x14	; 20
     690:	31 e0       	ldi	r19, 0x01	; 1
     692:	f9 01       	movw	r30, r18
     694:	31 97       	sbiw	r30, 0x01	; 1
     696:	f1 f7       	brne	.-4      	; 0x694 <main+0x2cc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     698:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     69a:	d9 f7       	brne	.-10     	; 0x692 <main+0x2ca>
	_delay_ms(1000);

	/*
	 *	Kode til hurtig test af can 
	 */
	rpm_msg.pt_data = rpm_response_buffer;
     69c:	ce 01       	movw	r24, r28
     69e:	09 96       	adiw	r24, 0x09	; 9
     6a0:	9c a3       	std	Y+36, r25	; 0x24
     6a2:	8b a3       	std	Y+35, r24	; 0x23
	rpm_msg.status = 0;
     6a4:	1d a2       	std	Y+37, r1	; 0x25

	can_update_rx_msg(&rpm_msg, rpm_msgid, 8);
     6a6:	ce 01       	movw	r24, r28
     6a8:	4b 96       	adiw	r24, 0x1b	; 27
     6aa:	65 e8       	ldi	r22, 0x85	; 133
     6ac:	48 e0       	ldi	r20, 0x08	; 8
     6ae:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <can_update_rx_msg>

	sei();				/* Enable interrupt */
     6b2:	78 94       	sei


	QUEUE_INIT(my_q);
     6b4:	10 92 8c 05 	sts	0x058C, r1
     6b8:	10 92 8b 05 	sts	0x058B, r1
     6bc:	10 92 8a 05 	sts	0x058A, r1
     6c0:	10 92 89 05 	sts	0x0589, r1
     6c4:	10 92 8f 05 	sts	0x058F, r1
     6c8:	8d e3       	ldi	r24, 0x3D	; 61
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	90 93 8e 05 	sts	0x058E, r25
     6d0:	80 93 8d 05 	sts	0x058D, r24
     6d4:	04 e1       	ldi	r16, 0x14	; 20
     6d6:	11 e0       	ldi	r17, 0x01	; 1

	while(1) {
		ecu_data_handler();
     6d8:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <ecu_data_handler>
     6dc:	80 e5       	ldi	r24, 0x50	; 80
     6de:	93 ec       	ldi	r25, 0xC3	; 195
     6e0:	f8 01       	movw	r30, r16
     6e2:	31 97       	sbiw	r30, 0x01	; 1
     6e4:	f1 f7       	brne	.-4      	; 0x6e2 <main+0x31a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6e6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6e8:	d9 f7       	brne	.-10     	; 0x6e0 <main+0x318>
     6ea:	f6 cf       	rjmp	.-20     	; 0x6d8 <main+0x310>

000006ec <__vector_9>:
/*---------------------------------------------------------*/
/* 100Hz timer interrupt generated by OC2                  */
/*---------------------------------------------------------*/

ISR(TIMER2_COMP_vect)
{
     6ec:	1f 92       	push	r1
     6ee:	0f 92       	push	r0
     6f0:	0f b6       	in	r0, 0x3f	; 63
     6f2:	0f 92       	push	r0
     6f4:	0b b6       	in	r0, 0x3b	; 59
     6f6:	0f 92       	push	r0
     6f8:	11 24       	eor	r1, r1
     6fa:	2f 93       	push	r18
     6fc:	3f 93       	push	r19
     6fe:	4f 93       	push	r20
     700:	5f 93       	push	r21
     702:	6f 93       	push	r22
     704:	7f 93       	push	r23
     706:	8f 93       	push	r24
     708:	9f 93       	push	r25
     70a:	af 93       	push	r26
     70c:	bf 93       	push	r27
     70e:	ef 93       	push	r30
     710:	ff 93       	push	r31
	Timer++;			/* Performance counter for this module */
     712:	80 91 cd 05 	lds	r24, 0x05CD
     716:	90 91 ce 05 	lds	r25, 0x05CE
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	90 93 ce 05 	sts	0x05CE, r25
     720:	80 93 cd 05 	sts	0x05CD, r24
	disk_timerproc();	/* Drive timer procedure of low level disk I/O module */
     724:	0e 94 c6 1b 	call	0x378c	; 0x378c <disk_timerproc>
}
     728:	ff 91       	pop	r31
     72a:	ef 91       	pop	r30
     72c:	bf 91       	pop	r27
     72e:	af 91       	pop	r26
     730:	9f 91       	pop	r25
     732:	8f 91       	pop	r24
     734:	7f 91       	pop	r23
     736:	6f 91       	pop	r22
     738:	5f 91       	pop	r21
     73a:	4f 91       	pop	r20
     73c:	3f 91       	pop	r19
     73e:	2f 91       	pop	r18
     740:	0f 90       	pop	r0
     742:	0b be       	out	0x3b, r0	; 59
     744:	0f 90       	pop	r0
     746:	0f be       	out	0x3f, r0	; 63
     748:	0f 90       	pop	r0
     74a:	1f 90       	pop	r1
     74c:	18 95       	reti

0000074e <USART0_Transmit>:
#include <avr/interrupt.h>
#include "config.h"
#include "uart.h"

void USART0_Transmit( unsigned char txData )
{
     74e:	98 2f       	mov	r25, r24
   /* Wait for empty transmit buffer */
   while ( !( UCSR0A & (1<<UDRE0)) );
     750:	80 91 c0 00 	lds	r24, 0x00C0
     754:	85 ff       	sbrs	r24, 5
     756:	fc cf       	rjmp	.-8      	; 0x750 <USART0_Transmit+0x2>
   /* Put data into buffer, sends the data */
   UDR0 = txData;
     758:	90 93 c6 00 	sts	0x00C6, r25
}
     75c:	08 95       	ret

0000075e <USART1_Transmit>:

void USART1_Transmit( unsigned char txData )
{
     75e:	98 2f       	mov	r25, r24
   /* Wait for empty transmit buffer */
   while ( !( UCSR1A & (1<<UDRE1)) );
     760:	80 91 c8 00 	lds	r24, 0x00C8
     764:	85 ff       	sbrs	r24, 5
     766:	fc cf       	rjmp	.-8      	; 0x760 <USART1_Transmit+0x2>
   /* Put data into buffer, sends the data */
   UDR1 = txData;
     768:	90 93 ce 00 	sts	0x00CE, r25
}
     76c:	08 95       	ret

0000076e <USART_set_baud_rate>:

void USART_set_baud_rate(double baudrate0, double baudrate1)
{
     76e:	6f 92       	push	r6
     770:	7f 92       	push	r7
     772:	8f 92       	push	r8
     774:	9f 92       	push	r9
     776:	af 92       	push	r10
     778:	bf 92       	push	r11
     77a:	cf 92       	push	r12
     77c:	df 92       	push	r13
     77e:	ef 92       	push	r14
     780:	ff 92       	push	r15
     782:	0f 93       	push	r16
     784:	1f 93       	push	r17
     786:	5b 01       	movw	r10, r22
     788:	6c 01       	movw	r12, r24
     78a:	39 01       	movw	r6, r18
     78c:	4a 01       	movw	r8, r20
   // calculate division factor for requested baud rate, and set it
   int bauddiv0 = ((F_CPU+(baudrate0*8L))/(baudrate0*16L)-1);
     78e:	20 e0       	ldi	r18, 0x00	; 0
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	40 e0       	ldi	r20, 0x00	; 0
     794:	51 e4       	ldi	r21, 0x41	; 65
     796:	0e 94 e7 2a 	call	0x55ce	; 0x55ce <__mulsf3>
     79a:	20 e0       	ldi	r18, 0x00	; 0
     79c:	30 ec       	ldi	r19, 0xC0	; 192
     79e:	48 e2       	ldi	r20, 0x28	; 40
     7a0:	5b e4       	ldi	r21, 0x4B	; 75
     7a2:	0e 94 ba 2a 	call	0x5574	; 0x5574 <__addsf3>
     7a6:	7b 01       	movw	r14, r22
     7a8:	8c 01       	movw	r16, r24
     7aa:	c6 01       	movw	r24, r12
     7ac:	b5 01       	movw	r22, r10
     7ae:	20 e0       	ldi	r18, 0x00	; 0
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	40 e8       	ldi	r20, 0x80	; 128
     7b4:	51 e4       	ldi	r21, 0x41	; 65
     7b6:	0e 94 e7 2a 	call	0x55ce	; 0x55ce <__mulsf3>
     7ba:	9b 01       	movw	r18, r22
     7bc:	ac 01       	movw	r20, r24
     7be:	c8 01       	movw	r24, r16
     7c0:	b7 01       	movw	r22, r14
     7c2:	0e 94 e1 2b 	call	0x57c2	; 0x57c2 <__divsf3>
     7c6:	20 e0       	ldi	r18, 0x00	; 0
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	40 e8       	ldi	r20, 0x80	; 128
     7cc:	5f e3       	ldi	r21, 0x3F	; 63
     7ce:	0e 94 89 2a 	call	0x5512	; 0x5512 <__subsf3>
     7d2:	0e 94 8d 2c 	call	0x591a	; 0x591a <__fixsfsi>
     7d6:	7b 01       	movw	r14, r22
     7d8:	8c 01       	movw	r16, r24
   int bauddiv1 = ((F_CPU+(baudrate1*8L))/(baudrate1*16L)-1);
     7da:	c4 01       	movw	r24, r8
     7dc:	b3 01       	movw	r22, r6
     7de:	20 e0       	ldi	r18, 0x00	; 0
     7e0:	30 e0       	ldi	r19, 0x00	; 0
     7e2:	40 e0       	ldi	r20, 0x00	; 0
     7e4:	51 e4       	ldi	r21, 0x41	; 65
     7e6:	0e 94 e7 2a 	call	0x55ce	; 0x55ce <__mulsf3>
     7ea:	20 e0       	ldi	r18, 0x00	; 0
     7ec:	30 ec       	ldi	r19, 0xC0	; 192
     7ee:	48 e2       	ldi	r20, 0x28	; 40
     7f0:	5b e4       	ldi	r21, 0x4B	; 75
     7f2:	0e 94 ba 2a 	call	0x5574	; 0x5574 <__addsf3>
     7f6:	5b 01       	movw	r10, r22
     7f8:	6c 01       	movw	r12, r24
     7fa:	c4 01       	movw	r24, r8
     7fc:	b3 01       	movw	r22, r6
     7fe:	20 e0       	ldi	r18, 0x00	; 0
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	40 e8       	ldi	r20, 0x80	; 128
     804:	51 e4       	ldi	r21, 0x41	; 65
     806:	0e 94 e7 2a 	call	0x55ce	; 0x55ce <__mulsf3>
     80a:	9b 01       	movw	r18, r22
     80c:	ac 01       	movw	r20, r24
     80e:	c6 01       	movw	r24, r12
     810:	b5 01       	movw	r22, r10
     812:	0e 94 e1 2b 	call	0x57c2	; 0x57c2 <__divsf3>
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	40 e8       	ldi	r20, 0x80	; 128
     81c:	5f e3       	ldi	r21, 0x3F	; 63
     81e:	0e 94 89 2a 	call	0x5512	; 0x5512 <__subsf3>
     822:	0e 94 8d 2c 	call	0x591a	; 0x591a <__fixsfsi>
   UBRR0L= bauddiv0;
     826:	e0 92 c4 00 	sts	0x00C4, r14
#ifdef UBRR0H
   UBRR0H= (bauddiv0>>8);
     82a:	ef 2c       	mov	r14, r15
     82c:	ff 0c       	add	r15, r15
     82e:	ff 08       	sbc	r15, r15
     830:	e0 92 c5 00 	sts	0x00C5, r14
#endif

   UBRR1L= bauddiv1;
     834:	60 93 cc 00 	sts	0x00CC, r22
#ifdef UBRR1H
   UBRR1H= (bauddiv1>>8);
     838:	67 2f       	mov	r22, r23
     83a:	77 0f       	add	r23, r23
     83c:	77 0b       	sbc	r23, r23
     83e:	60 93 cd 00 	sts	0x00CD, r22
#endif
}
     842:	1f 91       	pop	r17
     844:	0f 91       	pop	r16
     846:	ff 90       	pop	r15
     848:	ef 90       	pop	r14
     84a:	df 90       	pop	r13
     84c:	cf 90       	pop	r12
     84e:	bf 90       	pop	r11
     850:	af 90       	pop	r10
     852:	9f 90       	pop	r9
     854:	8f 90       	pop	r8
     856:	7f 90       	pop	r7
     858:	6f 90       	pop	r6
     85a:	08 95       	ret

0000085c <uart_init>:

/* Initialize UART */
void uart_init()
{
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) | (1<<RXCIE0);  // Turn on U(S)ART port og sæt rec interrupt
     85c:	88 e9       	ldi	r24, 0x98	; 152
     85e:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);   // Set frame format: 8 data bits, 1 stop bit, no parity
     862:	96 e0       	ldi	r25, 0x06	; 6
     864:	90 93 c2 00 	sts	0x00C2, r25

	UCSR1B = (1<<RXEN0)|(1<<TXEN0);      // Turn on U(S)ART port
     868:	88 e1       	ldi	r24, 0x18	; 24
     86a:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = (1<<UCSZ01)|(1<<UCSZ00);   // Set frame format: 8 data bits, 1 stop bit, no parity
     86e:	90 93 ca 00 	sts	0x00CA, r25
   
	USART_set_baud_rate(BAUD0, BAUD1); //Set baud rate
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	70 e0       	ldi	r23, 0x00	; 0
     876:	86 e9       	ldi	r24, 0x96	; 150
     878:	96 e4       	ldi	r25, 0x46	; 70
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	41 ee       	ldi	r20, 0xE1	; 225
     880:	57 e4       	ldi	r21, 0x47	; 71
     882:	0e 94 b7 03 	call	0x76e	; 0x76e <USART_set_baud_rate>
}
     886:	08 95       	ret

00000888 <uart_get>:

/* Get a received character */
uint8_t uart_get ()
{
   unsigned char d;
   while ((UCSR0A & (1 << RXC0)) == 0) {}; // Do nothing until data have been recieved and is ready to be read from UDR
     888:	80 91 c0 00 	lds	r24, 0x00C0
     88c:	87 ff       	sbrs	r24, 7
     88e:	fc cf       	rjmp	.-8      	; 0x888 <uart_get>
   d=UDR0;
     890:	80 91 c6 00 	lds	r24, 0x00C6
   return d;
}
     894:	08 95       	ret

00000896 <uart_put_test>:

/* Transmit a character */
void uart_put_test( uint8_t device, uint8_t d)
{
	switch (device) {
     896:	88 23       	and	r24, r24
     898:	49 f0       	breq	.+18     	; 0x8ac <uart_put_test+0x16>
     89a:	81 30       	cpi	r24, 0x01	; 1
     89c:	69 f4       	brne	.+26     	; 0x8b8 <uart_put_test+0x22>
}

void USART1_Transmit( unsigned char txData )
{
   /* Wait for empty transmit buffer */
   while ( !( UCSR1A & (1<<UDRE1)) );
     89e:	80 91 c8 00 	lds	r24, 0x00C8
     8a2:	85 ff       	sbrs	r24, 5
     8a4:	fc cf       	rjmp	.-8      	; 0x89e <uart_put_test+0x8>
   /* Put data into buffer, sends the data */
   UDR1 = txData;
     8a6:	60 93 ce 00 	sts	0x00CE, r22
     8aa:	08 95       	ret
#include "uart.h"

void USART0_Transmit( unsigned char txData )
{
   /* Wait for empty transmit buffer */
   while ( !( UCSR0A & (1<<UDRE0)) );
     8ac:	80 91 c0 00 	lds	r24, 0x00C0
     8b0:	85 ff       	sbrs	r24, 5
     8b2:	fc cf       	rjmp	.-8      	; 0x8ac <uart_put_test+0x16>
   /* Put data into buffer, sends the data */
   UDR0 = txData;
     8b4:	60 93 c6 00 	sts	0x00C6, r22
     8b8:	08 95       	ret

000008ba <uart_put>:
	}
}

/* Transmit a character */
void uart_put(uint8_t d)
{
     8ba:	98 2f       	mov	r25, r24
}

void USART1_Transmit( unsigned char txData )
{
   /* Wait for empty transmit buffer */
   while ( !( UCSR1A & (1<<UDRE1)) );
     8bc:	80 91 c8 00 	lds	r24, 0x00C8
     8c0:	85 ff       	sbrs	r24, 5
     8c2:	fc cf       	rjmp	.-8      	; 0x8bc <uart_put+0x2>
   /* Put data into buffer, sends the data */
   UDR1 = txData;
     8c4:	90 93 ce 00 	sts	0x00CE, r25

/* Transmit a character */
void uart_put(uint8_t d)
{
   USART1_Transmit( d );
}
     8c8:	08 95       	ret

000008ca <uart_puts>:

/* Transmit a string */
void uart_puts(const char *s)
{
     8ca:	fc 01       	movw	r30, r24
     8cc:	07 c0       	rjmp	.+14     	; 0x8dc <uart_puts+0x12>
#include "uart.h"

void USART0_Transmit( unsigned char txData )
{
   /* Wait for empty transmit buffer */
   while ( !( UCSR0A & (1<<UDRE0)) );
     8ce:	80 91 c0 00 	lds	r24, 0x00C0
     8d2:	85 ff       	sbrs	r24, 5
     8d4:	fc cf       	rjmp	.-8      	; 0x8ce <uart_puts+0x4>

/* Transmit a string */
void uart_puts(const char *s)
{
   while (*s)
      USART0_Transmit( *s++ );
     8d6:	31 96       	adiw	r30, 0x01	; 1
void USART0_Transmit( unsigned char txData )
{
   /* Wait for empty transmit buffer */
   while ( !( UCSR0A & (1<<UDRE0)) );
   /* Put data into buffer, sends the data */
   UDR0 = txData;
     8d8:	90 93 c6 00 	sts	0x00C6, r25
}

/* Transmit a string */
void uart_puts(const char *s)
{
   while (*s)
     8dc:	90 81       	ld	r25, Z
     8de:	99 23       	and	r25, r25
     8e0:	b1 f7       	brne	.-20     	; 0x8ce <uart_puts+0x4>
      USART0_Transmit( *s++ );
}
     8e2:	08 95       	ret

000008e4 <uart1_put>:

void uart1_put(uint8_t d)
{
     8e4:	98 2f       	mov	r25, r24
}

void USART1_Transmit( unsigned char txData )
{
   /* Wait for empty transmit buffer */
   while ( !( UCSR1A & (1<<UDRE1)) );
     8e6:	80 91 c8 00 	lds	r24, 0x00C8
     8ea:	85 ff       	sbrs	r24, 5
     8ec:	fc cf       	rjmp	.-8      	; 0x8e6 <uart1_put+0x2>
   /* Put data into buffer, sends the data */
   UDR1 = txData;
     8ee:	90 93 ce 00 	sts	0x00CE, r25
}

void uart1_put(uint8_t d)
{
        USART1_Transmit(d);
}
     8f2:	08 95       	ret

000008f4 <uart1_puts>:

void uart1_puts(const char *s)
{
     8f4:	fc 01       	movw	r30, r24
     8f6:	07 c0       	rjmp	.+14     	; 0x906 <uart1_puts+0x12>
}

void USART1_Transmit( unsigned char txData )
{
   /* Wait for empty transmit buffer */
   while ( !( UCSR1A & (1<<UDRE1)) );
     8f8:	80 91 c8 00 	lds	r24, 0x00C8
     8fc:	85 ff       	sbrs	r24, 5
     8fe:	fc cf       	rjmp	.-8      	; 0x8f8 <uart1_puts+0x4>
}

void uart1_puts(const char *s)
{
    while (*s)
            USART1_Transmit(*s++);
     900:	31 96       	adiw	r30, 0x01	; 1
void USART1_Transmit( unsigned char txData )
{
   /* Wait for empty transmit buffer */
   while ( !( UCSR1A & (1<<UDRE1)) );
   /* Put data into buffer, sends the data */
   UDR1 = txData;
     902:	90 93 ce 00 	sts	0x00CE, r25
        USART1_Transmit(d);
}

void uart1_puts(const char *s)
{
    while (*s)
     906:	90 81       	ld	r25, Z
     908:	99 23       	and	r25, r25
     90a:	b1 f7       	brne	.-20     	; 0x8f8 <uart1_puts+0x4>
            USART1_Transmit(*s++);
}
     90c:	08 95       	ret

0000090e <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
     90e:	ef 92       	push	r14
     910:	ff 92       	push	r15
     912:	0f 93       	push	r16
     914:	1f 93       	push	r17
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	ec 01       	movw	r28, r24
     91c:	7a 01       	movw	r14, r20
     91e:	8b 01       	movw	r16, r22
	clst -= 2;
     920:	8e ef       	ldi	r24, 0xFE	; 254
     922:	9f ef       	ldi	r25, 0xFF	; 255
     924:	af ef       	ldi	r26, 0xFF	; 255
     926:	bf ef       	ldi	r27, 0xFF	; 255
     928:	e8 0e       	add	r14, r24
     92a:	f9 1e       	adc	r15, r25
     92c:	0a 1f       	adc	r16, r26
     92e:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
     930:	8e 8d       	ldd	r24, Y+30	; 0x1e
     932:	9f 8d       	ldd	r25, Y+31	; 0x1f
     934:	a8 a1       	ldd	r26, Y+32	; 0x20
     936:	b9 a1       	ldd	r27, Y+33	; 0x21
     938:	02 97       	sbiw	r24, 0x02	; 2
     93a:	a1 09       	sbc	r26, r1
     93c:	b1 09       	sbc	r27, r1
     93e:	e8 16       	cp	r14, r24
     940:	f9 06       	cpc	r15, r25
     942:	0a 07       	cpc	r16, r26
     944:	1b 07       	cpc	r17, r27
     946:	28 f0       	brcs	.+10     	; 0x952 <clust2sect+0x44>
     948:	20 e0       	ldi	r18, 0x00	; 0
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	40 e0       	ldi	r20, 0x00	; 0
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	12 c0       	rjmp	.+36     	; 0x976 <clust2sect+0x68>
	return clst * fs->csize + fs->database;
     952:	2a 81       	ldd	r18, Y+2	; 0x02
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	40 e0       	ldi	r20, 0x00	; 0
     958:	50 e0       	ldi	r21, 0x00	; 0
     95a:	c8 01       	movw	r24, r16
     95c:	b7 01       	movw	r22, r14
     95e:	0e 94 2e 2e 	call	0x5c5c	; 0x5c5c <__mulsi3>
     962:	9b 01       	movw	r18, r22
     964:	ac 01       	movw	r20, r24
     966:	8a a5       	ldd	r24, Y+42	; 0x2a
     968:	9b a5       	ldd	r25, Y+43	; 0x2b
     96a:	ac a5       	ldd	r26, Y+44	; 0x2c
     96c:	bd a5       	ldd	r27, Y+45	; 0x2d
     96e:	28 0f       	add	r18, r24
     970:	39 1f       	adc	r19, r25
     972:	4a 1f       	adc	r20, r26
     974:	5b 1f       	adc	r21, r27
}
     976:	b9 01       	movw	r22, r18
     978:	ca 01       	movw	r24, r20
     97a:	cd b7       	in	r28, 0x3d	; 61
     97c:	de b7       	in	r29, 0x3e	; 62
     97e:	e6 e0       	ldi	r30, 0x06	; 6
     980:	0c 94 ca 2e 	jmp	0x5d94	; 0x5d94 <__epilogue_restores__+0x18>

00000984 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
     984:	db 01       	movw	r26, r22
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
     986:	88 23       	and	r24, r24
     988:	19 f0       	breq	.+6      	; 0x990 <f_mount+0xc>
     98a:	2b e0       	ldi	r18, 0x0B	; 11
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	10 c0       	rjmp	.+32     	; 0x9b0 <f_mount+0x2c>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
     990:	e0 91 28 03 	lds	r30, 0x0328
     994:	f0 91 29 03 	lds	r31, 0x0329

	if (rfs) {
     998:	30 97       	sbiw	r30, 0x00	; 0
     99a:	09 f0       	breq	.+2      	; 0x99e <f_mount+0x1a>
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
     99c:	10 82       	st	Z, r1
	}

	if (fs) {
     99e:	10 97       	sbiw	r26, 0x00	; 0
     9a0:	09 f0       	breq	.+2      	; 0x9a4 <f_mount+0x20>
		fs->fs_type = 0;			/* Clear new fs object */
     9a2:	1c 92       	st	X, r1
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
     9a4:	b0 93 29 03 	sts	0x0329, r27
     9a8:	a0 93 28 03 	sts	0x0328, r26
     9ac:	20 e0       	ldi	r18, 0x00	; 0
     9ae:	30 e0       	ldi	r19, 0x00	; 0

	return FR_OK;
}
     9b0:	c9 01       	movw	r24, r18
     9b2:	08 95       	ret

000009b4 <f_chdrive>:

FRESULT f_chdrive (
	BYTE drv		/* Drive number */
)
{
	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
     9b4:	88 23       	and	r24, r24
     9b6:	19 f0       	breq	.+6      	; 0x9be <f_chdrive+0xa>
     9b8:	2b e0       	ldi	r18, 0x0B	; 11
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	04 c0       	rjmp	.+8      	; 0x9c6 <f_chdrive+0x12>

	Drive = drv;
     9be:	10 92 2c 03 	sts	0x032C, r1
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	30 e0       	ldi	r19, 0x00	; 0

	return FR_OK;
}
     9c6:	c9 01       	movw	r24, r18
     9c8:	08 95       	ret

000009ca <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
     9ca:	fc 01       	movw	r30, r24
	if (!fs || !fs->fs_type || fs->id != id)
     9cc:	00 97       	sbiw	r24, 0x00	; 0
     9ce:	99 f0       	breq	.+38     	; 0x9f6 <validate+0x2c>
     9d0:	80 81       	ld	r24, Z
     9d2:	88 23       	and	r24, r24
     9d4:	81 f0       	breq	.+32     	; 0x9f6 <validate+0x2c>
     9d6:	86 81       	ldd	r24, Z+6	; 0x06
     9d8:	97 81       	ldd	r25, Z+7	; 0x07
     9da:	86 17       	cp	r24, r22
     9dc:	97 07       	cpc	r25, r23
     9de:	59 f4       	brne	.+22     	; 0x9f6 <validate+0x2c>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drive) & STA_NOINIT)
     9e0:	81 81       	ldd	r24, Z+1	; 0x01
     9e2:	0e 94 4e 19 	call	0x329c	; 0x329c <disk_status>
     9e6:	80 fd       	sbrc	r24, 0
     9e8:	03 c0       	rjmp	.+6      	; 0x9f0 <validate+0x26>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	05 c0       	rjmp	.+10     	; 0x9fa <validate+0x30>
     9f0:	23 e0       	ldi	r18, 0x03	; 3
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	02 c0       	rjmp	.+4      	; 0x9fa <validate+0x30>
     9f6:	29 e0       	ldi	r18, 0x09	; 9
     9f8:	30 e0       	ldi	r19, 0x00	; 0
		return FR_NOT_READY;

	return FR_OK;
}
     9fa:	c9 01       	movw	r24, r18
     9fc:	08 95       	ret

000009fe <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make apperance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
     9fe:	a0 e0       	ldi	r26, 0x00	; 0
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	e5 e0       	ldi	r30, 0x05	; 5
     a04:	f5 e0       	ldi	r31, 0x05	; 5
     a06:	0c 94 a6 2e 	jmp	0x5d4c	; 0x5d4c <__prologue_saves__+0x8>
     a0a:	ec 01       	movw	r28, r24
     a0c:	4a 01       	movw	r8, r20
     a0e:	5b 01       	movw	r10, r22
	DWORD wsect;


	wsect = fs->winsect;
     a10:	ce a4       	ldd	r12, Y+46	; 0x2e
     a12:	df a4       	ldd	r13, Y+47	; 0x2f
     a14:	e8 a8       	ldd	r14, Y+48	; 0x30
     a16:	f9 a8       	ldd	r15, Y+49	; 0x31
	if (wsect != sector) {	/* Changed current window */
     a18:	c4 16       	cp	r12, r20
     a1a:	d5 06       	cpc	r13, r21
     a1c:	e6 06       	cpc	r14, r22
     a1e:	f7 06       	cpc	r15, r23
     a20:	09 f4       	brne	.+2      	; 0xa24 <move_window+0x26>
     a22:	4f c0       	rjmp	.+158    	; 0xac2 <move_window+0xc4>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
     a24:	8c 81       	ldd	r24, Y+4	; 0x04
     a26:	88 23       	and	r24, r24
     a28:	a1 f1       	breq	.+104    	; 0xa92 <move_window+0x94>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
     a2a:	82 e3       	ldi	r24, 0x32	; 50
     a2c:	68 2e       	mov	r6, r24
     a2e:	71 2c       	mov	r7, r1
     a30:	6c 0e       	add	r6, r28
     a32:	7d 1e       	adc	r7, r29
     a34:	89 81       	ldd	r24, Y+1	; 0x01
     a36:	b3 01       	movw	r22, r6
     a38:	a7 01       	movw	r20, r14
     a3a:	96 01       	movw	r18, r12
     a3c:	01 e0       	ldi	r16, 0x01	; 1
     a3e:	0e 94 b3 19 	call	0x3366	; 0x3366 <disk_write>
     a42:	89 2b       	or	r24, r25
     a44:	d9 f5       	brne	.+118    	; 0xabc <move_window+0xbe>
				return FR_DISK_ERR;
			fs->wflag = 0;
     a46:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
     a48:	8a 8d       	ldd	r24, Y+26	; 0x1a
     a4a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     a4c:	ac 8d       	ldd	r26, Y+28	; 0x1c
     a4e:	bd 8d       	ldd	r27, Y+29	; 0x1d
     a50:	2a a1       	ldd	r18, Y+34	; 0x22
     a52:	3b a1       	ldd	r19, Y+35	; 0x23
     a54:	4c a1       	ldd	r20, Y+36	; 0x24
     a56:	5d a1       	ldd	r21, Y+37	; 0x25
     a58:	82 0f       	add	r24, r18
     a5a:	93 1f       	adc	r25, r19
     a5c:	a4 1f       	adc	r26, r20
     a5e:	b5 1f       	adc	r27, r21
     a60:	c8 16       	cp	r12, r24
     a62:	d9 06       	cpc	r13, r25
     a64:	ea 06       	cpc	r14, r26
     a66:	fb 06       	cpc	r15, r27
     a68:	a0 f4       	brcc	.+40     	; 0xa92 <move_window+0x94>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
     a6a:	1b 81       	ldd	r17, Y+3	; 0x03
     a6c:	10 c0       	rjmp	.+32     	; 0xa8e <move_window+0x90>
					wsect += fs->sects_fat;
     a6e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     a70:	9b 8d       	ldd	r25, Y+27	; 0x1b
     a72:	ac 8d       	ldd	r26, Y+28	; 0x1c
     a74:	bd 8d       	ldd	r27, Y+29	; 0x1d
     a76:	c8 0e       	add	r12, r24
     a78:	d9 1e       	adc	r13, r25
     a7a:	ea 1e       	adc	r14, r26
     a7c:	fb 1e       	adc	r15, r27
					disk_write(fs->drive, fs->win, wsect, 1);
     a7e:	89 81       	ldd	r24, Y+1	; 0x01
     a80:	b3 01       	movw	r22, r6
     a82:	a7 01       	movw	r20, r14
     a84:	96 01       	movw	r18, r12
     a86:	01 e0       	ldi	r16, 0x01	; 1
     a88:	0e 94 b3 19 	call	0x3366	; 0x3366 <disk_write>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
     a8c:	11 50       	subi	r17, 0x01	; 1
     a8e:	12 30       	cpi	r17, 0x02	; 2
     a90:	70 f7       	brcc	.-36     	; 0xa6e <move_window+0x70>
					disk_write(fs->drive, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
     a92:	81 14       	cp	r8, r1
     a94:	91 04       	cpc	r9, r1
     a96:	a1 04       	cpc	r10, r1
     a98:	b1 04       	cpc	r11, r1
     a9a:	99 f0       	breq	.+38     	; 0xac2 <move_window+0xc4>
			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
     a9c:	be 01       	movw	r22, r28
     a9e:	6e 5c       	subi	r22, 0xCE	; 206
     aa0:	7f 4f       	sbci	r23, 0xFF	; 255
     aa2:	89 81       	ldd	r24, Y+1	; 0x01
     aa4:	a5 01       	movw	r20, r10
     aa6:	94 01       	movw	r18, r8
     aa8:	01 e0       	ldi	r16, 0x01	; 1
     aaa:	0e 94 55 19 	call	0x32aa	; 0x32aa <disk_read>
     aae:	89 2b       	or	r24, r25
     ab0:	29 f4       	brne	.+10     	; 0xabc <move_window+0xbe>
				return FR_DISK_ERR;
			fs->winsect = sector;
     ab2:	8e a6       	std	Y+46, r8	; 0x2e
     ab4:	9f a6       	std	Y+47, r9	; 0x2f
     ab6:	a8 aa       	std	Y+48, r10	; 0x30
     ab8:	b9 aa       	std	Y+49, r11	; 0x31
     aba:	03 c0       	rjmp	.+6      	; 0xac2 <move_window+0xc4>
     abc:	21 e0       	ldi	r18, 0x01	; 1
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	02 c0       	rjmp	.+4      	; 0xac6 <move_window+0xc8>
     ac2:	20 e0       	ldi	r18, 0x00	; 0
     ac4:	30 e0       	ldi	r19, 0x00	; 0
		}
	}

	return FR_OK;
}
     ac6:	c9 01       	movw	r24, r18
     ac8:	cd b7       	in	r28, 0x3d	; 61
     aca:	de b7       	in	r29, 0x3e	; 62
     acc:	ee e0       	ldi	r30, 0x0E	; 14
     ace:	0c 94 c2 2e 	jmp	0x5d84	; 0x5d84 <__epilogue_restores__+0x8>

00000ad2 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->max_clust - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	ef e6       	ldi	r30, 0x6F	; 111
     ad8:	f5 e0       	ldi	r31, 0x05	; 5
     ada:	0c 94 a2 2e 	jmp	0x5d44	; 0x5d44 <__prologue_saves__>
     ade:	5c 01       	movw	r10, r24
     ae0:	6a 01       	movw	r12, r20
     ae2:	7b 01       	movw	r14, r22
     ae4:	38 01       	movw	r6, r16
     ae6:	49 01       	movw	r8, r18
	BYTE *p;
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
     ae8:	42 30       	cpi	r20, 0x02	; 2
     aea:	51 05       	cpc	r21, r1
     aec:	61 05       	cpc	r22, r1
     aee:	71 05       	cpc	r23, r1
     af0:	08 f4       	brcc	.+2      	; 0xaf4 <put_fat+0x22>
     af2:	b1 c0       	rjmp	.+354    	; 0xc56 <put_fat+0x184>
     af4:	f5 01       	movw	r30, r10
     af6:	86 8d       	ldd	r24, Z+30	; 0x1e
     af8:	97 8d       	ldd	r25, Z+31	; 0x1f
     afa:	a0 a1       	ldd	r26, Z+32	; 0x20
     afc:	b1 a1       	ldd	r27, Z+33	; 0x21
     afe:	48 17       	cp	r20, r24
     b00:	59 07       	cpc	r21, r25
     b02:	6a 07       	cpc	r22, r26
     b04:	7b 07       	cpc	r23, r27
     b06:	08 f0       	brcs	.+2      	; 0xb0a <put_fat+0x38>
     b08:	a6 c0       	rjmp	.+332    	; 0xc56 <put_fat+0x184>
		res = FR_INT_ERR;

	} else {
		fsect = fs->fatbase;
     b0a:	22 a0       	ldd	r2, Z+34	; 0x22
     b0c:	33 a0       	ldd	r3, Z+35	; 0x23
     b0e:	44 a0       	ldd	r4, Z+36	; 0x24
     b10:	55 a0       	ldd	r5, Z+37	; 0x25
		switch (fs->fs_type) {
     b12:	80 81       	ld	r24, Z
     b14:	82 30       	cpi	r24, 0x02	; 2
     b16:	09 f4       	brne	.+2      	; 0xb1a <put_fat+0x48>
     b18:	66 c0       	rjmp	.+204    	; 0xbe6 <put_fat+0x114>
     b1a:	83 30       	cpi	r24, 0x03	; 3
     b1c:	09 f4       	brne	.+2      	; 0xb20 <put_fat+0x4e>
     b1e:	7a c0       	rjmp	.+244    	; 0xc14 <put_fat+0x142>
     b20:	81 30       	cpi	r24, 0x01	; 1
     b22:	19 f0       	breq	.+6      	; 0xb2a <put_fat+0x58>
     b24:	42 e0       	ldi	r20, 0x02	; 2
     b26:	50 e0       	ldi	r21, 0x00	; 0
     b28:	92 c0       	rjmp	.+292    	; 0xc4e <put_fat+0x17c>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
     b2a:	ea 01       	movw	r28, r20
     b2c:	d6 95       	lsr	r29
     b2e:	c7 95       	ror	r28
     b30:	c4 0f       	add	r28, r20
     b32:	d5 1f       	adc	r29, r21
			res = move_window(fs, fsect + (bc / SS(fs)));
     b34:	ae 01       	movw	r20, r28
     b36:	45 2f       	mov	r20, r21
     b38:	55 27       	eor	r21, r21
     b3a:	46 95       	lsr	r20
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	42 0d       	add	r20, r2
     b42:	53 1d       	adc	r21, r3
     b44:	64 1d       	adc	r22, r4
     b46:	75 1d       	adc	r23, r5
     b48:	c5 01       	movw	r24, r10
     b4a:	0e 94 ff 04 	call	0x9fe	; 0x9fe <move_window>
     b4e:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
     b50:	00 97       	sbiw	r24, 0x00	; 0
     b52:	09 f0       	breq	.+2      	; 0xb56 <put_fat+0x84>
     b54:	7c c0       	rjmp	.+248    	; 0xc4e <put_fat+0x17c>
			p = &fs->win[bc & (SS(fs) - 1)];
     b56:	de 01       	movw	r26, r28
     b58:	b1 70       	andi	r27, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
     b5a:	86 01       	movw	r16, r12
     b5c:	01 70       	andi	r16, 0x01	; 1
     b5e:	10 70       	andi	r17, 0x00	; 0
     b60:	01 15       	cp	r16, r1
     b62:	11 05       	cpc	r17, r1
     b64:	51 f0       	breq	.+20     	; 0xb7a <put_fat+0xa8>
     b66:	f5 01       	movw	r30, r10
     b68:	ea 0f       	add	r30, r26
     b6a:	fb 1f       	adc	r31, r27
     b6c:	82 a9       	ldd	r24, Z+50	; 0x32
     b6e:	8f 70       	andi	r24, 0x0F	; 15
     b70:	96 2d       	mov	r25, r6
     b72:	92 95       	swap	r25
     b74:	90 7f       	andi	r25, 0xF0	; 240
     b76:	98 2b       	or	r25, r24
     b78:	01 c0       	rjmp	.+2      	; 0xb7c <put_fat+0xaa>
     b7a:	96 2d       	mov	r25, r6
     b7c:	aa 0d       	add	r26, r10
     b7e:	bb 1d       	adc	r27, r11
     b80:	d2 96       	adiw	r26, 0x32	; 50
     b82:	9c 93       	st	X, r25
			bc++;
     b84:	21 96       	adiw	r28, 0x01	; 1
			fs->wflag = 1;
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	f5 01       	movw	r30, r10
     b8a:	84 83       	std	Z+4, r24	; 0x04
			res = move_window(fs, fsect + (bc / SS(fs)));
     b8c:	ae 01       	movw	r20, r28
     b8e:	45 2f       	mov	r20, r21
     b90:	55 27       	eor	r21, r21
     b92:	46 95       	lsr	r20
     b94:	60 e0       	ldi	r22, 0x00	; 0
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	42 0d       	add	r20, r2
     b9a:	53 1d       	adc	r21, r3
     b9c:	64 1d       	adc	r22, r4
     b9e:	75 1d       	adc	r23, r5
     ba0:	c5 01       	movw	r24, r10
     ba2:	0e 94 ff 04 	call	0x9fe	; 0x9fe <move_window>
     ba6:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
     ba8:	00 97       	sbiw	r24, 0x00	; 0
     baa:	09 f0       	breq	.+2      	; 0xbae <put_fat+0xdc>
     bac:	50 c0       	rjmp	.+160    	; 0xc4e <put_fat+0x17c>
			p = &fs->win[bc & (SS(fs) - 1)];
     bae:	d1 70       	andi	r29, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
     bb0:	01 15       	cp	r16, r1
     bb2:	11 05       	cpc	r17, r1
     bb4:	49 f0       	breq	.+18     	; 0xbc8 <put_fat+0xf6>
     bb6:	e4 e0       	ldi	r30, 0x04	; 4
     bb8:	96 94       	lsr	r9
     bba:	87 94       	ror	r8
     bbc:	77 94       	ror	r7
     bbe:	67 94       	ror	r6
     bc0:	ea 95       	dec	r30
     bc2:	d1 f7       	brne	.-12     	; 0xbb8 <put_fat+0xe6>
     bc4:	66 2d       	mov	r22, r6
     bc6:	0b c0       	rjmp	.+22     	; 0xbde <put_fat+0x10c>
     bc8:	f5 01       	movw	r30, r10
     bca:	ec 0f       	add	r30, r28
     bcc:	fd 1f       	adc	r31, r29
     bce:	62 a9       	ldd	r22, Z+50	; 0x32
     bd0:	60 7f       	andi	r22, 0xF0	; 240
     bd2:	bb 27       	eor	r27, r27
     bd4:	a9 2d       	mov	r26, r9
     bd6:	98 2d       	mov	r25, r8
     bd8:	87 2d       	mov	r24, r7
     bda:	8f 70       	andi	r24, 0x0F	; 15
     bdc:	68 2b       	or	r22, r24
     bde:	ca 0d       	add	r28, r10
     be0:	db 1d       	adc	r29, r11
     be2:	6a ab       	std	Y+50, r22	; 0x32
     be4:	34 c0       	rjmp	.+104    	; 0xc4e <put_fat+0x17c>
			break;

		case FS_FAT16 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
     be6:	77 27       	eor	r23, r23
     be8:	6f 2d       	mov	r22, r15
     bea:	5e 2d       	mov	r21, r14
     bec:	4d 2d       	mov	r20, r13
     bee:	42 0d       	add	r20, r2
     bf0:	53 1d       	adc	r21, r3
     bf2:	64 1d       	adc	r22, r4
     bf4:	75 1d       	adc	r23, r5
     bf6:	c5 01       	movw	r24, r10
     bf8:	0e 94 ff 04 	call	0x9fe	; 0x9fe <move_window>
     bfc:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
     bfe:	00 97       	sbiw	r24, 0x00	; 0
     c00:	31 f5       	brne	.+76     	; 0xc4e <put_fat+0x17c>
			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
     c02:	f6 01       	movw	r30, r12
     c04:	ee 0f       	add	r30, r30
     c06:	ff 1f       	adc	r31, r31
     c08:	f1 70       	andi	r31, 0x01	; 1
     c0a:	ea 0d       	add	r30, r10
     c0c:	fb 1d       	adc	r31, r11
     c0e:	73 aa       	std	Z+51, r7	; 0x33
     c10:	62 aa       	std	Z+50, r6	; 0x32
     c12:	1d c0       	rjmp	.+58     	; 0xc4e <put_fat+0x17c>
			break;

		case FS_FAT32 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
     c14:	27 e0       	ldi	r18, 0x07	; 7
     c16:	76 95       	lsr	r23
     c18:	67 95       	ror	r22
     c1a:	57 95       	ror	r21
     c1c:	47 95       	ror	r20
     c1e:	2a 95       	dec	r18
     c20:	d1 f7       	brne	.-12     	; 0xc16 <put_fat+0x144>
     c22:	42 0d       	add	r20, r2
     c24:	53 1d       	adc	r21, r3
     c26:	64 1d       	adc	r22, r4
     c28:	75 1d       	adc	r23, r5
     c2a:	c5 01       	movw	r24, r10
     c2c:	0e 94 ff 04 	call	0x9fe	; 0x9fe <move_window>
     c30:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
     c32:	00 97       	sbiw	r24, 0x00	; 0
     c34:	61 f4       	brne	.+24     	; 0xc4e <put_fat+0x17c>
			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
     c36:	f6 01       	movw	r30, r12
     c38:	ee 0f       	add	r30, r30
     c3a:	ff 1f       	adc	r31, r31
     c3c:	ee 0f       	add	r30, r30
     c3e:	ff 1f       	adc	r31, r31
     c40:	f1 70       	andi	r31, 0x01	; 1
     c42:	ea 0d       	add	r30, r10
     c44:	fb 1d       	adc	r31, r11
     c46:	62 aa       	std	Z+50, r6	; 0x32
     c48:	73 aa       	std	Z+51, r7	; 0x33
     c4a:	84 aa       	std	Z+52, r8	; 0x34
     c4c:	95 aa       	std	Z+53, r9	; 0x35
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	f5 01       	movw	r30, r10
     c52:	84 83       	std	Z+4, r24	; 0x04
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <put_fat+0x188>
     c56:	42 e0       	ldi	r20, 0x02	; 2
     c58:	50 e0       	ldi	r21, 0x00	; 0
	}

	return res;
}
     c5a:	ca 01       	movw	r24, r20
     c5c:	cd b7       	in	r28, 0x3d	; 61
     c5e:	de b7       	in	r29, 0x3e	; 62
     c60:	e2 e1       	ldi	r30, 0x12	; 18
     c62:	0c 94 be 2e 	jmp	0x5d7c	; 0x5d7c <__epilogue_restores__>

00000c66 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Interal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
     c66:	a0 e0       	ldi	r26, 0x00	; 0
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	e9 e3       	ldi	r30, 0x39	; 57
     c6c:	f6 e0       	ldi	r31, 0x06	; 6
     c6e:	0c 94 a7 2e 	jmp	0x5d4e	; 0x5d4e <__prologue_saves__+0xa>
     c72:	4c 01       	movw	r8, r24
     c74:	7a 01       	movw	r14, r20
     c76:	8b 01       	movw	r16, r22
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
     c78:	42 30       	cpi	r20, 0x02	; 2
     c7a:	51 05       	cpc	r21, r1
     c7c:	61 05       	cpc	r22, r1
     c7e:	71 05       	cpc	r23, r1
     c80:	08 f4       	brcc	.+2      	; 0xc84 <get_fat+0x1e>
     c82:	97 c0       	rjmp	.+302    	; 0xdb2 <get_fat+0x14c>
     c84:	f4 01       	movw	r30, r8
     c86:	86 8d       	ldd	r24, Z+30	; 0x1e
     c88:	97 8d       	ldd	r25, Z+31	; 0x1f
     c8a:	a0 a1       	ldd	r26, Z+32	; 0x20
     c8c:	b1 a1       	ldd	r27, Z+33	; 0x21
     c8e:	48 17       	cp	r20, r24
     c90:	59 07       	cpc	r21, r25
     c92:	6a 07       	cpc	r22, r26
     c94:	7b 07       	cpc	r23, r27
     c96:	08 f0       	brcs	.+2      	; 0xc9a <get_fat+0x34>
     c98:	8c c0       	rjmp	.+280    	; 0xdb2 <get_fat+0x14c>
		return 1;

	fsect = fs->fatbase;
     c9a:	a2 a0       	ldd	r10, Z+34	; 0x22
     c9c:	b3 a0       	ldd	r11, Z+35	; 0x23
     c9e:	c4 a0       	ldd	r12, Z+36	; 0x24
     ca0:	d5 a0       	ldd	r13, Z+37	; 0x25
	switch (fs->fs_type) {
     ca2:	80 81       	ld	r24, Z
     ca4:	82 30       	cpi	r24, 0x02	; 2
     ca6:	09 f4       	brne	.+2      	; 0xcaa <get_fat+0x44>
     ca8:	4d c0       	rjmp	.+154    	; 0xd44 <get_fat+0xde>
     caa:	83 30       	cpi	r24, 0x03	; 3
     cac:	09 f4       	brne	.+2      	; 0xcb0 <get_fat+0x4a>
     cae:	63 c0       	rjmp	.+198    	; 0xd76 <get_fat+0x110>
     cb0:	81 30       	cpi	r24, 0x01	; 1
     cb2:	09 f0       	breq	.+2      	; 0xcb6 <get_fat+0x50>
     cb4:	83 c0       	rjmp	.+262    	; 0xdbc <get_fat+0x156>
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
     cb6:	ea 01       	movw	r28, r20
     cb8:	d6 95       	lsr	r29
     cba:	c7 95       	ror	r28
     cbc:	c4 0f       	add	r28, r20
     cbe:	d5 1f       	adc	r29, r21
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
     cc0:	ae 01       	movw	r20, r28
     cc2:	45 2f       	mov	r20, r21
     cc4:	55 27       	eor	r21, r21
     cc6:	46 95       	lsr	r20
     cc8:	60 e0       	ldi	r22, 0x00	; 0
     cca:	70 e0       	ldi	r23, 0x00	; 0
     ccc:	4a 0d       	add	r20, r10
     cce:	5b 1d       	adc	r21, r11
     cd0:	6c 1d       	adc	r22, r12
     cd2:	7d 1d       	adc	r23, r13
     cd4:	c4 01       	movw	r24, r8
     cd6:	0e 94 ff 04 	call	0x9fe	; 0x9fe <move_window>
     cda:	89 2b       	or	r24, r25
     cdc:	09 f0       	breq	.+2      	; 0xce0 <get_fat+0x7a>
     cde:	6e c0       	rjmp	.+220    	; 0xdbc <get_fat+0x156>
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
     ce0:	fe 01       	movw	r30, r28
     ce2:	f1 70       	andi	r31, 0x01	; 1
     ce4:	e8 0d       	add	r30, r8
     ce6:	f9 1d       	adc	r31, r9
     ce8:	72 a8       	ldd	r7, Z+50	; 0x32
     cea:	21 96       	adiw	r28, 0x01	; 1
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
     cec:	ae 01       	movw	r20, r28
     cee:	45 2f       	mov	r20, r21
     cf0:	55 27       	eor	r21, r21
     cf2:	46 95       	lsr	r20
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	4a 0d       	add	r20, r10
     cfa:	5b 1d       	adc	r21, r11
     cfc:	6c 1d       	adc	r22, r12
     cfe:	7d 1d       	adc	r23, r13
     d00:	c4 01       	movw	r24, r8
     d02:	0e 94 ff 04 	call	0x9fe	; 0x9fe <move_window>
     d06:	89 2b       	or	r24, r25
     d08:	09 f0       	breq	.+2      	; 0xd0c <get_fat+0xa6>
     d0a:	58 c0       	rjmp	.+176    	; 0xdbc <get_fat+0x156>
	fsect = fs->fatbase;
	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
     d0c:	67 2d       	mov	r22, r7
     d0e:	70 e0       	ldi	r23, 0x00	; 0
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
     d10:	d1 70       	andi	r29, 0x01	; 1
     d12:	c8 0d       	add	r28, r8
     d14:	d9 1d       	adc	r29, r9
     d16:	9a a9       	ldd	r25, Y+50	; 0x32
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	68 2b       	or	r22, r24
     d1c:	79 2b       	or	r23, r25
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
     d1e:	c7 01       	movw	r24, r14
     d20:	81 70       	andi	r24, 0x01	; 1
     d22:	90 70       	andi	r25, 0x00	; 0
     d24:	89 2b       	or	r24, r25
     d26:	39 f0       	breq	.+14     	; 0xd36 <get_fat+0xd0>
     d28:	44 e0       	ldi	r20, 0x04	; 4
     d2a:	76 95       	lsr	r23
     d2c:	67 95       	ror	r22
     d2e:	4a 95       	dec	r20
     d30:	e1 f7       	brne	.-8      	; 0xd2a <get_fat+0xc4>
     d32:	9b 01       	movw	r18, r22
     d34:	1d c0       	rjmp	.+58     	; 0xd70 <get_fat+0x10a>
     d36:	9b 01       	movw	r18, r22
     d38:	40 e0       	ldi	r20, 0x00	; 0
     d3a:	50 e0       	ldi	r21, 0x00	; 0
     d3c:	3f 70       	andi	r19, 0x0F	; 15
     d3e:	40 70       	andi	r20, 0x00	; 0
     d40:	50 70       	andi	r21, 0x00	; 0
     d42:	40 c0       	rjmp	.+128    	; 0xdc4 <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
     d44:	45 2f       	mov	r20, r21
     d46:	56 2f       	mov	r21, r22
     d48:	67 2f       	mov	r22, r23
     d4a:	77 27       	eor	r23, r23
     d4c:	4a 0d       	add	r20, r10
     d4e:	5b 1d       	adc	r21, r11
     d50:	6c 1d       	adc	r22, r12
     d52:	7d 1d       	adc	r23, r13
     d54:	c4 01       	movw	r24, r8
     d56:	0e 94 ff 04 	call	0x9fe	; 0x9fe <move_window>
     d5a:	89 2b       	or	r24, r25
     d5c:	79 f5       	brne	.+94     	; 0xdbc <get_fat+0x156>
		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
     d5e:	f7 01       	movw	r30, r14
     d60:	ee 0f       	add	r30, r30
     d62:	ff 1f       	adc	r31, r31
     d64:	f1 70       	andi	r31, 0x01	; 1
     d66:	e8 0d       	add	r30, r8
     d68:	f9 1d       	adc	r31, r9
     d6a:	82 a9       	ldd	r24, Z+50	; 0x32
     d6c:	93 a9       	ldd	r25, Z+51	; 0x33
     d6e:	9c 01       	movw	r18, r24
     d70:	40 e0       	ldi	r20, 0x00	; 0
     d72:	50 e0       	ldi	r21, 0x00	; 0
     d74:	27 c0       	rjmp	.+78     	; 0xdc4 <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
     d76:	97 e0       	ldi	r25, 0x07	; 7
     d78:	76 95       	lsr	r23
     d7a:	67 95       	ror	r22
     d7c:	57 95       	ror	r21
     d7e:	47 95       	ror	r20
     d80:	9a 95       	dec	r25
     d82:	d1 f7       	brne	.-12     	; 0xd78 <get_fat+0x112>
     d84:	4a 0d       	add	r20, r10
     d86:	5b 1d       	adc	r21, r11
     d88:	6c 1d       	adc	r22, r12
     d8a:	7d 1d       	adc	r23, r13
     d8c:	c4 01       	movw	r24, r8
     d8e:	0e 94 ff 04 	call	0x9fe	; 0x9fe <move_window>
     d92:	89 2b       	or	r24, r25
     d94:	99 f4       	brne	.+38     	; 0xdbc <get_fat+0x156>
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
     d96:	f7 01       	movw	r30, r14
     d98:	ee 0f       	add	r30, r30
     d9a:	ff 1f       	adc	r31, r31
     d9c:	ee 0f       	add	r30, r30
     d9e:	ff 1f       	adc	r31, r31
     da0:	f1 70       	andi	r31, 0x01	; 1
     da2:	e8 0d       	add	r30, r8
     da4:	f9 1d       	adc	r31, r9
     da6:	22 a9       	ldd	r18, Z+50	; 0x32
     da8:	33 a9       	ldd	r19, Z+51	; 0x33
     daa:	44 a9       	ldd	r20, Z+52	; 0x34
     dac:	55 a9       	ldd	r21, Z+53	; 0x35
     dae:	5f 70       	andi	r21, 0x0F	; 15
     db0:	09 c0       	rjmp	.+18     	; 0xdc4 <get_fat+0x15e>
     db2:	21 e0       	ldi	r18, 0x01	; 1
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	40 e0       	ldi	r20, 0x00	; 0
     db8:	50 e0       	ldi	r21, 0x00	; 0
     dba:	04 c0       	rjmp	.+8      	; 0xdc4 <get_fat+0x15e>
     dbc:	2f ef       	ldi	r18, 0xFF	; 255
     dbe:	3f ef       	ldi	r19, 0xFF	; 255
     dc0:	4f ef       	ldi	r20, 0xFF	; 255
     dc2:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return 0xFFFFFFFF;	/* An error occured at the disk I/O layer */
}
     dc4:	b9 01       	movw	r22, r18
     dc6:	ca 01       	movw	r24, r20
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	ed e0       	ldi	r30, 0x0D	; 13
     dce:	0c 94 c3 2e 	jmp	0x5d86	; 0x5d86 <__epilogue_restores__+0xa>

00000dd2 <dir_seek>:
static
FRESULT dir_seek (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
     dd2:	a0 e0       	ldi	r26, 0x00	; 0
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	ef ee       	ldi	r30, 0xEF	; 239
     dd8:	f6 e0       	ldi	r31, 0x06	; 6
     dda:	0c 94 aa 2e 	jmp	0x5d54	; 0x5d54 <__prologue_saves__+0x10>
     dde:	6c 01       	movw	r12, r24
     de0:	5b 01       	movw	r10, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
     de2:	dc 01       	movw	r26, r24
     de4:	15 96       	adiw	r26, 0x05	; 5
     de6:	7c 93       	st	X, r23
     de8:	6e 93       	st	-X, r22
     dea:	14 97       	sbiw	r26, 0x04	; 4
	clst = dj->sclust;
     dec:	16 96       	adiw	r26, 0x06	; 6
     dee:	4d 91       	ld	r20, X+
     df0:	5d 91       	ld	r21, X+
     df2:	6d 91       	ld	r22, X+
     df4:	7c 91       	ld	r23, X
     df6:	19 97       	sbiw	r26, 0x09	; 9
	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
     df8:	41 30       	cpi	r20, 0x01	; 1
     dfa:	51 05       	cpc	r21, r1
     dfc:	61 05       	cpc	r22, r1
     dfe:	71 05       	cpc	r23, r1
     e00:	09 f4       	brne	.+2      	; 0xe04 <dir_seek+0x32>
     e02:	d0 c0       	rjmp	.+416    	; 0xfa4 <dir_seek+0x1d2>
     e04:	ed 91       	ld	r30, X+
     e06:	fc 91       	ld	r31, X
     e08:	86 8d       	ldd	r24, Z+30	; 0x1e
     e0a:	97 8d       	ldd	r25, Z+31	; 0x1f
     e0c:	a0 a1       	ldd	r26, Z+32	; 0x20
     e0e:	b1 a1       	ldd	r27, Z+33	; 0x21
     e10:	48 17       	cp	r20, r24
     e12:	59 07       	cpc	r21, r25
     e14:	6a 07       	cpc	r22, r26
     e16:	7b 07       	cpc	r23, r27
     e18:	08 f0       	brcs	.+2      	; 0xe1c <dir_seek+0x4a>
     e1a:	c4 c0       	rjmp	.+392    	; 0xfa4 <dir_seek+0x1d2>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
     e1c:	41 15       	cp	r20, r1
     e1e:	51 05       	cpc	r21, r1
     e20:	61 05       	cpc	r22, r1
     e22:	71 05       	cpc	r23, r1
     e24:	81 f5       	brne	.+96     	; 0xe86 <dir_seek+0xb4>
     e26:	80 81       	ld	r24, Z
     e28:	83 30       	cpi	r24, 0x03	; 3
     e2a:	49 f4       	brne	.+18     	; 0xe3e <dir_seek+0x6c>
		clst = dj->fs->dirbase;
     e2c:	46 a1       	ldd	r20, Z+38	; 0x26
     e2e:	57 a1       	ldd	r21, Z+39	; 0x27
     e30:	60 a5       	ldd	r22, Z+40	; 0x28
     e32:	71 a5       	ldd	r23, Z+41	; 0x29

	if (clst == 0) {	/* Static table */
     e34:	41 15       	cp	r20, r1
     e36:	51 05       	cpc	r21, r1
     e38:	61 05       	cpc	r22, r1
     e3a:	71 05       	cpc	r23, r1
     e3c:	21 f5       	brne	.+72     	; 0xe86 <dir_seek+0xb4>
		dj->clust = clst;
     e3e:	f6 01       	movw	r30, r12
     e40:	12 86       	std	Z+10, r1	; 0x0a
     e42:	13 86       	std	Z+11, r1	; 0x0b
     e44:	14 86       	std	Z+12, r1	; 0x0c
     e46:	15 86       	std	Z+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
     e48:	01 90       	ld	r0, Z+
     e4a:	f0 81       	ld	r31, Z
     e4c:	e0 2d       	mov	r30, r0
     e4e:	80 85       	ldd	r24, Z+8	; 0x08
     e50:	91 85       	ldd	r25, Z+9	; 0x09
     e52:	a8 16       	cp	r10, r24
     e54:	b9 06       	cpc	r11, r25
     e56:	08 f0       	brcs	.+2      	; 0xe5a <dir_seek+0x88>
     e58:	a5 c0       	rjmp	.+330    	; 0xfa4 <dir_seek+0x1d2>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
     e5a:	c5 01       	movw	r24, r10
     e5c:	24 e0       	ldi	r18, 0x04	; 4
     e5e:	96 95       	lsr	r25
     e60:	87 95       	ror	r24
     e62:	2a 95       	dec	r18
     e64:	e1 f7       	brne	.-8      	; 0xe5e <dir_seek+0x8c>
     e66:	a0 e0       	ldi	r26, 0x00	; 0
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	26 a1       	ldd	r18, Z+38	; 0x26
     e6c:	37 a1       	ldd	r19, Z+39	; 0x27
     e6e:	40 a5       	ldd	r20, Z+40	; 0x28
     e70:	51 a5       	ldd	r21, Z+41	; 0x29
     e72:	82 0f       	add	r24, r18
     e74:	93 1f       	adc	r25, r19
     e76:	a4 1f       	adc	r26, r20
     e78:	b5 1f       	adc	r27, r21
     e7a:	f6 01       	movw	r30, r12
     e7c:	86 87       	std	Z+14, r24	; 0x0e
     e7e:	97 87       	std	Z+15, r25	; 0x0f
     e80:	a0 8b       	std	Z+16, r26	; 0x10
     e82:	b1 8b       	std	Z+17, r27	; 0x11
     e84:	7b c0       	rjmp	.+246    	; 0xf7c <dir_seek+0x1aa>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
     e86:	82 81       	ldd	r24, Z+2	; 0x02
     e88:	08 2f       	mov	r16, r24
     e8a:	10 e0       	ldi	r17, 0x00	; 0
     e8c:	84 e0       	ldi	r24, 0x04	; 4
     e8e:	00 0f       	add	r16, r16
     e90:	11 1f       	adc	r17, r17
     e92:	8a 95       	dec	r24
     e94:	e1 f7       	brne	.-8      	; 0xe8e <dir_seek+0xbc>
     e96:	25 c0       	rjmp	.+74     	; 0xee2 <dir_seek+0x110>
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
     e98:	ce 01       	movw	r24, r28
     e9a:	0e 94 33 06 	call	0xc66	; 0xc66 <get_fat>
     e9e:	ab 01       	movw	r20, r22
     ea0:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
     ea2:	4f 3f       	cpi	r20, 0xFF	; 255
     ea4:	ff ef       	ldi	r31, 0xFF	; 255
     ea6:	5f 07       	cpc	r21, r31
     ea8:	ff ef       	ldi	r31, 0xFF	; 255
     eaa:	6f 07       	cpc	r22, r31
     eac:	ff ef       	ldi	r31, 0xFF	; 255
     eae:	7f 07       	cpc	r23, r31
     eb0:	19 f4       	brne	.+6      	; 0xeb8 <dir_seek+0xe6>
     eb2:	21 e0       	ldi	r18, 0x01	; 1
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	78 c0       	rjmp	.+240    	; 0xfa8 <dir_seek+0x1d6>
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
     eb8:	42 30       	cpi	r20, 0x02	; 2
     eba:	51 05       	cpc	r21, r1
     ebc:	61 05       	cpc	r22, r1
     ebe:	71 05       	cpc	r23, r1
     ec0:	08 f4       	brcc	.+2      	; 0xec4 <dir_seek+0xf2>
     ec2:	70 c0       	rjmp	.+224    	; 0xfa4 <dir_seek+0x1d2>
     ec4:	d6 01       	movw	r26, r12
     ec6:	ed 91       	ld	r30, X+
     ec8:	fc 91       	ld	r31, X
     eca:	86 8d       	ldd	r24, Z+30	; 0x1e
     ecc:	97 8d       	ldd	r25, Z+31	; 0x1f
     ece:	a0 a1       	ldd	r26, Z+32	; 0x20
     ed0:	b1 a1       	ldd	r27, Z+33	; 0x21
     ed2:	48 17       	cp	r20, r24
     ed4:	59 07       	cpc	r21, r25
     ed6:	6a 07       	cpc	r22, r26
     ed8:	7b 07       	cpc	r23, r27
     eda:	08 f0       	brcs	.+2      	; 0xede <dir_seek+0x10c>
     edc:	63 c0       	rjmp	.+198    	; 0xfa4 <dir_seek+0x1d2>
				return FR_INT_ERR;
			idx -= ic;
     ede:	a0 1a       	sub	r10, r16
     ee0:	b1 0a       	sbc	r11, r17
     ee2:	f6 01       	movw	r30, r12
     ee4:	c0 81       	ld	r28, Z
     ee6:	d1 81       	ldd	r29, Z+1	; 0x01
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
     ee8:	a0 16       	cp	r10, r16
     eea:	b1 06       	cpc	r11, r17
     eec:	a8 f6       	brcc	.-86     	; 0xe98 <dir_seek+0xc6>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
     eee:	d6 01       	movw	r26, r12
     ef0:	1a 96       	adiw	r26, 0x0a	; 10
     ef2:	4d 93       	st	X+, r20
     ef4:	5d 93       	st	X+, r21
     ef6:	6d 93       	st	X+, r22
     ef8:	7c 93       	st	X, r23
     efa:	1d 97       	sbiw	r26, 0x0d	; 13
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
     efc:	be ef       	ldi	r27, 0xFE	; 254
     efe:	eb 2e       	mov	r14, r27
     f00:	bf ef       	ldi	r27, 0xFF	; 255
     f02:	fb 2e       	mov	r15, r27
     f04:	bf ef       	ldi	r27, 0xFF	; 255
     f06:	0b 2f       	mov	r16, r27
     f08:	bf ef       	ldi	r27, 0xFF	; 255
     f0a:	1b 2f       	mov	r17, r27
     f0c:	e4 0e       	add	r14, r20
     f0e:	f5 1e       	adc	r15, r21
     f10:	06 1f       	adc	r16, r22
     f12:	17 1f       	adc	r17, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
     f14:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f16:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f18:	a8 a1       	ldd	r26, Y+32	; 0x20
     f1a:	b9 a1       	ldd	r27, Y+33	; 0x21
     f1c:	02 97       	sbiw	r24, 0x02	; 2
     f1e:	a1 09       	sbc	r26, r1
     f20:	b1 09       	sbc	r27, r1
     f22:	e8 16       	cp	r14, r24
     f24:	f9 06       	cpc	r15, r25
     f26:	0a 07       	cpc	r16, r26
     f28:	1b 07       	cpc	r17, r27
     f2a:	28 f0       	brcs	.+10     	; 0xf36 <dir_seek+0x164>
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	40 e0       	ldi	r20, 0x00	; 0
     f32:	50 e0       	ldi	r21, 0x00	; 0
     f34:	12 c0       	rjmp	.+36     	; 0xf5a <dir_seek+0x188>
	return clst * fs->csize + fs->database;
     f36:	2a 81       	ldd	r18, Y+2	; 0x02
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	40 e0       	ldi	r20, 0x00	; 0
     f3c:	50 e0       	ldi	r21, 0x00	; 0
     f3e:	c8 01       	movw	r24, r16
     f40:	b7 01       	movw	r22, r14
     f42:	0e 94 2e 2e 	call	0x5c5c	; 0x5c5c <__mulsi3>
     f46:	9b 01       	movw	r18, r22
     f48:	ac 01       	movw	r20, r24
     f4a:	8a a5       	ldd	r24, Y+42	; 0x2a
     f4c:	9b a5       	ldd	r25, Y+43	; 0x2b
     f4e:	ac a5       	ldd	r26, Y+44	; 0x2c
     f50:	bd a5       	ldd	r27, Y+45	; 0x2d
     f52:	28 0f       	add	r18, r24
     f54:	39 1f       	adc	r19, r25
     f56:	4a 1f       	adc	r20, r26
     f58:	5b 1f       	adc	r21, r27
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
     f5a:	c5 01       	movw	r24, r10
     f5c:	a4 e0       	ldi	r26, 0x04	; 4
     f5e:	96 95       	lsr	r25
     f60:	87 95       	ror	r24
     f62:	aa 95       	dec	r26
     f64:	e1 f7       	brne	.-8      	; 0xf5e <dir_seek+0x18c>
     f66:	a0 e0       	ldi	r26, 0x00	; 0
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	28 0f       	add	r18, r24
     f6c:	39 1f       	adc	r19, r25
     f6e:	4a 1f       	adc	r20, r26
     f70:	5b 1f       	adc	r21, r27
     f72:	f6 01       	movw	r30, r12
     f74:	26 87       	std	Z+14, r18	; 0x0e
     f76:	37 87       	std	Z+15, r19	; 0x0f
     f78:	40 8b       	std	Z+16, r20	; 0x10
     f7a:	51 8b       	std	Z+17, r21	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
     f7c:	d6 01       	movw	r26, r12
     f7e:	8d 91       	ld	r24, X+
     f80:	9c 91       	ld	r25, X
     f82:	c2 96       	adiw	r24, 0x32	; 50
     f84:	bf e0       	ldi	r27, 0x0F	; 15
     f86:	ab 22       	and	r10, r27
     f88:	bb 24       	eor	r11, r11
     f8a:	f5 e0       	ldi	r31, 0x05	; 5
     f8c:	aa 0c       	add	r10, r10
     f8e:	bb 1c       	adc	r11, r11
     f90:	fa 95       	dec	r31
     f92:	e1 f7       	brne	.-8      	; 0xf8c <dir_seek+0x1ba>
     f94:	8a 0d       	add	r24, r10
     f96:	9b 1d       	adc	r25, r11
     f98:	f6 01       	movw	r30, r12
     f9a:	93 8b       	std	Z+19, r25	; 0x13
     f9c:	82 8b       	std	Z+18, r24	; 0x12
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <dir_seek+0x1d6>

	return FR_OK;	/* Seek succeeded */
     fa4:	22 e0       	ldi	r18, 0x02	; 2
     fa6:	30 e0       	ldi	r19, 0x00	; 0
}
     fa8:	c9 01       	movw	r24, r18
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
     fae:	ea e0       	ldi	r30, 0x0A	; 10
     fb0:	0c 94 c6 2e 	jmp	0x5d8c	; 0x5d8c <__epilogue_restores__+0x10>

00000fb4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
     fb4:	a4 e0       	ldi	r26, 0x04	; 4
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e0 ee       	ldi	r30, 0xE0	; 224
     fba:	f7 e0       	ldi	r31, 0x07	; 7
     fbc:	0c 94 a2 2e 	jmp	0x5d44	; 0x5d44 <__prologue_saves__>
     fc0:	1c 01       	movw	r2, r24
     fc2:	2a 01       	movw	r4, r20
     fc4:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl, mcl;


	mcl = fs->max_clust;
     fc6:	dc 01       	movw	r26, r24
     fc8:	5e 96       	adiw	r26, 0x1e	; 30
     fca:	8d 91       	ld	r24, X+
     fcc:	9d 91       	ld	r25, X+
     fce:	0d 90       	ld	r0, X+
     fd0:	bc 91       	ld	r27, X
     fd2:	a0 2d       	mov	r26, r0
     fd4:	89 83       	std	Y+1, r24	; 0x01
     fd6:	9a 83       	std	Y+2, r25	; 0x02
     fd8:	ab 83       	std	Y+3, r26	; 0x03
     fda:	bc 83       	std	Y+4, r27	; 0x04
	if (clst == 0) {		/* Create new chain */
     fdc:	41 15       	cp	r20, r1
     fde:	51 05       	cpc	r21, r1
     fe0:	61 05       	cpc	r22, r1
     fe2:	71 05       	cpc	r23, r1
     fe4:	81 f4       	brne	.+32     	; 0x1006 <create_chain+0x52>
		scl = fs->last_clust;			/* Get suggested start point */
     fe6:	f1 01       	movw	r30, r2
     fe8:	82 84       	ldd	r8, Z+10	; 0x0a
     fea:	93 84       	ldd	r9, Z+11	; 0x0b
     fec:	a4 84       	ldd	r10, Z+12	; 0x0c
     fee:	b5 84       	ldd	r11, Z+13	; 0x0d
		if (scl == 0 || scl >= mcl) scl = 1;
     ff0:	81 14       	cp	r8, r1
     ff2:	91 04       	cpc	r9, r1
     ff4:	a1 04       	cpc	r10, r1
     ff6:	b1 04       	cpc	r11, r1
     ff8:	11 f1       	breq	.+68     	; 0x103e <create_chain+0x8a>
     ffa:	88 16       	cp	r8, r24
     ffc:	99 06       	cpc	r9, r25
     ffe:	aa 06       	cpc	r10, r26
    1000:	bb 06       	cpc	r11, r27
    1002:	e8 f4       	brcc	.+58     	; 0x103e <create_chain+0x8a>
    1004:	21 c0       	rjmp	.+66     	; 0x1048 <create_chain+0x94>
	}
	else {					/* Stretch existing chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    1006:	c1 01       	movw	r24, r2
    1008:	0e 94 33 06 	call	0xc66	; 0xc66 <get_fat>
    100c:	9b 01       	movw	r18, r22
    100e:	ac 01       	movw	r20, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
    1010:	62 30       	cpi	r22, 0x02	; 2
    1012:	71 05       	cpc	r23, r1
    1014:	81 05       	cpc	r24, r1
    1016:	91 05       	cpc	r25, r1
    1018:	28 f4       	brcc	.+10     	; 0x1024 <create_chain+0x70>
    101a:	21 e0       	ldi	r18, 0x01	; 1
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	40 e0       	ldi	r20, 0x00	; 0
    1020:	50 e0       	ldi	r21, 0x00	; 0
    1022:	93 c0       	rjmp	.+294    	; 0x114a <__stack+0x4b>
		if (cs < mcl) return cs;		/* It is already followed by next cluster */
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	9a 81       	ldd	r25, Y+2	; 0x02
    1028:	ab 81       	ldd	r26, Y+3	; 0x03
    102a:	bc 81       	ldd	r27, Y+4	; 0x04
    102c:	28 17       	cp	r18, r24
    102e:	39 07       	cpc	r19, r25
    1030:	4a 07       	cpc	r20, r26
    1032:	5b 07       	cpc	r21, r27
    1034:	08 f4       	brcc	.+2      	; 0x1038 <create_chain+0x84>
    1036:	89 c0       	rjmp	.+274    	; 0x114a <__stack+0x4b>
    1038:	53 01       	movw	r10, r6
    103a:	42 01       	movw	r8, r4
    103c:	05 c0       	rjmp	.+10     	; 0x1048 <create_chain+0x94>
    103e:	41 e0       	ldi	r20, 0x01	; 1
    1040:	84 2e       	mov	r8, r20
    1042:	91 2c       	mov	r9, r1
    1044:	a1 2c       	mov	r10, r1
    1046:	b1 2c       	mov	r11, r1
    1048:	75 01       	movw	r14, r10
    104a:	64 01       	movw	r12, r8
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    104c:	08 94       	sec
    104e:	c1 1c       	adc	r12, r1
    1050:	d1 1c       	adc	r13, r1
    1052:	e1 1c       	adc	r14, r1
    1054:	f1 1c       	adc	r15, r1
		if (ncl >= mcl) {				/* Wrap around */
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	9a 81       	ldd	r25, Y+2	; 0x02
    105a:	ab 81       	ldd	r26, Y+3	; 0x03
    105c:	bc 81       	ldd	r27, Y+4	; 0x04
    105e:	c8 16       	cp	r12, r24
    1060:	d9 06       	cpc	r13, r25
    1062:	ea 06       	cpc	r14, r26
    1064:	fb 06       	cpc	r15, r27
    1066:	60 f0       	brcs	.+24     	; 0x1080 <create_chain+0xcc>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free custer */
    1068:	92 e0       	ldi	r25, 0x02	; 2
    106a:	89 16       	cp	r8, r25
    106c:	91 04       	cpc	r9, r1
    106e:	a1 04       	cpc	r10, r1
    1070:	b1 04       	cpc	r11, r1
    1072:	08 f4       	brcc	.+2      	; 0x1076 <create_chain+0xc2>
    1074:	61 c0       	rjmp	.+194    	; 0x1138 <__stack+0x39>
    1076:	32 e0       	ldi	r19, 0x02	; 2
    1078:	c3 2e       	mov	r12, r19
    107a:	d1 2c       	mov	r13, r1
    107c:	e1 2c       	mov	r14, r1
    107e:	f1 2c       	mov	r15, r1
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    1080:	c1 01       	movw	r24, r2
    1082:	b7 01       	movw	r22, r14
    1084:	a6 01       	movw	r20, r12
    1086:	0e 94 33 06 	call	0xc66	; 0xc66 <get_fat>
    108a:	9b 01       	movw	r18, r22
    108c:	ac 01       	movw	r20, r24
		if (cs == 0) break;				/* Found a free cluster */
    108e:	61 15       	cp	r22, r1
    1090:	71 05       	cpc	r23, r1
    1092:	81 05       	cpc	r24, r1
    1094:	91 05       	cpc	r25, r1
    1096:	a9 f0       	breq	.+42     	; 0x10c2 <create_chain+0x10e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
    1098:	6f 3f       	cpi	r22, 0xFF	; 255
    109a:	af ef       	ldi	r26, 0xFF	; 255
    109c:	7a 07       	cpc	r23, r26
    109e:	af ef       	ldi	r26, 0xFF	; 255
    10a0:	8a 07       	cpc	r24, r26
    10a2:	af ef       	ldi	r26, 0xFF	; 255
    10a4:	9a 07       	cpc	r25, r26
    10a6:	09 f4       	brne	.+2      	; 0x10aa <create_chain+0xf6>
    10a8:	50 c0       	rjmp	.+160    	; 0x114a <__stack+0x4b>
    10aa:	61 30       	cpi	r22, 0x01	; 1
    10ac:	71 05       	cpc	r23, r1
    10ae:	81 05       	cpc	r24, r1
    10b0:	91 05       	cpc	r25, r1
    10b2:	09 f4       	brne	.+2      	; 0x10b6 <create_chain+0x102>
    10b4:	4a c0       	rjmp	.+148    	; 0x114a <__stack+0x4b>
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
    10b6:	c8 14       	cp	r12, r8
    10b8:	d9 04       	cpc	r13, r9
    10ba:	ea 04       	cpc	r14, r10
    10bc:	fb 04       	cpc	r15, r11
    10be:	31 f6       	brne	.-116    	; 0x104c <create_chain+0x98>
    10c0:	3b c0       	rjmp	.+118    	; 0x1138 <__stack+0x39>
    10c2:	bc 2c       	mov	r11, r12
    10c4:	ad 2c       	mov	r10, r13
    10c6:	9e 2c       	mov	r9, r14
    10c8:	8f 2c       	mov	r8, r15
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
    10ca:	c1 01       	movw	r24, r2
    10cc:	a6 01       	movw	r20, r12
    10ce:	b7 01       	movw	r22, r14
    10d0:	0f ef       	ldi	r16, 0xFF	; 255
    10d2:	1f ef       	ldi	r17, 0xFF	; 255
    10d4:	2f ef       	ldi	r18, 0xFF	; 255
    10d6:	3f e0       	ldi	r19, 0x0F	; 15
    10d8:	0e 94 69 05 	call	0xad2	; 0xad2 <put_fat>
    10dc:	89 2b       	or	r24, r25
    10de:	89 f5       	brne	.+98     	; 0x1142 <__stack+0x43>
		return 0xFFFFFFFF;
	if (clst != 0) {					/* Link it to the previous one if needed */
    10e0:	41 14       	cp	r4, r1
    10e2:	51 04       	cpc	r5, r1
    10e4:	61 04       	cpc	r6, r1
    10e6:	71 04       	cpc	r7, r1
    10e8:	49 f0       	breq	.+18     	; 0x10fc <create_chain+0x148>
		if (put_fat(fs, clst, ncl))
    10ea:	c1 01       	movw	r24, r2
    10ec:	b3 01       	movw	r22, r6
    10ee:	a2 01       	movw	r20, r4
    10f0:	86 01       	movw	r16, r12
    10f2:	97 01       	movw	r18, r14
    10f4:	0e 94 69 05 	call	0xad2	; 0xad2 <put_fat>
    10f8:	89 2b       	or	r24, r25
    10fa:	19 f5       	brne	.+70     	; 0x1142 <__stack+0x43>
			return 0xFFFFFFFF;
	}

	fs->last_clust = ncl;				/* Update FSINFO */
    10fc:	f1 01       	movw	r30, r2
    10fe:	b2 86       	std	Z+10, r11	; 0x0a
    1100:	a3 86       	std	Z+11, r10	; 0x0b
    1102:	94 86       	std	Z+12, r9	; 0x0c
    1104:	85 86       	std	Z+13, r8	; 0x0d
	if (fs->free_clust != 0xFFFFFFFF) {
    1106:	86 85       	ldd	r24, Z+14	; 0x0e
    1108:	97 85       	ldd	r25, Z+15	; 0x0f
    110a:	a0 89       	ldd	r26, Z+16	; 0x10
    110c:	b1 89       	ldd	r27, Z+17	; 0x11
    110e:	8f 3f       	cpi	r24, 0xFF	; 255
    1110:	ff ef       	ldi	r31, 0xFF	; 255
    1112:	9f 07       	cpc	r25, r31
    1114:	ff ef       	ldi	r31, 0xFF	; 255
    1116:	af 07       	cpc	r26, r31
    1118:	ff ef       	ldi	r31, 0xFF	; 255
    111a:	bf 07       	cpc	r27, r31
    111c:	51 f0       	breq	.+20     	; 0x1132 <__stack+0x33>
		fs->free_clust--;
    111e:	01 97       	sbiw	r24, 0x01	; 1
    1120:	a1 09       	sbc	r26, r1
    1122:	b1 09       	sbc	r27, r1
    1124:	f1 01       	movw	r30, r2
    1126:	86 87       	std	Z+14, r24	; 0x0e
    1128:	97 87       	std	Z+15, r25	; 0x0f
    112a:	a0 8b       	std	Z+16, r26	; 0x10
    112c:	b1 8b       	std	Z+17, r27	; 0x11
		fs->fsi_flag = 1;
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	85 83       	std	Z+5, r24	; 0x05
    1132:	a7 01       	movw	r20, r14
    1134:	96 01       	movw	r18, r12
    1136:	09 c0       	rjmp	.+18     	; 0x114a <__stack+0x4b>
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	40 e0       	ldi	r20, 0x00	; 0
    113e:	50 e0       	ldi	r21, 0x00	; 0
    1140:	04 c0       	rjmp	.+8      	; 0x114a <__stack+0x4b>
    1142:	2f ef       	ldi	r18, 0xFF	; 255
    1144:	3f ef       	ldi	r19, 0xFF	; 255
    1146:	4f ef       	ldi	r20, 0xFF	; 255
    1148:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return ncl;		/* Return new cluster number */
}
    114a:	b9 01       	movw	r22, r18
    114c:	ca 01       	movw	r24, r20
    114e:	24 96       	adiw	r28, 0x04	; 4
    1150:	e2 e1       	ldi	r30, 0x12	; 18
    1152:	0c 94 be 2e 	jmp	0x5d7c	; 0x5d7c <__epilogue_restores__>

00001156 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    1156:	a6 e0       	ldi	r26, 0x06	; 6
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e1 eb       	ldi	r30, 0xB1	; 177
    115c:	f8 e0       	ldi	r31, 0x08	; 8
    115e:	0c 94 a2 2e 	jmp	0x5d44	; 0x5d44 <__prologue_saves__>
    1162:	9e 83       	std	Y+6, r25	; 0x06
    1164:	8d 83       	std	Y+5, r24	; 0x05
    1166:	3a 01       	movw	r6, r20
    1168:	4b 01       	movw	r8, r22
	FRESULT res;
	DWORD clst, bcs, nsect, ifptr;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    116a:	dc 01       	movw	r26, r24
    116c:	12 96       	adiw	r26, 0x02	; 2
    116e:	6d 91       	ld	r22, X+
    1170:	7c 91       	ld	r23, X
    1172:	13 97       	sbiw	r26, 0x03	; 3
    1174:	8d 91       	ld	r24, X+
    1176:	9c 91       	ld	r25, X
    1178:	0e 94 e5 04 	call	0x9ca	; 0x9ca <validate>
    117c:	9c 83       	std	Y+4, r25	; 0x04
    117e:	8b 83       	std	Y+3, r24	; 0x03
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    1180:	89 2b       	or	r24, r25
    1182:	09 f0       	breq	.+2      	; 0x1186 <f_lseek+0x30>
    1184:	c7 c1       	rjmp	.+910    	; 0x1514 <f_lseek+0x3be>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    1186:	ed 81       	ldd	r30, Y+5	; 0x05
    1188:	fe 81       	ldd	r31, Y+6	; 0x06
    118a:	84 81       	ldd	r24, Z+4	; 0x04
    118c:	87 fd       	sbrc	r24, 7
    118e:	92 c0       	rjmp	.+292    	; 0x12b4 <f_lseek+0x15e>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    1190:	ad 81       	ldd	r26, Y+5	; 0x05
    1192:	be 81       	ldd	r27, Y+6	; 0x06
    1194:	1a 96       	adiw	r26, 0x0a	; 10
    1196:	ad 90       	ld	r10, X+
    1198:	bd 90       	ld	r11, X+
    119a:	cd 90       	ld	r12, X+
    119c:	dc 90       	ld	r13, X
    119e:	1d 97       	sbiw	r26, 0x0d	; 13
    11a0:	a6 14       	cp	r10, r6
    11a2:	b7 04       	cpc	r11, r7
    11a4:	c8 04       	cpc	r12, r8
    11a6:	d9 04       	cpc	r13, r9
    11a8:	10 f4       	brcc	.+4      	; 0x11ae <f_lseek+0x58>
    11aa:	81 ff       	sbrs	r24, 1
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <f_lseek+0x5c>
    11ae:	64 01       	movw	r12, r8
    11b0:	53 01       	movw	r10, r6
#if !_FS_READONLY
		 && !(fp->flag & FA_WRITE)
#endif
		) ofs = fp->fsize;

	ifptr = fp->fptr;
    11b2:	ed 81       	ldd	r30, Y+5	; 0x05
    11b4:	fe 81       	ldd	r31, Y+6	; 0x06
    11b6:	26 81       	ldd	r18, Z+6	; 0x06
    11b8:	37 81       	ldd	r19, Z+7	; 0x07
    11ba:	40 85       	ldd	r20, Z+8	; 0x08
    11bc:	51 85       	ldd	r21, Z+9	; 0x09
	fp->fptr = nsect = 0; fp->csect = 255;
    11be:	16 82       	std	Z+6, r1	; 0x06
    11c0:	17 82       	std	Z+7, r1	; 0x07
    11c2:	10 86       	std	Z+8, r1	; 0x08
    11c4:	11 86       	std	Z+9, r1	; 0x09
    11c6:	8f ef       	ldi	r24, 0xFF	; 255
    11c8:	85 83       	std	Z+5, r24	; 0x05
	if (ofs > 0) {
    11ca:	a1 14       	cp	r10, r1
    11cc:	b1 04       	cpc	r11, r1
    11ce:	c1 04       	cpc	r12, r1
    11d0:	d1 04       	cpc	r13, r1
    11d2:	09 f4       	brne	.+2      	; 0x11d6 <f_lseek+0x80>
    11d4:	6b c1       	rjmp	.+726    	; 0x14ac <f_lseek+0x356>
		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    11d6:	01 90       	ld	r0, Z+
    11d8:	f0 81       	ld	r31, Z
    11da:	e0 2d       	mov	r30, r0
    11dc:	fa 83       	std	Y+2, r31	; 0x02
    11de:	e9 83       	std	Y+1, r30	; 0x01
    11e0:	82 81       	ldd	r24, Z+2	; 0x02
    11e2:	68 2e       	mov	r6, r24
    11e4:	77 24       	eor	r7, r7
    11e6:	88 24       	eor	r8, r8
    11e8:	99 24       	eor	r9, r9
    11ea:	69 e0       	ldi	r22, 0x09	; 9
    11ec:	66 0c       	add	r6, r6
    11ee:	77 1c       	adc	r7, r7
    11f0:	88 1c       	adc	r8, r8
    11f2:	99 1c       	adc	r9, r9
    11f4:	6a 95       	dec	r22
    11f6:	d1 f7       	brne	.-12     	; 0x11ec <f_lseek+0x96>
		if (ifptr > 0 &&
    11f8:	21 15       	cp	r18, r1
    11fa:	31 05       	cpc	r19, r1
    11fc:	41 05       	cpc	r20, r1
    11fe:	51 05       	cpc	r21, r1
    1200:	c1 f1       	breq	.+112    	; 0x1272 <f_lseek+0x11c>
    1202:	19 01       	movw	r2, r18
    1204:	2a 01       	movw	r4, r20
    1206:	08 94       	sec
    1208:	21 08       	sbc	r2, r1
    120a:	31 08       	sbc	r3, r1
    120c:	41 08       	sbc	r4, r1
    120e:	51 08       	sbc	r5, r1
    1210:	c6 01       	movw	r24, r12
    1212:	b5 01       	movw	r22, r10
    1214:	61 50       	subi	r22, 0x01	; 1
    1216:	70 40       	sbci	r23, 0x00	; 0
    1218:	80 40       	sbci	r24, 0x00	; 0
    121a:	90 40       	sbci	r25, 0x00	; 0
    121c:	a4 01       	movw	r20, r8
    121e:	93 01       	movw	r18, r6
    1220:	0e 94 80 2e 	call	0x5d00	; 0x5d00 <__udivmodsi4>
    1224:	79 01       	movw	r14, r18
    1226:	8a 01       	movw	r16, r20
    1228:	c2 01       	movw	r24, r4
    122a:	b1 01       	movw	r22, r2
    122c:	a4 01       	movw	r20, r8
    122e:	93 01       	movw	r18, r6
    1230:	0e 94 80 2e 	call	0x5d00	; 0x5d00 <__udivmodsi4>
    1234:	e2 16       	cp	r14, r18
    1236:	f3 06       	cpc	r15, r19
    1238:	04 07       	cpc	r16, r20
    123a:	15 07       	cpc	r17, r21
    123c:	d0 f0       	brcs	.+52     	; 0x1272 <f_lseek+0x11c>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    123e:	88 27       	eor	r24, r24
    1240:	99 27       	eor	r25, r25
    1242:	dc 01       	movw	r26, r24
    1244:	86 19       	sub	r24, r6
    1246:	97 09       	sbc	r25, r7
    1248:	a8 09       	sbc	r26, r8
    124a:	b9 09       	sbc	r27, r9
    124c:	82 21       	and	r24, r2
    124e:	93 21       	and	r25, r3
    1250:	a4 21       	and	r26, r4
    1252:	b5 21       	and	r27, r5
    1254:	ed 81       	ldd	r30, Y+5	; 0x05
    1256:	fe 81       	ldd	r31, Y+6	; 0x06
    1258:	86 83       	std	Z+6, r24	; 0x06
    125a:	97 83       	std	Z+7, r25	; 0x07
    125c:	a0 87       	std	Z+8, r26	; 0x08
    125e:	b1 87       	std	Z+9, r27	; 0x09
			ofs -= fp->fptr;
    1260:	a8 1a       	sub	r10, r24
    1262:	b9 0a       	sbc	r11, r25
    1264:	ca 0a       	sbc	r12, r26
    1266:	db 0a       	sbc	r13, r27
			clst = fp->curr_clust;
    1268:	42 89       	ldd	r20, Z+18	; 0x12
    126a:	53 89       	ldd	r21, Z+19	; 0x13
    126c:	64 89       	ldd	r22, Z+20	; 0x14
    126e:	75 89       	ldd	r23, Z+21	; 0x15
    1270:	47 c0       	rjmp	.+142    	; 0x1300 <f_lseek+0x1aa>
		} else {									/* When seek to back cluster, */
			clst = fp->org_clust;					/* start from the first cluster */
    1272:	ad 81       	ldd	r26, Y+5	; 0x05
    1274:	be 81       	ldd	r27, Y+6	; 0x06
    1276:	1e 96       	adiw	r26, 0x0e	; 14
    1278:	4d 91       	ld	r20, X+
    127a:	5d 91       	ld	r21, X+
    127c:	6d 91       	ld	r22, X+
    127e:	7c 91       	ld	r23, X
    1280:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
			if (clst == 0) {						/* If no cluster chain, create a new chain */
    1282:	41 15       	cp	r20, r1
    1284:	51 05       	cpc	r21, r1
    1286:	61 05       	cpc	r22, r1
    1288:	71 05       	cpc	r23, r1
    128a:	a1 f5       	brne	.+104    	; 0x12f4 <f_lseek+0x19e>
				clst = create_chain(fp->fs, 0);
    128c:	89 81       	ldd	r24, Y+1	; 0x01
    128e:	9a 81       	ldd	r25, Y+2	; 0x02
    1290:	40 e0       	ldi	r20, 0x00	; 0
    1292:	50 e0       	ldi	r21, 0x00	; 0
    1294:	60 e0       	ldi	r22, 0x00	; 0
    1296:	70 e0       	ldi	r23, 0x00	; 0
    1298:	0e 94 da 07 	call	0xfb4	; 0xfb4 <create_chain>
    129c:	ab 01       	movw	r20, r22
    129e:	bc 01       	movw	r22, r24
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    12a0:	41 30       	cpi	r20, 0x01	; 1
    12a2:	51 05       	cpc	r21, r1
    12a4:	61 05       	cpc	r22, r1
    12a6:	71 05       	cpc	r23, r1
    12a8:	51 f4       	brne	.+20     	; 0x12be <f_lseek+0x168>
    12aa:	ed 81       	ldd	r30, Y+5	; 0x05
    12ac:	fe 81       	ldd	r31, Y+6	; 0x06
    12ae:	84 81       	ldd	r24, Z+4	; 0x04
    12b0:	80 68       	ori	r24, 0x80	; 128
    12b2:	84 83       	std	Z+4, r24	; 0x04
    12b4:	82 e0       	ldi	r24, 0x02	; 2
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	9c 83       	std	Y+4, r25	; 0x04
    12ba:	8b 83       	std	Y+3, r24	; 0x03
    12bc:	2b c1       	rjmp	.+598    	; 0x1514 <f_lseek+0x3be>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    12be:	4f 3f       	cpi	r20, 0xFF	; 255
    12c0:	9f ef       	ldi	r25, 0xFF	; 255
    12c2:	59 07       	cpc	r21, r25
    12c4:	9f ef       	ldi	r25, 0xFF	; 255
    12c6:	69 07       	cpc	r22, r25
    12c8:	9f ef       	ldi	r25, 0xFF	; 255
    12ca:	79 07       	cpc	r23, r25
    12cc:	59 f4       	brne	.+22     	; 0x12e4 <f_lseek+0x18e>
    12ce:	ad 81       	ldd	r26, Y+5	; 0x05
    12d0:	be 81       	ldd	r27, Y+6	; 0x06
    12d2:	14 96       	adiw	r26, 0x04	; 4
    12d4:	8c 91       	ld	r24, X
    12d6:	14 97       	sbiw	r26, 0x04	; 4
    12d8:	80 68       	ori	r24, 0x80	; 128
    12da:	14 96       	adiw	r26, 0x04	; 4
    12dc:	8c 93       	st	X, r24
    12de:	e1 e0       	ldi	r30, 0x01	; 1
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	d7 c0       	rjmp	.+430    	; 0x1492 <f_lseek+0x33c>
				fp->org_clust = clst;
    12e4:	ad 81       	ldd	r26, Y+5	; 0x05
    12e6:	be 81       	ldd	r27, Y+6	; 0x06
    12e8:	1e 96       	adiw	r26, 0x0e	; 14
    12ea:	4d 93       	st	X+, r20
    12ec:	5d 93       	st	X+, r21
    12ee:	6d 93       	st	X+, r22
    12f0:	7c 93       	st	X, r23
    12f2:	51 97       	sbiw	r26, 0x11	; 17
			}
#endif
			fp->curr_clust = clst;
    12f4:	ed 81       	ldd	r30, Y+5	; 0x05
    12f6:	fe 81       	ldd	r31, Y+6	; 0x06
    12f8:	42 8b       	std	Z+18, r20	; 0x12
    12fa:	53 8b       	std	Z+19, r21	; 0x13
    12fc:	64 8b       	std	Z+20, r22	; 0x14
    12fe:	75 8b       	std	Z+21, r23	; 0x15
		}
		if (clst != 0) {
    1300:	41 15       	cp	r20, r1
    1302:	51 05       	cpc	r21, r1
    1304:	61 05       	cpc	r22, r1
    1306:	71 05       	cpc	r23, r1
    1308:	09 f0       	breq	.+2      	; 0x130c <f_lseek+0x1b6>
    130a:	59 c0       	rjmp	.+178    	; 0x13be <f_lseek+0x268>
    130c:	cf c0       	rjmp	.+414    	; 0x14ac <f_lseek+0x356>
			while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    130e:	ad 81       	ldd	r26, Y+5	; 0x05
    1310:	be 81       	ldd	r27, Y+6	; 0x06
    1312:	14 96       	adiw	r26, 0x04	; 4
    1314:	8c 91       	ld	r24, X
    1316:	14 97       	sbiw	r26, 0x04	; 4
    1318:	2d 91       	ld	r18, X+
    131a:	3c 91       	ld	r19, X
    131c:	81 ff       	sbrs	r24, 1
    131e:	0d c0       	rjmp	.+26     	; 0x133a <f_lseek+0x1e4>
					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
    1320:	c9 01       	movw	r24, r18
    1322:	0e 94 da 07 	call	0xfb4	; 0xfb4 <create_chain>
    1326:	ab 01       	movw	r20, r22
    1328:	bc 01       	movw	r22, r24
					if (clst == 0) {				/* When disk gets full, clip file size */
    132a:	41 15       	cp	r20, r1
    132c:	51 05       	cpc	r21, r1
    132e:	61 05       	cpc	r22, r1
    1330:	71 05       	cpc	r23, r1
    1332:	41 f4       	brne	.+16     	; 0x1344 <f_lseek+0x1ee>
    1334:	64 01       	movw	r12, r8
    1336:	53 01       	movw	r10, r6
    1338:	48 c0       	rjmp	.+144    	; 0x13ca <f_lseek+0x274>
						ofs = bcs; break;
					}
				} else
#endif
					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    133a:	c9 01       	movw	r24, r18
    133c:	0e 94 33 06 	call	0xc66	; 0xc66 <get_fat>
    1340:	ab 01       	movw	r20, r22
    1342:	bc 01       	movw	r22, r24
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    1344:	4f 3f       	cpi	r20, 0xFF	; 255
    1346:	bf ef       	ldi	r27, 0xFF	; 255
    1348:	5b 07       	cpc	r21, r27
    134a:	bf ef       	ldi	r27, 0xFF	; 255
    134c:	6b 07       	cpc	r22, r27
    134e:	bf ef       	ldi	r27, 0xFF	; 255
    1350:	7b 07       	cpc	r23, r27
    1352:	41 f4       	brne	.+16     	; 0x1364 <f_lseek+0x20e>
    1354:	ed 81       	ldd	r30, Y+5	; 0x05
    1356:	fe 81       	ldd	r31, Y+6	; 0x06
    1358:	84 81       	ldd	r24, Z+4	; 0x04
    135a:	80 68       	ori	r24, 0x80	; 128
    135c:	84 83       	std	Z+4, r24	; 0x04
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	aa cf       	rjmp	.-172    	; 0x12b8 <f_lseek+0x162>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
    1364:	42 30       	cpi	r20, 0x02	; 2
    1366:	51 05       	cpc	r21, r1
    1368:	61 05       	cpc	r22, r1
    136a:	71 05       	cpc	r23, r1
    136c:	08 f4       	brcc	.+2      	; 0x1370 <f_lseek+0x21a>
    136e:	9d cf       	rjmp	.-198    	; 0x12aa <f_lseek+0x154>
    1370:	ad 81       	ldd	r26, Y+5	; 0x05
    1372:	be 81       	ldd	r27, Y+6	; 0x06
    1374:	ed 91       	ld	r30, X+
    1376:	fc 91       	ld	r31, X
    1378:	86 8d       	ldd	r24, Z+30	; 0x1e
    137a:	97 8d       	ldd	r25, Z+31	; 0x1f
    137c:	a0 a1       	ldd	r26, Z+32	; 0x20
    137e:	b1 a1       	ldd	r27, Z+33	; 0x21
    1380:	48 17       	cp	r20, r24
    1382:	59 07       	cpc	r21, r25
    1384:	6a 07       	cpc	r22, r26
    1386:	7b 07       	cpc	r23, r27
    1388:	08 f0       	brcs	.+2      	; 0x138c <f_lseek+0x236>
    138a:	8f cf       	rjmp	.-226    	; 0x12aa <f_lseek+0x154>
				fp->curr_clust = clst;
    138c:	ad 81       	ldd	r26, Y+5	; 0x05
    138e:	be 81       	ldd	r27, Y+6	; 0x06
    1390:	52 96       	adiw	r26, 0x12	; 18
    1392:	4d 93       	st	X+, r20
    1394:	5d 93       	st	X+, r21
    1396:	6d 93       	st	X+, r22
    1398:	7c 93       	st	X, r23
    139a:	55 97       	sbiw	r26, 0x15	; 21
				fp->fptr += bcs;
    139c:	fd 01       	movw	r30, r26
    139e:	86 81       	ldd	r24, Z+6	; 0x06
    13a0:	97 81       	ldd	r25, Z+7	; 0x07
    13a2:	a0 85       	ldd	r26, Z+8	; 0x08
    13a4:	b1 85       	ldd	r27, Z+9	; 0x09
    13a6:	86 0d       	add	r24, r6
    13a8:	97 1d       	adc	r25, r7
    13aa:	a8 1d       	adc	r26, r8
    13ac:	b9 1d       	adc	r27, r9
    13ae:	86 83       	std	Z+6, r24	; 0x06
    13b0:	97 83       	std	Z+7, r25	; 0x07
    13b2:	a0 87       	std	Z+8, r26	; 0x08
    13b4:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= bcs;
    13b6:	a6 18       	sub	r10, r6
    13b8:	b7 08       	sbc	r11, r7
    13ba:	c8 08       	sbc	r12, r8
    13bc:	d9 08       	sbc	r13, r9
			}
#endif
			fp->curr_clust = clst;
		}
		if (clst != 0) {
			while (ofs > bcs) {						/* Cluster following loop */
    13be:	6a 14       	cp	r6, r10
    13c0:	7b 04       	cpc	r7, r11
    13c2:	8c 04       	cpc	r8, r12
    13c4:	9d 04       	cpc	r9, r13
    13c6:	08 f4       	brcc	.+2      	; 0x13ca <f_lseek+0x274>
    13c8:	a2 cf       	rjmp	.-188    	; 0x130e <f_lseek+0x1b8>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
				fp->curr_clust = clst;
				fp->fptr += bcs;
				ofs -= bcs;
			}
			fp->fptr += ofs;
    13ca:	ed 81       	ldd	r30, Y+5	; 0x05
    13cc:	fe 81       	ldd	r31, Y+6	; 0x06
    13ce:	86 81       	ldd	r24, Z+6	; 0x06
    13d0:	97 81       	ldd	r25, Z+7	; 0x07
    13d2:	a0 85       	ldd	r26, Z+8	; 0x08
    13d4:	b1 85       	ldd	r27, Z+9	; 0x09
    13d6:	8a 0d       	add	r24, r10
    13d8:	9b 1d       	adc	r25, r11
    13da:	ac 1d       	adc	r26, r12
    13dc:	bd 1d       	adc	r27, r13
    13de:	86 83       	std	Z+6, r24	; 0x06
    13e0:	97 83       	std	Z+7, r25	; 0x07
    13e2:	a0 87       	std	Z+8, r26	; 0x08
    13e4:	b1 87       	std	Z+9, r27	; 0x09
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
    13e6:	d6 01       	movw	r26, r12
    13e8:	c5 01       	movw	r24, r10
    13ea:	29 e0       	ldi	r18, 0x09	; 9
    13ec:	b6 95       	lsr	r27
    13ee:	a7 95       	ror	r26
    13f0:	97 95       	ror	r25
    13f2:	87 95       	ror	r24
    13f4:	2a 95       	dec	r18
    13f6:	d1 f7       	brne	.-12     	; 0x13ec <f_lseek+0x296>
    13f8:	e8 2e       	mov	r14, r24
    13fa:	85 83       	std	Z+5, r24	; 0x05
			if (ofs % SS(fp->fs)) {
    13fc:	8f ef       	ldi	r24, 0xFF	; 255
    13fe:	91 e0       	ldi	r25, 0x01	; 1
    1400:	a0 e0       	ldi	r26, 0x00	; 0
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	a8 22       	and	r10, r24
    1406:	b9 22       	and	r11, r25
    1408:	ca 22       	and	r12, r26
    140a:	db 22       	and	r13, r27
    140c:	a1 14       	cp	r10, r1
    140e:	b1 04       	cpc	r11, r1
    1410:	c1 04       	cpc	r12, r1
    1412:	d1 04       	cpc	r13, r1
    1414:	09 f4       	brne	.+2      	; 0x1418 <f_lseek+0x2c2>
    1416:	4a c0       	rjmp	.+148    	; 0x14ac <f_lseek+0x356>
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
    1418:	80 80       	ld	r8, Z
    141a:	91 80       	ldd	r9, Z+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    141c:	ee ef       	ldi	r30, 0xFE	; 254
    141e:	ae 2e       	mov	r10, r30
    1420:	ef ef       	ldi	r30, 0xFF	; 255
    1422:	be 2e       	mov	r11, r30
    1424:	ef ef       	ldi	r30, 0xFF	; 255
    1426:	ce 2e       	mov	r12, r30
    1428:	ef ef       	ldi	r30, 0xFF	; 255
    142a:	de 2e       	mov	r13, r30
    142c:	a4 0e       	add	r10, r20
    142e:	b5 1e       	adc	r11, r21
    1430:	c6 1e       	adc	r12, r22
    1432:	d7 1e       	adc	r13, r23
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1434:	f4 01       	movw	r30, r8
    1436:	86 8d       	ldd	r24, Z+30	; 0x1e
    1438:	97 8d       	ldd	r25, Z+31	; 0x1f
    143a:	a0 a1       	ldd	r26, Z+32	; 0x20
    143c:	b1 a1       	ldd	r27, Z+33	; 0x21
    143e:	02 97       	sbiw	r24, 0x02	; 2
    1440:	a1 09       	sbc	r26, r1
    1442:	b1 09       	sbc	r27, r1
    1444:	a8 16       	cp	r10, r24
    1446:	b9 06       	cpc	r11, r25
    1448:	ca 06       	cpc	r12, r26
    144a:	db 06       	cpc	r13, r27
    144c:	c0 f4       	brcc	.+48     	; 0x147e <f_lseek+0x328>
	return clst * fs->csize + fs->database;
    144e:	22 81       	ldd	r18, Z+2	; 0x02
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	40 e0       	ldi	r20, 0x00	; 0
    1454:	50 e0       	ldi	r21, 0x00	; 0
    1456:	c6 01       	movw	r24, r12
    1458:	b5 01       	movw	r22, r10
    145a:	0e 94 2e 2e 	call	0x5c5c	; 0x5c5c <__mulsi3>
    145e:	9b 01       	movw	r18, r22
    1460:	ac 01       	movw	r20, r24
    1462:	f4 01       	movw	r30, r8
    1464:	82 a5       	ldd	r24, Z+42	; 0x2a
    1466:	93 a5       	ldd	r25, Z+43	; 0x2b
    1468:	a4 a5       	ldd	r26, Z+44	; 0x2c
    146a:	b5 a5       	ldd	r27, Z+45	; 0x2d
    146c:	28 0f       	add	r18, r24
    146e:	39 1f       	adc	r19, r25
    1470:	4a 1f       	adc	r20, r26
    1472:	5b 1f       	adc	r21, r27
			}
			fp->fptr += ofs;
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
			if (ofs % SS(fp->fs)) {
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    1474:	21 15       	cp	r18, r1
    1476:	31 05       	cpc	r19, r1
    1478:	41 05       	cpc	r20, r1
    147a:	51 05       	cpc	r21, r1
    147c:	69 f4       	brne	.+26     	; 0x1498 <f_lseek+0x342>
    147e:	ad 81       	ldd	r26, Y+5	; 0x05
    1480:	be 81       	ldd	r27, Y+6	; 0x06
    1482:	14 96       	adiw	r26, 0x04	; 4
    1484:	8c 91       	ld	r24, X
    1486:	14 97       	sbiw	r26, 0x04	; 4
    1488:	80 68       	ori	r24, 0x80	; 128
    148a:	14 96       	adiw	r26, 0x04	; 4
    148c:	8c 93       	st	X, r24
    148e:	e2 e0       	ldi	r30, 0x02	; 2
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	fc 83       	std	Y+4, r31	; 0x04
    1494:	eb 83       	std	Y+3, r30	; 0x03
    1496:	3e c0       	rjmp	.+124    	; 0x1514 <f_lseek+0x3be>
				nsect += fp->csect;
    1498:	2e 0d       	add	r18, r14
    149a:	31 1d       	adc	r19, r1
    149c:	41 1d       	adc	r20, r1
    149e:	51 1d       	adc	r21, r1
				fp->csect++;
    14a0:	e3 94       	inc	r14
    14a2:	ad 81       	ldd	r26, Y+5	; 0x05
    14a4:	be 81       	ldd	r27, Y+6	; 0x06
    14a6:	15 96       	adiw	r26, 0x05	; 5
    14a8:	ec 92       	st	X, r14
    14aa:	04 c0       	rjmp	.+8      	; 0x14b4 <f_lseek+0x35e>
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	40 e0       	ldi	r20, 0x00	; 0
    14b2:	50 e0       	ldi	r21, 0x00	; 0
			}
		}
	}
	if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
    14b4:	ed 81       	ldd	r30, Y+5	; 0x05
    14b6:	fe 81       	ldd	r31, Y+6	; 0x06
    14b8:	86 81       	ldd	r24, Z+6	; 0x06
    14ba:	97 81       	ldd	r25, Z+7	; 0x07
    14bc:	a0 85       	ldd	r26, Z+8	; 0x08
    14be:	b1 85       	ldd	r27, Z+9	; 0x09
    14c0:	91 70       	andi	r25, 0x01	; 1
    14c2:	a0 70       	andi	r26, 0x00	; 0
    14c4:	b0 70       	andi	r27, 0x00	; 0
    14c6:	00 97       	sbiw	r24, 0x00	; 0
    14c8:	a1 05       	cpc	r26, r1
    14ca:	b1 05       	cpc	r27, r1
    14cc:	69 f0       	breq	.+26     	; 0x14e8 <f_lseek+0x392>
    14ce:	86 89       	ldd	r24, Z+22	; 0x16
    14d0:	97 89       	ldd	r25, Z+23	; 0x17
    14d2:	a0 8d       	ldd	r26, Z+24	; 0x18
    14d4:	b1 8d       	ldd	r27, Z+25	; 0x19
    14d6:	28 17       	cp	r18, r24
    14d8:	39 07       	cpc	r19, r25
    14da:	4a 07       	cpc	r20, r26
    14dc:	5b 07       	cpc	r21, r27
    14de:	21 f0       	breq	.+8      	; 0x14e8 <f_lseek+0x392>
		}
#endif
		if (disk_read(fp->fs->drive, fp->buf, nsect, 1) != RES_OK)
			ABORT(fp->fs, FR_DISK_ERR);
#endif
		fp->dsect = nsect;
    14e0:	26 8b       	std	Z+22, r18	; 0x16
    14e2:	37 8b       	std	Z+23, r19	; 0x17
    14e4:	40 8f       	std	Z+24, r20	; 0x18
    14e6:	51 8f       	std	Z+25, r21	; 0x19
	}
#if !_FS_READONLY
	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
    14e8:	ed 81       	ldd	r30, Y+5	; 0x05
    14ea:	fe 81       	ldd	r31, Y+6	; 0x06
    14ec:	26 81       	ldd	r18, Z+6	; 0x06
    14ee:	37 81       	ldd	r19, Z+7	; 0x07
    14f0:	40 85       	ldd	r20, Z+8	; 0x08
    14f2:	51 85       	ldd	r21, Z+9	; 0x09
    14f4:	82 85       	ldd	r24, Z+10	; 0x0a
    14f6:	93 85       	ldd	r25, Z+11	; 0x0b
    14f8:	a4 85       	ldd	r26, Z+12	; 0x0c
    14fa:	b5 85       	ldd	r27, Z+13	; 0x0d
    14fc:	82 17       	cp	r24, r18
    14fe:	93 07       	cpc	r25, r19
    1500:	a4 07       	cpc	r26, r20
    1502:	b5 07       	cpc	r27, r21
    1504:	38 f4       	brcc	.+14     	; 0x1514 <f_lseek+0x3be>
		fp->fsize = fp->fptr;
    1506:	22 87       	std	Z+10, r18	; 0x0a
    1508:	33 87       	std	Z+11, r19	; 0x0b
    150a:	44 87       	std	Z+12, r20	; 0x0c
    150c:	55 87       	std	Z+13, r21	; 0x0d
		fp->flag |= FA__WRITTEN;
    150e:	84 81       	ldd	r24, Z+4	; 0x04
    1510:	80 62       	ori	r24, 0x20	; 32
    1512:	84 83       	std	Z+4, r24	; 0x04
	}
#endif

	LEAVE_FF(fp->fs, res);
}
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	9c 81       	ldd	r25, Y+4	; 0x04
    1518:	26 96       	adiw	r28, 0x06	; 6
    151a:	e2 e1       	ldi	r30, 0x12	; 18
    151c:	0c 94 be 2e 	jmp	0x5d7c	; 0x5d7c <__epilogue_restores__>

00001520 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
	DIR *dj,		/* Pointer to directory object */
	BOOL streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
)
{
    1520:	a0 e0       	ldi	r26, 0x00	; 0
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e6 e9       	ldi	r30, 0x96	; 150
    1526:	fa e0       	ldi	r31, 0x0A	; 10
    1528:	0c 94 a4 2e 	jmp	0x5d48	; 0x5d48 <__prologue_saves__+0x4>
    152c:	ec 01       	movw	r28, r24
    152e:	6b 01       	movw	r12, r22
	DWORD clst;
	WORD i;


	i = dj->index + 1;
    1530:	6c 80       	ldd	r6, Y+4	; 0x04
    1532:	7d 80       	ldd	r7, Y+5	; 0x05
    1534:	08 94       	sec
    1536:	61 1c       	adc	r6, r1
    1538:	71 1c       	adc	r7, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    153a:	61 14       	cp	r6, r1
    153c:	71 04       	cpc	r7, r1
    153e:	09 f4       	brne	.+2      	; 0x1542 <dir_next+0x22>
    1540:	4a c1       	rjmp	.+660    	; 0x17d6 <dir_next+0x2b6>
    1542:	8e 85       	ldd	r24, Y+14	; 0x0e
    1544:	9f 85       	ldd	r25, Y+15	; 0x0f
    1546:	a8 89       	ldd	r26, Y+16	; 0x10
    1548:	b9 89       	ldd	r27, Y+17	; 0x11
    154a:	00 97       	sbiw	r24, 0x00	; 0
    154c:	a1 05       	cpc	r26, r1
    154e:	b1 05       	cpc	r27, r1
    1550:	09 f4       	brne	.+2      	; 0x1554 <dir_next+0x34>
    1552:	41 c1       	rjmp	.+642    	; 0x17d6 <dir_next+0x2b6>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
    1554:	2f e0       	ldi	r18, 0x0F	; 15
    1556:	42 2e       	mov	r4, r18
    1558:	51 2c       	mov	r5, r1
    155a:	46 20       	and	r4, r6
    155c:	57 20       	and	r5, r7
    155e:	41 14       	cp	r4, r1
    1560:	51 04       	cpc	r5, r1
    1562:	09 f0       	breq	.+2      	; 0x1566 <dir_next+0x46>
    1564:	27 c1       	rjmp	.+590    	; 0x17b4 <dir_next+0x294>
		dj->sect++;					/* Next sector */
    1566:	01 96       	adiw	r24, 0x01	; 1
    1568:	a1 1d       	adc	r26, r1
    156a:	b1 1d       	adc	r27, r1
    156c:	8e 87       	std	Y+14, r24	; 0x0e
    156e:	9f 87       	std	Y+15, r25	; 0x0f
    1570:	a8 8b       	std	Y+16, r26	; 0x10
    1572:	b9 8b       	std	Y+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    1574:	4a 85       	ldd	r20, Y+10	; 0x0a
    1576:	5b 85       	ldd	r21, Y+11	; 0x0b
    1578:	6c 85       	ldd	r22, Y+12	; 0x0c
    157a:	7d 85       	ldd	r23, Y+13	; 0x0d
    157c:	e8 81       	ld	r30, Y
    157e:	f9 81       	ldd	r31, Y+1	; 0x01
    1580:	41 15       	cp	r20, r1
    1582:	51 05       	cpc	r21, r1
    1584:	61 05       	cpc	r22, r1
    1586:	71 05       	cpc	r23, r1
    1588:	39 f4       	brne	.+14     	; 0x1598 <dir_next+0x78>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    158a:	80 85       	ldd	r24, Z+8	; 0x08
    158c:	91 85       	ldd	r25, Z+9	; 0x09
    158e:	68 16       	cp	r6, r24
    1590:	79 06       	cpc	r7, r25
    1592:	08 f4       	brcc	.+2      	; 0x1596 <dir_next+0x76>
    1594:	0f c1       	rjmp	.+542    	; 0x17b4 <dir_next+0x294>
    1596:	1f c1       	rjmp	.+574    	; 0x17d6 <dir_next+0x2b6>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    1598:	82 81       	ldd	r24, Z+2	; 0x02
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	93 01       	movw	r18, r6
    15a0:	a4 e0       	ldi	r26, 0x04	; 4
    15a2:	36 95       	lsr	r19
    15a4:	27 95       	ror	r18
    15a6:	aa 95       	dec	r26
    15a8:	e1 f7       	brne	.-8      	; 0x15a2 <dir_next+0x82>
    15aa:	82 23       	and	r24, r18
    15ac:	93 23       	and	r25, r19
    15ae:	89 2b       	or	r24, r25
    15b0:	09 f0       	breq	.+2      	; 0x15b4 <dir_next+0x94>
    15b2:	00 c1       	rjmp	.+512    	; 0x17b4 <dir_next+0x294>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    15b4:	cf 01       	movw	r24, r30
    15b6:	0e 94 33 06 	call	0xc66	; 0xc66 <get_fat>
    15ba:	7b 01       	movw	r14, r22
    15bc:	8c 01       	movw	r16, r24
				if (clst <= 1) return FR_INT_ERR;
    15be:	82 e0       	ldi	r24, 0x02	; 2
    15c0:	e8 16       	cp	r14, r24
    15c2:	f1 04       	cpc	r15, r1
    15c4:	01 05       	cpc	r16, r1
    15c6:	11 05       	cpc	r17, r1
    15c8:	08 f4       	brcc	.+2      	; 0x15cc <dir_next+0xac>
    15ca:	08 c1       	rjmp	.+528    	; 0x17dc <dir_next+0x2bc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    15cc:	9f ef       	ldi	r25, 0xFF	; 255
    15ce:	e9 16       	cp	r14, r25
    15d0:	9f ef       	ldi	r25, 0xFF	; 255
    15d2:	f9 06       	cpc	r15, r25
    15d4:	9f ef       	ldi	r25, 0xFF	; 255
    15d6:	09 07       	cpc	r16, r25
    15d8:	9f ef       	ldi	r25, 0xFF	; 255
    15da:	19 07       	cpc	r17, r25
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <dir_next+0xc0>
    15de:	01 c1       	rjmp	.+514    	; 0x17e2 <dir_next+0x2c2>
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
    15e0:	e8 81       	ld	r30, Y
    15e2:	f9 81       	ldd	r31, Y+1	; 0x01
    15e4:	86 8d       	ldd	r24, Z+30	; 0x1e
    15e6:	97 8d       	ldd	r25, Z+31	; 0x1f
    15e8:	a0 a1       	ldd	r26, Z+32	; 0x20
    15ea:	b1 a1       	ldd	r27, Z+33	; 0x21
    15ec:	e8 16       	cp	r14, r24
    15ee:	f9 06       	cpc	r15, r25
    15f0:	0a 07       	cpc	r16, r26
    15f2:	1b 07       	cpc	r17, r27
    15f4:	08 f4       	brcc	.+2      	; 0x15f8 <dir_next+0xd8>
    15f6:	a5 c0       	rjmp	.+330    	; 0x1742 <dir_next+0x222>
#if !_FS_READONLY
					BYTE c;
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
    15f8:	c1 14       	cp	r12, r1
    15fa:	d1 04       	cpc	r13, r1
    15fc:	09 f4       	brne	.+2      	; 0x1600 <dir_next+0xe0>
    15fe:	eb c0       	rjmp	.+470    	; 0x17d6 <dir_next+0x2b6>
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
    1600:	4a 85       	ldd	r20, Y+10	; 0x0a
    1602:	5b 85       	ldd	r21, Y+11	; 0x0b
    1604:	6c 85       	ldd	r22, Y+12	; 0x0c
    1606:	7d 85       	ldd	r23, Y+13	; 0x0d
    1608:	cf 01       	movw	r24, r30
    160a:	0e 94 da 07 	call	0xfb4	; 0xfb4 <create_chain>
    160e:	7b 01       	movw	r14, r22
    1610:	8c 01       	movw	r16, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    1612:	61 15       	cp	r22, r1
    1614:	71 05       	cpc	r23, r1
    1616:	81 05       	cpc	r24, r1
    1618:	91 05       	cpc	r25, r1
    161a:	19 f4       	brne	.+6      	; 0x1622 <dir_next+0x102>
    161c:	27 e0       	ldi	r18, 0x07	; 7
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	e2 c0       	rjmp	.+452    	; 0x17e6 <dir_next+0x2c6>
					if (clst == 1) return FR_INT_ERR;
    1622:	61 30       	cpi	r22, 0x01	; 1
    1624:	71 05       	cpc	r23, r1
    1626:	81 05       	cpc	r24, r1
    1628:	91 05       	cpc	r25, r1
    162a:	09 f4       	brne	.+2      	; 0x162e <dir_next+0x10e>
    162c:	d7 c0       	rjmp	.+430    	; 0x17dc <dir_next+0x2bc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    162e:	6f 3f       	cpi	r22, 0xFF	; 255
    1630:	bf ef       	ldi	r27, 0xFF	; 255
    1632:	7b 07       	cpc	r23, r27
    1634:	bf ef       	ldi	r27, 0xFF	; 255
    1636:	8b 07       	cpc	r24, r27
    1638:	bf ef       	ldi	r27, 0xFF	; 255
    163a:	9b 07       	cpc	r25, r27
    163c:	09 f4       	brne	.+2      	; 0x1640 <dir_next+0x120>
    163e:	d1 c0       	rjmp	.+418    	; 0x17e2 <dir_next+0x2c2>
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    1640:	88 81       	ld	r24, Y
    1642:	99 81       	ldd	r25, Y+1	; 0x01
    1644:	40 e0       	ldi	r20, 0x00	; 0
    1646:	50 e0       	ldi	r21, 0x00	; 0
    1648:	60 e0       	ldi	r22, 0x00	; 0
    164a:	70 e0       	ldi	r23, 0x00	; 0
    164c:	0e 94 ff 04 	call	0x9fe	; 0x9fe <move_window>
    1650:	89 2b       	or	r24, r25
    1652:	09 f0       	breq	.+2      	; 0x1656 <dir_next+0x136>
    1654:	c6 c0       	rjmp	.+396    	; 0x17e2 <dir_next+0x2c2>
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    1656:	88 81       	ld	r24, Y
    1658:	99 81       	ldd	r25, Y+1	; 0x01
    165a:	fc 01       	movw	r30, r24
    165c:	f2 96       	adiw	r30, 0x32	; 50
	while (cnt--) *d++ = (char)val;
    165e:	8e 5c       	subi	r24, 0xCE	; 206
    1660:	9d 4f       	sbci	r25, 0xFD	; 253
    1662:	01 c0       	rjmp	.+2      	; 0x1666 <dir_next+0x146>
    1664:	11 92       	st	Z+, r1
    1666:	e8 17       	cp	r30, r24
    1668:	f9 07       	cpc	r31, r25
    166a:	e1 f7       	brne	.-8      	; 0x1664 <dir_next+0x144>
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    166c:	88 80       	ld	r8, Y
    166e:	99 80       	ldd	r9, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    1670:	ee ef       	ldi	r30, 0xFE	; 254
    1672:	ae 2e       	mov	r10, r30
    1674:	ef ef       	ldi	r30, 0xFF	; 255
    1676:	be 2e       	mov	r11, r30
    1678:	ef ef       	ldi	r30, 0xFF	; 255
    167a:	ce 2e       	mov	r12, r30
    167c:	ef ef       	ldi	r30, 0xFF	; 255
    167e:	de 2e       	mov	r13, r30
    1680:	ae 0c       	add	r10, r14
    1682:	bf 1c       	adc	r11, r15
    1684:	c0 1e       	adc	r12, r16
    1686:	d1 1e       	adc	r13, r17
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1688:	f4 01       	movw	r30, r8
    168a:	86 8d       	ldd	r24, Z+30	; 0x1e
    168c:	97 8d       	ldd	r25, Z+31	; 0x1f
    168e:	a0 a1       	ldd	r26, Z+32	; 0x20
    1690:	b1 a1       	ldd	r27, Z+33	; 0x21
    1692:	02 97       	sbiw	r24, 0x02	; 2
    1694:	a1 09       	sbc	r26, r1
    1696:	b1 09       	sbc	r27, r1
    1698:	a8 16       	cp	r10, r24
    169a:	b9 06       	cpc	r11, r25
    169c:	ca 06       	cpc	r12, r26
    169e:	db 06       	cpc	r13, r27
    16a0:	28 f0       	brcs	.+10     	; 0x16ac <dir_next+0x18c>
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	40 e0       	ldi	r20, 0x00	; 0
    16a8:	50 e0       	ldi	r21, 0x00	; 0
    16aa:	15 c0       	rjmp	.+42     	; 0x16d6 <dir_next+0x1b6>
	return clst * fs->csize + fs->database;
    16ac:	d4 01       	movw	r26, r8
    16ae:	12 96       	adiw	r26, 0x02	; 2
    16b0:	2c 91       	ld	r18, X
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	40 e0       	ldi	r20, 0x00	; 0
    16b6:	50 e0       	ldi	r21, 0x00	; 0
    16b8:	c6 01       	movw	r24, r12
    16ba:	b5 01       	movw	r22, r10
    16bc:	0e 94 2e 2e 	call	0x5c5c	; 0x5c5c <__mulsi3>
    16c0:	9b 01       	movw	r18, r22
    16c2:	ac 01       	movw	r20, r24
    16c4:	f4 01       	movw	r30, r8
    16c6:	82 a5       	ldd	r24, Z+42	; 0x2a
    16c8:	93 a5       	ldd	r25, Z+43	; 0x2b
    16ca:	a4 a5       	ldd	r26, Z+44	; 0x2c
    16cc:	b5 a5       	ldd	r27, Z+45	; 0x2d
    16ce:	28 0f       	add	r18, r24
    16d0:	39 1f       	adc	r19, r25
    16d2:	4a 1f       	adc	r20, r26
    16d4:	5b 1f       	adc	r21, r27
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    16d6:	d4 01       	movw	r26, r8
    16d8:	9e 96       	adiw	r26, 0x2e	; 46
    16da:	2d 93       	st	X+, r18
    16dc:	3d 93       	st	X+, r19
    16de:	4d 93       	st	X+, r20
    16e0:	5c 93       	st	X, r21
    16e2:	d1 97       	sbiw	r26, 0x31	; 49
    16e4:	dd 24       	eor	r13, r13
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
    16e6:	cc 24       	eor	r12, r12
    16e8:	c3 94       	inc	r12
    16ea:	1a c0       	rjmp	.+52     	; 0x1720 <dir_next+0x200>
    16ec:	c4 82       	std	Z+4, r12	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    16ee:	88 81       	ld	r24, Y
    16f0:	99 81       	ldd	r25, Y+1	; 0x01
    16f2:	40 e0       	ldi	r20, 0x00	; 0
    16f4:	50 e0       	ldi	r21, 0x00	; 0
    16f6:	60 e0       	ldi	r22, 0x00	; 0
    16f8:	70 e0       	ldi	r23, 0x00	; 0
    16fa:	0e 94 ff 04 	call	0x9fe	; 0x9fe <move_window>
    16fe:	89 2b       	or	r24, r25
    1700:	09 f0       	breq	.+2      	; 0x1704 <dir_next+0x1e4>
    1702:	6f c0       	rjmp	.+222    	; 0x17e2 <dir_next+0x2c2>
						dj->fs->winsect++;
    1704:	e8 81       	ld	r30, Y
    1706:	f9 81       	ldd	r31, Y+1	; 0x01
    1708:	86 a5       	ldd	r24, Z+46	; 0x2e
    170a:	97 a5       	ldd	r25, Z+47	; 0x2f
    170c:	a0 a9       	ldd	r26, Z+48	; 0x30
    170e:	b1 a9       	ldd	r27, Z+49	; 0x31
    1710:	01 96       	adiw	r24, 0x01	; 1
    1712:	a1 1d       	adc	r26, r1
    1714:	b1 1d       	adc	r27, r1
    1716:	86 a7       	std	Z+46, r24	; 0x2e
    1718:	97 a7       	std	Z+47, r25	; 0x2f
    171a:	a0 ab       	std	Z+48, r26	; 0x30
    171c:	b1 ab       	std	Z+49, r27	; 0x31
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    171e:	d3 94       	inc	r13
    1720:	e8 81       	ld	r30, Y
    1722:	f9 81       	ldd	r31, Y+1	; 0x01
    1724:	82 81       	ldd	r24, Z+2	; 0x02
    1726:	d8 16       	cp	r13, r24
    1728:	08 f3       	brcs	.-62     	; 0x16ec <dir_next+0x1cc>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    172a:	86 a5       	ldd	r24, Z+46	; 0x2e
    172c:	97 a5       	ldd	r25, Z+47	; 0x2f
    172e:	a0 a9       	ldd	r26, Z+48	; 0x30
    1730:	b1 a9       	ldd	r27, Z+49	; 0x31
    1732:	8d 19       	sub	r24, r13
    1734:	91 09       	sbc	r25, r1
    1736:	a1 09       	sbc	r26, r1
    1738:	b1 09       	sbc	r27, r1
    173a:	86 a7       	std	Z+46, r24	; 0x2e
    173c:	97 a7       	std	Z+47, r25	; 0x2f
    173e:	a0 ab       	std	Z+48, r26	; 0x30
    1740:	b1 ab       	std	Z+49, r27	; 0x31
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    1742:	ea 86       	std	Y+10, r14	; 0x0a
    1744:	fb 86       	std	Y+11, r15	; 0x0b
    1746:	0c 87       	std	Y+12, r16	; 0x0c
    1748:	1d 87       	std	Y+13, r17	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    174a:	c8 80       	ld	r12, Y
    174c:	d9 80       	ldd	r13, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    174e:	8e ef       	ldi	r24, 0xFE	; 254
    1750:	9f ef       	ldi	r25, 0xFF	; 255
    1752:	af ef       	ldi	r26, 0xFF	; 255
    1754:	bf ef       	ldi	r27, 0xFF	; 255
    1756:	e8 0e       	add	r14, r24
    1758:	f9 1e       	adc	r15, r25
    175a:	0a 1f       	adc	r16, r26
    175c:	1b 1f       	adc	r17, r27
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    175e:	f6 01       	movw	r30, r12
    1760:	86 8d       	ldd	r24, Z+30	; 0x1e
    1762:	97 8d       	ldd	r25, Z+31	; 0x1f
    1764:	a0 a1       	ldd	r26, Z+32	; 0x20
    1766:	b1 a1       	ldd	r27, Z+33	; 0x21
    1768:	02 97       	sbiw	r24, 0x02	; 2
    176a:	a1 09       	sbc	r26, r1
    176c:	b1 09       	sbc	r27, r1
    176e:	e8 16       	cp	r14, r24
    1770:	f9 06       	cpc	r15, r25
    1772:	0a 07       	cpc	r16, r26
    1774:	1b 07       	cpc	r17, r27
    1776:	28 f0       	brcs	.+10     	; 0x1782 <dir_next+0x262>
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	40 e0       	ldi	r20, 0x00	; 0
    177e:	50 e0       	ldi	r21, 0x00	; 0
    1780:	15 c0       	rjmp	.+42     	; 0x17ac <dir_next+0x28c>
	return clst * fs->csize + fs->database;
    1782:	d6 01       	movw	r26, r12
    1784:	12 96       	adiw	r26, 0x02	; 2
    1786:	2c 91       	ld	r18, X
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	40 e0       	ldi	r20, 0x00	; 0
    178c:	50 e0       	ldi	r21, 0x00	; 0
    178e:	c8 01       	movw	r24, r16
    1790:	b7 01       	movw	r22, r14
    1792:	0e 94 2e 2e 	call	0x5c5c	; 0x5c5c <__mulsi3>
    1796:	9b 01       	movw	r18, r22
    1798:	ac 01       	movw	r20, r24
    179a:	f6 01       	movw	r30, r12
    179c:	82 a5       	ldd	r24, Z+42	; 0x2a
    179e:	93 a5       	ldd	r25, Z+43	; 0x2b
    17a0:	a4 a5       	ldd	r26, Z+44	; 0x2c
    17a2:	b5 a5       	ldd	r27, Z+45	; 0x2d
    17a4:	28 0f       	add	r18, r24
    17a6:	39 1f       	adc	r19, r25
    17a8:	4a 1f       	adc	r20, r26
    17aa:	5b 1f       	adc	r21, r27
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(dj->fs, clst);
    17ac:	2e 87       	std	Y+14, r18	; 0x0e
    17ae:	3f 87       	std	Y+15, r19	; 0x0f
    17b0:	48 8b       	std	Y+16, r20	; 0x10
    17b2:	59 8b       	std	Y+17, r21	; 0x11
			}
		}
	}

	dj->index = i;
    17b4:	7d 82       	std	Y+5, r7	; 0x05
    17b6:	6c 82       	std	Y+4, r6	; 0x04
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
    17b8:	88 81       	ld	r24, Y
    17ba:	99 81       	ldd	r25, Y+1	; 0x01
    17bc:	c2 96       	adiw	r24, 0x32	; 50
    17be:	75 e0       	ldi	r23, 0x05	; 5
    17c0:	44 0c       	add	r4, r4
    17c2:	55 1c       	adc	r5, r5
    17c4:	7a 95       	dec	r23
    17c6:	e1 f7       	brne	.-8      	; 0x17c0 <dir_next+0x2a0>
    17c8:	84 0d       	add	r24, r4
    17ca:	95 1d       	adc	r25, r5
    17cc:	9b 8b       	std	Y+19, r25	; 0x13
    17ce:	8a 8b       	std	Y+18, r24	; 0x12
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	08 c0       	rjmp	.+16     	; 0x17e6 <dir_next+0x2c6>

	return FR_OK;
    17d6:	24 e0       	ldi	r18, 0x04	; 4
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	05 c0       	rjmp	.+10     	; 0x17e6 <dir_next+0x2c6>
    17dc:	22 e0       	ldi	r18, 0x02	; 2
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <dir_next+0x2c6>
    17e2:	21 e0       	ldi	r18, 0x01	; 1
    17e4:	30 e0       	ldi	r19, 0x00	; 0
}
    17e6:	c9 01       	movw	r24, r18
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
    17ec:	e0 e1       	ldi	r30, 0x10	; 16
    17ee:	0c 94 c0 2e 	jmp	0x5d80	; 0x5d80 <__epilogue_restores__+0x4>

000017f2 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    17f2:	ac e0       	ldi	r26, 0x0C	; 12
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	ef ef       	ldi	r30, 0xFF	; 255
    17f8:	fb e0       	ldi	r31, 0x0B	; 11
    17fa:	0c 94 aa 2e 	jmp	0x5d54	; 0x5d54 <__prologue_saves__+0x10>
    17fe:	8c 01       	movw	r16, r24
    1800:	7b 01       	movw	r14, r22
	FRESULT res;
	NAMEBUF(sfn, lfn);


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    1802:	dc 01       	movw	r26, r24
    1804:	12 96       	adiw	r26, 0x02	; 2
    1806:	6d 91       	ld	r22, X+
    1808:	7c 91       	ld	r23, X
    180a:	13 97       	sbiw	r26, 0x03	; 3
    180c:	8d 91       	ld	r24, X+
    180e:	9c 91       	ld	r25, X
    1810:	0e 94 e5 04 	call	0x9ca	; 0x9ca <validate>
	if (res == FR_OK) {
    1814:	00 97       	sbiw	r24, 0x00	; 0
    1816:	81 f4       	brne	.+32     	; 0x1838 <f_readdir+0x46>
		INITBUF((*dj), sfn, lfn);
    1818:	ce 01       	movw	r24, r28
    181a:	01 96       	adiw	r24, 0x01	; 1
    181c:	f8 01       	movw	r30, r16
    181e:	95 8b       	std	Z+21, r25	; 0x15
    1820:	84 8b       	std	Z+20, r24	; 0x14
		if (!fno) {
    1822:	e1 14       	cp	r14, r1
    1824:	f1 04       	cpc	r15, r1
    1826:	19 f0       	breq	.+6      	; 0x182e <f_readdir+0x3c>
    1828:	24 e0       	ldi	r18, 0x04	; 4
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	25 c0       	rjmp	.+74     	; 0x1878 <f_readdir+0x86>
			res = dir_seek(dj, 0);
    182e:	c8 01       	movw	r24, r16
    1830:	60 e0       	ldi	r22, 0x00	; 0
    1832:	70 e0       	ldi	r23, 0x00	; 0
    1834:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <dir_seek>
    1838:	9c 01       	movw	r18, r24
    183a:	ac c0       	rjmp	.+344    	; 0x1994 <f_readdir+0x1a2>
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
    183c:	d8 01       	movw	r26, r16
    183e:	8d 91       	ld	r24, X+
    1840:	9c 91       	ld	r25, X
    1842:	0e 94 ff 04 	call	0x9fe	; 0x9fe <move_window>
    1846:	9c 01       	movw	r18, r24
		if (res != FR_OK) break;
    1848:	00 97       	sbiw	r24, 0x00	; 0
    184a:	19 f5       	brne	.+70     	; 0x1892 <f_readdir+0xa0>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    184c:	d8 01       	movw	r26, r16
    184e:	52 96       	adiw	r26, 0x12	; 18
    1850:	ed 91       	ld	r30, X+
    1852:	fc 91       	ld	r31, X
    1854:	53 97       	sbiw	r26, 0x13	; 19
		c = dir[DIR_Name];
    1856:	80 81       	ld	r24, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1858:	88 23       	and	r24, r24
    185a:	09 f4       	brne	.+2      	; 0x185e <f_readdir+0x6c>
    185c:	a0 c0       	rjmp	.+320    	; 0x199e <f_readdir+0x1ac>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    185e:	85 3e       	cpi	r24, 0xE5	; 229
    1860:	19 f0       	breq	.+6      	; 0x1868 <f_readdir+0x76>
    1862:	83 85       	ldd	r24, Z+11	; 0x0b
    1864:	83 ff       	sbrs	r24, 3
    1866:	23 c0       	rjmp	.+70     	; 0x18ae <f_readdir+0xbc>
			break;
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
    1868:	c8 01       	movw	r24, r16
    186a:	60 e0       	ldi	r22, 0x00	; 0
    186c:	70 e0       	ldi	r23, 0x00	; 0
    186e:	0e 94 90 0a 	call	0x1520	; 0x1520 <dir_next>
    1872:	9c 01       	movw	r18, r24
		if (res != FR_OK) break;
    1874:	00 97       	sbiw	r24, 0x00	; 0
    1876:	69 f4       	brne	.+26     	; 0x1892 <f_readdir+0xa0>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
    1878:	f8 01       	movw	r30, r16
    187a:	46 85       	ldd	r20, Z+14	; 0x0e
    187c:	57 85       	ldd	r21, Z+15	; 0x0f
    187e:	60 89       	ldd	r22, Z+16	; 0x10
    1880:	71 89       	ldd	r23, Z+17	; 0x11
    1882:	41 15       	cp	r20, r1
    1884:	51 05       	cpc	r21, r1
    1886:	61 05       	cpc	r22, r1
    1888:	71 05       	cpc	r23, r1
    188a:	c1 f6       	brne	.-80     	; 0x183c <f_readdir+0x4a>
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    188c:	21 15       	cp	r18, r1
    188e:	31 05       	cpc	r19, r1
    1890:	71 f0       	breq	.+28     	; 0x18ae <f_readdir+0xbc>
    1892:	d8 01       	movw	r26, r16
    1894:	1e 96       	adiw	r26, 0x0e	; 14
    1896:	1d 92       	st	X+, r1
    1898:	1d 92       	st	X+, r1
    189a:	1d 92       	st	X+, r1
    189c:	1c 92       	st	X, r1
    189e:	51 97       	sbiw	r26, 0x11	; 17
		INITBUF((*dj), sfn, lfn);
		if (!fno) {
			res = dir_seek(dj, 0);
		} else {
			res = dir_read(dj);
			if (res == FR_NO_FILE) {
    18a0:	24 30       	cpi	r18, 0x04	; 4
    18a2:	31 05       	cpc	r19, r1
    18a4:	21 f0       	breq	.+8      	; 0x18ae <f_readdir+0xbc>
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    18a6:	21 15       	cp	r18, r1
    18a8:	31 05       	cpc	r19, r1
    18aa:	09 f0       	breq	.+2      	; 0x18ae <f_readdir+0xbc>
    18ac:	73 c0       	rjmp	.+230    	; 0x1994 <f_readdir+0x1a2>
	int i;
	BYTE c, nt, *dir;
	char *p;


	p = fno->fname;
    18ae:	97 01       	movw	r18, r14
    18b0:	27 5f       	subi	r18, 0xF7	; 247
    18b2:	3f 4f       	sbci	r19, 0xFF	; 255
	if (dj->sect) {
    18b4:	f8 01       	movw	r30, r16
    18b6:	86 85       	ldd	r24, Z+14	; 0x0e
    18b8:	97 85       	ldd	r25, Z+15	; 0x0f
    18ba:	a0 89       	ldd	r26, Z+16	; 0x10
    18bc:	b1 89       	ldd	r27, Z+17	; 0x11
    18be:	00 97       	sbiw	r24, 0x00	; 0
    18c0:	a1 05       	cpc	r26, r1
    18c2:	b1 05       	cpc	r27, r1
    18c4:	09 f4       	brne	.+2      	; 0x18c8 <f_readdir+0xd6>
    18c6:	52 c0       	rjmp	.+164    	; 0x196c <f_readdir+0x17a>
		dir = dj->dir;
    18c8:	42 89       	ldd	r20, Z+18	; 0x12
    18ca:	53 89       	ldd	r21, Z+19	; 0x13
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	90 e0       	ldi	r25, 0x00	; 0
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
    18d0:	fa 01       	movw	r30, r20
    18d2:	e8 0f       	add	r30, r24
    18d4:	f9 1f       	adc	r31, r25
    18d6:	e0 81       	ld	r30, Z
			if (c == ' ') break;
    18d8:	e0 32       	cpi	r30, 0x20	; 32
    18da:	51 f0       	breq	.+20     	; 0x18f0 <f_readdir+0xfe>
			if (c == 0x05) c = 0xE5;
    18dc:	e5 30       	cpi	r30, 0x05	; 5
    18de:	09 f4       	brne	.+2      	; 0x18e2 <f_readdir+0xf0>
    18e0:	e5 ee       	ldi	r30, 0xE5	; 229
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
    18e2:	d9 01       	movw	r26, r18
    18e4:	ed 93       	st	X+, r30
    18e6:	9d 01       	movw	r18, r26

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
    18e8:	01 96       	adiw	r24, 0x01	; 1
    18ea:	88 30       	cpi	r24, 0x08	; 8
    18ec:	91 05       	cpc	r25, r1
    18ee:	81 f7       	brne	.-32     	; 0x18d0 <f_readdir+0xde>
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
    18f0:	fa 01       	movw	r30, r20
    18f2:	80 85       	ldd	r24, Z+8	; 0x08
    18f4:	80 32       	cpi	r24, 0x20	; 32
    18f6:	11 f4       	brne	.+4      	; 0x18fc <f_readdir+0x10a>
    18f8:	f9 01       	movw	r30, r18
    18fa:	10 c0       	rjmp	.+32     	; 0x191c <f_readdir+0x12a>
			*p++ = '.';
    18fc:	f9 01       	movw	r30, r18
    18fe:	8e e2       	ldi	r24, 0x2E	; 46
    1900:	81 93       	st	Z+, r24
    1902:	da 01       	movw	r26, r20
			for (i = 8; i < 11; i++) {
    1904:	2c 5f       	subi	r18, 0xFC	; 252
    1906:	3f 4f       	sbci	r19, 0xFF	; 255
				c = dir[i];
    1908:	18 96       	adiw	r26, 0x08	; 8
    190a:	8c 91       	ld	r24, X
    190c:	18 97       	sbiw	r26, 0x08	; 8
				if (c == ' ') break;
    190e:	80 32       	cpi	r24, 0x20	; 32
    1910:	29 f0       	breq	.+10     	; 0x191c <f_readdir+0x12a>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
    1912:	81 93       	st	Z+, r24
    1914:	11 96       	adiw	r26, 0x01	; 1
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    1916:	e2 17       	cp	r30, r18
    1918:	f3 07       	cpc	r31, r19
    191a:	b1 f7       	brne	.-20     	; 0x1908 <f_readdir+0x116>
				if (c == ' ') break;
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    191c:	da 01       	movw	r26, r20
    191e:	1b 96       	adiw	r26, 0x0b	; 11
    1920:	8c 91       	ld	r24, X
    1922:	d7 01       	movw	r26, r14
    1924:	18 96       	adiw	r26, 0x08	; 8
    1926:	8c 93       	st	X, r24
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    1928:	da 01       	movw	r26, r20
    192a:	5c 96       	adiw	r26, 0x1c	; 28
    192c:	ad 90       	ld	r10, X+
    192e:	bd 90       	ld	r11, X+
    1930:	cd 90       	ld	r12, X+
    1932:	dc 90       	ld	r13, X
    1934:	5f 97       	sbiw	r26, 0x1f	; 31
    1936:	d7 01       	movw	r26, r14
    1938:	ad 92       	st	X+, r10
    193a:	bd 92       	st	X+, r11
    193c:	cd 92       	st	X+, r12
    193e:	dc 92       	st	X, r13
    1940:	13 97       	sbiw	r26, 0x03	; 3
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    1942:	da 01       	movw	r26, r20
    1944:	58 96       	adiw	r26, 0x18	; 24
    1946:	8d 91       	ld	r24, X+
    1948:	9c 91       	ld	r25, X
    194a:	59 97       	sbiw	r26, 0x19	; 25
    194c:	d7 01       	movw	r26, r14
    194e:	15 96       	adiw	r26, 0x05	; 5
    1950:	9c 93       	st	X, r25
    1952:	8e 93       	st	-X, r24
    1954:	14 97       	sbiw	r26, 0x04	; 4
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    1956:	da 01       	movw	r26, r20
    1958:	56 96       	adiw	r26, 0x16	; 22
    195a:	8d 91       	ld	r24, X+
    195c:	9c 91       	ld	r25, X
    195e:	57 97       	sbiw	r26, 0x17	; 23
    1960:	d7 01       	movw	r26, r14
    1962:	17 96       	adiw	r26, 0x07	; 7
    1964:	9c 93       	st	X, r25
    1966:	8e 93       	st	-X, r24
    1968:	16 97       	sbiw	r26, 0x06	; 6
    196a:	9f 01       	movw	r18, r30
	}
	*p = 0;
    196c:	f9 01       	movw	r30, r18
    196e:	10 82       	st	Z, r1
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj, FALSE);	/* Increment index for next */
    1970:	c8 01       	movw	r24, r16
    1972:	60 e0       	ldi	r22, 0x00	; 0
    1974:	70 e0       	ldi	r23, 0x00	; 0
    1976:	0e 94 90 0a 	call	0x1520	; 0x1520 <dir_next>
    197a:	9c 01       	movw	r18, r24
				if (res == FR_NO_FILE) {
    197c:	84 30       	cpi	r24, 0x04	; 4
    197e:	91 05       	cpc	r25, r1
    1980:	49 f4       	brne	.+18     	; 0x1994 <f_readdir+0x1a2>
					dj->sect = 0;
    1982:	d8 01       	movw	r26, r16
    1984:	1e 96       	adiw	r26, 0x0e	; 14
    1986:	1d 92       	st	X+, r1
    1988:	1d 92       	st	X+, r1
    198a:	1d 92       	st	X+, r1
    198c:	1c 92       	st	X, r1
    198e:	51 97       	sbiw	r26, 0x11	; 17
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj->fs, res);
}
    1994:	c9 01       	movw	r24, r18
    1996:	2c 96       	adiw	r28, 0x0c	; 12
    1998:	ea e0       	ldi	r30, 0x0A	; 10
    199a:	0c 94 c6 2e 	jmp	0x5d8c	; 0x5d8c <__epilogue_restores__+0x10>
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj, FALSE);	/* Increment index for next */
				if (res == FR_NO_FILE) {
					dj->sect = 0;
    199e:	24 e0       	ldi	r18, 0x04	; 4
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	77 cf       	rjmp	.-274    	; 0x1892 <f_readdir+0xa0>

000019a4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const XCHAR *path	/* Full-path string to find a file or directory */
)
{
    19a4:	a0 e0       	ldi	r26, 0x00	; 0
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	e8 ed       	ldi	r30, 0xD8	; 216
    19aa:	fc e0       	ldi	r31, 0x0C	; 12
    19ac:	0c 94 a9 2e 	jmp	0x5d52	; 0x5d52 <__prologue_saves__+0xe>
    19b0:	ec 01       	movw	r28, r24
    19b2:	7b 01       	movw	r14, r22
    19b4:	03 c0       	rjmp	.+6      	; 0x19bc <follow_path+0x18>
	FRESULT res;
	BYTE *dir, last;


	while (!_USE_LFN && *path == ' ') path++;	/* Skip leading spaces */
    19b6:	08 94       	sec
    19b8:	e1 1c       	adc	r14, r1
    19ba:	f1 1c       	adc	r15, r1
    19bc:	f7 01       	movw	r30, r14
    19be:	80 81       	ld	r24, Z
    19c0:	80 32       	cpi	r24, 0x20	; 32
    19c2:	c9 f3       	breq	.-14     	; 0x19b6 <follow_path+0x12>
#if _FS_RPATH
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
    19c4:	8f 32       	cpi	r24, 0x2F	; 47
    19c6:	11 f0       	breq	.+4      	; 0x19cc <follow_path+0x28>
    19c8:	8c 35       	cpi	r24, 0x5C	; 92
    19ca:	41 f4       	brne	.+16     	; 0x19dc <follow_path+0x38>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
    19cc:	08 94       	sec
    19ce:	e1 1c       	adc	r14, r1
    19d0:	f1 1c       	adc	r15, r1
    19d2:	1e 82       	std	Y+6, r1	; 0x06
    19d4:	1f 82       	std	Y+7, r1	; 0x07
    19d6:	18 86       	std	Y+8, r1	; 0x08
    19d8:	19 86       	std	Y+9, r1	; 0x09
    19da:	0a c0       	rjmp	.+20     	; 0x19f0 <follow_path+0x4c>
	} else {							/* No heading saparator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
    19dc:	e8 81       	ld	r30, Y
    19de:	f9 81       	ldd	r31, Y+1	; 0x01
    19e0:	86 89       	ldd	r24, Z+22	; 0x16
    19e2:	97 89       	ldd	r25, Z+23	; 0x17
    19e4:	a0 8d       	ldd	r26, Z+24	; 0x18
    19e6:	b1 8d       	ldd	r27, Z+25	; 0x19
    19e8:	8e 83       	std	Y+6, r24	; 0x06
    19ea:	9f 83       	std	Y+7, r25	; 0x07
    19ec:	a8 87       	std	Y+8, r26	; 0x08
    19ee:	b9 87       	std	Y+9, r27	; 0x09
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
		path++;
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
    19f0:	f7 01       	movw	r30, r14
    19f2:	80 81       	ld	r24, Z
    19f4:	80 32       	cpi	r24, 0x20	; 32
    19f6:	48 f4       	brcc	.+18     	; 0x1a0a <follow_path+0x66>
		res = dir_seek(dj, 0);
    19f8:	ce 01       	movw	r24, r28
    19fa:	60 e0       	ldi	r22, 0x00	; 0
    19fc:	70 e0       	ldi	r23, 0x00	; 0
    19fe:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <dir_seek>
    1a02:	9c 01       	movw	r18, r24
		dj->dir = NULL;
    1a04:	1b 8a       	std	Y+19, r1	; 0x13
    1a06:	1a 8a       	std	Y+18, r1	; 0x12
    1a08:	2b c1       	rjmp	.+598    	; 0x1c60 <follow_path+0x2bc>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    1a0a:	f0 e2       	ldi	r31, 0x20	; 32
    1a0c:	9f 2e       	mov	r9, r31
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    1a0e:	e5 e0       	ldi	r30, 0x05	; 5
    1a10:	ce 2e       	mov	r12, r30
	BYTE b, c, d, *sfn;
	int ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    1a12:	0c 89       	ldd	r16, Y+20	; 0x14
    1a14:	1d 89       	ldd	r17, Y+21	; 0x15
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    1a16:	f8 01       	movw	r30, r16
	while (cnt--) *d++ = (char)val;
    1a18:	c8 01       	movw	r24, r16
    1a1a:	0b 96       	adiw	r24, 0x0b	; 11
    1a1c:	01 c0       	rjmp	.+2      	; 0x1a20 <follow_path+0x7c>
    1a1e:	91 92       	st	Z+, r9
    1a20:	e8 17       	cp	r30, r24
    1a22:	f9 07       	cpc	r31, r25
    1a24:	e1 f7       	brne	.-8      	; 0x1a1e <follow_path+0x7a>
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
	p = *path;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
    1a26:	f7 01       	movw	r30, r14
    1a28:	80 81       	ld	r24, Z
    1a2a:	8e 32       	cpi	r24, 0x2E	; 46
    1a2c:	49 f0       	breq	.+18     	; 0x1a40 <follow_path+0x9c>
    1a2e:	40 e0       	ldi	r20, 0x00	; 0
    1a30:	50 e0       	ldi	r21, 0x00	; 0
    1a32:	a0 e0       	ldi	r26, 0x00	; 0
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	78 e0       	ldi	r23, 0x08	; 8
    1a38:	a7 2e       	mov	r10, r23
    1a3a:	b1 2c       	mov	r11, r1
    1a3c:	dd 24       	eor	r13, r13
    1a3e:	21 c0       	rjmp	.+66     	; 0x1a82 <follow_path+0xde>
    1a40:	d8 01       	movw	r26, r16
    1a42:	80 e0       	ldi	r24, 0x00	; 0
    1a44:	90 e0       	ldi	r25, 0x00	; 0
		for (;;) {
			c = p[si++];
    1a46:	f7 01       	movw	r30, r14
    1a48:	e8 0f       	add	r30, r24
    1a4a:	f9 1f       	adc	r31, r25
    1a4c:	e0 81       	ld	r30, Z
    1a4e:	01 96       	adiw	r24, 0x01	; 1
			if (c != '.' || si >= 3) break;
    1a50:	ee 32       	cpi	r30, 0x2E	; 46
    1a52:	31 f4       	brne	.+12     	; 0x1a60 <follow_path+0xbc>
    1a54:	83 30       	cpi	r24, 0x03	; 3
    1a56:	91 05       	cpc	r25, r1
    1a58:	09 f4       	brne	.+2      	; 0x1a5c <follow_path+0xb8>
    1a5a:	fb c0       	rjmp	.+502    	; 0x1c52 <follow_path+0x2ae>
			sfn[i++] = c;
    1a5c:	ed 93       	st	X+, r30
    1a5e:	f3 cf       	rjmp	.-26     	; 0x1a46 <follow_path+0xa2>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
    1a60:	ef 32       	cpi	r30, 0x2F	; 47
    1a62:	29 f0       	breq	.+10     	; 0x1a6e <follow_path+0xca>
    1a64:	ec 35       	cpi	r30, 0x5C	; 92
    1a66:	39 f0       	breq	.+14     	; 0x1a76 <follow_path+0xd2>
    1a68:	e1 32       	cpi	r30, 0x21	; 33
    1a6a:	08 f0       	brcs	.+2      	; 0x1a6e <follow_path+0xca>
    1a6c:	f2 c0       	rjmp	.+484    	; 0x1c52 <follow_path+0x2ae>
		*path = &p[si];									/* Rerurn pointer to the next segment */
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    1a6e:	e1 32       	cpi	r30, 0x21	; 33
    1a70:	10 f4       	brcc	.+4      	; 0x1a76 <follow_path+0xd2>
    1a72:	24 e2       	ldi	r18, 0x24	; 36
    1a74:	01 c0       	rjmp	.+2      	; 0x1a78 <follow_path+0xd4>
    1a76:	20 e2       	ldi	r18, 0x20	; 32
			c = p[si++];
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
		*path = &p[si];									/* Rerurn pointer to the next segment */
    1a78:	e8 0e       	add	r14, r24
    1a7a:	f9 1e       	adc	r15, r25
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    1a7c:	f8 01       	movw	r30, r16
    1a7e:	23 87       	std	Z+11, r18	; 0x0b
    1a80:	f5 c0       	rjmp	.+490    	; 0x1c6c <follow_path+0x2c8>
		return FR_OK;
	}
#endif
	for (;;) {
		c = p[si++];
    1a82:	f7 01       	movw	r30, r14
    1a84:	ea 0f       	add	r30, r26
    1a86:	fb 1f       	adc	r31, r27
    1a88:	20 81       	ld	r18, Z
    1a8a:	11 96       	adiw	r26, 0x01	; 1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    1a8c:	21 32       	cpi	r18, 0x21	; 33
    1a8e:	08 f4       	brcc	.+2      	; 0x1a92 <follow_path+0xee>
    1a90:	6a c0       	rjmp	.+212    	; 0x1b66 <follow_path+0x1c2>
    1a92:	2f 32       	cpi	r18, 0x2F	; 47
    1a94:	09 f4       	brne	.+2      	; 0x1a98 <follow_path+0xf4>
    1a96:	f4 c0       	rjmp	.+488    	; 0x1c80 <follow_path+0x2dc>
    1a98:	2c 35       	cpi	r18, 0x5C	; 92
    1a9a:	09 f4       	brne	.+2      	; 0x1a9e <follow_path+0xfa>
    1a9c:	f1 c0       	rjmp	.+482    	; 0x1c80 <follow_path+0x2dc>
		if (c == '.' || i >= ni) {
    1a9e:	2e 32       	cpi	r18, 0x2E	; 46
    1aa0:	19 f0       	breq	.+6      	; 0x1aa8 <follow_path+0x104>
    1aa2:	4a 15       	cp	r20, r10
    1aa4:	5b 05       	cpc	r21, r11
    1aa6:	84 f0       	brlt	.+32     	; 0x1ac8 <follow_path+0x124>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    1aa8:	f8 e0       	ldi	r31, 0x08	; 8
    1aaa:	af 16       	cp	r10, r31
    1aac:	b1 04       	cpc	r11, r1
    1aae:	09 f0       	breq	.+2      	; 0x1ab2 <follow_path+0x10e>
    1ab0:	d0 c0       	rjmp	.+416    	; 0x1c52 <follow_path+0x2ae>
    1ab2:	2e 32       	cpi	r18, 0x2E	; 46
    1ab4:	09 f0       	breq	.+2      	; 0x1ab8 <follow_path+0x114>
    1ab6:	cd c0       	rjmp	.+410    	; 0x1c52 <follow_path+0x2ae>
			i = 8; ni = 11;
			b <<= 2; continue;
    1ab8:	dd 0c       	add	r13, r13
    1aba:	dd 0c       	add	r13, r13
    1abc:	48 e0       	ldi	r20, 0x08	; 8
    1abe:	50 e0       	ldi	r21, 0x00	; 0
    1ac0:	6b e0       	ldi	r22, 0x0B	; 11
    1ac2:	a6 2e       	mov	r10, r22
    1ac4:	b1 2c       	mov	r11, r1
    1ac6:	dd cf       	rjmp	.-70     	; 0x1a82 <follow_path+0xde>
		}
		if (c >= 0x80) {				/* Extended char */
    1ac8:	27 ff       	sbrs	r18, 7
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <follow_path+0x12c>
#ifdef _EXCVT
			c = cvt[c - 0x80];			/* Convert extend char (SBCS) */
#else
			b |= 3;						/* Eliminate NT flag if ext char is exist */
    1acc:	83 e0       	ldi	r24, 0x03	; 3
    1ace:	d8 2a       	or	r13, r24
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
    1ad0:	82 2f       	mov	r24, r18
    1ad2:	81 58       	subi	r24, 0x81	; 129
    1ad4:	8f 31       	cpi	r24, 0x1F	; 31
    1ad6:	18 f0       	brcs	.+6      	; 0x1ade <follow_path+0x13a>
    1ad8:	8f 55       	subi	r24, 0x5F	; 95
    1ada:	8d 31       	cpi	r24, 0x1D	; 29
    1adc:	f8 f4       	brcc	.+62     	; 0x1b1c <follow_path+0x178>
			d = p[si++];				/* Get 2nd byte */
    1ade:	f7 01       	movw	r30, r14
    1ae0:	ea 0f       	add	r30, r26
    1ae2:	fb 1f       	adc	r31, r27
    1ae4:	30 81       	ld	r19, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    1ae6:	83 2f       	mov	r24, r19
    1ae8:	80 54       	subi	r24, 0x40	; 64
    1aea:	8f 33       	cpi	r24, 0x3F	; 63
    1aec:	20 f0       	brcs	.+8      	; 0x1af6 <follow_path+0x152>
    1aee:	80 54       	subi	r24, 0x40	; 64
    1af0:	8d 37       	cpi	r24, 0x7D	; 125
    1af2:	08 f0       	brcs	.+2      	; 0x1af6 <follow_path+0x152>
    1af4:	ae c0       	rjmp	.+348    	; 0x1c52 <follow_path+0x2ae>
    1af6:	c5 01       	movw	r24, r10
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	48 17       	cp	r20, r24
    1afc:	59 07       	cpc	r21, r25
    1afe:	0c f0       	brlt	.+2      	; 0x1b02 <follow_path+0x15e>
    1b00:	a8 c0       	rjmp	.+336    	; 0x1c52 <follow_path+0x2ae>
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
    1b02:	11 96       	adiw	r26, 0x01	; 1
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
    1b04:	f8 01       	movw	r30, r16
    1b06:	e4 0f       	add	r30, r20
    1b08:	f5 1f       	adc	r31, r21
    1b0a:	20 83       	st	Z, r18
    1b0c:	ca 01       	movw	r24, r20
    1b0e:	01 96       	adiw	r24, 0x01	; 1
			sfn[i++] = d;
    1b10:	f8 01       	movw	r30, r16
    1b12:	e8 0f       	add	r30, r24
    1b14:	f9 1f       	adc	r31, r25
    1b16:	30 83       	st	Z, r19
    1b18:	ac 01       	movw	r20, r24
    1b1a:	22 c0       	rjmp	.+68     	; 0x1b60 <follow_path+0x1bc>
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
    1b1c:	62 2f       	mov	r22, r18
    1b1e:	70 e0       	ldi	r23, 0x00	; 0
    1b20:	e3 e0       	ldi	r30, 0x03	; 3
    1b22:	f1 e0       	ldi	r31, 0x01	; 1
    1b24:	01 c0       	rjmp	.+2      	; 0x1b28 <follow_path+0x184>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    1b26:	31 96       	adiw	r30, 0x01	; 1
    1b28:	80 81       	ld	r24, Z
    1b2a:	88 23       	and	r24, r24
    1b2c:	39 f0       	breq	.+14     	; 0x1b3c <follow_path+0x198>
    1b2e:	99 27       	eor	r25, r25
    1b30:	87 fd       	sbrc	r24, 7
    1b32:	90 95       	com	r25
    1b34:	86 17       	cp	r24, r22
    1b36:	97 07       	cpc	r25, r23
    1b38:	b1 f7       	brne	.-20     	; 0x1b26 <follow_path+0x182>
    1b3a:	8b c0       	rjmp	.+278    	; 0x1c52 <follow_path+0x2ae>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    1b3c:	82 2f       	mov	r24, r18
    1b3e:	81 54       	subi	r24, 0x41	; 65
    1b40:	8a 31       	cpi	r24, 0x1A	; 26
    1b42:	18 f4       	brcc	.+6      	; 0x1b4a <follow_path+0x1a6>
				b |= 2;
    1b44:	e2 e0       	ldi	r30, 0x02	; 2
    1b46:	de 2a       	or	r13, r30
    1b48:	07 c0       	rjmp	.+14     	; 0x1b58 <follow_path+0x1b4>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    1b4a:	82 2f       	mov	r24, r18
    1b4c:	81 56       	subi	r24, 0x61	; 97
    1b4e:	8a 31       	cpi	r24, 0x1A	; 26
    1b50:	18 f4       	brcc	.+6      	; 0x1b58 <follow_path+0x1b4>
					b |= 1; c -= 0x20;
    1b52:	f1 e0       	ldi	r31, 0x01	; 1
    1b54:	df 2a       	or	r13, r31
    1b56:	20 52       	subi	r18, 0x20	; 32
				}
			}
			sfn[i++] = c;
    1b58:	f8 01       	movw	r30, r16
    1b5a:	e4 0f       	add	r30, r20
    1b5c:	f5 1f       	adc	r31, r21
    1b5e:	20 83       	st	Z, r18
    1b60:	4f 5f       	subi	r20, 0xFF	; 255
    1b62:	5f 4f       	sbci	r21, 0xFF	; 255
    1b64:	8e cf       	rjmp	.-228    	; 0x1a82 <follow_path+0xde>
    1b66:	64 e0       	ldi	r22, 0x04	; 4
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
    1b68:	45 2b       	or	r20, r21
    1b6a:	09 f4       	brne	.+2      	; 0x1b6e <follow_path+0x1ca>
    1b6c:	72 c0       	rjmp	.+228    	; 0x1c52 <follow_path+0x2ae>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    1b6e:	f8 01       	movw	r30, r16
    1b70:	80 81       	ld	r24, Z
    1b72:	85 3e       	cpi	r24, 0xE5	; 229
    1b74:	09 f4       	brne	.+2      	; 0x1b78 <follow_path+0x1d4>
    1b76:	c0 82       	st	Z, r12

	if (ni == 8) b <<= 2;
    1b78:	f8 e0       	ldi	r31, 0x08	; 8
    1b7a:	af 16       	cp	r10, r31
    1b7c:	b1 04       	cpc	r11, r1
    1b7e:	11 f4       	brne	.+4      	; 0x1b84 <follow_path+0x1e0>
    1b80:	dd 0c       	add	r13, r13
    1b82:	dd 0c       	add	r13, r13
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
    1b84:	2d 2d       	mov	r18, r13
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	c9 01       	movw	r24, r18
    1b8a:	83 70       	andi	r24, 0x03	; 3
    1b8c:	90 70       	andi	r25, 0x00	; 0
    1b8e:	01 97       	sbiw	r24, 0x01	; 1
    1b90:	09 f4       	brne	.+2      	; 0x1b94 <follow_path+0x1f0>
    1b92:	60 61       	ori	r22, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
    1b94:	2c 70       	andi	r18, 0x0C	; 12
    1b96:	30 70       	andi	r19, 0x00	; 0
    1b98:	24 30       	cpi	r18, 0x04	; 4
    1b9a:	31 05       	cpc	r19, r1
    1b9c:	09 f4       	brne	.+2      	; 0x1ba0 <follow_path+0x1fc>
    1b9e:	68 60       	ori	r22, 0x08	; 8
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    1ba0:	ea 0e       	add	r14, r26
    1ba2:	fb 1e       	adc	r15, r27

	if (ni == 8) b <<= 2;
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */

	sfn[NS] = c;		/* Store NT flag, File name is created */
    1ba4:	f8 01       	movw	r30, r16
    1ba6:	63 87       	std	Z+11, r22	; 0x0b
    1ba8:	61 c0       	rjmp	.+194    	; 0x1c6c <follow_path+0x2c8>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    1baa:	4e 85       	ldd	r20, Y+14	; 0x0e
    1bac:	5f 85       	ldd	r21, Y+15	; 0x0f
    1bae:	68 89       	ldd	r22, Y+16	; 0x10
    1bb0:	79 89       	ldd	r23, Y+17	; 0x11
    1bb2:	88 81       	ld	r24, Y
    1bb4:	99 81       	ldd	r25, Y+1	; 0x01
    1bb6:	0e 94 ff 04 	call	0x9fe	; 0x9fe <move_window>
    1bba:	ac 01       	movw	r20, r24
		if (res != FR_OK) break;
    1bbc:	00 97       	sbiw	r24, 0x00	; 0
    1bbe:	01 f5       	brne	.+64     	; 0x1c00 <follow_path+0x25c>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    1bc0:	ea 89       	ldd	r30, Y+18	; 0x12
    1bc2:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1bc4:	80 81       	ld	r24, Z
    1bc6:	88 23       	and	r24, r24
    1bc8:	19 f4       	brne	.+6      	; 0x1bd0 <follow_path+0x22c>
    1bca:	44 e0       	ldi	r20, 0x04	; 4
    1bcc:	50 e0       	ldi	r21, 0x00	; 0
    1bce:	18 c0       	rjmp	.+48     	; 0x1c00 <follow_path+0x25c>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    1bd0:	83 85       	ldd	r24, Z+11	; 0x0b
    1bd2:	83 fd       	sbrc	r24, 3
    1bd4:	0f c0       	rjmp	.+30     	; 0x1bf4 <follow_path+0x250>
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
    1bd6:	ac 89       	ldd	r26, Y+20	; 0x14
    1bd8:	bd 89       	ldd	r27, Y+21	; 0x15
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    1bda:	9f 01       	movw	r18, r30
    1bdc:	25 5f       	subi	r18, 0xF5	; 245
    1bde:	3f 4f       	sbci	r19, 0xFF	; 255
    1be0:	e2 17       	cp	r30, r18
    1be2:	f3 07       	cpc	r31, r19
    1be4:	69 f0       	breq	.+26     	; 0x1c00 <follow_path+0x25c>
    1be6:	90 81       	ld	r25, Z
    1be8:	8c 91       	ld	r24, X
    1bea:	98 17       	cp	r25, r24
    1bec:	19 f4       	brne	.+6      	; 0x1bf4 <follow_path+0x250>
    1bee:	31 96       	adiw	r30, 0x01	; 1
    1bf0:	11 96       	adiw	r26, 0x01	; 1
    1bf2:	f6 cf       	rjmp	.-20     	; 0x1be0 <follow_path+0x23c>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, FALSE);		/* Next entry */
    1bf4:	ce 01       	movw	r24, r28
    1bf6:	60 e0       	ldi	r22, 0x00	; 0
    1bf8:	70 e0       	ldi	r23, 0x00	; 0
    1bfa:	0e 94 90 0a 	call	0x1520	; 0x1520 <dir_next>
    1bfe:	3b c0       	rjmp	.+118    	; 0x1c76 <follow_path+0x2d2>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			last = *(dj->fn+NS) & NS_LAST;
    1c00:	ec 89       	ldd	r30, Y+20	; 0x14
    1c02:	fd 89       	ldd	r31, Y+21	; 0x15
    1c04:	83 85       	ldd	r24, Z+11	; 0x0b
    1c06:	84 70       	andi	r24, 0x04	; 4
			if (res != FR_OK) {				/* Could not find the object */
    1c08:	41 15       	cp	r20, r1
    1c0a:	51 05       	cpc	r21, r1
    1c0c:	39 f0       	breq	.+14     	; 0x1c1c <follow_path+0x278>
    1c0e:	9a 01       	movw	r18, r20
				if (res == FR_NO_FILE && !last)
    1c10:	44 30       	cpi	r20, 0x04	; 4
    1c12:	51 05       	cpc	r21, r1
    1c14:	09 f5       	brne	.+66     	; 0x1c58 <follow_path+0x2b4>
    1c16:	88 23       	and	r24, r24
    1c18:	09 f1       	breq	.+66     	; 0x1c5c <follow_path+0x2b8>
    1c1a:	22 c0       	rjmp	.+68     	; 0x1c60 <follow_path+0x2bc>
					res = FR_NO_PATH;
				break;
			}
			if (last) break;				/* Last segment match. Function completed. */
    1c1c:	88 23       	and	r24, r24
    1c1e:	e1 f4       	brne	.+56     	; 0x1c58 <follow_path+0x2b4>
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
    1c20:	ea 89       	ldd	r30, Y+18	; 0x12
    1c22:	fb 89       	ldd	r31, Y+19	; 0x13
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    1c24:	83 85       	ldd	r24, Z+11	; 0x0b
    1c26:	84 ff       	sbrs	r24, 4
    1c28:	19 c0       	rjmp	.+50     	; 0x1c5c <follow_path+0x2b8>
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    1c2a:	84 89       	ldd	r24, Z+20	; 0x14
    1c2c:	95 89       	ldd	r25, Z+21	; 0x15
    1c2e:	a0 e0       	ldi	r26, 0x00	; 0
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	dc 01       	movw	r26, r24
    1c34:	99 27       	eor	r25, r25
    1c36:	88 27       	eor	r24, r24
    1c38:	22 8d       	ldd	r18, Z+26	; 0x1a
    1c3a:	33 8d       	ldd	r19, Z+27	; 0x1b
    1c3c:	40 e0       	ldi	r20, 0x00	; 0
    1c3e:	50 e0       	ldi	r21, 0x00	; 0
    1c40:	82 2b       	or	r24, r18
    1c42:	93 2b       	or	r25, r19
    1c44:	a4 2b       	or	r26, r20
    1c46:	b5 2b       	or	r27, r21
    1c48:	8e 83       	std	Y+6, r24	; 0x06
    1c4a:	9f 83       	std	Y+7, r25	; 0x07
    1c4c:	a8 87       	std	Y+8, r26	; 0x08
    1c4e:	b9 87       	std	Y+9, r27	; 0x09
    1c50:	e0 ce       	rjmp	.-576    	; 0x1a12 <follow_path+0x6e>
		}
    1c52:	26 e0       	ldi	r18, 0x06	; 6
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	04 c0       	rjmp	.+8      	; 0x1c60 <follow_path+0x2bc>
    1c58:	9a 01       	movw	r18, r20
    1c5a:	02 c0       	rjmp	.+4      	; 0x1c60 <follow_path+0x2bc>
    1c5c:	25 e0       	ldi	r18, 0x05	; 5
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
	}

	return res;
}
    1c60:	c9 01       	movw	r24, r18
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
    1c66:	eb e0       	ldi	r30, 0x0B	; 11
    1c68:	0c 94 c5 2e 	jmp	0x5d8a	; 0x5d8a <__epilogue_restores__+0xe>
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_seek(dj, 0);			/* Rewind directory object */
    1c6c:	ce 01       	movw	r24, r28
    1c6e:	60 e0       	ldi	r22, 0x00	; 0
    1c70:	70 e0       	ldi	r23, 0x00	; 0
    1c72:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <dir_seek>
    1c76:	ac 01       	movw	r20, r24
	if (res != FR_OK) return res;
    1c78:	00 97       	sbiw	r24, 0x00	; 0
    1c7a:	09 f4       	brne	.+2      	; 0x1c7e <follow_path+0x2da>
    1c7c:	96 cf       	rjmp	.-212    	; 0x1baa <follow_path+0x206>
    1c7e:	c0 cf       	rjmp	.-128    	; 0x1c00 <follow_path+0x25c>
    1c80:	60 e0       	ldi	r22, 0x00	; 0
    1c82:	72 cf       	rjmp	.-284    	; 0x1b68 <follow_path+0x1c4>

00001c84 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    1c84:	a4 e0       	ldi	r26, 0x04	; 4
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	e8 e4       	ldi	r30, 0x48	; 72
    1c8a:	fe e0       	ldi	r31, 0x0E	; 14
    1c8c:	0c 94 a2 2e 	jmp	0x5d44	; 0x5d44 <__prologue_saves__>
    1c90:	9c 83       	std	Y+4, r25	; 0x04
    1c92:	8b 83       	std	Y+3, r24	; 0x03
    1c94:	16 2f       	mov	r17, r22
    1c96:	07 2f       	mov	r16, r23
    1c98:	3a 01       	movw	r6, r20
    1c9a:	3a 83       	std	Y+2, r19	; 0x02
    1c9c:	29 83       	std	Y+1, r18	; 0x01
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;


	*bw = 0;	/* Initialize bytes written */
    1c9e:	d9 01       	movw	r26, r18
    1ca0:	1d 92       	st	X+, r1
    1ca2:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    1ca4:	fc 01       	movw	r30, r24
    1ca6:	62 81       	ldd	r22, Z+2	; 0x02
    1ca8:	73 81       	ldd	r23, Z+3	; 0x03
    1caa:	80 81       	ld	r24, Z
    1cac:	91 81       	ldd	r25, Z+1	; 0x01
    1cae:	0e 94 e5 04 	call	0x9ca	; 0x9ca <validate>
    1cb2:	4c 01       	movw	r8, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    1cb4:	00 97       	sbiw	r24, 0x00	; 0
    1cb6:	09 f0       	breq	.+2      	; 0x1cba <f_write+0x36>
    1cb8:	09 c2       	rjmp	.+1042   	; 0x20cc <f_write+0x448>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    1cba:	ab 81       	ldd	r26, Y+3	; 0x03
    1cbc:	bc 81       	ldd	r27, Y+4	; 0x04
    1cbe:	14 96       	adiw	r26, 0x04	; 4
    1cc0:	8c 91       	ld	r24, X
    1cc2:	87 fd       	sbrc	r24, 7
    1cc4:	78 c0       	rjmp	.+240    	; 0x1db6 <f_write+0x132>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
    1cc6:	81 fd       	sbrc	r24, 1
    1cc8:	04 c0       	rjmp	.+8      	; 0x1cd2 <f_write+0x4e>
    1cca:	37 e0       	ldi	r19, 0x07	; 7
    1ccc:	83 2e       	mov	r8, r19
    1cce:	91 2c       	mov	r9, r1
    1cd0:	fd c1       	rjmp	.+1018   	; 0x20cc <f_write+0x448>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
    1cd2:	eb 81       	ldd	r30, Y+3	; 0x03
    1cd4:	fc 81       	ldd	r31, Y+4	; 0x04
    1cd6:	22 85       	ldd	r18, Z+10	; 0x0a
    1cd8:	33 85       	ldd	r19, Z+11	; 0x0b
    1cda:	44 85       	ldd	r20, Z+12	; 0x0c
    1cdc:	55 85       	ldd	r21, Z+13	; 0x0d
    1cde:	c3 01       	movw	r24, r6
    1ce0:	a0 e0       	ldi	r26, 0x00	; 0
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	82 0f       	add	r24, r18
    1ce6:	93 1f       	adc	r25, r19
    1ce8:	a4 1f       	adc	r26, r20
    1cea:	b5 1f       	adc	r27, r21
    1cec:	82 17       	cp	r24, r18
    1cee:	93 07       	cpc	r25, r19
    1cf0:	a4 07       	cpc	r26, r20
    1cf2:	b5 07       	cpc	r27, r21
    1cf4:	10 f4       	brcc	.+4      	; 0x1cfa <f_write+0x76>
    1cf6:	66 24       	eor	r6, r6
    1cf8:	77 24       	eor	r7, r7
)
{
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    1cfa:	81 2f       	mov	r24, r17
    1cfc:	90 2f       	mov	r25, r16
    1cfe:	9c 01       	movw	r18, r24
    1d00:	29 01       	movw	r4, r18
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
    1d02:	22 24       	eor	r2, r2
    1d04:	23 94       	inc	r2
    1d06:	bd c1       	rjmp	.+890    	; 0x2082 <f_write+0x3fe>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    1d08:	ab 81       	ldd	r26, Y+3	; 0x03
    1d0a:	bc 81       	ldd	r27, Y+4	; 0x04
    1d0c:	16 96       	adiw	r26, 0x06	; 6
    1d0e:	2d 91       	ld	r18, X+
    1d10:	3d 91       	ld	r19, X+
    1d12:	4d 91       	ld	r20, X+
    1d14:	5c 91       	ld	r21, X
    1d16:	19 97       	sbiw	r26, 0x09	; 9
    1d18:	da 01       	movw	r26, r20
    1d1a:	c9 01       	movw	r24, r18
    1d1c:	91 70       	andi	r25, 0x01	; 1
    1d1e:	a0 70       	andi	r26, 0x00	; 0
    1d20:	b0 70       	andi	r27, 0x00	; 0
    1d22:	00 97       	sbiw	r24, 0x00	; 0
    1d24:	a1 05       	cpc	r26, r1
    1d26:	b1 05       	cpc	r27, r1
    1d28:	09 f0       	breq	.+2      	; 0x1d2c <f_write+0xa8>
    1d2a:	4a c1       	rjmp	.+660    	; 0x1fc0 <f_write+0x33c>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    1d2c:	ab 81       	ldd	r26, Y+3	; 0x03
    1d2e:	bc 81       	ldd	r27, Y+4	; 0x04
    1d30:	ed 91       	ld	r30, X+
    1d32:	fc 91       	ld	r31, X
    1d34:	11 97       	sbiw	r26, 0x01	; 1
    1d36:	15 96       	adiw	r26, 0x05	; 5
    1d38:	9c 91       	ld	r25, X
    1d3a:	15 97       	sbiw	r26, 0x05	; 5
    1d3c:	82 81       	ldd	r24, Z+2	; 0x02
    1d3e:	98 17       	cp	r25, r24
    1d40:	08 f4       	brcc	.+2      	; 0x1d44 <f_write+0xc0>
    1d42:	55 c0       	rjmp	.+170    	; 0x1dee <f_write+0x16a>
				if (fp->fptr == 0) {				/* On the top of the file? */
    1d44:	21 15       	cp	r18, r1
    1d46:	31 05       	cpc	r19, r1
    1d48:	41 05       	cpc	r20, r1
    1d4a:	51 05       	cpc	r21, r1
    1d4c:	c9 f4       	brne	.+50     	; 0x1d80 <f_write+0xfc>
					clst = fp->org_clust;			/* Follow from the origin */
    1d4e:	1e 96       	adiw	r26, 0x0e	; 14
    1d50:	6d 91       	ld	r22, X+
    1d52:	7d 91       	ld	r23, X+
    1d54:	8d 91       	ld	r24, X+
    1d56:	9c 91       	ld	r25, X
    1d58:	51 97       	sbiw	r26, 0x11	; 17
					if (clst == 0)					/* When there is no cluster chain, */
    1d5a:	61 15       	cp	r22, r1
    1d5c:	71 05       	cpc	r23, r1
    1d5e:	81 05       	cpc	r24, r1
    1d60:	91 05       	cpc	r25, r1
    1d62:	f9 f4       	brne	.+62     	; 0x1da2 <f_write+0x11e>
						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    1d64:	cf 01       	movw	r24, r30
    1d66:	40 e0       	ldi	r20, 0x00	; 0
    1d68:	50 e0       	ldi	r21, 0x00	; 0
    1d6a:	60 e0       	ldi	r22, 0x00	; 0
    1d6c:	70 e0       	ldi	r23, 0x00	; 0
    1d6e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <create_chain>
    1d72:	eb 81       	ldd	r30, Y+3	; 0x03
    1d74:	fc 81       	ldd	r31, Y+4	; 0x04
    1d76:	66 87       	std	Z+14, r22	; 0x0e
    1d78:	77 87       	std	Z+15, r23	; 0x0f
    1d7a:	80 8b       	std	Z+16, r24	; 0x10
    1d7c:	91 8b       	std	Z+17, r25	; 0x11
    1d7e:	0b c0       	rjmp	.+22     	; 0x1d96 <f_write+0x112>
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
    1d80:	ab 81       	ldd	r26, Y+3	; 0x03
    1d82:	bc 81       	ldd	r27, Y+4	; 0x04
    1d84:	52 96       	adiw	r26, 0x12	; 18
    1d86:	4d 91       	ld	r20, X+
    1d88:	5d 91       	ld	r21, X+
    1d8a:	6d 91       	ld	r22, X+
    1d8c:	7c 91       	ld	r23, X
    1d8e:	55 97       	sbiw	r26, 0x15	; 21
    1d90:	cf 01       	movw	r24, r30
    1d92:	0e 94 da 07 	call	0xfb4	; 0xfb4 <create_chain>
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
    1d96:	61 15       	cp	r22, r1
    1d98:	71 05       	cpc	r23, r1
    1d9a:	81 05       	cpc	r24, r1
    1d9c:	91 05       	cpc	r25, r1
    1d9e:	09 f4       	brne	.+2      	; 0x1da2 <f_write+0x11e>
    1da0:	74 c1       	rjmp	.+744    	; 0x208a <f_write+0x406>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    1da2:	61 30       	cpi	r22, 0x01	; 1
    1da4:	71 05       	cpc	r23, r1
    1da6:	81 05       	cpc	r24, r1
    1da8:	91 05       	cpc	r25, r1
    1daa:	49 f4       	brne	.+18     	; 0x1dbe <f_write+0x13a>
    1dac:	eb 81       	ldd	r30, Y+3	; 0x03
    1dae:	fc 81       	ldd	r31, Y+4	; 0x04
    1db0:	84 81       	ldd	r24, Z+4	; 0x04
    1db2:	80 68       	ori	r24, 0x80	; 128
    1db4:	84 83       	std	Z+4, r24	; 0x04
    1db6:	22 e0       	ldi	r18, 0x02	; 2
    1db8:	82 2e       	mov	r8, r18
    1dba:	91 2c       	mov	r9, r1
    1dbc:	87 c1       	rjmp	.+782    	; 0x20cc <f_write+0x448>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    1dbe:	6f 3f       	cpi	r22, 0xFF	; 255
    1dc0:	ff ef       	ldi	r31, 0xFF	; 255
    1dc2:	7f 07       	cpc	r23, r31
    1dc4:	ff ef       	ldi	r31, 0xFF	; 255
    1dc6:	8f 07       	cpc	r24, r31
    1dc8:	ff ef       	ldi	r31, 0xFF	; 255
    1dca:	9f 07       	cpc	r25, r31
    1dcc:	49 f4       	brne	.+18     	; 0x1de0 <f_write+0x15c>
    1dce:	ab 81       	ldd	r26, Y+3	; 0x03
    1dd0:	bc 81       	ldd	r27, Y+4	; 0x04
    1dd2:	14 96       	adiw	r26, 0x04	; 4
    1dd4:	8c 91       	ld	r24, X
    1dd6:	14 97       	sbiw	r26, 0x04	; 4
    1dd8:	80 68       	ori	r24, 0x80	; 128
    1dda:	14 96       	adiw	r26, 0x04	; 4
    1ddc:	8c 93       	st	X, r24
    1dde:	09 c1       	rjmp	.+530    	; 0x1ff2 <f_write+0x36e>
				fp->curr_clust = clst;				/* Update current cluster */
    1de0:	eb 81       	ldd	r30, Y+3	; 0x03
    1de2:	fc 81       	ldd	r31, Y+4	; 0x04
    1de4:	62 8b       	std	Z+18, r22	; 0x12
    1de6:	73 8b       	std	Z+19, r23	; 0x13
    1de8:	84 8b       	std	Z+20, r24	; 0x14
    1dea:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector address in the cluster */
    1dec:	15 82       	std	Z+5, r1	; 0x05
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
    1dee:	ab 81       	ldd	r26, Y+3	; 0x03
    1df0:	bc 81       	ldd	r27, Y+4	; 0x04
    1df2:	ed 91       	ld	r30, X+
    1df4:	fc 91       	ld	r31, X
    1df6:	11 97       	sbiw	r26, 0x01	; 1
    1df8:	26 a5       	ldd	r18, Z+46	; 0x2e
    1dfa:	37 a5       	ldd	r19, Z+47	; 0x2f
    1dfc:	40 a9       	ldd	r20, Z+48	; 0x30
    1dfe:	51 a9       	ldd	r21, Z+49	; 0x31
    1e00:	56 96       	adiw	r26, 0x16	; 22
    1e02:	ed 90       	ld	r14, X+
    1e04:	fd 90       	ld	r15, X+
    1e06:	0d 91       	ld	r16, X+
    1e08:	1c 91       	ld	r17, X
    1e0a:	59 97       	sbiw	r26, 0x19	; 25
    1e0c:	2e 15       	cp	r18, r14
    1e0e:	3f 05       	cpc	r19, r15
    1e10:	40 07       	cpc	r20, r16
    1e12:	51 07       	cpc	r21, r17
    1e14:	51 f4       	brne	.+20     	; 0x1e2a <f_write+0x1a6>
    1e16:	cf 01       	movw	r24, r30
    1e18:	40 e0       	ldi	r20, 0x00	; 0
    1e1a:	50 e0       	ldi	r21, 0x00	; 0
    1e1c:	60 e0       	ldi	r22, 0x00	; 0
    1e1e:	70 e0       	ldi	r23, 0x00	; 0
    1e20:	0e 94 ff 04 	call	0x9fe	; 0x9fe <move_window>
    1e24:	89 2b       	or	r24, r25
    1e26:	09 f0       	breq	.+2      	; 0x1e2a <f_write+0x1a6>
    1e28:	df c0       	rjmp	.+446    	; 0x1fe8 <f_write+0x364>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    1e2a:	ab 81       	ldd	r26, Y+3	; 0x03
    1e2c:	bc 81       	ldd	r27, Y+4	; 0x04
    1e2e:	0d 91       	ld	r16, X+
    1e30:	1c 91       	ld	r17, X
    1e32:	11 97       	sbiw	r26, 0x01	; 1
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    1e34:	52 96       	adiw	r26, 0x12	; 18
    1e36:	2d 91       	ld	r18, X+
    1e38:	3d 91       	ld	r19, X+
    1e3a:	4d 91       	ld	r20, X+
    1e3c:	5c 91       	ld	r21, X
    1e3e:	55 97       	sbiw	r26, 0x15	; 21
    1e40:	22 50       	subi	r18, 0x02	; 2
    1e42:	30 40       	sbci	r19, 0x00	; 0
    1e44:	40 40       	sbci	r20, 0x00	; 0
    1e46:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1e48:	f8 01       	movw	r30, r16
    1e4a:	86 8d       	ldd	r24, Z+30	; 0x1e
    1e4c:	97 8d       	ldd	r25, Z+31	; 0x1f
    1e4e:	a0 a1       	ldd	r26, Z+32	; 0x20
    1e50:	b1 a1       	ldd	r27, Z+33	; 0x21
    1e52:	02 97       	sbiw	r24, 0x02	; 2
    1e54:	a1 09       	sbc	r26, r1
    1e56:	b1 09       	sbc	r27, r1
    1e58:	28 17       	cp	r18, r24
    1e5a:	39 07       	cpc	r19, r25
    1e5c:	4a 07       	cpc	r20, r26
    1e5e:	5b 07       	cpc	r21, r27
    1e60:	b8 f4       	brcc	.+46     	; 0x1e90 <f_write+0x20c>
	return clst * fs->csize + fs->database;
    1e62:	32 80       	ldd	r3, Z+2	; 0x02
    1e64:	63 2d       	mov	r22, r3
    1e66:	70 e0       	ldi	r23, 0x00	; 0
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	0e 94 2e 2e 	call	0x5c5c	; 0x5c5c <__mulsi3>
    1e70:	9b 01       	movw	r18, r22
    1e72:	ac 01       	movw	r20, r24
    1e74:	f8 01       	movw	r30, r16
    1e76:	82 a5       	ldd	r24, Z+42	; 0x2a
    1e78:	93 a5       	ldd	r25, Z+43	; 0x2b
    1e7a:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1e7c:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1e7e:	28 0f       	add	r18, r24
    1e80:	39 1f       	adc	r19, r25
    1e82:	4a 1f       	adc	r20, r26
    1e84:	5b 1f       	adc	r21, r27
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    1e86:	21 15       	cp	r18, r1
    1e88:	31 05       	cpc	r19, r1
    1e8a:	41 05       	cpc	r20, r1
    1e8c:	51 05       	cpc	r21, r1
    1e8e:	49 f4       	brne	.+18     	; 0x1ea2 <f_write+0x21e>
    1e90:	ab 81       	ldd	r26, Y+3	; 0x03
    1e92:	bc 81       	ldd	r27, Y+4	; 0x04
    1e94:	14 96       	adiw	r26, 0x04	; 4
    1e96:	8c 91       	ld	r24, X
    1e98:	14 97       	sbiw	r26, 0x04	; 4
    1e9a:	80 68       	ori	r24, 0x80	; 128
    1e9c:	14 96       	adiw	r26, 0x04	; 4
    1e9e:	8c 93       	st	X, r24
    1ea0:	8a cf       	rjmp	.-236    	; 0x1db6 <f_write+0x132>
			sect += fp->csect;
    1ea2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ea4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ea6:	85 81       	ldd	r24, Z+5	; 0x05
    1ea8:	59 01       	movw	r10, r18
    1eaa:	6a 01       	movw	r12, r20
    1eac:	a8 0e       	add	r10, r24
    1eae:	b1 1c       	adc	r11, r1
    1eb0:	c1 1c       	adc	r12, r1
    1eb2:	d1 1c       	adc	r13, r1
			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
    1eb4:	73 01       	movw	r14, r6
    1eb6:	ef 2c       	mov	r14, r15
    1eb8:	ff 24       	eor	r15, r15
    1eba:	e6 94       	lsr	r14
			if (cc) {								/* Write maximum contiguous sectors directly */
    1ebc:	e1 14       	cp	r14, r1
    1ebe:	f1 04       	cpc	r15, r1
    1ec0:	09 f4       	brne	.+2      	; 0x1ec4 <f_write+0x240>
    1ec2:	51 c0       	rjmp	.+162    	; 0x1f66 <f_write+0x2e2>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    1ec4:	28 2f       	mov	r18, r24
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	c7 01       	movw	r24, r14
    1eca:	82 0f       	add	r24, r18
    1ecc:	93 1f       	adc	r25, r19
    1ece:	63 2d       	mov	r22, r3
    1ed0:	70 e0       	ldi	r23, 0x00	; 0
    1ed2:	68 17       	cp	r22, r24
    1ed4:	79 07       	cpc	r23, r25
    1ed6:	18 f4       	brcc	.+6      	; 0x1ede <f_write+0x25a>
					cc = fp->fs->csize - fp->csect;
    1ed8:	7b 01       	movw	r14, r22
    1eda:	e2 1a       	sub	r14, r18
    1edc:	f3 0a       	sbc	r15, r19
				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
    1ede:	d8 01       	movw	r26, r16
    1ee0:	11 96       	adiw	r26, 0x01	; 1
    1ee2:	8c 91       	ld	r24, X
    1ee4:	b2 01       	movw	r22, r4
    1ee6:	a6 01       	movw	r20, r12
    1ee8:	95 01       	movw	r18, r10
    1eea:	0e 2d       	mov	r16, r14
    1eec:	0e 94 b3 19 	call	0x3366	; 0x3366 <disk_write>
    1ef0:	89 2b       	or	r24, r25
    1ef2:	09 f0       	breq	.+2      	; 0x1ef6 <f_write+0x272>
    1ef4:	79 c0       	rjmp	.+242    	; 0x1fe8 <f_write+0x364>
					ABORT(fp->fs, FR_DISK_ERR);
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
    1ef6:	ab 81       	ldd	r26, Y+3	; 0x03
    1ef8:	bc 81       	ldd	r27, Y+4	; 0x04
    1efa:	ed 91       	ld	r30, X+
    1efc:	fc 91       	ld	r31, X
    1efe:	26 a5       	ldd	r18, Z+46	; 0x2e
    1f00:	37 a5       	ldd	r19, Z+47	; 0x2f
    1f02:	40 a9       	ldd	r20, Z+48	; 0x30
    1f04:	51 a9       	ldd	r21, Z+49	; 0x31
    1f06:	2a 19       	sub	r18, r10
    1f08:	3b 09       	sbc	r19, r11
    1f0a:	4c 09       	sbc	r20, r12
    1f0c:	5d 09       	sbc	r21, r13
    1f0e:	c7 01       	movw	r24, r14
    1f10:	a0 e0       	ldi	r26, 0x00	; 0
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	28 17       	cp	r18, r24
    1f16:	39 07       	cpc	r19, r25
    1f18:	4a 07       	cpc	r20, r26
    1f1a:	5b 07       	cpc	r21, r27
    1f1c:	d0 f4       	brcc	.+52     	; 0x1f52 <f_write+0x2ce>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    1f1e:	df 01       	movw	r26, r30
    1f20:	d2 96       	adiw	r26, 0x32	; 50
	const char *s = (const char *)src;
    1f22:	89 e0       	ldi	r24, 0x09	; 9
    1f24:	22 0f       	add	r18, r18
    1f26:	33 1f       	adc	r19, r19
    1f28:	44 1f       	adc	r20, r20
    1f2a:	55 1f       	adc	r21, r21
    1f2c:	8a 95       	dec	r24
    1f2e:	d1 f7       	brne	.-12     	; 0x1f24 <f_write+0x2a0>
    1f30:	f2 01       	movw	r30, r4
    1f32:	e2 0f       	add	r30, r18
    1f34:	f3 1f       	adc	r31, r19
	while (cnt--) *d++ = *s++;
    1f36:	9f 01       	movw	r18, r30
    1f38:	20 50       	subi	r18, 0x00	; 0
    1f3a:	3e 4f       	sbci	r19, 0xFE	; 254
    1f3c:	02 c0       	rjmp	.+4      	; 0x1f42 <f_write+0x2be>
    1f3e:	81 91       	ld	r24, Z+
    1f40:	8d 93       	st	X+, r24
    1f42:	e2 17       	cp	r30, r18
    1f44:	f3 07       	cpc	r31, r19
    1f46:	d9 f7       	brne	.-10     	; 0x1f3e <f_write+0x2ba>
				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
    1f48:	ab 81       	ldd	r26, Y+3	; 0x03
    1f4a:	bc 81       	ldd	r27, Y+4	; 0x04
    1f4c:	ed 91       	ld	r30, X+
    1f4e:	fc 91       	ld	r31, X
    1f50:	14 82       	std	Z+4, r1	; 0x04
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    1f52:	eb 81       	ldd	r30, Y+3	; 0x03
    1f54:	fc 81       	ldd	r31, Y+4	; 0x04
    1f56:	85 81       	ldd	r24, Z+5	; 0x05
    1f58:	8e 0d       	add	r24, r14
    1f5a:	85 83       	std	Z+5, r24	; 0x05
				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    1f5c:	b7 01       	movw	r22, r14
    1f5e:	76 2f       	mov	r23, r22
    1f60:	66 27       	eor	r22, r22
    1f62:	77 0f       	add	r23, r23
    1f64:	71 c0       	rjmp	.+226    	; 0x2048 <f_write+0x3c4>
				continue;
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
    1f66:	ab 81       	ldd	r26, Y+3	; 0x03
    1f68:	bc 81       	ldd	r27, Y+4	; 0x04
    1f6a:	16 96       	adiw	r26, 0x06	; 6
    1f6c:	2d 91       	ld	r18, X+
    1f6e:	3d 91       	ld	r19, X+
    1f70:	4d 91       	ld	r20, X+
    1f72:	5c 91       	ld	r21, X
    1f74:	19 97       	sbiw	r26, 0x09	; 9
    1f76:	1a 96       	adiw	r26, 0x0a	; 10
    1f78:	8d 91       	ld	r24, X+
    1f7a:	9d 91       	ld	r25, X+
    1f7c:	0d 90       	ld	r0, X+
    1f7e:	bc 91       	ld	r27, X
    1f80:	a0 2d       	mov	r26, r0
    1f82:	28 17       	cp	r18, r24
    1f84:	39 07       	cpc	r19, r25
    1f86:	4a 07       	cpc	r20, r26
    1f88:	5b 07       	cpc	r21, r27
    1f8a:	88 f0       	brcs	.+34     	; 0x1fae <f_write+0x32a>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    1f8c:	c8 01       	movw	r24, r16
    1f8e:	40 e0       	ldi	r20, 0x00	; 0
    1f90:	50 e0       	ldi	r21, 0x00	; 0
    1f92:	60 e0       	ldi	r22, 0x00	; 0
    1f94:	70 e0       	ldi	r23, 0x00	; 0
    1f96:	0e 94 ff 04 	call	0x9fe	; 0x9fe <move_window>
    1f9a:	89 2b       	or	r24, r25
    1f9c:	29 f5       	brne	.+74     	; 0x1fe8 <f_write+0x364>
				fp->fs->winsect = sect;
    1f9e:	ab 81       	ldd	r26, Y+3	; 0x03
    1fa0:	bc 81       	ldd	r27, Y+4	; 0x04
    1fa2:	ed 91       	ld	r30, X+
    1fa4:	fc 91       	ld	r31, X
    1fa6:	a6 a6       	std	Z+46, r10	; 0x2e
    1fa8:	b7 a6       	std	Z+47, r11	; 0x2f
    1faa:	c0 aa       	std	Z+48, r12	; 0x30
    1fac:	d1 aa       	std	Z+49, r13	; 0x31
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    1fae:	eb 81       	ldd	r30, Y+3	; 0x03
    1fb0:	fc 81       	ldd	r31, Y+4	; 0x04
    1fb2:	a6 8a       	std	Z+22, r10	; 0x16
    1fb4:	b7 8a       	std	Z+23, r11	; 0x17
    1fb6:	c0 8e       	std	Z+24, r12	; 0x18
    1fb8:	d1 8e       	std	Z+25, r13	; 0x19
			fp->csect++;							/* Next sector address in the cluster */
    1fba:	85 81       	ldd	r24, Z+5	; 0x05
    1fbc:	8f 5f       	subi	r24, 0xFF	; 255
    1fbe:	85 83       	std	Z+5, r24	; 0x05
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    1fc0:	ab 81       	ldd	r26, Y+3	; 0x03
    1fc2:	bc 81       	ldd	r27, Y+4	; 0x04
    1fc4:	16 96       	adiw	r26, 0x06	; 6
    1fc6:	cd 90       	ld	r12, X+
    1fc8:	dd 90       	ld	r13, X+
    1fca:	ed 90       	ld	r14, X+
    1fcc:	fc 90       	ld	r15, X
    1fce:	19 97       	sbiw	r26, 0x09	; 9
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
    1fd0:	56 96       	adiw	r26, 0x16	; 22
    1fd2:	4d 91       	ld	r20, X+
    1fd4:	5d 91       	ld	r21, X+
    1fd6:	6d 91       	ld	r22, X+
    1fd8:	7c 91       	ld	r23, X
    1fda:	59 97       	sbiw	r26, 0x19	; 25
    1fdc:	8d 91       	ld	r24, X+
    1fde:	9c 91       	ld	r25, X
    1fe0:	0e 94 ff 04 	call	0x9fe	; 0x9fe <move_window>
    1fe4:	89 2b       	or	r24, r25
    1fe6:	49 f0       	breq	.+18     	; 0x1ffa <f_write+0x376>
			ABORT(fp->fs, FR_DISK_ERR);
    1fe8:	eb 81       	ldd	r30, Y+3	; 0x03
    1fea:	fc 81       	ldd	r31, Y+4	; 0x04
    1fec:	84 81       	ldd	r24, Z+4	; 0x04
    1fee:	80 68       	ori	r24, 0x80	; 128
    1ff0:	84 83       	std	Z+4, r24	; 0x04
    1ff2:	a1 e0       	ldi	r26, 0x01	; 1
    1ff4:	8a 2e       	mov	r8, r26
    1ff6:	91 2c       	mov	r9, r1
    1ff8:	69 c0       	rjmp	.+210    	; 0x20cc <f_write+0x448>
			}
#endif
			fp->dsect = sect;
			fp->csect++;							/* Next sector address in the cluster */
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    1ffa:	c6 01       	movw	r24, r12
    1ffc:	91 70       	andi	r25, 0x01	; 1
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	32 e0       	ldi	r19, 0x02	; 2
    2002:	28 1b       	sub	r18, r24
    2004:	39 0b       	sbc	r19, r25
    2006:	b3 01       	movw	r22, r6
    2008:	26 15       	cp	r18, r6
    200a:	37 05       	cpc	r19, r7
    200c:	08 f4       	brcc	.+2      	; 0x2010 <f_write+0x38c>
    200e:	b9 01       	movw	r22, r18
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    2010:	ab 81       	ldd	r26, Y+3	; 0x03
    2012:	bc 81       	ldd	r27, Y+4	; 0x04
    2014:	16 96       	adiw	r26, 0x06	; 6
    2016:	8d 91       	ld	r24, X+
    2018:	9c 91       	ld	r25, X
    201a:	17 97       	sbiw	r26, 0x07	; 7
    201c:	91 70       	andi	r25, 0x01	; 1
    201e:	c2 96       	adiw	r24, 0x32	; 50
    2020:	0d 90       	ld	r0, X+
    2022:	bc 91       	ld	r27, X
    2024:	a0 2d       	mov	r26, r0
    2026:	a8 0f       	add	r26, r24
    2028:	b9 1f       	adc	r27, r25
	const char *s = (const char *)src;
    202a:	f2 01       	movw	r30, r4
	while (cnt--) *d++ = *s++;
    202c:	92 01       	movw	r18, r4
    202e:	26 0f       	add	r18, r22
    2030:	37 1f       	adc	r19, r23
    2032:	02 c0       	rjmp	.+4      	; 0x2038 <f_write+0x3b4>
    2034:	81 91       	ld	r24, Z+
    2036:	8d 93       	st	X+, r24
    2038:	e2 17       	cp	r30, r18
    203a:	f3 07       	cpc	r31, r19
    203c:	d9 f7       	brne	.-10     	; 0x2034 <f_write+0x3b0>
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
    203e:	ab 81       	ldd	r26, Y+3	; 0x03
    2040:	bc 81       	ldd	r27, Y+4	; 0x04
    2042:	ed 91       	ld	r30, X+
    2044:	fc 91       	ld	r31, X
    2046:	24 82       	std	Z+4, r2	; 0x04
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    2048:	46 0e       	add	r4, r22
    204a:	57 1e       	adc	r5, r23
    204c:	cb 01       	movw	r24, r22
    204e:	a0 e0       	ldi	r26, 0x00	; 0
    2050:	b0 e0       	ldi	r27, 0x00	; 0
    2052:	eb 81       	ldd	r30, Y+3	; 0x03
    2054:	fc 81       	ldd	r31, Y+4	; 0x04
    2056:	26 81       	ldd	r18, Z+6	; 0x06
    2058:	37 81       	ldd	r19, Z+7	; 0x07
    205a:	40 85       	ldd	r20, Z+8	; 0x08
    205c:	51 85       	ldd	r21, Z+9	; 0x09
    205e:	28 0f       	add	r18, r24
    2060:	39 1f       	adc	r19, r25
    2062:	4a 1f       	adc	r20, r26
    2064:	5b 1f       	adc	r21, r27
    2066:	26 83       	std	Z+6, r18	; 0x06
    2068:	37 83       	std	Z+7, r19	; 0x07
    206a:	40 87       	std	Z+8, r20	; 0x08
    206c:	51 87       	std	Z+9, r21	; 0x09
    206e:	e9 81       	ldd	r30, Y+1	; 0x01
    2070:	fa 81       	ldd	r31, Y+2	; 0x02
    2072:	80 81       	ld	r24, Z
    2074:	91 81       	ldd	r25, Z+1	; 0x01
    2076:	86 0f       	add	r24, r22
    2078:	97 1f       	adc	r25, r23
    207a:	91 83       	std	Z+1, r25	; 0x01
    207c:	80 83       	st	Z, r24
    207e:	66 1a       	sub	r6, r22
    2080:	77 0a       	sbc	r7, r23
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
    2082:	61 14       	cp	r6, r1
    2084:	71 04       	cpc	r7, r1
    2086:	09 f0       	breq	.+2      	; 0x208a <f_write+0x406>
    2088:	3f ce       	rjmp	.-898    	; 0x1d08 <f_write+0x84>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    208a:	ab 81       	ldd	r26, Y+3	; 0x03
    208c:	bc 81       	ldd	r27, Y+4	; 0x04
    208e:	16 96       	adiw	r26, 0x06	; 6
    2090:	2d 91       	ld	r18, X+
    2092:	3d 91       	ld	r19, X+
    2094:	4d 91       	ld	r20, X+
    2096:	5c 91       	ld	r21, X
    2098:	19 97       	sbiw	r26, 0x09	; 9
    209a:	1a 96       	adiw	r26, 0x0a	; 10
    209c:	8d 91       	ld	r24, X+
    209e:	9d 91       	ld	r25, X+
    20a0:	0d 90       	ld	r0, X+
    20a2:	bc 91       	ld	r27, X
    20a4:	a0 2d       	mov	r26, r0
    20a6:	82 17       	cp	r24, r18
    20a8:	93 07       	cpc	r25, r19
    20aa:	a4 07       	cpc	r26, r20
    20ac:	b5 07       	cpc	r27, r21
    20ae:	30 f4       	brcc	.+12     	; 0x20bc <f_write+0x438>
    20b0:	eb 81       	ldd	r30, Y+3	; 0x03
    20b2:	fc 81       	ldd	r31, Y+4	; 0x04
    20b4:	22 87       	std	Z+10, r18	; 0x0a
    20b6:	33 87       	std	Z+11, r19	; 0x0b
    20b8:	44 87       	std	Z+12, r20	; 0x0c
    20ba:	55 87       	std	Z+13, r21	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
    20bc:	ab 81       	ldd	r26, Y+3	; 0x03
    20be:	bc 81       	ldd	r27, Y+4	; 0x04
    20c0:	14 96       	adiw	r26, 0x04	; 4
    20c2:	8c 91       	ld	r24, X
    20c4:	14 97       	sbiw	r26, 0x04	; 4
    20c6:	80 62       	ori	r24, 0x20	; 32
    20c8:	14 96       	adiw	r26, 0x04	; 4
    20ca:	8c 93       	st	X, r24

	LEAVE_FF(fp->fs, FR_OK);
}
    20cc:	c4 01       	movw	r24, r8
    20ce:	24 96       	adiw	r28, 0x04	; 4
    20d0:	e2 e1       	ldi	r30, 0x12	; 18
    20d2:	0c 94 be 2e 	jmp	0x5d7c	; 0x5d7c <__epilogue_restores__>

000020d6 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    20d6:	a4 e0       	ldi	r26, 0x04	; 4
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	e1 e7       	ldi	r30, 0x71	; 113
    20dc:	f0 e1       	ldi	r31, 0x10	; 16
    20de:	0c 94 a3 2e 	jmp	0x5d46	; 0x5d46 <__prologue_saves__+0x2>
    20e2:	9c 83       	std	Y+4, r25	; 0x04
    20e4:	8b 83       	std	Y+3, r24	; 0x03
    20e6:	16 2f       	mov	r17, r22
    20e8:	07 2f       	mov	r16, r23
    20ea:	3a 01       	movw	r6, r20
    20ec:	3a 83       	std	Y+2, r19	; 0x02
    20ee:	29 83       	std	Y+1, r18	; 0x01
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;


	*br = 0;	/* Initialize bytes read */
    20f0:	d9 01       	movw	r26, r18
    20f2:	1d 92       	st	X+, r1
    20f4:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    20f6:	fc 01       	movw	r30, r24
    20f8:	62 81       	ldd	r22, Z+2	; 0x02
    20fa:	73 81       	ldd	r23, Z+3	; 0x03
    20fc:	80 81       	ld	r24, Z
    20fe:	91 81       	ldd	r25, Z+1	; 0x01
    2100:	0e 94 e5 04 	call	0x9ca	; 0x9ca <validate>
    2104:	4c 01       	movw	r8, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2106:	00 97       	sbiw	r24, 0x00	; 0
    2108:	09 f0       	breq	.+2      	; 0x210c <f_read+0x36>
    210a:	8a c1       	rjmp	.+788    	; 0x2420 <f_read+0x34a>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    210c:	ab 81       	ldd	r26, Y+3	; 0x03
    210e:	bc 81       	ldd	r27, Y+4	; 0x04
    2110:	14 96       	adiw	r26, 0x04	; 4
    2112:	8c 91       	ld	r24, X
    2114:	87 fd       	sbrc	r24, 7
    2116:	60 c0       	rjmp	.+192    	; 0x21d8 <f_read+0x102>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
    2118:	80 fd       	sbrc	r24, 0
    211a:	04 c0       	rjmp	.+8      	; 0x2124 <f_read+0x4e>
    211c:	97 e0       	ldi	r25, 0x07	; 7
    211e:	89 2e       	mov	r8, r25
    2120:	91 2c       	mov	r9, r1
    2122:	7e c1       	rjmp	.+764    	; 0x2420 <f_read+0x34a>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    2124:	eb 81       	ldd	r30, Y+3	; 0x03
    2126:	fc 81       	ldd	r31, Y+4	; 0x04
    2128:	22 85       	ldd	r18, Z+10	; 0x0a
    212a:	33 85       	ldd	r19, Z+11	; 0x0b
    212c:	44 85       	ldd	r20, Z+12	; 0x0c
    212e:	55 85       	ldd	r21, Z+13	; 0x0d
    2130:	86 81       	ldd	r24, Z+6	; 0x06
    2132:	97 81       	ldd	r25, Z+7	; 0x07
    2134:	a0 85       	ldd	r26, Z+8	; 0x08
    2136:	b1 85       	ldd	r27, Z+9	; 0x09
    2138:	28 1b       	sub	r18, r24
    213a:	39 0b       	sbc	r19, r25
    213c:	4a 0b       	sbc	r20, r26
    213e:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
    2140:	c3 01       	movw	r24, r6
    2142:	a0 e0       	ldi	r26, 0x00	; 0
    2144:	b0 e0       	ldi	r27, 0x00	; 0
    2146:	28 17       	cp	r18, r24
    2148:	39 07       	cpc	r19, r25
    214a:	4a 07       	cpc	r20, r26
    214c:	5b 07       	cpc	r21, r27
    214e:	08 f4       	brcc	.+2      	; 0x2152 <f_read+0x7c>
    2150:	39 01       	movw	r6, r18
)
{
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;
    2152:	81 2f       	mov	r24, r17
    2154:	90 2f       	mov	r25, r16
    2156:	9c 01       	movw	r18, r24
    2158:	29 01       	movw	r4, r18
    215a:	5e c1       	rjmp	.+700    	; 0x2418 <f_read+0x342>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    215c:	ab 81       	ldd	r26, Y+3	; 0x03
    215e:	bc 81       	ldd	r27, Y+4	; 0x04
    2160:	16 96       	adiw	r26, 0x06	; 6
    2162:	2d 91       	ld	r18, X+
    2164:	3d 91       	ld	r19, X+
    2166:	4d 91       	ld	r20, X+
    2168:	5c 91       	ld	r21, X
    216a:	19 97       	sbiw	r26, 0x09	; 9
    216c:	da 01       	movw	r26, r20
    216e:	c9 01       	movw	r24, r18
    2170:	91 70       	andi	r25, 0x01	; 1
    2172:	a0 70       	andi	r26, 0x00	; 0
    2174:	b0 70       	andi	r27, 0x00	; 0
    2176:	00 97       	sbiw	r24, 0x00	; 0
    2178:	a1 05       	cpc	r26, r1
    217a:	b1 05       	cpc	r27, r1
    217c:	09 f0       	breq	.+2      	; 0x2180 <f_read+0xaa>
    217e:	ef c0       	rjmp	.+478    	; 0x235e <f_read+0x288>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
    2180:	ab 81       	ldd	r26, Y+3	; 0x03
    2182:	bc 81       	ldd	r27, Y+4	; 0x04
    2184:	ed 91       	ld	r30, X+
    2186:	fc 91       	ld	r31, X
    2188:	11 97       	sbiw	r26, 0x01	; 1
    218a:	15 96       	adiw	r26, 0x05	; 5
    218c:	9c 91       	ld	r25, X
    218e:	15 97       	sbiw	r26, 0x05	; 5
    2190:	82 81       	ldd	r24, Z+2	; 0x02
    2192:	98 17       	cp	r25, r24
    2194:	e8 f1       	brcs	.+122    	; 0x2210 <f_read+0x13a>
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
    2196:	21 15       	cp	r18, r1
    2198:	31 05       	cpc	r19, r1
    219a:	41 05       	cpc	r20, r1
    219c:	51 05       	cpc	r21, r1
    219e:	39 f4       	brne	.+14     	; 0x21ae <f_read+0xd8>
    21a0:	1e 96       	adiw	r26, 0x0e	; 14
    21a2:	6d 91       	ld	r22, X+
    21a4:	7d 91       	ld	r23, X+
    21a6:	8d 91       	ld	r24, X+
    21a8:	9c 91       	ld	r25, X
    21aa:	51 97       	sbiw	r26, 0x11	; 17
    21ac:	0b c0       	rjmp	.+22     	; 0x21c4 <f_read+0xee>
    21ae:	ab 81       	ldd	r26, Y+3	; 0x03
    21b0:	bc 81       	ldd	r27, Y+4	; 0x04
    21b2:	52 96       	adiw	r26, 0x12	; 18
    21b4:	4d 91       	ld	r20, X+
    21b6:	5d 91       	ld	r21, X+
    21b8:	6d 91       	ld	r22, X+
    21ba:	7c 91       	ld	r23, X
    21bc:	55 97       	sbiw	r26, 0x15	; 21
    21be:	cf 01       	movw	r24, r30
    21c0:	0e 94 33 06 	call	0xc66	; 0xc66 <get_fat>
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
    21c4:	62 30       	cpi	r22, 0x02	; 2
    21c6:	71 05       	cpc	r23, r1
    21c8:	81 05       	cpc	r24, r1
    21ca:	91 05       	cpc	r25, r1
    21cc:	48 f4       	brcc	.+18     	; 0x21e0 <f_read+0x10a>
    21ce:	eb 81       	ldd	r30, Y+3	; 0x03
    21d0:	fc 81       	ldd	r31, Y+4	; 0x04
    21d2:	84 81       	ldd	r24, Z+4	; 0x04
    21d4:	80 68       	ori	r24, 0x80	; 128
    21d6:	84 83       	std	Z+4, r24	; 0x04
    21d8:	82 e0       	ldi	r24, 0x02	; 2
    21da:	88 2e       	mov	r8, r24
    21dc:	91 2c       	mov	r9, r1
    21de:	20 c1       	rjmp	.+576    	; 0x2420 <f_read+0x34a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    21e0:	6f 3f       	cpi	r22, 0xFF	; 255
    21e2:	ff ef       	ldi	r31, 0xFF	; 255
    21e4:	7f 07       	cpc	r23, r31
    21e6:	ff ef       	ldi	r31, 0xFF	; 255
    21e8:	8f 07       	cpc	r24, r31
    21ea:	ff ef       	ldi	r31, 0xFF	; 255
    21ec:	9f 07       	cpc	r25, r31
    21ee:	49 f4       	brne	.+18     	; 0x2202 <f_read+0x12c>
    21f0:	ab 81       	ldd	r26, Y+3	; 0x03
    21f2:	bc 81       	ldd	r27, Y+4	; 0x04
    21f4:	14 96       	adiw	r26, 0x04	; 4
    21f6:	8c 91       	ld	r24, X
    21f8:	14 97       	sbiw	r26, 0x04	; 4
    21fa:	80 68       	ori	r24, 0x80	; 128
    21fc:	14 96       	adiw	r26, 0x04	; 4
    21fe:	8c 93       	st	X, r24
    2200:	c7 c0       	rjmp	.+398    	; 0x2390 <f_read+0x2ba>
				fp->curr_clust = clst;				/* Update current cluster */
    2202:	eb 81       	ldd	r30, Y+3	; 0x03
    2204:	fc 81       	ldd	r31, Y+4	; 0x04
    2206:	62 8b       	std	Z+18, r22	; 0x12
    2208:	73 8b       	std	Z+19, r23	; 0x13
    220a:	84 8b       	std	Z+20, r24	; 0x14
    220c:	95 8b       	std	Z+21, r25	; 0x15
				fp->csect = 0;						/* Reset sector offset in the cluster */
    220e:	15 82       	std	Z+5, r1	; 0x05
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    2210:	ab 81       	ldd	r26, Y+3	; 0x03
    2212:	bc 81       	ldd	r27, Y+4	; 0x04
    2214:	0d 91       	ld	r16, X+
    2216:	1c 91       	ld	r17, X
    2218:	11 97       	sbiw	r26, 0x01	; 1
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    221a:	52 96       	adiw	r26, 0x12	; 18
    221c:	2d 91       	ld	r18, X+
    221e:	3d 91       	ld	r19, X+
    2220:	4d 91       	ld	r20, X+
    2222:	5c 91       	ld	r21, X
    2224:	55 97       	sbiw	r26, 0x15	; 21
    2226:	22 50       	subi	r18, 0x02	; 2
    2228:	30 40       	sbci	r19, 0x00	; 0
    222a:	40 40       	sbci	r20, 0x00	; 0
    222c:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    222e:	f8 01       	movw	r30, r16
    2230:	86 8d       	ldd	r24, Z+30	; 0x1e
    2232:	97 8d       	ldd	r25, Z+31	; 0x1f
    2234:	a0 a1       	ldd	r26, Z+32	; 0x20
    2236:	b1 a1       	ldd	r27, Z+33	; 0x21
    2238:	02 97       	sbiw	r24, 0x02	; 2
    223a:	a1 09       	sbc	r26, r1
    223c:	b1 09       	sbc	r27, r1
    223e:	28 17       	cp	r18, r24
    2240:	39 07       	cpc	r19, r25
    2242:	4a 07       	cpc	r20, r26
    2244:	5b 07       	cpc	r21, r27
    2246:	b8 f4       	brcc	.+46     	; 0x2276 <f_read+0x1a0>
	return clst * fs->csize + fs->database;
    2248:	32 80       	ldd	r3, Z+2	; 0x02
    224a:	63 2d       	mov	r22, r3
    224c:	70 e0       	ldi	r23, 0x00	; 0
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	0e 94 2e 2e 	call	0x5c5c	; 0x5c5c <__mulsi3>
    2256:	9b 01       	movw	r18, r22
    2258:	ac 01       	movw	r20, r24
    225a:	f8 01       	movw	r30, r16
    225c:	82 a5       	ldd	r24, Z+42	; 0x2a
    225e:	93 a5       	ldd	r25, Z+43	; 0x2b
    2260:	a4 a5       	ldd	r26, Z+44	; 0x2c
    2262:	b5 a5       	ldd	r27, Z+45	; 0x2d
    2264:	28 0f       	add	r18, r24
    2266:	39 1f       	adc	r19, r25
    2268:	4a 1f       	adc	r20, r26
    226a:	5b 1f       	adc	r21, r27
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->curr_clust = clst;				/* Update current cluster */
				fp->csect = 0;						/* Reset sector offset in the cluster */
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    226c:	21 15       	cp	r18, r1
    226e:	31 05       	cpc	r19, r1
    2270:	41 05       	cpc	r20, r1
    2272:	51 05       	cpc	r21, r1
    2274:	49 f4       	brne	.+18     	; 0x2288 <f_read+0x1b2>
    2276:	ab 81       	ldd	r26, Y+3	; 0x03
    2278:	bc 81       	ldd	r27, Y+4	; 0x04
    227a:	14 96       	adiw	r26, 0x04	; 4
    227c:	8c 91       	ld	r24, X
    227e:	14 97       	sbiw	r26, 0x04	; 4
    2280:	80 68       	ori	r24, 0x80	; 128
    2282:	14 96       	adiw	r26, 0x04	; 4
    2284:	8c 93       	st	X, r24
    2286:	a8 cf       	rjmp	.-176    	; 0x21d8 <f_read+0x102>
			sect += fp->csect;
    2288:	eb 81       	ldd	r30, Y+3	; 0x03
    228a:	fc 81       	ldd	r31, Y+4	; 0x04
    228c:	85 81       	ldd	r24, Z+5	; 0x05
    228e:	69 01       	movw	r12, r18
    2290:	7a 01       	movw	r14, r20
    2292:	c8 0e       	add	r12, r24
    2294:	d1 1c       	adc	r13, r1
    2296:	e1 1c       	adc	r14, r1
    2298:	f1 1c       	adc	r15, r1
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
    229a:	53 01       	movw	r10, r6
    229c:	ab 2c       	mov	r10, r11
    229e:	bb 24       	eor	r11, r11
    22a0:	a6 94       	lsr	r10
			if (cc) {								/* Read maximum contiguous sectors directly */
    22a2:	a1 14       	cp	r10, r1
    22a4:	b1 04       	cpc	r11, r1
    22a6:	09 f4       	brne	.+2      	; 0x22aa <f_read+0x1d4>
    22a8:	52 c0       	rjmp	.+164    	; 0x234e <f_read+0x278>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    22aa:	28 2f       	mov	r18, r24
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	c5 01       	movw	r24, r10
    22b0:	82 0f       	add	r24, r18
    22b2:	93 1f       	adc	r25, r19
    22b4:	63 2d       	mov	r22, r3
    22b6:	70 e0       	ldi	r23, 0x00	; 0
    22b8:	68 17       	cp	r22, r24
    22ba:	79 07       	cpc	r23, r25
    22bc:	18 f4       	brcc	.+6      	; 0x22c4 <f_read+0x1ee>
					cc = fp->fs->csize - fp->csect;
    22be:	5b 01       	movw	r10, r22
    22c0:	a2 1a       	sub	r10, r18
    22c2:	b3 0a       	sbc	r11, r19
				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
    22c4:	d8 01       	movw	r26, r16
    22c6:	11 96       	adiw	r26, 0x01	; 1
    22c8:	8c 91       	ld	r24, X
    22ca:	b2 01       	movw	r22, r4
    22cc:	a7 01       	movw	r20, r14
    22ce:	96 01       	movw	r18, r12
    22d0:	0a 2d       	mov	r16, r10
    22d2:	0e 94 55 19 	call	0x32aa	; 0x32aa <disk_read>
    22d6:	89 2b       	or	r24, r25
    22d8:	09 f0       	breq	.+2      	; 0x22dc <f_read+0x206>
    22da:	55 c0       	rjmp	.+170    	; 0x2386 <f_read+0x2b0>
					ABORT(fp->fs, FR_DISK_ERR);
#if !_FS_READONLY && _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)		/* Replace one of the read sectors with cached data if it contains a dirty sector */
    22dc:	ab 81       	ldd	r26, Y+3	; 0x03
    22de:	bc 81       	ldd	r27, Y+4	; 0x04
    22e0:	6d 91       	ld	r22, X+
    22e2:	7c 91       	ld	r23, X
    22e4:	fb 01       	movw	r30, r22
    22e6:	84 81       	ldd	r24, Z+4	; 0x04
    22e8:	88 23       	and	r24, r24
    22ea:	21 f1       	breq	.+72     	; 0x2334 <f_read+0x25e>
    22ec:	26 a5       	ldd	r18, Z+46	; 0x2e
    22ee:	37 a5       	ldd	r19, Z+47	; 0x2f
    22f0:	40 a9       	ldd	r20, Z+48	; 0x30
    22f2:	51 a9       	ldd	r21, Z+49	; 0x31
    22f4:	2c 19       	sub	r18, r12
    22f6:	3d 09       	sbc	r19, r13
    22f8:	4e 09       	sbc	r20, r14
    22fa:	5f 09       	sbc	r21, r15
    22fc:	c5 01       	movw	r24, r10
    22fe:	a0 e0       	ldi	r26, 0x00	; 0
    2300:	b0 e0       	ldi	r27, 0x00	; 0
    2302:	28 17       	cp	r18, r24
    2304:	39 07       	cpc	r19, r25
    2306:	4a 07       	cpc	r20, r26
    2308:	5b 07       	cpc	r21, r27
    230a:	a0 f4       	brcc	.+40     	; 0x2334 <f_read+0x25e>
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    230c:	a9 e0       	ldi	r26, 0x09	; 9
    230e:	22 0f       	add	r18, r18
    2310:	33 1f       	adc	r19, r19
    2312:	44 1f       	adc	r20, r20
    2314:	55 1f       	adc	r21, r21
    2316:	aa 95       	dec	r26
    2318:	d1 f7       	brne	.-12     	; 0x230e <f_read+0x238>
    231a:	d2 01       	movw	r26, r4
    231c:	a2 0f       	add	r26, r18
    231e:	b3 1f       	adc	r27, r19
	const char *s = (const char *)src;
    2320:	f2 96       	adiw	r30, 0x32	; 50
	while (cnt--) *d++ = *s++;
    2322:	9b 01       	movw	r18, r22
    2324:	2e 5c       	subi	r18, 0xCE	; 206
    2326:	3d 4f       	sbci	r19, 0xFD	; 253
    2328:	02 c0       	rjmp	.+4      	; 0x232e <f_read+0x258>
    232a:	81 91       	ld	r24, Z+
    232c:	8d 93       	st	X+, r24
    232e:	e2 17       	cp	r30, r18
    2330:	f3 07       	cpc	r31, r19
    2332:	d9 f7       	brne	.-10     	; 0x232a <f_read+0x254>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
    2334:	ab 81       	ldd	r26, Y+3	; 0x03
    2336:	bc 81       	ldd	r27, Y+4	; 0x04
    2338:	15 96       	adiw	r26, 0x05	; 5
    233a:	8c 91       	ld	r24, X
    233c:	15 97       	sbiw	r26, 0x05	; 5
    233e:	8a 0d       	add	r24, r10
    2340:	15 96       	adiw	r26, 0x05	; 5
    2342:	8c 93       	st	X, r24
				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    2344:	b5 01       	movw	r22, r10
    2346:	76 2f       	mov	r23, r22
    2348:	66 27       	eor	r22, r22
    234a:	77 0f       	add	r23, r23
    234c:	48 c0       	rjmp	.+144    	; 0x23de <f_read+0x308>
			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    234e:	eb 81       	ldd	r30, Y+3	; 0x03
    2350:	fc 81       	ldd	r31, Y+4	; 0x04
    2352:	c6 8a       	std	Z+22, r12	; 0x16
    2354:	d7 8a       	std	Z+23, r13	; 0x17
    2356:	e0 8e       	std	Z+24, r14	; 0x18
    2358:	f1 8e       	std	Z+25, r15	; 0x19
			fp->csect++;							/* Next sector address in the cluster */
    235a:	8f 5f       	subi	r24, 0xFF	; 255
    235c:	85 83       	std	Z+5, r24	; 0x05
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    235e:	ab 81       	ldd	r26, Y+3	; 0x03
    2360:	bc 81       	ldd	r27, Y+4	; 0x04
    2362:	16 96       	adiw	r26, 0x06	; 6
    2364:	cd 90       	ld	r12, X+
    2366:	dd 90       	ld	r13, X+
    2368:	ed 90       	ld	r14, X+
    236a:	fc 90       	ld	r15, X
    236c:	19 97       	sbiw	r26, 0x09	; 9
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
    236e:	56 96       	adiw	r26, 0x16	; 22
    2370:	4d 91       	ld	r20, X+
    2372:	5d 91       	ld	r21, X+
    2374:	6d 91       	ld	r22, X+
    2376:	7c 91       	ld	r23, X
    2378:	59 97       	sbiw	r26, 0x19	; 25
    237a:	8d 91       	ld	r24, X+
    237c:	9c 91       	ld	r25, X
    237e:	0e 94 ff 04 	call	0x9fe	; 0x9fe <move_window>
    2382:	89 2b       	or	r24, r25
    2384:	49 f0       	breq	.+18     	; 0x2398 <f_read+0x2c2>
			ABORT(fp->fs, FR_DISK_ERR);
    2386:	eb 81       	ldd	r30, Y+3	; 0x03
    2388:	fc 81       	ldd	r31, Y+4	; 0x04
    238a:	84 81       	ldd	r24, Z+4	; 0x04
    238c:	80 68       	ori	r24, 0x80	; 128
    238e:	84 83       	std	Z+4, r24	; 0x04
    2390:	41 e0       	ldi	r20, 0x01	; 1
    2392:	84 2e       	mov	r8, r20
    2394:	91 2c       	mov	r9, r1
    2396:	44 c0       	rjmp	.+136    	; 0x2420 <f_read+0x34a>
			}
#endif
			fp->dsect = sect;
			fp->csect++;							/* Next sector address in the cluster */
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    2398:	c6 01       	movw	r24, r12
    239a:	91 70       	andi	r25, 0x01	; 1
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	32 e0       	ldi	r19, 0x02	; 2
    23a0:	28 1b       	sub	r18, r24
    23a2:	39 0b       	sbc	r19, r25
    23a4:	b3 01       	movw	r22, r6
    23a6:	26 15       	cp	r18, r6
    23a8:	37 05       	cpc	r19, r7
    23aa:	08 f4       	brcc	.+2      	; 0x23ae <f_read+0x2d8>
    23ac:	b9 01       	movw	r22, r18
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
    23ae:	a2 01       	movw	r20, r4
	const char *s = (const char *)src;
    23b0:	ab 81       	ldd	r26, Y+3	; 0x03
    23b2:	bc 81       	ldd	r27, Y+4	; 0x04
    23b4:	16 96       	adiw	r26, 0x06	; 6
    23b6:	8d 91       	ld	r24, X+
    23b8:	9c 91       	ld	r25, X
    23ba:	17 97       	sbiw	r26, 0x07	; 7
    23bc:	91 70       	andi	r25, 0x01	; 1
    23be:	c2 96       	adiw	r24, 0x32	; 50
    23c0:	ed 91       	ld	r30, X+
    23c2:	fc 91       	ld	r31, X
    23c4:	e8 0f       	add	r30, r24
    23c6:	f9 1f       	adc	r31, r25
	while (cnt--) *d++ = *s++;
    23c8:	9f 01       	movw	r18, r30
    23ca:	26 0f       	add	r18, r22
    23cc:	37 1f       	adc	r19, r23
    23ce:	04 c0       	rjmp	.+8      	; 0x23d8 <f_read+0x302>
    23d0:	81 91       	ld	r24, Z+
    23d2:	da 01       	movw	r26, r20
    23d4:	8d 93       	st	X+, r24
    23d6:	ad 01       	movw	r20, r26
    23d8:	e2 17       	cp	r30, r18
    23da:	f3 07       	cpc	r31, r19
    23dc:	c9 f7       	brne	.-14     	; 0x23d0 <f_read+0x2fa>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    23de:	46 0e       	add	r4, r22
    23e0:	57 1e       	adc	r5, r23
    23e2:	cb 01       	movw	r24, r22
    23e4:	a0 e0       	ldi	r26, 0x00	; 0
    23e6:	b0 e0       	ldi	r27, 0x00	; 0
    23e8:	eb 81       	ldd	r30, Y+3	; 0x03
    23ea:	fc 81       	ldd	r31, Y+4	; 0x04
    23ec:	26 81       	ldd	r18, Z+6	; 0x06
    23ee:	37 81       	ldd	r19, Z+7	; 0x07
    23f0:	40 85       	ldd	r20, Z+8	; 0x08
    23f2:	51 85       	ldd	r21, Z+9	; 0x09
    23f4:	28 0f       	add	r18, r24
    23f6:	39 1f       	adc	r19, r25
    23f8:	4a 1f       	adc	r20, r26
    23fa:	5b 1f       	adc	r21, r27
    23fc:	26 83       	std	Z+6, r18	; 0x06
    23fe:	37 83       	std	Z+7, r19	; 0x07
    2400:	40 87       	std	Z+8, r20	; 0x08
    2402:	51 87       	std	Z+9, r21	; 0x09
    2404:	e9 81       	ldd	r30, Y+1	; 0x01
    2406:	fa 81       	ldd	r31, Y+2	; 0x02
    2408:	80 81       	ld	r24, Z
    240a:	91 81       	ldd	r25, Z+1	; 0x01
    240c:	86 0f       	add	r24, r22
    240e:	97 1f       	adc	r25, r23
    2410:	91 83       	std	Z+1, r25	; 0x01
    2412:	80 83       	st	Z, r24
    2414:	66 1a       	sub	r6, r22
    2416:	77 0a       	sbc	r7, r23
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
    2418:	61 14       	cp	r6, r1
    241a:	71 04       	cpc	r7, r1
    241c:	09 f0       	breq	.+2      	; 0x2420 <f_read+0x34a>
    241e:	9e ce       	rjmp	.-708    	; 0x215c <f_read+0x86>
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    2420:	c4 01       	movw	r24, r8
    2422:	24 96       	adiw	r28, 0x04	; 4
    2424:	e1 e1       	ldi	r30, 0x11	; 17
    2426:	0c 94 bf 2e 	jmp	0x5d7e	; 0x5d7e <__epilogue_restores__+0x2>

0000242a <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    242a:	0f 93       	push	r16
    242c:	cf 93       	push	r28
    242e:	df 93       	push	r29
    2430:	ec 01       	movw	r28, r24
    2432:	9a 01       	movw	r18, r20
    2434:	ab 01       	movw	r20, r22
	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    2436:	bc 01       	movw	r22, r24
    2438:	6e 5c       	subi	r22, 0xCE	; 206
    243a:	7f 4f       	sbci	r23, 0xFF	; 255
    243c:	89 81       	ldd	r24, Y+1	; 0x01
    243e:	01 e0       	ldi	r16, 0x01	; 1
    2440:	0e 94 55 19 	call	0x32aa	; 0x32aa <disk_read>
    2444:	89 2b       	or	r24, r25
    2446:	11 f0       	breq	.+4      	; 0x244c <check_fs+0x22>
    2448:	23 e0       	ldi	r18, 0x03	; 3
    244a:	29 c0       	rjmp	.+82     	; 0x249e <check_fs+0x74>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    244c:	c0 5d       	subi	r28, 0xD0	; 208
    244e:	dd 4f       	sbci	r29, 0xFD	; 253
    2450:	88 81       	ld	r24, Y
    2452:	99 81       	ldd	r25, Y+1	; 0x01
    2454:	c0 53       	subi	r28, 0x30	; 48
    2456:	d2 40       	sbci	r29, 0x02	; 2
    2458:	85 55       	subi	r24, 0x55	; 85
    245a:	9a 4a       	sbci	r25, 0xAA	; 170
    245c:	11 f0       	breq	.+4      	; 0x2462 <check_fs+0x38>
    245e:	22 e0       	ldi	r18, 0x02	; 2
    2460:	1e c0       	rjmp	.+60     	; 0x249e <check_fs+0x74>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    2462:	c8 59       	subi	r28, 0x98	; 152
    2464:	df 4f       	sbci	r29, 0xFF	; 255
    2466:	88 81       	ld	r24, Y
    2468:	99 81       	ldd	r25, Y+1	; 0x01
    246a:	aa 81       	ldd	r26, Y+2	; 0x02
    246c:	bb 81       	ldd	r27, Y+3	; 0x03
    246e:	c8 56       	subi	r28, 0x68	; 104
    2470:	d0 40       	sbci	r29, 0x00	; 0
    2472:	b0 70       	andi	r27, 0x00	; 0
    2474:	86 54       	subi	r24, 0x46	; 70
    2476:	91 44       	sbci	r25, 0x41	; 65
    2478:	a4 45       	sbci	r26, 0x54	; 84
    247a:	b0 40       	sbci	r27, 0x00	; 0
    247c:	11 f4       	brne	.+4      	; 0x2482 <check_fs+0x58>
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	0e c0       	rjmp	.+28     	; 0x249e <check_fs+0x74>
    2482:	20 e0       	ldi	r18, 0x00	; 0
    2484:	cc 57       	subi	r28, 0x7C	; 124
    2486:	df 4f       	sbci	r29, 0xFF	; 255
    2488:	88 81       	ld	r24, Y
    248a:	99 81       	ldd	r25, Y+1	; 0x01
    248c:	aa 81       	ldd	r26, Y+2	; 0x02
    248e:	bb 81       	ldd	r27, Y+3	; 0x03
    2490:	b0 70       	andi	r27, 0x00	; 0
    2492:	86 54       	subi	r24, 0x46	; 70
    2494:	91 44       	sbci	r25, 0x41	; 65
    2496:	a4 45       	sbci	r26, 0x54	; 84
    2498:	b0 40       	sbci	r27, 0x00	; 0
    249a:	09 f0       	breq	.+2      	; 0x249e <check_fs+0x74>
    249c:	21 e0       	ldi	r18, 0x01	; 1
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
    249e:	82 2f       	mov	r24, r18
    24a0:	df 91       	pop	r29
    24a2:	cf 91       	pop	r28
    24a4:	0f 91       	pop	r16
    24a6:	08 95       	ret

000024a8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    24a8:	0f 93       	push	r16
    24aa:	1f 93       	push	r17
    24ac:	cf 93       	push	r28
    24ae:	df 93       	push	r29
    24b0:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    24b2:	6a 81       	ldd	r22, Y+2	; 0x02
    24b4:	7b 81       	ldd	r23, Y+3	; 0x03
    24b6:	88 81       	ld	r24, Y
    24b8:	99 81       	ldd	r25, Y+1	; 0x01
    24ba:	0e 94 e5 04 	call	0x9ca	; 0x9ca <validate>
    24be:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    24c0:	00 97       	sbiw	r24, 0x00	; 0
    24c2:	09 f0       	breq	.+2      	; 0x24c6 <f_sync+0x1e>
    24c4:	a6 c0       	rjmp	.+332    	; 0x2612 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    24c6:	8c 81       	ldd	r24, Y+4	; 0x04
    24c8:	85 ff       	sbrs	r24, 5
    24ca:	a3 c0       	rjmp	.+326    	; 0x2612 <f_sync+0x16a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    24cc:	4a 8d       	ldd	r20, Y+26	; 0x1a
    24ce:	5b 8d       	ldd	r21, Y+27	; 0x1b
    24d0:	6c 8d       	ldd	r22, Y+28	; 0x1c
    24d2:	7d 8d       	ldd	r23, Y+29	; 0x1d
    24d4:	88 81       	ld	r24, Y
    24d6:	99 81       	ldd	r25, Y+1	; 0x01
    24d8:	0e 94 ff 04 	call	0x9fe	; 0x9fe <move_window>
    24dc:	9c 01       	movw	r18, r24
			if (res == FR_OK) {
    24de:	00 97       	sbiw	r24, 0x00	; 0
    24e0:	09 f0       	breq	.+2      	; 0x24e4 <f_sync+0x3c>
    24e2:	97 c0       	rjmp	.+302    	; 0x2612 <f_sync+0x16a>
				dir = fp->dir_ptr;
    24e4:	0e 8d       	ldd	r16, Y+30	; 0x1e
    24e6:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    24e8:	f8 01       	movw	r30, r16
    24ea:	83 85       	ldd	r24, Z+11	; 0x0b
    24ec:	80 62       	ori	r24, 0x20	; 32
    24ee:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    24f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    24f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    24f4:	ac 85       	ldd	r26, Y+12	; 0x0c
    24f6:	bd 85       	ldd	r27, Y+13	; 0x0d
    24f8:	84 8f       	std	Z+28, r24	; 0x1c
    24fa:	95 8f       	std	Z+29, r25	; 0x1d
    24fc:	a6 8f       	std	Z+30, r26	; 0x1e
    24fe:	b7 8f       	std	Z+31, r27	; 0x1f
				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
    2500:	8e 85       	ldd	r24, Y+14	; 0x0e
    2502:	9f 85       	ldd	r25, Y+15	; 0x0f
    2504:	93 8f       	std	Z+27, r25	; 0x1b
    2506:	82 8f       	std	Z+26, r24	; 0x1a
				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
    2508:	8e 85       	ldd	r24, Y+14	; 0x0e
    250a:	9f 85       	ldd	r25, Y+15	; 0x0f
    250c:	a8 89       	ldd	r26, Y+16	; 0x10
    250e:	b9 89       	ldd	r27, Y+17	; 0x11
    2510:	cd 01       	movw	r24, r26
    2512:	aa 27       	eor	r26, r26
    2514:	bb 27       	eor	r27, r27
    2516:	95 8b       	std	Z+21, r25	; 0x15
    2518:	84 8b       	std	Z+20, r24	; 0x14
				tim = get_fattime();			/* Updated time */
    251a:	0e 94 86 01 	call	0x30c	; 0x30c <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
    251e:	f8 01       	movw	r30, r16
    2520:	66 8b       	std	Z+22, r22	; 0x16
    2522:	77 8b       	std	Z+23, r23	; 0x17
    2524:	80 8f       	std	Z+24, r24	; 0x18
    2526:	91 8f       	std	Z+25, r25	; 0x19
				fp->flag &= ~FA__WRITTEN;
    2528:	8c 81       	ldd	r24, Y+4	; 0x04
    252a:	8f 7d       	andi	r24, 0xDF	; 223
    252c:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    252e:	e8 81       	ld	r30, Y
    2530:	f9 81       	ldd	r31, Y+1	; 0x01
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    2536:	09 90       	ld	r0, Y+
    2538:	d8 81       	ld	r29, Y
    253a:	c0 2d       	mov	r28, r0
)
{
	FRESULT res;


	res = move_window(fs, 0);
    253c:	ce 01       	movw	r24, r28
    253e:	40 e0       	ldi	r20, 0x00	; 0
    2540:	50 e0       	ldi	r21, 0x00	; 0
    2542:	60 e0       	ldi	r22, 0x00	; 0
    2544:	70 e0       	ldi	r23, 0x00	; 0
    2546:	0e 94 ff 04 	call	0x9fe	; 0x9fe <move_window>
    254a:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    254c:	00 97       	sbiw	r24, 0x00	; 0
    254e:	09 f0       	breq	.+2      	; 0x2552 <f_sync+0xaa>
    2550:	60 c0       	rjmp	.+192    	; 0x2612 <f_sync+0x16a>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    2552:	88 81       	ld	r24, Y
    2554:	83 30       	cpi	r24, 0x03	; 3
    2556:	09 f0       	breq	.+2      	; 0x255a <f_sync+0xb2>
    2558:	51 c0       	rjmp	.+162    	; 0x25fc <f_sync+0x154>
    255a:	8d 81       	ldd	r24, Y+5	; 0x05
    255c:	88 23       	and	r24, r24
    255e:	09 f4       	brne	.+2      	; 0x2562 <f_sync+0xba>
    2560:	4d c0       	rjmp	.+154    	; 0x25fc <f_sync+0x154>
			fs->winsect = 0;
    2562:	1e a6       	std	Y+46, r1	; 0x2e
    2564:	1f a6       	std	Y+47, r1	; 0x2f
    2566:	18 aa       	std	Y+48, r1	; 0x30
    2568:	19 aa       	std	Y+49, r1	; 0x31
			mem_set(fs->win, 0, 512);
    256a:	be 01       	movw	r22, r28
    256c:	6e 5c       	subi	r22, 0xCE	; 206
    256e:	7f 4f       	sbci	r23, 0xFF	; 255
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    2570:	fb 01       	movw	r30, r22
	while (cnt--) *d++ = (char)val;
    2572:	ce 01       	movw	r24, r28
    2574:	8e 5c       	subi	r24, 0xCE	; 206
    2576:	9d 4f       	sbci	r25, 0xFD	; 253
    2578:	01 c0       	rjmp	.+2      	; 0x257c <f_sync+0xd4>
    257a:	11 92       	st	Z+, r1
    257c:	e8 17       	cp	r30, r24
    257e:	f9 07       	cpc	r31, r25
    2580:	e1 f7       	brne	.-8      	; 0x257a <f_sync+0xd2>
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    2582:	c0 5d       	subi	r28, 0xD0	; 208
    2584:	dd 4f       	sbci	r29, 0xFD	; 253
    2586:	85 e5       	ldi	r24, 0x55	; 85
    2588:	9a ea       	ldi	r25, 0xAA	; 170
    258a:	99 83       	std	Y+1, r25	; 0x01
    258c:	88 83       	st	Y, r24
    258e:	c0 53       	subi	r28, 0x30	; 48
    2590:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    2592:	82 e5       	ldi	r24, 0x52	; 82
    2594:	92 e5       	ldi	r25, 0x52	; 82
    2596:	a1 e6       	ldi	r26, 0x61	; 97
    2598:	b1 e4       	ldi	r27, 0x41	; 65
    259a:	8a ab       	std	Y+50, r24	; 0x32
    259c:	9b ab       	std	Y+51, r25	; 0x33
    259e:	ac ab       	std	Y+52, r26	; 0x34
    25a0:	bd ab       	std	Y+53, r27	; 0x35
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    25a2:	ca 5e       	subi	r28, 0xEA	; 234
    25a4:	dd 4f       	sbci	r29, 0xFD	; 253
    25a6:	82 e7       	ldi	r24, 0x72	; 114
    25a8:	92 e7       	ldi	r25, 0x72	; 114
    25aa:	a1 e4       	ldi	r26, 0x41	; 65
    25ac:	b1 e6       	ldi	r27, 0x61	; 97
    25ae:	88 83       	st	Y, r24
    25b0:	99 83       	std	Y+1, r25	; 0x01
    25b2:	aa 83       	std	Y+2, r26	; 0x02
    25b4:	bb 83       	std	Y+3, r27	; 0x03
    25b6:	c6 51       	subi	r28, 0x16	; 22
    25b8:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    25ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    25bc:	9f 85       	ldd	r25, Y+15	; 0x0f
    25be:	a8 89       	ldd	r26, Y+16	; 0x10
    25c0:	b9 89       	ldd	r27, Y+17	; 0x11
    25c2:	c6 5e       	subi	r28, 0xE6	; 230
    25c4:	dd 4f       	sbci	r29, 0xFD	; 253
    25c6:	88 83       	st	Y, r24
    25c8:	99 83       	std	Y+1, r25	; 0x01
    25ca:	aa 83       	std	Y+2, r26	; 0x02
    25cc:	bb 83       	std	Y+3, r27	; 0x03
    25ce:	ca 51       	subi	r28, 0x1A	; 26
    25d0:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    25d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    25d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    25d6:	ac 85       	ldd	r26, Y+12	; 0x0c
    25d8:	bd 85       	ldd	r27, Y+13	; 0x0d
    25da:	c2 5e       	subi	r28, 0xE2	; 226
    25dc:	dd 4f       	sbci	r29, 0xFD	; 253
    25de:	88 83       	st	Y, r24
    25e0:	99 83       	std	Y+1, r25	; 0x01
    25e2:	aa 83       	std	Y+2, r26	; 0x02
    25e4:	bb 83       	std	Y+3, r27	; 0x03
    25e6:	ce 51       	subi	r28, 0x1E	; 30
    25e8:	d2 40       	sbci	r29, 0x02	; 2
			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
    25ea:	2a 89       	ldd	r18, Y+18	; 0x12
    25ec:	3b 89       	ldd	r19, Y+19	; 0x13
    25ee:	4c 89       	ldd	r20, Y+20	; 0x14
    25f0:	5d 89       	ldd	r21, Y+21	; 0x15
    25f2:	89 81       	ldd	r24, Y+1	; 0x01
    25f4:	01 e0       	ldi	r16, 0x01	; 1
    25f6:	0e 94 b3 19 	call	0x3366	; 0x3366 <disk_write>
			fs->fsi_flag = 0;
    25fa:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drive, CTRL_SYNC, (void*)NULL) != RES_OK)
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	60 e0       	ldi	r22, 0x00	; 0
    2600:	40 e0       	ldi	r20, 0x00	; 0
    2602:	50 e0       	ldi	r21, 0x00	; 0
    2604:	0e 94 2a 1a 	call	0x3454	; 0x3454 <disk_ioctl>
    2608:	00 97       	sbiw	r24, 0x00	; 0
    260a:	11 f0       	breq	.+4      	; 0x2610 <f_sync+0x168>
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	9c 01       	movw	r18, r24
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    2612:	c9 01       	movw	r24, r18
    2614:	df 91       	pop	r29
    2616:	cf 91       	pop	r28
    2618:	1f 91       	pop	r17
    261a:	0f 91       	pop	r16
    261c:	08 95       	ret

0000261e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    261e:	cf 93       	push	r28
    2620:	df 93       	push	r29
    2622:	ec 01       	movw	r28, r24
#if _FS_READONLY
	res = validate(fp->fs, fp->id);
	if (res == FR_OK) fp->fs = NULL;
	LEAVE_FF(fp->fs, res);
#else
	res = f_sync(fp);
    2624:	0e 94 54 12 	call	0x24a8	; 0x24a8 <f_sync>
    2628:	9c 01       	movw	r18, r24
	if (res == FR_OK) fp->fs = NULL;
    262a:	00 97       	sbiw	r24, 0x00	; 0
    262c:	11 f4       	brne	.+4      	; 0x2632 <f_close+0x14>
    262e:	19 82       	std	Y+1, r1	; 0x01
    2630:	18 82       	st	Y, r1
	return res;
#endif
}
    2632:	c9 01       	movw	r24, r18
    2634:	df 91       	pop	r29
    2636:	cf 91       	pop	r28
    2638:	08 95       	ret

0000263a <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occured */
	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    263a:	a0 e0       	ldi	r26, 0x00	; 0
    263c:	b0 e0       	ldi	r27, 0x00	; 0
    263e:	e3 e2       	ldi	r30, 0x23	; 35
    2640:	f3 e1       	ldi	r31, 0x13	; 19
    2642:	0c 94 a6 2e 	jmp	0x5d4c	; 0x5d4c <__prologue_saves__+0x8>
    2646:	dc 01       	movw	r26, r24
    2648:	14 2f       	mov	r17, r20
	BYTE fmt, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fsize, tsect, mclst;
	const XCHAR *p = *path;
    264a:	ed 91       	ld	r30, X+
    264c:	fc 91       	ld	r31, X
    264e:	11 97       	sbiw	r26, 0x01	; 1
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';				/* Is there a drive number? */
    2650:	80 81       	ld	r24, Z
    2652:	28 2f       	mov	r18, r24
    2654:	33 27       	eor	r19, r19
    2656:	27 fd       	sbrc	r18, 7
    2658:	30 95       	com	r19
    265a:	20 53       	subi	r18, 0x30	; 48
    265c:	30 40       	sbci	r19, 0x00	; 0
	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
    265e:	2a 30       	cpi	r18, 0x0A	; 10
    2660:	31 05       	cpc	r19, r1
    2662:	38 f4       	brcc	.+14     	; 0x2672 <chk_mounted+0x38>
    2664:	81 81       	ldd	r24, Z+1	; 0x01
    2666:	8a 33       	cpi	r24, 0x3A	; 58
    2668:	21 f4       	brne	.+8      	; 0x2672 <chk_mounted+0x38>
		p += 2; *path = p;			/* Return pointer to the path name */
    266a:	32 96       	adiw	r30, 0x02	; 2
    266c:	ed 93       	st	X+, r30
    266e:	fc 93       	st	X, r31
    2670:	04 c0       	rjmp	.+8      	; 0x267a <chk_mounted+0x40>
	} else {						/* No drive number is given */
#if _FS_RPATH
		vol = Drive;				/* Use current drive */
    2672:	80 91 2c 03 	lds	r24, 0x032C
    2676:	28 2f       	mov	r18, r24
    2678:	30 e0       	ldi	r19, 0x00	; 0
		vol = 0;					/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
    267a:	23 2b       	or	r18, r19
    267c:	19 f0       	breq	.+6      	; 0x2684 <chk_mounted+0x4a>
    267e:	2b e0       	ldi	r18, 0x0B	; 11
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	81 c1       	rjmp	.+770    	; 0x2986 <chk_mounted+0x34c>
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
    2684:	c0 91 28 03 	lds	r28, 0x0328
    2688:	d0 91 29 03 	lds	r29, 0x0329
    268c:	fb 01       	movw	r30, r22
    268e:	d1 83       	std	Z+1, r29	; 0x01
    2690:	c0 83       	st	Z, r28
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
    2692:	20 97       	sbiw	r28, 0x00	; 0
    2694:	19 f4       	brne	.+6      	; 0x269c <chk_mounted+0x62>
    2696:	2c e0       	ldi	r18, 0x0C	; 12
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	75 c1       	rjmp	.+746    	; 0x2986 <chk_mounted+0x34c>

	ENTER_FF(fs);					/* Lock file system */

	if (fs->fs_type) {				/* If the logical drive has been mounted */
    269c:	88 81       	ld	r24, Y
    269e:	88 23       	and	r24, r24
    26a0:	59 f0       	breq	.+22     	; 0x26b8 <chk_mounted+0x7e>
		stat = disk_status(fs->drive);
    26a2:	89 81       	ldd	r24, Y+1	; 0x01
    26a4:	0e 94 4e 19 	call	0x329c	; 0x329c <disk_status>
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
    26a8:	80 fd       	sbrc	r24, 0
    26aa:	06 c0       	rjmp	.+12     	; 0x26b8 <chk_mounted+0x7e>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    26ac:	11 23       	and	r17, r17
    26ae:	09 f4       	brne	.+2      	; 0x26b2 <chk_mounted+0x78>
    26b0:	65 c1       	rjmp	.+714    	; 0x297c <chk_mounted+0x342>
    26b2:	82 fd       	sbrc	r24, 2
    26b4:	60 c1       	rjmp	.+704    	; 0x2976 <chk_mounted+0x33c>
    26b6:	62 c1       	rjmp	.+708    	; 0x297c <chk_mounted+0x342>
		}
	}

	/* The logical drive must be mounted. Following code attempts to mount the volume */

	fs->fs_type = 0;					/* Clear the file system object */
    26b8:	18 82       	st	Y, r1
	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
    26ba:	19 82       	std	Y+1, r1	; 0x01
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
    26bc:	80 e0       	ldi	r24, 0x00	; 0
    26be:	0e 94 8b 18 	call	0x3116	; 0x3116 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
    26c2:	80 ff       	sbrs	r24, 0
    26c4:	03 c0       	rjmp	.+6      	; 0x26cc <chk_mounted+0x92>
    26c6:	23 e0       	ldi	r18, 0x03	; 3
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	5d c1       	rjmp	.+698    	; 0x2986 <chk_mounted+0x34c>
#if _MAX_SS != 512						/* Get disk sector size if needed */
	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    26cc:	11 23       	and	r17, r17
    26ce:	11 f0       	breq	.+4      	; 0x26d4 <chk_mounted+0x9a>
    26d0:	82 fd       	sbrc	r24, 2
    26d2:	51 c1       	rjmp	.+674    	; 0x2976 <chk_mounted+0x33c>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
    26d4:	ce 01       	movw	r24, r28
    26d6:	40 e0       	ldi	r20, 0x00	; 0
    26d8:	50 e0       	ldi	r21, 0x00	; 0
    26da:	60 e0       	ldi	r22, 0x00	; 0
    26dc:	70 e0       	ldi	r23, 0x00	; 0
    26de:	0e 94 15 12 	call	0x242a	; 0x242a <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
    26e2:	81 30       	cpi	r24, 0x01	; 1
    26e4:	21 f0       	breq	.+8      	; 0x26ee <chk_mounted+0xb4>
    26e6:	66 24       	eor	r6, r6
    26e8:	77 24       	eor	r7, r7
    26ea:	43 01       	movw	r8, r6
    26ec:	10 c0       	rjmp	.+32     	; 0x270e <chk_mounted+0xd4>
		/* Check a partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
    26ee:	fe 01       	movw	r30, r28
    26f0:	e0 51       	subi	r30, 0x10	; 16
    26f2:	fe 4f       	sbci	r31, 0xFE	; 254
		if (tbl[4]) {									/* Is the partition existing? */
    26f4:	84 81       	ldd	r24, Z+4	; 0x04
    26f6:	88 23       	and	r24, r24
    26f8:	09 f4       	brne	.+2      	; 0x26fc <chk_mounted+0xc2>
    26fa:	43 c1       	rjmp	.+646    	; 0x2982 <chk_mounted+0x348>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
    26fc:	60 84       	ldd	r6, Z+8	; 0x08
    26fe:	71 84       	ldd	r7, Z+9	; 0x09
    2700:	82 84       	ldd	r8, Z+10	; 0x0a
    2702:	93 84       	ldd	r9, Z+11	; 0x0b
			fmt = check_fs(fs, bsect);					/* Check the partition */
    2704:	ce 01       	movw	r24, r28
    2706:	b4 01       	movw	r22, r8
    2708:	a3 01       	movw	r20, r6
    270a:	0e 94 15 12 	call	0x242a	; 0x242a <check_fs>
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    270e:	83 30       	cpi	r24, 0x03	; 3
    2710:	19 f4       	brne	.+6      	; 0x2718 <chk_mounted+0xde>
    2712:	21 e0       	ldi	r18, 0x01	; 1
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	37 c1       	rjmp	.+622    	; 0x2986 <chk_mounted+0x34c>
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
    2718:	88 23       	and	r24, r24
    271a:	09 f0       	breq	.+2      	; 0x271e <chk_mounted+0xe4>
    271c:	32 c1       	rjmp	.+612    	; 0x2982 <chk_mounted+0x348>
    271e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2720:	9e ad       	ldd	r25, Y+62	; 0x3e
    2722:	80 50       	subi	r24, 0x00	; 0
    2724:	92 40       	sbci	r25, 0x02	; 2
    2726:	09 f0       	breq	.+2      	; 0x272a <chk_mounted+0xf0>
    2728:	2c c1       	rjmp	.+600    	; 0x2982 <chk_mounted+0x348>
		return FR_NO_FILESYSTEM;

	/* Initialize the file system object */
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    272a:	c8 5b       	subi	r28, 0xB8	; 184
    272c:	df 4f       	sbci	r29, 0xFF	; 255
    272e:	88 81       	ld	r24, Y
    2730:	99 81       	ldd	r25, Y+1	; 0x01
    2732:	c8 54       	subi	r28, 0x48	; 72
    2734:	d0 40       	sbci	r29, 0x00	; 0
    2736:	bc 01       	movw	r22, r24
    2738:	80 e0       	ldi	r24, 0x00	; 0
    273a:	90 e0       	ldi	r25, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
    273c:	61 15       	cp	r22, r1
    273e:	71 05       	cpc	r23, r1
    2740:	81 05       	cpc	r24, r1
    2742:	91 05       	cpc	r25, r1
    2744:	41 f4       	brne	.+16     	; 0x2756 <chk_mounted+0x11c>
    2746:	ca 5a       	subi	r28, 0xAA	; 170
    2748:	df 4f       	sbci	r29, 0xFF	; 255
    274a:	68 81       	ld	r22, Y
    274c:	79 81       	ldd	r23, Y+1	; 0x01
    274e:	8a 81       	ldd	r24, Y+2	; 0x02
    2750:	9b 81       	ldd	r25, Y+3	; 0x03
    2752:	c6 55       	subi	r28, 0x56	; 86
    2754:	d0 40       	sbci	r29, 0x00	; 0
	fs->sects_fat = fsize;
    2756:	6a 8f       	std	Y+26, r22	; 0x1a
    2758:	7b 8f       	std	Y+27, r23	; 0x1b
    275a:	8c 8f       	std	Y+28, r24	; 0x1c
    275c:	9d 8f       	std	Y+29, r25	; 0x1d
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
    275e:	ce 5b       	subi	r28, 0xBE	; 190
    2760:	df 4f       	sbci	r29, 0xFF	; 255
    2762:	28 81       	ld	r18, Y
    2764:	c2 54       	subi	r28, 0x42	; 66
    2766:	d0 40       	sbci	r29, 0x00	; 0
    2768:	2b 83       	std	Y+3, r18	; 0x03
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	40 e0       	ldi	r20, 0x00	; 0
    276e:	50 e0       	ldi	r21, 0x00	; 0
    2770:	0e 94 2e 2e 	call	0x5c5c	; 0x5c5c <__mulsi3>
    2774:	5b 01       	movw	r10, r22
    2776:	6c 01       	movw	r12, r24
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
    2778:	fe 01       	movw	r30, r28
    277a:	e0 5c       	subi	r30, 0xC0	; 192
    277c:	ff 4f       	sbci	r31, 0xFF	; 255
    277e:	80 81       	ld	r24, Z
    2780:	91 81       	ldd	r25, Z+1	; 0x01
    2782:	a0 e0       	ldi	r26, 0x00	; 0
    2784:	b0 e0       	ldi	r27, 0x00	; 0
    2786:	86 0d       	add	r24, r6
    2788:	97 1d       	adc	r25, r7
    278a:	a8 1d       	adc	r26, r8
    278c:	b9 1d       	adc	r27, r9
    278e:	8a a3       	std	Y+34, r24	; 0x22
    2790:	9b a3       	std	Y+35, r25	; 0x23
    2792:	ac a3       	std	Y+36, r26	; 0x24
    2794:	bd a3       	std	Y+37, r27	; 0x25
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
    2796:	8f ad       	ldd	r24, Y+63	; 0x3f
    2798:	8a 83       	std	Y+2, r24	; 0x02
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
    279a:	cd 5b       	subi	r28, 0xBD	; 189
    279c:	df 4f       	sbci	r29, 0xFF	; 255
    279e:	28 81       	ld	r18, Y
    27a0:	39 81       	ldd	r19, Y+1	; 0x01
    27a2:	c3 54       	subi	r28, 0x43	; 67
    27a4:	d0 40       	sbci	r29, 0x00	; 0
    27a6:	39 87       	std	Y+9, r19	; 0x09
    27a8:	28 87       	std	Y+8, r18	; 0x08
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    27aa:	cb 5b       	subi	r28, 0xBB	; 187
    27ac:	df 4f       	sbci	r29, 0xFF	; 255
    27ae:	88 81       	ld	r24, Y
    27b0:	99 81       	ldd	r25, Y+1	; 0x01
    27b2:	c5 54       	subi	r28, 0x45	; 69
    27b4:	d0 40       	sbci	r29, 0x00	; 0
    27b6:	7c 01       	movw	r14, r24
    27b8:	00 e0       	ldi	r16, 0x00	; 0
    27ba:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    27bc:	e1 14       	cp	r14, r1
    27be:	f1 04       	cpc	r15, r1
    27c0:	01 05       	cpc	r16, r1
    27c2:	11 05       	cpc	r17, r1
    27c4:	41 f4       	brne	.+16     	; 0x27d6 <chk_mounted+0x19c>
    27c6:	ce 5a       	subi	r28, 0xAE	; 174
    27c8:	df 4f       	sbci	r29, 0xFF	; 255
    27ca:	e8 80       	ld	r14, Y
    27cc:	f9 80       	ldd	r15, Y+1	; 0x01
    27ce:	0a 81       	ldd	r16, Y+2	; 0x02
    27d0:	1b 81       	ldd	r17, Y+3	; 0x03
    27d2:	c2 55       	subi	r28, 0x52	; 82
    27d4:	d0 40       	sbci	r29, 0x00	; 0
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
    27d6:	80 81       	ld	r24, Z
    27d8:	91 81       	ldd	r25, Z+1	; 0x01
    27da:	a0 e0       	ldi	r26, 0x00	; 0
    27dc:	b0 e0       	ldi	r27, 0x00	; 0
    27de:	e8 1a       	sub	r14, r24
    27e0:	f9 0a       	sbc	r15, r25
    27e2:	0a 0b       	sbc	r16, r26
    27e4:	1b 0b       	sbc	r17, r27
    27e6:	ea 18       	sub	r14, r10
    27e8:	fb 08       	sbc	r15, r11
    27ea:	0c 09       	sbc	r16, r12
    27ec:	1d 09       	sbc	r17, r13
    27ee:	44 e0       	ldi	r20, 0x04	; 4
    27f0:	36 95       	lsr	r19
    27f2:	27 95       	ror	r18
    27f4:	4a 95       	dec	r20
    27f6:	e1 f7       	brne	.-8      	; 0x27f0 <chk_mounted+0x1b6>
    27f8:	c9 01       	movw	r24, r18
    27fa:	a0 e0       	ldi	r26, 0x00	; 0
    27fc:	b0 e0       	ldi	r27, 0x00	; 0
    27fe:	e8 1a       	sub	r14, r24
    2800:	f9 0a       	sbc	r15, r25
    2802:	0a 0b       	sbc	r16, r26
    2804:	1b 0b       	sbc	r17, r27
    2806:	2a 81       	ldd	r18, Y+2	; 0x02
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	40 e0       	ldi	r20, 0x00	; 0
    280c:	50 e0       	ldi	r21, 0x00	; 0
    280e:	c8 01       	movw	r24, r16
    2810:	b7 01       	movw	r22, r14
    2812:	0e 94 80 2e 	call	0x5d00	; 0x5d00 <__udivmodsi4>
    2816:	2e 5f       	subi	r18, 0xFE	; 254
    2818:	3f 4f       	sbci	r19, 0xFF	; 255
    281a:	4f 4f       	sbci	r20, 0xFF	; 255
    281c:	5f 4f       	sbci	r21, 0xFF	; 255
    281e:	2e 8f       	std	Y+30, r18	; 0x1e
    2820:	3f 8f       	std	Y+31, r19	; 0x1f
    2822:	48 a3       	std	Y+32, r20	; 0x20
    2824:	59 a3       	std	Y+33, r21	; 0x21
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
    2826:	27 3f       	cpi	r18, 0xF7	; 247
    2828:	8f e0       	ldi	r24, 0x0F	; 15
    282a:	38 07       	cpc	r19, r24
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	48 07       	cpc	r20, r24
    2830:	80 e0       	ldi	r24, 0x00	; 0
    2832:	58 07       	cpc	r21, r24
    2834:	10 f4       	brcc	.+4      	; 0x283a <chk_mounted+0x200>
    2836:	11 e0       	ldi	r17, 0x01	; 1
    2838:	07 c0       	rjmp	.+14     	; 0x2848 <chk_mounted+0x20e>
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
    283a:	27 5f       	subi	r18, 0xF7	; 247
    283c:	3f 4f       	sbci	r19, 0xFF	; 255
    283e:	40 40       	sbci	r20, 0x00	; 0
    2840:	50 40       	sbci	r21, 0x00	; 0
    2842:	08 f0       	brcs	.+2      	; 0x2846 <chk_mounted+0x20c>
    2844:	a6 c0       	rjmp	.+332    	; 0x2992 <chk_mounted+0x358>
    2846:	12 e0       	ldi	r17, 0x02	; 2

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    2848:	8a a1       	ldd	r24, Y+34	; 0x22
    284a:	9b a1       	ldd	r25, Y+35	; 0x23
    284c:	ac a1       	ldd	r26, Y+36	; 0x24
    284e:	bd a1       	ldd	r27, Y+37	; 0x25
    2850:	8a 0d       	add	r24, r10
    2852:	9b 1d       	adc	r25, r11
    2854:	ac 1d       	adc	r26, r12
    2856:	bd 1d       	adc	r27, r13
    2858:	8e a3       	std	Y+38, r24	; 0x26
    285a:	9f a3       	std	Y+39, r25	; 0x27
    285c:	a8 a7       	std	Y+40, r26	; 0x28
    285e:	b9 a7       	std	Y+41, r27	; 0x29
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
    2860:	88 85       	ldd	r24, Y+8	; 0x08
    2862:	99 85       	ldd	r25, Y+9	; 0x09
    2864:	34 e0       	ldi	r19, 0x04	; 4
    2866:	96 95       	lsr	r25
    2868:	87 95       	ror	r24
    286a:	3a 95       	dec	r19
    286c:	e1 f7       	brne	.-8      	; 0x2866 <chk_mounted+0x22c>
    286e:	a0 e0       	ldi	r26, 0x00	; 0
    2870:	b0 e0       	ldi	r27, 0x00	; 0
    2872:	2a a1       	ldd	r18, Y+34	; 0x22
    2874:	3b a1       	ldd	r19, Y+35	; 0x23
    2876:	4c a1       	ldd	r20, Y+36	; 0x24
    2878:	5d a1       	ldd	r21, Y+37	; 0x25
    287a:	82 0f       	add	r24, r18
    287c:	93 1f       	adc	r25, r19
    287e:	a4 1f       	adc	r26, r20
    2880:	b5 1f       	adc	r27, r21
    2882:	8a 0d       	add	r24, r10
    2884:	9b 1d       	adc	r25, r11
    2886:	ac 1d       	adc	r26, r12
    2888:	bd 1d       	adc	r27, r13
    288a:	8a a7       	std	Y+42, r24	; 0x2a
    288c:	9b a7       	std	Y+43, r25	; 0x2b
    288e:	ac a7       	std	Y+44, r26	; 0x2c
    2890:	bd a7       	std	Y+45, r27	; 0x2d

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
    2892:	8f ef       	ldi	r24, 0xFF	; 255
    2894:	9f ef       	ldi	r25, 0xFF	; 255
    2896:	af ef       	ldi	r26, 0xFF	; 255
    2898:	bf ef       	ldi	r27, 0xFF	; 255
    289a:	8e 87       	std	Y+14, r24	; 0x0e
    289c:	9f 87       	std	Y+15, r25	; 0x0f
    289e:	a8 8b       	std	Y+16, r26	; 0x10
    28a0:	b9 8b       	std	Y+17, r27	; 0x11
	fs->wflag = 0;
    28a2:	1c 82       	std	Y+4, r1	; 0x04
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
    28a4:	13 30       	cpi	r17, 0x03	; 3
    28a6:	09 f0       	breq	.+2      	; 0x28aa <chk_mounted+0x270>
    28a8:	51 c0       	rjmp	.+162    	; 0x294c <chk_mounted+0x312>
	 	fs->fsi_flag = 0;
    28aa:	1d 82       	std	Y+5, r1	; 0x05
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    28ac:	ce 59       	subi	r28, 0x9E	; 158
    28ae:	df 4f       	sbci	r29, 0xFF	; 255
    28b0:	28 81       	ld	r18, Y
    28b2:	39 81       	ldd	r19, Y+1	; 0x01
    28b4:	c2 56       	subi	r28, 0x62	; 98
    28b6:	d0 40       	sbci	r29, 0x00	; 0
    28b8:	40 e0       	ldi	r20, 0x00	; 0
    28ba:	50 e0       	ldi	r21, 0x00	; 0
    28bc:	26 0d       	add	r18, r6
    28be:	37 1d       	adc	r19, r7
    28c0:	48 1d       	adc	r20, r8
    28c2:	59 1d       	adc	r21, r9
    28c4:	2a 8b       	std	Y+18, r18	; 0x12
    28c6:	3b 8b       	std	Y+19, r19	; 0x13
    28c8:	4c 8b       	std	Y+20, r20	; 0x14
    28ca:	5d 8b       	std	Y+21, r21	; 0x15
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
    28cc:	be 01       	movw	r22, r28
    28ce:	6e 5c       	subi	r22, 0xCE	; 206
    28d0:	7f 4f       	sbci	r23, 0xFF	; 255
    28d2:	89 81       	ldd	r24, Y+1	; 0x01
    28d4:	01 e0       	ldi	r16, 0x01	; 1
    28d6:	0e 94 55 19 	call	0x32aa	; 0x32aa <disk_read>
    28da:	89 2b       	or	r24, r25
    28dc:	b9 f5       	brne	.+110    	; 0x294c <chk_mounted+0x312>
    28de:	c0 5d       	subi	r28, 0xD0	; 208
    28e0:	dd 4f       	sbci	r29, 0xFD	; 253
    28e2:	88 81       	ld	r24, Y
    28e4:	99 81       	ldd	r25, Y+1	; 0x01
    28e6:	c0 53       	subi	r28, 0x30	; 48
    28e8:	d2 40       	sbci	r29, 0x02	; 2
    28ea:	85 55       	subi	r24, 0x55	; 85
    28ec:	9a 4a       	sbci	r25, 0xAA	; 170
    28ee:	71 f5       	brne	.+92     	; 0x294c <chk_mounted+0x312>
    28f0:	8a a9       	ldd	r24, Y+50	; 0x32
    28f2:	9b a9       	ldd	r25, Y+51	; 0x33
    28f4:	ac a9       	ldd	r26, Y+52	; 0x34
    28f6:	bd a9       	ldd	r27, Y+53	; 0x35
    28f8:	82 55       	subi	r24, 0x52	; 82
    28fa:	92 45       	sbci	r25, 0x52	; 82
    28fc:	a1 46       	sbci	r26, 0x61	; 97
    28fe:	b1 44       	sbci	r27, 0x41	; 65
    2900:	29 f5       	brne	.+74     	; 0x294c <chk_mounted+0x312>
    2902:	ca 5e       	subi	r28, 0xEA	; 234
    2904:	dd 4f       	sbci	r29, 0xFD	; 253
    2906:	88 81       	ld	r24, Y
    2908:	99 81       	ldd	r25, Y+1	; 0x01
    290a:	aa 81       	ldd	r26, Y+2	; 0x02
    290c:	bb 81       	ldd	r27, Y+3	; 0x03
    290e:	c6 51       	subi	r28, 0x16	; 22
    2910:	d2 40       	sbci	r29, 0x02	; 2
    2912:	82 57       	subi	r24, 0x72	; 114
    2914:	92 47       	sbci	r25, 0x72	; 114
    2916:	a1 44       	sbci	r26, 0x41	; 65
    2918:	b1 46       	sbci	r27, 0x61	; 97
    291a:	c1 f4       	brne	.+48     	; 0x294c <chk_mounted+0x312>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    291c:	c2 5e       	subi	r28, 0xE2	; 226
    291e:	dd 4f       	sbci	r29, 0xFD	; 253
    2920:	88 81       	ld	r24, Y
    2922:	99 81       	ldd	r25, Y+1	; 0x01
    2924:	aa 81       	ldd	r26, Y+2	; 0x02
    2926:	bb 81       	ldd	r27, Y+3	; 0x03
    2928:	ce 51       	subi	r28, 0x1E	; 30
    292a:	d2 40       	sbci	r29, 0x02	; 2
    292c:	8a 87       	std	Y+10, r24	; 0x0a
    292e:	9b 87       	std	Y+11, r25	; 0x0b
    2930:	ac 87       	std	Y+12, r26	; 0x0c
    2932:	bd 87       	std	Y+13, r27	; 0x0d
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    2934:	c6 5e       	subi	r28, 0xE6	; 230
    2936:	dd 4f       	sbci	r29, 0xFD	; 253
    2938:	88 81       	ld	r24, Y
    293a:	99 81       	ldd	r25, Y+1	; 0x01
    293c:	aa 81       	ldd	r26, Y+2	; 0x02
    293e:	bb 81       	ldd	r27, Y+3	; 0x03
    2940:	ca 51       	subi	r28, 0x1A	; 26
    2942:	d2 40       	sbci	r29, 0x02	; 2
    2944:	8e 87       	std	Y+14, r24	; 0x0e
    2946:	9f 87       	std	Y+15, r25	; 0x0f
    2948:	a8 8b       	std	Y+16, r26	; 0x10
    294a:	b9 8b       	std	Y+17, r27	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    294c:	18 83       	st	Y, r17
	fs->winsect = 0;		/* Invalidate sector cache */
    294e:	1e a6       	std	Y+46, r1	; 0x2e
    2950:	1f a6       	std	Y+47, r1	; 0x2f
    2952:	18 aa       	std	Y+48, r1	; 0x30
    2954:	19 aa       	std	Y+49, r1	; 0x31
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
    2956:	1e 8a       	std	Y+22, r1	; 0x16
    2958:	1f 8a       	std	Y+23, r1	; 0x17
    295a:	18 8e       	std	Y+24, r1	; 0x18
    295c:	19 8e       	std	Y+25, r1	; 0x19
#endif
	fs->id = ++Fsid;		/* File system mount ID */
    295e:	80 91 2a 03 	lds	r24, 0x032A
    2962:	90 91 2b 03 	lds	r25, 0x032B
    2966:	01 96       	adiw	r24, 0x01	; 1
    2968:	90 93 2b 03 	sts	0x032B, r25
    296c:	80 93 2a 03 	sts	0x032A, r24
    2970:	9f 83       	std	Y+7, r25	; 0x07
    2972:	8e 83       	std	Y+6, r24	; 0x06
    2974:	03 c0       	rjmp	.+6      	; 0x297c <chk_mounted+0x342>

	return FR_OK;
    2976:	2a e0       	ldi	r18, 0x0A	; 10
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	05 c0       	rjmp	.+10     	; 0x2986 <chk_mounted+0x34c>
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	02 c0       	rjmp	.+4      	; 0x2986 <chk_mounted+0x34c>
    2982:	2d e0       	ldi	r18, 0x0D	; 13
    2984:	30 e0       	ldi	r19, 0x00	; 0
}
    2986:	c9 01       	movw	r24, r18
    2988:	cd b7       	in	r28, 0x3d	; 61
    298a:	de b7       	in	r29, 0x3e	; 62
    298c:	ee e0       	ldi	r30, 0x0E	; 14
    298e:	0c 94 c2 2e 	jmp	0x5d84	; 0x5d84 <__epilogue_restores__+0x8>
	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    2992:	c2 5a       	subi	r28, 0xA2	; 162
    2994:	df 4f       	sbci	r29, 0xFF	; 255
    2996:	88 81       	ld	r24, Y
    2998:	99 81       	ldd	r25, Y+1	; 0x01
    299a:	aa 81       	ldd	r26, Y+2	; 0x02
    299c:	bb 81       	ldd	r27, Y+3	; 0x03
    299e:	ce 55       	subi	r28, 0x5E	; 94
    29a0:	d0 40       	sbci	r29, 0x00	; 0
    29a2:	8e a3       	std	Y+38, r24	; 0x26
    29a4:	9f a3       	std	Y+39, r25	; 0x27
    29a6:	a8 a7       	std	Y+40, r26	; 0x28
    29a8:	b9 a7       	std	Y+41, r27	; 0x29
    29aa:	13 e0       	ldi	r17, 0x03	; 3
    29ac:	59 cf       	rjmp	.-334    	; 0x2860 <chk_mounted+0x226>

000029ae <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const XCHAR *path	/* Pointer to the directory path */
)
{
    29ae:	ae e0       	ldi	r26, 0x0E	; 14
    29b0:	b0 e0       	ldi	r27, 0x00	; 0
    29b2:	ed ed       	ldi	r30, 0xDD	; 221
    29b4:	f4 e1       	ldi	r31, 0x14	; 20
    29b6:	0c 94 b0 2e 	jmp	0x5d60	; 0x5d60 <__prologue_saves__+0x1c>
    29ba:	8c 01       	movw	r16, r24
    29bc:	7e 87       	std	Y+14, r23	; 0x0e
    29be:	6d 87       	std	Y+13, r22	; 0x0d
	FRESULT res;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj->fs, 0);
    29c0:	ce 01       	movw	r24, r28
    29c2:	0d 96       	adiw	r24, 0x0d	; 13
    29c4:	b8 01       	movw	r22, r16
    29c6:	40 e0       	ldi	r20, 0x00	; 0
    29c8:	0e 94 1d 13 	call	0x263a	; 0x263a <chk_mounted>
    29cc:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    29ce:	00 97       	sbiw	r24, 0x00	; 0
    29d0:	09 f0       	breq	.+2      	; 0x29d4 <f_opendir+0x26>
    29d2:	42 c0       	rjmp	.+132    	; 0x2a58 <f_opendir+0xaa>
		INITBUF((*dj), sfn, lfn);
    29d4:	ce 01       	movw	r24, r28
    29d6:	01 96       	adiw	r24, 0x01	; 1
    29d8:	d8 01       	movw	r26, r16
    29da:	55 96       	adiw	r26, 0x15	; 21
    29dc:	9c 93       	st	X, r25
    29de:	8e 93       	st	-X, r24
    29e0:	54 97       	sbiw	r26, 0x14	; 20
		res = follow_path(dj, path);			/* Follow the path to the directory */
    29e2:	6d 85       	ldd	r22, Y+13	; 0x0d
    29e4:	7e 85       	ldd	r23, Y+14	; 0x0e
    29e6:	c8 01       	movw	r24, r16
    29e8:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <follow_path>
    29ec:	9c 01       	movw	r18, r24
		if (res == FR_OK) {						/* Follow completed */
    29ee:	00 97       	sbiw	r24, 0x00	; 0
    29f0:	71 f5       	brne	.+92     	; 0x2a4e <f_opendir+0xa0>
			dir = dj->dir;
    29f2:	d8 01       	movw	r26, r16
    29f4:	52 96       	adiw	r26, 0x12	; 18
    29f6:	ed 91       	ld	r30, X+
    29f8:	fc 91       	ld	r31, X
    29fa:	53 97       	sbiw	r26, 0x13	; 19
			if (dir) {							/* It is not the root dir */
    29fc:	30 97       	sbiw	r30, 0x00	; 0
    29fe:	b9 f0       	breq	.+46     	; 0x2a2e <f_opendir+0x80>
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    2a00:	83 85       	ldd	r24, Z+11	; 0x0b
    2a02:	84 ff       	sbrs	r24, 4
    2a04:	27 c0       	rjmp	.+78     	; 0x2a54 <f_opendir+0xa6>
					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    2a06:	84 89       	ldd	r24, Z+20	; 0x14
    2a08:	95 89       	ldd	r25, Z+21	; 0x15
    2a0a:	a0 e0       	ldi	r26, 0x00	; 0
    2a0c:	b0 e0       	ldi	r27, 0x00	; 0
    2a0e:	dc 01       	movw	r26, r24
    2a10:	99 27       	eor	r25, r25
    2a12:	88 27       	eor	r24, r24
    2a14:	22 8d       	ldd	r18, Z+26	; 0x1a
    2a16:	33 8d       	ldd	r19, Z+27	; 0x1b
    2a18:	40 e0       	ldi	r20, 0x00	; 0
    2a1a:	50 e0       	ldi	r21, 0x00	; 0
    2a1c:	82 2b       	or	r24, r18
    2a1e:	93 2b       	or	r25, r19
    2a20:	a4 2b       	or	r26, r20
    2a22:	b5 2b       	or	r27, r21
    2a24:	f8 01       	movw	r30, r16
    2a26:	86 83       	std	Z+6, r24	; 0x06
    2a28:	97 83       	std	Z+7, r25	; 0x07
    2a2a:	a0 87       	std	Z+8, r26	; 0x08
    2a2c:	b1 87       	std	Z+9, r27	; 0x09
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
    2a2e:	d8 01       	movw	r26, r16
    2a30:	ed 91       	ld	r30, X+
    2a32:	fc 91       	ld	r31, X
    2a34:	11 97       	sbiw	r26, 0x01	; 1
    2a36:	86 81       	ldd	r24, Z+6	; 0x06
    2a38:	97 81       	ldd	r25, Z+7	; 0x07
    2a3a:	13 96       	adiw	r26, 0x03	; 3
    2a3c:	9c 93       	st	X, r25
    2a3e:	8e 93       	st	-X, r24
    2a40:	12 97       	sbiw	r26, 0x02	; 2
				res = dir_seek(dj, 0);			/* Rewind dir */
    2a42:	c8 01       	movw	r24, r16
    2a44:	60 e0       	ldi	r22, 0x00	; 0
    2a46:	70 e0       	ldi	r23, 0x00	; 0
    2a48:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <dir_seek>
    2a4c:	9c 01       	movw	r18, r24
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    2a4e:	24 30       	cpi	r18, 0x04	; 4
    2a50:	31 05       	cpc	r19, r1
    2a52:	11 f4       	brne	.+4      	; 0x2a58 <f_opendir+0xaa>
    2a54:	25 e0       	ldi	r18, 0x05	; 5
    2a56:	30 e0       	ldi	r19, 0x00	; 0
	}

	LEAVE_FF(dj->fs, res);
}
    2a58:	c9 01       	movw	r24, r18
    2a5a:	2e 96       	adiw	r28, 0x0e	; 14
    2a5c:	e4 e0       	ldi	r30, 0x04	; 4
    2a5e:	0c 94 cc 2e 	jmp	0x5d98	; 0x5d98 <__epilogue_restores__+0x1c>

00002a62 <f_chdir>:


FRESULT f_chdir (
	const XCHAR *path	/* Pointer to the directory path */
)
{
    2a62:	a4 e2       	ldi	r26, 0x24	; 36
    2a64:	b0 e0       	ldi	r27, 0x00	; 0
    2a66:	e7 e3       	ldi	r30, 0x37	; 55
    2a68:	f5 e1       	ldi	r31, 0x15	; 21
    2a6a:	0c 94 b0 2e 	jmp	0x5d60	; 0x5d60 <__prologue_saves__+0x1c>
    2a6e:	9c a3       	std	Y+36, r25	; 0x24
    2a70:	8b a3       	std	Y+35, r24	; 0x23
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = chk_mounted(&path, &dj.fs, 0);
    2a72:	8e 01       	movw	r16, r28
    2a74:	03 5f       	subi	r16, 0xF3	; 243
    2a76:	1f 4f       	sbci	r17, 0xFF	; 255
    2a78:	ce 01       	movw	r24, r28
    2a7a:	83 96       	adiw	r24, 0x23	; 35
    2a7c:	b8 01       	movw	r22, r16
    2a7e:	40 e0       	ldi	r20, 0x00	; 0
    2a80:	0e 94 1d 13 	call	0x263a	; 0x263a <chk_mounted>
    2a84:	bc 01       	movw	r22, r24
	if (res == FR_OK) {
    2a86:	00 97       	sbiw	r24, 0x00	; 0
    2a88:	e9 f5       	brne	.+122    	; 0x2b04 <f_chdir+0xa2>
		INITBUF(dj, sfn, lfn);
    2a8a:	ce 01       	movw	r24, r28
    2a8c:	01 96       	adiw	r24, 0x01	; 1
    2a8e:	9a a3       	std	Y+34, r25	; 0x22
    2a90:	89 a3       	std	Y+33, r24	; 0x21
		res = follow_path(&dj, path);		/* Follow the file path */
    2a92:	6b a1       	ldd	r22, Y+35	; 0x23
    2a94:	7c a1       	ldd	r23, Y+36	; 0x24
    2a96:	c8 01       	movw	r24, r16
    2a98:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <follow_path>
    2a9c:	bc 01       	movw	r22, r24
		if (res == FR_OK) {					/* Follow completed */
    2a9e:	00 97       	sbiw	r24, 0x00	; 0
    2aa0:	61 f5       	brne	.+88     	; 0x2afa <f_chdir+0x98>
			dir = dj.dir;					/* Pointer to the entry */
    2aa2:	2f 8d       	ldd	r18, Y+31	; 0x1f
    2aa4:	38 a1       	ldd	r19, Y+32	; 0x20
			if (!dir) {
    2aa6:	21 15       	cp	r18, r1
    2aa8:	31 05       	cpc	r19, r1
    2aaa:	39 f4       	brne	.+14     	; 0x2aba <f_chdir+0x58>
				dj.fs->cdir = 0;			/* No entry (root dir) */
    2aac:	ed 85       	ldd	r30, Y+13	; 0x0d
    2aae:	fe 85       	ldd	r31, Y+14	; 0x0e
    2ab0:	16 8a       	std	Z+22, r1	; 0x16
    2ab2:	17 8a       	std	Z+23, r1	; 0x17
    2ab4:	10 8e       	std	Z+24, r1	; 0x18
    2ab6:	11 8e       	std	Z+25, r1	; 0x19
    2ab8:	25 c0       	rjmp	.+74     	; 0x2b04 <f_chdir+0xa2>
			} else {
				if (dir[DIR_Attr] & AM_DIR)	/* Reached to the dir */
    2aba:	d9 01       	movw	r26, r18
    2abc:	1b 96       	adiw	r26, 0x0b	; 11
    2abe:	8c 91       	ld	r24, X
    2ac0:	1b 97       	sbiw	r26, 0x0b	; 11
    2ac2:	84 ff       	sbrs	r24, 4
    2ac4:	1d c0       	rjmp	.+58     	; 0x2b00 <f_chdir+0x9e>
					dj.fs->cdir = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    2ac6:	0d 85       	ldd	r16, Y+13	; 0x0d
    2ac8:	1e 85       	ldd	r17, Y+14	; 0x0e
    2aca:	54 96       	adiw	r26, 0x14	; 20
    2acc:	8d 91       	ld	r24, X+
    2ace:	9c 91       	ld	r25, X
    2ad0:	55 97       	sbiw	r26, 0x15	; 21
    2ad2:	a0 e0       	ldi	r26, 0x00	; 0
    2ad4:	b0 e0       	ldi	r27, 0x00	; 0
    2ad6:	dc 01       	movw	r26, r24
    2ad8:	99 27       	eor	r25, r25
    2ada:	88 27       	eor	r24, r24
    2adc:	f9 01       	movw	r30, r18
    2ade:	22 8d       	ldd	r18, Z+26	; 0x1a
    2ae0:	33 8d       	ldd	r19, Z+27	; 0x1b
    2ae2:	40 e0       	ldi	r20, 0x00	; 0
    2ae4:	50 e0       	ldi	r21, 0x00	; 0
    2ae6:	82 2b       	or	r24, r18
    2ae8:	93 2b       	or	r25, r19
    2aea:	a4 2b       	or	r26, r20
    2aec:	b5 2b       	or	r27, r21
    2aee:	f8 01       	movw	r30, r16
    2af0:	86 8b       	std	Z+22, r24	; 0x16
    2af2:	97 8b       	std	Z+23, r25	; 0x17
    2af4:	a0 8f       	std	Z+24, r26	; 0x18
    2af6:	b1 8f       	std	Z+25, r27	; 0x19
    2af8:	05 c0       	rjmp	.+10     	; 0x2b04 <f_chdir+0xa2>
				else
					res = FR_NO_PATH;		/* Could not reach the dir (it is a file) */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    2afa:	84 30       	cpi	r24, 0x04	; 4
    2afc:	91 05       	cpc	r25, r1
    2afe:	11 f4       	brne	.+4      	; 0x2b04 <f_chdir+0xa2>
    2b00:	65 e0       	ldi	r22, 0x05	; 5
    2b02:	70 e0       	ldi	r23, 0x00	; 0
	}

	LEAVE_FF(dj.fs, res);
}
    2b04:	cb 01       	movw	r24, r22
    2b06:	a4 96       	adiw	r28, 0x24	; 36
    2b08:	e4 e0       	ldi	r30, 0x04	; 4
    2b0a:	0c 94 cc 2e 	jmp	0x5d98	; 0x5d98 <__epilogue_restores__+0x1c>

00002b0e <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const XCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    2b0e:	ad e2       	ldi	r26, 0x2D	; 45
    2b10:	b0 e0       	ldi	r27, 0x00	; 0
    2b12:	ed e8       	ldi	r30, 0x8D	; 141
    2b14:	f5 e1       	ldi	r31, 0x15	; 21
    2b16:	0c 94 a2 2e 	jmp	0x5d44	; 0x5d44 <__prologue_saves__>
    2b1a:	9d a7       	std	Y+45, r25	; 0x2d
    2b1c:	8c a7       	std	Y+44, r24	; 0x2c
    2b1e:	7c a3       	std	Y+36, r23	; 0x24
    2b20:	6b a3       	std	Y+35, r22	; 0x23
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	fp->fs = NULL;		/* Clear file object */
    2b22:	dc 01       	movw	r26, r24
    2b24:	1d 92       	st	X+, r1
    2b26:	1c 92       	st	X, r1
#if !_FS_READONLY
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
    2b28:	b4 2f       	mov	r27, r20
    2b2a:	bf 71       	andi	r27, 0x1F	; 31
    2b2c:	bd a3       	std	Y+37, r27	; 0x25
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
    2b2e:	8e 01       	movw	r16, r28
    2b30:	03 5f       	subi	r16, 0xF3	; 243
    2b32:	1f 4f       	sbci	r17, 0xFF	; 255
    2b34:	4e 71       	andi	r20, 0x1E	; 30
    2b36:	ce 01       	movw	r24, r28
    2b38:	83 96       	adiw	r24, 0x23	; 35
    2b3a:	b8 01       	movw	r22, r16
    2b3c:	0e 94 1d 13 	call	0x263a	; 0x263a <chk_mounted>
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2b40:	00 97       	sbiw	r24, 0x00	; 0
    2b42:	11 f0       	breq	.+4      	; 0x2b48 <f_open+0x3a>
    2b44:	9c 01       	movw	r18, r24
    2b46:	a8 c1       	rjmp	.+848    	; 0x2e98 <f_open+0x38a>
	INITBUF(dj, sfn, lfn);
    2b48:	ce 01       	movw	r24, r28
    2b4a:	01 96       	adiw	r24, 0x01	; 1
    2b4c:	9a a3       	std	Y+34, r25	; 0x22
    2b4e:	89 a3       	std	Y+33, r24	; 0x21
	res = follow_path(&dj, path);	/* Follow the file path */
    2b50:	6b a1       	ldd	r22, Y+35	; 0x23
    2b52:	7c a1       	ldd	r23, Y+36	; 0x24
    2b54:	c8 01       	movw	r24, r16
    2b56:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <follow_path>
    2b5a:	9c 01       	movw	r18, r24

#if !_FS_READONLY
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    2b5c:	ed a1       	ldd	r30, Y+37	; 0x25
    2b5e:	4e 2f       	mov	r20, r30
    2b60:	50 e0       	ldi	r21, 0x00	; 0
    2b62:	ca 01       	movw	r24, r20
    2b64:	8c 71       	andi	r24, 0x1C	; 28
    2b66:	90 70       	andi	r25, 0x00	; 0
    2b68:	89 2b       	or	r24, r25
    2b6a:	09 f4       	brne	.+2      	; 0x2b6e <f_open+0x60>
    2b6c:	25 c1       	rjmp	.+586    	; 0x2db8 <f_open+0x2aa>
		DWORD ps, cl;

		if (res != FR_OK) {			/* No file, create new */
    2b6e:	21 15       	cp	r18, r1
    2b70:	31 05       	cpc	r19, r1
    2b72:	09 f4       	brne	.+2      	; 0x2b76 <f_open+0x68>
    2b74:	57 c0       	rjmp	.+174    	; 0x2c24 <f_open+0x116>
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
    2b76:	24 30       	cpi	r18, 0x04	; 4
    2b78:	31 05       	cpc	r19, r1
    2b7a:	09 f0       	breq	.+2      	; 0x2b7e <f_open+0x70>
    2b7c:	8d c1       	rjmp	.+794    	; 0x2e98 <f_open+0x38a>
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_seek(dj, 0);
    2b7e:	c8 01       	movw	r24, r16
    2b80:	60 e0       	ldi	r22, 0x00	; 0
    2b82:	70 e0       	ldi	r23, 0x00	; 0
    2b84:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <dir_seek>
    2b88:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    2b8a:	00 97       	sbiw	r24, 0x00	; 0
    2b8c:	09 f0       	breq	.+2      	; 0x2b90 <f_open+0x82>
    2b8e:	84 c1       	rjmp	.+776    	; 0x2e98 <f_open+0x38a>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    2b90:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2b92:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2b94:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2b96:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2b98:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b9c:	0e 94 ff 04 	call	0x9fe	; 0x9fe <move_window>
    2ba0:	9c 01       	movw	r18, r24
			if (res != FR_OK) break;
    2ba2:	00 97       	sbiw	r24, 0x00	; 0
    2ba4:	09 f0       	breq	.+2      	; 0x2ba8 <f_open+0x9a>
    2ba6:	78 c1       	rjmp	.+752    	; 0x2e98 <f_open+0x38a>
			c = *dj->dir;
    2ba8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2baa:	f8 a1       	ldd	r31, Y+32	; 0x20
    2bac:	e0 81       	ld	r30, Z
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
    2bae:	e5 3e       	cpi	r30, 0xE5	; 229
    2bb0:	09 f4       	brne	.+2      	; 0x2bb4 <f_open+0xa6>
    2bb2:	89 c1       	rjmp	.+786    	; 0x2ec6 <f_open+0x3b8>
    2bb4:	ee 23       	and	r30, r30
    2bb6:	09 f4       	brne	.+2      	; 0x2bba <f_open+0xac>
    2bb8:	86 c1       	rjmp	.+780    	; 0x2ec6 <f_open+0x3b8>
			res = dir_next(dj, TRUE);		/* Next entry with table streach */
    2bba:	c8 01       	movw	r24, r16
    2bbc:	61 e0       	ldi	r22, 0x01	; 1
    2bbe:	70 e0       	ldi	r23, 0x00	; 0
    2bc0:	0e 94 90 0a 	call	0x1520	; 0x1520 <dir_next>
    2bc4:	9c 01       	movw	r18, r24
		} while (res == FR_OK);
    2bc6:	00 97       	sbiw	r24, 0x00	; 0
    2bc8:	19 f3       	breq	.-58     	; 0x2b90 <f_open+0x82>
    2bca:	66 c1       	rjmp	.+716    	; 0x2e98 <f_open+0x38a>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    2bcc:	af 8d       	ldd	r26, Y+31	; 0x1f
    2bce:	b8 a1       	ldd	r27, Y+32	; 0x20
}

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    2bd0:	ad 01       	movw	r20, r26
    2bd2:	fd 01       	movw	r30, r26
	while (cnt--) *d++ = (char)val;
    2bd4:	cd 01       	movw	r24, r26
    2bd6:	80 96       	adiw	r24, 0x20	; 32
    2bd8:	01 c0       	rjmp	.+2      	; 0x2bdc <f_open+0xce>
    2bda:	11 92       	st	Z+, r1
    2bdc:	e8 17       	cp	r30, r24
    2bde:	f9 07       	cpc	r31, r25
    2be0:	e1 f7       	brne	.-8      	; 0x2bda <f_open+0xcc>

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
    2be2:	69 a1       	ldd	r22, Y+33	; 0x21
    2be4:	7a a1       	ldd	r23, Y+34	; 0x22
	while (cnt--) *d++ = *s++;
    2be6:	9b 01       	movw	r18, r22
    2be8:	25 5f       	subi	r18, 0xF5	; 245
    2bea:	3f 4f       	sbci	r19, 0xFF	; 255
    2bec:	06 c0       	rjmp	.+12     	; 0x2bfa <f_open+0xec>
    2bee:	fb 01       	movw	r30, r22
    2bf0:	81 91       	ld	r24, Z+
    2bf2:	bf 01       	movw	r22, r30
    2bf4:	fa 01       	movw	r30, r20
    2bf6:	81 93       	st	Z+, r24
    2bf8:	af 01       	movw	r20, r30
    2bfa:	62 17       	cp	r22, r18
    2bfc:	73 07       	cpc	r23, r19
    2bfe:	b9 f7       	brne	.-18     	; 0x2bee <f_open+0xe0>
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    2c00:	e9 a1       	ldd	r30, Y+33	; 0x21
    2c02:	fa a1       	ldd	r31, Y+34	; 0x22
    2c04:	83 85       	ldd	r24, Z+11	; 0x0b
    2c06:	88 71       	andi	r24, 0x18	; 24
    2c08:	1c 96       	adiw	r26, 0x0c	; 12
    2c0a:	8c 93       	st	X, r24
			dj->fs->wflag = 1;
    2c0c:	ed 85       	ldd	r30, Y+13	; 0x0d
    2c0e:	fe 85       	ldd	r31, Y+14	; 0x0e
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	84 83       	std	Z+4, r24	; 0x04

		if (res != FR_OK) {			/* No file, create new */
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
				res = dir_register(&dj);
			if (res != FR_OK) LEAVE_FF(dj.fs, res);
			mode |= FA_CREATE_ALWAYS;
    2c14:	fd a1       	ldd	r31, Y+37	; 0x25
    2c16:	f8 60       	ori	r31, 0x08	; 8
    2c18:	fd a3       	std	Y+37, r31	; 0x25
			dir = dj.dir;			/* Created entry (SFN entry) */
    2c1a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c1c:	98 a1       	ldd	r25, Y+32	; 0x20
    2c1e:	9b a7       	std	Y+43, r25	; 0x2b
    2c20:	8a a7       	std	Y+42, r24	; 0x2a
    2c22:	b3 c0       	rjmp	.+358    	; 0x2d8a <f_open+0x27c>
		}
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
    2c24:	e2 ff       	sbrs	r30, 2
    2c26:	03 c0       	rjmp	.+6      	; 0x2c2e <f_open+0x120>
    2c28:	28 e0       	ldi	r18, 0x08	; 8
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	35 c1       	rjmp	.+618    	; 0x2e98 <f_open+0x38a>
				LEAVE_FF(dj.fs, FR_EXIST);
			dir = dj.dir;
    2c2e:	af 8d       	ldd	r26, Y+31	; 0x1f
    2c30:	b8 a1       	ldd	r27, Y+32	; 0x20
    2c32:	bb a7       	std	Y+43, r27	; 0x2b
    2c34:	aa a7       	std	Y+42, r26	; 0x2a
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
    2c36:	10 97       	sbiw	r26, 0x00	; 0
    2c38:	09 f4       	brne	.+2      	; 0x2c3c <f_open+0x12e>
    2c3a:	29 c1       	rjmp	.+594    	; 0x2e8e <f_open+0x380>
    2c3c:	1b 96       	adiw	r26, 0x0b	; 11
    2c3e:	8c 91       	ld	r24, X
    2c40:	1b 97       	sbiw	r26, 0x0b	; 11
    2c42:	81 71       	andi	r24, 0x11	; 17
    2c44:	09 f0       	breq	.+2      	; 0x2c48 <f_open+0x13a>
    2c46:	23 c1       	rjmp	.+582    	; 0x2e8e <f_open+0x380>
				LEAVE_FF(dj.fs, FR_DENIED);
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
    2c48:	e3 ff       	sbrs	r30, 3
    2c4a:	9f c0       	rjmp	.+318    	; 0x2d8a <f_open+0x27c>
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
    2c4c:	54 96       	adiw	r26, 0x14	; 20
    2c4e:	8d 91       	ld	r24, X+
    2c50:	9c 91       	ld	r25, X
    2c52:	55 97       	sbiw	r26, 0x15	; 21
    2c54:	a0 e0       	ldi	r26, 0x00	; 0
    2c56:	b0 e0       	ldi	r27, 0x00	; 0
    2c58:	7c 01       	movw	r14, r24
    2c5a:	dd 24       	eor	r13, r13
    2c5c:	cc 24       	eor	r12, r12
    2c5e:	ea a5       	ldd	r30, Y+42	; 0x2a
    2c60:	fb a5       	ldd	r31, Y+43	; 0x2b
    2c62:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c64:	93 8d       	ldd	r25, Z+27	; 0x1b
    2c66:	a0 e0       	ldi	r26, 0x00	; 0
    2c68:	b0 e0       	ldi	r27, 0x00	; 0
    2c6a:	c8 2a       	or	r12, r24
    2c6c:	d9 2a       	or	r13, r25
    2c6e:	ea 2a       	or	r14, r26
    2c70:	fb 2a       	or	r15, r27
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
    2c72:	15 8a       	std	Z+21, r1	; 0x15
    2c74:	14 8a       	std	Z+20, r1	; 0x14
				ST_WORD(dir+DIR_FstClusLO, 0);
    2c76:	13 8e       	std	Z+27, r1	; 0x1b
    2c78:	12 8e       	std	Z+26, r1	; 0x1a
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
    2c7a:	14 8e       	std	Z+28, r1	; 0x1c
    2c7c:	15 8e       	std	Z+29, r1	; 0x1d
    2c7e:	16 8e       	std	Z+30, r1	; 0x1e
    2c80:	17 8e       	std	Z+31, r1	; 0x1f
				dj.fs->wflag = 1;
    2c82:	2d 84       	ldd	r2, Y+13	; 0x0d
    2c84:	3e 84       	ldd	r3, Y+14	; 0x0e
    2c86:	81 e0       	ldi	r24, 0x01	; 1
    2c88:	f1 01       	movw	r30, r2
    2c8a:	84 83       	std	Z+4, r24	; 0x04
				ps = dj.fs->winsect;			/* Remove the cluster chain */
    2c8c:	d1 01       	movw	r26, r2
    2c8e:	9e 96       	adiw	r26, 0x2e	; 46
    2c90:	8d 91       	ld	r24, X+
    2c92:	9d 91       	ld	r25, X+
    2c94:	0d 90       	ld	r0, X+
    2c96:	bc 91       	ld	r27, X
    2c98:	a0 2d       	mov	r26, r0
    2c9a:	8e a3       	std	Y+38, r24	; 0x26
    2c9c:	9f a3       	std	Y+39, r25	; 0x27
    2c9e:	a8 a7       	std	Y+40, r26	; 0x28
    2ca0:	b9 a7       	std	Y+41, r27	; 0x29
				if (cl) {
    2ca2:	c1 14       	cp	r12, r1
    2ca4:	d1 04       	cpc	r13, r1
    2ca6:	e1 04       	cpc	r14, r1
    2ca8:	f1 04       	cpc	r15, r1
    2caa:	09 f4       	brne	.+2      	; 0x2cae <f_open+0x1a0>
    2cac:	62 c0       	rjmp	.+196    	; 0x2d72 <f_open+0x264>
{
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
    2cae:	b1 e0       	ldi	r27, 0x01	; 1
    2cb0:	cb 16       	cp	r12, r27
    2cb2:	d1 04       	cpc	r13, r1
    2cb4:	e1 04       	cpc	r14, r1
    2cb6:	f1 04       	cpc	r15, r1
    2cb8:	09 f4       	brne	.+2      	; 0x2cbc <f_open+0x1ae>
    2cba:	f6 c0       	rjmp	.+492    	; 0x2ea8 <f_open+0x39a>
    2cbc:	86 8d       	ldd	r24, Z+30	; 0x1e
    2cbe:	97 8d       	ldd	r25, Z+31	; 0x1f
    2cc0:	a0 a1       	ldd	r26, Z+32	; 0x20
    2cc2:	b1 a1       	ldd	r27, Z+33	; 0x21
    2cc4:	c8 16       	cp	r12, r24
    2cc6:	d9 06       	cpc	r13, r25
    2cc8:	ea 06       	cpc	r14, r26
    2cca:	fb 06       	cpc	r15, r27
    2ccc:	08 f0       	brcs	.+2      	; 0x2cd0 <f_open+0x1c2>
    2cce:	ec c0       	rjmp	.+472    	; 0x2ea8 <f_open+0x39a>
    2cd0:	46 01       	movw	r8, r12
    2cd2:	57 01       	movw	r10, r14
    2cd4:	42 c0       	rjmp	.+132    	; 0x2d5a <f_open+0x24c>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    2cd6:	c1 01       	movw	r24, r2
    2cd8:	b5 01       	movw	r22, r10
    2cda:	a4 01       	movw	r20, r8
    2cdc:	0e 94 33 06 	call	0xc66	; 0xc66 <get_fat>
    2ce0:	2b 01       	movw	r4, r22
    2ce2:	3c 01       	movw	r6, r24
			if (nxt == 0) break;				/* Empty cluster? */
    2ce4:	61 15       	cp	r22, r1
    2ce6:	71 05       	cpc	r23, r1
    2ce8:	81 05       	cpc	r24, r1
    2cea:	91 05       	cpc	r25, r1
    2cec:	09 f4       	brne	.+2      	; 0x2cf0 <f_open+0x1e2>
    2cee:	df c0       	rjmp	.+446    	; 0x2eae <f_open+0x3a0>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    2cf0:	61 30       	cpi	r22, 0x01	; 1
    2cf2:	71 05       	cpc	r23, r1
    2cf4:	81 05       	cpc	r24, r1
    2cf6:	91 05       	cpc	r25, r1
    2cf8:	09 f4       	brne	.+2      	; 0x2cfc <f_open+0x1ee>
    2cfa:	d6 c0       	rjmp	.+428    	; 0x2ea8 <f_open+0x39a>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    2cfc:	6f 3f       	cpi	r22, 0xFF	; 255
    2cfe:	2f ef       	ldi	r18, 0xFF	; 255
    2d00:	72 07       	cpc	r23, r18
    2d02:	2f ef       	ldi	r18, 0xFF	; 255
    2d04:	82 07       	cpc	r24, r18
    2d06:	2f ef       	ldi	r18, 0xFF	; 255
    2d08:	92 07       	cpc	r25, r18
    2d0a:	09 f4       	brne	.+2      	; 0x2d0e <f_open+0x200>
    2d0c:	ca c0       	rjmp	.+404    	; 0x2ea2 <f_open+0x394>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    2d0e:	c1 01       	movw	r24, r2
    2d10:	b5 01       	movw	r22, r10
    2d12:	a4 01       	movw	r20, r8
    2d14:	00 e0       	ldi	r16, 0x00	; 0
    2d16:	10 e0       	ldi	r17, 0x00	; 0
    2d18:	20 e0       	ldi	r18, 0x00	; 0
    2d1a:	30 e0       	ldi	r19, 0x00	; 0
    2d1c:	0e 94 69 05 	call	0xad2	; 0xad2 <put_fat>
    2d20:	9c 01       	movw	r18, r24
			if (res != FR_OK) break;
    2d22:	00 97       	sbiw	r24, 0x00	; 0
    2d24:	09 f0       	breq	.+2      	; 0x2d28 <f_open+0x21a>
    2d26:	b8 c0       	rjmp	.+368    	; 0x2e98 <f_open+0x38a>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    2d28:	f1 01       	movw	r30, r2
    2d2a:	86 85       	ldd	r24, Z+14	; 0x0e
    2d2c:	97 85       	ldd	r25, Z+15	; 0x0f
    2d2e:	a0 89       	ldd	r26, Z+16	; 0x10
    2d30:	b1 89       	ldd	r27, Z+17	; 0x11
    2d32:	8f 3f       	cpi	r24, 0xFF	; 255
    2d34:	ff ef       	ldi	r31, 0xFF	; 255
    2d36:	9f 07       	cpc	r25, r31
    2d38:	ff ef       	ldi	r31, 0xFF	; 255
    2d3a:	af 07       	cpc	r26, r31
    2d3c:	ff ef       	ldi	r31, 0xFF	; 255
    2d3e:	bf 07       	cpc	r27, r31
    2d40:	51 f0       	breq	.+20     	; 0x2d56 <f_open+0x248>
				fs->free_clust++;
    2d42:	01 96       	adiw	r24, 0x01	; 1
    2d44:	a1 1d       	adc	r26, r1
    2d46:	b1 1d       	adc	r27, r1
    2d48:	f1 01       	movw	r30, r2
    2d4a:	86 87       	std	Z+14, r24	; 0x0e
    2d4c:	97 87       	std	Z+15, r25	; 0x0f
    2d4e:	a0 8b       	std	Z+16, r26	; 0x10
    2d50:	b1 8b       	std	Z+17, r27	; 0x11
				fs->fsi_flag = 1;
    2d52:	21 e0       	ldi	r18, 0x01	; 1
    2d54:	25 83       	std	Z+5, r18	; 0x05
    2d56:	53 01       	movw	r10, r6
    2d58:	42 01       	movw	r8, r4
	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
    2d5a:	f1 01       	movw	r30, r2
    2d5c:	86 8d       	ldd	r24, Z+30	; 0x1e
    2d5e:	97 8d       	ldd	r25, Z+31	; 0x1f
    2d60:	a0 a1       	ldd	r26, Z+32	; 0x20
    2d62:	b1 a1       	ldd	r27, Z+33	; 0x21
    2d64:	88 16       	cp	r8, r24
    2d66:	99 06       	cpc	r9, r25
    2d68:	aa 06       	cpc	r10, r26
    2d6a:	bb 06       	cpc	r11, r27
    2d6c:	08 f4       	brcc	.+2      	; 0x2d70 <f_open+0x262>
    2d6e:	b3 cf       	rjmp	.-154    	; 0x2cd6 <f_open+0x1c8>
    2d70:	9e c0       	rjmp	.+316    	; 0x2eae <f_open+0x3a0>
				if (cl) {
					res = remove_chain(dj.fs, cl);
					if (res) LEAVE_FF(dj.fs, res);
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
				}
				res = move_window(dj.fs, ps);
    2d72:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d74:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d76:	4e a1       	ldd	r20, Y+38	; 0x26
    2d78:	5f a1       	ldd	r21, Y+39	; 0x27
    2d7a:	68 a5       	ldd	r22, Y+40	; 0x28
    2d7c:	79 a5       	ldd	r23, Y+41	; 0x29
    2d7e:	0e 94 ff 04 	call	0x9fe	; 0x9fe <move_window>
    2d82:	9c 01       	movw	r18, r24
				if (res != FR_OK) LEAVE_FF(dj.fs, res);
    2d84:	00 97       	sbiw	r24, 0x00	; 0
    2d86:	09 f0       	breq	.+2      	; 0x2d8a <f_open+0x27c>
    2d88:	87 c0       	rjmp	.+270    	; 0x2e98 <f_open+0x38a>
			}
		}
		if (mode & FA_CREATE_ALWAYS) {
    2d8a:	fd a1       	ldd	r31, Y+37	; 0x25
    2d8c:	f3 ff       	sbrs	r31, 3
    2d8e:	28 c0       	rjmp	.+80     	; 0x2de0 <f_open+0x2d2>
			dir[DIR_Attr] = 0;					/* Reset attribute */
    2d90:	aa a5       	ldd	r26, Y+42	; 0x2a
    2d92:	bb a5       	ldd	r27, Y+43	; 0x2b
    2d94:	1b 96       	adiw	r26, 0x0b	; 11
    2d96:	1c 92       	st	X, r1
			ps = get_fattime();
    2d98:	0e 94 86 01 	call	0x30c	; 0x30c <get_fattime>
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
    2d9c:	ea a5       	ldd	r30, Y+42	; 0x2a
    2d9e:	fb a5       	ldd	r31, Y+43	; 0x2b
    2da0:	66 87       	std	Z+14, r22	; 0x0e
    2da2:	77 87       	std	Z+15, r23	; 0x0f
    2da4:	80 8b       	std	Z+16, r24	; 0x10
    2da6:	91 8b       	std	Z+17, r25	; 0x11
			dj.fs->wflag = 1;
    2da8:	ed 85       	ldd	r30, Y+13	; 0x0d
    2daa:	fe 85       	ldd	r31, Y+14	; 0x0e
    2dac:	81 e0       	ldi	r24, 0x01	; 1
    2dae:	84 83       	std	Z+4, r24	; 0x04
			mode |= FA__WRITTEN;				/* Set file changed flag */
    2db0:	fd a1       	ldd	r31, Y+37	; 0x25
    2db2:	f0 62       	ori	r31, 0x20	; 32
    2db4:	fd a3       	std	Y+37, r31	; 0x25
    2db6:	14 c0       	rjmp	.+40     	; 0x2de0 <f_open+0x2d2>
		}
	}
	/* Open an existing file */
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
    2db8:	21 15       	cp	r18, r1
    2dba:	31 05       	cpc	r19, r1
    2dbc:	09 f0       	breq	.+2      	; 0x2dc0 <f_open+0x2b2>
    2dbe:	6c c0       	rjmp	.+216    	; 0x2e98 <f_open+0x38a>
		dir = dj.dir;
    2dc0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2dc2:	98 a1       	ldd	r25, Y+32	; 0x20
    2dc4:	9b a7       	std	Y+43, r25	; 0x2b
    2dc6:	8a a7       	std	Y+42, r24	; 0x2a
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    2dc8:	00 97       	sbiw	r24, 0x00	; 0
    2dca:	09 f4       	brne	.+2      	; 0x2dce <f_open+0x2c0>
    2dcc:	63 c0       	rjmp	.+198    	; 0x2e94 <f_open+0x386>
    2dce:	dc 01       	movw	r26, r24
    2dd0:	1b 96       	adiw	r26, 0x0b	; 11
    2dd2:	8c 91       	ld	r24, X
    2dd4:	84 fd       	sbrc	r24, 4
    2dd6:	5e c0       	rjmp	.+188    	; 0x2e94 <f_open+0x386>
			LEAVE_FF(dj.fs, FR_NO_FILE);
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    2dd8:	e1 ff       	sbrs	r30, 1
    2dda:	02 c0       	rjmp	.+4      	; 0x2de0 <f_open+0x2d2>
    2ddc:	80 fd       	sbrc	r24, 0
    2dde:	57 c0       	rjmp	.+174    	; 0x2e8e <f_open+0x380>
			LEAVE_FF(dj.fs, FR_DENIED);
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    2de0:	6d 85       	ldd	r22, Y+13	; 0x0d
    2de2:	7e 85       	ldd	r23, Y+14	; 0x0e
    2de4:	fb 01       	movw	r30, r22
    2de6:	26 a5       	ldd	r18, Z+46	; 0x2e
    2de8:	37 a5       	ldd	r19, Z+47	; 0x2f
    2dea:	40 a9       	ldd	r20, Z+48	; 0x30
    2dec:	51 a9       	ldd	r21, Z+49	; 0x31
    2dee:	ac a5       	ldd	r26, Y+44	; 0x2c
    2df0:	bd a5       	ldd	r27, Y+45	; 0x2d
    2df2:	5a 96       	adiw	r26, 0x1a	; 26
    2df4:	2d 93       	st	X+, r18
    2df6:	3d 93       	st	X+, r19
    2df8:	4d 93       	st	X+, r20
    2dfa:	5c 93       	st	X, r21
    2dfc:	5d 97       	sbiw	r26, 0x1d	; 29
	fp->dir_ptr = dj.dir;
    2dfe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e00:	98 a1       	ldd	r25, Y+32	; 0x20
    2e02:	5f 96       	adiw	r26, 0x1f	; 31
    2e04:	9c 93       	st	X, r25
    2e06:	8e 93       	st	-X, r24
    2e08:	5e 97       	sbiw	r26, 0x1e	; 30
#endif
	fp->flag = mode;					/* File access mode */
    2e0a:	ed a1       	ldd	r30, Y+37	; 0x25
    2e0c:	14 96       	adiw	r26, 0x04	; 4
    2e0e:	ec 93       	st	X, r30
	fp->org_clust =						/* File start cluster */
    2e10:	aa a5       	ldd	r26, Y+42	; 0x2a
    2e12:	bb a5       	ldd	r27, Y+43	; 0x2b
    2e14:	54 96       	adiw	r26, 0x14	; 20
    2e16:	8d 91       	ld	r24, X+
    2e18:	9c 91       	ld	r25, X
    2e1a:	55 97       	sbiw	r26, 0x15	; 21
    2e1c:	a0 e0       	ldi	r26, 0x00	; 0
    2e1e:	b0 e0       	ldi	r27, 0x00	; 0
    2e20:	dc 01       	movw	r26, r24
    2e22:	99 27       	eor	r25, r25
    2e24:	88 27       	eor	r24, r24
    2e26:	ea a5       	ldd	r30, Y+42	; 0x2a
    2e28:	fb a5       	ldd	r31, Y+43	; 0x2b
    2e2a:	22 8d       	ldd	r18, Z+26	; 0x1a
    2e2c:	33 8d       	ldd	r19, Z+27	; 0x1b
    2e2e:	40 e0       	ldi	r20, 0x00	; 0
    2e30:	50 e0       	ldi	r21, 0x00	; 0
    2e32:	82 2b       	or	r24, r18
    2e34:	93 2b       	or	r25, r19
    2e36:	a4 2b       	or	r26, r20
    2e38:	b5 2b       	or	r27, r21
    2e3a:	ec a5       	ldd	r30, Y+44	; 0x2c
    2e3c:	fd a5       	ldd	r31, Y+45	; 0x2d
    2e3e:	86 87       	std	Z+14, r24	; 0x0e
    2e40:	97 87       	std	Z+15, r25	; 0x0f
    2e42:	a0 8b       	std	Z+16, r26	; 0x10
    2e44:	b1 8b       	std	Z+17, r27	; 0x11
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    2e46:	ea a5       	ldd	r30, Y+42	; 0x2a
    2e48:	fb a5       	ldd	r31, Y+43	; 0x2b
    2e4a:	84 8d       	ldd	r24, Z+28	; 0x1c
    2e4c:	95 8d       	ldd	r25, Z+29	; 0x1d
    2e4e:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2e50:	b7 8d       	ldd	r27, Z+31	; 0x1f
    2e52:	ec a5       	ldd	r30, Y+44	; 0x2c
    2e54:	fd a5       	ldd	r31, Y+45	; 0x2d
    2e56:	82 87       	std	Z+10, r24	; 0x0a
    2e58:	93 87       	std	Z+11, r25	; 0x0b
    2e5a:	a4 87       	std	Z+12, r26	; 0x0c
    2e5c:	b5 87       	std	Z+13, r27	; 0x0d
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
    2e5e:	16 82       	std	Z+6, r1	; 0x06
    2e60:	17 82       	std	Z+7, r1	; 0x07
    2e62:	10 86       	std	Z+8, r1	; 0x08
    2e64:	11 86       	std	Z+9, r1	; 0x09
    2e66:	8f ef       	ldi	r24, 0xFF	; 255
    2e68:	85 83       	std	Z+5, r24	; 0x05
	fp->dsect = 0;
    2e6a:	ec a5       	ldd	r30, Y+44	; 0x2c
    2e6c:	fd a5       	ldd	r31, Y+45	; 0x2d
    2e6e:	16 8a       	std	Z+22, r1	; 0x16
    2e70:	17 8a       	std	Z+23, r1	; 0x17
    2e72:	10 8e       	std	Z+24, r1	; 0x18
    2e74:	11 8e       	std	Z+25, r1	; 0x19
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
    2e76:	71 83       	std	Z+1, r23	; 0x01
    2e78:	60 83       	st	Z, r22
    2e7a:	db 01       	movw	r26, r22
    2e7c:	16 96       	adiw	r26, 0x06	; 6
    2e7e:	8d 91       	ld	r24, X+
    2e80:	9c 91       	ld	r25, X
    2e82:	17 97       	sbiw	r26, 0x07	; 7
    2e84:	93 83       	std	Z+3, r25	; 0x03
    2e86:	82 83       	std	Z+2, r24	; 0x02
    2e88:	20 e0       	ldi	r18, 0x00	; 0
    2e8a:	30 e0       	ldi	r19, 0x00	; 0
    2e8c:	05 c0       	rjmp	.+10     	; 0x2e98 <f_open+0x38a>

	LEAVE_FF(dj.fs, FR_OK);
    2e8e:	27 e0       	ldi	r18, 0x07	; 7
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	02 c0       	rjmp	.+4      	; 0x2e98 <f_open+0x38a>
    2e94:	24 e0       	ldi	r18, 0x04	; 4
    2e96:	30 e0       	ldi	r19, 0x00	; 0
}
    2e98:	c9 01       	movw	r24, r18
    2e9a:	ad 96       	adiw	r28, 0x2d	; 45
    2e9c:	e2 e1       	ldi	r30, 0x12	; 18
    2e9e:	0c 94 be 2e 	jmp	0x5d7c	; 0x5d7c <__epilogue_restores__>
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
	fp->dsect = 0;
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */

	LEAVE_FF(dj.fs, FR_OK);
    2ea2:	21 e0       	ldi	r18, 0x01	; 1
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	f8 cf       	rjmp	.-16     	; 0x2e98 <f_open+0x38a>
    2ea8:	22 e0       	ldi	r18, 0x02	; 2
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	f5 cf       	rjmp	.-22     	; 0x2e98 <f_open+0x38a>
				dj.fs->wflag = 1;
				ps = dj.fs->winsect;			/* Remove the cluster chain */
				if (cl) {
					res = remove_chain(dj.fs, cl);
					if (res) LEAVE_FF(dj.fs, res);
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    2eae:	ed 85       	ldd	r30, Y+13	; 0x0d
    2eb0:	fe 85       	ldd	r31, Y+14	; 0x0e
    2eb2:	08 94       	sec
    2eb4:	c1 08       	sbc	r12, r1
    2eb6:	d1 08       	sbc	r13, r1
    2eb8:	e1 08       	sbc	r14, r1
    2eba:	f1 08       	sbc	r15, r1
    2ebc:	c2 86       	std	Z+10, r12	; 0x0a
    2ebe:	d3 86       	std	Z+11, r13	; 0x0b
    2ec0:	e4 86       	std	Z+12, r14	; 0x0c
    2ec2:	f5 86       	std	Z+13, r15	; 0x0d
    2ec4:	56 cf       	rjmp	.-340    	; 0x2d72 <f_open+0x264>
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    2ec6:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2ec8:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2eca:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2ecc:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2ece:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ed0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ed2:	0e 94 ff 04 	call	0x9fe	; 0x9fe <move_window>
    2ed6:	9c 01       	movw	r18, r24
		if (res == FR_OK) {
    2ed8:	00 97       	sbiw	r24, 0x00	; 0
    2eda:	09 f4       	brne	.+2      	; 0x2ede <f_open+0x3d0>
    2edc:	77 ce       	rjmp	.-786    	; 0x2bcc <f_open+0xbe>
    2ede:	dc cf       	rjmp	.-72     	; 0x2e98 <f_open+0x38a>

00002ee0 <wait_ready>:
BYTE wait_ready (void)
{
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
    2ee0:	82 e3       	ldi	r24, 0x32	; 50
    2ee2:	80 93 2e 03 	sts	0x032E, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    2ee6:	8f ef       	ldi	r24, 0xFF	; 255
    2ee8:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2eea:	0d b4       	in	r0, 0x2d	; 45
    2eec:	07 fe       	sbrs	r0, 7
    2eee:	fd cf       	rjmp	.-6      	; 0x2eea <wait_ready+0xa>
	return SPDR;
    2ef0:	8e b5       	in	r24, 0x2e	; 46
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    2ef2:	2f ef       	ldi	r18, 0xFF	; 255
    2ef4:	2e bd       	out	0x2e, r18	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2ef6:	0d b4       	in	r0, 0x2d	; 45
    2ef8:	07 fe       	sbrs	r0, 7
    2efa:	fd cf       	rjmp	.-6      	; 0x2ef6 <wait_ready+0x16>
	return SPDR;
    2efc:	9e b5       	in	r25, 0x2e	; 46

	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		res = rcvr_spi();
	while ((res != 0xFF) && Timer2);
    2efe:	9f 3f       	cpi	r25, 0xFF	; 255
    2f00:	21 f0       	breq	.+8      	; 0x2f0a <wait_ready+0x2a>
    2f02:	80 91 2e 03 	lds	r24, 0x032E
    2f06:	88 23       	and	r24, r24
    2f08:	a9 f7       	brne	.-22     	; 0x2ef4 <wait_ready+0x14>

	return res;
}
    2f0a:	89 2f       	mov	r24, r25
    2f0c:	08 95       	ret

00002f0e <select>:
/*-----------------------------------------------------------------------*/

static
BOOL select (void)	/* TRUE:Successful, FALSE:Timeout */
{
	CS_LOW();
    2f0e:	28 98       	cbi	0x05, 0	; 5
	if (wait_ready() != 0xFF) {
    2f10:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <wait_ready>
    2f14:	8f 3f       	cpi	r24, 0xFF	; 255
    2f16:	19 f4       	brne	.+6      	; 0x2f1e <select+0x10>
    2f18:	21 e0       	ldi	r18, 0x01	; 1
    2f1a:	30 e0       	ldi	r19, 0x00	; 0
    2f1c:	09 c0       	rjmp	.+18     	; 0x2f30 <select+0x22>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    2f1e:	28 9a       	sbi	0x05, 0	; 5
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    2f20:	8f ef       	ldi	r24, 0xFF	; 255
    2f22:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2f24:	0d b4       	in	r0, 0x2d	; 45
    2f26:	07 fe       	sbrs	r0, 7
    2f28:	fd cf       	rjmp	.-6      	; 0x2f24 <select+0x16>
	return SPDR;
    2f2a:	8e b5       	in	r24, 0x2e	; 46
    2f2c:	20 e0       	ldi	r18, 0x00	; 0
    2f2e:	30 e0       	ldi	r19, 0x00	; 0
	if (wait_ready() != 0xFF) {
		deselect();
		return FALSE;
	}
	return TRUE;
}
    2f30:	c9 01       	movw	r24, r18
    2f32:	08 95       	ret

00002f34 <rcvr_datablock>:
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    2f34:	fc 01       	movw	r30, r24
	BYTE token;


	Timer1 = 20;
    2f36:	84 e1       	ldi	r24, 0x14	; 20
    2f38:	80 93 2d 03 	sts	0x032D, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    2f3c:	9f ef       	ldi	r25, 0xFF	; 255
    2f3e:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2f40:	0d b4       	in	r0, 0x2d	; 45
    2f42:	07 fe       	sbrs	r0, 7
    2f44:	fd cf       	rjmp	.-6      	; 0x2f40 <rcvr_datablock+0xc>
	return SPDR;
    2f46:	8e b5       	in	r24, 0x2e	; 46


	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
    2f48:	8f 3f       	cpi	r24, 0xFF	; 255
    2f4a:	29 f4       	brne	.+10     	; 0x2f56 <rcvr_datablock+0x22>
    2f4c:	80 91 2d 03 	lds	r24, 0x032D
    2f50:	88 23       	and	r24, r24
    2f52:	a9 f7       	brne	.-22     	; 0x2f3e <rcvr_datablock+0xa>
    2f54:	2f c0       	rjmp	.+94     	; 0x2fb4 <rcvr_datablock+0x80>
	if(token != 0xFE) return FALSE;	/* If not valid data token, retutn with error */
    2f56:	8e 3f       	cpi	r24, 0xFE	; 254
    2f58:	69 f5       	brne	.+90     	; 0x2fb4 <rcvr_datablock+0x80>

	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
    2f5a:	9f ef       	ldi	r25, 0xFF	; 255
    2f5c:	9e bd       	out	0x2e, r25	; 46
    2f5e:	0d b4       	in	r0, 0x2d	; 45
    2f60:	07 fe       	sbrs	r0, 7
    2f62:	fd cf       	rjmp	.-6      	; 0x2f5e <rcvr_datablock+0x2a>
    2f64:	8e b5       	in	r24, 0x2e	; 46
    2f66:	80 83       	st	Z, r24
		rcvr_spi_m(buff++);
    2f68:	9e bd       	out	0x2e, r25	; 46
    2f6a:	0d b4       	in	r0, 0x2d	; 45
    2f6c:	07 fe       	sbrs	r0, 7
    2f6e:	fd cf       	rjmp	.-6      	; 0x2f6a <rcvr_datablock+0x36>
    2f70:	8e b5       	in	r24, 0x2e	; 46
    2f72:	81 83       	std	Z+1, r24	; 0x01
		rcvr_spi_m(buff++);
    2f74:	9e bd       	out	0x2e, r25	; 46
    2f76:	0d b4       	in	r0, 0x2d	; 45
    2f78:	07 fe       	sbrs	r0, 7
    2f7a:	fd cf       	rjmp	.-6      	; 0x2f76 <rcvr_datablock+0x42>
    2f7c:	8e b5       	in	r24, 0x2e	; 46
    2f7e:	82 83       	std	Z+2, r24	; 0x02
		rcvr_spi_m(buff++);
    2f80:	9e bd       	out	0x2e, r25	; 46
    2f82:	0d b4       	in	r0, 0x2d	; 45
    2f84:	07 fe       	sbrs	r0, 7
    2f86:	fd cf       	rjmp	.-6      	; 0x2f82 <rcvr_datablock+0x4e>
    2f88:	8e b5       	in	r24, 0x2e	; 46
    2f8a:	83 83       	std	Z+3, r24	; 0x03
	} while (btr -= 4);
    2f8c:	64 50       	subi	r22, 0x04	; 4
    2f8e:	70 40       	sbci	r23, 0x00	; 0
    2f90:	11 f0       	breq	.+4      	; 0x2f96 <rcvr_datablock+0x62>
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    2f92:	34 96       	adiw	r30, 0x04	; 4
    2f94:	e3 cf       	rjmp	.-58     	; 0x2f5c <rcvr_datablock+0x28>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    2f96:	8f ef       	ldi	r24, 0xFF	; 255
    2f98:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2f9a:	0d b4       	in	r0, 0x2d	; 45
    2f9c:	07 fe       	sbrs	r0, 7
    2f9e:	fd cf       	rjmp	.-6      	; 0x2f9a <rcvr_datablock+0x66>
	return SPDR;
    2fa0:	8e b5       	in	r24, 0x2e	; 46
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    2fa2:	8f ef       	ldi	r24, 0xFF	; 255
    2fa4:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2fa6:	0d b4       	in	r0, 0x2d	; 45
    2fa8:	07 fe       	sbrs	r0, 7
    2faa:	fd cf       	rjmp	.-6      	; 0x2fa6 <rcvr_datablock+0x72>
	return SPDR;
    2fac:	8e b5       	in	r24, 0x2e	; 46
    2fae:	21 e0       	ldi	r18, 0x01	; 1
    2fb0:	30 e0       	ldi	r19, 0x00	; 0
    2fb2:	02 c0       	rjmp	.+4      	; 0x2fb8 <rcvr_datablock+0x84>
		rcvr_spi_m(buff++);
	} while (btr -= 4);
	rcvr_spi();						/* Discard CRC */
	rcvr_spi();

	return TRUE;					/* Return with success */
    2fb4:	20 e0       	ldi	r18, 0x00	; 0
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
}
    2fb8:	c9 01       	movw	r24, r18
    2fba:	08 95       	ret

00002fbc <xmit_datablock>:
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    2fbc:	1f 93       	push	r17
    2fbe:	cf 93       	push	r28
    2fc0:	df 93       	push	r29
    2fc2:	ec 01       	movw	r28, r24
    2fc4:	16 2f       	mov	r17, r22
	BYTE resp, wc;


	if (wait_ready() != 0xFF) return FALSE;
    2fc6:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <wait_ready>
    2fca:	8f 3f       	cpi	r24, 0xFF	; 255
    2fcc:	19 f0       	breq	.+6      	; 0x2fd4 <xmit_datablock+0x18>
    2fce:	20 e0       	ldi	r18, 0x00	; 0
    2fd0:	30 e0       	ldi	r19, 0x00	; 0
    2fd2:	31 c0       	rjmp	.+98     	; 0x3036 <xmit_datablock+0x7a>

	xmit_spi(token);					/* Xmit data token */
    2fd4:	1e bd       	out	0x2e, r17	; 46
    2fd6:	0d b4       	in	r0, 0x2d	; 45
    2fd8:	07 fe       	sbrs	r0, 7
    2fda:	fd cf       	rjmp	.-6      	; 0x2fd6 <xmit_datablock+0x1a>
	if (token != 0xFD) {	/* Is data token */
    2fdc:	1d 3f       	cpi	r17, 0xFD	; 253
    2fde:	19 f4       	brne	.+6      	; 0x2fe6 <xmit_datablock+0x2a>
    2fe0:	21 e0       	ldi	r18, 0x01	; 1
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
    2fe4:	28 c0       	rjmp	.+80     	; 0x3036 <xmit_datablock+0x7a>
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
    2fe8:	88 81       	ld	r24, Y
    2fea:	8e bd       	out	0x2e, r24	; 46
    2fec:	0d b4       	in	r0, 0x2d	; 45
    2fee:	07 fe       	sbrs	r0, 7
    2ff0:	fd cf       	rjmp	.-6      	; 0x2fec <xmit_datablock+0x30>
			xmit_spi(*buff++);
    2ff2:	89 81       	ldd	r24, Y+1	; 0x01
    2ff4:	8e bd       	out	0x2e, r24	; 46
    2ff6:	0d b4       	in	r0, 0x2d	; 45
    2ff8:	07 fe       	sbrs	r0, 7
    2ffa:	fd cf       	rjmp	.-6      	; 0x2ff6 <xmit_datablock+0x3a>
		} while (--wc);
    2ffc:	91 50       	subi	r25, 0x01	; 1
    2ffe:	11 f0       	breq	.+4      	; 0x3004 <xmit_datablock+0x48>
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    3000:	22 96       	adiw	r28, 0x02	; 2
    3002:	f2 cf       	rjmp	.-28     	; 0x2fe8 <xmit_datablock+0x2c>
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
			xmit_spi(*buff++);
		} while (--wc);
		xmit_spi(0xFF);					/* CRC (Dummy) */
    3004:	8f ef       	ldi	r24, 0xFF	; 255
    3006:	8e bd       	out	0x2e, r24	; 46
    3008:	0d b4       	in	r0, 0x2d	; 45
    300a:	07 fe       	sbrs	r0, 7
    300c:	fd cf       	rjmp	.-6      	; 0x3008 <xmit_datablock+0x4c>
		xmit_spi(0xFF);
    300e:	8f ef       	ldi	r24, 0xFF	; 255
    3010:	8e bd       	out	0x2e, r24	; 46
    3012:	0d b4       	in	r0, 0x2d	; 45
    3014:	07 fe       	sbrs	r0, 7
    3016:	fd cf       	rjmp	.-6      	; 0x3012 <xmit_datablock+0x56>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    3018:	8f ef       	ldi	r24, 0xFF	; 255
    301a:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    301c:	0d b4       	in	r0, 0x2d	; 45
    301e:	07 fe       	sbrs	r0, 7
    3020:	fd cf       	rjmp	.-6      	; 0x301c <xmit_datablock+0x60>
	return SPDR;
    3022:	8e b5       	in	r24, 0x2e	; 46
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	8f 71       	andi	r24, 0x1F	; 31
    3028:	85 30       	cpi	r24, 0x05	; 5
    302a:	09 f0       	breq	.+2      	; 0x302e <xmit_datablock+0x72>
    302c:	91 e0       	ldi	r25, 0x01	; 1
    302e:	81 e0       	ldi	r24, 0x01	; 1
    3030:	98 27       	eor	r25, r24
    3032:	29 2f       	mov	r18, r25
    3034:	30 e0       	ldi	r19, 0x00	; 0
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return FALSE;
	}

	return TRUE;
}
    3036:	c9 01       	movw	r24, r18
    3038:	df 91       	pop	r29
    303a:	cf 91       	pop	r28
    303c:	1f 91       	pop	r17
    303e:	08 95       	ret

00003040 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    3040:	df 92       	push	r13
    3042:	ef 92       	push	r14
    3044:	ff 92       	push	r15
    3046:	0f 93       	push	r16
    3048:	1f 93       	push	r17
    304a:	d8 2e       	mov	r13, r24
    304c:	7a 01       	movw	r14, r20
    304e:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    3050:	87 ff       	sbrs	r24, 7
    3052:	0c c0       	rjmp	.+24     	; 0x306c <send_cmd+0x2c>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    3054:	87 e7       	ldi	r24, 0x77	; 119
    3056:	40 e0       	ldi	r20, 0x00	; 0
    3058:	50 e0       	ldi	r21, 0x00	; 0
    305a:	60 e0       	ldi	r22, 0x00	; 0
    305c:	70 e0       	ldi	r23, 0x00	; 0
    305e:	0e 94 20 18 	call	0x3040	; 0x3040 <send_cmd>
		if (res > 1) return res;
    3062:	82 30       	cpi	r24, 0x02	; 2
    3064:	08 f0       	brcs	.+2      	; 0x3068 <send_cmd+0x28>
    3066:	51 c0       	rjmp	.+162    	; 0x310a <send_cmd+0xca>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    3068:	8f e7       	ldi	r24, 0x7F	; 127
    306a:	d8 22       	and	r13, r24
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    306c:	28 9a       	sbi	0x05, 0	; 5
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    306e:	8f ef       	ldi	r24, 0xFF	; 255
    3070:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    3072:	0d b4       	in	r0, 0x2d	; 45
    3074:	07 fe       	sbrs	r0, 7
    3076:	fd cf       	rjmp	.-6      	; 0x3072 <send_cmd+0x32>
	return SPDR;
    3078:	8e b5       	in	r24, 0x2e	; 46
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
	if (!select()) return 0xFF;
    307a:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <select>
    307e:	89 2b       	or	r24, r25
    3080:	11 f4       	brne	.+4      	; 0x3086 <send_cmd+0x46>
    3082:	8f ef       	ldi	r24, 0xFF	; 255
    3084:	42 c0       	rjmp	.+132    	; 0x310a <send_cmd+0xca>

	/* Send command packet */
	xmit_spi(cmd);						/* Start + Command index */
    3086:	de bc       	out	0x2e, r13	; 46
    3088:	0d b4       	in	r0, 0x2d	; 45
    308a:	07 fe       	sbrs	r0, 7
    308c:	fd cf       	rjmp	.-6      	; 0x3088 <send_cmd+0x48>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    308e:	81 2f       	mov	r24, r17
    3090:	99 27       	eor	r25, r25
    3092:	aa 27       	eor	r26, r26
    3094:	bb 27       	eor	r27, r27
    3096:	8e bd       	out	0x2e, r24	; 46
    3098:	0d b4       	in	r0, 0x2d	; 45
    309a:	07 fe       	sbrs	r0, 7
    309c:	fd cf       	rjmp	.-6      	; 0x3098 <send_cmd+0x58>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    309e:	c8 01       	movw	r24, r16
    30a0:	aa 27       	eor	r26, r26
    30a2:	bb 27       	eor	r27, r27
    30a4:	8e bd       	out	0x2e, r24	; 46
    30a6:	0d b4       	in	r0, 0x2d	; 45
    30a8:	07 fe       	sbrs	r0, 7
    30aa:	fd cf       	rjmp	.-6      	; 0x30a6 <send_cmd+0x66>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    30ac:	bb 27       	eor	r27, r27
    30ae:	a1 2f       	mov	r26, r17
    30b0:	90 2f       	mov	r25, r16
    30b2:	8f 2d       	mov	r24, r15
    30b4:	8e bd       	out	0x2e, r24	; 46
    30b6:	0d b4       	in	r0, 0x2d	; 45
    30b8:	07 fe       	sbrs	r0, 7
    30ba:	fd cf       	rjmp	.-6      	; 0x30b6 <send_cmd+0x76>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
    30bc:	ee bc       	out	0x2e, r14	; 46
    30be:	0d b4       	in	r0, 0x2d	; 45
    30c0:	07 fe       	sbrs	r0, 7
    30c2:	fd cf       	rjmp	.-6      	; 0x30be <send_cmd+0x7e>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    30c4:	80 e4       	ldi	r24, 0x40	; 64
    30c6:	d8 16       	cp	r13, r24
    30c8:	11 f4       	brne	.+4      	; 0x30ce <send_cmd+0x8e>
    30ca:	85 e9       	ldi	r24, 0x95	; 149
    30cc:	06 c0       	rjmp	.+12     	; 0x30da <send_cmd+0x9a>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    30ce:	88 e4       	ldi	r24, 0x48	; 72
    30d0:	d8 16       	cp	r13, r24
    30d2:	11 f4       	brne	.+4      	; 0x30d8 <send_cmd+0x98>
    30d4:	87 e8       	ldi	r24, 0x87	; 135
    30d6:	01 c0       	rjmp	.+2      	; 0x30da <send_cmd+0x9a>
    30d8:	81 e0       	ldi	r24, 0x01	; 1
	xmit_spi(n);
    30da:	8e bd       	out	0x2e, r24	; 46
    30dc:	0d b4       	in	r0, 0x2d	; 45
    30de:	07 fe       	sbrs	r0, 7
    30e0:	fd cf       	rjmp	.-6      	; 0x30dc <send_cmd+0x9c>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
    30e2:	8c e4       	ldi	r24, 0x4C	; 76
    30e4:	d8 16       	cp	r13, r24
    30e6:	31 f4       	brne	.+12     	; 0x30f4 <send_cmd+0xb4>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    30e8:	8f ef       	ldi	r24, 0xFF	; 255
    30ea:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    30ec:	0d b4       	in	r0, 0x2d	; 45
    30ee:	07 fe       	sbrs	r0, 7
    30f0:	fd cf       	rjmp	.-6      	; 0x30ec <send_cmd+0xac>
	return SPDR;
    30f2:	8e b5       	in	r24, 0x2e	; 46
    30f4:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    30f6:	2f ef       	ldi	r18, 0xFF	; 255
    30f8:	2e bd       	out	0x2e, r18	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    30fa:	0d b4       	in	r0, 0x2d	; 45
    30fc:	07 fe       	sbrs	r0, 7
    30fe:	fd cf       	rjmp	.-6      	; 0x30fa <send_cmd+0xba>
	return SPDR;
    3100:	8e b5       	in	r24, 0x2e	; 46
	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = rcvr_spi();
	while ((res & 0x80) && --n);
    3102:	87 ff       	sbrs	r24, 7
    3104:	02 c0       	rjmp	.+4      	; 0x310a <send_cmd+0xca>
    3106:	91 50       	subi	r25, 0x01	; 1
    3108:	b9 f7       	brne	.-18     	; 0x30f8 <send_cmd+0xb8>

	return res;			/* Return with the response value */
}
    310a:	1f 91       	pop	r17
    310c:	0f 91       	pop	r16
    310e:	ff 90       	pop	r15
    3110:	ef 90       	pop	r14
    3112:	df 90       	pop	r13
    3114:	08 95       	ret

00003116 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
    3116:	a4 e0       	ldi	r26, 0x04	; 4
    3118:	b0 e0       	ldi	r27, 0x00	; 0
    311a:	e1 e9       	ldi	r30, 0x91	; 145
    311c:	f8 e1       	ldi	r31, 0x18	; 24
    311e:	0c 94 ae 2e 	jmp	0x5d5c	; 0x5d5c <__prologue_saves__+0x18>
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
    3122:	88 23       	and	r24, r24
    3124:	11 f0       	breq	.+4      	; 0x312a <disk_initialize+0x14>
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	b5 c0       	rjmp	.+362    	; 0x3294 <disk_initialize+0x17e>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    312a:	80 91 0e 01 	lds	r24, 0x010E
    312e:	81 fd       	sbrc	r24, 1
    3130:	af c0       	rjmp	.+350    	; 0x3290 <disk_initialize+0x17a>
#if (defined SD_PWR_PIN | defined SD_PWR_PORT)
   DDRC|=(1<<SD_PWR_PIN);          // Turns on PWR pin as output
   SD_PWR_PORT|=(1<<SD_PWR_PIN);   // Drives PWR pin high
#endif

   DDRC|=(1<<SD_CS_PIN);          // Turns on CS pin as output
    3132:	38 9a       	sbi	0x07, 0	; 7
   DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)| (1<<DD_SS);
    3134:	87 e0       	ldi	r24, 0x07	; 7
    3136:	84 b9       	out	0x04, r24	; 4
   SPCR = (1<<SPE)|(1<<MSTR); /* Initialize SPI port (Mode 0) */ 
    3138:	80 e5       	ldi	r24, 0x50	; 80
    313a:	8c bd       	out	0x2c, r24	; 44
    313c:	8a e0       	ldi	r24, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    313e:	9f ef       	ldi	r25, 0xFF	; 255
    3140:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    3142:	0d b4       	in	r0, 0x2d	; 45
    3144:	07 fe       	sbrs	r0, 7
    3146:	fd cf       	rjmp	.-6      	; 0x3142 <disk_initialize+0x2c>
	return SPDR;
    3148:	2e b5       	in	r18, 0x2e	; 46
	if (drv) return STA_NOINIT;			/* Supports only single drive */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */

	power_on();							/* Force socket power on */
	FCLK_SLOW();
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
    314a:	81 50       	subi	r24, 0x01	; 1
    314c:	c9 f7       	brne	.-14     	; 0x3140 <disk_initialize+0x2a>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    314e:	80 e4       	ldi	r24, 0x40	; 64
    3150:	40 e0       	ldi	r20, 0x00	; 0
    3152:	50 e0       	ldi	r21, 0x00	; 0
    3154:	60 e0       	ldi	r22, 0x00	; 0
    3156:	70 e0       	ldi	r23, 0x00	; 0
    3158:	0e 94 20 18 	call	0x3040	; 0x3040 <send_cmd>
    315c:	81 30       	cpi	r24, 0x01	; 1
    315e:	09 f0       	breq	.+2      	; 0x3162 <disk_initialize+0x4c>
    3160:	7e c0       	rjmp	.+252    	; 0x325e <disk_initialize+0x148>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    3162:	84 e6       	ldi	r24, 0x64	; 100
    3164:	80 93 2d 03 	sts	0x032D, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
    3168:	88 e4       	ldi	r24, 0x48	; 72
    316a:	4a ea       	ldi	r20, 0xAA	; 170
    316c:	51 e0       	ldi	r21, 0x01	; 1
    316e:	60 e0       	ldi	r22, 0x00	; 0
    3170:	70 e0       	ldi	r23, 0x00	; 0
    3172:	0e 94 20 18 	call	0x3040	; 0x3040 <send_cmd>
    3176:	81 30       	cpi	r24, 0x01	; 1
    3178:	09 f0       	breq	.+2      	; 0x317c <disk_initialize+0x66>
    317a:	4a c0       	rjmp	.+148    	; 0x3210 <disk_initialize+0xfa>
    317c:	7e 01       	movw	r14, r28
    317e:	08 94       	sec
    3180:	e1 1c       	adc	r14, r1
    3182:	f1 1c       	adc	r15, r1
    3184:	87 01       	movw	r16, r14
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    3186:	9f ef       	ldi	r25, 0xFF	; 255

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
    3188:	9e 01       	movw	r18, r28
    318a:	2b 5f       	subi	r18, 0xFB	; 251
    318c:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    318e:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    3190:	0d b4       	in	r0, 0x2d	; 45
    3192:	07 fe       	sbrs	r0, 7
    3194:	fd cf       	rjmp	.-6      	; 0x3190 <disk_initialize+0x7a>
	return SPDR;
    3196:	8e b5       	in	r24, 0x2e	; 46

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
    3198:	f8 01       	movw	r30, r16
    319a:	81 93       	st	Z+, r24
    319c:	8f 01       	movw	r16, r30
    319e:	e2 17       	cp	r30, r18
    31a0:	f3 07       	cpc	r31, r19
    31a2:	a9 f7       	brne	.-22     	; 0x318e <disk_initialize+0x78>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    31a4:	8b 81       	ldd	r24, Y+3	; 0x03
    31a6:	81 30       	cpi	r24, 0x01	; 1
    31a8:	09 f0       	breq	.+2      	; 0x31ac <disk_initialize+0x96>
    31aa:	59 c0       	rjmp	.+178    	; 0x325e <disk_initialize+0x148>
    31ac:	8c 81       	ldd	r24, Y+4	; 0x04
    31ae:	8a 3a       	cpi	r24, 0xAA	; 170
    31b0:	09 f0       	breq	.+2      	; 0x31b4 <disk_initialize+0x9e>
    31b2:	55 c0       	rjmp	.+170    	; 0x325e <disk_initialize+0x148>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    31b4:	80 91 2d 03 	lds	r24, 0x032D
    31b8:	88 23       	and	r24, r24
    31ba:	49 f0       	breq	.+18     	; 0x31ce <disk_initialize+0xb8>
    31bc:	89 ee       	ldi	r24, 0xE9	; 233
    31be:	40 e0       	ldi	r20, 0x00	; 0
    31c0:	50 e0       	ldi	r21, 0x00	; 0
    31c2:	60 e0       	ldi	r22, 0x00	; 0
    31c4:	70 e4       	ldi	r23, 0x40	; 64
    31c6:	0e 94 20 18 	call	0x3040	; 0x3040 <send_cmd>
    31ca:	88 23       	and	r24, r24
    31cc:	99 f7       	brne	.-26     	; 0x31b4 <disk_initialize+0x9e>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    31ce:	80 91 2d 03 	lds	r24, 0x032D
    31d2:	88 23       	and	r24, r24
    31d4:	09 f4       	brne	.+2      	; 0x31d8 <disk_initialize+0xc2>
    31d6:	43 c0       	rjmp	.+134    	; 0x325e <disk_initialize+0x148>
    31d8:	8a e7       	ldi	r24, 0x7A	; 122
    31da:	40 e0       	ldi	r20, 0x00	; 0
    31dc:	50 e0       	ldi	r21, 0x00	; 0
    31de:	60 e0       	ldi	r22, 0x00	; 0
    31e0:	70 e0       	ldi	r23, 0x00	; 0
    31e2:	0e 94 20 18 	call	0x3040	; 0x3040 <send_cmd>
    31e6:	88 23       	and	r24, r24
    31e8:	d1 f5       	brne	.+116    	; 0x325e <disk_initialize+0x148>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    31ea:	9f ef       	ldi	r25, 0xFF	; 255
    31ec:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    31ee:	0d b4       	in	r0, 0x2d	; 45
    31f0:	07 fe       	sbrs	r0, 7
    31f2:	fd cf       	rjmp	.-6      	; 0x31ee <disk_initialize+0xd8>
	return SPDR;
    31f4:	8e b5       	in	r24, 0x2e	; 46
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
    31f6:	f7 01       	movw	r30, r14
    31f8:	81 93       	st	Z+, r24
    31fa:	7f 01       	movw	r14, r30
    31fc:	e0 17       	cp	r30, r16
    31fe:	f1 07       	cpc	r31, r17
    3200:	a9 f7       	brne	.-22     	; 0x31ec <disk_initialize+0xd6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    3202:	89 81       	ldd	r24, Y+1	; 0x01
    3204:	86 fd       	sbrc	r24, 6
    3206:	02 c0       	rjmp	.+4      	; 0x320c <disk_initialize+0xf6>
    3208:	14 e0       	ldi	r17, 0x04	; 4
    320a:	2a c0       	rjmp	.+84     	; 0x3260 <disk_initialize+0x14a>
    320c:	1c e0       	ldi	r17, 0x0C	; 12
    320e:	28 c0       	rjmp	.+80     	; 0x3260 <disk_initialize+0x14a>
				}
			}
		} else {							/* SDSC or MMC */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    3210:	89 ee       	ldi	r24, 0xE9	; 233
    3212:	40 e0       	ldi	r20, 0x00	; 0
    3214:	50 e0       	ldi	r21, 0x00	; 0
    3216:	60 e0       	ldi	r22, 0x00	; 0
    3218:	70 e0       	ldi	r23, 0x00	; 0
    321a:	0e 94 20 18 	call	0x3040	; 0x3040 <send_cmd>
    321e:	82 30       	cpi	r24, 0x02	; 2
    3220:	18 f0       	brcs	.+6      	; 0x3228 <disk_initialize+0x112>
    3222:	01 e4       	ldi	r16, 0x41	; 65
    3224:	11 e0       	ldi	r17, 0x01	; 1
    3226:	02 c0       	rjmp	.+4      	; 0x322c <disk_initialize+0x116>
    3228:	09 ee       	ldi	r16, 0xE9	; 233
    322a:	12 e0       	ldi	r17, 0x02	; 2
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    322c:	80 91 2d 03 	lds	r24, 0x032D
    3230:	88 23       	and	r24, r24
    3232:	49 f0       	breq	.+18     	; 0x3246 <disk_initialize+0x130>
    3234:	80 2f       	mov	r24, r16
    3236:	40 e0       	ldi	r20, 0x00	; 0
    3238:	50 e0       	ldi	r21, 0x00	; 0
    323a:	60 e0       	ldi	r22, 0x00	; 0
    323c:	70 e0       	ldi	r23, 0x00	; 0
    323e:	0e 94 20 18 	call	0x3040	; 0x3040 <send_cmd>
    3242:	88 23       	and	r24, r24
    3244:	99 f7       	brne	.-26     	; 0x322c <disk_initialize+0x116>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    3246:	80 91 2d 03 	lds	r24, 0x032D
    324a:	88 23       	and	r24, r24
    324c:	41 f0       	breq	.+16     	; 0x325e <disk_initialize+0x148>
    324e:	80 e5       	ldi	r24, 0x50	; 80
    3250:	40 e0       	ldi	r20, 0x00	; 0
    3252:	52 e0       	ldi	r21, 0x02	; 2
    3254:	60 e0       	ldi	r22, 0x00	; 0
    3256:	70 e0       	ldi	r23, 0x00	; 0
    3258:	0e 94 20 18 	call	0x3040	; 0x3040 <send_cmd>
    325c:	81 11       	cpse	r24, r1
    325e:	10 e0       	ldi	r17, 0x00	; 0
				ty = 0;
		}
	}
	CardType = ty;
    3260:	10 93 2f 03 	sts	0x032F, r17
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    3264:	28 9a       	sbi	0x05, 0	; 5
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    3266:	8f ef       	ldi	r24, 0xFF	; 255
    3268:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    326a:	0d b4       	in	r0, 0x2d	; 45
    326c:	07 fe       	sbrs	r0, 7
    326e:	fd cf       	rjmp	.-6      	; 0x326a <disk_initialize+0x154>
	return SPDR;
    3270:	8e b5       	in	r24, 0x2e	; 46
		}
	}
	CardType = ty;
	deselect();

	if (ty) {			/* Initialization succeded */
    3272:	11 23       	and	r17, r17
    3274:	21 f0       	breq	.+8      	; 0x327e <disk_initialize+0x168>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    3276:	80 91 0e 01 	lds	r24, 0x010E
    327a:	8e 7f       	andi	r24, 0xFE	; 254
    327c:	07 c0       	rjmp	.+14     	; 0x328c <disk_initialize+0x176>
}

static
void power_off (void)
{
   CS_LOW();            /* Wait for card ready */
    327e:	28 98       	cbi	0x05, 0	; 5
   wait_ready();
    3280:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <wait_ready>
   SPCR = 0;
    3284:	1c bc       	out	0x2c, r1	; 44
   Stat |= STA_NOINIT;      /* Set STA_NOINIT */
    3286:	80 91 0e 01 	lds	r24, 0x010E
    328a:	81 60       	ori	r24, 0x01	; 1
    328c:	80 93 0e 01 	sts	0x010E, r24
		FCLK_FAST();
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
    3290:	80 91 0e 01 	lds	r24, 0x010E
}
    3294:	24 96       	adiw	r28, 0x04	; 4
    3296:	e6 e0       	ldi	r30, 0x06	; 6
    3298:	0c 94 ca 2e 	jmp	0x5d94	; 0x5d94 <__epilogue_restores__+0x18>

0000329c <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    329c:	88 23       	and	r24, r24
    329e:	11 f0       	breq	.+4      	; 0x32a4 <disk_status+0x8>
    32a0:	81 e0       	ldi	r24, 0x01	; 1
    32a2:	08 95       	ret
	return Stat;
    32a4:	80 91 0e 01 	lds	r24, 0x010E
}
    32a8:	08 95       	ret

000032aa <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
    32aa:	0f 93       	push	r16
    32ac:	cf 93       	push	r28
    32ae:	df 93       	push	r29
    32b0:	eb 01       	movw	r28, r22
	if (drv || !count) return RES_PARERR;
    32b2:	88 23       	and	r24, r24
    32b4:	09 f0       	breq	.+2      	; 0x32b8 <disk_read+0xe>
    32b6:	50 c0       	rjmp	.+160    	; 0x3358 <disk_read+0xae>
    32b8:	00 23       	and	r16, r16
    32ba:	09 f4       	brne	.+2      	; 0x32be <disk_read+0x14>
    32bc:	4d c0       	rjmp	.+154    	; 0x3358 <disk_read+0xae>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    32be:	80 91 0e 01 	lds	r24, 0x010E
    32c2:	80 ff       	sbrs	r24, 0
    32c4:	03 c0       	rjmp	.+6      	; 0x32cc <disk_read+0x22>
    32c6:	23 e0       	ldi	r18, 0x03	; 3
    32c8:	30 e0       	ldi	r19, 0x00	; 0
    32ca:	48 c0       	rjmp	.+144    	; 0x335c <disk_read+0xb2>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    32cc:	80 91 2f 03 	lds	r24, 0x032F
    32d0:	83 fd       	sbrc	r24, 3
    32d2:	07 c0       	rjmp	.+14     	; 0x32e2 <disk_read+0x38>
    32d4:	69 e0       	ldi	r22, 0x09	; 9
    32d6:	22 0f       	add	r18, r18
    32d8:	33 1f       	adc	r19, r19
    32da:	44 1f       	adc	r20, r20
    32dc:	55 1f       	adc	r21, r21
    32de:	6a 95       	dec	r22
    32e0:	d1 f7       	brne	.-12     	; 0x32d6 <disk_read+0x2c>

	if (count == 1) {	/* Single block read */
    32e2:	01 30       	cpi	r16, 0x01	; 1
    32e4:	89 f4       	brne	.+34     	; 0x3308 <disk_read+0x5e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
    32e6:	81 e5       	ldi	r24, 0x51	; 81
    32e8:	ba 01       	movw	r22, r20
    32ea:	a9 01       	movw	r20, r18
    32ec:	0e 94 20 18 	call	0x3040	; 0x3040 <send_cmd>
    32f0:	88 23       	and	r24, r24
    32f2:	21 f5       	brne	.+72     	; 0x333c <disk_read+0x92>
    32f4:	ce 01       	movw	r24, r28
    32f6:	60 e0       	ldi	r22, 0x00	; 0
    32f8:	72 e0       	ldi	r23, 0x02	; 2
    32fa:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <rcvr_datablock>
    32fe:	00 e0       	ldi	r16, 0x00	; 0
    3300:	89 2b       	or	r24, r25
    3302:	e1 f4       	brne	.+56     	; 0x333c <disk_read+0x92>
    3304:	01 e0       	ldi	r16, 0x01	; 1
    3306:	1a c0       	rjmp	.+52     	; 0x333c <disk_read+0x92>
			&& rcvr_datablock(buff, 512))
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
    3308:	82 e5       	ldi	r24, 0x52	; 82
    330a:	ba 01       	movw	r22, r20
    330c:	a9 01       	movw	r20, r18
    330e:	0e 94 20 18 	call	0x3040	; 0x3040 <send_cmd>
    3312:	88 23       	and	r24, r24
    3314:	99 f4       	brne	.+38     	; 0x333c <disk_read+0x92>
			do {
				if (!rcvr_datablock(buff, 512)) break;
    3316:	ce 01       	movw	r24, r28
    3318:	60 e0       	ldi	r22, 0x00	; 0
    331a:	72 e0       	ldi	r23, 0x02	; 2
    331c:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <rcvr_datablock>
    3320:	89 2b       	or	r24, r25
    3322:	29 f0       	breq	.+10     	; 0x332e <disk_read+0x84>
				buff += 512;
			} while (--count);
    3324:	01 50       	subi	r16, 0x01	; 1
    3326:	19 f0       	breq	.+6      	; 0x332e <disk_read+0x84>
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
			do {
				if (!rcvr_datablock(buff, 512)) break;
				buff += 512;
    3328:	c0 50       	subi	r28, 0x00	; 0
    332a:	de 4f       	sbci	r29, 0xFE	; 254
    332c:	f4 cf       	rjmp	.-24     	; 0x3316 <disk_read+0x6c>
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
    332e:	8c e4       	ldi	r24, 0x4C	; 76
    3330:	40 e0       	ldi	r20, 0x00	; 0
    3332:	50 e0       	ldi	r21, 0x00	; 0
    3334:	60 e0       	ldi	r22, 0x00	; 0
    3336:	70 e0       	ldi	r23, 0x00	; 0
    3338:	0e 94 20 18 	call	0x3040	; 0x3040 <send_cmd>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    333c:	28 9a       	sbi	0x05, 0	; 5
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    333e:	8f ef       	ldi	r24, 0xFF	; 255
    3340:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    3342:	0d b4       	in	r0, 0x2d	; 45
    3344:	07 fe       	sbrs	r0, 7
    3346:	fd cf       	rjmp	.-6      	; 0x3342 <disk_read+0x98>
	return SPDR;
    3348:	8e b5       	in	r24, 0x2e	; 46
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
    334a:	20 e0       	ldi	r18, 0x00	; 0
    334c:	30 e0       	ldi	r19, 0x00	; 0
    334e:	00 23       	and	r16, r16
    3350:	29 f0       	breq	.+10     	; 0x335c <disk_read+0xb2>
    3352:	21 e0       	ldi	r18, 0x01	; 1
    3354:	30 e0       	ldi	r19, 0x00	; 0
    3356:	02 c0       	rjmp	.+4      	; 0x335c <disk_read+0xb2>
    3358:	24 e0       	ldi	r18, 0x04	; 4
    335a:	30 e0       	ldi	r19, 0x00	; 0
}
    335c:	c9 01       	movw	r24, r18
    335e:	df 91       	pop	r29
    3360:	cf 91       	pop	r28
    3362:	0f 91       	pop	r16
    3364:	08 95       	ret

00003366 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
    3366:	cf 92       	push	r12
    3368:	df 92       	push	r13
    336a:	ef 92       	push	r14
    336c:	ff 92       	push	r15
    336e:	0f 93       	push	r16
    3370:	cf 93       	push	r28
    3372:	df 93       	push	r29
    3374:	eb 01       	movw	r28, r22
    3376:	69 01       	movw	r12, r18
    3378:	7a 01       	movw	r14, r20
	if (drv || !count) return RES_PARERR;
    337a:	88 23       	and	r24, r24
    337c:	09 f0       	breq	.+2      	; 0x3380 <disk_write+0x1a>
    337e:	5f c0       	rjmp	.+190    	; 0x343e <disk_write+0xd8>
    3380:	00 23       	and	r16, r16
    3382:	09 f4       	brne	.+2      	; 0x3386 <disk_write+0x20>
    3384:	5c c0       	rjmp	.+184    	; 0x343e <disk_write+0xd8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    3386:	80 91 0e 01 	lds	r24, 0x010E
    338a:	80 ff       	sbrs	r24, 0
    338c:	03 c0       	rjmp	.+6      	; 0x3394 <disk_write+0x2e>
    338e:	23 e0       	ldi	r18, 0x03	; 3
    3390:	30 e0       	ldi	r19, 0x00	; 0
    3392:	57 c0       	rjmp	.+174    	; 0x3442 <disk_write+0xdc>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    3394:	80 91 0e 01 	lds	r24, 0x010E
    3398:	82 ff       	sbrs	r24, 2
    339a:	03 c0       	rjmp	.+6      	; 0x33a2 <disk_write+0x3c>
    339c:	22 e0       	ldi	r18, 0x02	; 2
    339e:	30 e0       	ldi	r19, 0x00	; 0
    33a0:	50 c0       	rjmp	.+160    	; 0x3442 <disk_write+0xdc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    33a2:	80 91 2f 03 	lds	r24, 0x032F
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	83 fd       	sbrc	r24, 3
    33aa:	07 c0       	rjmp	.+14     	; 0x33ba <disk_write+0x54>
    33ac:	79 e0       	ldi	r23, 0x09	; 9
    33ae:	cc 0c       	add	r12, r12
    33b0:	dd 1c       	adc	r13, r13
    33b2:	ee 1c       	adc	r14, r14
    33b4:	ff 1c       	adc	r15, r15
    33b6:	7a 95       	dec	r23
    33b8:	d1 f7       	brne	.-12     	; 0x33ae <disk_write+0x48>

	if (count == 1) {	/* Single block write */
    33ba:	01 30       	cpi	r16, 0x01	; 1
    33bc:	69 f4       	brne	.+26     	; 0x33d8 <disk_write+0x72>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    33be:	88 e5       	ldi	r24, 0x58	; 88
    33c0:	b7 01       	movw	r22, r14
    33c2:	a6 01       	movw	r20, r12
    33c4:	0e 94 20 18 	call	0x3040	; 0x3040 <send_cmd>
    33c8:	88 23       	and	r24, r24
    33ca:	59 f5       	brne	.+86     	; 0x3422 <disk_write+0xbc>
    33cc:	ce 01       	movw	r24, r28
    33ce:	6e ef       	ldi	r22, 0xFE	; 254
    33d0:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <xmit_datablock>
    33d4:	00 e0       	ldi	r16, 0x00	; 0
    33d6:	22 c0       	rjmp	.+68     	; 0x341c <disk_write+0xb6>
			&& xmit_datablock(buff, 0xFE))
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    33d8:	86 70       	andi	r24, 0x06	; 6
    33da:	90 70       	andi	r25, 0x00	; 0
    33dc:	89 2b       	or	r24, r25
    33de:	39 f0       	breq	.+14     	; 0x33ee <disk_write+0x88>
    33e0:	40 2f       	mov	r20, r16
    33e2:	50 e0       	ldi	r21, 0x00	; 0
    33e4:	60 e0       	ldi	r22, 0x00	; 0
    33e6:	70 e0       	ldi	r23, 0x00	; 0
    33e8:	87 ed       	ldi	r24, 0xD7	; 215
    33ea:	0e 94 20 18 	call	0x3040	; 0x3040 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    33ee:	89 e5       	ldi	r24, 0x59	; 89
    33f0:	b7 01       	movw	r22, r14
    33f2:	a6 01       	movw	r20, r12
    33f4:	0e 94 20 18 	call	0x3040	; 0x3040 <send_cmd>
    33f8:	88 23       	and	r24, r24
    33fa:	99 f4       	brne	.+38     	; 0x3422 <disk_write+0xbc>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    33fc:	ce 01       	movw	r24, r28
    33fe:	6c ef       	ldi	r22, 0xFC	; 252
    3400:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <xmit_datablock>
    3404:	89 2b       	or	r24, r25
    3406:	29 f0       	breq	.+10     	; 0x3412 <disk_write+0xac>
				buff += 512;
			} while (--count);
    3408:	01 50       	subi	r16, 0x01	; 1
    340a:	19 f0       	breq	.+6      	; 0x3412 <disk_write+0xac>
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
    340c:	c0 50       	subi	r28, 0x00	; 0
    340e:	de 4f       	sbci	r29, 0xFE	; 254
    3410:	f5 cf       	rjmp	.-22     	; 0x33fc <disk_write+0x96>
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    3412:	80 e0       	ldi	r24, 0x00	; 0
    3414:	90 e0       	ldi	r25, 0x00	; 0
    3416:	6d ef       	ldi	r22, 0xFD	; 253
    3418:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <xmit_datablock>
    341c:	89 2b       	or	r24, r25
    341e:	09 f4       	brne	.+2      	; 0x3422 <disk_write+0xbc>
    3420:	01 e0       	ldi	r16, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    3422:	28 9a       	sbi	0x05, 0	; 5
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    3424:	8f ef       	ldi	r24, 0xFF	; 255
    3426:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    3428:	0d b4       	in	r0, 0x2d	; 45
    342a:	07 fe       	sbrs	r0, 7
    342c:	fd cf       	rjmp	.-6      	; 0x3428 <disk_write+0xc2>
	return SPDR;
    342e:	8e b5       	in	r24, 0x2e	; 46
				count = 1;
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
    3430:	20 e0       	ldi	r18, 0x00	; 0
    3432:	30 e0       	ldi	r19, 0x00	; 0
    3434:	00 23       	and	r16, r16
    3436:	29 f0       	breq	.+10     	; 0x3442 <disk_write+0xdc>
    3438:	21 e0       	ldi	r18, 0x01	; 1
    343a:	30 e0       	ldi	r19, 0x00	; 0
    343c:	02 c0       	rjmp	.+4      	; 0x3442 <disk_write+0xdc>
    343e:	24 e0       	ldi	r18, 0x04	; 4
    3440:	30 e0       	ldi	r19, 0x00	; 0
}
    3442:	c9 01       	movw	r24, r18
    3444:	df 91       	pop	r29
    3446:	cf 91       	pop	r28
    3448:	0f 91       	pop	r16
    344a:	ff 90       	pop	r15
    344c:	ef 90       	pop	r14
    344e:	df 90       	pop	r13
    3450:	cf 90       	pop	r12
    3452:	08 95       	ret

00003454 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    3454:	a0 e1       	ldi	r26, 0x10	; 16
    3456:	b0 e0       	ldi	r27, 0x00	; 0
    3458:	e0 e3       	ldi	r30, 0x30	; 48
    345a:	fa e1       	ldi	r31, 0x1A	; 26
    345c:	0c 94 af 2e 	jmp	0x5d5e	; 0x5d5e <__prologue_saves__+0x1a>
    3460:	8a 01       	movw	r16, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
    3462:	88 23       	and	r24, r24
    3464:	09 f0       	breq	.+2      	; 0x3468 <disk_ioctl+0x14>
    3466:	8b c1       	rjmp	.+790    	; 0x377e <disk_ioctl+0x32a>

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
    3468:	64 30       	cpi	r22, 0x04	; 4
    346a:	01 f5       	brne	.+64     	; 0x34ac <disk_ioctl+0x58>
		switch (*ptr) {
    346c:	fa 01       	movw	r30, r20
    346e:	80 81       	ld	r24, Z
    3470:	81 30       	cpi	r24, 0x01	; 1
    3472:	81 f0       	breq	.+32     	; 0x3494 <disk_ioctl+0x40>
    3474:	81 30       	cpi	r24, 0x01	; 1
    3476:	20 f0       	brcs	.+8      	; 0x3480 <disk_ioctl+0x2c>
    3478:	82 30       	cpi	r24, 0x02	; 2
    347a:	09 f0       	breq	.+2      	; 0x347e <disk_ioctl+0x2a>
    347c:	80 c1       	rjmp	.+768    	; 0x377e <disk_ioctl+0x32a>
    347e:	10 c0       	rjmp	.+32     	; 0x34a0 <disk_ioctl+0x4c>
}

static
void power_off (void)
{
   CS_LOW();            /* Wait for card ready */
    3480:	28 98       	cbi	0x05, 0	; 5
   wait_ready();
    3482:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <wait_ready>
   SPCR = 0;
    3486:	1c bc       	out	0x2c, r1	; 44
   Stat |= STA_NOINIT;      /* Set STA_NOINIT */
    3488:	80 91 0e 01 	lds	r24, 0x010E
    348c:	81 60       	ori	r24, 0x01	; 1
    348e:	80 93 0e 01 	sts	0x010E, r24
    3492:	09 c0       	rjmp	.+18     	; 0x34a6 <disk_ioctl+0x52>
#if (defined SD_PWR_PIN | defined SD_PWR_PORT)
   DDRC|=(1<<SD_PWR_PIN);          // Turns on PWR pin as output
   SD_PWR_PORT|=(1<<SD_PWR_PIN);   // Drives PWR pin high
#endif

   DDRC|=(1<<SD_CS_PIN);          // Turns on CS pin as output
    3494:	38 9a       	sbi	0x07, 0	; 7
   DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)| (1<<DD_SS);
    3496:	87 e0       	ldi	r24, 0x07	; 7
    3498:	84 b9       	out	0x04, r24	; 4
   SPCR = (1<<SPE)|(1<<MSTR); /* Initialize SPI port (Mode 0) */ 
    349a:	80 e5       	ldi	r24, 0x50	; 80
    349c:	8c bd       	out	0x2c, r24	; 44
    349e:	03 c0       	rjmp	.+6      	; 0x34a6 <disk_ioctl+0x52>
		case 1:		/* Sub control code == 1 (POWER_ON) */
			power_on();				/* Power on */
			res = RES_OK;
			break;
		case 2:		/* Sub control code == 2 (POWER_GET) */
			*(ptr+1) = (BYTE)chk_power();
    34a0:	81 e0       	ldi	r24, 0x01	; 1
    34a2:	fa 01       	movw	r30, r20
    34a4:	81 83       	std	Z+1, r24	; 0x01
    34a6:	20 e0       	ldi	r18, 0x00	; 0
    34a8:	30 e0       	ldi	r19, 0x00	; 0
    34aa:	6b c1       	rjmp	.+726    	; 0x3782 <disk_ioctl+0x32e>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
    34ac:	80 91 0e 01 	lds	r24, 0x010E
    34b0:	80 ff       	sbrs	r24, 0
    34b2:	03 c0       	rjmp	.+6      	; 0x34ba <disk_ioctl+0x66>
    34b4:	23 e0       	ldi	r18, 0x03	; 3
    34b6:	30 e0       	ldi	r19, 0x00	; 0
    34b8:	64 c1       	rjmp	.+712    	; 0x3782 <disk_ioctl+0x32e>

		switch (ctrl) {
    34ba:	e6 2f       	mov	r30, r22
    34bc:	f0 e0       	ldi	r31, 0x00	; 0
    34be:	ef 30       	cpi	r30, 0x0F	; 15
    34c0:	f1 05       	cpc	r31, r1
    34c2:	20 f4       	brcc	.+8      	; 0x34cc <disk_ioctl+0x78>
    34c4:	e6 5b       	subi	r30, 0xB6	; 182
    34c6:	ff 4f       	sbci	r31, 0xFF	; 255
    34c8:	0c 94 d9 2e 	jmp	0x5db2	; 0x5db2 <__tablejump2__>
    34cc:	24 e0       	ldi	r18, 0x04	; 4
    34ce:	30 e0       	ldi	r19, 0x00	; 0
    34d0:	4e c1       	rjmp	.+668    	; 0x376e <disk_ioctl+0x31a>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
    34d2:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <select>
    34d6:	89 2b       	or	r24, r25
    34d8:	09 f4       	brne	.+2      	; 0x34dc <disk_ioctl+0x88>
    34da:	47 c1       	rjmp	.+654    	; 0x376a <disk_ioctl+0x316>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    34dc:	28 9a       	sbi	0x05, 0	; 5
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    34de:	8f ef       	ldi	r24, 0xFF	; 255
    34e0:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    34e2:	0d b4       	in	r0, 0x2d	; 45
    34e4:	07 fe       	sbrs	r0, 7
    34e6:	fd cf       	rjmp	.-6      	; 0x34e2 <disk_ioctl+0x8e>
	return SPDR;
    34e8:	8e b5       	in	r24, 0x2e	; 46
    34ea:	f7 c0       	rjmp	.+494    	; 0x36da <disk_ioctl+0x286>
				deselect();
			}
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    34ec:	89 e4       	ldi	r24, 0x49	; 73
    34ee:	40 e0       	ldi	r20, 0x00	; 0
    34f0:	50 e0       	ldi	r21, 0x00	; 0
    34f2:	60 e0       	ldi	r22, 0x00	; 0
    34f4:	70 e0       	ldi	r23, 0x00	; 0
    34f6:	0e 94 20 18 	call	0x3040	; 0x3040 <send_cmd>
    34fa:	88 23       	and	r24, r24
    34fc:	09 f0       	breq	.+2      	; 0x3500 <disk_ioctl+0xac>
    34fe:	35 c1       	rjmp	.+618    	; 0x376a <disk_ioctl+0x316>
    3500:	ce 01       	movw	r24, r28
    3502:	01 96       	adiw	r24, 0x01	; 1
    3504:	60 e1       	ldi	r22, 0x10	; 16
    3506:	70 e0       	ldi	r23, 0x00	; 0
    3508:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <rcvr_datablock>
    350c:	89 2b       	or	r24, r25
    350e:	09 f4       	brne	.+2      	; 0x3512 <disk_ioctl+0xbe>
    3510:	2c c1       	rjmp	.+600    	; 0x376a <disk_ioctl+0x316>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    3512:	89 81       	ldd	r24, Y+1	; 0x01
    3514:	82 95       	swap	r24
    3516:	86 95       	lsr	r24
    3518:	86 95       	lsr	r24
    351a:	83 70       	andi	r24, 0x03	; 3
    351c:	7a 85       	ldd	r23, Y+10	; 0x0a
    351e:	49 85       	ldd	r20, Y+9	; 0x09
    3520:	81 30       	cpi	r24, 0x01	; 1
    3522:	89 f4       	brne	.+34     	; 0x3546 <disk_ioctl+0xf2>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
    3524:	87 2f       	mov	r24, r23
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	01 96       	adiw	r24, 0x01	; 1
    352a:	34 2f       	mov	r19, r20
    352c:	20 e0       	ldi	r18, 0x00	; 0
    352e:	82 0f       	add	r24, r18
    3530:	93 1f       	adc	r25, r19
    3532:	a0 e0       	ldi	r26, 0x00	; 0
    3534:	b0 e0       	ldi	r27, 0x00	; 0
    3536:	2a e0       	ldi	r18, 0x0A	; 10
    3538:	88 0f       	add	r24, r24
    353a:	99 1f       	adc	r25, r25
    353c:	aa 1f       	adc	r26, r26
    353e:	bb 1f       	adc	r27, r27
    3540:	2a 95       	dec	r18
    3542:	d1 f7       	brne	.-12     	; 0x3538 <disk_ioctl+0xe4>
    3544:	c5 c0       	rjmp	.+394    	; 0x36d0 <disk_ioctl+0x27c>
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
    3546:	42 95       	swap	r20
    3548:	46 95       	lsr	r20
    354a:	46 95       	lsr	r20
    354c:	43 70       	andi	r20, 0x03	; 3
    354e:	28 85       	ldd	r18, Y+8	; 0x08
    3550:	30 e0       	ldi	r19, 0x00	; 0
    3552:	22 0f       	add	r18, r18
    3554:	33 1f       	adc	r19, r19
    3556:	22 0f       	add	r18, r18
    3558:	33 1f       	adc	r19, r19
    355a:	24 0f       	add	r18, r20
    355c:	31 1d       	adc	r19, r1
    355e:	2f 5f       	subi	r18, 0xFF	; 255
    3560:	3f 4f       	sbci	r19, 0xFF	; 255
    3562:	8f 81       	ldd	r24, Y+7	; 0x07
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	83 70       	andi	r24, 0x03	; 3
    3568:	90 70       	andi	r25, 0x00	; 0
    356a:	98 2f       	mov	r25, r24
    356c:	88 27       	eor	r24, r24
    356e:	99 0f       	add	r25, r25
    3570:	99 0f       	add	r25, r25
    3572:	28 0f       	add	r18, r24
    3574:	39 1f       	adc	r19, r25
    3576:	40 e0       	ldi	r20, 0x00	; 0
    3578:	50 e0       	ldi	r21, 0x00	; 0
    357a:	8e 81       	ldd	r24, Y+6	; 0x06
    357c:	8f 70       	andi	r24, 0x0F	; 15
    357e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3580:	66 1f       	adc	r22, r22
    3582:	66 27       	eor	r22, r22
    3584:	66 1f       	adc	r22, r22
    3586:	86 0f       	add	r24, r22
    3588:	8e 5f       	subi	r24, 0xFE	; 254
    358a:	73 70       	andi	r23, 0x03	; 3
    358c:	77 0f       	add	r23, r23
    358e:	87 0f       	add	r24, r23
    3590:	90 e0       	ldi	r25, 0x00	; 0
    3592:	09 97       	sbiw	r24, 0x09	; 9
    3594:	04 c0       	rjmp	.+8      	; 0x359e <disk_ioctl+0x14a>
    3596:	22 0f       	add	r18, r18
    3598:	33 1f       	adc	r19, r19
    359a:	44 1f       	adc	r20, r20
    359c:	55 1f       	adc	r21, r21
    359e:	8a 95       	dec	r24
    35a0:	d2 f7       	brpl	.-12     	; 0x3596 <disk_ioctl+0x142>
    35a2:	f8 01       	movw	r30, r16
    35a4:	20 83       	st	Z, r18
    35a6:	31 83       	std	Z+1, r19	; 0x01
    35a8:	42 83       	std	Z+2, r20	; 0x02
    35aa:	53 83       	std	Z+3, r21	; 0x03
    35ac:	96 c0       	rjmp	.+300    	; 0x36da <disk_ioctl+0x286>
				res = RES_OK;
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
    35ae:	80 e0       	ldi	r24, 0x00	; 0
    35b0:	92 e0       	ldi	r25, 0x02	; 2
    35b2:	fa 01       	movw	r30, r20
    35b4:	91 83       	std	Z+1, r25	; 0x01
    35b6:	80 83       	st	Z, r24
    35b8:	90 c0       	rjmp	.+288    	; 0x36da <disk_ioctl+0x286>
			res = RES_OK;
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
    35ba:	80 91 2f 03 	lds	r24, 0x032F
    35be:	f8 2e       	mov	r15, r24
    35c0:	82 ff       	sbrs	r24, 2
    35c2:	31 c0       	rjmp	.+98     	; 0x3626 <disk_ioctl+0x1d2>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    35c4:	8d ec       	ldi	r24, 0xCD	; 205
    35c6:	40 e0       	ldi	r20, 0x00	; 0
    35c8:	50 e0       	ldi	r21, 0x00	; 0
    35ca:	60 e0       	ldi	r22, 0x00	; 0
    35cc:	70 e0       	ldi	r23, 0x00	; 0
    35ce:	0e 94 20 18 	call	0x3040	; 0x3040 <send_cmd>
    35d2:	88 23       	and	r24, r24
    35d4:	09 f0       	breq	.+2      	; 0x35d8 <disk_ioctl+0x184>
    35d6:	c9 c0       	rjmp	.+402    	; 0x376a <disk_ioctl+0x316>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    35d8:	8f ef       	ldi	r24, 0xFF	; 255
    35da:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    35dc:	0d b4       	in	r0, 0x2d	; 45
    35de:	07 fe       	sbrs	r0, 7
    35e0:	fd cf       	rjmp	.-6      	; 0x35dc <disk_ioctl+0x188>
	return SPDR;
    35e2:	8e b5       	in	r24, 0x2e	; 46

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    35e4:	ce 01       	movw	r24, r28
    35e6:	01 96       	adiw	r24, 0x01	; 1
    35e8:	60 e1       	ldi	r22, 0x10	; 16
    35ea:	70 e0       	ldi	r23, 0x00	; 0
    35ec:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <rcvr_datablock>
    35f0:	89 2b       	or	r24, r25
    35f2:	09 f4       	brne	.+2      	; 0x35f6 <disk_ioctl+0x1a2>
    35f4:	ba c0       	rjmp	.+372    	; 0x376a <disk_ioctl+0x316>
    35f6:	80 e3       	ldi	r24, 0x30	; 48
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    35f8:	9f ef       	ldi	r25, 0xFF	; 255
    35fa:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    35fc:	0d b4       	in	r0, 0x2d	; 45
    35fe:	07 fe       	sbrs	r0, 7
    3600:	fd cf       	rjmp	.-6      	; 0x35fc <disk_ioctl+0x1a8>
	return SPDR;
    3602:	2e b5       	in	r18, 0x2e	; 46
		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
						for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
    3604:	81 50       	subi	r24, 0x01	; 1
    3606:	c9 f7       	brne	.-14     	; 0x35fa <disk_ioctl+0x1a6>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
    3608:	2b 85       	ldd	r18, Y+11	; 0x0b
    360a:	22 95       	swap	r18
    360c:	2f 70       	andi	r18, 0x0F	; 15
    360e:	80 e1       	ldi	r24, 0x10	; 16
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	a0 e0       	ldi	r26, 0x00	; 0
    3614:	b0 e0       	ldi	r27, 0x00	; 0
    3616:	04 c0       	rjmp	.+8      	; 0x3620 <disk_ioctl+0x1cc>
    3618:	88 0f       	add	r24, r24
    361a:	99 1f       	adc	r25, r25
    361c:	aa 1f       	adc	r26, r26
    361e:	bb 1f       	adc	r27, r27
    3620:	2a 95       	dec	r18
    3622:	d2 f7       	brpl	.-12     	; 0x3618 <disk_ioctl+0x1c4>
    3624:	55 c0       	rjmp	.+170    	; 0x36d0 <disk_ioctl+0x27c>
						res = RES_OK;
					}
				}
			} else {					/* SDC ver 1.XX or MMC */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    3626:	89 e4       	ldi	r24, 0x49	; 73
    3628:	40 e0       	ldi	r20, 0x00	; 0
    362a:	50 e0       	ldi	r21, 0x00	; 0
    362c:	60 e0       	ldi	r22, 0x00	; 0
    362e:	70 e0       	ldi	r23, 0x00	; 0
    3630:	0e 94 20 18 	call	0x3040	; 0x3040 <send_cmd>
    3634:	88 23       	and	r24, r24
    3636:	09 f0       	breq	.+2      	; 0x363a <disk_ioctl+0x1e6>
    3638:	98 c0       	rjmp	.+304    	; 0x376a <disk_ioctl+0x316>
    363a:	ce 01       	movw	r24, r28
    363c:	01 96       	adiw	r24, 0x01	; 1
    363e:	60 e1       	ldi	r22, 0x10	; 16
    3640:	70 e0       	ldi	r23, 0x00	; 0
    3642:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <rcvr_datablock>
    3646:	89 2b       	or	r24, r25
    3648:	09 f4       	brne	.+2      	; 0x364c <disk_ioctl+0x1f8>
    364a:	8f c0       	rjmp	.+286    	; 0x376a <disk_ioctl+0x316>
    364c:	4b 85       	ldd	r20, Y+11	; 0x0b
    364e:	8c 85       	ldd	r24, Y+12	; 0x0c
					if (CardType & CT_SD1) {	/* SDC ver 1.XX */
    3650:	f1 fe       	sbrs	r15, 1
    3652:	1b c0       	rjmp	.+54     	; 0x368a <disk_ioctl+0x236>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    3654:	88 1f       	adc	r24, r24
    3656:	88 27       	eor	r24, r24
    3658:	88 1f       	adc	r24, r24
    365a:	90 e0       	ldi	r25, 0x00	; 0
    365c:	01 96       	adiw	r24, 0x01	; 1
    365e:	24 2f       	mov	r18, r20
    3660:	30 e0       	ldi	r19, 0x00	; 0
    3662:	2f 73       	andi	r18, 0x3F	; 63
    3664:	30 70       	andi	r19, 0x00	; 0
    3666:	22 0f       	add	r18, r18
    3668:	33 1f       	adc	r19, r19
    366a:	82 0f       	add	r24, r18
    366c:	93 1f       	adc	r25, r19
    366e:	2e 85       	ldd	r18, Y+14	; 0x0e
    3670:	22 95       	swap	r18
    3672:	26 95       	lsr	r18
    3674:	26 95       	lsr	r18
    3676:	23 70       	andi	r18, 0x03	; 3
    3678:	30 e0       	ldi	r19, 0x00	; 0
    367a:	21 50       	subi	r18, 0x01	; 1
    367c:	30 40       	sbci	r19, 0x00	; 0
    367e:	02 c0       	rjmp	.+4      	; 0x3684 <disk_ioctl+0x230>
    3680:	88 0f       	add	r24, r24
    3682:	99 1f       	adc	r25, r25
    3684:	2a 95       	dec	r18
    3686:	e2 f7       	brpl	.-8      	; 0x3680 <disk_ioctl+0x22c>
    3688:	21 c0       	rjmp	.+66     	; 0x36cc <disk_ioctl+0x278>
					} else {					/* MMC */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    368a:	28 2f       	mov	r18, r24
    368c:	30 e0       	ldi	r19, 0x00	; 0
    368e:	23 70       	andi	r18, 0x03	; 3
    3690:	30 70       	andi	r19, 0x00	; 0
    3692:	f3 e0       	ldi	r31, 0x03	; 3
    3694:	22 0f       	add	r18, r18
    3696:	33 1f       	adc	r19, r19
    3698:	fa 95       	dec	r31
    369a:	e1 f7       	brne	.-8      	; 0x3694 <disk_ioctl+0x240>
    369c:	82 95       	swap	r24
    369e:	86 95       	lsr	r24
    36a0:	87 70       	andi	r24, 0x07	; 7
    36a2:	28 0f       	add	r18, r24
    36a4:	31 1d       	adc	r19, r1
    36a6:	2f 5f       	subi	r18, 0xFF	; 255
    36a8:	3f 4f       	sbci	r19, 0xFF	; 255
    36aa:	84 2f       	mov	r24, r20
    36ac:	90 e0       	ldi	r25, 0x00	; 0
    36ae:	8c 77       	andi	r24, 0x7C	; 124
    36b0:	90 70       	andi	r25, 0x00	; 0
    36b2:	95 95       	asr	r25
    36b4:	87 95       	ror	r24
    36b6:	95 95       	asr	r25
    36b8:	87 95       	ror	r24
    36ba:	01 96       	adiw	r24, 0x01	; 1
    36bc:	ac 01       	movw	r20, r24
    36be:	24 9f       	mul	r18, r20
    36c0:	c0 01       	movw	r24, r0
    36c2:	25 9f       	mul	r18, r21
    36c4:	90 0d       	add	r25, r0
    36c6:	34 9f       	mul	r19, r20
    36c8:	90 0d       	add	r25, r0
    36ca:	11 24       	eor	r1, r1
    36cc:	a0 e0       	ldi	r26, 0x00	; 0
    36ce:	b0 e0       	ldi	r27, 0x00	; 0
    36d0:	f8 01       	movw	r30, r16
    36d2:	80 83       	st	Z, r24
    36d4:	91 83       	std	Z+1, r25	; 0x01
    36d6:	a2 83       	std	Z+2, r26	; 0x02
    36d8:	b3 83       	std	Z+3, r27	; 0x03
    36da:	20 e0       	ldi	r18, 0x00	; 0
    36dc:	30 e0       	ldi	r19, 0x00	; 0
    36de:	47 c0       	rjmp	.+142    	; 0x376e <disk_ioctl+0x31a>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
    36e0:	80 91 2f 03 	lds	r24, 0x032F
    36e4:	fa 01       	movw	r30, r20
    36e6:	80 83       	st	Z, r24
    36e8:	f8 cf       	rjmp	.-16     	; 0x36da <disk_ioctl+0x286>
			res = RES_OK;
			break;

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    36ea:	89 e4       	ldi	r24, 0x49	; 73
    36ec:	01 c0       	rjmp	.+2      	; 0x36f0 <disk_ioctl+0x29c>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    36ee:	8a e4       	ldi	r24, 0x4A	; 74
    36f0:	40 e0       	ldi	r20, 0x00	; 0
    36f2:	50 e0       	ldi	r21, 0x00	; 0
    36f4:	60 e0       	ldi	r22, 0x00	; 0
    36f6:	70 e0       	ldi	r23, 0x00	; 0
    36f8:	0e 94 20 18 	call	0x3040	; 0x3040 <send_cmd>
    36fc:	88 23       	and	r24, r24
    36fe:	a9 f5       	brne	.+106    	; 0x376a <disk_ioctl+0x316>
    3700:	c8 01       	movw	r24, r16
    3702:	60 e1       	ldi	r22, 0x10	; 16
    3704:	70 e0       	ldi	r23, 0x00	; 0
    3706:	2b c0       	rjmp	.+86     	; 0x375e <disk_ioctl+0x30a>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    3708:	8a e7       	ldi	r24, 0x7A	; 122
    370a:	40 e0       	ldi	r20, 0x00	; 0
    370c:	50 e0       	ldi	r21, 0x00	; 0
    370e:	60 e0       	ldi	r22, 0x00	; 0
    3710:	70 e0       	ldi	r23, 0x00	; 0
    3712:	0e 94 20 18 	call	0x3040	; 0x3040 <send_cmd>
    3716:	88 23       	and	r24, r24
    3718:	41 f5       	brne	.+80     	; 0x376a <disk_ioctl+0x316>
    371a:	f8 01       	movw	r30, r16
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    371c:	9f ef       	ldi	r25, 0xFF	; 255
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    371e:	98 01       	movw	r18, r16
    3720:	2d 5f       	subi	r18, 0xFD	; 253
    3722:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    3724:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    3726:	0d b4       	in	r0, 0x2d	; 45
    3728:	07 fe       	sbrs	r0, 7
    372a:	fd cf       	rjmp	.-6      	; 0x3726 <disk_ioctl+0x2d2>
	return SPDR;
    372c:	8e b5       	in	r24, 0x2e	; 46
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
    372e:	80 83       	st	Z, r24
    3730:	e2 17       	cp	r30, r18
    3732:	f3 07       	cpc	r31, r19
    3734:	91 f2       	breq	.-92     	; 0x36da <disk_ioctl+0x286>
    3736:	31 96       	adiw	r30, 0x01	; 1
    3738:	f5 cf       	rjmp	.-22     	; 0x3724 <disk_ioctl+0x2d0>
				res = RES_OK;
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    373a:	8d ec       	ldi	r24, 0xCD	; 205
    373c:	40 e0       	ldi	r20, 0x00	; 0
    373e:	50 e0       	ldi	r21, 0x00	; 0
    3740:	60 e0       	ldi	r22, 0x00	; 0
    3742:	70 e0       	ldi	r23, 0x00	; 0
    3744:	0e 94 20 18 	call	0x3040	; 0x3040 <send_cmd>
    3748:	88 23       	and	r24, r24
    374a:	79 f4       	brne	.+30     	; 0x376a <disk_ioctl+0x316>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    374c:	8f ef       	ldi	r24, 0xFF	; 255
    374e:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    3750:	0d b4       	in	r0, 0x2d	; 45
    3752:	07 fe       	sbrs	r0, 7
    3754:	fd cf       	rjmp	.-6      	; 0x3750 <disk_ioctl+0x2fc>
	return SPDR;
    3756:	8e b5       	in	r24, 0x2e	; 46
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
				rcvr_spi();
				if (rcvr_datablock(ptr, 64))
    3758:	c8 01       	movw	r24, r16
    375a:	60 e4       	ldi	r22, 0x40	; 64
    375c:	70 e0       	ldi	r23, 0x00	; 0
    375e:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <rcvr_datablock>
    3762:	20 e0       	ldi	r18, 0x00	; 0
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	89 2b       	or	r24, r25
    3768:	11 f4       	brne	.+4      	; 0x376e <disk_ioctl+0x31a>
    376a:	21 e0       	ldi	r18, 0x01	; 1
    376c:	30 e0       	ldi	r19, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    376e:	28 9a       	sbi	0x05, 0	; 5
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    3770:	8f ef       	ldi	r24, 0xFF	; 255
    3772:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    3774:	0d b4       	in	r0, 0x2d	; 45
    3776:	07 fe       	sbrs	r0, 7
    3778:	fd cf       	rjmp	.-6      	; 0x3774 <disk_ioctl+0x320>
	return SPDR;
    377a:	8e b5       	in	r24, 0x2e	; 46
    377c:	02 c0       	rjmp	.+4      	; 0x3782 <disk_ioctl+0x32e>
    377e:	24 e0       	ldi	r18, 0x04	; 4
    3780:	30 e0       	ldi	r19, 0x00	; 0

		deselect();
	}

	return res;
}
    3782:	c9 01       	movw	r24, r18
    3784:	60 96       	adiw	r28, 0x10	; 16
    3786:	e5 e0       	ldi	r30, 0x05	; 5
    3788:	0c 94 cb 2e 	jmp	0x5d96	; 0x5d96 <__epilogue_restores__+0x1a>

0000378c <disk_timerproc>:

void disk_timerproc (void)
{
   BYTE n;

   n=Timer1;                  /* 100Hz decrement timer */
    378c:	80 91 2d 03 	lds	r24, 0x032D
   if(n)
    3790:	88 23       	and	r24, r24
    3792:	19 f0       	breq	.+6      	; 0x379a <disk_timerproc+0xe>
      Timer1 = --n;
    3794:	81 50       	subi	r24, 0x01	; 1
    3796:	80 93 2d 03 	sts	0x032D, r24
   n=Timer2;
    379a:	80 91 2e 03 	lds	r24, 0x032E
   if(n)
    379e:	88 23       	and	r24, r24
    37a0:	19 f0       	breq	.+6      	; 0x37a8 <disk_timerproc+0x1c>
      Timer2 = --n; 
    37a2:	81 50       	subi	r24, 0x01	; 1
    37a4:	80 93 2e 03 	sts	0x032E, r24
    37a8:	08 95       	ret

000037aa <RTC_read>:
	char dev,		/* Device address */
	uint8_t adr,		/* Read start address */
	uint8_t cnt,		/* Read byte count */
	uint8_t *buff		/* Read data buffer */
)
{
    37aa:	a0 e0       	ldi	r26, 0x00	; 0
    37ac:	b0 e0       	ldi	r27, 0x00	; 0
    37ae:	eb ed       	ldi	r30, 0xDB	; 219
    37b0:	fb e1       	ldi	r31, 0x1B	; 27
    37b2:	0c 94 ad 2e 	jmp	0x5d5a	; 0x5d5a <__prologue_saves__+0x16>
    37b6:	f8 2e       	mov	r15, r24
    37b8:	06 2f       	mov	r16, r22
    37ba:	14 2f       	mov	r17, r20
    37bc:	e2 2e       	mov	r14, r18
    37be:	d3 2e       	mov	r13, r19
	uint8_t *rbuff = buff;
	uint8_t n;
	BOOL start = FALSE;
	uint8_t data;

	if (!cnt) return FALSE;
    37c0:	44 23       	and	r20, r20
    37c2:	09 f4       	brne	.+2      	; 0x37c6 <RTC_read+0x1c>
    37c4:	45 c0       	rjmp	.+138    	; 0x3850 <RTC_read+0xa6>
	/*
	 * Start in master write mode to transmit read start address to slave
	 */
	if (!(TWI_start())) return FALSE;	/* send start condition */				
    37c6:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <TWI_start>
    37ca:	89 2b       	or	r24, r25
    37cc:	09 f4       	brne	.+2      	; 0x37d0 <RTC_read+0x26>
    37ce:	40 c0       	rjmp	.+128    	; 0x3850 <RTC_read+0xa6>

	TWI_send(dev | TW_WRITE);		/* Select device dev */
    37d0:	8f 2d       	mov	r24, r15
    37d2:	0e 94 70 27 	call	0x4ee0	; 0x4ee0 <TWI_send>
	if (!(TW_STATUS == TW_MT_SLA_ACK)) return FALSE;	/* Device could not be selected */
    37d6:	80 91 b9 00 	lds	r24, 0x00B9
    37da:	88 7f       	andi	r24, 0xF8	; 248
    37dc:	88 31       	cpi	r24, 0x18	; 24
    37de:	c1 f5       	brne	.+112    	; 0x3850 <RTC_read+0xa6>

	/* Send address for reading start position to slave device */	
	TWI_send(adr);
    37e0:	80 2f       	mov	r24, r16
    37e2:	0e 94 70 27 	call	0x4ee0	; 0x4ee0 <TWI_send>
	if (!(TW_STATUS == TW_MT_DATA_ACK)) return FALSE;	/* No ACK from device return */
    37e6:	80 91 b9 00 	lds	r24, 0x00B9
    37ea:	88 7f       	andi	r24, 0xF8	; 248
    37ec:	88 32       	cpi	r24, 0x28	; 40
    37ee:	81 f5       	brne	.+96     	; 0x3850 <RTC_read+0xa6>

	/*
	 * Switch to master read mode to recive data from slave 
	 */	
	if (!(TWI_start())) return FALSE;	/* send start condition */
    37f0:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <TWI_start>
    37f4:	89 2b       	or	r24, r25
    37f6:	61 f1       	breq	.+88     	; 0x3850 <RTC_read+0xa6>

	TWI_send(dev | TW_READ);		/* Select device dev */
    37f8:	8f 2d       	mov	r24, r15
    37fa:	81 60       	ori	r24, 0x01	; 1
    37fc:	0e 94 70 27 	call	0x4ee0	; 0x4ee0 <TWI_send>
	if (!(TW_STATUS == TW_MR_SLA_ACK)) return FALSE;	/* Device could not be selected */
    3800:	80 91 b9 00 	lds	r24, 0x00B9
    3804:	88 7f       	andi	r24, 0xF8	; 248
    3806:	80 34       	cpi	r24, 0x40	; 64
    3808:	19 f5       	brne	.+70     	; 0x3850 <RTC_read+0xa6>
    380a:	8e 2d       	mov	r24, r14
    380c:	9d 2d       	mov	r25, r13
    380e:	9c 01       	movw	r18, r24
    3810:	e9 01       	movw	r28, r18

	/* Device should start sending now and first stop when do not recive a ACK after data transmition */
	do {					/* Receive data */
		cnt--;
    3812:	11 50       	subi	r17, 0x01	; 1
		if (cnt > 0) {
    3814:	61 f0       	breq	.+24     	; 0x382e <RTC_read+0x84>
			data = TWI_rcvr(TRUE);		/* Send ACK after reviced data */
    3816:	81 e0       	ldi	r24, 0x01	; 1
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	0e 94 7a 27 	call	0x4ef4	; 0x4ef4 <TWI_rcvr>
    381e:	98 2f       	mov	r25, r24
			if (!(TW_STATUS == TW_MR_DATA_ACK)) return FALSE; /* Return if an ACK not where send after data recived */
    3820:	80 91 b9 00 	lds	r24, 0x00B9
    3824:	88 7f       	andi	r24, 0xF8	; 248
    3826:	80 35       	cpi	r24, 0x50	; 80
    3828:	99 f4       	brne	.+38     	; 0x3850 <RTC_read+0xa6>
			*rbuff++ = data;
    382a:	99 93       	st	Y+, r25
    382c:	f2 cf       	rjmp	.-28     	; 0x3812 <RTC_read+0x68>
		} else {
			data = TWI_rcvr(FALSE);		/* Send NACK after reviced data */
    382e:	80 e0       	ldi	r24, 0x00	; 0
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	0e 94 7a 27 	call	0x4ef4	; 0x4ef4 <TWI_rcvr>
			if (!(TW_STATUS == TW_MR_DATA_NACK)) return FALSE; /* Return if an NACK not where send after data recived */
    3836:	80 91 b9 00 	lds	r24, 0x00B9
    383a:	88 7f       	andi	r24, 0xF8	; 248
    383c:	88 35       	cpi	r24, 0x58	; 88
    383e:	41 f4       	brne	.+16     	; 0x3850 <RTC_read+0xa6>
			*rbuff++ = TWDR;
    3840:	80 91 bb 00 	lds	r24, 0x00BB
    3844:	88 83       	st	Y, r24
		}
	} while (cnt);
	
	TWI_stop(); /* send stop condition */
    3846:	0e 94 88 27 	call	0x4f10	; 0x4f10 <TWI_stop>
    384a:	21 e0       	ldi	r18, 0x01	; 1
    384c:	30 e0       	ldi	r19, 0x00	; 0
    384e:	02 c0       	rjmp	.+4      	; 0x3854 <RTC_read+0xaa>
	return TRUE;
    3850:	20 e0       	ldi	r18, 0x00	; 0
    3852:	30 e0       	ldi	r19, 0x00	; 0
}
    3854:	c9 01       	movw	r24, r18
    3856:	cd b7       	in	r28, 0x3d	; 61
    3858:	de b7       	in	r29, 0x3e	; 62
    385a:	e7 e0       	ldi	r30, 0x07	; 7
    385c:	0c 94 c9 2e 	jmp	0x5d92	; 0x5d92 <__epilogue_restores__+0x16>

00003860 <rtc_gettime>:

BOOL rtc_gettime (RTC *rtc)
{
    3860:	a7 e0       	ldi	r26, 0x07	; 7
    3862:	b0 e0       	ldi	r27, 0x00	; 0
    3864:	e6 e3       	ldi	r30, 0x36	; 54
    3866:	fc e1       	ldi	r31, 0x1C	; 28
    3868:	0c 94 b0 2e 	jmp	0x5d60	; 0x5d60 <__prologue_saves__+0x1c>
    386c:	8c 01       	movw	r16, r24

	uint8_t buf[7];

	if (!RTC_read(0b11010000, 0x01, 7, buf)) return FALSE;
    386e:	80 ed       	ldi	r24, 0xD0	; 208
    3870:	61 e0       	ldi	r22, 0x01	; 1
    3872:	47 e0       	ldi	r20, 0x07	; 7
    3874:	9e 01       	movw	r18, r28
    3876:	2f 5f       	subi	r18, 0xFF	; 255
    3878:	3f 4f       	sbci	r19, 0xFF	; 255
    387a:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <RTC_read>
    387e:	89 2b       	or	r24, r25
    3880:	19 f4       	brne	.+6      	; 0x3888 <rtc_gettime+0x28>
    3882:	20 e0       	ldi	r18, 0x00	; 0
    3884:	30 e0       	ldi	r19, 0x00	; 0
    3886:	67 c0       	rjmp	.+206    	; 0x3956 <rtc_gettime+0xf6>

	rtc->sec = (buf[0] & 0x0F) + ((buf[0] >> 4) & 7) * 10;
    3888:	49 81       	ldd	r20, Y+1	; 0x01
    388a:	84 2f       	mov	r24, r20
    388c:	82 95       	swap	r24
    388e:	8f 70       	andi	r24, 0x0F	; 15
    3890:	90 e0       	ldi	r25, 0x00	; 0
    3892:	87 70       	andi	r24, 0x07	; 7
    3894:	90 70       	andi	r25, 0x00	; 0
    3896:	9c 01       	movw	r18, r24
    3898:	63 e0       	ldi	r22, 0x03	; 3
    389a:	22 0f       	add	r18, r18
    389c:	33 1f       	adc	r19, r19
    389e:	6a 95       	dec	r22
    38a0:	e1 f7       	brne	.-8      	; 0x389a <rtc_gettime+0x3a>
    38a2:	88 0f       	add	r24, r24
    38a4:	99 1f       	adc	r25, r25
    38a6:	28 0f       	add	r18, r24
    38a8:	39 1f       	adc	r19, r25
    38aa:	4f 70       	andi	r20, 0x0F	; 15
    38ac:	42 0f       	add	r20, r18
    38ae:	f8 01       	movw	r30, r16
    38b0:	47 83       	std	Z+7, r20	; 0x07
	rtc->min = (buf[1] & 0x0F) + (buf[1] >> 4) * 10;
    38b2:	2a 81       	ldd	r18, Y+2	; 0x02
    38b4:	82 2f       	mov	r24, r18
    38b6:	82 95       	swap	r24
    38b8:	8f 70       	andi	r24, 0x0F	; 15
    38ba:	5a e0       	ldi	r21, 0x0A	; 10
    38bc:	85 9f       	mul	r24, r21
    38be:	c0 01       	movw	r24, r0
    38c0:	11 24       	eor	r1, r1
    38c2:	2f 70       	andi	r18, 0x0F	; 15
    38c4:	28 0f       	add	r18, r24
    38c6:	26 83       	std	Z+6, r18	; 0x06
	rtc->hour = (buf[2] & 0x0F) + ((buf[2] >> 4) & 3) * 10;
    38c8:	4b 81       	ldd	r20, Y+3	; 0x03
    38ca:	84 2f       	mov	r24, r20
    38cc:	82 95       	swap	r24
    38ce:	8f 70       	andi	r24, 0x0F	; 15
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	83 70       	andi	r24, 0x03	; 3
    38d4:	90 70       	andi	r25, 0x00	; 0
    38d6:	9c 01       	movw	r18, r24
    38d8:	b3 e0       	ldi	r27, 0x03	; 3
    38da:	22 0f       	add	r18, r18
    38dc:	33 1f       	adc	r19, r19
    38de:	ba 95       	dec	r27
    38e0:	e1 f7       	brne	.-8      	; 0x38da <rtc_gettime+0x7a>
    38e2:	88 0f       	add	r24, r24
    38e4:	99 1f       	adc	r25, r25
    38e6:	28 0f       	add	r18, r24
    38e8:	39 1f       	adc	r19, r25
    38ea:	4f 70       	andi	r20, 0x0F	; 15
    38ec:	42 0f       	add	r20, r18
    38ee:	45 83       	std	Z+5, r20	; 0x05
	rtc->wday = (buf[3] & 0x07);
    38f0:	8c 81       	ldd	r24, Y+4	; 0x04
    38f2:	87 70       	andi	r24, 0x07	; 7
    38f4:	84 83       	std	Z+4, r24	; 0x04
	rtc->mday = (buf[4] & 0x0F) + ((buf[4] >> 4) & 3) * 10;
    38f6:	4d 81       	ldd	r20, Y+5	; 0x05
    38f8:	84 2f       	mov	r24, r20
    38fa:	82 95       	swap	r24
    38fc:	8f 70       	andi	r24, 0x0F	; 15
    38fe:	90 e0       	ldi	r25, 0x00	; 0
    3900:	83 70       	andi	r24, 0x03	; 3
    3902:	90 70       	andi	r25, 0x00	; 0
    3904:	9c 01       	movw	r18, r24
    3906:	73 e0       	ldi	r23, 0x03	; 3
    3908:	22 0f       	add	r18, r18
    390a:	33 1f       	adc	r19, r19
    390c:	7a 95       	dec	r23
    390e:	e1 f7       	brne	.-8      	; 0x3908 <rtc_gettime+0xa8>
    3910:	88 0f       	add	r24, r24
    3912:	99 1f       	adc	r25, r25
    3914:	28 0f       	add	r18, r24
    3916:	39 1f       	adc	r19, r25
    3918:	4f 70       	andi	r20, 0x0F	; 15
    391a:	42 0f       	add	r20, r18
    391c:	43 83       	std	Z+3, r20	; 0x03
	rtc->month = (buf[5] & 0x0F) + (buf[5] >> 4) * 10;
    391e:	2e 81       	ldd	r18, Y+6	; 0x06
    3920:	82 2f       	mov	r24, r18
    3922:	82 95       	swap	r24
    3924:	8f 70       	andi	r24, 0x0F	; 15
    3926:	85 9f       	mul	r24, r21
    3928:	c0 01       	movw	r24, r0
    392a:	11 24       	eor	r1, r1
    392c:	2f 70       	andi	r18, 0x0F	; 15
    392e:	28 0f       	add	r18, r24
    3930:	22 83       	std	Z+2, r18	; 0x02
	rtc->year = 2000 + (buf[6] & 0x0F) + (buf[6] >> 4) * 10;
    3932:	2f 81       	ldd	r18, Y+7	; 0x07
    3934:	82 2f       	mov	r24, r18
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	8f 70       	andi	r24, 0x0F	; 15
    393a:	90 70       	andi	r25, 0x00	; 0
    393c:	80 53       	subi	r24, 0x30	; 48
    393e:	98 4f       	sbci	r25, 0xF8	; 248
    3940:	22 95       	swap	r18
    3942:	2f 70       	andi	r18, 0x0F	; 15
    3944:	25 9f       	mul	r18, r21
    3946:	90 01       	movw	r18, r0
    3948:	11 24       	eor	r1, r1
    394a:	82 0f       	add	r24, r18
    394c:	93 1f       	adc	r25, r19
    394e:	91 83       	std	Z+1, r25	; 0x01
    3950:	80 83       	st	Z, r24
    3952:	21 e0       	ldi	r18, 0x01	; 1
    3954:	30 e0       	ldi	r19, 0x00	; 0
/*   rtc->month = 5;*/
/*   rtc->year = 2006;*/


   return TRUE;
}
    3956:	c9 01       	movw	r24, r18
    3958:	27 96       	adiw	r28, 0x07	; 7
    395a:	e4 e0       	ldi	r30, 0x04	; 4
    395c:	0c 94 cc 2e 	jmp	0x5d98	; 0x5d98 <__epilogue_restores__+0x1c>

00003960 <RTC_write>:
	char dev,		/* Device address */
	uint8_t adr,		/* Write start address */
	uint8_t cnt,		/* Write byte count */
	uint8_t *buff		/* Write data buffer */
)
{
    3960:	a0 e0       	ldi	r26, 0x00	; 0
    3962:	b0 e0       	ldi	r27, 0x00	; 0
    3964:	e6 eb       	ldi	r30, 0xB6	; 182
    3966:	fc e1       	ldi	r31, 0x1C	; 28
    3968:	0c 94 ad 2e 	jmp	0x5d5a	; 0x5d5a <__prologue_saves__+0x16>
    396c:	08 2f       	mov	r16, r24
    396e:	f6 2e       	mov	r15, r22
    3970:	14 2f       	mov	r17, r20
    3972:	e2 2e       	mov	r14, r18
    3974:	d3 2e       	mov	r13, r19
	uint8_t *wbuff = buff;
	
	if (!cnt) return FALSE;	
    3976:	44 23       	and	r20, r20
    3978:	39 f1       	breq	.+78     	; 0x39c8 <RTC_write+0x68>
	/*
	 * Start in master write mode to transmit data to slave 
	 */
	if (!(TWI_start())) return FALSE;	/* send start condition */	
    397a:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <TWI_start>
    397e:	89 2b       	or	r24, r25
    3980:	19 f1       	breq	.+70     	; 0x39c8 <RTC_write+0x68>

	TWI_send(dev | TW_WRITE);		/* Select device dev */
    3982:	80 2f       	mov	r24, r16
    3984:	0e 94 70 27 	call	0x4ee0	; 0x4ee0 <TWI_send>
	if (!(TW_STATUS == TW_MT_SLA_ACK)) return FALSE;	/* Device could not be selected */
    3988:	80 91 b9 00 	lds	r24, 0x00B9
    398c:	88 7f       	andi	r24, 0xF8	; 248
    398e:	88 31       	cpi	r24, 0x18	; 24
    3990:	d9 f4       	brne	.+54     	; 0x39c8 <RTC_write+0x68>

	/* Send address for writing start position to slave device */	
	TWI_send(adr);
    3992:	8f 2d       	mov	r24, r15
    3994:	0e 94 70 27 	call	0x4ee0	; 0x4ee0 <TWI_send>
	if (!(TW_STATUS == TW_MT_DATA_ACK)) return FALSE;	/* No ACK from device return */
    3998:	80 91 b9 00 	lds	r24, 0x00B9
    399c:	88 7f       	andi	r24, 0xF8	; 248
    399e:	88 32       	cpi	r24, 0x28	; 40
    39a0:	99 f4       	brne	.+38     	; 0x39c8 <RTC_write+0x68>
    39a2:	8e 2d       	mov	r24, r14
    39a4:	9d 2d       	mov	r25, r13
    39a6:	9c 01       	movw	r18, r24
    39a8:	e9 01       	movw	r28, r18

	/* send data */
	do {
		TWI_send(*wbuff++);
    39aa:	89 91       	ld	r24, Y+
    39ac:	0e 94 70 27 	call	0x4ee0	; 0x4ee0 <TWI_send>
		if (!(TW_STATUS == TW_MT_DATA_ACK)) return FALSE;	/* No ACK from device return */
    39b0:	80 91 b9 00 	lds	r24, 0x00B9
    39b4:	88 7f       	andi	r24, 0xF8	; 248
    39b6:	88 32       	cpi	r24, 0x28	; 40
    39b8:	39 f4       	brne	.+14     	; 0x39c8 <RTC_write+0x68>
	} while(--cnt);
    39ba:	11 50       	subi	r17, 0x01	; 1
    39bc:	b1 f7       	brne	.-20     	; 0x39aa <RTC_write+0x4a>

	/* send stop */
	TWI_stop();
    39be:	0e 94 88 27 	call	0x4f10	; 0x4f10 <TWI_stop>
    39c2:	21 e0       	ldi	r18, 0x01	; 1
    39c4:	30 e0       	ldi	r19, 0x00	; 0
    39c6:	02 c0       	rjmp	.+4      	; 0x39cc <RTC_write+0x6c>

	return TRUE;
    39c8:	20 e0       	ldi	r18, 0x00	; 0
    39ca:	30 e0       	ldi	r19, 0x00	; 0
}
    39cc:	c9 01       	movw	r24, r18
    39ce:	cd b7       	in	r28, 0x3d	; 61
    39d0:	de b7       	in	r29, 0x3e	; 62
    39d2:	e7 e0       	ldi	r30, 0x07	; 7
    39d4:	0c 94 c9 2e 	jmp	0x5d92	; 0x5d92 <__epilogue_restores__+0x16>

000039d8 <rtc_settime>:

   return TRUE;
}

BOOL rtc_settime (const RTC *rtc)
{
    39d8:	a7 e0       	ldi	r26, 0x07	; 7
    39da:	b0 e0       	ldi	r27, 0x00	; 0
    39dc:	e2 ef       	ldi	r30, 0xF2	; 242
    39de:	fc e1       	ldi	r31, 0x1C	; 28
    39e0:	0c 94 b2 2e 	jmp	0x5d64	; 0x5d64 <__prologue_saves__+0x20>
    39e4:	fc 01       	movw	r30, r24
	uint8_t buf[7];

	buf[0] = ((rtc->sec / 10) * 16 + rtc->sec % 10) & 0x7F;
    39e6:	47 81       	ldd	r20, Z+7	; 0x07
    39e8:	84 2f       	mov	r24, r20
    39ea:	6a e0       	ldi	r22, 0x0A	; 10
    39ec:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <__udivmodqi4>
    39f0:	28 2f       	mov	r18, r24
    39f2:	30 e0       	ldi	r19, 0x00	; 0
    39f4:	54 e0       	ldi	r21, 0x04	; 4
    39f6:	22 0f       	add	r18, r18
    39f8:	33 1f       	adc	r19, r19
    39fa:	5a 95       	dec	r21
    39fc:	e1 f7       	brne	.-8      	; 0x39f6 <rtc_settime+0x1e>
    39fe:	84 2f       	mov	r24, r20
    3a00:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <__udivmodqi4>
    3a04:	92 0f       	add	r25, r18
    3a06:	9f 77       	andi	r25, 0x7F	; 127
    3a08:	99 83       	std	Y+1, r25	; 0x01
	buf[1] = ((rtc->min / 10) * 16 + rtc->min % 10) & 0xF7;
    3a0a:	46 81       	ldd	r20, Z+6	; 0x06
    3a0c:	84 2f       	mov	r24, r20
    3a0e:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <__udivmodqi4>
    3a12:	28 2f       	mov	r18, r24
    3a14:	30 e0       	ldi	r19, 0x00	; 0
    3a16:	94 e0       	ldi	r25, 0x04	; 4
    3a18:	22 0f       	add	r18, r18
    3a1a:	33 1f       	adc	r19, r19
    3a1c:	9a 95       	dec	r25
    3a1e:	e1 f7       	brne	.-8      	; 0x3a18 <rtc_settime+0x40>
    3a20:	84 2f       	mov	r24, r20
    3a22:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <__udivmodqi4>
    3a26:	92 0f       	add	r25, r18
    3a28:	97 7f       	andi	r25, 0xF7	; 247
    3a2a:	9a 83       	std	Y+2, r25	; 0x02
	buf[2] = ((rtc->hour / 10) * 16 + rtc->hour % 10) & 0x3F;
    3a2c:	45 81       	ldd	r20, Z+5	; 0x05
    3a2e:	84 2f       	mov	r24, r20
    3a30:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <__udivmodqi4>
    3a34:	28 2f       	mov	r18, r24
    3a36:	30 e0       	ldi	r19, 0x00	; 0
    3a38:	84 e0       	ldi	r24, 0x04	; 4
    3a3a:	22 0f       	add	r18, r18
    3a3c:	33 1f       	adc	r19, r19
    3a3e:	8a 95       	dec	r24
    3a40:	e1 f7       	brne	.-8      	; 0x3a3a <rtc_settime+0x62>
    3a42:	84 2f       	mov	r24, r20
    3a44:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <__udivmodqi4>
    3a48:	92 0f       	add	r25, r18
    3a4a:	9f 73       	andi	r25, 0x3F	; 63
    3a4c:	9b 83       	std	Y+3, r25	; 0x03
	buf[3] = rtc->wday & 7;
    3a4e:	84 81       	ldd	r24, Z+4	; 0x04
    3a50:	87 70       	andi	r24, 0x07	; 7
    3a52:	8c 83       	std	Y+4, r24	; 0x04
	buf[4] = ((rtc->mday / 10) * 16 + rtc->mday % 10) & 0x3F;
    3a54:	43 81       	ldd	r20, Z+3	; 0x03
    3a56:	84 2f       	mov	r24, r20
    3a58:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <__udivmodqi4>
    3a5c:	28 2f       	mov	r18, r24
    3a5e:	30 e0       	ldi	r19, 0x00	; 0
    3a60:	b4 e0       	ldi	r27, 0x04	; 4
    3a62:	22 0f       	add	r18, r18
    3a64:	33 1f       	adc	r19, r19
    3a66:	ba 95       	dec	r27
    3a68:	e1 f7       	brne	.-8      	; 0x3a62 <rtc_settime+0x8a>
    3a6a:	84 2f       	mov	r24, r20
    3a6c:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <__udivmodqi4>
    3a70:	92 0f       	add	r25, r18
    3a72:	9f 73       	andi	r25, 0x3F	; 63
    3a74:	9d 83       	std	Y+5, r25	; 0x05
	buf[5] = ((rtc->month / 10) * 16 + rtc->month % 10) & 0x1F;
    3a76:	42 81       	ldd	r20, Z+2	; 0x02
    3a78:	84 2f       	mov	r24, r20
    3a7a:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <__udivmodqi4>
    3a7e:	28 2f       	mov	r18, r24
    3a80:	30 e0       	ldi	r19, 0x00	; 0
    3a82:	a4 e0       	ldi	r26, 0x04	; 4
    3a84:	22 0f       	add	r18, r18
    3a86:	33 1f       	adc	r19, r19
    3a88:	aa 95       	dec	r26
    3a8a:	e1 f7       	brne	.-8      	; 0x3a84 <rtc_settime+0xac>
    3a8c:	84 2f       	mov	r24, r20
    3a8e:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <__udivmodqi4>
    3a92:	92 0f       	add	r25, r18
    3a94:	9f 71       	andi	r25, 0x1F	; 31
    3a96:	9e 83       	std	Y+6, r25	; 0x06
	buf[6] = ((rtc->year - 2000) / 10) * 16 + (rtc->year - 2000) % 10;
    3a98:	01 90       	ld	r0, Z+
    3a9a:	f0 81       	ld	r31, Z
    3a9c:	e0 2d       	mov	r30, r0
    3a9e:	e0 5d       	subi	r30, 0xD0	; 208
    3aa0:	f7 40       	sbci	r31, 0x07	; 7
    3aa2:	cf 01       	movw	r24, r30
    3aa4:	6a e0       	ldi	r22, 0x0A	; 10
    3aa6:	70 e0       	ldi	r23, 0x00	; 0
    3aa8:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__udivmodhi4>
    3aac:	9b 01       	movw	r18, r22
    3aae:	74 e0       	ldi	r23, 0x04	; 4
    3ab0:	22 0f       	add	r18, r18
    3ab2:	33 1f       	adc	r19, r19
    3ab4:	7a 95       	dec	r23
    3ab6:	e1 f7       	brne	.-8      	; 0x3ab0 <rtc_settime+0xd8>
    3ab8:	cf 01       	movw	r24, r30
    3aba:	6a e0       	ldi	r22, 0x0A	; 10
    3abc:	70 e0       	ldi	r23, 0x00	; 0
    3abe:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__udivmodhi4>
    3ac2:	82 0f       	add	r24, r18
    3ac4:	8f 83       	std	Y+7, r24	; 0x07

	return RTC_write(0b11010000, 0x01, 7, buf);
    3ac6:	80 ed       	ldi	r24, 0xD0	; 208
    3ac8:	61 e0       	ldi	r22, 0x01	; 1
    3aca:	47 e0       	ldi	r20, 0x07	; 7
    3acc:	9e 01       	movw	r18, r28
    3ace:	2f 5f       	subi	r18, 0xFF	; 255
    3ad0:	3f 4f       	sbci	r19, 0xFF	; 255
    3ad2:	0e 94 b0 1c 	call	0x3960	; 0x3960 <RTC_write>
}
    3ad6:	27 96       	adiw	r28, 0x07	; 7
    3ad8:	e2 e0       	ldi	r30, 0x02	; 2
    3ada:	0c 94 ce 2e 	jmp	0x5d9c	; 0x5d9c <__epilogue_restores__+0x20>

00003ade <rtc_clearHaltBit>:
#include <string.h>
#include "rtc.h"
#include "../twi/twi.h"

BOOL rtc_clearHaltBit(void)
{
    3ade:	a1 e0       	ldi	r26, 0x01	; 1
    3ae0:	b0 e0       	ldi	r27, 0x00	; 0
    3ae2:	e5 e7       	ldi	r30, 0x75	; 117
    3ae4:	fd e1       	ldi	r31, 0x1D	; 29
    3ae6:	0c 94 b2 2e 	jmp	0x5d64	; 0x5d64 <__prologue_saves__+0x20>
	uint8_t buf[1];
	buf[0] = 63;
    3aea:	8f e3       	ldi	r24, 0x3F	; 63
    3aec:	89 83       	std	Y+1, r24	; 0x01
	return RTC_write(0b11010000, 0x0C, 1, buf);
    3aee:	80 ed       	ldi	r24, 0xD0	; 208
    3af0:	6c e0       	ldi	r22, 0x0C	; 12
    3af2:	41 e0       	ldi	r20, 0x01	; 1
    3af4:	9e 01       	movw	r18, r28
    3af6:	2f 5f       	subi	r18, 0xFF	; 255
    3af8:	3f 4f       	sbci	r19, 0xFF	; 255
    3afa:	0e 94 b0 1c 	call	0x3960	; 0x3960 <RTC_write>
}
    3afe:	21 96       	adiw	r28, 0x01	; 1
    3b00:	e2 e0       	ldi	r30, 0x02	; 2
    3b02:	0c 94 ce 2e 	jmp	0x5d9c	; 0x5d9c <__epilogue_restores__+0x20>

00003b06 <rtc_init>:
}

BOOL rtc_init (void)
{
	/* This function should also test the RTC to ensure a valid clock is returned but this is work for the future */
	rtc_clearHaltBit();	/* Before this is cleared time read from RTC is time of last system power down */
    3b06:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <rtc_clearHaltBit>

	return TRUE;
} 
    3b0a:	81 e0       	ldi	r24, 0x01	; 1
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    3b0e:	08 95       	ret

00003b10 <can_clear_all_mob>:
//! @param none
//!
//! @return none
//------------------------------------------------------------------------------
void can_clear_all_mob(void)
{
    3b10:	90 e0       	ldi	r25, 0x00	; 0
    U8  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        CANPAGE = (mob_number << 4);    //! Page index
    3b12:	89 2f       	mov	r24, r25
    3b14:	82 95       	swap	r24
    3b16:	80 7f       	andi	r24, 0xF0	; 240
    3b18:	80 93 ed 00 	sts	0x00ED, r24
    3b1c:	ee ee       	ldi	r30, 0xEE	; 238
    3b1e:	f0 e0       	ldi	r31, 0x00	; 0
        Can_clear_mob();                //! All MOb Registers=0
    3b20:	11 92       	st	Z+, r1
    3b22:	e8 3f       	cpi	r30, 0xF8	; 248
    3b24:	f1 05       	cpc	r31, r1
    3b26:	e1 f7       	brne	.-8      	; 0x3b20 <can_clear_all_mob+0x10>
U8  mob_number;
/*
    U8  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    3b28:	9f 5f       	subi	r25, 0xFF	; 255
    3b2a:	9f 30       	cpi	r25, 0x0F	; 15
    3b2c:	91 f7       	brne	.-28     	; 0x3b12 <can_clear_all_mob+0x2>
        {
            CANMSG = 0;                 //! MOb data FIFO
        }
*/
    }
}
    3b2e:	08 95       	ret

00003b30 <can_get_mob_free>:
//------------------------------------------------------------------------------
U8 can_get_mob_free(void)
{
    U8 mob_number, page_saved;

    page_saved = CANPAGE;
    3b30:	20 91 ed 00 	lds	r18, 0x00ED
    3b34:	90 e0       	ldi	r25, 0x00	; 0
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        Can_set_mob(mob_number);
    3b36:	89 2f       	mov	r24, r25
    3b38:	82 95       	swap	r24
    3b3a:	80 7f       	andi	r24, 0xF0	; 240
    3b3c:	80 93 ed 00 	sts	0x00ED, r24
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
    3b40:	80 91 ef 00 	lds	r24, 0x00EF
    3b44:	80 7c       	andi	r24, 0xC0	; 192
    3b46:	19 f4       	brne	.+6      	; 0x3b4e <can_get_mob_free+0x1e>
        {
            CANPAGE = page_saved;
    3b48:	20 93 ed 00 	sts	0x00ED, r18
    3b4c:	06 c0       	rjmp	.+12     	; 0x3b5a <can_get_mob_free+0x2a>
U8 can_get_mob_free(void)
{
    U8 mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    3b4e:	9f 5f       	subi	r25, 0xFF	; 255
    3b50:	9f 30       	cpi	r25, 0x0F	; 15
    3b52:	89 f7       	brne	.-30     	; 0x3b36 <can_get_mob_free+0x6>
        {
            CANPAGE = page_saved;
            return (mob_number);
        }
    }
    CANPAGE = page_saved;
    3b54:	20 93 ed 00 	sts	0x00ED, r18
    3b58:	9f ef       	ldi	r25, 0xFF	; 255
    return (NO_MOB);
}
    3b5a:	89 2f       	mov	r24, r25
    3b5c:	08 95       	ret

00003b5e <can_get_mob_status>:
U8 can_get_mob_status(void)
{
    U8 mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
    3b5e:	80 91 ef 00 	lds	r24, 0x00EF
    3b62:	80 7c       	andi	r24, 0xC0	; 192
    3b64:	11 f4       	brne	.+4      	; 0x3b6a <can_get_mob_status+0xc>
    3b66:	8f ef       	ldi	r24, 0xFF	; 255
    3b68:	08 95       	ret

    canstmob_copy = CANSTMOB; // Copy for test integrity
    3b6a:	90 91 ee 00 	lds	r25, 0x00EE

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
    3b6e:	89 2f       	mov	r24, r25
    3b70:	80 7e       	andi	r24, 0xE0	; 224
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
    3b72:	80 32       	cpi	r24, 0x20	; 32
    3b74:	31 f0       	breq	.+12     	; 0x3b82 <can_get_mob_status+0x24>
    3b76:	80 34       	cpi	r24, 0x40	; 64
    3b78:	21 f0       	breq	.+8      	; 0x3b82 <can_get_mob_status+0x24>
    3b7a:	80 3a       	cpi	r24, 0xA0	; 160
    3b7c:	11 f0       	breq	.+4      	; 0x3b82 <can_get_mob_status+0x24>
    // - MOb Status bit_0 = MOB_ACK_ERROR
    // - MOb Status bit_1 = MOB_FORM_ERROR
    // - MOb Status bit_2 = MOB_CRC_ERROR
    // - MOb Status bit_3 = MOB_STUFF_ERROR
    // - MOb Status bit_4 = MOB_BIT_ERROR
    mob_status = canstmob_copy & ERR_MOB_MSK;
    3b7e:	89 2f       	mov	r24, r25
    3b80:	8f 71       	andi	r24, 0x1F	; 31
    if (mob_status != 0) { return(mob_status); }

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
}
    3b82:	08 95       	ret

00003b84 <can_get_data>:
//! @param CAN message data address.
//!
//! @return none.
//------------------------------------------------------------------------------
void can_get_data(U8* p_can_message_data)
{
    3b84:	ac 01       	movw	r20, r24
    3b86:	20 e0       	ldi	r18, 0x00	; 0
    3b88:	06 c0       	rjmp	.+12     	; 0x3b96 <can_get_data+0x12>
    U8 data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
    {
        *(p_can_message_data + data_index) = CANMSG;
    3b8a:	80 91 fa 00 	lds	r24, 0x00FA
    3b8e:	e4 0f       	add	r30, r20
    3b90:	f5 1f       	adc	r31, r21
    3b92:	80 83       	st	Z, r24
//------------------------------------------------------------------------------
void can_get_data(U8* p_can_message_data)
{
    U8 data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
    3b94:	2f 5f       	subi	r18, 0xFF	; 255
    3b96:	80 91 ef 00 	lds	r24, 0x00EF
    3b9a:	e2 2f       	mov	r30, r18
    3b9c:	f0 e0       	ldi	r31, 0x00	; 0
    3b9e:	90 e0       	ldi	r25, 0x00	; 0
    3ba0:	8f 70       	andi	r24, 0x0F	; 15
    3ba2:	90 70       	andi	r25, 0x00	; 0
    3ba4:	e8 17       	cp	r30, r24
    3ba6:	f9 07       	cpc	r31, r25
    3ba8:	84 f3       	brlt	.-32     	; 0x3b8a <can_get_data+0x6>
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
    3baa:	08 95       	ret

00003bac <can_auto_baudrate>:
//! @return Baudrate Status
//!         ==0: research of bit timing configuration failed
//!         ==1: baudrate performed
//------------------------------------------------------------------------------
U8 can_auto_baudrate (U8 mode)
{
    3bac:	9f 92       	push	r9
    3bae:	af 92       	push	r10
    3bb0:	bf 92       	push	r11
    3bb2:	cf 92       	push	r12
    3bb4:	df 92       	push	r13
    3bb6:	ef 92       	push	r14
    3bb8:	ff 92       	push	r15
    3bba:	0f 93       	push	r16
    3bbc:	1f 93       	push	r17
    conf_index = 0;
    bt_not_found = 1;

    //! --- Init segment variables with MIN values if mode=0
    //!     or init segment variables with CANBTx if mode=1
    if (mode==0)
    3bbe:	88 23       	and	r24, r24
    3bc0:	61 f4       	brne	.+24     	; 0x3bda <can_auto_baudrate+0x2e>
    3bc2:	dd 24       	eor	r13, r13
    3bc4:	d3 94       	inc	r13
    3bc6:	b3 e0       	ldi	r27, 0x03	; 3
    3bc8:	a8 e0       	ldi	r26, 0x08	; 8
    3bca:	62 e0       	ldi	r22, 0x02	; 2
    3bcc:	72 e0       	ldi	r23, 0x02	; 2
    3bce:	50 e0       	ldi	r21, 0x00	; 0
    3bd0:	11 e0       	ldi	r17, 0x01	; 1
    3bd2:	40 e0       	ldi	r20, 0x00	; 0
    3bd4:	ff 24       	eor	r15, r15
    3bd6:	f3 94       	inc	r15
    3bd8:	54 c0       	rjmp	.+168    	; 0x3c82 <can_auto_baudrate+0xd6>
        try_conf = 1;       //! Try this configuration
        wait_for_rx = 1;    //! Enable "while (wait_for_rx ..." loop
    }
    else //! mode = 1
    {
        brp  = Max ((((CANBT1 &  BRP_MSK) >> 1) +1) , BRP_MIN );
    3bda:	80 91 e2 00 	lds	r24, 0x00E2
    3bde:	8e 77       	andi	r24, 0x7E	; 126
    3be0:	19 f4       	brne	.+6      	; 0x3be8 <can_auto_baudrate+0x3c>
    3be2:	dd 24       	eor	r13, r13
    3be4:	d3 94       	inc	r13
    3be6:	09 c0       	rjmp	.+18     	; 0x3bfa <can_auto_baudrate+0x4e>
    3be8:	80 91 e2 00 	lds	r24, 0x00E2
    3bec:	90 e0       	ldi	r25, 0x00	; 0
    3bee:	8e 77       	andi	r24, 0x7E	; 126
    3bf0:	90 70       	andi	r25, 0x00	; 0
    3bf2:	95 95       	asr	r25
    3bf4:	87 95       	ror	r24
    3bf6:	d8 2e       	mov	r13, r24
    3bf8:	d3 94       	inc	r13
        prs  = Max ((((CANBT2 &  PRS_MSK) >> 1) +1) , PRS_MIN );
    3bfa:	80 91 e3 00 	lds	r24, 0x00E3
    3bfe:	8e 70       	andi	r24, 0x0E	; 14
    3c00:	11 f4       	brne	.+4      	; 0x3c06 <can_auto_baudrate+0x5a>
    3c02:	b1 e0       	ldi	r27, 0x01	; 1
    3c04:	09 c0       	rjmp	.+18     	; 0x3c18 <can_auto_baudrate+0x6c>
    3c06:	80 91 e3 00 	lds	r24, 0x00E3
    3c0a:	90 e0       	ldi	r25, 0x00	; 0
    3c0c:	8e 70       	andi	r24, 0x0E	; 14
    3c0e:	90 70       	andi	r25, 0x00	; 0
    3c10:	95 95       	asr	r25
    3c12:	87 95       	ror	r24
    3c14:	b8 2f       	mov	r27, r24
    3c16:	bf 5f       	subi	r27, 0xFF	; 255
        phs1 = Max ((((CANBT3 & PHS1_MSK) >> 1) +1) , PHS1_MIN);
    3c18:	80 91 e4 00 	lds	r24, 0x00E4
    3c1c:	8e 70       	andi	r24, 0x0E	; 14
    3c1e:	83 30       	cpi	r24, 0x03	; 3
    3c20:	10 f4       	brcc	.+4      	; 0x3c26 <can_auto_baudrate+0x7a>
    3c22:	62 e0       	ldi	r22, 0x02	; 2
    3c24:	09 c0       	rjmp	.+18     	; 0x3c38 <can_auto_baudrate+0x8c>
    3c26:	80 91 e4 00 	lds	r24, 0x00E4
    3c2a:	90 e0       	ldi	r25, 0x00	; 0
    3c2c:	8e 70       	andi	r24, 0x0E	; 14
    3c2e:	90 70       	andi	r25, 0x00	; 0
    3c30:	95 95       	asr	r25
    3c32:	87 95       	ror	r24
    3c34:	68 2f       	mov	r22, r24
    3c36:	6f 5f       	subi	r22, 0xFF	; 255
        phs2 = Max ((((CANBT3 & PHS2_MSK) >> 4) +1) , PHS2_MIN);
    3c38:	80 91 e4 00 	lds	r24, 0x00E4
    3c3c:	80 77       	andi	r24, 0x70	; 112
    3c3e:	81 31       	cpi	r24, 0x11	; 17
    3c40:	10 f4       	brcc	.+4      	; 0x3c46 <can_auto_baudrate+0x9a>
    3c42:	72 e0       	ldi	r23, 0x02	; 2
    3c44:	0c c0       	rjmp	.+24     	; 0x3c5e <can_auto_baudrate+0xb2>
    3c46:	80 91 e4 00 	lds	r24, 0x00E4
    3c4a:	90 e0       	ldi	r25, 0x00	; 0
    3c4c:	80 77       	andi	r24, 0x70	; 112
    3c4e:	90 70       	andi	r25, 0x00	; 0
    3c50:	24 e0       	ldi	r18, 0x04	; 4
    3c52:	95 95       	asr	r25
    3c54:	87 95       	ror	r24
    3c56:	2a 95       	dec	r18
    3c58:	e1 f7       	brne	.-8      	; 0x3c52 <can_auto_baudrate+0xa6>
    3c5a:	78 2f       	mov	r23, r24
    3c5c:	7f 5f       	subi	r23, 0xFF	; 255
        ntq  = Max ((prs + phs1 + phs2 + 1) , NTQ_MIN);
    3c5e:	8b 2f       	mov	r24, r27
    3c60:	90 e0       	ldi	r25, 0x00	; 0
    3c62:	86 0f       	add	r24, r22
    3c64:	91 1d       	adc	r25, r1
    3c66:	87 0f       	add	r24, r23
    3c68:	91 1d       	adc	r25, r1
    3c6a:	08 97       	sbiw	r24, 0x08	; 8
    3c6c:	14 f4       	brge	.+4      	; 0x3c72 <can_auto_baudrate+0xc6>
    3c6e:	a8 e0       	ldi	r26, 0x08	; 8
    3c70:	04 c0       	rjmp	.+8      	; 0x3c7a <can_auto_baudrate+0xce>
    3c72:	ab 2f       	mov	r26, r27
    3c74:	af 5f       	subi	r26, 0xFF	; 255
    3c76:	a6 0f       	add	r26, r22
    3c78:	a7 0f       	add	r26, r23
    3c7a:	51 e0       	ldi	r21, 0x01	; 1
    3c7c:	10 e0       	ldi	r17, 0x00	; 0
    3c7e:	41 e0       	ldi	r20, 0x01	; 1
    3c80:	ff 24       	eor	r15, r15
    3c82:	90 e0       	ldi	r25, 0x00	; 0
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
    {
        Can_set_mob(u8_temp0);  //! Page index
    3c84:	89 2f       	mov	r24, r25
    3c86:	82 95       	swap	r24
    3c88:	80 7f       	andi	r24, 0xF0	; 240
    3c8a:	80 93 ed 00 	sts	0x00ED, r24
    3c8e:	ee ee       	ldi	r30, 0xEE	; 238
    3c90:	f0 e0       	ldi	r31, 0x00	; 0
        Can_clear_mob();        //! All MOb Registers = 0x00
    3c92:	11 92       	st	Z+, r1
    3c94:	e8 3f       	cpi	r30, 0xF8	; 248
    3c96:	f1 05       	cpc	r31, r1
    3c98:	e1 f7       	brne	.-8      	; 0x3c92 <can_auto_baudrate+0xe6>
        try_conf = 0;       //! Look for the next configuration
        wait_for_rx = 0;    //! Skip "while (wait_for_rx ..." loop
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
    3c9a:	9f 5f       	subi	r25, 0xFF	; 255
    3c9c:	9f 30       	cpi	r25, 0x0F	; 15
    3c9e:	91 f7       	brne	.-28     	; 0x3c84 <can_auto_baudrate+0xd8>
    3ca0:	ee 24       	eor	r14, r14
    3ca2:	e0 e0       	ldi	r30, 0x00	; 0
    3ca4:	f0 e0       	ldi	r31, 0x00	; 0
    3ca6:	cc 24       	eor	r12, r12
            CANTCON = (U8)(conf_index >> 3);

            //! --- MOb configuration
            Can_set_mob(MOB_0);                 //! Use MOb-0
            CANSTMOB = 0;                       //! Reset MOb status (undone by "Can_reset()")
            CANCDMOB = (MOB_Rx_ENA  << CONMOB); //! MOb 0 in receive mode
    3ca8:	90 e8       	ldi	r25, 0x80	; 128
    3caa:	a9 2e       	mov	r10, r25

            //! CAN controller configuration
            CANGCON = (1<<LISTEN) | (1<<ENASTB);//! Enable CAN controller in "listen" mode
    3cac:	8a e0       	ldi	r24, 0x0A	; 10
    3cae:	98 2e       	mov	r9, r24
            while ((CANGSTA & (1<<ENFG)) == 0); //! Wait for Enable OK
            CANGIT = 0xFF;                      //! Reset General errors and OVRTIM flag
    3cb0:	bb 24       	eor	r11, r11
    3cb2:	ba 94       	dec	r11
        Can_clear_mob();        //! All MOb Registers = 0x00
    }

    while (bt_not_found == 1)
    {
        if (try_conf == 1)
    3cb4:	81 e0       	ldi	r24, 0x01	; 1
    3cb6:	f8 16       	cp	r15, r24
    3cb8:	09 f0       	breq	.+2      	; 0x3cbc <can_auto_baudrate+0x110>
    3cba:	43 c0       	rjmp	.+134    	; 0x3d42 <can_auto_baudrate+0x196>
        {
            Can_reset();
    3cbc:	f0 92 d8 00 	sts	0x00D8, r15
            conf_index++;
    3cc0:	31 96       	adiw	r30, 0x01	; 1
            ovrtim_flag=0;

            //! --- CANBTx registers update (sjw = phs2/2, 3 sample points)
            CANBT1 = ((brp-1) << BRP);
    3cc2:	8d 2d       	mov	r24, r13
    3cc4:	81 50       	subi	r24, 0x01	; 1
    3cc6:	88 0f       	add	r24, r24
    3cc8:	80 93 e2 00 	sts	0x00E2, r24
            CANBT2 = (((phs2 >> 1)-1) << SJW) |((prs-1) << PRS);
    3ccc:	27 2f       	mov	r18, r23
    3cce:	26 95       	lsr	r18
    3cd0:	30 e0       	ldi	r19, 0x00	; 0
    3cd2:	21 50       	subi	r18, 0x01	; 1
    3cd4:	30 40       	sbci	r19, 0x00	; 0
    3cd6:	05 e0       	ldi	r16, 0x05	; 5
    3cd8:	22 0f       	add	r18, r18
    3cda:	33 1f       	adc	r19, r19
    3cdc:	0a 95       	dec	r16
    3cde:	e1 f7       	brne	.-8      	; 0x3cd8 <can_auto_baudrate+0x12c>
    3ce0:	8b 2f       	mov	r24, r27
    3ce2:	90 e0       	ldi	r25, 0x00	; 0
    3ce4:	01 97       	sbiw	r24, 0x01	; 1
    3ce6:	88 0f       	add	r24, r24
    3ce8:	99 1f       	adc	r25, r25
    3cea:	28 2b       	or	r18, r24
    3cec:	20 93 e3 00 	sts	0x00E3, r18
            CANBT3 = (((phs2-1) << PHS2) | ((phs1-1) << PHS1) | (1<<SMP));
    3cf0:	27 2f       	mov	r18, r23
    3cf2:	30 e0       	ldi	r19, 0x00	; 0
    3cf4:	21 50       	subi	r18, 0x01	; 1
    3cf6:	30 40       	sbci	r19, 0x00	; 0
    3cf8:	04 e0       	ldi	r16, 0x04	; 4
    3cfa:	22 0f       	add	r18, r18
    3cfc:	33 1f       	adc	r19, r19
    3cfe:	0a 95       	dec	r16
    3d00:	e1 f7       	brne	.-8      	; 0x3cfa <can_auto_baudrate+0x14e>
    3d02:	86 2f       	mov	r24, r22
    3d04:	90 e0       	ldi	r25, 0x00	; 0
    3d06:	01 97       	sbiw	r24, 0x01	; 1
    3d08:	88 0f       	add	r24, r24
    3d0a:	99 1f       	adc	r25, r25
    3d0c:	28 2b       	or	r18, r24
    3d0e:	21 60       	ori	r18, 0x01	; 1
    3d10:	20 93 e4 00 	sts	0x00E4, r18

            //! --- Set CAN-Timer - Used for time-out
            //!     There are 641 (0x281) possible evaluations. The first one provides the faster
            //!         the faster bit timing, the last one gives the slower. It is necessary to
            //!         modulate the time-out versus bit timing (0x281>>3=0x50, matching an U8).
            CANTCON = (U8)(conf_index >> 3);
    3d14:	cf 01       	movw	r24, r30
    3d16:	23 e0       	ldi	r18, 0x03	; 3
    3d18:	96 95       	lsr	r25
    3d1a:	87 95       	ror	r24
    3d1c:	2a 95       	dec	r18
    3d1e:	e1 f7       	brne	.-8      	; 0x3d18 <can_auto_baudrate+0x16c>
    3d20:	80 93 e5 00 	sts	0x00E5, r24

            //! --- MOb configuration
            Can_set_mob(MOB_0);                 //! Use MOb-0
    3d24:	10 92 ed 00 	sts	0x00ED, r1
            CANSTMOB = 0;                       //! Reset MOb status (undone by "Can_reset()")
    3d28:	10 92 ee 00 	sts	0x00EE, r1
            CANCDMOB = (MOB_Rx_ENA  << CONMOB); //! MOb 0 in receive mode
    3d2c:	a0 92 ef 00 	sts	0x00EF, r10

            //! CAN controller configuration
            CANGCON = (1<<LISTEN) | (1<<ENASTB);//! Enable CAN controller in "listen" mode
    3d30:	90 92 d8 00 	sts	0x00D8, r9
            while ((CANGSTA & (1<<ENFG)) == 0); //! Wait for Enable OK
    3d34:	80 91 d9 00 	lds	r24, 0x00D9
    3d38:	82 ff       	sbrs	r24, 2
    3d3a:	fc cf       	rjmp	.-8      	; 0x3d34 <can_auto_baudrate+0x188>
            CANGIT = 0xFF;                      //! Reset General errors and OVRTIM flag
    3d3c:	b0 92 da 00 	sts	0x00DA, r11
    3d40:	ee 24       	eor	r14, r14
    3d42:	01 e0       	ldi	r16, 0x01	; 1
    3d44:	3a c0       	rjmp	.+116    	; 0x3dba <can_auto_baudrate+0x20e>
        //!     Try to perform a CAN message reception in "LISTEN" mode without error and
        //!     before a time_out done by CAN-Timer.
        //!     Else gives the hand to "EVALUATE LOOP" to have a new set of bit timing.
        while (wait_for_rx == 1)
        {
            u8_temp0 = CANSTMOB;
    3d46:	80 91 ee 00 	lds	r24, 0x00EE
            //! --- RxOK received ?
            if ((u8_temp0 & (1<<RXOK)) != 0)
    3d4a:	90 e0       	ldi	r25, 0x00	; 0
    3d4c:	85 ff       	sbrs	r24, 5
    3d4e:	10 c0       	rjmp	.+32     	; 0x3d70 <can_auto_baudrate+0x1c4>
            {   //! --- It is the successful output of "can_auto_baudrate" function
                wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
                evaluate = 0;       //! Will skip "while (evaluate ..." loop
                bt_not_found = 0;   //! Out of "while (bt_not_found ..." loop
                bt_performed = 1;   //! Return flag = TRUE
                DISABLE_MOB;        //! Disable MOb-0
    3d50:	80 91 ef 00 	lds	r24, 0x00EF
    3d54:	8f 73       	andi	r24, 0x3F	; 63
    3d56:	80 93 ef 00 	sts	0x00EF, r24
                CANGCON = 0x00;     //! Disable CAN controller & reset "listen" mode
    3d5a:	10 92 d8 00 	sts	0x00D8, r1
                while ((CANGSTA & (1<<ENFG)) != 0); //! Wait for Disable OK
    3d5e:	80 91 d9 00 	lds	r24, 0x00D9
    3d62:	82 fd       	sbrc	r24, 2
    3d64:	fc cf       	rjmp	.-8      	; 0x3d5e <can_auto_baudrate+0x1b2>
    3d66:	00 e0       	ldi	r16, 0x00	; 0
    3d68:	10 e0       	ldi	r17, 0x00	; 0
    3d6a:	cc 24       	eor	r12, r12
    3d6c:	c3 94       	inc	r12
    3d6e:	81 c0       	rjmp	.+258    	; 0x3e72 <can_auto_baudrate+0x2c6>
            }
             //! --- Else stop if any errors
             else
            {
                //! --- MOb error ?
                if ((u8_temp0 & ((1<<BERR)|(1<<SERR)|(1<<CERR)|(1<<FERR)|(1<<AERR))) !=0)
    3d70:	8f 71       	andi	r24, 0x1F	; 31
    3d72:	90 70       	andi	r25, 0x00	; 0
    3d74:	89 2b       	or	r24, r25
    3d76:	11 f0       	breq	.+4      	; 0x3d7c <can_auto_baudrate+0x1d0>
    3d78:	10 e0       	ldi	r17, 0x00	; 0
    3d7a:	41 e0       	ldi	r20, 0x01	; 1
                {
                    evaluate = 1;       //! Will enter in "while (evaluate ..." loop
                    wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
                }

                u8_temp0 = CANGIT;
    3d7c:	80 91 da 00 	lds	r24, 0x00DA

                //! --- Time_out reached ?
                if ((u8_temp0 & (1<<OVRTIM)) !=0 )
    3d80:	28 2f       	mov	r18, r24
    3d82:	30 e0       	ldi	r19, 0x00	; 0
    3d84:	85 ff       	sbrs	r24, 5
    3d86:	11 c0       	rjmp	.+34     	; 0x3daa <can_auto_baudrate+0x1fe>
                {
                    if (ovrtim_flag==0)
    3d88:	ee 20       	and	r14, r14
    3d8a:	41 f4       	brne	.+16     	; 0x3d9c <can_auto_baudrate+0x1f0>
                    {
                        //! --- First Time_out
                        CANGIT |= (1<<OVRTIM);  // Reset OVRTIM
    3d8c:	80 91 da 00 	lds	r24, 0x00DA
    3d90:	80 62       	ori	r24, 0x20	; 32
    3d92:	80 93 da 00 	sts	0x00DA, r24
    3d96:	ee 24       	eor	r14, r14
    3d98:	e3 94       	inc	r14
    3d9a:	07 c0       	rjmp	.+14     	; 0x3daa <can_auto_baudrate+0x1fe>
                        ovrtim_flag++;
                    }
                    else
                    {
                        //! --- Second Time_out
                        CANGIT |= (1<<OVRTIM);  // Reset OVRTIM
    3d9c:	80 91 da 00 	lds	r24, 0x00DA
    3da0:	80 62       	ori	r24, 0x20	; 32
    3da2:	80 93 da 00 	sts	0x00DA, r24
    3da6:	10 e0       	ldi	r17, 0x00	; 0
    3da8:	41 e0       	ldi	r20, 0x01	; 1
                        wait_for_rx = 0;        //! Out of "while (wait_for_rx ..." loop
                    }
                }

                //! --- General error ?
                if ((u8_temp0 & ((1<<SERG)|(1<<CERG)|(1<<FERG)|(1<<AERG))) !=0)
    3daa:	2f 70       	andi	r18, 0x0F	; 15
    3dac:	30 70       	andi	r19, 0x00	; 0
    3dae:	23 2b       	or	r18, r19
    3db0:	21 f0       	breq	.+8      	; 0x3dba <can_auto_baudrate+0x20e>
    3db2:	10 e0       	ldi	r17, 0x00	; 0
    3db4:	ff 24       	eor	r15, r15
    3db6:	f3 94       	inc	r15
    3db8:	03 c0       	rjmp	.+6      	; 0x3dc0 <can_auto_baudrate+0x214>
        //! --- WAIT_FOR_RX LOOP:
        //!     ================
        //!     Try to perform a CAN message reception in "LISTEN" mode without error and
        //!     before a time_out done by CAN-Timer.
        //!     Else gives the hand to "EVALUATE LOOP" to have a new set of bit timing.
        while (wait_for_rx == 1)
    3dba:	11 30       	cpi	r17, 0x01	; 1
    3dbc:	21 f2       	breq	.-120    	; 0x3d46 <can_auto_baudrate+0x19a>
    3dbe:	56 c0       	rjmp	.+172    	; 0x3e6c <can_auto_baudrate+0x2c0>
        //!     limit and after it is the Prescaler. During the computing high (80%)
        //!     and low (75%) limits of sampling point location are tested. SJW and
        //!     the number of sampling points are not calculated in this loop.
        while (evaluate == 1)
        {
            if (phs1_inc != 0) phs1++;
    3dc0:	51 11       	cpse	r21, r1
    3dc2:	6f 5f       	subi	r22, 0xFF	; 255
            phs1_inc = 1;

            // --- The following test takes into account the previous incrementation of phs1
            if ((phs1 > PHS1_MAX) && (phs2 >= PHS2_MAX))
    3dc4:	69 30       	cpi	r22, 0x09	; 9
    3dc6:	f8 f0       	brcs	.+62     	; 0x3e06 <can_auto_baudrate+0x25a>
    3dc8:	78 30       	cpi	r23, 0x08	; 8
    3dca:	e8 f0       	brcs	.+58     	; 0x3e06 <can_auto_baudrate+0x25a>
            {
                phs1 = PHS1_MIN;
                phs2 = PHS2_MIN;
                phs1_inc = 0;
                if (ntq != NTQ_MAX) ntq++;
    3dcc:	a9 31       	cpi	r26, 0x19	; 25
    3dce:	11 f0       	breq	.+4      	; 0x3dd4 <can_auto_baudrate+0x228>
    3dd0:	af 5f       	subi	r26, 0xFF	; 255
    3dd2:	05 c0       	rjmp	.+10     	; 0x3dde <can_auto_baudrate+0x232>
                else
                {
                    ntq = NTQ_MIN;
                    if (brp != BRP_MAX) brp++;
    3dd4:	80 e4       	ldi	r24, 0x40	; 64
    3dd6:	d8 16       	cp	r13, r24
    3dd8:	21 f0       	breq	.+8      	; 0x3de2 <can_auto_baudrate+0x236>
    3dda:	d3 94       	inc	r13
    3ddc:	a8 e0       	ldi	r26, 0x08	; 8
    3dde:	62 e0       	ldi	r22, 0x02	; 2
    3de0:	14 c0       	rjmp	.+40     	; 0x3e0a <can_auto_baudrate+0x25e>
                    {
                        //! --- It is the failing of "can_auto_baudrate" function
                        evaluate = 0;       //! Out of "while (evaluate ..." loop
                        bt_performed = 0;   //! Return flag = FALSE
                        bt_not_found = 0;   //! Out of "while (bt_not_found ..." loop
                        DISABLE_MOB;        //! Disable MOb-0
    3de2:	80 91 ef 00 	lds	r24, 0x00EF
    3de6:	8f 73       	andi	r24, 0x3F	; 63
    3de8:	80 93 ef 00 	sts	0x00EF, r24
                        CANGCON = 0x00;     //! Disable CAN controller & reset "listen" mode
    3dec:	10 92 d8 00 	sts	0x00D8, r1
                        while ((CANGSTA & (1<<ENFG)) != 0); //! Wait for Disable OK
    3df0:	80 91 d9 00 	lds	r24, 0x00D9
    3df4:	82 fd       	sbrc	r24, 2
    3df6:	fc cf       	rjmp	.-8      	; 0x3df0 <can_auto_baudrate+0x244>
    3df8:	a8 e0       	ldi	r26, 0x08	; 8
    3dfa:	62 e0       	ldi	r22, 0x02	; 2
    3dfc:	72 e0       	ldi	r23, 0x02	; 2
    3dfe:	50 e0       	ldi	r21, 0x00	; 0
    3e00:	00 e0       	ldi	r16, 0x00	; 0
    3e02:	cc 24       	eor	r12, r12
    3e04:	36 c0       	rjmp	.+108    	; 0x3e72 <can_auto_baudrate+0x2c6>
                }
            }
            else    // if (phs1 > PHS1_MAX ...
            {
                //! --- If psh1 > 5 then phs1 =phs2 or =phs2+1, else phs1=phs2
                if (phs1>5)
    3e06:	66 30       	cpi	r22, 0x06	; 6
    3e08:	10 f4       	brcc	.+4      	; 0x3e0e <can_auto_baudrate+0x262>
    3e0a:	76 2f       	mov	r23, r22
    3e0c:	0a c0       	rjmp	.+20     	; 0x3e22 <can_auto_baudrate+0x276>
                {
                    if (phs1>(phs2+1)) phs1=(++phs2);
    3e0e:	26 2f       	mov	r18, r22
    3e10:	30 e0       	ldi	r19, 0x00	; 0
    3e12:	87 2f       	mov	r24, r23
    3e14:	90 e0       	ldi	r25, 0x00	; 0
    3e16:	01 96       	adiw	r24, 0x01	; 1
    3e18:	82 17       	cp	r24, r18
    3e1a:	93 07       	cpc	r25, r19
    3e1c:	14 f4       	brge	.+4      	; 0x3e22 <can_auto_baudrate+0x276>
    3e1e:	7f 5f       	subi	r23, 0xFF	; 255
    3e20:	67 2f       	mov	r22, r23
                }
                else
                {
                phs2=phs1;
                }
                prs = ntq - ( phs1 + phs2 + 1 );
    3e22:	b7 2f       	mov	r27, r23
    3e24:	b6 0f       	add	r27, r22
    3e26:	b0 95       	com	r27
    3e28:	ba 0f       	add	r27, r26

                //! --- Test PRS limits
                if ((prs <= PRS_MAX) && (prs >= PRS_MIN))
    3e2a:	8b 2f       	mov	r24, r27
    3e2c:	81 50       	subi	r24, 0x01	; 1
    3e2e:	88 30       	cpi	r24, 0x08	; 8
    3e30:	40 f6       	brcc	.-112    	; 0x3dc2 <can_auto_baudrate+0x216>
                {
                    //! --- Values  accepted if  80% >= sampling point >= 75%
                    if (((phs2<<2) >= (1+prs+phs1)) && ((phs2+phs2+phs2) <= (1+prs+phs1)))
    3e32:	47 2f       	mov	r20, r23
    3e34:	50 e0       	ldi	r21, 0x00	; 0
    3e36:	26 2f       	mov	r18, r22
    3e38:	30 e0       	ldi	r19, 0x00	; 0
    3e3a:	2f 5f       	subi	r18, 0xFF	; 255
    3e3c:	3f 4f       	sbci	r19, 0xFF	; 255
    3e3e:	2b 0f       	add	r18, r27
    3e40:	31 1d       	adc	r19, r1
    3e42:	ca 01       	movw	r24, r20
    3e44:	88 0f       	add	r24, r24
    3e46:	99 1f       	adc	r25, r25
    3e48:	88 0f       	add	r24, r24
    3e4a:	99 1f       	adc	r25, r25
    3e4c:	82 17       	cp	r24, r18
    3e4e:	93 07       	cpc	r25, r19
    3e50:	0c f4       	brge	.+2      	; 0x3e54 <can_auto_baudrate+0x2a8>
    3e52:	b7 cf       	rjmp	.-146    	; 0x3dc2 <can_auto_baudrate+0x216>
    3e54:	ca 01       	movw	r24, r20
    3e56:	88 0f       	add	r24, r24
    3e58:	99 1f       	adc	r25, r25
    3e5a:	84 0f       	add	r24, r20
    3e5c:	95 1f       	adc	r25, r21
    3e5e:	28 17       	cp	r18, r24
    3e60:	39 07       	cpc	r19, r25
    3e62:	0c f4       	brge	.+2      	; 0x3e66 <can_auto_baudrate+0x2ba>
    3e64:	ae cf       	rjmp	.-164    	; 0x3dc2 <can_auto_baudrate+0x216>
    3e66:	51 e0       	ldi	r21, 0x01	; 1
    3e68:	11 e0       	ldi	r17, 0x01	; 1
    3e6a:	03 c0       	rjmp	.+6      	; 0x3e72 <can_auto_baudrate+0x2c6>
        //!     then Phase2=Phase1 and if Phase1>5, Phase1 can be equal to Phase2 or
        //!     Phase2+1. After this, the number of TQ is increased up to its high
        //!     limit and after it is the Prescaler. During the computing high (80%)
        //!     and low (75%) limits of sampling point location are tested. SJW and
        //!     the number of sampling points are not calculated in this loop.
        while (evaluate == 1)
    3e6c:	41 30       	cpi	r20, 0x01	; 1
    3e6e:	09 f4       	brne	.+2      	; 0x3e72 <can_auto_baudrate+0x2c6>
    3e70:	a7 cf       	rjmp	.-178    	; 0x3dc0 <can_auto_baudrate+0x214>
    3e72:	40 e0       	ldi	r20, 0x00	; 0
    {
        Can_set_mob(u8_temp0);  //! Page index
        Can_clear_mob();        //! All MOb Registers = 0x00
    }

    while (bt_not_found == 1)
    3e74:	01 30       	cpi	r16, 0x01	; 1
    3e76:	09 f4       	brne	.+2      	; 0x3e7a <can_auto_baudrate+0x2ce>
    3e78:	1d cf       	rjmp	.-454    	; 0x3cb4 <can_auto_baudrate+0x108>
            }
        } // while (evaluate ...
    } // while (bt_not_found ...

    return (bt_performed);
}
    3e7a:	8c 2d       	mov	r24, r12
    3e7c:	1f 91       	pop	r17
    3e7e:	0f 91       	pop	r16
    3e80:	ff 90       	pop	r15
    3e82:	ef 90       	pop	r14
    3e84:	df 90       	pop	r13
    3e86:	cf 90       	pop	r12
    3e88:	bf 90       	pop	r11
    3e8a:	af 90       	pop	r10
    3e8c:	9f 90       	pop	r9
    3e8e:	08 95       	ret

00003e90 <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
U8 can_fixed_baudrate(U8 mode)
{
    Can_reset();
    3e90:	81 e0       	ldi	r24, 0x01	; 1
    3e92:	80 93 d8 00 	sts	0x00D8, r24
    Can_conf_bt();
    3e96:	86 e0       	ldi	r24, 0x06	; 6
    3e98:	80 93 e2 00 	sts	0x00E2, r24
    3e9c:	80 93 e3 00 	sts	0x00E3, r24
    3ea0:	84 e2       	ldi	r24, 0x24	; 36
    3ea2:	80 93 e4 00 	sts	0x00E4, r24
    return 1;
}
    3ea6:	81 e0       	ldi	r24, 0x01	; 1
    3ea8:	08 95       	ret

00003eaa <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
U8 can_get_status (st_cmd_t* cmd)
{
    3eaa:	1f 93       	push	r17
    3eac:	cf 93       	push	r28
    3eae:	df 93       	push	r29
    3eb0:	ec 01       	movw	r28, r24
    U8 a_status, rtn_val;
     
    a_status = cmd->status;
    3eb2:	8a 85       	ldd	r24, Y+10	; 0x0a
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    3eb4:	88 23       	and	r24, r24
    3eb6:	09 f4       	brne	.+2      	; 0x3eba <can_get_status+0x10>
    3eb8:	86 c0       	rjmp	.+268    	; 0x3fc6 <can_get_status+0x11c>
    3eba:	8f 31       	cpi	r24, 0x1F	; 31
    3ebc:	09 f4       	brne	.+2      	; 0x3ec0 <can_get_status+0x16>
    3ebe:	83 c0       	rjmp	.+262    	; 0x3fc6 <can_get_status+0x11c>
    3ec0:	8f 3f       	cpi	r24, 0xFF	; 255
    3ec2:	09 f4       	brne	.+2      	; 0x3ec6 <can_get_status+0x1c>
    3ec4:	80 c0       	rjmp	.+256    	; 0x3fc6 <can_get_status+0x11c>
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(cmd->handle);
    3ec6:	88 81       	ld	r24, Y
    3ec8:	82 95       	swap	r24
    3eca:	80 7f       	andi	r24, 0xF0	; 240
    3ecc:	80 93 ed 00 	sts	0x00ED, r24
    a_status = can_get_mob_status();
    3ed0:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <can_get_mob_status>
    3ed4:	18 2f       	mov	r17, r24
    
    switch (a_status)
    3ed6:	80 32       	cpi	r24, 0x20	; 32
    3ed8:	71 f0       	breq	.+28     	; 0x3ef6 <can_get_status+0x4c>
    3eda:	81 32       	cpi	r24, 0x21	; 33
    3edc:	18 f4       	brcc	.+6      	; 0x3ee4 <can_get_status+0x3a>
    3ede:	88 23       	and	r24, r24
    3ee0:	41 f0       	breq	.+16     	; 0x3ef2 <can_get_status+0x48>
    3ee2:	69 c0       	rjmp	.+210    	; 0x3fb6 <can_get_status+0x10c>
    3ee4:	80 34       	cpi	r24, 0x40	; 64
    3ee6:	09 f4       	brne	.+2      	; 0x3eea <can_get_status+0x40>
    3ee8:	5c c0       	rjmp	.+184    	; 0x3fa2 <can_get_status+0xf8>
    3eea:	80 3a       	cpi	r24, 0xA0	; 160
    3eec:	09 f0       	breq	.+2      	; 0x3ef0 <can_get_status+0x46>
    3eee:	63 c0       	rjmp	.+198    	; 0x3fb6 <can_get_status+0x10c>
    3ef0:	02 c0       	rjmp	.+4      	; 0x3ef6 <can_get_status+0x4c>
    3ef2:	81 e0       	ldi	r24, 0x01	; 1
    3ef4:	69 c0       	rjmp	.+210    	; 0x3fc8 <can_get_status+0x11e>
            rtn_val = CAN_STATUS_NOT_COMPLETED;
            break;
        //---------------      
        case MOB_RX_COMPLETED:     
        case MOB_RX_COMPLETED_DLCW:
            cmd->dlc = Can_get_dlc();
    3ef6:	80 91 ef 00 	lds	r24, 0x00EF
    3efa:	8f 70       	andi	r24, 0x0F	; 15
    3efc:	8f 83       	std	Y+7, r24	; 0x07
            can_get_data(cmd->pt_data);
    3efe:	88 85       	ldd	r24, Y+8	; 0x08
    3f00:	99 85       	ldd	r25, Y+9	; 0x09
    3f02:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <can_get_data>
            cmd->ctrl.rtr = Can_get_rtr();
    3f06:	80 91 f0 00 	lds	r24, 0x00F0
    3f0a:	90 e0       	ldi	r25, 0x00	; 0
    3f0c:	84 70       	andi	r24, 0x04	; 4
    3f0e:	90 70       	andi	r25, 0x00	; 0
    3f10:	95 95       	asr	r25
    3f12:	87 95       	ror	r24
    3f14:	95 95       	asr	r25
    3f16:	87 95       	ror	r24
    3f18:	8b 87       	std	Y+11, r24	; 0x0b
            if (Can_get_ide()) // if extended frame
    3f1a:	80 91 ef 00 	lds	r24, 0x00EF
    3f1e:	fe 01       	movw	r30, r28
    3f20:	33 96       	adiw	r30, 0x03	; 3
    3f22:	84 ff       	sbrs	r24, 4
    3f24:	2b c0       	rjmp	.+86     	; 0x3f7c <can_get_status+0xd2>
            {
                cmd->ctrl.ide = 1; // extended frame
    3f26:	81 e0       	ldi	r24, 0x01	; 1
    3f28:	8c 87       	std	Y+12, r24	; 0x0c
                Can_get_ext_id(cmd->id.ext);
    3f2a:	80 91 f3 00 	lds	r24, 0x00F3
    3f2e:	86 95       	lsr	r24
    3f30:	86 95       	lsr	r24
    3f32:	86 95       	lsr	r24
    3f34:	83 83       	std	Z+3, r24	; 0x03
    3f36:	90 91 f2 00 	lds	r25, 0x00F2
    3f3a:	80 91 f3 00 	lds	r24, 0x00F3
    3f3e:	82 95       	swap	r24
    3f40:	88 0f       	add	r24, r24
    3f42:	80 7e       	andi	r24, 0xE0	; 224
    3f44:	96 95       	lsr	r25
    3f46:	96 95       	lsr	r25
    3f48:	96 95       	lsr	r25
    3f4a:	89 0f       	add	r24, r25
    3f4c:	82 83       	std	Z+2, r24	; 0x02
    3f4e:	90 91 f1 00 	lds	r25, 0x00F1
    3f52:	80 91 f2 00 	lds	r24, 0x00F2
    3f56:	82 95       	swap	r24
    3f58:	88 0f       	add	r24, r24
    3f5a:	80 7e       	andi	r24, 0xE0	; 224
    3f5c:	96 95       	lsr	r25
    3f5e:	96 95       	lsr	r25
    3f60:	96 95       	lsr	r25
    3f62:	89 0f       	add	r24, r25
    3f64:	81 83       	std	Z+1, r24	; 0x01
    3f66:	90 91 f0 00 	lds	r25, 0x00F0
    3f6a:	80 91 f1 00 	lds	r24, 0x00F1
    3f6e:	82 95       	swap	r24
    3f70:	88 0f       	add	r24, r24
    3f72:	80 7e       	andi	r24, 0xE0	; 224
    3f74:	96 95       	lsr	r25
    3f76:	96 95       	lsr	r25
    3f78:	96 95       	lsr	r25
    3f7a:	11 c0       	rjmp	.+34     	; 0x3f9e <can_get_status+0xf4>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    3f7c:	1c 86       	std	Y+12, r1	; 0x0c
                    Can_get_std_id(cmd->id.std);
    3f7e:	80 91 f3 00 	lds	r24, 0x00F3
    3f82:	82 95       	swap	r24
    3f84:	86 95       	lsr	r24
    3f86:	87 70       	andi	r24, 0x07	; 7
    3f88:	81 83       	std	Z+1, r24	; 0x01
    3f8a:	90 91 f2 00 	lds	r25, 0x00F2
    3f8e:	80 91 f3 00 	lds	r24, 0x00F3
    3f92:	88 0f       	add	r24, r24
    3f94:	88 0f       	add	r24, r24
    3f96:	88 0f       	add	r24, r24
    3f98:	92 95       	swap	r25
    3f9a:	96 95       	lsr	r25
    3f9c:	97 70       	andi	r25, 0x07	; 7
    3f9e:	89 0f       	add	r24, r25
    3fa0:	8b 83       	std	Y+3, r24	; 0x03
            rtn_val = CAN_STATUS_COMPLETED;
            break;
        //---------------      
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    3fa2:	1a 87       	std	Y+10, r17	; 0x0a
            Can_mob_abort();        // Freed the MOB
    3fa4:	80 91 ef 00 	lds	r24, 0x00EF
    3fa8:	8f 73       	andi	r24, 0x3F	; 63
    3faa:	80 93 ef 00 	sts	0x00EF, r24
            Can_clear_status_mob(); //   and reset MOb status
    3fae:	10 92 ee 00 	sts	0x00EE, r1
    3fb2:	80 e0       	ldi	r24, 0x00	; 0
    3fb4:	09 c0       	rjmp	.+18     	; 0x3fc8 <can_get_status+0x11e>
            rtn_val = CAN_STATUS_COMPLETED;
            break;
        //---------------      
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    3fb6:	1a 87       	std	Y+10, r17	; 0x0a
            Can_mob_abort();        // Freed the MOB
    3fb8:	80 91 ef 00 	lds	r24, 0x00EF
    3fbc:	8f 73       	andi	r24, 0x3F	; 63
    3fbe:	80 93 ef 00 	sts	0x00EF, r24
            Can_clear_status_mob(); //   and reset MOb status
    3fc2:	10 92 ee 00 	sts	0x00EE, r1
    3fc6:	82 e0       	ldi	r24, 0x02	; 2
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
    3fc8:	df 91       	pop	r29
    3fca:	cf 91       	pop	r28
    3fcc:	1f 91       	pop	r17
    3fce:	08 95       	ret

00003fd0 <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
U8 can_cmd(st_cmd_t* cmd)
{
    3fd0:	a4 e0       	ldi	r26, 0x04	; 4
    3fd2:	b0 e0       	ldi	r27, 0x00	; 0
    3fd4:	ee ee       	ldi	r30, 0xEE	; 238
    3fd6:	ff e1       	ldi	r31, 0x1F	; 31
    3fd8:	0c 94 b0 2e 	jmp	0x5d60	; 0x5d60 <__prologue_saves__+0x1c>
    3fdc:	8c 01       	movw	r16, r24
  U8 mob_handle, cpt;
  U32 u32_temp;
  
  if (cmd->cmd == CMD_ABORT)
    3fde:	dc 01       	movw	r26, r24
    3fe0:	11 96       	adiw	r26, 0x01	; 1
    3fe2:	8d 91       	ld	r24, X+
    3fe4:	9c 91       	ld	r25, X
    3fe6:	12 97       	sbiw	r26, 0x02	; 2
    3fe8:	0c 97       	sbiw	r24, 0x0c	; 12
    3fea:	a9 f4       	brne	.+42     	; 0x4016 <can_cmd+0x46>
  {
    if (cmd->status == MOB_PENDING)
    3fec:	1a 96       	adiw	r26, 0x0a	; 10
    3fee:	8c 91       	ld	r24, X
    3ff0:	1a 97       	sbiw	r26, 0x0a	; 10
    3ff2:	80 36       	cpi	r24, 0x60	; 96
    3ff4:	69 f4       	brne	.+26     	; 0x4010 <can_cmd+0x40>
    {
      // Rx or Tx not yet performed
      Can_set_mob(cmd->handle);
    3ff6:	8c 91       	ld	r24, X
    3ff8:	82 95       	swap	r24
    3ffa:	80 7f       	andi	r24, 0xF0	; 240
    3ffc:	80 93 ed 00 	sts	0x00ED, r24
      Can_mob_abort();
    4000:	80 91 ef 00 	lds	r24, 0x00EF
    4004:	8f 73       	andi	r24, 0x3F	; 63
    4006:	80 93 ef 00 	sts	0x00EF, r24
      Can_clear_status_mob();       // To be sure !
    400a:	10 92 ee 00 	sts	0x00EE, r1
      cmd->handle = 0;
    400e:	1c 92       	st	X, r1
    }
    cmd->status = STATUS_CLEARED; 
    4010:	f8 01       	movw	r30, r16
    4012:	12 86       	std	Z+10, r1	; 0x0a
    4014:	0c c1       	rjmp	.+536    	; 0x422e <can_cmd+0x25e>
  }
  else
  {
    mob_handle = can_get_mob_free();
    4016:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <can_get_mob_free>
    401a:	98 2f       	mov	r25, r24
    if (mob_handle!= NO_MOB)
    401c:	8f 3f       	cpi	r24, 0xFF	; 255
    401e:	09 f4       	brne	.+2      	; 0x4022 <can_cmd+0x52>
    4020:	d2 c4       	rjmp	.+2468   	; 0x49c6 <can_cmd+0x9f6>
    {
      cmd->status = MOB_PENDING; 
    4022:	80 e6       	ldi	r24, 0x60	; 96
    4024:	d8 01       	movw	r26, r16
    4026:	1a 96       	adiw	r26, 0x0a	; 10
    4028:	8c 93       	st	X, r24
    402a:	1a 97       	sbiw	r26, 0x0a	; 10
      cmd->handle = mob_handle;
    402c:	9c 93       	st	X, r25
      Can_set_mob(mob_handle);
    402e:	92 95       	swap	r25
    4030:	90 7f       	andi	r25, 0xF0	; 240
    4032:	90 93 ed 00 	sts	0x00ED, r25
    4036:	ee ee       	ldi	r30, 0xEE	; 238
    4038:	f0 e0       	ldi	r31, 0x00	; 0
      Can_clear_mob();
    403a:	11 92       	st	Z+, r1
    403c:	e8 3f       	cpi	r30, 0xF8	; 248
    403e:	f1 05       	cpc	r31, r1
    4040:	e1 f7       	brne	.-8      	; 0x403a <can_cmd+0x6a>
          
      switch (cmd->cmd)
    4042:	d8 01       	movw	r26, r16
    4044:	11 96       	adiw	r26, 0x01	; 1
    4046:	ed 91       	ld	r30, X+
    4048:	fc 91       	ld	r31, X
    404a:	12 97       	sbiw	r26, 0x02	; 2
    404c:	31 97       	sbiw	r30, 0x01	; 1
    404e:	eb 30       	cpi	r30, 0x0B	; 11
    4050:	f1 05       	cpc	r31, r1
    4052:	08 f0       	brcs	.+2      	; 0x4056 <can_cmd+0x86>
    4054:	b4 c4       	rjmp	.+2408   	; 0x49be <can_cmd+0x9ee>
    4056:	e7 5a       	subi	r30, 0xA7	; 167
    4058:	ff 4f       	sbci	r31, 0xFF	; 255
    405a:	0c 94 d9 2e 	jmp	0x5db2	; 0x5db2 <__tablejump2__>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    405e:	f8 01       	movw	r30, r16
    4060:	47 81       	ldd	r20, Z+7	; 0x07
    4062:	90 e0       	ldi	r25, 0x00	; 0
    4064:	be c3       	rjmp	.+1916   	; 0x47e2 <can_cmd+0x812>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    4066:	d8 01       	movw	r26, r16
    4068:	1c 96       	adiw	r26, 0x0c	; 12
    406a:	8c 91       	ld	r24, X
    406c:	f8 01       	movw	r30, r16
    406e:	33 96       	adiw	r30, 0x03	; 3
    4070:	88 23       	and	r24, r24
    4072:	91 f1       	breq	.+100    	; 0x40d8 <can_cmd+0x108>
    4074:	32 81       	ldd	r19, Z+2	; 0x02
    4076:	93 2f       	mov	r25, r19
    4078:	92 95       	swap	r25
    407a:	96 95       	lsr	r25
    407c:	97 70       	andi	r25, 0x07	; 7
    407e:	83 81       	ldd	r24, Z+3	; 0x03
    4080:	88 0f       	add	r24, r24
    4082:	88 0f       	add	r24, r24
    4084:	88 0f       	add	r24, r24
    4086:	98 0f       	add	r25, r24
    4088:	90 93 f3 00 	sts	0x00F3, r25
    408c:	21 81       	ldd	r18, Z+1	; 0x01
    408e:	82 2f       	mov	r24, r18
    4090:	82 95       	swap	r24
    4092:	86 95       	lsr	r24
    4094:	87 70       	andi	r24, 0x07	; 7
    4096:	33 0f       	add	r19, r19
    4098:	33 0f       	add	r19, r19
    409a:	33 0f       	add	r19, r19
    409c:	83 0f       	add	r24, r19
    409e:	80 93 f2 00 	sts	0x00F2, r24
    40a2:	f8 01       	movw	r30, r16
    40a4:	93 81       	ldd	r25, Z+3	; 0x03
    40a6:	22 0f       	add	r18, r18
    40a8:	22 0f       	add	r18, r18
    40aa:	22 0f       	add	r18, r18
    40ac:	89 2f       	mov	r24, r25
    40ae:	82 95       	swap	r24
    40b0:	86 95       	lsr	r24
    40b2:	87 70       	andi	r24, 0x07	; 7
    40b4:	28 0f       	add	r18, r24
    40b6:	20 93 f1 00 	sts	0x00F1, r18
    40ba:	99 0f       	add	r25, r25
    40bc:	99 0f       	add	r25, r25
    40be:	99 0f       	add	r25, r25
    40c0:	90 93 f0 00 	sts	0x00F0, r25
    40c4:	80 91 ef 00 	lds	r24, 0x00EF
    40c8:	80 61       	ori	r24, 0x10	; 16
    40ca:	80 93 ef 00 	sts	0x00EF, r24
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    40ce:	d8 01       	movw	r26, r16
    40d0:	17 96       	adiw	r26, 0x07	; 7
    40d2:	2c 91       	ld	r18, X
    40d4:	90 e0       	ldi	r25, 0x00	; 0
    40d6:	22 c0       	rjmp	.+68     	; 0x411c <can_cmd+0x14c>
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
    40d8:	d8 01       	movw	r26, r16
    40da:	13 96       	adiw	r26, 0x03	; 3
    40dc:	2c 91       	ld	r18, X
    40de:	81 81       	ldd	r24, Z+1	; 0x01
    40e0:	82 95       	swap	r24
    40e2:	88 0f       	add	r24, r24
    40e4:	80 7e       	andi	r24, 0xE0	; 224
    40e6:	92 2f       	mov	r25, r18
    40e8:	96 95       	lsr	r25
    40ea:	96 95       	lsr	r25
    40ec:	96 95       	lsr	r25
    40ee:	89 0f       	add	r24, r25
    40f0:	80 93 f3 00 	sts	0x00F3, r24
    40f4:	22 95       	swap	r18
    40f6:	22 0f       	add	r18, r18
    40f8:	20 7e       	andi	r18, 0xE0	; 224
    40fa:	20 93 f2 00 	sts	0x00F2, r18
    40fe:	80 91 ef 00 	lds	r24, 0x00EF
    4102:	8f 7e       	andi	r24, 0xEF	; 239
    4104:	e2 cf       	rjmp	.-60     	; 0x40ca <can_cmd+0xfa>
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    4106:	d8 01       	movw	r26, r16
    4108:	18 96       	adiw	r26, 0x08	; 8
    410a:	ed 91       	ld	r30, X+
    410c:	fc 91       	ld	r31, X
    410e:	19 97       	sbiw	r26, 0x09	; 9
    4110:	e9 0f       	add	r30, r25
    4112:	f1 1d       	adc	r31, r1
    4114:	80 81       	ld	r24, Z
    4116:	80 93 fa 00 	sts	0x00FA, r24
    411a:	9f 5f       	subi	r25, 0xFF	; 255
    411c:	92 17       	cp	r25, r18
    411e:	98 f3       	brcs	.-26     	; 0x4106 <can_cmd+0x136>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
    4120:	f8 01       	movw	r30, r16
    4122:	83 85       	ldd	r24, Z+11	; 0x0b
    4124:	88 23       	and	r24, r24
    4126:	21 f0       	breq	.+8      	; 0x4130 <can_cmd+0x160>
    4128:	80 91 f0 00 	lds	r24, 0x00F0
    412c:	84 60       	ori	r24, 0x04	; 4
    412e:	03 c0       	rjmp	.+6      	; 0x4136 <can_cmd+0x166>
            else Can_clear_rtr();    
    4130:	80 91 f0 00 	lds	r24, 0x00F0
    4134:	8b 7f       	andi	r24, 0xFB	; 251
    4136:	80 93 f0 00 	sts	0x00F0, r24
          Can_set_dlc(cmd->dlc);
    413a:	80 91 ef 00 	lds	r24, 0x00EF
    413e:	28 2b       	or	r18, r24
    4140:	20 93 ef 00 	sts	0x00EF, r18
    4144:	6a c0       	rjmp	.+212    	; 0x421a <can_cmd+0x24a>
          Can_config_tx();
          break;
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    4146:	d8 01       	movw	r26, r16
    4148:	1c 96       	adiw	r26, 0x0c	; 12
    414a:	8c 91       	ld	r24, X
    414c:	f8 01       	movw	r30, r16
    414e:	33 96       	adiw	r30, 0x03	; 3
    4150:	88 23       	and	r24, r24
    4152:	91 f1       	breq	.+100    	; 0x41b8 <can_cmd+0x1e8>
    4154:	32 81       	ldd	r19, Z+2	; 0x02
    4156:	93 2f       	mov	r25, r19
    4158:	92 95       	swap	r25
    415a:	96 95       	lsr	r25
    415c:	97 70       	andi	r25, 0x07	; 7
    415e:	83 81       	ldd	r24, Z+3	; 0x03
    4160:	88 0f       	add	r24, r24
    4162:	88 0f       	add	r24, r24
    4164:	88 0f       	add	r24, r24
    4166:	98 0f       	add	r25, r24
    4168:	90 93 f3 00 	sts	0x00F3, r25
    416c:	21 81       	ldd	r18, Z+1	; 0x01
    416e:	82 2f       	mov	r24, r18
    4170:	82 95       	swap	r24
    4172:	86 95       	lsr	r24
    4174:	87 70       	andi	r24, 0x07	; 7
    4176:	33 0f       	add	r19, r19
    4178:	33 0f       	add	r19, r19
    417a:	33 0f       	add	r19, r19
    417c:	83 0f       	add	r24, r19
    417e:	80 93 f2 00 	sts	0x00F2, r24
    4182:	f8 01       	movw	r30, r16
    4184:	93 81       	ldd	r25, Z+3	; 0x03
    4186:	22 0f       	add	r18, r18
    4188:	22 0f       	add	r18, r18
    418a:	22 0f       	add	r18, r18
    418c:	89 2f       	mov	r24, r25
    418e:	82 95       	swap	r24
    4190:	86 95       	lsr	r24
    4192:	87 70       	andi	r24, 0x07	; 7
    4194:	28 0f       	add	r18, r24
    4196:	20 93 f1 00 	sts	0x00F1, r18
    419a:	99 0f       	add	r25, r25
    419c:	99 0f       	add	r25, r25
    419e:	99 0f       	add	r25, r25
    41a0:	90 93 f0 00 	sts	0x00F0, r25
    41a4:	80 91 ef 00 	lds	r24, 0x00EF
    41a8:	80 61       	ori	r24, 0x10	; 16
    41aa:	80 93 ef 00 	sts	0x00EF, r24
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    41ae:	d8 01       	movw	r26, r16
    41b0:	17 96       	adiw	r26, 0x07	; 7
    41b2:	2c 91       	ld	r18, X
    41b4:	90 e0       	ldi	r25, 0x00	; 0
    41b6:	22 c0       	rjmp	.+68     	; 0x41fc <can_cmd+0x22c>
          Can_config_tx();
          break;
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
    41b8:	d8 01       	movw	r26, r16
    41ba:	13 96       	adiw	r26, 0x03	; 3
    41bc:	2c 91       	ld	r18, X
    41be:	81 81       	ldd	r24, Z+1	; 0x01
    41c0:	82 95       	swap	r24
    41c2:	88 0f       	add	r24, r24
    41c4:	80 7e       	andi	r24, 0xE0	; 224
    41c6:	92 2f       	mov	r25, r18
    41c8:	96 95       	lsr	r25
    41ca:	96 95       	lsr	r25
    41cc:	96 95       	lsr	r25
    41ce:	89 0f       	add	r24, r25
    41d0:	80 93 f3 00 	sts	0x00F3, r24
    41d4:	22 95       	swap	r18
    41d6:	22 0f       	add	r18, r18
    41d8:	20 7e       	andi	r18, 0xE0	; 224
    41da:	20 93 f2 00 	sts	0x00F2, r18
    41de:	80 91 ef 00 	lds	r24, 0x00EF
    41e2:	8f 7e       	andi	r24, 0xEF	; 239
    41e4:	e2 cf       	rjmp	.-60     	; 0x41aa <can_cmd+0x1da>
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    41e6:	d8 01       	movw	r26, r16
    41e8:	18 96       	adiw	r26, 0x08	; 8
    41ea:	ed 91       	ld	r30, X+
    41ec:	fc 91       	ld	r31, X
    41ee:	19 97       	sbiw	r26, 0x09	; 9
    41f0:	e9 0f       	add	r30, r25
    41f2:	f1 1d       	adc	r31, r1
    41f4:	80 81       	ld	r24, Z
    41f6:	80 93 fa 00 	sts	0x00FA, r24
    41fa:	9f 5f       	subi	r25, 0xFF	; 255
    41fc:	92 17       	cp	r25, r18
    41fe:	98 f3       	brcs	.-26     	; 0x41e6 <can_cmd+0x216>
          cmd->ctrl.rtr=0; Can_clear_rtr();
    4200:	f8 01       	movw	r30, r16
    4202:	13 86       	std	Z+11, r1	; 0x0b
    4204:	80 91 f0 00 	lds	r24, 0x00F0
    4208:	8b 7f       	andi	r24, 0xFB	; 251
    420a:	80 93 f0 00 	sts	0x00F0, r24
          Can_set_dlc(cmd->dlc);
    420e:	80 91 ef 00 	lds	r24, 0x00EF
    4212:	97 81       	ldd	r25, Z+7	; 0x07
    4214:	89 2b       	or	r24, r25
    4216:	80 93 ef 00 	sts	0x00EF, r24
          Can_config_tx();
    421a:	80 91 ef 00 	lds	r24, 0x00EF
    421e:	8f 73       	andi	r24, 0x3F	; 63
    4220:	80 93 ef 00 	sts	0x00EF, r24
    4224:	80 91 ef 00 	lds	r24, 0x00EF
    4228:	80 64       	ori	r24, 0x40	; 64
    422a:	80 93 ef 00 	sts	0x00EF, r24
    422e:	80 e0       	ldi	r24, 0x00	; 0
    4230:	ce c3       	rjmp	.+1948   	; 0x49ce <can_cmd+0x9fe>
          break;
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    4232:	d8 01       	movw	r26, r16
    4234:	1c 96       	adiw	r26, 0x0c	; 12
    4236:	8c 91       	ld	r24, X
    4238:	f8 01       	movw	r30, r16
    423a:	33 96       	adiw	r30, 0x03	; 3
    423c:	88 23       	and	r24, r24
    423e:	61 f1       	breq	.+88     	; 0x4298 <can_cmd+0x2c8>
    4240:	32 81       	ldd	r19, Z+2	; 0x02
    4242:	93 2f       	mov	r25, r19
    4244:	92 95       	swap	r25
    4246:	96 95       	lsr	r25
    4248:	97 70       	andi	r25, 0x07	; 7
    424a:	83 81       	ldd	r24, Z+3	; 0x03
    424c:	88 0f       	add	r24, r24
    424e:	88 0f       	add	r24, r24
    4250:	88 0f       	add	r24, r24
    4252:	98 0f       	add	r25, r24
    4254:	90 93 f3 00 	sts	0x00F3, r25
    4258:	21 81       	ldd	r18, Z+1	; 0x01
    425a:	82 2f       	mov	r24, r18
    425c:	82 95       	swap	r24
    425e:	86 95       	lsr	r24
    4260:	87 70       	andi	r24, 0x07	; 7
    4262:	33 0f       	add	r19, r19
    4264:	33 0f       	add	r19, r19
    4266:	33 0f       	add	r19, r19
    4268:	83 0f       	add	r24, r19
    426a:	80 93 f2 00 	sts	0x00F2, r24
    426e:	f8 01       	movw	r30, r16
    4270:	93 81       	ldd	r25, Z+3	; 0x03
    4272:	22 0f       	add	r18, r18
    4274:	22 0f       	add	r18, r18
    4276:	22 0f       	add	r18, r18
    4278:	89 2f       	mov	r24, r25
    427a:	82 95       	swap	r24
    427c:	86 95       	lsr	r24
    427e:	87 70       	andi	r24, 0x07	; 7
    4280:	28 0f       	add	r18, r24
    4282:	20 93 f1 00 	sts	0x00F1, r18
    4286:	99 0f       	add	r25, r25
    4288:	99 0f       	add	r25, r25
    428a:	99 0f       	add	r25, r25
    428c:	90 93 f0 00 	sts	0x00F0, r25
    4290:	80 91 ef 00 	lds	r24, 0x00EF
    4294:	80 61       	ori	r24, 0x10	; 16
    4296:	16 c0       	rjmp	.+44     	; 0x42c4 <can_cmd+0x2f4>
          else              { Can_set_std_id(cmd->id.std);}
    4298:	d8 01       	movw	r26, r16
    429a:	13 96       	adiw	r26, 0x03	; 3
    429c:	2c 91       	ld	r18, X
    429e:	81 81       	ldd	r24, Z+1	; 0x01
    42a0:	82 95       	swap	r24
    42a2:	88 0f       	add	r24, r24
    42a4:	80 7e       	andi	r24, 0xE0	; 224
    42a6:	92 2f       	mov	r25, r18
    42a8:	96 95       	lsr	r25
    42aa:	96 95       	lsr	r25
    42ac:	96 95       	lsr	r25
    42ae:	89 0f       	add	r24, r25
    42b0:	80 93 f3 00 	sts	0x00F3, r24
    42b4:	22 95       	swap	r18
    42b6:	22 0f       	add	r18, r18
    42b8:	20 7e       	andi	r18, 0xE0	; 224
    42ba:	20 93 f2 00 	sts	0x00F2, r18
    42be:	80 91 ef 00 	lds	r24, 0x00EF
    42c2:	8f 7e       	andi	r24, 0xEF	; 239
    42c4:	80 93 ef 00 	sts	0x00EF, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
    42c8:	81 e0       	ldi	r24, 0x01	; 1
    42ca:	f8 01       	movw	r30, r16
    42cc:	83 87       	std	Z+11, r24	; 0x0b
    42ce:	80 91 f0 00 	lds	r24, 0x00F0
    42d2:	84 60       	ori	r24, 0x04	; 4
    42d4:	9a cf       	rjmp	.-204    	; 0x420a <can_cmd+0x23a>
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
        //------------      
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    42d6:	19 82       	std	Y+1, r1	; 0x01
    42d8:	1a 82       	std	Y+2, r1	; 0x02
    42da:	1b 82       	std	Y+3, r1	; 0x03
    42dc:	1c 82       	std	Y+4, r1	; 0x04
    42de:	fe 01       	movw	r30, r28
    42e0:	31 96       	adiw	r30, 0x01	; 1
    42e2:	32 81       	ldd	r19, Z+2	; 0x02
    42e4:	93 2f       	mov	r25, r19
    42e6:	92 95       	swap	r25
    42e8:	96 95       	lsr	r25
    42ea:	97 70       	andi	r25, 0x07	; 7
    42ec:	83 81       	ldd	r24, Z+3	; 0x03
    42ee:	88 0f       	add	r24, r24
    42f0:	88 0f       	add	r24, r24
    42f2:	88 0f       	add	r24, r24
    42f4:	98 0f       	add	r25, r24
    42f6:	90 93 f7 00 	sts	0x00F7, r25
    42fa:	21 81       	ldd	r18, Z+1	; 0x01
    42fc:	82 2f       	mov	r24, r18
    42fe:	82 95       	swap	r24
    4300:	86 95       	lsr	r24
    4302:	87 70       	andi	r24, 0x07	; 7
    4304:	33 0f       	add	r19, r19
    4306:	33 0f       	add	r19, r19
    4308:	33 0f       	add	r19, r19
    430a:	83 0f       	add	r24, r19
    430c:	80 93 f6 00 	sts	0x00F6, r24
    4310:	99 81       	ldd	r25, Y+1	; 0x01
    4312:	22 0f       	add	r18, r18
    4314:	22 0f       	add	r18, r18
    4316:	22 0f       	add	r18, r18
    4318:	89 2f       	mov	r24, r25
    431a:	82 95       	swap	r24
    431c:	86 95       	lsr	r24
    431e:	87 70       	andi	r24, 0x07	; 7
    4320:	28 0f       	add	r18, r24
    4322:	20 93 f5 00 	sts	0x00F5, r18
    4326:	99 0f       	add	r25, r25
    4328:	99 0f       	add	r25, r25
    432a:	99 0f       	add	r25, r25
    432c:	90 93 f4 00 	sts	0x00F4, r25
          Can_set_dlc(cmd->dlc);
    4330:	80 91 ef 00 	lds	r24, 0x00EF
    4334:	d8 01       	movw	r26, r16
    4336:	17 96       	adiw	r26, 0x07	; 7
    4338:	9c 91       	ld	r25, X
    433a:	89 2b       	or	r24, r25
    433c:	80 93 ef 00 	sts	0x00EF, r24
          Can_clear_rtrmsk();
    4340:	80 91 f4 00 	lds	r24, 0x00F4
    4344:	8b 7f       	andi	r24, 0xFB	; 251
    4346:	80 93 f4 00 	sts	0x00F4, r24
    434a:	91 c2       	rjmp	.+1314   	; 0x486e <can_cmd+0x89e>
          Can_clear_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_RX_DATA:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    434c:	19 82       	std	Y+1, r1	; 0x01
    434e:	1a 82       	std	Y+2, r1	; 0x02
    4350:	1b 82       	std	Y+3, r1	; 0x03
    4352:	1c 82       	std	Y+4, r1	; 0x04
    4354:	fe 01       	movw	r30, r28
    4356:	31 96       	adiw	r30, 0x01	; 1
    4358:	32 81       	ldd	r19, Z+2	; 0x02
    435a:	93 2f       	mov	r25, r19
    435c:	92 95       	swap	r25
    435e:	96 95       	lsr	r25
    4360:	97 70       	andi	r25, 0x07	; 7
    4362:	83 81       	ldd	r24, Z+3	; 0x03
    4364:	88 0f       	add	r24, r24
    4366:	88 0f       	add	r24, r24
    4368:	88 0f       	add	r24, r24
    436a:	98 0f       	add	r25, r24
    436c:	90 93 f7 00 	sts	0x00F7, r25
    4370:	21 81       	ldd	r18, Z+1	; 0x01
    4372:	82 2f       	mov	r24, r18
    4374:	82 95       	swap	r24
    4376:	86 95       	lsr	r24
    4378:	87 70       	andi	r24, 0x07	; 7
    437a:	33 0f       	add	r19, r19
    437c:	33 0f       	add	r19, r19
    437e:	33 0f       	add	r19, r19
    4380:	83 0f       	add	r24, r19
    4382:	80 93 f6 00 	sts	0x00F6, r24
    4386:	99 81       	ldd	r25, Y+1	; 0x01
    4388:	22 0f       	add	r18, r18
    438a:	22 0f       	add	r18, r18
    438c:	22 0f       	add	r18, r18
    438e:	89 2f       	mov	r24, r25
    4390:	82 95       	swap	r24
    4392:	86 95       	lsr	r24
    4394:	87 70       	andi	r24, 0x07	; 7
    4396:	28 0f       	add	r18, r24
    4398:	20 93 f5 00 	sts	0x00F5, r18
    439c:	99 0f       	add	r25, r25
    439e:	99 0f       	add	r25, r25
    43a0:	99 0f       	add	r25, r25
    43a2:	90 93 f4 00 	sts	0x00F4, r25
          Can_set_dlc(cmd->dlc);
    43a6:	80 91 ef 00 	lds	r24, 0x00EF
    43aa:	f8 01       	movw	r30, r16
    43ac:	97 81       	ldd	r25, Z+7	; 0x07
    43ae:	89 2b       	or	r24, r25
    43b0:	80 93 ef 00 	sts	0x00EF, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    43b4:	13 86       	std	Z+11, r1	; 0x0b
    43b6:	80 91 f4 00 	lds	r24, 0x00F4
    43ba:	84 60       	ori	r24, 0x04	; 4
    43bc:	80 93 f4 00 	sts	0x00F4, r24
    43c0:	80 91 f0 00 	lds	r24, 0x00F0
    43c4:	8b 7f       	andi	r24, 0xFB	; 251
    43c6:	80 93 f0 00 	sts	0x00F0, r24
    43ca:	51 c2       	rjmp	.+1186   	; 0x486e <can_cmd+0x89e>
          Can_clear_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_RX_REMOTE:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    43cc:	19 82       	std	Y+1, r1	; 0x01
    43ce:	1a 82       	std	Y+2, r1	; 0x02
    43d0:	1b 82       	std	Y+3, r1	; 0x03
    43d2:	1c 82       	std	Y+4, r1	; 0x04
    43d4:	fe 01       	movw	r30, r28
    43d6:	31 96       	adiw	r30, 0x01	; 1
    43d8:	32 81       	ldd	r19, Z+2	; 0x02
    43da:	93 2f       	mov	r25, r19
    43dc:	92 95       	swap	r25
    43de:	96 95       	lsr	r25
    43e0:	97 70       	andi	r25, 0x07	; 7
    43e2:	83 81       	ldd	r24, Z+3	; 0x03
    43e4:	88 0f       	add	r24, r24
    43e6:	88 0f       	add	r24, r24
    43e8:	88 0f       	add	r24, r24
    43ea:	98 0f       	add	r25, r24
    43ec:	90 93 f7 00 	sts	0x00F7, r25
    43f0:	21 81       	ldd	r18, Z+1	; 0x01
    43f2:	82 2f       	mov	r24, r18
    43f4:	82 95       	swap	r24
    43f6:	86 95       	lsr	r24
    43f8:	87 70       	andi	r24, 0x07	; 7
    43fa:	33 0f       	add	r19, r19
    43fc:	33 0f       	add	r19, r19
    43fe:	33 0f       	add	r19, r19
    4400:	83 0f       	add	r24, r19
    4402:	80 93 f6 00 	sts	0x00F6, r24
    4406:	99 81       	ldd	r25, Y+1	; 0x01
    4408:	22 0f       	add	r18, r18
    440a:	22 0f       	add	r18, r18
    440c:	22 0f       	add	r18, r18
    440e:	89 2f       	mov	r24, r25
    4410:	82 95       	swap	r24
    4412:	86 95       	lsr	r24
    4414:	87 70       	andi	r24, 0x07	; 7
    4416:	28 0f       	add	r18, r24
    4418:	20 93 f5 00 	sts	0x00F5, r18
    441c:	99 0f       	add	r25, r25
    441e:	99 0f       	add	r25, r25
    4420:	99 0f       	add	r25, r25
    4422:	90 93 f4 00 	sts	0x00F4, r25
          Can_set_dlc(cmd->dlc);
    4426:	80 91 ef 00 	lds	r24, 0x00EF
    442a:	d8 01       	movw	r26, r16
    442c:	17 96       	adiw	r26, 0x07	; 7
    442e:	9c 91       	ld	r25, X
    4430:	17 97       	sbiw	r26, 0x07	; 7
    4432:	89 2b       	or	r24, r25
    4434:	80 93 ef 00 	sts	0x00EF, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    4438:	81 e0       	ldi	r24, 0x01	; 1
    443a:	1b 96       	adiw	r26, 0x0b	; 11
    443c:	8c 93       	st	X, r24
    443e:	80 91 f4 00 	lds	r24, 0x00F4
    4442:	84 60       	ori	r24, 0x04	; 4
    4444:	80 93 f4 00 	sts	0x00F4, r24
    4448:	80 91 f0 00 	lds	r24, 0x00F0
    444c:	84 60       	ori	r24, 0x04	; 4
    444e:	80 93 f0 00 	sts	0x00F0, r24
          Can_clear_rplv();
    4452:	80 91 ef 00 	lds	r24, 0x00EF
    4456:	8f 7d       	andi	r24, 0xDF	; 223
    4458:	08 c2       	rjmp	.+1040   	; 0x486a <can_cmd+0x89a>
          Can_clear_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    445a:	f8 01       	movw	r30, r16
    445c:	84 85       	ldd	r24, Z+12	; 0x0c
    445e:	33 96       	adiw	r30, 0x03	; 3
    4460:	88 23       	and	r24, r24
    4462:	69 f1       	breq	.+90     	; 0x44be <can_cmd+0x4ee>
    4464:	32 81       	ldd	r19, Z+2	; 0x02
    4466:	93 2f       	mov	r25, r19
    4468:	92 95       	swap	r25
    446a:	96 95       	lsr	r25
    446c:	97 70       	andi	r25, 0x07	; 7
    446e:	83 81       	ldd	r24, Z+3	; 0x03
    4470:	88 0f       	add	r24, r24
    4472:	88 0f       	add	r24, r24
    4474:	88 0f       	add	r24, r24
    4476:	98 0f       	add	r25, r24
    4478:	90 93 f3 00 	sts	0x00F3, r25
    447c:	21 81       	ldd	r18, Z+1	; 0x01
    447e:	82 2f       	mov	r24, r18
    4480:	82 95       	swap	r24
    4482:	86 95       	lsr	r24
    4484:	87 70       	andi	r24, 0x07	; 7
    4486:	33 0f       	add	r19, r19
    4488:	33 0f       	add	r19, r19
    448a:	33 0f       	add	r19, r19
    448c:	83 0f       	add	r24, r19
    448e:	80 93 f2 00 	sts	0x00F2, r24
    4492:	d8 01       	movw	r26, r16
    4494:	13 96       	adiw	r26, 0x03	; 3
    4496:	9c 91       	ld	r25, X
    4498:	22 0f       	add	r18, r18
    449a:	22 0f       	add	r18, r18
    449c:	22 0f       	add	r18, r18
    449e:	89 2f       	mov	r24, r25
    44a0:	82 95       	swap	r24
    44a2:	86 95       	lsr	r24
    44a4:	87 70       	andi	r24, 0x07	; 7
    44a6:	28 0f       	add	r18, r24
    44a8:	20 93 f1 00 	sts	0x00F1, r18
    44ac:	99 0f       	add	r25, r25
    44ae:	99 0f       	add	r25, r25
    44b0:	99 0f       	add	r25, r25
    44b2:	90 93 f0 00 	sts	0x00F0, r25
    44b6:	80 91 ef 00 	lds	r24, 0x00EF
    44ba:	80 61       	ori	r24, 0x10	; 16
    44bc:	16 c0       	rjmp	.+44     	; 0x44ea <can_cmd+0x51a>
          else              { Can_set_std_id(cmd->id.std);}
    44be:	d8 01       	movw	r26, r16
    44c0:	13 96       	adiw	r26, 0x03	; 3
    44c2:	2c 91       	ld	r18, X
    44c4:	81 81       	ldd	r24, Z+1	; 0x01
    44c6:	82 95       	swap	r24
    44c8:	88 0f       	add	r24, r24
    44ca:	80 7e       	andi	r24, 0xE0	; 224
    44cc:	92 2f       	mov	r25, r18
    44ce:	96 95       	lsr	r25
    44d0:	96 95       	lsr	r25
    44d2:	96 95       	lsr	r25
    44d4:	89 0f       	add	r24, r25
    44d6:	80 93 f3 00 	sts	0x00F3, r24
    44da:	22 95       	swap	r18
    44dc:	22 0f       	add	r18, r18
    44de:	20 7e       	andi	r18, 0xE0	; 224
    44e0:	20 93 f2 00 	sts	0x00F2, r18
    44e4:	80 91 ef 00 	lds	r24, 0x00EF
    44e8:	8f 7e       	andi	r24, 0xEF	; 239
    44ea:	80 93 ef 00 	sts	0x00EF, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    44ee:	8f ef       	ldi	r24, 0xFF	; 255
    44f0:	9f ef       	ldi	r25, 0xFF	; 255
    44f2:	af ef       	ldi	r26, 0xFF	; 255
    44f4:	bf ef       	ldi	r27, 0xFF	; 255
    44f6:	89 83       	std	Y+1, r24	; 0x01
    44f8:	9a 83       	std	Y+2, r25	; 0x02
    44fa:	ab 83       	std	Y+3, r26	; 0x03
    44fc:	bc 83       	std	Y+4, r27	; 0x04
    44fe:	fe 01       	movw	r30, r28
    4500:	31 96       	adiw	r30, 0x01	; 1
    4502:	32 81       	ldd	r19, Z+2	; 0x02
    4504:	93 2f       	mov	r25, r19
    4506:	92 95       	swap	r25
    4508:	96 95       	lsr	r25
    450a:	97 70       	andi	r25, 0x07	; 7
    450c:	83 81       	ldd	r24, Z+3	; 0x03
    450e:	88 0f       	add	r24, r24
    4510:	88 0f       	add	r24, r24
    4512:	88 0f       	add	r24, r24
    4514:	98 0f       	add	r25, r24
    4516:	90 93 f7 00 	sts	0x00F7, r25
    451a:	21 81       	ldd	r18, Z+1	; 0x01
    451c:	82 2f       	mov	r24, r18
    451e:	82 95       	swap	r24
    4520:	86 95       	lsr	r24
    4522:	87 70       	andi	r24, 0x07	; 7
    4524:	33 0f       	add	r19, r19
    4526:	33 0f       	add	r19, r19
    4528:	33 0f       	add	r19, r19
    452a:	83 0f       	add	r24, r19
    452c:	80 93 f6 00 	sts	0x00F6, r24
    4530:	99 81       	ldd	r25, Y+1	; 0x01
    4532:	22 0f       	add	r18, r18
    4534:	22 0f       	add	r18, r18
    4536:	22 0f       	add	r18, r18
    4538:	89 2f       	mov	r24, r25
    453a:	82 95       	swap	r24
    453c:	86 95       	lsr	r24
    453e:	87 70       	andi	r24, 0x07	; 7
    4540:	28 0f       	add	r18, r24
    4542:	20 93 f5 00 	sts	0x00F5, r18
    4546:	99 0f       	add	r25, r25
    4548:	99 0f       	add	r25, r25
    454a:	99 0f       	add	r25, r25
    454c:	90 93 f4 00 	sts	0x00F4, r25
          Can_set_dlc(cmd->dlc);
    4550:	80 91 ef 00 	lds	r24, 0x00EF
    4554:	f8 01       	movw	r30, r16
    4556:	97 81       	ldd	r25, Z+7	; 0x07
    4558:	89 2b       	or	r24, r25
    455a:	80 93 ef 00 	sts	0x00EF, r24
          Can_clear_rtrmsk();
    455e:	80 91 f4 00 	lds	r24, 0x00F4
    4562:	8b 7f       	andi	r24, 0xFB	; 251
    4564:	80 93 f4 00 	sts	0x00F4, r24
          Can_set_idemsk();
    4568:	80 91 f4 00 	lds	r24, 0x00F4
    456c:	81 60       	ori	r24, 0x01	; 1
    456e:	80 93 f4 00 	sts	0x00F4, r24
          Can_config_rx();       
    4572:	80 91 ef 00 	lds	r24, 0x00EF
    4576:	8f 73       	andi	r24, 0x3F	; 63
    4578:	80 93 ef 00 	sts	0x00EF, r24
    457c:	80 91 ef 00 	lds	r24, 0x00EF
    4580:	80 68       	ori	r24, 0x80	; 128
    4582:	53 ce       	rjmp	.-858    	; 0x422a <can_cmd+0x25a>
          break;
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    4584:	d8 01       	movw	r26, r16
    4586:	1c 96       	adiw	r26, 0x0c	; 12
    4588:	8c 91       	ld	r24, X
    458a:	f8 01       	movw	r30, r16
    458c:	33 96       	adiw	r30, 0x03	; 3
    458e:	88 23       	and	r24, r24
    4590:	61 f1       	breq	.+88     	; 0x45ea <can_cmd+0x61a>
    4592:	32 81       	ldd	r19, Z+2	; 0x02
    4594:	93 2f       	mov	r25, r19
    4596:	92 95       	swap	r25
    4598:	96 95       	lsr	r25
    459a:	97 70       	andi	r25, 0x07	; 7
    459c:	83 81       	ldd	r24, Z+3	; 0x03
    459e:	88 0f       	add	r24, r24
    45a0:	88 0f       	add	r24, r24
    45a2:	88 0f       	add	r24, r24
    45a4:	98 0f       	add	r25, r24
    45a6:	90 93 f3 00 	sts	0x00F3, r25
    45aa:	21 81       	ldd	r18, Z+1	; 0x01
    45ac:	82 2f       	mov	r24, r18
    45ae:	82 95       	swap	r24
    45b0:	86 95       	lsr	r24
    45b2:	87 70       	andi	r24, 0x07	; 7
    45b4:	33 0f       	add	r19, r19
    45b6:	33 0f       	add	r19, r19
    45b8:	33 0f       	add	r19, r19
    45ba:	83 0f       	add	r24, r19
    45bc:	80 93 f2 00 	sts	0x00F2, r24
    45c0:	f8 01       	movw	r30, r16
    45c2:	93 81       	ldd	r25, Z+3	; 0x03
    45c4:	22 0f       	add	r18, r18
    45c6:	22 0f       	add	r18, r18
    45c8:	22 0f       	add	r18, r18
    45ca:	89 2f       	mov	r24, r25
    45cc:	82 95       	swap	r24
    45ce:	86 95       	lsr	r24
    45d0:	87 70       	andi	r24, 0x07	; 7
    45d2:	28 0f       	add	r18, r24
    45d4:	20 93 f1 00 	sts	0x00F1, r18
    45d8:	99 0f       	add	r25, r25
    45da:	99 0f       	add	r25, r25
    45dc:	99 0f       	add	r25, r25
    45de:	90 93 f0 00 	sts	0x00F0, r25
    45e2:	80 91 ef 00 	lds	r24, 0x00EF
    45e6:	80 61       	ori	r24, 0x10	; 16
    45e8:	16 c0       	rjmp	.+44     	; 0x4616 <can_cmd+0x646>
          else              { Can_set_std_id(cmd->id.std);}
    45ea:	d8 01       	movw	r26, r16
    45ec:	13 96       	adiw	r26, 0x03	; 3
    45ee:	2c 91       	ld	r18, X
    45f0:	81 81       	ldd	r24, Z+1	; 0x01
    45f2:	82 95       	swap	r24
    45f4:	88 0f       	add	r24, r24
    45f6:	80 7e       	andi	r24, 0xE0	; 224
    45f8:	92 2f       	mov	r25, r18
    45fa:	96 95       	lsr	r25
    45fc:	96 95       	lsr	r25
    45fe:	96 95       	lsr	r25
    4600:	89 0f       	add	r24, r25
    4602:	80 93 f3 00 	sts	0x00F3, r24
    4606:	22 95       	swap	r18
    4608:	22 0f       	add	r18, r18
    460a:	20 7e       	andi	r18, 0xE0	; 224
    460c:	20 93 f2 00 	sts	0x00F2, r18
    4610:	80 91 ef 00 	lds	r24, 0x00EF
    4614:	8f 7e       	andi	r24, 0xEF	; 239
    4616:	80 93 ef 00 	sts	0x00EF, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    461a:	8f ef       	ldi	r24, 0xFF	; 255
    461c:	9f ef       	ldi	r25, 0xFF	; 255
    461e:	af ef       	ldi	r26, 0xFF	; 255
    4620:	bf ef       	ldi	r27, 0xFF	; 255
    4622:	89 83       	std	Y+1, r24	; 0x01
    4624:	9a 83       	std	Y+2, r25	; 0x02
    4626:	ab 83       	std	Y+3, r26	; 0x03
    4628:	bc 83       	std	Y+4, r27	; 0x04
    462a:	fe 01       	movw	r30, r28
    462c:	31 96       	adiw	r30, 0x01	; 1
    462e:	32 81       	ldd	r19, Z+2	; 0x02
    4630:	93 2f       	mov	r25, r19
    4632:	92 95       	swap	r25
    4634:	96 95       	lsr	r25
    4636:	97 70       	andi	r25, 0x07	; 7
    4638:	83 81       	ldd	r24, Z+3	; 0x03
    463a:	88 0f       	add	r24, r24
    463c:	88 0f       	add	r24, r24
    463e:	88 0f       	add	r24, r24
    4640:	98 0f       	add	r25, r24
    4642:	90 93 f7 00 	sts	0x00F7, r25
    4646:	21 81       	ldd	r18, Z+1	; 0x01
    4648:	82 2f       	mov	r24, r18
    464a:	82 95       	swap	r24
    464c:	86 95       	lsr	r24
    464e:	87 70       	andi	r24, 0x07	; 7
    4650:	33 0f       	add	r19, r19
    4652:	33 0f       	add	r19, r19
    4654:	33 0f       	add	r19, r19
    4656:	83 0f       	add	r24, r19
    4658:	80 93 f6 00 	sts	0x00F6, r24
    465c:	99 81       	ldd	r25, Y+1	; 0x01
    465e:	22 0f       	add	r18, r18
    4660:	22 0f       	add	r18, r18
    4662:	22 0f       	add	r18, r18
    4664:	89 2f       	mov	r24, r25
    4666:	82 95       	swap	r24
    4668:	86 95       	lsr	r24
    466a:	87 70       	andi	r24, 0x07	; 7
    466c:	28 0f       	add	r18, r24
    466e:	20 93 f5 00 	sts	0x00F5, r18
    4672:	99 0f       	add	r25, r25
    4674:	99 0f       	add	r25, r25
    4676:	99 0f       	add	r25, r25
    4678:	90 93 f4 00 	sts	0x00F4, r25
          Can_set_dlc(cmd->dlc);
    467c:	80 91 ef 00 	lds	r24, 0x00EF
    4680:	f8 01       	movw	r30, r16
    4682:	97 81       	ldd	r25, Z+7	; 0x07
    4684:	89 2b       	or	r24, r25
    4686:	80 93 ef 00 	sts	0x00EF, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    468a:	13 86       	std	Z+11, r1	; 0x0b
    468c:	80 91 f4 00 	lds	r24, 0x00F4
    4690:	84 60       	ori	r24, 0x04	; 4
    4692:	80 93 f4 00 	sts	0x00F4, r24
    4696:	80 91 f0 00 	lds	r24, 0x00F0
    469a:	8b 7f       	andi	r24, 0xFB	; 251
    469c:	80 93 f0 00 	sts	0x00F0, r24
    46a0:	63 cf       	rjmp	.-314    	; 0x4568 <can_cmd+0x598>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    46a2:	d8 01       	movw	r26, r16
    46a4:	1c 96       	adiw	r26, 0x0c	; 12
    46a6:	8c 91       	ld	r24, X
    46a8:	f8 01       	movw	r30, r16
    46aa:	33 96       	adiw	r30, 0x03	; 3
    46ac:	88 23       	and	r24, r24
    46ae:	61 f1       	breq	.+88     	; 0x4708 <can_cmd+0x738>
    46b0:	32 81       	ldd	r19, Z+2	; 0x02
    46b2:	93 2f       	mov	r25, r19
    46b4:	92 95       	swap	r25
    46b6:	96 95       	lsr	r25
    46b8:	97 70       	andi	r25, 0x07	; 7
    46ba:	83 81       	ldd	r24, Z+3	; 0x03
    46bc:	88 0f       	add	r24, r24
    46be:	88 0f       	add	r24, r24
    46c0:	88 0f       	add	r24, r24
    46c2:	98 0f       	add	r25, r24
    46c4:	90 93 f3 00 	sts	0x00F3, r25
    46c8:	21 81       	ldd	r18, Z+1	; 0x01
    46ca:	82 2f       	mov	r24, r18
    46cc:	82 95       	swap	r24
    46ce:	86 95       	lsr	r24
    46d0:	87 70       	andi	r24, 0x07	; 7
    46d2:	33 0f       	add	r19, r19
    46d4:	33 0f       	add	r19, r19
    46d6:	33 0f       	add	r19, r19
    46d8:	83 0f       	add	r24, r19
    46da:	80 93 f2 00 	sts	0x00F2, r24
    46de:	f8 01       	movw	r30, r16
    46e0:	93 81       	ldd	r25, Z+3	; 0x03
    46e2:	22 0f       	add	r18, r18
    46e4:	22 0f       	add	r18, r18
    46e6:	22 0f       	add	r18, r18
    46e8:	89 2f       	mov	r24, r25
    46ea:	82 95       	swap	r24
    46ec:	86 95       	lsr	r24
    46ee:	87 70       	andi	r24, 0x07	; 7
    46f0:	28 0f       	add	r18, r24
    46f2:	20 93 f1 00 	sts	0x00F1, r18
    46f6:	99 0f       	add	r25, r25
    46f8:	99 0f       	add	r25, r25
    46fa:	99 0f       	add	r25, r25
    46fc:	90 93 f0 00 	sts	0x00F0, r25
    4700:	80 91 ef 00 	lds	r24, 0x00EF
    4704:	80 61       	ori	r24, 0x10	; 16
    4706:	16 c0       	rjmp	.+44     	; 0x4734 <can_cmd+0x764>
          else              { Can_set_std_id(cmd->id.std);}
    4708:	d8 01       	movw	r26, r16
    470a:	13 96       	adiw	r26, 0x03	; 3
    470c:	2c 91       	ld	r18, X
    470e:	81 81       	ldd	r24, Z+1	; 0x01
    4710:	82 95       	swap	r24
    4712:	88 0f       	add	r24, r24
    4714:	80 7e       	andi	r24, 0xE0	; 224
    4716:	92 2f       	mov	r25, r18
    4718:	96 95       	lsr	r25
    471a:	96 95       	lsr	r25
    471c:	96 95       	lsr	r25
    471e:	89 0f       	add	r24, r25
    4720:	80 93 f3 00 	sts	0x00F3, r24
    4724:	22 95       	swap	r18
    4726:	22 0f       	add	r18, r18
    4728:	20 7e       	andi	r18, 0xE0	; 224
    472a:	20 93 f2 00 	sts	0x00F2, r18
    472e:	80 91 ef 00 	lds	r24, 0x00EF
    4732:	8f 7e       	andi	r24, 0xEF	; 239
    4734:	80 93 ef 00 	sts	0x00EF, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    4738:	8f ef       	ldi	r24, 0xFF	; 255
    473a:	9f ef       	ldi	r25, 0xFF	; 255
    473c:	af ef       	ldi	r26, 0xFF	; 255
    473e:	bf ef       	ldi	r27, 0xFF	; 255
    4740:	89 83       	std	Y+1, r24	; 0x01
    4742:	9a 83       	std	Y+2, r25	; 0x02
    4744:	ab 83       	std	Y+3, r26	; 0x03
    4746:	bc 83       	std	Y+4, r27	; 0x04
    4748:	fe 01       	movw	r30, r28
    474a:	31 96       	adiw	r30, 0x01	; 1
    474c:	32 81       	ldd	r19, Z+2	; 0x02
    474e:	93 2f       	mov	r25, r19
    4750:	92 95       	swap	r25
    4752:	96 95       	lsr	r25
    4754:	97 70       	andi	r25, 0x07	; 7
    4756:	83 81       	ldd	r24, Z+3	; 0x03
    4758:	88 0f       	add	r24, r24
    475a:	88 0f       	add	r24, r24
    475c:	88 0f       	add	r24, r24
    475e:	98 0f       	add	r25, r24
    4760:	90 93 f7 00 	sts	0x00F7, r25
    4764:	21 81       	ldd	r18, Z+1	; 0x01
    4766:	82 2f       	mov	r24, r18
    4768:	82 95       	swap	r24
    476a:	86 95       	lsr	r24
    476c:	87 70       	andi	r24, 0x07	; 7
    476e:	33 0f       	add	r19, r19
    4770:	33 0f       	add	r19, r19
    4772:	33 0f       	add	r19, r19
    4774:	83 0f       	add	r24, r19
    4776:	80 93 f6 00 	sts	0x00F6, r24
    477a:	99 81       	ldd	r25, Y+1	; 0x01
    477c:	22 0f       	add	r18, r18
    477e:	22 0f       	add	r18, r18
    4780:	22 0f       	add	r18, r18
    4782:	89 2f       	mov	r24, r25
    4784:	82 95       	swap	r24
    4786:	86 95       	lsr	r24
    4788:	87 70       	andi	r24, 0x07	; 7
    478a:	28 0f       	add	r18, r24
    478c:	20 93 f5 00 	sts	0x00F5, r18
    4790:	99 0f       	add	r25, r25
    4792:	99 0f       	add	r25, r25
    4794:	99 0f       	add	r25, r25
    4796:	90 93 f4 00 	sts	0x00F4, r25
          Can_set_dlc(cmd->dlc);
    479a:	80 91 ef 00 	lds	r24, 0x00EF
    479e:	f8 01       	movw	r30, r16
    47a0:	97 81       	ldd	r25, Z+7	; 0x07
    47a2:	89 2b       	or	r24, r25
    47a4:	80 93 ef 00 	sts	0x00EF, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    47a8:	81 e0       	ldi	r24, 0x01	; 1
    47aa:	83 87       	std	Z+11, r24	; 0x0b
    47ac:	80 91 f4 00 	lds	r24, 0x00F4
    47b0:	84 60       	ori	r24, 0x04	; 4
    47b2:	80 93 f4 00 	sts	0x00F4, r24
    47b6:	80 91 f0 00 	lds	r24, 0x00F0
    47ba:	84 60       	ori	r24, 0x04	; 4
    47bc:	80 93 f0 00 	sts	0x00F0, r24
          Can_clear_rplv();
    47c0:	80 91 ef 00 	lds	r24, 0x00EF
    47c4:	8f 7d       	andi	r24, 0xDF	; 223
    47c6:	80 93 ef 00 	sts	0x00EF, r24
    47ca:	ce ce       	rjmp	.-612    	; 0x4568 <can_cmd+0x598>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    47cc:	d8 01       	movw	r26, r16
    47ce:	18 96       	adiw	r26, 0x08	; 8
    47d0:	ed 91       	ld	r30, X+
    47d2:	fc 91       	ld	r31, X
    47d4:	19 97       	sbiw	r26, 0x09	; 9
    47d6:	e9 0f       	add	r30, r25
    47d8:	f1 1d       	adc	r31, r1
    47da:	80 81       	ld	r24, Z
    47dc:	80 93 fa 00 	sts	0x00FA, r24
    47e0:	9f 5f       	subi	r25, 0xFF	; 255
    47e2:	94 17       	cp	r25, r20
    47e4:	98 f3       	brcs	.-26     	; 0x47cc <can_cmd+0x7fc>
          u32_temp=0; Can_set_ext_msk(u32_temp);
    47e6:	19 82       	std	Y+1, r1	; 0x01
    47e8:	1a 82       	std	Y+2, r1	; 0x02
    47ea:	1b 82       	std	Y+3, r1	; 0x03
    47ec:	1c 82       	std	Y+4, r1	; 0x04
    47ee:	fe 01       	movw	r30, r28
    47f0:	31 96       	adiw	r30, 0x01	; 1
    47f2:	32 81       	ldd	r19, Z+2	; 0x02
    47f4:	93 2f       	mov	r25, r19
    47f6:	92 95       	swap	r25
    47f8:	96 95       	lsr	r25
    47fa:	97 70       	andi	r25, 0x07	; 7
    47fc:	83 81       	ldd	r24, Z+3	; 0x03
    47fe:	88 0f       	add	r24, r24
    4800:	88 0f       	add	r24, r24
    4802:	88 0f       	add	r24, r24
    4804:	98 0f       	add	r25, r24
    4806:	90 93 f7 00 	sts	0x00F7, r25
    480a:	21 81       	ldd	r18, Z+1	; 0x01
    480c:	82 2f       	mov	r24, r18
    480e:	82 95       	swap	r24
    4810:	86 95       	lsr	r24
    4812:	87 70       	andi	r24, 0x07	; 7
    4814:	33 0f       	add	r19, r19
    4816:	33 0f       	add	r19, r19
    4818:	33 0f       	add	r19, r19
    481a:	83 0f       	add	r24, r19
    481c:	80 93 f6 00 	sts	0x00F6, r24
    4820:	99 81       	ldd	r25, Y+1	; 0x01
    4822:	22 0f       	add	r18, r18
    4824:	22 0f       	add	r18, r18
    4826:	22 0f       	add	r18, r18
    4828:	89 2f       	mov	r24, r25
    482a:	82 95       	swap	r24
    482c:	86 95       	lsr	r24
    482e:	87 70       	andi	r24, 0x07	; 7
    4830:	28 0f       	add	r18, r24
    4832:	20 93 f5 00 	sts	0x00F5, r18
    4836:	99 0f       	add	r25, r25
    4838:	99 0f       	add	r25, r25
    483a:	99 0f       	add	r25, r25
    483c:	90 93 f4 00 	sts	0x00F4, r25
          Can_set_dlc(cmd->dlc);
    4840:	80 91 ef 00 	lds	r24, 0x00EF
    4844:	48 2b       	or	r20, r24
    4846:	40 93 ef 00 	sts	0x00EF, r20
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    484a:	81 e0       	ldi	r24, 0x01	; 1
    484c:	f8 01       	movw	r30, r16
    484e:	83 87       	std	Z+11, r24	; 0x0b
    4850:	80 91 f4 00 	lds	r24, 0x00F4
    4854:	84 60       	ori	r24, 0x04	; 4
    4856:	80 93 f4 00 	sts	0x00F4, r24
    485a:	80 91 f0 00 	lds	r24, 0x00F0
    485e:	84 60       	ori	r24, 0x04	; 4
    4860:	80 93 f0 00 	sts	0x00F0, r24
          Can_set_rplv();
    4864:	80 91 ef 00 	lds	r24, 0x00EF
    4868:	80 62       	ori	r24, 0x20	; 32
    486a:	80 93 ef 00 	sts	0x00EF, r24
          Can_clear_idemsk();
    486e:	80 91 f4 00 	lds	r24, 0x00F4
    4872:	8e 7f       	andi	r24, 0xFE	; 254
    4874:	7c ce       	rjmp	.-776    	; 0x456e <can_cmd+0x59e>
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    4876:	d8 01       	movw	r26, r16
    4878:	1c 96       	adiw	r26, 0x0c	; 12
    487a:	8c 91       	ld	r24, X
    487c:	f8 01       	movw	r30, r16
    487e:	33 96       	adiw	r30, 0x03	; 3
    4880:	88 23       	and	r24, r24
    4882:	91 f1       	breq	.+100    	; 0x48e8 <can_cmd+0x918>
    4884:	32 81       	ldd	r19, Z+2	; 0x02
    4886:	93 2f       	mov	r25, r19
    4888:	92 95       	swap	r25
    488a:	96 95       	lsr	r25
    488c:	97 70       	andi	r25, 0x07	; 7
    488e:	83 81       	ldd	r24, Z+3	; 0x03
    4890:	88 0f       	add	r24, r24
    4892:	88 0f       	add	r24, r24
    4894:	88 0f       	add	r24, r24
    4896:	98 0f       	add	r25, r24
    4898:	90 93 f3 00 	sts	0x00F3, r25
    489c:	21 81       	ldd	r18, Z+1	; 0x01
    489e:	82 2f       	mov	r24, r18
    48a0:	82 95       	swap	r24
    48a2:	86 95       	lsr	r24
    48a4:	87 70       	andi	r24, 0x07	; 7
    48a6:	33 0f       	add	r19, r19
    48a8:	33 0f       	add	r19, r19
    48aa:	33 0f       	add	r19, r19
    48ac:	83 0f       	add	r24, r19
    48ae:	80 93 f2 00 	sts	0x00F2, r24
    48b2:	f8 01       	movw	r30, r16
    48b4:	93 81       	ldd	r25, Z+3	; 0x03
    48b6:	22 0f       	add	r18, r18
    48b8:	22 0f       	add	r18, r18
    48ba:	22 0f       	add	r18, r18
    48bc:	89 2f       	mov	r24, r25
    48be:	82 95       	swap	r24
    48c0:	86 95       	lsr	r24
    48c2:	87 70       	andi	r24, 0x07	; 7
    48c4:	28 0f       	add	r18, r24
    48c6:	20 93 f1 00 	sts	0x00F1, r18
    48ca:	99 0f       	add	r25, r25
    48cc:	99 0f       	add	r25, r25
    48ce:	99 0f       	add	r25, r25
    48d0:	90 93 f0 00 	sts	0x00F0, r25
    48d4:	80 91 ef 00 	lds	r24, 0x00EF
    48d8:	80 61       	ori	r24, 0x10	; 16
    48da:	80 93 ef 00 	sts	0x00EF, r24
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    48de:	d8 01       	movw	r26, r16
    48e0:	17 96       	adiw	r26, 0x07	; 7
    48e2:	4c 91       	ld	r20, X
    48e4:	90 e0       	ldi	r25, 0x00	; 0
    48e6:	22 c0       	rjmp	.+68     	; 0x492c <can_cmd+0x95c>
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
    48e8:	d8 01       	movw	r26, r16
    48ea:	13 96       	adiw	r26, 0x03	; 3
    48ec:	2c 91       	ld	r18, X
    48ee:	81 81       	ldd	r24, Z+1	; 0x01
    48f0:	82 95       	swap	r24
    48f2:	88 0f       	add	r24, r24
    48f4:	80 7e       	andi	r24, 0xE0	; 224
    48f6:	92 2f       	mov	r25, r18
    48f8:	96 95       	lsr	r25
    48fa:	96 95       	lsr	r25
    48fc:	96 95       	lsr	r25
    48fe:	89 0f       	add	r24, r25
    4900:	80 93 f3 00 	sts	0x00F3, r24
    4904:	22 95       	swap	r18
    4906:	22 0f       	add	r18, r18
    4908:	20 7e       	andi	r18, 0xE0	; 224
    490a:	20 93 f2 00 	sts	0x00F2, r18
    490e:	80 91 ef 00 	lds	r24, 0x00EF
    4912:	8f 7e       	andi	r24, 0xEF	; 239
    4914:	e2 cf       	rjmp	.-60     	; 0x48da <can_cmd+0x90a>
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    4916:	d8 01       	movw	r26, r16
    4918:	18 96       	adiw	r26, 0x08	; 8
    491a:	ed 91       	ld	r30, X+
    491c:	fc 91       	ld	r31, X
    491e:	19 97       	sbiw	r26, 0x09	; 9
    4920:	e9 0f       	add	r30, r25
    4922:	f1 1d       	adc	r31, r1
    4924:	80 81       	ld	r24, Z
    4926:	80 93 fa 00 	sts	0x00FA, r24
    492a:	9f 5f       	subi	r25, 0xFF	; 255
    492c:	94 17       	cp	r25, r20
    492e:	98 f3       	brcs	.-26     	; 0x4916 <can_cmd+0x946>
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    4930:	8f ef       	ldi	r24, 0xFF	; 255
    4932:	9f ef       	ldi	r25, 0xFF	; 255
    4934:	af ef       	ldi	r26, 0xFF	; 255
    4936:	bf ef       	ldi	r27, 0xFF	; 255
    4938:	89 83       	std	Y+1, r24	; 0x01
    493a:	9a 83       	std	Y+2, r25	; 0x02
    493c:	ab 83       	std	Y+3, r26	; 0x03
    493e:	bc 83       	std	Y+4, r27	; 0x04
    4940:	fe 01       	movw	r30, r28
    4942:	31 96       	adiw	r30, 0x01	; 1
    4944:	32 81       	ldd	r19, Z+2	; 0x02
    4946:	93 2f       	mov	r25, r19
    4948:	92 95       	swap	r25
    494a:	96 95       	lsr	r25
    494c:	97 70       	andi	r25, 0x07	; 7
    494e:	83 81       	ldd	r24, Z+3	; 0x03
    4950:	88 0f       	add	r24, r24
    4952:	88 0f       	add	r24, r24
    4954:	88 0f       	add	r24, r24
    4956:	98 0f       	add	r25, r24
    4958:	90 93 f7 00 	sts	0x00F7, r25
    495c:	21 81       	ldd	r18, Z+1	; 0x01
    495e:	82 2f       	mov	r24, r18
    4960:	82 95       	swap	r24
    4962:	86 95       	lsr	r24
    4964:	87 70       	andi	r24, 0x07	; 7
    4966:	33 0f       	add	r19, r19
    4968:	33 0f       	add	r19, r19
    496a:	33 0f       	add	r19, r19
    496c:	83 0f       	add	r24, r19
    496e:	80 93 f6 00 	sts	0x00F6, r24
    4972:	99 81       	ldd	r25, Y+1	; 0x01
    4974:	22 0f       	add	r18, r18
    4976:	22 0f       	add	r18, r18
    4978:	22 0f       	add	r18, r18
    497a:	89 2f       	mov	r24, r25
    497c:	82 95       	swap	r24
    497e:	86 95       	lsr	r24
    4980:	87 70       	andi	r24, 0x07	; 7
    4982:	28 0f       	add	r18, r24
    4984:	20 93 f5 00 	sts	0x00F5, r18
    4988:	99 0f       	add	r25, r25
    498a:	99 0f       	add	r25, r25
    498c:	99 0f       	add	r25, r25
    498e:	90 93 f4 00 	sts	0x00F4, r25
          Can_set_dlc(cmd->dlc);
    4992:	80 91 ef 00 	lds	r24, 0x00EF
    4996:	48 2b       	or	r20, r24
    4998:	40 93 ef 00 	sts	0x00EF, r20
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    499c:	81 e0       	ldi	r24, 0x01	; 1
    499e:	f8 01       	movw	r30, r16
    49a0:	83 87       	std	Z+11, r24	; 0x0b
    49a2:	80 91 f4 00 	lds	r24, 0x00F4
    49a6:	84 60       	ori	r24, 0x04	; 4
    49a8:	80 93 f4 00 	sts	0x00F4, r24
    49ac:	80 91 f0 00 	lds	r24, 0x00F0
    49b0:	84 60       	ori	r24, 0x04	; 4
    49b2:	80 93 f0 00 	sts	0x00F0, r24
          Can_set_rplv();
    49b6:	80 91 ef 00 	lds	r24, 0x00EF
    49ba:	80 62       	ori	r24, 0x20	; 32
    49bc:	04 cf       	rjmp	.-504    	; 0x47c6 <can_cmd+0x7f6>
          Can_config_rx();       
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    49be:	d8 01       	movw	r26, r16
    49c0:	1a 96       	adiw	r26, 0x0a	; 10
    49c2:	1c 92       	st	X, r1
    49c4:	34 cc       	rjmp	.-1944   	; 0x422e <can_cmd+0x25e>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    49c6:	8f e1       	ldi	r24, 0x1F	; 31
    49c8:	f8 01       	movw	r30, r16
    49ca:	82 87       	std	Z+10, r24	; 0x0a
    49cc:	8f ef       	ldi	r24, 0xFF	; 255
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
    49ce:	24 96       	adiw	r28, 0x04	; 4
    49d0:	e4 e0       	ldi	r30, 0x04	; 4
    49d2:	0c 94 cc 2e 	jmp	0x5d98	; 0x5d98 <__epilogue_restores__+0x1c>

000049d6 <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
U8 can_init(U8 mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
    49d6:	0e 94 48 1f 	call	0x3e90	; 0x3e90 <can_fixed_baudrate>
    49da:	88 23       	and	r24, r24
    49dc:	41 f0       	breq	.+16     	; 0x49ee <can_init+0x18>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
    49de:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <can_clear_all_mob>
    Can_enable();                               // c.f. macro in "can_drv.h" 
    49e2:	80 91 d8 00 	lds	r24, 0x00D8
    49e6:	82 60       	ori	r24, 0x02	; 2
    49e8:	80 93 d8 00 	sts	0x00D8, r24
    49ec:	81 e0       	ldi	r24, 0x01	; 1
    return (1);
}
    49ee:	08 95       	ret

000049f0 <init_can_data_mobs>:

U8 tx_remote_buffer[8];
st_cmd_t tx_remote_msg;

void init_can_data_mobs(void)
{
    49f0:	a0 e1       	ldi	r26, 0x10	; 16
    49f2:	ba e0       	ldi	r27, 0x0A	; 10
    49f4:	4b ed       	ldi	r20, 0xDB	; 219
    49f6:	59 e0       	ldi	r21, 0x09	; 9
    49f8:	20 e0       	ldi	r18, 0x00	; 0
    49fa:	30 e0       	ldi	r19, 0x00	; 0
    U8 i,j;

    for (i=0; i<num_of_response_mobs; i++) {
        response_msg[i].pt_data = &response_buffer[i][0];
    49fc:	11 96       	adiw	r26, 0x01	; 1
    49fe:	5c 93       	st	X, r21
    4a00:	4e 93       	st	-X, r20
        response_msg[i].status = 0;
    4a02:	12 96       	adiw	r26, 0x02	; 2
    4a04:	1c 92       	st	X, r1
    4a06:	12 97       	sbiw	r26, 0x02	; 2
    4a08:	f9 01       	movw	r30, r18
    4a0a:	83 e0       	ldi	r24, 0x03	; 3
    4a0c:	ee 0f       	add	r30, r30
    4a0e:	ff 1f       	adc	r31, r31
    4a10:	8a 95       	dec	r24
    4a12:	e1 f7       	brne	.-8      	; 0x4a0c <init_can_data_mobs+0x1c>
    4a14:	e5 52       	subi	r30, 0x25	; 37
    4a16:	f6 4f       	sbci	r31, 0xF6	; 246
    4a18:	80 e0       	ldi	r24, 0x00	; 0
        for (j=0; j<9; j++) {
                response_buffer[i][j] = 0;
    4a1a:	11 92       	st	Z+, r1
    U8 i,j;

    for (i=0; i<num_of_response_mobs; i++) {
        response_msg[i].pt_data = &response_buffer[i][0];
        response_msg[i].status = 0;
        for (j=0; j<9; j++) {
    4a1c:	8f 5f       	subi	r24, 0xFF	; 255
    4a1e:	89 30       	cpi	r24, 0x09	; 9
    4a20:	e1 f7       	brne	.-8      	; 0x4a1a <init_can_data_mobs+0x2a>
    4a22:	2f 5f       	subi	r18, 0xFF	; 255
    4a24:	3f 4f       	sbci	r19, 0xFF	; 255
    4a26:	1d 96       	adiw	r26, 0x0d	; 13
    4a28:	48 5f       	subi	r20, 0xF8	; 248
    4a2a:	5f 4f       	sbci	r21, 0xFF	; 255

void init_can_data_mobs(void)
{
    U8 i,j;

    for (i=0; i<num_of_response_mobs; i++) {
    4a2c:	22 30       	cpi	r18, 0x02	; 2
    4a2e:	31 05       	cpc	r19, r1
    4a30:	29 f7       	brne	.-54     	; 0x49fc <init_can_data_mobs+0xc>
        response_msg[i].status = 0;
        for (j=0; j<9; j++) {
                response_buffer[i][j] = 0;
        }
    }
}
    4a32:	08 95       	ret

00004a34 <can_update_rx_msg>:

    while (can_get_status(&tx_remote_msg) == CAN_STATUS_NOT_COMPLETED);
}

unsigned short int can_update_rx_msg(st_cmd_t* msg, U8 msg_id, U8 dlc)
{
    4a34:	cf 93       	push	r28
    4a36:	df 93       	push	r29
    4a38:	ec 01       	movw	r28, r24
        U8 i;
        
        msg->id.std = msg_id;
    4a3a:	6b 83       	std	Y+3, r22	; 0x03
    4a3c:	1c 82       	std	Y+4, r1	; 0x04
        msg->ctrl.ide = 0;
    4a3e:	1c 86       	std	Y+12, r1	; 0x0c
        msg->ctrl.rtr = 0;
    4a40:	1b 86       	std	Y+11, r1	; 0x0b
        msg->dlc = dlc;
    4a42:	4f 83       	std	Y+7, r20	; 0x07
        msg->cmd = CMD_RX_DATA_MASKED;
    4a44:	88 e0       	ldi	r24, 0x08	; 8
    4a46:	90 e0       	ldi	r25, 0x00	; 0
    4a48:	9a 83       	std	Y+2, r25	; 0x02
    4a4a:	89 83       	std	Y+1, r24	; 0x01

        while(can_cmd(msg) != CAN_CMD_ACCEPTED);
    4a4c:	ce 01       	movw	r24, r28
    4a4e:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <can_cmd>
    4a52:	88 23       	and	r24, r24
    4a54:	d9 f7       	brne	.-10     	; 0x4a4c <can_update_rx_msg+0x18>
}
    4a56:	df 91       	pop	r29
    4a58:	cf 91       	pop	r28
    4a5a:	08 95       	ret

00004a5c <can_data_mob_setup>:
        }
    }
}

void can_data_mob_setup(U8 mob_num)
{
    4a5c:	cf 93       	push	r28
    4a5e:	df 93       	push	r29
    response_msg[mob_num].id.std = 128;
    4a60:	48 2f       	mov	r20, r24
    4a62:	50 e0       	ldi	r21, 0x00	; 0
    4a64:	2d e0       	ldi	r18, 0x0D	; 13
    4a66:	30 e0       	ldi	r19, 0x00	; 0
    4a68:	42 9f       	mul	r20, r18
    4a6a:	f0 01       	movw	r30, r0
    4a6c:	43 9f       	mul	r20, r19
    4a6e:	f0 0d       	add	r31, r0
    4a70:	52 9f       	mul	r21, r18
    4a72:	f0 0d       	add	r31, r0
    4a74:	11 24       	eor	r1, r1
    4a76:	e8 5f       	subi	r30, 0xF8	; 248
    4a78:	f5 4f       	sbci	r31, 0xF5	; 245
    4a7a:	20 e8       	ldi	r18, 0x80	; 128
    4a7c:	30 e0       	ldi	r19, 0x00	; 0
    4a7e:	34 83       	std	Z+4, r19	; 0x04
    4a80:	23 83       	std	Z+3, r18	; 0x03
    response_msg[mob_num].ctrl.ide = 0;
    4a82:	14 86       	std	Z+12, r1	; 0x0c
    response_msg[mob_num].ctrl.rtr = 0;
    4a84:	13 86       	std	Z+11, r1	; 0x0b
    response_msg[mob_num].dlc = 8;
    4a86:	98 e0       	ldi	r25, 0x08	; 8
    4a88:	97 83       	std	Z+7, r25	; 0x07
    response_msg[mob_num].cmd = CMD_RX_DATA_MASKED;
    4a8a:	28 e0       	ldi	r18, 0x08	; 8
    4a8c:	30 e0       	ldi	r19, 0x00	; 0
    4a8e:	32 83       	std	Z+2, r19	; 0x02
    4a90:	21 83       	std	Z+1, r18	; 0x01
    
    while (can_cmd(&response_msg[mob_num]) != CAN_CMD_ACCEPTED);
    4a92:	9d e0       	ldi	r25, 0x0D	; 13
    4a94:	89 9f       	mul	r24, r25
    4a96:	e0 01       	movw	r28, r0
    4a98:	11 24       	eor	r1, r1
    4a9a:	c8 5f       	subi	r28, 0xF8	; 248
    4a9c:	d5 4f       	sbci	r29, 0xF5	; 245
    4a9e:	ce 01       	movw	r24, r28
    4aa0:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <can_cmd>
    4aa4:	88 23       	and	r24, r24
    4aa6:	d9 f7       	brne	.-10     	; 0x4a9e <can_data_mob_setup+0x42>
}
    4aa8:	df 91       	pop	r29
    4aaa:	cf 91       	pop	r28
    4aac:	08 95       	ret

00004aae <can_send>:

/* funktion til at sende en besked der er 1 byte lang */
void can_send(U8 msg_id, U8 msg, U8 dlc)
{
    tx_remote_buffer[0] = msg; 
    4aae:	60 93 d3 09 	sts	0x09D3, r22

    tx_remote_msg.id.std = msg_id;
    4ab2:	80 93 ee 09 	sts	0x09EE, r24
    4ab6:	10 92 ef 09 	sts	0x09EF, r1
    tx_remote_msg.ctrl.ide = 0;
    4aba:	10 92 f7 09 	sts	0x09F7, r1
    tx_remote_msg.ctrl.rtr = 1;
    4abe:	81 e0       	ldi	r24, 0x01	; 1
    4ac0:	80 93 f6 09 	sts	0x09F6, r24
    tx_remote_msg.dlc = dlc;
    4ac4:	40 93 f2 09 	sts	0x09F2, r20
    tx_remote_msg.cmd = CMD_TX_DATA;
    4ac8:	82 e0       	ldi	r24, 0x02	; 2
    4aca:	90 e0       	ldi	r25, 0x00	; 0
    4acc:	90 93 ed 09 	sts	0x09ED, r25
    4ad0:	80 93 ec 09 	sts	0x09EC, r24

    while (can_cmd(&tx_remote_msg) != CAN_CMD_ACCEPTED);
    4ad4:	8b ee       	ldi	r24, 0xEB	; 235
    4ad6:	99 e0       	ldi	r25, 0x09	; 9
    4ad8:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <can_cmd>
    4adc:	88 23       	and	r24, r24
    4ade:	d1 f7       	brne	.-12     	; 0x4ad4 <can_send+0x26>

    while (can_get_status(&tx_remote_msg) == CAN_STATUS_NOT_COMPLETED);
    4ae0:	8b ee       	ldi	r24, 0xEB	; 235
    4ae2:	99 e0       	ldi	r25, 0x09	; 9
    4ae4:	0e 94 55 1f 	call	0x3eaa	; 0x3eaa <can_get_status>
    4ae8:	81 30       	cpi	r24, 0x01	; 1
    4aea:	d1 f3       	breq	.-12     	; 0x4ae0 <can_send+0x32>
}
    4aec:	08 95       	ret

00004aee <__vector_21>:
	}
}

/* Funktion til at læse data fra ECU */
ISR(USART0_RX_vect)
{
    4aee:	1f 92       	push	r1
    4af0:	0f 92       	push	r0
    4af2:	0f b6       	in	r0, 0x3f	; 63
    4af4:	0f 92       	push	r0
    4af6:	0b b6       	in	r0, 0x3b	; 59
    4af8:	0f 92       	push	r0
    4afa:	11 24       	eor	r1, r1
    4afc:	2f 93       	push	r18
    4afe:	3f 93       	push	r19
    4b00:	8f 93       	push	r24
    4b02:	ef 93       	push	r30
    4b04:	ff 93       	push	r31
	if (RecIndex <= 114) {			// Der skal modtages 228 bytes fra ECU'en
    4b06:	20 91 31 03 	lds	r18, 0x0331
    4b0a:	30 91 32 03 	lds	r19, 0x0332
    4b0e:	23 37       	cpi	r18, 0x73	; 115
    4b10:	31 05       	cpc	r19, r1
    4b12:	64 f4       	brge	.+24     	; 0x4b2c <__vector_21+0x3e>
		EcuData[RecIndex] = UDR0;	// Gem data fra ECU
    4b14:	80 91 c6 00 	lds	r24, 0x00C6
    4b18:	f9 01       	movw	r30, r18
    4b1a:	e8 59       	subi	r30, 0x98	; 152
    4b1c:	fe 4f       	sbci	r31, 0xFE	; 254
    4b1e:	80 83       	st	Z, r24
		RecIndex++;
    4b20:	2f 5f       	subi	r18, 0xFF	; 255
    4b22:	3f 4f       	sbci	r19, 0xFF	; 255
    4b24:	30 93 32 03 	sts	0x0332, r19
    4b28:	20 93 31 03 	sts	0x0331, r18
	}
}
    4b2c:	ff 91       	pop	r31
    4b2e:	ef 91       	pop	r30
    4b30:	8f 91       	pop	r24
    4b32:	3f 91       	pop	r19
    4b34:	2f 91       	pop	r18
    4b36:	0f 90       	pop	r0
    4b38:	0b be       	out	0x3b, r0	; 59
    4b3a:	0f 90       	pop	r0
    4b3c:	0f be       	out	0x3f, r0	; 63
    4b3e:	0f 90       	pop	r0
    4b40:	1f 90       	pop	r1
    4b42:	18 95       	reti

00004b44 <__vector_33>:

/* ISR to take care of xbee data sending */
ISR(USART1_UDRE_vect)
{
    4b44:	1f 92       	push	r1
    4b46:	0f 92       	push	r0
    4b48:	0f b6       	in	r0, 0x3f	; 63
    4b4a:	0f 92       	push	r0
    4b4c:	0b b6       	in	r0, 0x3b	; 59
    4b4e:	0f 92       	push	r0
    4b50:	11 24       	eor	r1, r1
    4b52:	2f 93       	push	r18
    4b54:	3f 93       	push	r19
    4b56:	4f 93       	push	r20
    4b58:	5f 93       	push	r21
    4b5a:	6f 93       	push	r22
    4b5c:	7f 93       	push	r23
    4b5e:	8f 93       	push	r24
    4b60:	9f 93       	push	r25
    4b62:	af 93       	push	r26
    4b64:	bf 93       	push	r27
    4b66:	ef 93       	push	r30
    4b68:	ff 93       	push	r31
	 * -Check if sending package start or package data and if more data 
	 * is to be send
	 * -Send the right data based on some buffer index
	 * -Clear sending bit when done with all data
	 */
	UCSR1A &= ~(1<<UDRE1);
    4b6a:	80 91 c8 00 	lds	r24, 0x00C8
    4b6e:	8f 7d       	andi	r24, 0xDF	; 223
    4b70:	80 93 c8 00 	sts	0x00C8, r24
	/* if xbee_seq_index is less than 3 send package start sequence */
	if (xbee_seq_index<3) {
    4b74:	90 91 3a 03 	lds	r25, 0x033A
    4b78:	93 30       	cpi	r25, 0x03	; 3
    4b7a:	58 f4       	brcc	.+22     	; 0x4b92 <__vector_33+0x4e>
		UDR1 = start_sequence[xbee_seq_index++];
    4b7c:	e9 2f       	mov	r30, r25
    4b7e:	f0 e0       	ldi	r31, 0x00	; 0
    4b80:	e1 5f       	subi	r30, 0xF1	; 241
    4b82:	fe 4f       	sbci	r31, 0xFE	; 254
    4b84:	80 81       	ld	r24, Z
    4b86:	80 93 ce 00 	sts	0x00CE, r24
    4b8a:	9f 5f       	subi	r25, 0xFF	; 255
    4b8c:	90 93 3a 03 	sts	0x033A, r25
    4b90:	48 c0       	rjmp	.+144    	; 0x4c22 <__vector_33+0xde>
	} else if (!QUEUE_EMPTY(my_q)) {
    4b92:	20 91 89 05 	lds	r18, 0x0589
    4b96:	30 91 8a 05 	lds	r19, 0x058A
    4b9a:	80 91 8b 05 	lds	r24, 0x058B
    4b9e:	90 91 8c 05 	lds	r25, 0x058C
    4ba2:	28 17       	cp	r18, r24
    4ba4:	39 07       	cpc	r19, r25
    4ba6:	b1 f1       	breq	.+108    	; 0x4c14 <__vector_33+0xd0>
		if (nextId == 0) {
    4ba8:	80 91 36 03 	lds	r24, 0x0336
    4bac:	88 23       	and	r24, r24
    4bae:	59 f5       	brne	.+86     	; 0x4c06 <__vector_33+0xc2>
			QUEUE_GET(my_q, tmp);
    4bb0:	f9 01       	movw	r30, r18
    4bb2:	e7 57       	subi	r30, 0x77	; 119
    4bb4:	fa 4f       	sbci	r31, 0xFA	; 250
    4bb6:	47 81       	ldd	r20, Z+7	; 0x07
    4bb8:	60 91 8d 05 	lds	r22, 0x058D
    4bbc:	70 91 8e 05 	lds	r23, 0x058E
    4bc0:	c9 01       	movw	r24, r18
    4bc2:	01 96       	adiw	r24, 0x01	; 1
    4bc4:	0e 94 6d 2e 	call	0x5cda	; 0x5cda <__divmodhi4>
    4bc8:	90 93 8a 05 	sts	0x058A, r25
    4bcc:	80 93 89 05 	sts	0x0589, r24
    4bd0:	80 91 8f 05 	lds	r24, 0x058F
    4bd4:	81 50       	subi	r24, 0x01	; 1
    4bd6:	80 93 8f 05 	sts	0x058F, r24
			nextId = valueObjects[tmp].length;
    4bda:	e4 2f       	mov	r30, r20
    4bdc:	f0 e0       	ldi	r31, 0x00	; 0
    4bde:	ee 0f       	add	r30, r30
    4be0:	ff 1f       	adc	r31, r31
    4be2:	ee 5e       	subi	r30, 0xEE	; 238
    4be4:	fe 4f       	sbci	r31, 0xFE	; 254
    4be6:	80 81       	ld	r24, Z
    4be8:	80 93 36 03 	sts	0x0336, r24
			if (!(QUEUE_GET_NUM_ELE(my_q) >= nextId)){
    4bec:	90 91 8f 05 	lds	r25, 0x058F
    4bf0:	80 91 36 03 	lds	r24, 0x0336
    4bf4:	98 17       	cp	r25, r24
    4bf6:	38 f4       	brcc	.+14     	; 0x4c06 <__vector_33+0xc2>
				xbee_sending = 0;
    4bf8:	10 92 35 03 	sts	0x0335, r1
				Usart1_tx_ei_dis(); /* Remove when done testing */
    4bfc:	80 91 c9 00 	lds	r24, 0x00C9
    4c00:	8f 7d       	andi	r24, 0xDF	; 223
    4c02:	80 93 c9 00 	sts	0x00C9, r24
			}
		}
		if (xbee_sending) {
    4c06:	80 91 35 03 	lds	r24, 0x0335
    4c0a:	88 23       	and	r24, r24
    4c0c:	51 f0       	breq	.+20     	; 0x4c22 <__vector_33+0xde>
			UDR1 = tmp;
    4c0e:	40 93 ce 00 	sts	0x00CE, r20
    4c12:	07 c0       	rjmp	.+14     	; 0x4c22 <__vector_33+0xde>
		}
	} else {
		xbee_sending = 0;
    4c14:	10 92 35 03 	sts	0x0335, r1
		Usart1_tx_ei_dis(); /* Remove when done testing */
    4c18:	80 91 c9 00 	lds	r24, 0x00C9
    4c1c:	8f 7d       	andi	r24, 0xDF	; 223
    4c1e:	80 93 c9 00 	sts	0x00C9, r24
	}
}
    4c22:	ff 91       	pop	r31
    4c24:	ef 91       	pop	r30
    4c26:	bf 91       	pop	r27
    4c28:	af 91       	pop	r26
    4c2a:	9f 91       	pop	r25
    4c2c:	8f 91       	pop	r24
    4c2e:	7f 91       	pop	r23
    4c30:	6f 91       	pop	r22
    4c32:	5f 91       	pop	r21
    4c34:	4f 91       	pop	r20
    4c36:	3f 91       	pop	r19
    4c38:	2f 91       	pop	r18
    4c3a:	0f 90       	pop	r0
    4c3c:	0b be       	out	0x3b, r0	; 59
    4c3e:	0f 90       	pop	r0
    4c40:	0f be       	out	0x3f, r0	; 63
    4c42:	0f 90       	pop	r0
    4c44:	1f 90       	pop	r1
    4c46:	18 95       	reti

00004c48 <__vector_16>:
volatile uint8_t nextId = 0;
volatile uint8_t xbee_send = 0;

/* Funktion der sender data request til ECU */
ISR(TIMER0_COMP_vect)
{
    4c48:	1f 92       	push	r1
    4c4a:	0f 92       	push	r0
    4c4c:	0f b6       	in	r0, 0x3f	; 63
    4c4e:	0f 92       	push	r0
    4c50:	0b b6       	in	r0, 0x3b	; 59
    4c52:	0f 92       	push	r0
    4c54:	11 24       	eor	r1, r1
    4c56:	2f 93       	push	r18
    4c58:	3f 93       	push	r19
    4c5a:	4f 93       	push	r20
    4c5c:	5f 93       	push	r21
    4c5e:	6f 93       	push	r22
    4c60:	7f 93       	push	r23
    4c62:	8f 93       	push	r24
    4c64:	9f 93       	push	r25
    4c66:	af 93       	push	r26
    4c68:	bf 93       	push	r27
    4c6a:	cf 93       	push	r28
    4c6c:	df 93       	push	r29
    4c6e:	ef 93       	push	r30
    4c70:	ff 93       	push	r31
	int i;
	testvar++;
    4c72:	80 91 33 03 	lds	r24, 0x0333
    4c76:	90 91 34 03 	lds	r25, 0x0334
    4c7a:	01 96       	adiw	r24, 0x01	; 1
    4c7c:	90 93 34 03 	sts	0x0334, r25
    4c80:	80 93 33 03 	sts	0x0333, r24
	if (testvar == 4) {
    4c84:	04 97       	sbiw	r24, 0x04	; 4
    4c86:	a1 f5       	brne	.+104    	; 0x4cf0 <__vector_16+0xa8>
		if (RecIndex != 114 && EcuErrorTmp < 5) { // Test for fejl
    4c88:	20 91 31 03 	lds	r18, 0x0331
    4c8c:	30 91 32 03 	lds	r19, 0x0332
    4c90:	22 37       	cpi	r18, 0x72	; 114
    4c92:	31 05       	cpc	r19, r1
    4c94:	69 f0       	breq	.+26     	; 0x4cb0 <__vector_16+0x68>
    4c96:	80 91 39 03 	lds	r24, 0x0339
    4c9a:	85 30       	cpi	r24, 0x05	; 5
    4c9c:	48 f4       	brcc	.+18     	; 0x4cb0 <__vector_16+0x68>
			EcuErrorTmp++;
    4c9e:	8f 5f       	subi	r24, 0xFF	; 255
    4ca0:	80 93 39 03 	sts	0x0339, r24
			if (EcuErrorTmp == 5) {
    4ca4:	85 30       	cpi	r24, 0x05	; 5
    4ca6:	81 f4       	brne	.+32     	; 0x4cc8 <__vector_16+0x80>
				EcuCommError = 1;
    4ca8:	81 e0       	ldi	r24, 0x01	; 1
    4caa:	80 93 38 03 	sts	0x0338, r24
    4cae:	0c c0       	rjmp	.+24     	; 0x4cc8 <__vector_16+0x80>
			}
		} else if (EcuErrorTmp > 0 && RecIndex == 114) {
    4cb0:	80 91 39 03 	lds	r24, 0x0339
    4cb4:	88 23       	and	r24, r24
    4cb6:	41 f0       	breq	.+16     	; 0x4cc8 <__vector_16+0x80>
    4cb8:	22 37       	cpi	r18, 0x72	; 114
    4cba:	31 05       	cpc	r19, r1
    4cbc:	29 f4       	brne	.+10     	; 0x4cc8 <__vector_16+0x80>
			EcuErrorTmp--;
    4cbe:	81 50       	subi	r24, 0x01	; 1
    4cc0:	80 93 39 03 	sts	0x0339, r24
			EcuCommError = 0;
    4cc4:	10 92 38 03 	sts	0x0338, r1
		}
		testvar=0;
    4cc8:	10 92 34 03 	sts	0x0334, r1
    4ccc:	10 92 33 03 	sts	0x0333, r1
		RecIndex = 0;
    4cd0:	10 92 32 03 	sts	0x0332, r1
    4cd4:	10 92 31 03 	sts	0x0331, r1
    4cd8:	ce e5       	ldi	r28, 0x5E	; 94
    4cda:	d1 e0       	ldi	r29, 0x01	; 1
		for (i=0;i<=9;i++) {		// Send data req streng
			USART0_Transmit(ecu_data[i]); 
    4cdc:	89 91       	ld	r24, Y+
    4cde:	99 27       	eor	r25, r25
    4ce0:	87 fd       	sbrc	r24, 7
    4ce2:	90 95       	com	r25
    4ce4:	0e 94 a7 03 	call	0x74e	; 0x74e <USART0_Transmit>
			EcuErrorTmp--;
			EcuCommError = 0;
		}
		testvar=0;
		RecIndex = 0;
		for (i=0;i<=9;i++) {		// Send data req streng
    4ce8:	81 e0       	ldi	r24, 0x01	; 1
    4cea:	c8 36       	cpi	r28, 0x68	; 104
    4cec:	d8 07       	cpc	r29, r24
    4cee:	b1 f7       	brne	.-20     	; 0x4cdc <__vector_16+0x94>
			USART0_Transmit(ecu_data[i]); 
		}
	}
}
    4cf0:	ff 91       	pop	r31
    4cf2:	ef 91       	pop	r30
    4cf4:	df 91       	pop	r29
    4cf6:	cf 91       	pop	r28
    4cf8:	bf 91       	pop	r27
    4cfa:	af 91       	pop	r26
    4cfc:	9f 91       	pop	r25
    4cfe:	8f 91       	pop	r24
    4d00:	7f 91       	pop	r23
    4d02:	6f 91       	pop	r22
    4d04:	5f 91       	pop	r21
    4d06:	4f 91       	pop	r20
    4d08:	3f 91       	pop	r19
    4d0a:	2f 91       	pop	r18
    4d0c:	0f 90       	pop	r0
    4d0e:	0b be       	out	0x3b, r0	; 59
    4d10:	0f 90       	pop	r0
    4d12:	0f be       	out	0x3f, r0	; 63
    4d14:	0f 90       	pop	r0
    4d16:	1f 90       	pop	r1
    4d18:	18 95       	reti

00004d1a <xbee_send_trigger>:
	 * 
	 *
	 * -Trigger package send 
	 */
	/* Check if xbee is already sending and if true just return */
	if (xbee_sending) return;
    4d1a:	80 91 35 03 	lds	r24, 0x0335
    4d1e:	88 23       	and	r24, r24
    4d20:	89 f4       	brne	.+34     	; 0x4d44 <xbee_send_trigger+0x2a>

	/* If number of bytes in send buffer is greater than X send data */
	if (QUEUE_GET_NUM_ELE(my_q)>=20){
    4d22:	80 91 8f 05 	lds	r24, 0x058F
    4d26:	84 31       	cpi	r24, 0x14	; 20
    4d28:	68 f0       	brcs	.+26     	; 0x4d44 <xbee_send_trigger+0x2a>
		xbee_sending = 1;
    4d2a:	81 e0       	ldi	r24, 0x01	; 1
    4d2c:	80 93 35 03 	sts	0x0335, r24
		xbee_seq_index = 0;
		Usart1_tx_ei_en();	/* Remove when done testing */
    4d30:	90 91 c9 00 	lds	r25, 0x00C9
    4d34:	90 62       	ori	r25, 0x20	; 32
    4d36:	90 93 c9 00 	sts	0x00C9, r25
		UDR1 = start_sequence[xbee_seq_index++];
    4d3a:	9f ef       	ldi	r25, 0xFF	; 255
    4d3c:	90 93 ce 00 	sts	0x00CE, r25
    4d40:	80 93 3a 03 	sts	0x033A, r24
    4d44:	08 95       	ret

00004d46 <send_status>:
	return;
}

void send_status( void )
{
	USART1_Transmit((U8)123);	// Pakke start
    4d46:	8b e7       	ldi	r24, 0x7B	; 123
    4d48:	90 e0       	ldi	r25, 0x00	; 0
    4d4a:	0e 94 af 03 	call	0x75e	; 0x75e <USART1_Transmit>
	USART1_Transmit((U8)255);
    4d4e:	8f ef       	ldi	r24, 0xFF	; 255
    4d50:	90 e0       	ldi	r25, 0x00	; 0
    4d52:	0e 94 af 03 	call	0x75e	; 0x75e <USART1_Transmit>
	USART1_Transmit((U8)10);
    4d56:	8a e0       	ldi	r24, 0x0A	; 10
    4d58:	90 e0       	ldi	r25, 0x00	; 0
    4d5a:	0e 94 af 03 	call	0x75e	; 0x75e <USART1_Transmit>
	USART1_Transmit((U8)EcuCommError);	// Ecu error var
    4d5e:	80 91 38 03 	lds	r24, 0x0338
    4d62:	90 e0       	ldi	r25, 0x00	; 0
    4d64:	0e 94 af 03 	call	0x75e	; 0x75e <USART1_Transmit>
	USART1_Transmit((U8)EcuData[RPMSTART]);		// Send RPM
    4d68:	80 91 9e 01 	lds	r24, 0x019E
    4d6c:	90 e0       	ldi	r25, 0x00	; 0
    4d6e:	0e 94 af 03 	call	0x75e	; 0x75e <USART1_Transmit>
	USART1_Transmit((U8)EcuData[RPMSTART+RPMLENGTH-1]);
    4d72:	80 91 9f 01 	lds	r24, 0x019F
    4d76:	90 e0       	ldi	r25, 0x00	; 0
    4d78:	0e 94 af 03 	call	0x75e	; 0x75e <USART1_Transmit>
	USART1_Transmit((U8)EcuData[SPEEDSTART]);	// Send Hastighed
    4d7c:	80 91 a6 01 	lds	r24, 0x01A6
    4d80:	90 e0       	ldi	r25, 0x00	; 0
    4d82:	0e 94 af 03 	call	0x75e	; 0x75e <USART1_Transmit>
	USART1_Transmit((U8)EcuData[SPEEDSTART+SPEEDLENGTH-1]);
    4d86:	80 91 a7 01 	lds	r24, 0x01A7
    4d8a:	90 e0       	ldi	r25, 0x00	; 0
    4d8c:	0e 94 af 03 	call	0x75e	; 0x75e <USART1_Transmit>
	USART1_Transmit((U8)EcuData[46]);	// Vand temp
    4d90:	80 91 96 01 	lds	r24, 0x0196
    4d94:	90 e0       	ldi	r25, 0x00	; 0
    4d96:	0e 94 af 03 	call	0x75e	; 0x75e <USART1_Transmit>
	USART1_Transmit((U8)EcuData[47]);
    4d9a:	80 91 97 01 	lds	r24, 0x0197
    4d9e:	90 e0       	ldi	r25, 0x00	; 0
    4da0:	0e 94 af 03 	call	0x75e	; 0x75e <USART1_Transmit>
	USART1_Transmit((U8)EcuData[48]);	// Luft temp
    4da4:	80 91 98 01 	lds	r24, 0x0198
    4da8:	90 e0       	ldi	r25, 0x00	; 0
    4daa:	0e 94 af 03 	call	0x75e	; 0x75e <USART1_Transmit>
	USART1_Transmit((U8)EcuData[49]);
    4dae:	80 91 99 01 	lds	r24, 0x0199
    4db2:	90 e0       	ldi	r25, 0x00	; 0
    4db4:	0e 94 af 03 	call	0x75e	; 0x75e <USART1_Transmit>
	USART1_Transmit((U8)EcuData[66]);	// Batt V
    4db8:	80 91 aa 01 	lds	r24, 0x01AA
    4dbc:	90 e0       	ldi	r25, 0x00	; 0
    4dbe:	0e 94 af 03 	call	0x75e	; 0x75e <USART1_Transmit>
	USART1_Transmit((U8)EcuData[67]);		
    4dc2:	80 91 ab 01 	lds	r24, 0x01AB
    4dc6:	90 e0       	ldi	r25, 0x00	; 0
    4dc8:	0e 94 af 03 	call	0x75e	; 0x75e <USART1_Transmit>
	USART1_Transmit((U8)EcuData[POTSTART]);	// Pot 
    4dcc:	80 91 9a 01 	lds	r24, 0x019A
    4dd0:	90 e0       	ldi	r25, 0x00	; 0
    4dd2:	0e 94 af 03 	call	0x75e	; 0x75e <USART1_Transmit>
	USART1_Transmit((U8)EcuData[POTSTART+POTLENGTH-1]);		
    4dd6:	80 91 9b 01 	lds	r24, 0x019B
    4dda:	90 e0       	ldi	r25, 0x00	; 0
    4ddc:	0e 94 af 03 	call	0x75e	; 0x75e <USART1_Transmit>
	USART1_Transmit((U8)EcuData[MAPSTART]);	// Map 
    4de0:	80 91 a8 01 	lds	r24, 0x01A8
    4de4:	90 e0       	ldi	r25, 0x00	; 0
    4de6:	0e 94 af 03 	call	0x75e	; 0x75e <USART1_Transmit>
	USART1_Transmit((U8)EcuData[MAPSTART+MAPLENGTH-1]);	
    4dea:	80 91 a9 01 	lds	r24, 0x01A9
    4dee:	90 e0       	ldi	r25, 0x00	; 0
    4df0:	0e 94 af 03 	call	0x75e	; 0x75e <USART1_Transmit>
	USART1_Transmit((U8)EcuData[96]);	// gX (acc)
    4df4:	80 91 c8 01 	lds	r24, 0x01C8
    4df8:	90 e0       	ldi	r25, 0x00	; 0
    4dfa:	0e 94 af 03 	call	0x75e	; 0x75e <USART1_Transmit>
	USART1_Transmit((U8)EcuData[97]);		
    4dfe:	80 91 c9 01 	lds	r24, 0x01C9
    4e02:	90 e0       	ldi	r25, 0x00	; 0
    4e04:	0e 94 af 03 	call	0x75e	; 0x75e <USART1_Transmit>
	USART1_Transmit((U8)EcuData[98]);	// gy (acc)
    4e08:	80 91 ca 01 	lds	r24, 0x01CA
    4e0c:	90 e0       	ldi	r25, 0x00	; 0
    4e0e:	0e 94 af 03 	call	0x75e	; 0x75e <USART1_Transmit>
	USART1_Transmit((U8)EcuData[99]);		
    4e12:	80 91 cb 01 	lds	r24, 0x01CB
    4e16:	90 e0       	ldi	r25, 0x00	; 0
    4e18:	0e 94 af 03 	call	0x75e	; 0x75e <USART1_Transmit>
	USART1_Transmit((U8)EcuData[100]);	// gz (acc)
    4e1c:	80 91 cc 01 	lds	r24, 0x01CC
    4e20:	90 e0       	ldi	r25, 0x00	; 0
    4e22:	0e 94 af 03 	call	0x75e	; 0x75e <USART1_Transmit>
	USART1_Transmit((U8)EcuData[101]);		
    4e26:	80 91 cd 01 	lds	r24, 0x01CD
    4e2a:	90 e0       	ldi	r25, 0x00	; 0
    4e2c:	0e 94 af 03 	call	0x75e	; 0x75e <USART1_Transmit>
	USART1_Transmit((U8)EcuData[68]);	// lambda
    4e30:	80 91 ac 01 	lds	r24, 0x01AC
    4e34:	90 e0       	ldi	r25, 0x00	; 0
    4e36:	0e 94 af 03 	call	0x75e	; 0x75e <USART1_Transmit>
	USART1_Transmit((U8)EcuData[69]);		
    4e3a:	80 91 ad 01 	lds	r24, 0x01AD
    4e3e:	90 e0       	ldi	r25, 0x00	; 0
    4e40:	0e 94 af 03 	call	0x75e	; 0x75e <USART1_Transmit>
	USART1_Transmit((U8)EcuData[78]);	// injectorTime
    4e44:	80 91 b6 01 	lds	r24, 0x01B6
    4e48:	90 e0       	ldi	r25, 0x00	; 0
    4e4a:	0e 94 af 03 	call	0x75e	; 0x75e <USART1_Transmit>
	USART1_Transmit((U8)EcuData[79]);		
    4e4e:	80 91 b7 01 	lds	r24, 0x01B7
    4e52:	90 e0       	ldi	r25, 0x00	; 0
    4e54:	0e 94 af 03 	call	0x75e	; 0x75e <USART1_Transmit>
	USART1_Transmit((U8)EcuData[82]);	// ignitionTime
    4e58:	80 91 ba 01 	lds	r24, 0x01BA
    4e5c:	90 e0       	ldi	r25, 0x00	; 0
    4e5e:	0e 94 af 03 	call	0x75e	; 0x75e <USART1_Transmit>
	USART1_Transmit((U8)EcuData[83]);		
    4e62:	80 91 bb 01 	lds	r24, 0x01BB
    4e66:	90 e0       	ldi	r25, 0x00	; 0
    4e68:	0e 94 af 03 	call	0x75e	; 0x75e <USART1_Transmit>
	USART1_Transmit((U8)EcuData[74]);	// engine load
    4e6c:	80 91 b2 01 	lds	r24, 0x01B2
    4e70:	90 e0       	ldi	r25, 0x00	; 0
    4e72:	0e 94 af 03 	call	0x75e	; 0x75e <USART1_Transmit>
	USART1_Transmit((U8)EcuData[75]);		
    4e76:	80 91 b3 01 	lds	r24, 0x01B3
    4e7a:	90 e0       	ldi	r25, 0x00	; 0
    4e7c:	0e 94 af 03 	call	0x75e	; 0x75e <USART1_Transmit>
	USART1_Transmit((U8)EcuData[56]);	// trigger error
    4e80:	80 91 a0 01 	lds	r24, 0x01A0
    4e84:	90 e0       	ldi	r25, 0x00	; 0
    4e86:	0e 94 af 03 	call	0x75e	; 0x75e <USART1_Transmit>
	USART1_Transmit((U8)EcuData[57]);		
    4e8a:	80 91 a1 01 	lds	r24, 0x01A1
    4e8e:	90 e0       	ldi	r25, 0x00	; 0
    4e90:	0e 94 af 03 	call	0x75e	; 0x75e <USART1_Transmit>
}
    4e94:	08 95       	ret

00004e96 <TWI_init>:
#include <util/twi.h>
#include "twi.h"

void TWI_init(void)
{
	PORTD |= (1<<PORTD0)|(1<<PORTD1);	/* Enable pull-up on TWI pins */
    4e96:	8b b1       	in	r24, 0x0b	; 11
    4e98:	83 60       	ori	r24, 0x03	; 3
    4e9a:	8b b9       	out	0x0b, r24	; 11

	/* Set TWI clock */
	TWSR = 0;	/* Set prescaler to 1 */
    4e9c:	10 92 b9 00 	sts	0x00B9, r1
	TWBR = (F_CPU/TWI_CLOCK-16)/2;	/* Calculate TWBR value */
    4ea0:	8f e2       	ldi	r24, 0x2F	; 47
    4ea2:	80 93 b8 00 	sts	0x00B8, r24
}
    4ea6:	08 95       	ret

00004ea8 <TWI_start>:

BOOL TWI_start(void)
{
	TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);	/* send start condition */
    4ea8:	84 ea       	ldi	r24, 0xA4	; 164
    4eaa:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    4eae:	80 91 bc 00 	lds	r24, 0x00BC
    4eb2:	87 ff       	sbrs	r24, 7
    4eb4:	fc cf       	rjmp	.-8      	; 0x4eae <TWI_start+0x6>
	if (!((TW_STATUS == TW_REP_START) || (TW_STATUS == TW_START))) return FALSE; /* Return if communication could not be started */
    4eb6:	80 91 b9 00 	lds	r24, 0x00B9
    4eba:	88 7f       	andi	r24, 0xF8	; 248
    4ebc:	80 31       	cpi	r24, 0x10	; 16
    4ebe:	19 f4       	brne	.+6      	; 0x4ec6 <TWI_start+0x1e>
    4ec0:	21 e0       	ldi	r18, 0x01	; 1
    4ec2:	30 e0       	ldi	r19, 0x00	; 0
    4ec4:	0b c0       	rjmp	.+22     	; 0x4edc <TWI_start+0x34>
    4ec6:	80 91 b9 00 	lds	r24, 0x00B9
    4eca:	90 e0       	ldi	r25, 0x00	; 0
    4ecc:	88 7f       	andi	r24, 0xF8	; 248
    4ece:	88 30       	cpi	r24, 0x08	; 8
    4ed0:	09 f0       	breq	.+2      	; 0x4ed4 <TWI_start+0x2c>
    4ed2:	91 e0       	ldi	r25, 0x01	; 1
    4ed4:	81 e0       	ldi	r24, 0x01	; 1
    4ed6:	98 27       	eor	r25, r24
    4ed8:	29 2f       	mov	r18, r25
    4eda:	30 e0       	ldi	r19, 0x00	; 0
	return TRUE;
}
    4edc:	c9 01       	movw	r24, r18
    4ede:	08 95       	ret

00004ee0 <TWI_send>:

/* Send a byte to the TWI bus */
void TWI_send(uint8_t data)
{
	TWDR = data;
    4ee0:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    4ee4:	84 e8       	ldi	r24, 0x84	; 132
    4ee6:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    4eea:	80 91 bc 00 	lds	r24, 0x00BC
    4eee:	87 ff       	sbrs	r24, 7
    4ef0:	fc cf       	rjmp	.-8      	; 0x4eea <TWI_send+0xa>
}	
    4ef2:	08 95       	ret

00004ef4 <TWI_rcvr>:

/* Read a byte from the TWI bus */
uint8_t TWI_rcvr(BOOL ack)
{
	if (ack) {
    4ef4:	89 2b       	or	r24, r25
    4ef6:	11 f0       	breq	.+4      	; 0x4efc <TWI_rcvr+0x8>
		TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA); 	/* send ACK after data recived */
    4ef8:	84 ec       	ldi	r24, 0xC4	; 196
    4efa:	01 c0       	rjmp	.+2      	; 0x4efe <TWI_rcvr+0xa>
	} else {
		TWCR = _BV(TWINT) | _BV(TWEN);			/* send NACK after data recived */
    4efc:	84 e8       	ldi	r24, 0x84	; 132
    4efe:	80 93 bc 00 	sts	0x00BC, r24
	}		 
	while ((TWCR & _BV(TWINT)) == 0) ; 			/* wait for transmission */	
    4f02:	80 91 bc 00 	lds	r24, 0x00BC
    4f06:	87 ff       	sbrs	r24, 7
    4f08:	fc cf       	rjmp	.-8      	; 0x4f02 <TWI_rcvr+0xe>
	return 	TWDR;
    4f0a:	80 91 bb 00 	lds	r24, 0x00BB
}
    4f0e:	08 95       	ret

00004f10 <TWI_stop>:
		
void TWI_stop(void)
{
	TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */
    4f10:	84 e9       	ldi	r24, 0x94	; 148
    4f12:	80 93 bc 00 	sts	0x00BC, r24
}
    4f16:	08 95       	ret

00004f18 <get_free_log_number>:
#if _USE_LFN
char Lfname[_MAX_LFN+1];
#endif

int get_free_log_number( DIR *dir )
{
    4f18:	0f 93       	push	r16
    4f1a:	1f 93       	push	r17
    4f1c:	cf 93       	push	r28
    4f1e:	df 93       	push	r29
    4f20:	8c 01       	movw	r16, r24
    4f22:	c0 e0       	ldi	r28, 0x00	; 0
    4f24:	d0 e0       	ldi	r29, 0x00	; 0
#if _USE_LFN
	Finfo.lfname = Lfname;
	Finfo.lfsize = sizeof(Lfname);
#endif
	for(;;) {
		res = f_readdir(dir, &Finfo);
    4f26:	c8 01       	movw	r24, r16
    4f28:	6f e6       	ldi	r22, 0x6F	; 111
    4f2a:	75 e0       	ldi	r23, 0x05	; 5
    4f2c:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <f_readdir>
		if ((res != FR_OK) || !Finfo.fname[0]) break;
    4f30:	88 23       	and	r24, r24
    4f32:	89 f4       	brne	.+34     	; 0x4f56 <get_free_log_number+0x3e>
    4f34:	80 91 78 05 	lds	r24, 0x0578
    4f38:	88 23       	and	r24, r24
    4f3a:	69 f0       	breq	.+26     	; 0x4f56 <get_free_log_number+0x3e>
		if ( atoi(&(Finfo.fname[0])) > maxname )
    4f3c:	88 e7       	ldi	r24, 0x78	; 120
    4f3e:	95 e0       	ldi	r25, 0x05	; 5
    4f40:	0e 94 df 2e 	call	0x5dbe	; 0x5dbe <atoi>
    4f44:	c8 17       	cp	r28, r24
    4f46:	d9 07       	cpc	r29, r25
    4f48:	70 f7       	brcc	.-36     	; 0x4f26 <get_free_log_number+0xe>
			maxname = atoi(&(Finfo.fname[0]));
    4f4a:	88 e7       	ldi	r24, 0x78	; 120
    4f4c:	95 e0       	ldi	r25, 0x05	; 5
    4f4e:	0e 94 df 2e 	call	0x5dbe	; 0x5dbe <atoi>
    4f52:	ec 01       	movw	r28, r24
    4f54:	e8 cf       	rjmp	.-48     	; 0x4f26 <get_free_log_number+0xe>
    4f56:	9e 01       	movw	r18, r28
    4f58:	2f 5f       	subi	r18, 0xFF	; 255
    4f5a:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	return maxname + 1;
}
    4f5c:	c9 01       	movw	r24, r18
    4f5e:	df 91       	pop	r29
    4f60:	cf 91       	pop	r28
    4f62:	1f 91       	pop	r17
    4f64:	0f 91       	pop	r16
    4f66:	08 95       	ret

00004f68 <val_to_xbee>:
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

void val_to_xbee(uint8_t i, uint8_t j)
{
    4f68:	0f 93       	push	r16
    4f6a:	1f 93       	push	r17
    4f6c:	cf 93       	push	r28
    4f6e:	df 93       	push	r29
	uint8_t k=0;
//	xprintf(PSTR("i%d,j%d \n"), i, j);
	/* Add value to xbee buffer */
	QUEUE_PUT(my_q, ECUObjects[j].id);	/* Add id */
    4f70:	80 91 8b 05 	lds	r24, 0x058B
    4f74:	90 91 8c 05 	lds	r25, 0x058C
    4f78:	70 e0       	ldi	r23, 0x00	; 0
    4f7a:	dc 01       	movw	r26, r24
    4f7c:	a7 57       	subi	r26, 0x77	; 119
    4f7e:	ba 4f       	sbci	r27, 0xFA	; 250
    4f80:	fb 01       	movw	r30, r22
    4f82:	ee 0f       	add	r30, r30
    4f84:	ff 1f       	adc	r31, r31
    4f86:	e6 0f       	add	r30, r22
    4f88:	f7 1f       	adc	r31, r23
    4f8a:	e4 5b       	subi	r30, 0xB4	; 180
    4f8c:	fd 4f       	sbci	r31, 0xFD	; 253
    4f8e:	21 81       	ldd	r18, Z+1	; 0x01
    4f90:	17 96       	adiw	r26, 0x07	; 7
    4f92:	2c 93       	st	X, r18
    4f94:	c0 91 8d 05 	lds	r28, 0x058D
    4f98:	d0 91 8e 05 	lds	r29, 0x058E
    4f9c:	01 96       	adiw	r24, 0x01	; 1
    4f9e:	be 01       	movw	r22, r28
    4fa0:	0e 94 6d 2e 	call	0x5cda	; 0x5cda <__divmodhi4>
    4fa4:	9c 01       	movw	r18, r24
    4fa6:	80 91 8f 05 	lds	r24, 0x058F
    4faa:	8f 5f       	subi	r24, 0xFF	; 255
    4fac:	80 93 8f 05 	sts	0x058F, r24
	for (k=0;k<ECUObjects[j].length;k++) {	/* Add value */
    4fb0:	10 81       	ld	r17, Z
    4fb2:	40 e0       	ldi	r20, 0x00	; 0
		QUEUE_PUT(my_q, 65/*EcuData[i+k]*/);
    4fb4:	01 e4       	ldi	r16, 0x41	; 65
    4fb6:	10 c0       	rjmp	.+32     	; 0x4fd8 <val_to_xbee+0x70>
    4fb8:	f9 01       	movw	r30, r18
    4fba:	e7 57       	subi	r30, 0x77	; 119
    4fbc:	fa 4f       	sbci	r31, 0xFA	; 250
    4fbe:	07 83       	std	Z+7, r16	; 0x07
    4fc0:	c9 01       	movw	r24, r18
    4fc2:	01 96       	adiw	r24, 0x01	; 1
    4fc4:	be 01       	movw	r22, r28
    4fc6:	0e 94 6d 2e 	call	0x5cda	; 0x5cda <__divmodhi4>
    4fca:	9c 01       	movw	r18, r24
    4fcc:	80 91 8f 05 	lds	r24, 0x058F
    4fd0:	8f 5f       	subi	r24, 0xFF	; 255
    4fd2:	80 93 8f 05 	sts	0x058F, r24
{
	uint8_t k=0;
//	xprintf(PSTR("i%d,j%d \n"), i, j);
	/* Add value to xbee buffer */
	QUEUE_PUT(my_q, ECUObjects[j].id);	/* Add id */
	for (k=0;k<ECUObjects[j].length;k++) {	/* Add value */
    4fd6:	4f 5f       	subi	r20, 0xFF	; 255
    4fd8:	41 17       	cp	r20, r17
    4fda:	70 f3       	brcs	.-36     	; 0x4fb8 <val_to_xbee+0x50>
    4fdc:	30 93 8c 05 	sts	0x058C, r19
    4fe0:	20 93 8b 05 	sts	0x058B, r18
		QUEUE_PUT(my_q, 65/*EcuData[i+k]*/);
	}
	/* Check if more than 20 elements in xbee buffer */
	if (QUEUE_GET_NUM_ELE(my_q) >= 20) {
    4fe4:	80 91 8f 05 	lds	r24, 0x058F
    4fe8:	84 31       	cpi	r24, 0x14	; 20
    4fea:	10 f0       	brcs	.+4      	; 0x4ff0 <val_to_xbee+0x88>
		//xprintf(PSTR("More than 20 elements\n"));
		xbee_send_trigger();
    4fec:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <xbee_send_trigger>
	}
}
    4ff0:	df 91       	pop	r29
    4ff2:	cf 91       	pop	r28
    4ff4:	1f 91       	pop	r17
    4ff6:	0f 91       	pop	r16
    4ff8:	08 95       	ret

00004ffa <ecu_data_handler>:

void ecu_data_handler( void )
{
    4ffa:	0f 93       	push	r16
    4ffc:	1f 93       	push	r17
    4ffe:	cf 93       	push	r28
    5000:	df 93       	push	r29
    5002:	00 e0       	ldi	r16, 0x00	; 0
    5004:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t	j=0;

	/* Loop over all values in EcuData */
	while(i<=114) {
		/* Check if anything to be done for value */
		if (valueObjects[ECUObjects[j].id].action & (TO_XBEE | TO_SD | TO_CAN) ) {
    5006:	c1 2f       	mov	r28, r17
    5008:	d0 e0       	ldi	r29, 0x00	; 0
    500a:	fe 01       	movw	r30, r28
    500c:	ee 0f       	add	r30, r30
    500e:	ff 1f       	adc	r31, r31
    5010:	ec 0f       	add	r30, r28
    5012:	fd 1f       	adc	r31, r29
    5014:	e4 5b       	subi	r30, 0xB4	; 180
    5016:	fd 4f       	sbci	r31, 0xFD	; 253
    5018:	01 80       	ldd	r0, Z+1	; 0x01
    501a:	f2 81       	ldd	r31, Z+2	; 0x02
    501c:	e0 2d       	mov	r30, r0
    501e:	ee 0f       	add	r30, r30
    5020:	ff 1f       	adc	r31, r31
    5022:	ed 52       	subi	r30, 0x2D	; 45
    5024:	fd 4f       	sbci	r31, 0xFD	; 253
    5026:	81 81       	ldd	r24, Z+1	; 0x01
    5028:	28 2f       	mov	r18, r24
    502a:	30 e0       	ldi	r19, 0x00	; 0
    502c:	c9 01       	movw	r24, r18
    502e:	87 70       	andi	r24, 0x07	; 7
    5030:	90 70       	andi	r25, 0x00	; 0
    5032:	89 2b       	or	r24, r25
    5034:	31 f0       	breq	.+12     	; 0x5042 <ecu_data_handler+0x48>
			/* Value to xbee? */
			if (valueObjects[ECUObjects[j].id].action & TO_XBEE) {
    5036:	22 ff       	sbrs	r18, 2
    5038:	04 c0       	rjmp	.+8      	; 0x5042 <ecu_data_handler+0x48>
				val_to_xbee(i,j);
    503a:	80 2f       	mov	r24, r16
    503c:	61 2f       	mov	r22, r17
    503e:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <val_to_xbee>
				 */
			}
		}
		
		/* Find index for next value */
		i += ECUObjects[j].length;
    5042:	fe 01       	movw	r30, r28
    5044:	ee 0f       	add	r30, r30
    5046:	ff 1f       	adc	r31, r31
    5048:	ec 0f       	add	r30, r28
    504a:	fd 1f       	adc	r31, r29
    504c:	e4 5b       	subi	r30, 0xB4	; 180
    504e:	fd 4f       	sbci	r31, 0xFD	; 253
    5050:	80 81       	ld	r24, Z
    5052:	08 0f       	add	r16, r24
{
	uint8_t i=0;
	uint8_t	j=0;

	/* Loop over all values in EcuData */
	while(i<=114) {
    5054:	03 37       	cpi	r16, 0x73	; 115
    5056:	10 f4       	brcc	.+4      	; 0x505c <ecu_data_handler+0x62>
			}
		}
		
		/* Find index for next value */
		i += ECUObjects[j].length;
		j++;
    5058:	1f 5f       	subi	r17, 0xFF	; 255
    505a:	d5 cf       	rjmp	.-86     	; 0x5006 <ecu_data_handler+0xc>
	}
}
    505c:	df 91       	pop	r29
    505e:	cf 91       	pop	r28
    5060:	1f 91       	pop	r17
    5062:	0f 91       	pop	r16
    5064:	08 95       	ret

00005066 <xputc>:

.global xputc
.func xputc
xputc:
#ifdef CR_CRLF
	cpi	r24, 10		;LF --> CRLF
    5066:	8a 30       	cpi	r24, 0x0A	; 10
	brne	1f		;
    5068:	19 f4       	brne	.+6      	; 0x5070 <xputc+0xa>
	ldi	r24, 13		;
    506a:	8d e0       	ldi	r24, 0x0D	; 13
	rcall	1f		;
    506c:	01 d0       	rcall	.+2      	; 0x5070 <xputc+0xa>
	ldi	r24, 10		;/
    506e:	8a e0       	ldi	r24, 0x0A	; 10
1:
#endif
	push	ZH
    5070:	ff 93       	push	r31
	push	ZL
    5072:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
    5074:	e0 91 3b 03 	lds	r30, 0x033B
	lds	ZH, xfunc_out+1	;/
    5078:	f0 91 3c 03 	lds	r31, 0x033C
	icall
    507c:	09 95       	icall
	pop	ZL
    507e:	ef 91       	pop	r30
	pop	ZH
    5080:	ff 91       	pop	r31
	ret
    5082:	08 95       	ret

00005084 <xputs>:

#ifdef USE_XPUTS
.global xputs
.func xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
    5084:	fc 01       	movw	r30, r24
1:	_LPMI	r24
    5086:	85 91       	lpm	r24, Z+
	cpi	r24, 0
    5088:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
    508a:	11 f0       	breq	.+4      	; 0x5090 <xputs+0xc>
	rcall	xputc
    508c:	ec df       	rcall	.-40     	; 0x5066 <xputc>
	rjmp	1b
    508e:	fb cf       	rjmp	.-10     	; 0x5086 <xputs+0x2>
2:	ret
    5090:	08 95       	ret

00005092 <xitoa>:
#ifdef USE_XITOA
.global xitoa
.func xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
    5092:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
    5094:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
    5096:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
    5098:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
    509a:	0c c0       	rjmp	.+24     	; 0x50b4 <xitoa+0x22>
	neg	r20		;
    509c:	41 95       	neg	r20
	sbrs	r25, 7		;
    509e:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
    50a0:	09 c0       	rjmp	.+18     	; 0x50b4 <xitoa+0x22>
	ldi	r30, '-'	;
    50a2:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
    50a4:	60 95       	com	r22
	com	r23		;
    50a6:	70 95       	com	r23
	com	r24		;
    50a8:	80 95       	com	r24
	com	r25		;
    50aa:	90 95       	com	r25
	adc	r22, r1		;
    50ac:	61 1d       	adc	r22, r1
	adc	r23, r1		;
    50ae:	71 1d       	adc	r23, r1
	adc	r24, r1		;
    50b0:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
    50b2:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
    50b4:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
    50b6:	02 c0       	rjmp	.+4      	; 0x50bc <xitoa+0x2a>
	neg	r18		;
    50b8:	21 95       	neg	r18
	ldi	r19, '0'	;/
    50ba:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
    50bc:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
    50be:	aa 27       	eor	r26, r26
2:	lsl	r22		;
    50c0:	66 0f       	add	r22, r22
	rol	r23		;
    50c2:	77 1f       	adc	r23, r23
	rol	r24		;
    50c4:	88 1f       	adc	r24, r24
	rol	r25		;
    50c6:	99 1f       	adc	r25, r25
	rol	r26		;
    50c8:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
    50ca:	a4 17       	cp	r26, r20
	brcs	3f		;
    50cc:	10 f0       	brcs	.+4      	; 0x50d2 <xitoa+0x40>
	sub	r26, r20	;
    50ce:	a4 1b       	sub	r26, r20
	inc	r22		;
    50d0:	63 95       	inc	r22
3:	dec	r21		;
    50d2:	5a 95       	dec	r21
	brne	2b		;/
    50d4:	a9 f7       	brne	.-22     	; 0x50c0 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
    50d6:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
    50d8:	08 f0       	brcs	.+2      	; 0x50dc <xitoa+0x4a>
	subi	r26, -7		;
    50da:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
    50dc:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
    50de:	af 93       	push	r26
	inc	r31		;/
    50e0:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
    50e2:	61 15       	cp	r22, r1
	cpc	r23, r1		;
    50e4:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
    50e6:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
    50e8:	91 05       	cpc	r25, r1
	brne	1b		;/
    50ea:	41 f7       	brne	.-48     	; 0x50bc <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
    50ec:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
    50ee:	11 f4       	brne	.+4      	; 0x50f4 <xitoa+0x62>
	push	r30		;
    50f0:	ef 93       	push	r30
	inc	r31		;/
    50f2:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
    50f4:	f2 17       	cp	r31, r18
	brcc	6f		;
    50f6:	18 f4       	brcc	.+6      	; 0x50fe <xitoa+0x6c>
	push	r19		;
    50f8:	3f 93       	push	r19
	inc	r31		;
    50fa:	f3 95       	inc	r31
	rjmp	5b		;/
    50fc:	fb cf       	rjmp	.-10     	; 0x50f4 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
    50fe:	8f 91       	pop	r24
	rcall	xputc		;
    5100:	b2 df       	rcall	.-156    	; 0x5066 <xputc>
	dec	r31		;
    5102:	fa 95       	dec	r31
	brne	6b		;/
    5104:	e1 f7       	brne	.-8      	; 0x50fe <xitoa+0x6c>

	ret
    5106:	08 95       	ret

00005108 <xprintf>:

#ifdef USE_XPRINTF
.global xprintf
.func xprintf
xprintf:
	push	YH
    5108:	df 93       	push	r29
	push	YL
    510a:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
    510c:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
    510e:	de b7       	in	r29, 0x3e	; 62
	clr	YH
#endif
#if FLASHEND > 0x1FFFF
	adiw	YL, 6		;Y = pointer to arguments
#else
	adiw	YL, 5		;Y = pointer to arguments
    5110:	25 96       	adiw	r28, 0x05	; 5
#endif
	ld	ZL, Y+		;Z = pointer to format string
    5112:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
    5114:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
    5116:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
    5118:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
    511a:	21 f0       	breq	.+8      	; 0x5124 <xprintf+0x1c>
	cpi	r24, '%'	;Is format?
    511c:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
    511e:	29 f0       	breq	.+10     	; 0x512a <xprintf+0x22>
1:	rcall	xputc		;Put a normal character
    5120:	a2 df       	rcall	.-188    	; 0x5066 <xputc>
	rjmp	0b		;/
    5122:	f9 cf       	rjmp	.-14     	; 0x5116 <xprintf+0xe>
90:	pop	YL
    5124:	cf 91       	pop	r28
	pop	YH
    5126:	df 91       	pop	r29
	ret
    5128:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
    512a:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
    512c:	e8 94       	clt
	_LPMI	r21		;Get flags
    512e:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
    5130:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
    5132:	b1 f3       	breq	.-20     	; 0x5120 <xprintf+0x18>
	cpi	r21, '0'	;Zero filled?
    5134:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
    5136:	11 f4       	brne	.+4      	; 0x513c <xprintf+0x34>
	set			;/
    5138:	68 94       	set
22:	_LPMI	r21		;Get width
    513a:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
    513c:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
    513e:	48 f4       	brcc	.+18     	; 0x5152 <xprintf+0x4a>
	subi	r21, '0'	;
    5140:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
    5142:	80 f3       	brcs	.-32     	; 0x5124 <xprintf+0x1c>
	lsl	r18		;
    5144:	22 0f       	add	r18, r18
	mov	r0, r18		;
    5146:	02 2e       	mov	r0, r18
	lsl	r18		;
    5148:	22 0f       	add	r18, r18
	lsl	r18		;
    514a:	22 0f       	add	r18, r18
	add	r18, r0		;
    514c:	20 0d       	add	r18, r0
	add	r18, r21	;
    514e:	25 0f       	add	r18, r21
	rjmp	22b		;/
    5150:	f4 cf       	rjmp	.-24     	; 0x513a <xprintf+0x32>

24:	brtc	25f		;get value (low word)
    5152:	0e f4       	brtc	.+2      	; 0x5156 <xprintf+0x4e>
	neg	r18		;
    5154:	21 95       	neg	r18
25:	ld	r24, Y+		;
    5156:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
    5158:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
    515a:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
    515c:	09 f3       	breq	.-62     	; 0x5120 <xprintf+0x18>
	cpi	r21, 's'	;Is type RAM string?
    515e:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
    5160:	29 f1       	breq	.+74     	; 0x51ac <xprintf+0xa4>
	cpi	r21, 'S'	;Is type ROM string?
    5162:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
    5164:	59 f1       	breq	.+86     	; 0x51bc <xprintf+0xb4>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
    5166:	bc 01       	movw	r22, r24
	clr	r24		;
    5168:	88 27       	eor	r24, r24
	clr	r25		;
    516a:	99 27       	eor	r25, r25
	clt			;/
    516c:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
    516e:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
    5170:	21 f4       	brne	.+8      	; 0x517a <xprintf+0x72>
	ld	r24, Y+		;get value (high word)
    5172:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
    5174:	99 91       	ld	r25, Y+
	set			;
    5176:	68 94       	set
	_LPMI	r21		;/
    5178:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
    517a:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
    517c:	39 f4       	brne	.+14     	; 0x518c <xprintf+0x84>
	ldi	r20, -10	;
    517e:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
    5180:	7e f0       	brts	.+30     	; 0x51a0 <xprintf+0x98>
	sbrs	r23, 7		;
    5182:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
    5184:	0d c0       	rjmp	.+26     	; 0x51a0 <xprintf+0x98>
	ldi	r24, -1		;
    5186:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
    5188:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
    518a:	0a c0       	rjmp	.+20     	; 0x51a0 <xprintf+0x98>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
    518c:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
    518e:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
    5190:	39 f0       	breq	.+14     	; 0x51a0 <xprintf+0x98>
	cpi	r21, 'X'	;Is type hexdecimal?
    5192:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
    5194:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
    5196:	21 f0       	breq	.+8      	; 0x51a0 <xprintf+0x98>
	cpi	r21, 'b'	;Is type binary?
    5198:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
    519a:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
    519c:	09 f0       	breq	.+2      	; 0x51a0 <xprintf+0x98>
	rjmp	90b		;abort
    519e:	c2 cf       	rjmp	.-124    	; 0x5124 <xprintf+0x1c>
40:	push	ZH		;Output the value
    51a0:	ff 93       	push	r31
	push	ZL		;
    51a2:	ef 93       	push	r30
	rcall	xitoa		;
    51a4:	76 df       	rcall	.-276    	; 0x5092 <xitoa>
42:	pop	ZL		;
    51a6:	ef 91       	pop	r30
	pop	ZH		;
    51a8:	ff 91       	pop	r31
	rjmp	0b		;/
    51aa:	b5 cf       	rjmp	.-150    	; 0x5116 <xprintf+0xe>

50:	push	ZH		;Put a string on the RAM
    51ac:	ff 93       	push	r31
	push	ZL
    51ae:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
    51b0:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
    51b2:	81 91       	ld	r24, Z+
	cpi	r24, 0
    51b4:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
    51b6:	b9 f3       	breq	.-18     	; 0x51a6 <xprintf+0x9e>
	rcall	xputc
    51b8:	56 df       	rcall	.-340    	; 0x5066 <xputc>
	rjmp	51b
    51ba:	fb cf       	rjmp	.-10     	; 0x51b2 <xprintf+0xaa>

60:	push	ZH		;Put a string on the ROM
    51bc:	ff 93       	push	r31
	push	ZL
    51be:	ef 93       	push	r30
	rcall	xputs
    51c0:	61 df       	rcall	.-318    	; 0x5084 <xputs>
	rjmp	42b
    51c2:	f1 cf       	rjmp	.-30     	; 0x51a6 <xprintf+0x9e>

000051c4 <xatoi>:

#ifdef USE_XATOI
.global xatoi
.func xatoi
xatoi:
	_MOVW	r1, r0, r23, r22
    51c4:	0b 01       	movw	r0, r22
	_MOVW	XH, XL, r25, r24
    51c6:	dc 01       	movw	r26, r24
	ld	ZL, X+
    51c8:	ed 91       	ld	r30, X+
	ld	ZH, X+
    51ca:	fd 91       	ld	r31, X+
	clr	r18		;r21:r18 = 0;
    51cc:	22 27       	eor	r18, r18
	clr	r19		;
    51ce:	33 27       	eor	r19, r19
	clr	r20		;
    51d0:	44 27       	eor	r20, r20
	clr	r21		;/
    51d2:	55 27       	eor	r21, r21
	clt			;T = 0;
    51d4:	e8 94       	clt

	ldi	r25, 10		;r25 = 10;
    51d6:	9a e0       	ldi	r25, 0x0A	; 10
	rjmp	41f		;/
    51d8:	01 c0       	rjmp	.+2      	; 0x51dc <xatoi+0x18>
40:	adiw	ZL, 1		;Z++;
    51da:	31 96       	adiw	r30, 0x01	; 1
41:	ld	r22, Z		;r22 = *Z;
    51dc:	60 81       	ld	r22, Z
	cpi	r22, ' '	;if(r22 == ' ') continue
    51de:	60 32       	cpi	r22, 0x20	; 32
	breq	40b		;/
    51e0:	e1 f3       	breq	.-8      	; 0x51da <xatoi+0x16>
	brcs	70f		;if(r22 < ' ') error;
    51e2:	a8 f1       	brcs	.+106    	; 0x524e <xatoi+0x8a>
	cpi	r22, '-'	;if(r22 == '-') {
    51e4:	6d 32       	cpi	r22, 0x2D	; 45
	brne	42f		; T = 1;
    51e6:	11 f4       	brne	.+4      	; 0x51ec <xatoi+0x28>
	set			; continue;
    51e8:	68 94       	set
	rjmp	40b		;}
    51ea:	f7 cf       	rjmp	.-18     	; 0x51da <xatoi+0x16>
42:	cpi	r22, '9'+1	;if(r22 > '9') error;
    51ec:	6a 33       	cpi	r22, 0x3A	; 58
	brcc	70f		;/
    51ee:	78 f5       	brcc	.+94     	; 0x524e <xatoi+0x8a>
	cpi	r22, '0'	;if(r22 < '0') error;
    51f0:	60 33       	cpi	r22, 0x30	; 48
	brcs	70f		;/
    51f2:	68 f1       	brcs	.+90     	; 0x524e <xatoi+0x8a>
	brne	51f		;if(r22 > '0') cv_start;
    51f4:	71 f4       	brne	.+28     	; 0x5212 <xatoi+0x4e>
	ldi	r25, 8		;r25 = 8;
    51f6:	98 e0       	ldi	r25, 0x08	; 8
	adiw	ZL, 1		;r22 = *(++Z);
    51f8:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;/
    51fa:	60 81       	ld	r22, Z
	cpi	r22, ' '+1	;if(r22 <= ' ') exit;
    51fc:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    51fe:	48 f1       	brcs	.+82     	; 0x5252 <xatoi+0x8e>
	cpi	r22, 'b'	;if(r22 == 'b') {
    5200:	62 36       	cpi	r22, 0x62	; 98
	brne	43f		; r25 = 2;
    5202:	11 f4       	brne	.+4      	; 0x5208 <xatoi+0x44>
	ldi	r25, 2		; cv_start;
    5204:	92 e0       	ldi	r25, 0x02	; 2
	rjmp	50f		;}
    5206:	03 c0       	rjmp	.+6      	; 0x520e <xatoi+0x4a>
43:	cpi	r22, 'x'	;if(r22 != 'x') error;
    5208:	68 37       	cpi	r22, 0x78	; 120
	brne	51f		;/
    520a:	19 f4       	brne	.+6      	; 0x5212 <xatoi+0x4e>
	ldi	r25, 16		;r25 = 16;
    520c:	90 e1       	ldi	r25, 0x10	; 16

50:	adiw	ZL, 1		;Z++;
    520e:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;r22 = *Z;
    5210:	60 81       	ld	r22, Z
51:	cpi	r22, ' '+1	;if(r22 <= ' ') break;
    5212:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    5214:	f0 f0       	brcs	.+60     	; 0x5252 <xatoi+0x8e>
	cpi	r22, 'a'	;if(r22 >= 'a') r22 =- 0x20;
    5216:	61 36       	cpi	r22, 0x61	; 97
	brcs	52f		;
    5218:	08 f0       	brcs	.+2      	; 0x521c <xatoi+0x58>
	subi	r22, 0x20	;/
    521a:	60 52       	subi	r22, 0x20	; 32
52:	subi	r22, '0'	;if((r22 -= '0') < 0) error;
    521c:	60 53       	subi	r22, 0x30	; 48
	brcs	70f		;/
    521e:	b8 f0       	brcs	.+46     	; 0x524e <xatoi+0x8a>
	cpi	r22, 10		;if(r22 >= 10) {
    5220:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	53f		; r22 -= 7;
    5222:	18 f0       	brcs	.+6      	; 0x522a <xatoi+0x66>
	subi	r22, 7		; if(r22 < 10) 
    5224:	67 50       	subi	r22, 0x07	; 7
	cpi	r22, 10		;
    5226:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	70f		;}
    5228:	90 f0       	brcs	.+36     	; 0x524e <xatoi+0x8a>
53:	cp	r22, r25	;if(r22 >= r25) error;
    522a:	69 17       	cp	r22, r25
	brcc	70f		;/
    522c:	80 f4       	brcc	.+32     	; 0x524e <xatoi+0x8a>
60:	ldi	r24, 33		;r21:r18 *= r25;
    522e:	81 e2       	ldi	r24, 0x21	; 33
	sub	r23, r23	;
    5230:	77 1b       	sub	r23, r23
61:	brcc	62f		;
    5232:	08 f4       	brcc	.+2      	; 0x5236 <xatoi+0x72>
	add	r23, r25	;
    5234:	79 0f       	add	r23, r25
62:	lsr	r23		;
    5236:	76 95       	lsr	r23
	ror	r21		;
    5238:	57 95       	ror	r21
	ror	r20		;
    523a:	47 95       	ror	r20
	ror	r19		;
    523c:	37 95       	ror	r19
	ror	r18		;
    523e:	27 95       	ror	r18
	dec	r24		;
    5240:	8a 95       	dec	r24
	brne	61b		;/
    5242:	b9 f7       	brne	.-18     	; 0x5232 <xatoi+0x6e>
	add	r18, r22	;r21:r18 += r22;
    5244:	26 0f       	add	r18, r22
	adc	r19, r24	;
    5246:	38 1f       	adc	r19, r24
	adc	r20, r24	;
    5248:	48 1f       	adc	r20, r24
	adc	r21, r24	;/
    524a:	58 1f       	adc	r21, r24
	rjmp	50b		;repeat
    524c:	e0 cf       	rjmp	.-64     	; 0x520e <xatoi+0x4a>

70:	ldi	r24, 0
    524e:	80 e0       	ldi	r24, 0x00	; 0
	rjmp	81f
    5250:	01 c0       	rjmp	.+2      	; 0x5254 <xatoi+0x90>
80:	ldi	r24, 1
    5252:	81 e0       	ldi	r24, 0x01	; 1
81:	brtc	82f
    5254:	4e f4       	brtc	.+18     	; 0x5268 <xatoi+0xa4>
	clr	r22
    5256:	66 27       	eor	r22, r22
	com	r18
    5258:	20 95       	com	r18
	com	r19
    525a:	30 95       	com	r19
	com	r20
    525c:	40 95       	com	r20
	com	r21
    525e:	50 95       	com	r21
	adc	r18, r22
    5260:	26 1f       	adc	r18, r22
	adc	r19, r22
    5262:	36 1f       	adc	r19, r22
	adc	r20, r22
    5264:	46 1f       	adc	r20, r22
	adc	r21, r22
    5266:	56 1f       	adc	r21, r22
82:	st	-X, ZH
    5268:	fe 93       	st	-X, r31
	st	-X, ZL
    526a:	ee 93       	st	-X, r30
	_MOVW	XH, XL, r1, r0
    526c:	d0 01       	movw	r26, r0
	st	X+, r18
    526e:	2d 93       	st	X+, r18
	st	X+, r19
    5270:	3d 93       	st	X+, r19
	st	X+, r20
    5272:	4d 93       	st	X+, r20
	st	X+, r21
    5274:	5d 93       	st	X+, r21
	clr	r1
    5276:	11 24       	eor	r1, r1
	ret
    5278:	08 95       	ret

0000527a <_fpadd_parts>:
    527a:	a0 e0       	ldi	r26, 0x00	; 0
    527c:	b0 e0       	ldi	r27, 0x00	; 0
    527e:	e3 e4       	ldi	r30, 0x43	; 67
    5280:	f9 e2       	ldi	r31, 0x29	; 41
    5282:	0c 94 a2 2e 	jmp	0x5d44	; 0x5d44 <__prologue_saves__>
    5286:	dc 01       	movw	r26, r24
    5288:	2b 01       	movw	r4, r22
    528a:	fa 01       	movw	r30, r20
    528c:	9c 91       	ld	r25, X
    528e:	92 30       	cpi	r25, 0x02	; 2
    5290:	08 f4       	brcc	.+2      	; 0x5294 <_fpadd_parts+0x1a>
    5292:	39 c1       	rjmp	.+626    	; 0x5506 <_fpadd_parts+0x28c>
    5294:	eb 01       	movw	r28, r22
    5296:	88 81       	ld	r24, Y
    5298:	82 30       	cpi	r24, 0x02	; 2
    529a:	08 f4       	brcc	.+2      	; 0x529e <_fpadd_parts+0x24>
    529c:	33 c1       	rjmp	.+614    	; 0x5504 <_fpadd_parts+0x28a>
    529e:	94 30       	cpi	r25, 0x04	; 4
    52a0:	69 f4       	brne	.+26     	; 0x52bc <_fpadd_parts+0x42>
    52a2:	84 30       	cpi	r24, 0x04	; 4
    52a4:	09 f0       	breq	.+2      	; 0x52a8 <_fpadd_parts+0x2e>
    52a6:	2f c1       	rjmp	.+606    	; 0x5506 <_fpadd_parts+0x28c>
    52a8:	11 96       	adiw	r26, 0x01	; 1
    52aa:	9c 91       	ld	r25, X
    52ac:	11 97       	sbiw	r26, 0x01	; 1
    52ae:	89 81       	ldd	r24, Y+1	; 0x01
    52b0:	98 17       	cp	r25, r24
    52b2:	09 f4       	brne	.+2      	; 0x52b6 <_fpadd_parts+0x3c>
    52b4:	28 c1       	rjmp	.+592    	; 0x5506 <_fpadd_parts+0x28c>
    52b6:	af e1       	ldi	r26, 0x1F	; 31
    52b8:	b3 e0       	ldi	r27, 0x03	; 3
    52ba:	25 c1       	rjmp	.+586    	; 0x5506 <_fpadd_parts+0x28c>
    52bc:	84 30       	cpi	r24, 0x04	; 4
    52be:	09 f4       	brne	.+2      	; 0x52c2 <_fpadd_parts+0x48>
    52c0:	21 c1       	rjmp	.+578    	; 0x5504 <_fpadd_parts+0x28a>
    52c2:	82 30       	cpi	r24, 0x02	; 2
    52c4:	a9 f4       	brne	.+42     	; 0x52f0 <_fpadd_parts+0x76>
    52c6:	92 30       	cpi	r25, 0x02	; 2
    52c8:	09 f0       	breq	.+2      	; 0x52cc <_fpadd_parts+0x52>
    52ca:	1d c1       	rjmp	.+570    	; 0x5506 <_fpadd_parts+0x28c>
    52cc:	9a 01       	movw	r18, r20
    52ce:	ad 01       	movw	r20, r26
    52d0:	88 e0       	ldi	r24, 0x08	; 8
    52d2:	ea 01       	movw	r28, r20
    52d4:	09 90       	ld	r0, Y+
    52d6:	ae 01       	movw	r20, r28
    52d8:	e9 01       	movw	r28, r18
    52da:	09 92       	st	Y+, r0
    52dc:	9e 01       	movw	r18, r28
    52de:	81 50       	subi	r24, 0x01	; 1
    52e0:	c1 f7       	brne	.-16     	; 0x52d2 <_fpadd_parts+0x58>
    52e2:	e2 01       	movw	r28, r4
    52e4:	89 81       	ldd	r24, Y+1	; 0x01
    52e6:	11 96       	adiw	r26, 0x01	; 1
    52e8:	9c 91       	ld	r25, X
    52ea:	89 23       	and	r24, r25
    52ec:	81 83       	std	Z+1, r24	; 0x01
    52ee:	08 c1       	rjmp	.+528    	; 0x5500 <_fpadd_parts+0x286>
    52f0:	92 30       	cpi	r25, 0x02	; 2
    52f2:	09 f4       	brne	.+2      	; 0x52f6 <_fpadd_parts+0x7c>
    52f4:	07 c1       	rjmp	.+526    	; 0x5504 <_fpadd_parts+0x28a>
    52f6:	12 96       	adiw	r26, 0x02	; 2
    52f8:	2d 90       	ld	r2, X+
    52fa:	3c 90       	ld	r3, X
    52fc:	13 97       	sbiw	r26, 0x03	; 3
    52fe:	eb 01       	movw	r28, r22
    5300:	8a 81       	ldd	r24, Y+2	; 0x02
    5302:	9b 81       	ldd	r25, Y+3	; 0x03
    5304:	14 96       	adiw	r26, 0x04	; 4
    5306:	ad 90       	ld	r10, X+
    5308:	bd 90       	ld	r11, X+
    530a:	cd 90       	ld	r12, X+
    530c:	dc 90       	ld	r13, X
    530e:	17 97       	sbiw	r26, 0x07	; 7
    5310:	ec 80       	ldd	r14, Y+4	; 0x04
    5312:	fd 80       	ldd	r15, Y+5	; 0x05
    5314:	0e 81       	ldd	r16, Y+6	; 0x06
    5316:	1f 81       	ldd	r17, Y+7	; 0x07
    5318:	91 01       	movw	r18, r2
    531a:	28 1b       	sub	r18, r24
    531c:	39 0b       	sbc	r19, r25
    531e:	b9 01       	movw	r22, r18
    5320:	37 ff       	sbrs	r19, 7
    5322:	04 c0       	rjmp	.+8      	; 0x532c <_fpadd_parts+0xb2>
    5324:	66 27       	eor	r22, r22
    5326:	77 27       	eor	r23, r23
    5328:	62 1b       	sub	r22, r18
    532a:	73 0b       	sbc	r23, r19
    532c:	60 32       	cpi	r22, 0x20	; 32
    532e:	71 05       	cpc	r23, r1
    5330:	0c f0       	brlt	.+2      	; 0x5334 <_fpadd_parts+0xba>
    5332:	61 c0       	rjmp	.+194    	; 0x53f6 <_fpadd_parts+0x17c>
    5334:	12 16       	cp	r1, r18
    5336:	13 06       	cpc	r1, r19
    5338:	6c f5       	brge	.+90     	; 0x5394 <_fpadd_parts+0x11a>
    533a:	37 01       	movw	r6, r14
    533c:	48 01       	movw	r8, r16
    533e:	06 2e       	mov	r0, r22
    5340:	04 c0       	rjmp	.+8      	; 0x534a <_fpadd_parts+0xd0>
    5342:	96 94       	lsr	r9
    5344:	87 94       	ror	r8
    5346:	77 94       	ror	r7
    5348:	67 94       	ror	r6
    534a:	0a 94       	dec	r0
    534c:	d2 f7       	brpl	.-12     	; 0x5342 <_fpadd_parts+0xc8>
    534e:	21 e0       	ldi	r18, 0x01	; 1
    5350:	30 e0       	ldi	r19, 0x00	; 0
    5352:	40 e0       	ldi	r20, 0x00	; 0
    5354:	50 e0       	ldi	r21, 0x00	; 0
    5356:	04 c0       	rjmp	.+8      	; 0x5360 <_fpadd_parts+0xe6>
    5358:	22 0f       	add	r18, r18
    535a:	33 1f       	adc	r19, r19
    535c:	44 1f       	adc	r20, r20
    535e:	55 1f       	adc	r21, r21
    5360:	6a 95       	dec	r22
    5362:	d2 f7       	brpl	.-12     	; 0x5358 <_fpadd_parts+0xde>
    5364:	21 50       	subi	r18, 0x01	; 1
    5366:	30 40       	sbci	r19, 0x00	; 0
    5368:	40 40       	sbci	r20, 0x00	; 0
    536a:	50 40       	sbci	r21, 0x00	; 0
    536c:	2e 21       	and	r18, r14
    536e:	3f 21       	and	r19, r15
    5370:	40 23       	and	r20, r16
    5372:	51 23       	and	r21, r17
    5374:	21 15       	cp	r18, r1
    5376:	31 05       	cpc	r19, r1
    5378:	41 05       	cpc	r20, r1
    537a:	51 05       	cpc	r21, r1
    537c:	21 f0       	breq	.+8      	; 0x5386 <_fpadd_parts+0x10c>
    537e:	21 e0       	ldi	r18, 0x01	; 1
    5380:	30 e0       	ldi	r19, 0x00	; 0
    5382:	40 e0       	ldi	r20, 0x00	; 0
    5384:	50 e0       	ldi	r21, 0x00	; 0
    5386:	79 01       	movw	r14, r18
    5388:	8a 01       	movw	r16, r20
    538a:	e6 28       	or	r14, r6
    538c:	f7 28       	or	r15, r7
    538e:	08 29       	or	r16, r8
    5390:	19 29       	or	r17, r9
    5392:	3c c0       	rjmp	.+120    	; 0x540c <_fpadd_parts+0x192>
    5394:	23 2b       	or	r18, r19
    5396:	d1 f1       	breq	.+116    	; 0x540c <_fpadd_parts+0x192>
    5398:	26 0e       	add	r2, r22
    539a:	37 1e       	adc	r3, r23
    539c:	35 01       	movw	r6, r10
    539e:	46 01       	movw	r8, r12
    53a0:	06 2e       	mov	r0, r22
    53a2:	04 c0       	rjmp	.+8      	; 0x53ac <_fpadd_parts+0x132>
    53a4:	96 94       	lsr	r9
    53a6:	87 94       	ror	r8
    53a8:	77 94       	ror	r7
    53aa:	67 94       	ror	r6
    53ac:	0a 94       	dec	r0
    53ae:	d2 f7       	brpl	.-12     	; 0x53a4 <_fpadd_parts+0x12a>
    53b0:	21 e0       	ldi	r18, 0x01	; 1
    53b2:	30 e0       	ldi	r19, 0x00	; 0
    53b4:	40 e0       	ldi	r20, 0x00	; 0
    53b6:	50 e0       	ldi	r21, 0x00	; 0
    53b8:	04 c0       	rjmp	.+8      	; 0x53c2 <_fpadd_parts+0x148>
    53ba:	22 0f       	add	r18, r18
    53bc:	33 1f       	adc	r19, r19
    53be:	44 1f       	adc	r20, r20
    53c0:	55 1f       	adc	r21, r21
    53c2:	6a 95       	dec	r22
    53c4:	d2 f7       	brpl	.-12     	; 0x53ba <_fpadd_parts+0x140>
    53c6:	21 50       	subi	r18, 0x01	; 1
    53c8:	30 40       	sbci	r19, 0x00	; 0
    53ca:	40 40       	sbci	r20, 0x00	; 0
    53cc:	50 40       	sbci	r21, 0x00	; 0
    53ce:	2a 21       	and	r18, r10
    53d0:	3b 21       	and	r19, r11
    53d2:	4c 21       	and	r20, r12
    53d4:	5d 21       	and	r21, r13
    53d6:	21 15       	cp	r18, r1
    53d8:	31 05       	cpc	r19, r1
    53da:	41 05       	cpc	r20, r1
    53dc:	51 05       	cpc	r21, r1
    53de:	21 f0       	breq	.+8      	; 0x53e8 <_fpadd_parts+0x16e>
    53e0:	21 e0       	ldi	r18, 0x01	; 1
    53e2:	30 e0       	ldi	r19, 0x00	; 0
    53e4:	40 e0       	ldi	r20, 0x00	; 0
    53e6:	50 e0       	ldi	r21, 0x00	; 0
    53e8:	59 01       	movw	r10, r18
    53ea:	6a 01       	movw	r12, r20
    53ec:	a6 28       	or	r10, r6
    53ee:	b7 28       	or	r11, r7
    53f0:	c8 28       	or	r12, r8
    53f2:	d9 28       	or	r13, r9
    53f4:	0b c0       	rjmp	.+22     	; 0x540c <_fpadd_parts+0x192>
    53f6:	82 15       	cp	r24, r2
    53f8:	93 05       	cpc	r25, r3
    53fa:	2c f0       	brlt	.+10     	; 0x5406 <_fpadd_parts+0x18c>
    53fc:	1c 01       	movw	r2, r24
    53fe:	aa 24       	eor	r10, r10
    5400:	bb 24       	eor	r11, r11
    5402:	65 01       	movw	r12, r10
    5404:	03 c0       	rjmp	.+6      	; 0x540c <_fpadd_parts+0x192>
    5406:	ee 24       	eor	r14, r14
    5408:	ff 24       	eor	r15, r15
    540a:	87 01       	movw	r16, r14
    540c:	11 96       	adiw	r26, 0x01	; 1
    540e:	9c 91       	ld	r25, X
    5410:	d2 01       	movw	r26, r4
    5412:	11 96       	adiw	r26, 0x01	; 1
    5414:	8c 91       	ld	r24, X
    5416:	98 17       	cp	r25, r24
    5418:	09 f4       	brne	.+2      	; 0x541c <_fpadd_parts+0x1a2>
    541a:	45 c0       	rjmp	.+138    	; 0x54a6 <_fpadd_parts+0x22c>
    541c:	99 23       	and	r25, r25
    541e:	39 f0       	breq	.+14     	; 0x542e <_fpadd_parts+0x1b4>
    5420:	a8 01       	movw	r20, r16
    5422:	97 01       	movw	r18, r14
    5424:	2a 19       	sub	r18, r10
    5426:	3b 09       	sbc	r19, r11
    5428:	4c 09       	sbc	r20, r12
    542a:	5d 09       	sbc	r21, r13
    542c:	06 c0       	rjmp	.+12     	; 0x543a <_fpadd_parts+0x1c0>
    542e:	a6 01       	movw	r20, r12
    5430:	95 01       	movw	r18, r10
    5432:	2e 19       	sub	r18, r14
    5434:	3f 09       	sbc	r19, r15
    5436:	40 0b       	sbc	r20, r16
    5438:	51 0b       	sbc	r21, r17
    543a:	57 fd       	sbrc	r21, 7
    543c:	08 c0       	rjmp	.+16     	; 0x544e <_fpadd_parts+0x1d4>
    543e:	11 82       	std	Z+1, r1	; 0x01
    5440:	33 82       	std	Z+3, r3	; 0x03
    5442:	22 82       	std	Z+2, r2	; 0x02
    5444:	24 83       	std	Z+4, r18	; 0x04
    5446:	35 83       	std	Z+5, r19	; 0x05
    5448:	46 83       	std	Z+6, r20	; 0x06
    544a:	57 83       	std	Z+7, r21	; 0x07
    544c:	1d c0       	rjmp	.+58     	; 0x5488 <_fpadd_parts+0x20e>
    544e:	81 e0       	ldi	r24, 0x01	; 1
    5450:	81 83       	std	Z+1, r24	; 0x01
    5452:	33 82       	std	Z+3, r3	; 0x03
    5454:	22 82       	std	Z+2, r2	; 0x02
    5456:	88 27       	eor	r24, r24
    5458:	99 27       	eor	r25, r25
    545a:	dc 01       	movw	r26, r24
    545c:	82 1b       	sub	r24, r18
    545e:	93 0b       	sbc	r25, r19
    5460:	a4 0b       	sbc	r26, r20
    5462:	b5 0b       	sbc	r27, r21
    5464:	84 83       	std	Z+4, r24	; 0x04
    5466:	95 83       	std	Z+5, r25	; 0x05
    5468:	a6 83       	std	Z+6, r26	; 0x06
    546a:	b7 83       	std	Z+7, r27	; 0x07
    546c:	0d c0       	rjmp	.+26     	; 0x5488 <_fpadd_parts+0x20e>
    546e:	22 0f       	add	r18, r18
    5470:	33 1f       	adc	r19, r19
    5472:	44 1f       	adc	r20, r20
    5474:	55 1f       	adc	r21, r21
    5476:	24 83       	std	Z+4, r18	; 0x04
    5478:	35 83       	std	Z+5, r19	; 0x05
    547a:	46 83       	std	Z+6, r20	; 0x06
    547c:	57 83       	std	Z+7, r21	; 0x07
    547e:	82 81       	ldd	r24, Z+2	; 0x02
    5480:	93 81       	ldd	r25, Z+3	; 0x03
    5482:	01 97       	sbiw	r24, 0x01	; 1
    5484:	93 83       	std	Z+3, r25	; 0x03
    5486:	82 83       	std	Z+2, r24	; 0x02
    5488:	24 81       	ldd	r18, Z+4	; 0x04
    548a:	35 81       	ldd	r19, Z+5	; 0x05
    548c:	46 81       	ldd	r20, Z+6	; 0x06
    548e:	57 81       	ldd	r21, Z+7	; 0x07
    5490:	da 01       	movw	r26, r20
    5492:	c9 01       	movw	r24, r18
    5494:	01 97       	sbiw	r24, 0x01	; 1
    5496:	a1 09       	sbc	r26, r1
    5498:	b1 09       	sbc	r27, r1
    549a:	8f 5f       	subi	r24, 0xFF	; 255
    549c:	9f 4f       	sbci	r25, 0xFF	; 255
    549e:	af 4f       	sbci	r26, 0xFF	; 255
    54a0:	bf 43       	sbci	r27, 0x3F	; 63
    54a2:	28 f3       	brcs	.-54     	; 0x546e <_fpadd_parts+0x1f4>
    54a4:	0b c0       	rjmp	.+22     	; 0x54bc <_fpadd_parts+0x242>
    54a6:	91 83       	std	Z+1, r25	; 0x01
    54a8:	33 82       	std	Z+3, r3	; 0x03
    54aa:	22 82       	std	Z+2, r2	; 0x02
    54ac:	ea 0c       	add	r14, r10
    54ae:	fb 1c       	adc	r15, r11
    54b0:	0c 1d       	adc	r16, r12
    54b2:	1d 1d       	adc	r17, r13
    54b4:	e4 82       	std	Z+4, r14	; 0x04
    54b6:	f5 82       	std	Z+5, r15	; 0x05
    54b8:	06 83       	std	Z+6, r16	; 0x06
    54ba:	17 83       	std	Z+7, r17	; 0x07
    54bc:	83 e0       	ldi	r24, 0x03	; 3
    54be:	80 83       	st	Z, r24
    54c0:	24 81       	ldd	r18, Z+4	; 0x04
    54c2:	35 81       	ldd	r19, Z+5	; 0x05
    54c4:	46 81       	ldd	r20, Z+6	; 0x06
    54c6:	57 81       	ldd	r21, Z+7	; 0x07
    54c8:	57 ff       	sbrs	r21, 7
    54ca:	1a c0       	rjmp	.+52     	; 0x5500 <_fpadd_parts+0x286>
    54cc:	c9 01       	movw	r24, r18
    54ce:	aa 27       	eor	r26, r26
    54d0:	97 fd       	sbrc	r25, 7
    54d2:	a0 95       	com	r26
    54d4:	ba 2f       	mov	r27, r26
    54d6:	81 70       	andi	r24, 0x01	; 1
    54d8:	90 70       	andi	r25, 0x00	; 0
    54da:	a0 70       	andi	r26, 0x00	; 0
    54dc:	b0 70       	andi	r27, 0x00	; 0
    54de:	56 95       	lsr	r21
    54e0:	47 95       	ror	r20
    54e2:	37 95       	ror	r19
    54e4:	27 95       	ror	r18
    54e6:	82 2b       	or	r24, r18
    54e8:	93 2b       	or	r25, r19
    54ea:	a4 2b       	or	r26, r20
    54ec:	b5 2b       	or	r27, r21
    54ee:	84 83       	std	Z+4, r24	; 0x04
    54f0:	95 83       	std	Z+5, r25	; 0x05
    54f2:	a6 83       	std	Z+6, r26	; 0x06
    54f4:	b7 83       	std	Z+7, r27	; 0x07
    54f6:	82 81       	ldd	r24, Z+2	; 0x02
    54f8:	93 81       	ldd	r25, Z+3	; 0x03
    54fa:	01 96       	adiw	r24, 0x01	; 1
    54fc:	93 83       	std	Z+3, r25	; 0x03
    54fe:	82 83       	std	Z+2, r24	; 0x02
    5500:	df 01       	movw	r26, r30
    5502:	01 c0       	rjmp	.+2      	; 0x5506 <_fpadd_parts+0x28c>
    5504:	d2 01       	movw	r26, r4
    5506:	cd 01       	movw	r24, r26
    5508:	cd b7       	in	r28, 0x3d	; 61
    550a:	de b7       	in	r29, 0x3e	; 62
    550c:	e2 e1       	ldi	r30, 0x12	; 18
    550e:	0c 94 be 2e 	jmp	0x5d7c	; 0x5d7c <__epilogue_restores__>

00005512 <__subsf3>:
    5512:	a0 e2       	ldi	r26, 0x20	; 32
    5514:	b0 e0       	ldi	r27, 0x00	; 0
    5516:	ef e8       	ldi	r30, 0x8F	; 143
    5518:	fa e2       	ldi	r31, 0x2A	; 42
    551a:	0c 94 ae 2e 	jmp	0x5d5c	; 0x5d5c <__prologue_saves__+0x18>
    551e:	69 83       	std	Y+1, r22	; 0x01
    5520:	7a 83       	std	Y+2, r23	; 0x02
    5522:	8b 83       	std	Y+3, r24	; 0x03
    5524:	9c 83       	std	Y+4, r25	; 0x04
    5526:	2d 83       	std	Y+5, r18	; 0x05
    5528:	3e 83       	std	Y+6, r19	; 0x06
    552a:	4f 83       	std	Y+7, r20	; 0x07
    552c:	58 87       	std	Y+8, r21	; 0x08
    552e:	e9 e0       	ldi	r30, 0x09	; 9
    5530:	ee 2e       	mov	r14, r30
    5532:	f1 2c       	mov	r15, r1
    5534:	ec 0e       	add	r14, r28
    5536:	fd 1e       	adc	r15, r29
    5538:	ce 01       	movw	r24, r28
    553a:	01 96       	adiw	r24, 0x01	; 1
    553c:	b7 01       	movw	r22, r14
    553e:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <__unpack_f>
    5542:	8e 01       	movw	r16, r28
    5544:	0f 5e       	subi	r16, 0xEF	; 239
    5546:	1f 4f       	sbci	r17, 0xFF	; 255
    5548:	ce 01       	movw	r24, r28
    554a:	05 96       	adiw	r24, 0x05	; 5
    554c:	b8 01       	movw	r22, r16
    554e:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <__unpack_f>
    5552:	8a 89       	ldd	r24, Y+18	; 0x12
    5554:	91 e0       	ldi	r25, 0x01	; 1
    5556:	89 27       	eor	r24, r25
    5558:	8a 8b       	std	Y+18, r24	; 0x12
    555a:	c7 01       	movw	r24, r14
    555c:	b8 01       	movw	r22, r16
    555e:	ae 01       	movw	r20, r28
    5560:	47 5e       	subi	r20, 0xE7	; 231
    5562:	5f 4f       	sbci	r21, 0xFF	; 255
    5564:	0e 94 3d 29 	call	0x527a	; 0x527a <_fpadd_parts>
    5568:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <__pack_f>
    556c:	a0 96       	adiw	r28, 0x20	; 32
    556e:	e6 e0       	ldi	r30, 0x06	; 6
    5570:	0c 94 ca 2e 	jmp	0x5d94	; 0x5d94 <__epilogue_restores__+0x18>

00005574 <__addsf3>:
    5574:	a0 e2       	ldi	r26, 0x20	; 32
    5576:	b0 e0       	ldi	r27, 0x00	; 0
    5578:	e0 ec       	ldi	r30, 0xC0	; 192
    557a:	fa e2       	ldi	r31, 0x2A	; 42
    557c:	0c 94 ae 2e 	jmp	0x5d5c	; 0x5d5c <__prologue_saves__+0x18>
    5580:	69 83       	std	Y+1, r22	; 0x01
    5582:	7a 83       	std	Y+2, r23	; 0x02
    5584:	8b 83       	std	Y+3, r24	; 0x03
    5586:	9c 83       	std	Y+4, r25	; 0x04
    5588:	2d 83       	std	Y+5, r18	; 0x05
    558a:	3e 83       	std	Y+6, r19	; 0x06
    558c:	4f 83       	std	Y+7, r20	; 0x07
    558e:	58 87       	std	Y+8, r21	; 0x08
    5590:	f9 e0       	ldi	r31, 0x09	; 9
    5592:	ef 2e       	mov	r14, r31
    5594:	f1 2c       	mov	r15, r1
    5596:	ec 0e       	add	r14, r28
    5598:	fd 1e       	adc	r15, r29
    559a:	ce 01       	movw	r24, r28
    559c:	01 96       	adiw	r24, 0x01	; 1
    559e:	b7 01       	movw	r22, r14
    55a0:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <__unpack_f>
    55a4:	8e 01       	movw	r16, r28
    55a6:	0f 5e       	subi	r16, 0xEF	; 239
    55a8:	1f 4f       	sbci	r17, 0xFF	; 255
    55aa:	ce 01       	movw	r24, r28
    55ac:	05 96       	adiw	r24, 0x05	; 5
    55ae:	b8 01       	movw	r22, r16
    55b0:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <__unpack_f>
    55b4:	c7 01       	movw	r24, r14
    55b6:	b8 01       	movw	r22, r16
    55b8:	ae 01       	movw	r20, r28
    55ba:	47 5e       	subi	r20, 0xE7	; 231
    55bc:	5f 4f       	sbci	r21, 0xFF	; 255
    55be:	0e 94 3d 29 	call	0x527a	; 0x527a <_fpadd_parts>
    55c2:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <__pack_f>
    55c6:	a0 96       	adiw	r28, 0x20	; 32
    55c8:	e6 e0       	ldi	r30, 0x06	; 6
    55ca:	0c 94 ca 2e 	jmp	0x5d94	; 0x5d94 <__epilogue_restores__+0x18>

000055ce <__mulsf3>:
    55ce:	a0 e2       	ldi	r26, 0x20	; 32
    55d0:	b0 e0       	ldi	r27, 0x00	; 0
    55d2:	ed ee       	ldi	r30, 0xED	; 237
    55d4:	fa e2       	ldi	r31, 0x2A	; 42
    55d6:	0c 94 a2 2e 	jmp	0x5d44	; 0x5d44 <__prologue_saves__>
    55da:	69 83       	std	Y+1, r22	; 0x01
    55dc:	7a 83       	std	Y+2, r23	; 0x02
    55de:	8b 83       	std	Y+3, r24	; 0x03
    55e0:	9c 83       	std	Y+4, r25	; 0x04
    55e2:	2d 83       	std	Y+5, r18	; 0x05
    55e4:	3e 83       	std	Y+6, r19	; 0x06
    55e6:	4f 83       	std	Y+7, r20	; 0x07
    55e8:	58 87       	std	Y+8, r21	; 0x08
    55ea:	ce 01       	movw	r24, r28
    55ec:	01 96       	adiw	r24, 0x01	; 1
    55ee:	be 01       	movw	r22, r28
    55f0:	67 5f       	subi	r22, 0xF7	; 247
    55f2:	7f 4f       	sbci	r23, 0xFF	; 255
    55f4:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <__unpack_f>
    55f8:	ce 01       	movw	r24, r28
    55fa:	05 96       	adiw	r24, 0x05	; 5
    55fc:	be 01       	movw	r22, r28
    55fe:	6f 5e       	subi	r22, 0xEF	; 239
    5600:	7f 4f       	sbci	r23, 0xFF	; 255
    5602:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <__unpack_f>
    5606:	99 85       	ldd	r25, Y+9	; 0x09
    5608:	92 30       	cpi	r25, 0x02	; 2
    560a:	88 f0       	brcs	.+34     	; 0x562e <__mulsf3+0x60>
    560c:	89 89       	ldd	r24, Y+17	; 0x11
    560e:	82 30       	cpi	r24, 0x02	; 2
    5610:	c8 f0       	brcs	.+50     	; 0x5644 <__mulsf3+0x76>
    5612:	94 30       	cpi	r25, 0x04	; 4
    5614:	19 f4       	brne	.+6      	; 0x561c <__mulsf3+0x4e>
    5616:	82 30       	cpi	r24, 0x02	; 2
    5618:	51 f4       	brne	.+20     	; 0x562e <__mulsf3+0x60>
    561a:	04 c0       	rjmp	.+8      	; 0x5624 <__mulsf3+0x56>
    561c:	84 30       	cpi	r24, 0x04	; 4
    561e:	29 f4       	brne	.+10     	; 0x562a <__mulsf3+0x5c>
    5620:	92 30       	cpi	r25, 0x02	; 2
    5622:	81 f4       	brne	.+32     	; 0x5644 <__mulsf3+0x76>
    5624:	8f e1       	ldi	r24, 0x1F	; 31
    5626:	93 e0       	ldi	r25, 0x03	; 3
    5628:	c6 c0       	rjmp	.+396    	; 0x57b6 <__mulsf3+0x1e8>
    562a:	92 30       	cpi	r25, 0x02	; 2
    562c:	49 f4       	brne	.+18     	; 0x5640 <__mulsf3+0x72>
    562e:	20 e0       	ldi	r18, 0x00	; 0
    5630:	9a 85       	ldd	r25, Y+10	; 0x0a
    5632:	8a 89       	ldd	r24, Y+18	; 0x12
    5634:	98 13       	cpse	r25, r24
    5636:	21 e0       	ldi	r18, 0x01	; 1
    5638:	2a 87       	std	Y+10, r18	; 0x0a
    563a:	ce 01       	movw	r24, r28
    563c:	09 96       	adiw	r24, 0x09	; 9
    563e:	bb c0       	rjmp	.+374    	; 0x57b6 <__mulsf3+0x1e8>
    5640:	82 30       	cpi	r24, 0x02	; 2
    5642:	49 f4       	brne	.+18     	; 0x5656 <__mulsf3+0x88>
    5644:	20 e0       	ldi	r18, 0x00	; 0
    5646:	9a 85       	ldd	r25, Y+10	; 0x0a
    5648:	8a 89       	ldd	r24, Y+18	; 0x12
    564a:	98 13       	cpse	r25, r24
    564c:	21 e0       	ldi	r18, 0x01	; 1
    564e:	2a 8b       	std	Y+18, r18	; 0x12
    5650:	ce 01       	movw	r24, r28
    5652:	41 96       	adiw	r24, 0x11	; 17
    5654:	b0 c0       	rjmp	.+352    	; 0x57b6 <__mulsf3+0x1e8>
    5656:	2d 84       	ldd	r2, Y+13	; 0x0d
    5658:	3e 84       	ldd	r3, Y+14	; 0x0e
    565a:	4f 84       	ldd	r4, Y+15	; 0x0f
    565c:	58 88       	ldd	r5, Y+16	; 0x10
    565e:	6d 88       	ldd	r6, Y+21	; 0x15
    5660:	7e 88       	ldd	r7, Y+22	; 0x16
    5662:	8f 88       	ldd	r8, Y+23	; 0x17
    5664:	98 8c       	ldd	r9, Y+24	; 0x18
    5666:	ee 24       	eor	r14, r14
    5668:	ff 24       	eor	r15, r15
    566a:	87 01       	movw	r16, r14
    566c:	aa 24       	eor	r10, r10
    566e:	bb 24       	eor	r11, r11
    5670:	65 01       	movw	r12, r10
    5672:	40 e0       	ldi	r20, 0x00	; 0
    5674:	50 e0       	ldi	r21, 0x00	; 0
    5676:	60 e0       	ldi	r22, 0x00	; 0
    5678:	70 e0       	ldi	r23, 0x00	; 0
    567a:	e0 e0       	ldi	r30, 0x00	; 0
    567c:	f0 e0       	ldi	r31, 0x00	; 0
    567e:	c1 01       	movw	r24, r2
    5680:	81 70       	andi	r24, 0x01	; 1
    5682:	90 70       	andi	r25, 0x00	; 0
    5684:	89 2b       	or	r24, r25
    5686:	e9 f0       	breq	.+58     	; 0x56c2 <__mulsf3+0xf4>
    5688:	e6 0c       	add	r14, r6
    568a:	f7 1c       	adc	r15, r7
    568c:	08 1d       	adc	r16, r8
    568e:	19 1d       	adc	r17, r9
    5690:	9a 01       	movw	r18, r20
    5692:	ab 01       	movw	r20, r22
    5694:	2a 0d       	add	r18, r10
    5696:	3b 1d       	adc	r19, r11
    5698:	4c 1d       	adc	r20, r12
    569a:	5d 1d       	adc	r21, r13
    569c:	80 e0       	ldi	r24, 0x00	; 0
    569e:	90 e0       	ldi	r25, 0x00	; 0
    56a0:	a0 e0       	ldi	r26, 0x00	; 0
    56a2:	b0 e0       	ldi	r27, 0x00	; 0
    56a4:	e6 14       	cp	r14, r6
    56a6:	f7 04       	cpc	r15, r7
    56a8:	08 05       	cpc	r16, r8
    56aa:	19 05       	cpc	r17, r9
    56ac:	20 f4       	brcc	.+8      	; 0x56b6 <__mulsf3+0xe8>
    56ae:	81 e0       	ldi	r24, 0x01	; 1
    56b0:	90 e0       	ldi	r25, 0x00	; 0
    56b2:	a0 e0       	ldi	r26, 0x00	; 0
    56b4:	b0 e0       	ldi	r27, 0x00	; 0
    56b6:	ba 01       	movw	r22, r20
    56b8:	a9 01       	movw	r20, r18
    56ba:	48 0f       	add	r20, r24
    56bc:	59 1f       	adc	r21, r25
    56be:	6a 1f       	adc	r22, r26
    56c0:	7b 1f       	adc	r23, r27
    56c2:	aa 0c       	add	r10, r10
    56c4:	bb 1c       	adc	r11, r11
    56c6:	cc 1c       	adc	r12, r12
    56c8:	dd 1c       	adc	r13, r13
    56ca:	97 fe       	sbrs	r9, 7
    56cc:	08 c0       	rjmp	.+16     	; 0x56de <__mulsf3+0x110>
    56ce:	81 e0       	ldi	r24, 0x01	; 1
    56d0:	90 e0       	ldi	r25, 0x00	; 0
    56d2:	a0 e0       	ldi	r26, 0x00	; 0
    56d4:	b0 e0       	ldi	r27, 0x00	; 0
    56d6:	a8 2a       	or	r10, r24
    56d8:	b9 2a       	or	r11, r25
    56da:	ca 2a       	or	r12, r26
    56dc:	db 2a       	or	r13, r27
    56de:	31 96       	adiw	r30, 0x01	; 1
    56e0:	e0 32       	cpi	r30, 0x20	; 32
    56e2:	f1 05       	cpc	r31, r1
    56e4:	49 f0       	breq	.+18     	; 0x56f8 <__mulsf3+0x12a>
    56e6:	66 0c       	add	r6, r6
    56e8:	77 1c       	adc	r7, r7
    56ea:	88 1c       	adc	r8, r8
    56ec:	99 1c       	adc	r9, r9
    56ee:	56 94       	lsr	r5
    56f0:	47 94       	ror	r4
    56f2:	37 94       	ror	r3
    56f4:	27 94       	ror	r2
    56f6:	c3 cf       	rjmp	.-122    	; 0x567e <__mulsf3+0xb0>
    56f8:	fa 85       	ldd	r31, Y+10	; 0x0a
    56fa:	ea 89       	ldd	r30, Y+18	; 0x12
    56fc:	2b 89       	ldd	r18, Y+19	; 0x13
    56fe:	3c 89       	ldd	r19, Y+20	; 0x14
    5700:	8b 85       	ldd	r24, Y+11	; 0x0b
    5702:	9c 85       	ldd	r25, Y+12	; 0x0c
    5704:	28 0f       	add	r18, r24
    5706:	39 1f       	adc	r19, r25
    5708:	2e 5f       	subi	r18, 0xFE	; 254
    570a:	3f 4f       	sbci	r19, 0xFF	; 255
    570c:	17 c0       	rjmp	.+46     	; 0x573c <__mulsf3+0x16e>
    570e:	ca 01       	movw	r24, r20
    5710:	81 70       	andi	r24, 0x01	; 1
    5712:	90 70       	andi	r25, 0x00	; 0
    5714:	89 2b       	or	r24, r25
    5716:	61 f0       	breq	.+24     	; 0x5730 <__mulsf3+0x162>
    5718:	16 95       	lsr	r17
    571a:	07 95       	ror	r16
    571c:	f7 94       	ror	r15
    571e:	e7 94       	ror	r14
    5720:	80 e0       	ldi	r24, 0x00	; 0
    5722:	90 e0       	ldi	r25, 0x00	; 0
    5724:	a0 e0       	ldi	r26, 0x00	; 0
    5726:	b0 e8       	ldi	r27, 0x80	; 128
    5728:	e8 2a       	or	r14, r24
    572a:	f9 2a       	or	r15, r25
    572c:	0a 2b       	or	r16, r26
    572e:	1b 2b       	or	r17, r27
    5730:	76 95       	lsr	r23
    5732:	67 95       	ror	r22
    5734:	57 95       	ror	r21
    5736:	47 95       	ror	r20
    5738:	2f 5f       	subi	r18, 0xFF	; 255
    573a:	3f 4f       	sbci	r19, 0xFF	; 255
    573c:	77 fd       	sbrc	r23, 7
    573e:	e7 cf       	rjmp	.-50     	; 0x570e <__mulsf3+0x140>
    5740:	0c c0       	rjmp	.+24     	; 0x575a <__mulsf3+0x18c>
    5742:	44 0f       	add	r20, r20
    5744:	55 1f       	adc	r21, r21
    5746:	66 1f       	adc	r22, r22
    5748:	77 1f       	adc	r23, r23
    574a:	17 fd       	sbrc	r17, 7
    574c:	41 60       	ori	r20, 0x01	; 1
    574e:	ee 0c       	add	r14, r14
    5750:	ff 1c       	adc	r15, r15
    5752:	00 1f       	adc	r16, r16
    5754:	11 1f       	adc	r17, r17
    5756:	21 50       	subi	r18, 0x01	; 1
    5758:	30 40       	sbci	r19, 0x00	; 0
    575a:	40 30       	cpi	r20, 0x00	; 0
    575c:	90 e0       	ldi	r25, 0x00	; 0
    575e:	59 07       	cpc	r21, r25
    5760:	90 e0       	ldi	r25, 0x00	; 0
    5762:	69 07       	cpc	r22, r25
    5764:	90 e4       	ldi	r25, 0x40	; 64
    5766:	79 07       	cpc	r23, r25
    5768:	60 f3       	brcs	.-40     	; 0x5742 <__mulsf3+0x174>
    576a:	2b 8f       	std	Y+27, r18	; 0x1b
    576c:	3c 8f       	std	Y+28, r19	; 0x1c
    576e:	db 01       	movw	r26, r22
    5770:	ca 01       	movw	r24, r20
    5772:	8f 77       	andi	r24, 0x7F	; 127
    5774:	90 70       	andi	r25, 0x00	; 0
    5776:	a0 70       	andi	r26, 0x00	; 0
    5778:	b0 70       	andi	r27, 0x00	; 0
    577a:	80 34       	cpi	r24, 0x40	; 64
    577c:	91 05       	cpc	r25, r1
    577e:	a1 05       	cpc	r26, r1
    5780:	b1 05       	cpc	r27, r1
    5782:	61 f4       	brne	.+24     	; 0x579c <__mulsf3+0x1ce>
    5784:	47 fd       	sbrc	r20, 7
    5786:	0a c0       	rjmp	.+20     	; 0x579c <__mulsf3+0x1ce>
    5788:	e1 14       	cp	r14, r1
    578a:	f1 04       	cpc	r15, r1
    578c:	01 05       	cpc	r16, r1
    578e:	11 05       	cpc	r17, r1
    5790:	29 f0       	breq	.+10     	; 0x579c <__mulsf3+0x1ce>
    5792:	40 5c       	subi	r20, 0xC0	; 192
    5794:	5f 4f       	sbci	r21, 0xFF	; 255
    5796:	6f 4f       	sbci	r22, 0xFF	; 255
    5798:	7f 4f       	sbci	r23, 0xFF	; 255
    579a:	40 78       	andi	r20, 0x80	; 128
    579c:	1a 8e       	std	Y+26, r1	; 0x1a
    579e:	fe 17       	cp	r31, r30
    57a0:	11 f0       	breq	.+4      	; 0x57a6 <__mulsf3+0x1d8>
    57a2:	81 e0       	ldi	r24, 0x01	; 1
    57a4:	8a 8f       	std	Y+26, r24	; 0x1a
    57a6:	4d 8f       	std	Y+29, r20	; 0x1d
    57a8:	5e 8f       	std	Y+30, r21	; 0x1e
    57aa:	6f 8f       	std	Y+31, r22	; 0x1f
    57ac:	78 a3       	std	Y+32, r23	; 0x20
    57ae:	83 e0       	ldi	r24, 0x03	; 3
    57b0:	89 8f       	std	Y+25, r24	; 0x19
    57b2:	ce 01       	movw	r24, r28
    57b4:	49 96       	adiw	r24, 0x19	; 25
    57b6:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <__pack_f>
    57ba:	a0 96       	adiw	r28, 0x20	; 32
    57bc:	e2 e1       	ldi	r30, 0x12	; 18
    57be:	0c 94 be 2e 	jmp	0x5d7c	; 0x5d7c <__epilogue_restores__>

000057c2 <__divsf3>:
    57c2:	a8 e1       	ldi	r26, 0x18	; 24
    57c4:	b0 e0       	ldi	r27, 0x00	; 0
    57c6:	e7 ee       	ldi	r30, 0xE7	; 231
    57c8:	fb e2       	ldi	r31, 0x2B	; 43
    57ca:	0c 94 aa 2e 	jmp	0x5d54	; 0x5d54 <__prologue_saves__+0x10>
    57ce:	69 83       	std	Y+1, r22	; 0x01
    57d0:	7a 83       	std	Y+2, r23	; 0x02
    57d2:	8b 83       	std	Y+3, r24	; 0x03
    57d4:	9c 83       	std	Y+4, r25	; 0x04
    57d6:	2d 83       	std	Y+5, r18	; 0x05
    57d8:	3e 83       	std	Y+6, r19	; 0x06
    57da:	4f 83       	std	Y+7, r20	; 0x07
    57dc:	58 87       	std	Y+8, r21	; 0x08
    57de:	b9 e0       	ldi	r27, 0x09	; 9
    57e0:	eb 2e       	mov	r14, r27
    57e2:	f1 2c       	mov	r15, r1
    57e4:	ec 0e       	add	r14, r28
    57e6:	fd 1e       	adc	r15, r29
    57e8:	ce 01       	movw	r24, r28
    57ea:	01 96       	adiw	r24, 0x01	; 1
    57ec:	b7 01       	movw	r22, r14
    57ee:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <__unpack_f>
    57f2:	8e 01       	movw	r16, r28
    57f4:	0f 5e       	subi	r16, 0xEF	; 239
    57f6:	1f 4f       	sbci	r17, 0xFF	; 255
    57f8:	ce 01       	movw	r24, r28
    57fa:	05 96       	adiw	r24, 0x05	; 5
    57fc:	b8 01       	movw	r22, r16
    57fe:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <__unpack_f>
    5802:	29 85       	ldd	r18, Y+9	; 0x09
    5804:	22 30       	cpi	r18, 0x02	; 2
    5806:	08 f4       	brcc	.+2      	; 0x580a <__divsf3+0x48>
    5808:	7e c0       	rjmp	.+252    	; 0x5906 <__divsf3+0x144>
    580a:	39 89       	ldd	r19, Y+17	; 0x11
    580c:	32 30       	cpi	r19, 0x02	; 2
    580e:	10 f4       	brcc	.+4      	; 0x5814 <__divsf3+0x52>
    5810:	b8 01       	movw	r22, r16
    5812:	7c c0       	rjmp	.+248    	; 0x590c <__divsf3+0x14a>
    5814:	8a 85       	ldd	r24, Y+10	; 0x0a
    5816:	9a 89       	ldd	r25, Y+18	; 0x12
    5818:	89 27       	eor	r24, r25
    581a:	8a 87       	std	Y+10, r24	; 0x0a
    581c:	24 30       	cpi	r18, 0x04	; 4
    581e:	11 f0       	breq	.+4      	; 0x5824 <__divsf3+0x62>
    5820:	22 30       	cpi	r18, 0x02	; 2
    5822:	31 f4       	brne	.+12     	; 0x5830 <__divsf3+0x6e>
    5824:	23 17       	cp	r18, r19
    5826:	09 f0       	breq	.+2      	; 0x582a <__divsf3+0x68>
    5828:	6e c0       	rjmp	.+220    	; 0x5906 <__divsf3+0x144>
    582a:	6f e1       	ldi	r22, 0x1F	; 31
    582c:	73 e0       	ldi	r23, 0x03	; 3
    582e:	6e c0       	rjmp	.+220    	; 0x590c <__divsf3+0x14a>
    5830:	34 30       	cpi	r19, 0x04	; 4
    5832:	39 f4       	brne	.+14     	; 0x5842 <__divsf3+0x80>
    5834:	1d 86       	std	Y+13, r1	; 0x0d
    5836:	1e 86       	std	Y+14, r1	; 0x0e
    5838:	1f 86       	std	Y+15, r1	; 0x0f
    583a:	18 8a       	std	Y+16, r1	; 0x10
    583c:	1c 86       	std	Y+12, r1	; 0x0c
    583e:	1b 86       	std	Y+11, r1	; 0x0b
    5840:	04 c0       	rjmp	.+8      	; 0x584a <__divsf3+0x88>
    5842:	32 30       	cpi	r19, 0x02	; 2
    5844:	21 f4       	brne	.+8      	; 0x584e <__divsf3+0x8c>
    5846:	84 e0       	ldi	r24, 0x04	; 4
    5848:	89 87       	std	Y+9, r24	; 0x09
    584a:	b7 01       	movw	r22, r14
    584c:	5f c0       	rjmp	.+190    	; 0x590c <__divsf3+0x14a>
    584e:	2b 85       	ldd	r18, Y+11	; 0x0b
    5850:	3c 85       	ldd	r19, Y+12	; 0x0c
    5852:	8b 89       	ldd	r24, Y+19	; 0x13
    5854:	9c 89       	ldd	r25, Y+20	; 0x14
    5856:	28 1b       	sub	r18, r24
    5858:	39 0b       	sbc	r19, r25
    585a:	3c 87       	std	Y+12, r19	; 0x0c
    585c:	2b 87       	std	Y+11, r18	; 0x0b
    585e:	ed 84       	ldd	r14, Y+13	; 0x0d
    5860:	fe 84       	ldd	r15, Y+14	; 0x0e
    5862:	0f 85       	ldd	r16, Y+15	; 0x0f
    5864:	18 89       	ldd	r17, Y+16	; 0x10
    5866:	ad 88       	ldd	r10, Y+21	; 0x15
    5868:	be 88       	ldd	r11, Y+22	; 0x16
    586a:	cf 88       	ldd	r12, Y+23	; 0x17
    586c:	d8 8c       	ldd	r13, Y+24	; 0x18
    586e:	ea 14       	cp	r14, r10
    5870:	fb 04       	cpc	r15, r11
    5872:	0c 05       	cpc	r16, r12
    5874:	1d 05       	cpc	r17, r13
    5876:	40 f4       	brcc	.+16     	; 0x5888 <__divsf3+0xc6>
    5878:	ee 0c       	add	r14, r14
    587a:	ff 1c       	adc	r15, r15
    587c:	00 1f       	adc	r16, r16
    587e:	11 1f       	adc	r17, r17
    5880:	21 50       	subi	r18, 0x01	; 1
    5882:	30 40       	sbci	r19, 0x00	; 0
    5884:	3c 87       	std	Y+12, r19	; 0x0c
    5886:	2b 87       	std	Y+11, r18	; 0x0b
    5888:	20 e0       	ldi	r18, 0x00	; 0
    588a:	30 e0       	ldi	r19, 0x00	; 0
    588c:	40 e0       	ldi	r20, 0x00	; 0
    588e:	50 e0       	ldi	r21, 0x00	; 0
    5890:	80 e0       	ldi	r24, 0x00	; 0
    5892:	90 e0       	ldi	r25, 0x00	; 0
    5894:	a0 e0       	ldi	r26, 0x00	; 0
    5896:	b0 e4       	ldi	r27, 0x40	; 64
    5898:	60 e0       	ldi	r22, 0x00	; 0
    589a:	70 e0       	ldi	r23, 0x00	; 0
    589c:	ea 14       	cp	r14, r10
    589e:	fb 04       	cpc	r15, r11
    58a0:	0c 05       	cpc	r16, r12
    58a2:	1d 05       	cpc	r17, r13
    58a4:	40 f0       	brcs	.+16     	; 0x58b6 <__divsf3+0xf4>
    58a6:	28 2b       	or	r18, r24
    58a8:	39 2b       	or	r19, r25
    58aa:	4a 2b       	or	r20, r26
    58ac:	5b 2b       	or	r21, r27
    58ae:	ea 18       	sub	r14, r10
    58b0:	fb 08       	sbc	r15, r11
    58b2:	0c 09       	sbc	r16, r12
    58b4:	1d 09       	sbc	r17, r13
    58b6:	b6 95       	lsr	r27
    58b8:	a7 95       	ror	r26
    58ba:	97 95       	ror	r25
    58bc:	87 95       	ror	r24
    58be:	ee 0c       	add	r14, r14
    58c0:	ff 1c       	adc	r15, r15
    58c2:	00 1f       	adc	r16, r16
    58c4:	11 1f       	adc	r17, r17
    58c6:	6f 5f       	subi	r22, 0xFF	; 255
    58c8:	7f 4f       	sbci	r23, 0xFF	; 255
    58ca:	6f 31       	cpi	r22, 0x1F	; 31
    58cc:	71 05       	cpc	r23, r1
    58ce:	31 f7       	brne	.-52     	; 0x589c <__divsf3+0xda>
    58d0:	da 01       	movw	r26, r20
    58d2:	c9 01       	movw	r24, r18
    58d4:	8f 77       	andi	r24, 0x7F	; 127
    58d6:	90 70       	andi	r25, 0x00	; 0
    58d8:	a0 70       	andi	r26, 0x00	; 0
    58da:	b0 70       	andi	r27, 0x00	; 0
    58dc:	80 34       	cpi	r24, 0x40	; 64
    58de:	91 05       	cpc	r25, r1
    58e0:	a1 05       	cpc	r26, r1
    58e2:	b1 05       	cpc	r27, r1
    58e4:	61 f4       	brne	.+24     	; 0x58fe <__divsf3+0x13c>
    58e6:	27 fd       	sbrc	r18, 7
    58e8:	0a c0       	rjmp	.+20     	; 0x58fe <__divsf3+0x13c>
    58ea:	e1 14       	cp	r14, r1
    58ec:	f1 04       	cpc	r15, r1
    58ee:	01 05       	cpc	r16, r1
    58f0:	11 05       	cpc	r17, r1
    58f2:	29 f0       	breq	.+10     	; 0x58fe <__divsf3+0x13c>
    58f4:	20 5c       	subi	r18, 0xC0	; 192
    58f6:	3f 4f       	sbci	r19, 0xFF	; 255
    58f8:	4f 4f       	sbci	r20, 0xFF	; 255
    58fa:	5f 4f       	sbci	r21, 0xFF	; 255
    58fc:	20 78       	andi	r18, 0x80	; 128
    58fe:	2d 87       	std	Y+13, r18	; 0x0d
    5900:	3e 87       	std	Y+14, r19	; 0x0e
    5902:	4f 87       	std	Y+15, r20	; 0x0f
    5904:	58 8b       	std	Y+16, r21	; 0x10
    5906:	be 01       	movw	r22, r28
    5908:	67 5f       	subi	r22, 0xF7	; 247
    590a:	7f 4f       	sbci	r23, 0xFF	; 255
    590c:	cb 01       	movw	r24, r22
    590e:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <__pack_f>
    5912:	68 96       	adiw	r28, 0x18	; 24
    5914:	ea e0       	ldi	r30, 0x0A	; 10
    5916:	0c 94 c6 2e 	jmp	0x5d8c	; 0x5d8c <__epilogue_restores__+0x10>

0000591a <__fixsfsi>:
    591a:	ac e0       	ldi	r26, 0x0C	; 12
    591c:	b0 e0       	ldi	r27, 0x00	; 0
    591e:	e3 e9       	ldi	r30, 0x93	; 147
    5920:	fc e2       	ldi	r31, 0x2C	; 44
    5922:	0c 94 b2 2e 	jmp	0x5d64	; 0x5d64 <__prologue_saves__+0x20>
    5926:	69 83       	std	Y+1, r22	; 0x01
    5928:	7a 83       	std	Y+2, r23	; 0x02
    592a:	8b 83       	std	Y+3, r24	; 0x03
    592c:	9c 83       	std	Y+4, r25	; 0x04
    592e:	ce 01       	movw	r24, r28
    5930:	01 96       	adiw	r24, 0x01	; 1
    5932:	be 01       	movw	r22, r28
    5934:	6b 5f       	subi	r22, 0xFB	; 251
    5936:	7f 4f       	sbci	r23, 0xFF	; 255
    5938:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <__unpack_f>
    593c:	8d 81       	ldd	r24, Y+5	; 0x05
    593e:	82 30       	cpi	r24, 0x02	; 2
    5940:	61 f1       	breq	.+88     	; 0x599a <__fixsfsi+0x80>
    5942:	82 30       	cpi	r24, 0x02	; 2
    5944:	50 f1       	brcs	.+84     	; 0x599a <__fixsfsi+0x80>
    5946:	84 30       	cpi	r24, 0x04	; 4
    5948:	21 f4       	brne	.+8      	; 0x5952 <__fixsfsi+0x38>
    594a:	8e 81       	ldd	r24, Y+6	; 0x06
    594c:	88 23       	and	r24, r24
    594e:	51 f1       	breq	.+84     	; 0x59a4 <__fixsfsi+0x8a>
    5950:	2e c0       	rjmp	.+92     	; 0x59ae <__fixsfsi+0x94>
    5952:	2f 81       	ldd	r18, Y+7	; 0x07
    5954:	38 85       	ldd	r19, Y+8	; 0x08
    5956:	37 fd       	sbrc	r19, 7
    5958:	20 c0       	rjmp	.+64     	; 0x599a <__fixsfsi+0x80>
    595a:	6e 81       	ldd	r22, Y+6	; 0x06
    595c:	2f 31       	cpi	r18, 0x1F	; 31
    595e:	31 05       	cpc	r19, r1
    5960:	1c f0       	brlt	.+6      	; 0x5968 <__fixsfsi+0x4e>
    5962:	66 23       	and	r22, r22
    5964:	f9 f0       	breq	.+62     	; 0x59a4 <__fixsfsi+0x8a>
    5966:	23 c0       	rjmp	.+70     	; 0x59ae <__fixsfsi+0x94>
    5968:	8e e1       	ldi	r24, 0x1E	; 30
    596a:	90 e0       	ldi	r25, 0x00	; 0
    596c:	82 1b       	sub	r24, r18
    596e:	93 0b       	sbc	r25, r19
    5970:	29 85       	ldd	r18, Y+9	; 0x09
    5972:	3a 85       	ldd	r19, Y+10	; 0x0a
    5974:	4b 85       	ldd	r20, Y+11	; 0x0b
    5976:	5c 85       	ldd	r21, Y+12	; 0x0c
    5978:	04 c0       	rjmp	.+8      	; 0x5982 <__fixsfsi+0x68>
    597a:	56 95       	lsr	r21
    597c:	47 95       	ror	r20
    597e:	37 95       	ror	r19
    5980:	27 95       	ror	r18
    5982:	8a 95       	dec	r24
    5984:	d2 f7       	brpl	.-12     	; 0x597a <__fixsfsi+0x60>
    5986:	66 23       	and	r22, r22
    5988:	b1 f0       	breq	.+44     	; 0x59b6 <__fixsfsi+0x9c>
    598a:	50 95       	com	r21
    598c:	40 95       	com	r20
    598e:	30 95       	com	r19
    5990:	21 95       	neg	r18
    5992:	3f 4f       	sbci	r19, 0xFF	; 255
    5994:	4f 4f       	sbci	r20, 0xFF	; 255
    5996:	5f 4f       	sbci	r21, 0xFF	; 255
    5998:	0e c0       	rjmp	.+28     	; 0x59b6 <__fixsfsi+0x9c>
    599a:	20 e0       	ldi	r18, 0x00	; 0
    599c:	30 e0       	ldi	r19, 0x00	; 0
    599e:	40 e0       	ldi	r20, 0x00	; 0
    59a0:	50 e0       	ldi	r21, 0x00	; 0
    59a2:	09 c0       	rjmp	.+18     	; 0x59b6 <__fixsfsi+0x9c>
    59a4:	2f ef       	ldi	r18, 0xFF	; 255
    59a6:	3f ef       	ldi	r19, 0xFF	; 255
    59a8:	4f ef       	ldi	r20, 0xFF	; 255
    59aa:	5f e7       	ldi	r21, 0x7F	; 127
    59ac:	04 c0       	rjmp	.+8      	; 0x59b6 <__fixsfsi+0x9c>
    59ae:	20 e0       	ldi	r18, 0x00	; 0
    59b0:	30 e0       	ldi	r19, 0x00	; 0
    59b2:	40 e0       	ldi	r20, 0x00	; 0
    59b4:	50 e8       	ldi	r21, 0x80	; 128
    59b6:	b9 01       	movw	r22, r18
    59b8:	ca 01       	movw	r24, r20
    59ba:	2c 96       	adiw	r28, 0x0c	; 12
    59bc:	e2 e0       	ldi	r30, 0x02	; 2
    59be:	0c 94 ce 2e 	jmp	0x5d9c	; 0x5d9c <__epilogue_restores__+0x20>

000059c2 <__pack_f>:
    59c2:	df 92       	push	r13
    59c4:	ef 92       	push	r14
    59c6:	ff 92       	push	r15
    59c8:	0f 93       	push	r16
    59ca:	1f 93       	push	r17
    59cc:	fc 01       	movw	r30, r24
    59ce:	e4 80       	ldd	r14, Z+4	; 0x04
    59d0:	f5 80       	ldd	r15, Z+5	; 0x05
    59d2:	06 81       	ldd	r16, Z+6	; 0x06
    59d4:	17 81       	ldd	r17, Z+7	; 0x07
    59d6:	d1 80       	ldd	r13, Z+1	; 0x01
    59d8:	80 81       	ld	r24, Z
    59da:	82 30       	cpi	r24, 0x02	; 2
    59dc:	48 f4       	brcc	.+18     	; 0x59f0 <__pack_f+0x2e>
    59de:	80 e0       	ldi	r24, 0x00	; 0
    59e0:	90 e0       	ldi	r25, 0x00	; 0
    59e2:	a0 e1       	ldi	r26, 0x10	; 16
    59e4:	b0 e0       	ldi	r27, 0x00	; 0
    59e6:	e8 2a       	or	r14, r24
    59e8:	f9 2a       	or	r15, r25
    59ea:	0a 2b       	or	r16, r26
    59ec:	1b 2b       	or	r17, r27
    59ee:	a5 c0       	rjmp	.+330    	; 0x5b3a <__pack_f+0x178>
    59f0:	84 30       	cpi	r24, 0x04	; 4
    59f2:	09 f4       	brne	.+2      	; 0x59f6 <__pack_f+0x34>
    59f4:	9f c0       	rjmp	.+318    	; 0x5b34 <__pack_f+0x172>
    59f6:	82 30       	cpi	r24, 0x02	; 2
    59f8:	21 f4       	brne	.+8      	; 0x5a02 <__pack_f+0x40>
    59fa:	ee 24       	eor	r14, r14
    59fc:	ff 24       	eor	r15, r15
    59fe:	87 01       	movw	r16, r14
    5a00:	05 c0       	rjmp	.+10     	; 0x5a0c <__pack_f+0x4a>
    5a02:	e1 14       	cp	r14, r1
    5a04:	f1 04       	cpc	r15, r1
    5a06:	01 05       	cpc	r16, r1
    5a08:	11 05       	cpc	r17, r1
    5a0a:	19 f4       	brne	.+6      	; 0x5a12 <__pack_f+0x50>
    5a0c:	e0 e0       	ldi	r30, 0x00	; 0
    5a0e:	f0 e0       	ldi	r31, 0x00	; 0
    5a10:	96 c0       	rjmp	.+300    	; 0x5b3e <__pack_f+0x17c>
    5a12:	62 81       	ldd	r22, Z+2	; 0x02
    5a14:	73 81       	ldd	r23, Z+3	; 0x03
    5a16:	9f ef       	ldi	r25, 0xFF	; 255
    5a18:	62 38       	cpi	r22, 0x82	; 130
    5a1a:	79 07       	cpc	r23, r25
    5a1c:	0c f0       	brlt	.+2      	; 0x5a20 <__pack_f+0x5e>
    5a1e:	5b c0       	rjmp	.+182    	; 0x5ad6 <__pack_f+0x114>
    5a20:	22 e8       	ldi	r18, 0x82	; 130
    5a22:	3f ef       	ldi	r19, 0xFF	; 255
    5a24:	26 1b       	sub	r18, r22
    5a26:	37 0b       	sbc	r19, r23
    5a28:	2a 31       	cpi	r18, 0x1A	; 26
    5a2a:	31 05       	cpc	r19, r1
    5a2c:	2c f0       	brlt	.+10     	; 0x5a38 <__pack_f+0x76>
    5a2e:	20 e0       	ldi	r18, 0x00	; 0
    5a30:	30 e0       	ldi	r19, 0x00	; 0
    5a32:	40 e0       	ldi	r20, 0x00	; 0
    5a34:	50 e0       	ldi	r21, 0x00	; 0
    5a36:	2a c0       	rjmp	.+84     	; 0x5a8c <__pack_f+0xca>
    5a38:	b8 01       	movw	r22, r16
    5a3a:	a7 01       	movw	r20, r14
    5a3c:	02 2e       	mov	r0, r18
    5a3e:	04 c0       	rjmp	.+8      	; 0x5a48 <__pack_f+0x86>
    5a40:	76 95       	lsr	r23
    5a42:	67 95       	ror	r22
    5a44:	57 95       	ror	r21
    5a46:	47 95       	ror	r20
    5a48:	0a 94       	dec	r0
    5a4a:	d2 f7       	brpl	.-12     	; 0x5a40 <__pack_f+0x7e>
    5a4c:	81 e0       	ldi	r24, 0x01	; 1
    5a4e:	90 e0       	ldi	r25, 0x00	; 0
    5a50:	a0 e0       	ldi	r26, 0x00	; 0
    5a52:	b0 e0       	ldi	r27, 0x00	; 0
    5a54:	04 c0       	rjmp	.+8      	; 0x5a5e <__pack_f+0x9c>
    5a56:	88 0f       	add	r24, r24
    5a58:	99 1f       	adc	r25, r25
    5a5a:	aa 1f       	adc	r26, r26
    5a5c:	bb 1f       	adc	r27, r27
    5a5e:	2a 95       	dec	r18
    5a60:	d2 f7       	brpl	.-12     	; 0x5a56 <__pack_f+0x94>
    5a62:	01 97       	sbiw	r24, 0x01	; 1
    5a64:	a1 09       	sbc	r26, r1
    5a66:	b1 09       	sbc	r27, r1
    5a68:	8e 21       	and	r24, r14
    5a6a:	9f 21       	and	r25, r15
    5a6c:	a0 23       	and	r26, r16
    5a6e:	b1 23       	and	r27, r17
    5a70:	00 97       	sbiw	r24, 0x00	; 0
    5a72:	a1 05       	cpc	r26, r1
    5a74:	b1 05       	cpc	r27, r1
    5a76:	21 f0       	breq	.+8      	; 0x5a80 <__pack_f+0xbe>
    5a78:	81 e0       	ldi	r24, 0x01	; 1
    5a7a:	90 e0       	ldi	r25, 0x00	; 0
    5a7c:	a0 e0       	ldi	r26, 0x00	; 0
    5a7e:	b0 e0       	ldi	r27, 0x00	; 0
    5a80:	9a 01       	movw	r18, r20
    5a82:	ab 01       	movw	r20, r22
    5a84:	28 2b       	or	r18, r24
    5a86:	39 2b       	or	r19, r25
    5a88:	4a 2b       	or	r20, r26
    5a8a:	5b 2b       	or	r21, r27
    5a8c:	da 01       	movw	r26, r20
    5a8e:	c9 01       	movw	r24, r18
    5a90:	8f 77       	andi	r24, 0x7F	; 127
    5a92:	90 70       	andi	r25, 0x00	; 0
    5a94:	a0 70       	andi	r26, 0x00	; 0
    5a96:	b0 70       	andi	r27, 0x00	; 0
    5a98:	80 34       	cpi	r24, 0x40	; 64
    5a9a:	91 05       	cpc	r25, r1
    5a9c:	a1 05       	cpc	r26, r1
    5a9e:	b1 05       	cpc	r27, r1
    5aa0:	39 f4       	brne	.+14     	; 0x5ab0 <__pack_f+0xee>
    5aa2:	27 ff       	sbrs	r18, 7
    5aa4:	09 c0       	rjmp	.+18     	; 0x5ab8 <__pack_f+0xf6>
    5aa6:	20 5c       	subi	r18, 0xC0	; 192
    5aa8:	3f 4f       	sbci	r19, 0xFF	; 255
    5aaa:	4f 4f       	sbci	r20, 0xFF	; 255
    5aac:	5f 4f       	sbci	r21, 0xFF	; 255
    5aae:	04 c0       	rjmp	.+8      	; 0x5ab8 <__pack_f+0xf6>
    5ab0:	21 5c       	subi	r18, 0xC1	; 193
    5ab2:	3f 4f       	sbci	r19, 0xFF	; 255
    5ab4:	4f 4f       	sbci	r20, 0xFF	; 255
    5ab6:	5f 4f       	sbci	r21, 0xFF	; 255
    5ab8:	e0 e0       	ldi	r30, 0x00	; 0
    5aba:	f0 e0       	ldi	r31, 0x00	; 0
    5abc:	20 30       	cpi	r18, 0x00	; 0
    5abe:	a0 e0       	ldi	r26, 0x00	; 0
    5ac0:	3a 07       	cpc	r19, r26
    5ac2:	a0 e0       	ldi	r26, 0x00	; 0
    5ac4:	4a 07       	cpc	r20, r26
    5ac6:	a0 e4       	ldi	r26, 0x40	; 64
    5ac8:	5a 07       	cpc	r21, r26
    5aca:	10 f0       	brcs	.+4      	; 0x5ad0 <__pack_f+0x10e>
    5acc:	e1 e0       	ldi	r30, 0x01	; 1
    5ace:	f0 e0       	ldi	r31, 0x00	; 0
    5ad0:	79 01       	movw	r14, r18
    5ad2:	8a 01       	movw	r16, r20
    5ad4:	27 c0       	rjmp	.+78     	; 0x5b24 <__pack_f+0x162>
    5ad6:	60 38       	cpi	r22, 0x80	; 128
    5ad8:	71 05       	cpc	r23, r1
    5ada:	64 f5       	brge	.+88     	; 0x5b34 <__pack_f+0x172>
    5adc:	fb 01       	movw	r30, r22
    5ade:	e1 58       	subi	r30, 0x81	; 129
    5ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    5ae2:	d8 01       	movw	r26, r16
    5ae4:	c7 01       	movw	r24, r14
    5ae6:	8f 77       	andi	r24, 0x7F	; 127
    5ae8:	90 70       	andi	r25, 0x00	; 0
    5aea:	a0 70       	andi	r26, 0x00	; 0
    5aec:	b0 70       	andi	r27, 0x00	; 0
    5aee:	80 34       	cpi	r24, 0x40	; 64
    5af0:	91 05       	cpc	r25, r1
    5af2:	a1 05       	cpc	r26, r1
    5af4:	b1 05       	cpc	r27, r1
    5af6:	39 f4       	brne	.+14     	; 0x5b06 <__pack_f+0x144>
    5af8:	e7 fe       	sbrs	r14, 7
    5afa:	0d c0       	rjmp	.+26     	; 0x5b16 <__pack_f+0x154>
    5afc:	80 e4       	ldi	r24, 0x40	; 64
    5afe:	90 e0       	ldi	r25, 0x00	; 0
    5b00:	a0 e0       	ldi	r26, 0x00	; 0
    5b02:	b0 e0       	ldi	r27, 0x00	; 0
    5b04:	04 c0       	rjmp	.+8      	; 0x5b0e <__pack_f+0x14c>
    5b06:	8f e3       	ldi	r24, 0x3F	; 63
    5b08:	90 e0       	ldi	r25, 0x00	; 0
    5b0a:	a0 e0       	ldi	r26, 0x00	; 0
    5b0c:	b0 e0       	ldi	r27, 0x00	; 0
    5b0e:	e8 0e       	add	r14, r24
    5b10:	f9 1e       	adc	r15, r25
    5b12:	0a 1f       	adc	r16, r26
    5b14:	1b 1f       	adc	r17, r27
    5b16:	17 ff       	sbrs	r17, 7
    5b18:	05 c0       	rjmp	.+10     	; 0x5b24 <__pack_f+0x162>
    5b1a:	16 95       	lsr	r17
    5b1c:	07 95       	ror	r16
    5b1e:	f7 94       	ror	r15
    5b20:	e7 94       	ror	r14
    5b22:	31 96       	adiw	r30, 0x01	; 1
    5b24:	87 e0       	ldi	r24, 0x07	; 7
    5b26:	16 95       	lsr	r17
    5b28:	07 95       	ror	r16
    5b2a:	f7 94       	ror	r15
    5b2c:	e7 94       	ror	r14
    5b2e:	8a 95       	dec	r24
    5b30:	d1 f7       	brne	.-12     	; 0x5b26 <__pack_f+0x164>
    5b32:	05 c0       	rjmp	.+10     	; 0x5b3e <__pack_f+0x17c>
    5b34:	ee 24       	eor	r14, r14
    5b36:	ff 24       	eor	r15, r15
    5b38:	87 01       	movw	r16, r14
    5b3a:	ef ef       	ldi	r30, 0xFF	; 255
    5b3c:	f0 e0       	ldi	r31, 0x00	; 0
    5b3e:	6e 2f       	mov	r22, r30
    5b40:	67 95       	ror	r22
    5b42:	66 27       	eor	r22, r22
    5b44:	67 95       	ror	r22
    5b46:	90 2f       	mov	r25, r16
    5b48:	9f 77       	andi	r25, 0x7F	; 127
    5b4a:	d7 94       	ror	r13
    5b4c:	dd 24       	eor	r13, r13
    5b4e:	d7 94       	ror	r13
    5b50:	8e 2f       	mov	r24, r30
    5b52:	86 95       	lsr	r24
    5b54:	49 2f       	mov	r20, r25
    5b56:	46 2b       	or	r20, r22
    5b58:	58 2f       	mov	r21, r24
    5b5a:	5d 29       	or	r21, r13
    5b5c:	b7 01       	movw	r22, r14
    5b5e:	ca 01       	movw	r24, r20
    5b60:	1f 91       	pop	r17
    5b62:	0f 91       	pop	r16
    5b64:	ff 90       	pop	r15
    5b66:	ef 90       	pop	r14
    5b68:	df 90       	pop	r13
    5b6a:	08 95       	ret

00005b6c <__unpack_f>:
    5b6c:	fc 01       	movw	r30, r24
    5b6e:	db 01       	movw	r26, r22
    5b70:	40 81       	ld	r20, Z
    5b72:	51 81       	ldd	r21, Z+1	; 0x01
    5b74:	22 81       	ldd	r18, Z+2	; 0x02
    5b76:	62 2f       	mov	r22, r18
    5b78:	6f 77       	andi	r22, 0x7F	; 127
    5b7a:	70 e0       	ldi	r23, 0x00	; 0
    5b7c:	22 1f       	adc	r18, r18
    5b7e:	22 27       	eor	r18, r18
    5b80:	22 1f       	adc	r18, r18
    5b82:	93 81       	ldd	r25, Z+3	; 0x03
    5b84:	89 2f       	mov	r24, r25
    5b86:	88 0f       	add	r24, r24
    5b88:	82 2b       	or	r24, r18
    5b8a:	28 2f       	mov	r18, r24
    5b8c:	30 e0       	ldi	r19, 0x00	; 0
    5b8e:	99 1f       	adc	r25, r25
    5b90:	99 27       	eor	r25, r25
    5b92:	99 1f       	adc	r25, r25
    5b94:	11 96       	adiw	r26, 0x01	; 1
    5b96:	9c 93       	st	X, r25
    5b98:	11 97       	sbiw	r26, 0x01	; 1
    5b9a:	21 15       	cp	r18, r1
    5b9c:	31 05       	cpc	r19, r1
    5b9e:	a9 f5       	brne	.+106    	; 0x5c0a <__unpack_f+0x9e>
    5ba0:	41 15       	cp	r20, r1
    5ba2:	51 05       	cpc	r21, r1
    5ba4:	61 05       	cpc	r22, r1
    5ba6:	71 05       	cpc	r23, r1
    5ba8:	11 f4       	brne	.+4      	; 0x5bae <__unpack_f+0x42>
    5baa:	82 e0       	ldi	r24, 0x02	; 2
    5bac:	37 c0       	rjmp	.+110    	; 0x5c1c <__unpack_f+0xb0>
    5bae:	82 e8       	ldi	r24, 0x82	; 130
    5bb0:	9f ef       	ldi	r25, 0xFF	; 255
    5bb2:	13 96       	adiw	r26, 0x03	; 3
    5bb4:	9c 93       	st	X, r25
    5bb6:	8e 93       	st	-X, r24
    5bb8:	12 97       	sbiw	r26, 0x02	; 2
    5bba:	9a 01       	movw	r18, r20
    5bbc:	ab 01       	movw	r20, r22
    5bbe:	67 e0       	ldi	r22, 0x07	; 7
    5bc0:	22 0f       	add	r18, r18
    5bc2:	33 1f       	adc	r19, r19
    5bc4:	44 1f       	adc	r20, r20
    5bc6:	55 1f       	adc	r21, r21
    5bc8:	6a 95       	dec	r22
    5bca:	d1 f7       	brne	.-12     	; 0x5bc0 <__unpack_f+0x54>
    5bcc:	83 e0       	ldi	r24, 0x03	; 3
    5bce:	8c 93       	st	X, r24
    5bd0:	0d c0       	rjmp	.+26     	; 0x5bec <__unpack_f+0x80>
    5bd2:	22 0f       	add	r18, r18
    5bd4:	33 1f       	adc	r19, r19
    5bd6:	44 1f       	adc	r20, r20
    5bd8:	55 1f       	adc	r21, r21
    5bda:	12 96       	adiw	r26, 0x02	; 2
    5bdc:	8d 91       	ld	r24, X+
    5bde:	9c 91       	ld	r25, X
    5be0:	13 97       	sbiw	r26, 0x03	; 3
    5be2:	01 97       	sbiw	r24, 0x01	; 1
    5be4:	13 96       	adiw	r26, 0x03	; 3
    5be6:	9c 93       	st	X, r25
    5be8:	8e 93       	st	-X, r24
    5bea:	12 97       	sbiw	r26, 0x02	; 2
    5bec:	20 30       	cpi	r18, 0x00	; 0
    5bee:	80 e0       	ldi	r24, 0x00	; 0
    5bf0:	38 07       	cpc	r19, r24
    5bf2:	80 e0       	ldi	r24, 0x00	; 0
    5bf4:	48 07       	cpc	r20, r24
    5bf6:	80 e4       	ldi	r24, 0x40	; 64
    5bf8:	58 07       	cpc	r21, r24
    5bfa:	58 f3       	brcs	.-42     	; 0x5bd2 <__unpack_f+0x66>
    5bfc:	14 96       	adiw	r26, 0x04	; 4
    5bfe:	2d 93       	st	X+, r18
    5c00:	3d 93       	st	X+, r19
    5c02:	4d 93       	st	X+, r20
    5c04:	5c 93       	st	X, r21
    5c06:	17 97       	sbiw	r26, 0x07	; 7
    5c08:	08 95       	ret
    5c0a:	2f 3f       	cpi	r18, 0xFF	; 255
    5c0c:	31 05       	cpc	r19, r1
    5c0e:	79 f4       	brne	.+30     	; 0x5c2e <__unpack_f+0xc2>
    5c10:	41 15       	cp	r20, r1
    5c12:	51 05       	cpc	r21, r1
    5c14:	61 05       	cpc	r22, r1
    5c16:	71 05       	cpc	r23, r1
    5c18:	19 f4       	brne	.+6      	; 0x5c20 <__unpack_f+0xb4>
    5c1a:	84 e0       	ldi	r24, 0x04	; 4
    5c1c:	8c 93       	st	X, r24
    5c1e:	08 95       	ret
    5c20:	64 ff       	sbrs	r22, 4
    5c22:	03 c0       	rjmp	.+6      	; 0x5c2a <__unpack_f+0xbe>
    5c24:	81 e0       	ldi	r24, 0x01	; 1
    5c26:	8c 93       	st	X, r24
    5c28:	12 c0       	rjmp	.+36     	; 0x5c4e <__unpack_f+0xe2>
    5c2a:	1c 92       	st	X, r1
    5c2c:	10 c0       	rjmp	.+32     	; 0x5c4e <__unpack_f+0xe2>
    5c2e:	2f 57       	subi	r18, 0x7F	; 127
    5c30:	30 40       	sbci	r19, 0x00	; 0
    5c32:	13 96       	adiw	r26, 0x03	; 3
    5c34:	3c 93       	st	X, r19
    5c36:	2e 93       	st	-X, r18
    5c38:	12 97       	sbiw	r26, 0x02	; 2
    5c3a:	83 e0       	ldi	r24, 0x03	; 3
    5c3c:	8c 93       	st	X, r24
    5c3e:	87 e0       	ldi	r24, 0x07	; 7
    5c40:	44 0f       	add	r20, r20
    5c42:	55 1f       	adc	r21, r21
    5c44:	66 1f       	adc	r22, r22
    5c46:	77 1f       	adc	r23, r23
    5c48:	8a 95       	dec	r24
    5c4a:	d1 f7       	brne	.-12     	; 0x5c40 <__unpack_f+0xd4>
    5c4c:	70 64       	ori	r23, 0x40	; 64
    5c4e:	14 96       	adiw	r26, 0x04	; 4
    5c50:	4d 93       	st	X+, r20
    5c52:	5d 93       	st	X+, r21
    5c54:	6d 93       	st	X+, r22
    5c56:	7c 93       	st	X, r23
    5c58:	17 97       	sbiw	r26, 0x07	; 7
    5c5a:	08 95       	ret

00005c5c <__mulsi3>:
    5c5c:	62 9f       	mul	r22, r18
    5c5e:	d0 01       	movw	r26, r0
    5c60:	73 9f       	mul	r23, r19
    5c62:	f0 01       	movw	r30, r0
    5c64:	82 9f       	mul	r24, r18
    5c66:	e0 0d       	add	r30, r0
    5c68:	f1 1d       	adc	r31, r1
    5c6a:	64 9f       	mul	r22, r20
    5c6c:	e0 0d       	add	r30, r0
    5c6e:	f1 1d       	adc	r31, r1
    5c70:	92 9f       	mul	r25, r18
    5c72:	f0 0d       	add	r31, r0
    5c74:	83 9f       	mul	r24, r19
    5c76:	f0 0d       	add	r31, r0
    5c78:	74 9f       	mul	r23, r20
    5c7a:	f0 0d       	add	r31, r0
    5c7c:	65 9f       	mul	r22, r21
    5c7e:	f0 0d       	add	r31, r0
    5c80:	99 27       	eor	r25, r25
    5c82:	72 9f       	mul	r23, r18
    5c84:	b0 0d       	add	r27, r0
    5c86:	e1 1d       	adc	r30, r1
    5c88:	f9 1f       	adc	r31, r25
    5c8a:	63 9f       	mul	r22, r19
    5c8c:	b0 0d       	add	r27, r0
    5c8e:	e1 1d       	adc	r30, r1
    5c90:	f9 1f       	adc	r31, r25
    5c92:	bd 01       	movw	r22, r26
    5c94:	cf 01       	movw	r24, r30
    5c96:	11 24       	eor	r1, r1
    5c98:	08 95       	ret

00005c9a <__udivmodqi4>:
    5c9a:	99 1b       	sub	r25, r25
    5c9c:	79 e0       	ldi	r23, 0x09	; 9
    5c9e:	04 c0       	rjmp	.+8      	; 0x5ca8 <__udivmodqi4_ep>

00005ca0 <__udivmodqi4_loop>:
    5ca0:	99 1f       	adc	r25, r25
    5ca2:	96 17       	cp	r25, r22
    5ca4:	08 f0       	brcs	.+2      	; 0x5ca8 <__udivmodqi4_ep>
    5ca6:	96 1b       	sub	r25, r22

00005ca8 <__udivmodqi4_ep>:
    5ca8:	88 1f       	adc	r24, r24
    5caa:	7a 95       	dec	r23
    5cac:	c9 f7       	brne	.-14     	; 0x5ca0 <__udivmodqi4_loop>
    5cae:	80 95       	com	r24
    5cb0:	08 95       	ret

00005cb2 <__udivmodhi4>:
    5cb2:	aa 1b       	sub	r26, r26
    5cb4:	bb 1b       	sub	r27, r27
    5cb6:	51 e1       	ldi	r21, 0x11	; 17
    5cb8:	07 c0       	rjmp	.+14     	; 0x5cc8 <__udivmodhi4_ep>

00005cba <__udivmodhi4_loop>:
    5cba:	aa 1f       	adc	r26, r26
    5cbc:	bb 1f       	adc	r27, r27
    5cbe:	a6 17       	cp	r26, r22
    5cc0:	b7 07       	cpc	r27, r23
    5cc2:	10 f0       	brcs	.+4      	; 0x5cc8 <__udivmodhi4_ep>
    5cc4:	a6 1b       	sub	r26, r22
    5cc6:	b7 0b       	sbc	r27, r23

00005cc8 <__udivmodhi4_ep>:
    5cc8:	88 1f       	adc	r24, r24
    5cca:	99 1f       	adc	r25, r25
    5ccc:	5a 95       	dec	r21
    5cce:	a9 f7       	brne	.-22     	; 0x5cba <__udivmodhi4_loop>
    5cd0:	80 95       	com	r24
    5cd2:	90 95       	com	r25
    5cd4:	bc 01       	movw	r22, r24
    5cd6:	cd 01       	movw	r24, r26
    5cd8:	08 95       	ret

00005cda <__divmodhi4>:
    5cda:	97 fb       	bst	r25, 7
    5cdc:	09 2e       	mov	r0, r25
    5cde:	07 26       	eor	r0, r23
    5ce0:	0a d0       	rcall	.+20     	; 0x5cf6 <__divmodhi4_neg1>
    5ce2:	77 fd       	sbrc	r23, 7
    5ce4:	04 d0       	rcall	.+8      	; 0x5cee <__divmodhi4_neg2>
    5ce6:	e5 df       	rcall	.-54     	; 0x5cb2 <__udivmodhi4>
    5ce8:	06 d0       	rcall	.+12     	; 0x5cf6 <__divmodhi4_neg1>
    5cea:	00 20       	and	r0, r0
    5cec:	1a f4       	brpl	.+6      	; 0x5cf4 <__divmodhi4_exit>

00005cee <__divmodhi4_neg2>:
    5cee:	70 95       	com	r23
    5cf0:	61 95       	neg	r22
    5cf2:	7f 4f       	sbci	r23, 0xFF	; 255

00005cf4 <__divmodhi4_exit>:
    5cf4:	08 95       	ret

00005cf6 <__divmodhi4_neg1>:
    5cf6:	f6 f7       	brtc	.-4      	; 0x5cf4 <__divmodhi4_exit>
    5cf8:	90 95       	com	r25
    5cfa:	81 95       	neg	r24
    5cfc:	9f 4f       	sbci	r25, 0xFF	; 255
    5cfe:	08 95       	ret

00005d00 <__udivmodsi4>:
    5d00:	a1 e2       	ldi	r26, 0x21	; 33
    5d02:	1a 2e       	mov	r1, r26
    5d04:	aa 1b       	sub	r26, r26
    5d06:	bb 1b       	sub	r27, r27
    5d08:	fd 01       	movw	r30, r26
    5d0a:	0d c0       	rjmp	.+26     	; 0x5d26 <__udivmodsi4_ep>

00005d0c <__udivmodsi4_loop>:
    5d0c:	aa 1f       	adc	r26, r26
    5d0e:	bb 1f       	adc	r27, r27
    5d10:	ee 1f       	adc	r30, r30
    5d12:	ff 1f       	adc	r31, r31
    5d14:	a2 17       	cp	r26, r18
    5d16:	b3 07       	cpc	r27, r19
    5d18:	e4 07       	cpc	r30, r20
    5d1a:	f5 07       	cpc	r31, r21
    5d1c:	20 f0       	brcs	.+8      	; 0x5d26 <__udivmodsi4_ep>
    5d1e:	a2 1b       	sub	r26, r18
    5d20:	b3 0b       	sbc	r27, r19
    5d22:	e4 0b       	sbc	r30, r20
    5d24:	f5 0b       	sbc	r31, r21

00005d26 <__udivmodsi4_ep>:
    5d26:	66 1f       	adc	r22, r22
    5d28:	77 1f       	adc	r23, r23
    5d2a:	88 1f       	adc	r24, r24
    5d2c:	99 1f       	adc	r25, r25
    5d2e:	1a 94       	dec	r1
    5d30:	69 f7       	brne	.-38     	; 0x5d0c <__udivmodsi4_loop>
    5d32:	60 95       	com	r22
    5d34:	70 95       	com	r23
    5d36:	80 95       	com	r24
    5d38:	90 95       	com	r25
    5d3a:	9b 01       	movw	r18, r22
    5d3c:	ac 01       	movw	r20, r24
    5d3e:	bd 01       	movw	r22, r26
    5d40:	cf 01       	movw	r24, r30
    5d42:	08 95       	ret

00005d44 <__prologue_saves__>:
    5d44:	2f 92       	push	r2
    5d46:	3f 92       	push	r3
    5d48:	4f 92       	push	r4
    5d4a:	5f 92       	push	r5
    5d4c:	6f 92       	push	r6
    5d4e:	7f 92       	push	r7
    5d50:	8f 92       	push	r8
    5d52:	9f 92       	push	r9
    5d54:	af 92       	push	r10
    5d56:	bf 92       	push	r11
    5d58:	cf 92       	push	r12
    5d5a:	df 92       	push	r13
    5d5c:	ef 92       	push	r14
    5d5e:	ff 92       	push	r15
    5d60:	0f 93       	push	r16
    5d62:	1f 93       	push	r17
    5d64:	cf 93       	push	r28
    5d66:	df 93       	push	r29
    5d68:	cd b7       	in	r28, 0x3d	; 61
    5d6a:	de b7       	in	r29, 0x3e	; 62
    5d6c:	ca 1b       	sub	r28, r26
    5d6e:	db 0b       	sbc	r29, r27
    5d70:	0f b6       	in	r0, 0x3f	; 63
    5d72:	f8 94       	cli
    5d74:	de bf       	out	0x3e, r29	; 62
    5d76:	0f be       	out	0x3f, r0	; 63
    5d78:	cd bf       	out	0x3d, r28	; 61
    5d7a:	09 94       	ijmp

00005d7c <__epilogue_restores__>:
    5d7c:	2a 88       	ldd	r2, Y+18	; 0x12
    5d7e:	39 88       	ldd	r3, Y+17	; 0x11
    5d80:	48 88       	ldd	r4, Y+16	; 0x10
    5d82:	5f 84       	ldd	r5, Y+15	; 0x0f
    5d84:	6e 84       	ldd	r6, Y+14	; 0x0e
    5d86:	7d 84       	ldd	r7, Y+13	; 0x0d
    5d88:	8c 84       	ldd	r8, Y+12	; 0x0c
    5d8a:	9b 84       	ldd	r9, Y+11	; 0x0b
    5d8c:	aa 84       	ldd	r10, Y+10	; 0x0a
    5d8e:	b9 84       	ldd	r11, Y+9	; 0x09
    5d90:	c8 84       	ldd	r12, Y+8	; 0x08
    5d92:	df 80       	ldd	r13, Y+7	; 0x07
    5d94:	ee 80       	ldd	r14, Y+6	; 0x06
    5d96:	fd 80       	ldd	r15, Y+5	; 0x05
    5d98:	0c 81       	ldd	r16, Y+4	; 0x04
    5d9a:	1b 81       	ldd	r17, Y+3	; 0x03
    5d9c:	aa 81       	ldd	r26, Y+2	; 0x02
    5d9e:	b9 81       	ldd	r27, Y+1	; 0x01
    5da0:	ce 0f       	add	r28, r30
    5da2:	d1 1d       	adc	r29, r1
    5da4:	0f b6       	in	r0, 0x3f	; 63
    5da6:	f8 94       	cli
    5da8:	de bf       	out	0x3e, r29	; 62
    5daa:	0f be       	out	0x3f, r0	; 63
    5dac:	cd bf       	out	0x3d, r28	; 61
    5dae:	ed 01       	movw	r28, r26
    5db0:	08 95       	ret

00005db2 <__tablejump2__>:
    5db2:	ee 0f       	add	r30, r30
    5db4:	ff 1f       	adc	r31, r31

00005db6 <__tablejump__>:
    5db6:	05 90       	lpm	r0, Z+
    5db8:	f4 91       	lpm	r31, Z+
    5dba:	e0 2d       	mov	r30, r0
    5dbc:	09 94       	ijmp

00005dbe <atoi>:
    5dbe:	fc 01       	movw	r30, r24
    5dc0:	88 27       	eor	r24, r24
    5dc2:	99 27       	eor	r25, r25
    5dc4:	e8 94       	clt
    5dc6:	21 91       	ld	r18, Z+
    5dc8:	20 32       	cpi	r18, 0x20	; 32
    5dca:	e9 f3       	breq	.-6      	; 0x5dc6 <atoi+0x8>
    5dcc:	29 30       	cpi	r18, 0x09	; 9
    5dce:	10 f0       	brcs	.+4      	; 0x5dd4 <atoi+0x16>
    5dd0:	2e 30       	cpi	r18, 0x0E	; 14
    5dd2:	c8 f3       	brcs	.-14     	; 0x5dc6 <atoi+0x8>
    5dd4:	2b 32       	cpi	r18, 0x2B	; 43
    5dd6:	41 f0       	breq	.+16     	; 0x5de8 <atoi+0x2a>
    5dd8:	2d 32       	cpi	r18, 0x2D	; 45
    5dda:	39 f4       	brne	.+14     	; 0x5dea <atoi+0x2c>
    5ddc:	68 94       	set
    5dde:	04 c0       	rjmp	.+8      	; 0x5de8 <atoi+0x2a>
    5de0:	0e 94 1e 2f 	call	0x5e3c	; 0x5e3c <__mulhi_const_10>
    5de4:	82 0f       	add	r24, r18
    5de6:	91 1d       	adc	r25, r1
    5de8:	21 91       	ld	r18, Z+
    5dea:	20 53       	subi	r18, 0x30	; 48
    5dec:	2a 30       	cpi	r18, 0x0A	; 10
    5dee:	c0 f3       	brcs	.-16     	; 0x5de0 <atoi+0x22>
    5df0:	1e f4       	brtc	.+6      	; 0x5df8 <atoi+0x3a>
    5df2:	90 95       	com	r25
    5df4:	81 95       	neg	r24
    5df6:	9f 4f       	sbci	r25, 0xFF	; 255
    5df8:	08 95       	ret

00005dfa <itoa>:
    5dfa:	fb 01       	movw	r30, r22
    5dfc:	9f 01       	movw	r18, r30
    5dfe:	e8 94       	clt
    5e00:	42 30       	cpi	r20, 0x02	; 2
    5e02:	c4 f0       	brlt	.+48     	; 0x5e34 <itoa+0x3a>
    5e04:	45 32       	cpi	r20, 0x25	; 37
    5e06:	b4 f4       	brge	.+44     	; 0x5e34 <itoa+0x3a>
    5e08:	4a 30       	cpi	r20, 0x0A	; 10
    5e0a:	29 f4       	brne	.+10     	; 0x5e16 <itoa+0x1c>
    5e0c:	97 fb       	bst	r25, 7
    5e0e:	1e f4       	brtc	.+6      	; 0x5e16 <itoa+0x1c>
    5e10:	90 95       	com	r25
    5e12:	81 95       	neg	r24
    5e14:	9f 4f       	sbci	r25, 0xFF	; 255
    5e16:	64 2f       	mov	r22, r20
    5e18:	77 27       	eor	r23, r23
    5e1a:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__udivmodhi4>
    5e1e:	80 5d       	subi	r24, 0xD0	; 208
    5e20:	8a 33       	cpi	r24, 0x3A	; 58
    5e22:	0c f0       	brlt	.+2      	; 0x5e26 <itoa+0x2c>
    5e24:	89 5d       	subi	r24, 0xD9	; 217
    5e26:	81 93       	st	Z+, r24
    5e28:	cb 01       	movw	r24, r22
    5e2a:	00 97       	sbiw	r24, 0x00	; 0
    5e2c:	a1 f7       	brne	.-24     	; 0x5e16 <itoa+0x1c>
    5e2e:	16 f4       	brtc	.+4      	; 0x5e34 <itoa+0x3a>
    5e30:	5d e2       	ldi	r21, 0x2D	; 45
    5e32:	51 93       	st	Z+, r21
    5e34:	10 82       	st	Z, r1
    5e36:	c9 01       	movw	r24, r18
    5e38:	0c 94 26 2f 	jmp	0x5e4c	; 0x5e4c <strrev>

00005e3c <__mulhi_const_10>:
    5e3c:	7a e0       	ldi	r23, 0x0A	; 10
    5e3e:	97 9f       	mul	r25, r23
    5e40:	90 2d       	mov	r25, r0
    5e42:	87 9f       	mul	r24, r23
    5e44:	80 2d       	mov	r24, r0
    5e46:	91 0d       	add	r25, r1
    5e48:	11 24       	eor	r1, r1
    5e4a:	08 95       	ret

00005e4c <strrev>:
    5e4c:	dc 01       	movw	r26, r24
    5e4e:	fc 01       	movw	r30, r24
    5e50:	67 2f       	mov	r22, r23
    5e52:	71 91       	ld	r23, Z+
    5e54:	77 23       	and	r23, r23
    5e56:	e1 f7       	brne	.-8      	; 0x5e50 <strrev+0x4>
    5e58:	32 97       	sbiw	r30, 0x02	; 2
    5e5a:	04 c0       	rjmp	.+8      	; 0x5e64 <strrev+0x18>
    5e5c:	7c 91       	ld	r23, X
    5e5e:	6d 93       	st	X+, r22
    5e60:	70 83       	st	Z, r23
    5e62:	62 91       	ld	r22, -Z
    5e64:	ae 17       	cp	r26, r30
    5e66:	bf 07       	cpc	r27, r31
    5e68:	c8 f3       	brcs	.-14     	; 0x5e5c <strrev+0x10>
    5e6a:	08 95       	ret

00005e6c <_exit>:
    5e6c:	f8 94       	cli

00005e6e <__stop_program>:
    5e6e:	ff cf       	rjmp	.-2      	; 0x5e6e <__stop_program>
