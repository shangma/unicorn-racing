
can_collector_node_example_gcc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000025a  00800100  00002e02  00002e96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  0080035a  0080035a  000030f0  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  000030f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  00003840  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00003894  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000332  00000000  00000000  00003974  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000f49  00000000  00000000  00003ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000065c  00000000  00000000  00004bef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000014fa  00000000  00000000  0000524b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000230  00000000  00000000  00006748  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000628  00000000  00000000  00006978  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 93 11 	jmp	0x2326	; 0x2326 <__vector_9>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 33 01 	jmp	0x266	; 0x266 <__vector_18>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      80:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	13 e0       	ldi	r17, 0x03	; 3
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e2 e0       	ldi	r30, 0x02	; 2
      a8:	fe e2       	ldi	r31, 0x2E	; 46
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	aa 35       	cpi	r26, 0x5A	; 90
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	13 e0       	ldi	r17, 0x03	; 3
      bc:	aa e5       	ldi	r26, 0x5A	; 90
      be:	b3 e0       	ldi	r27, 0x03	; 3
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	ab 37       	cpi	r26, 0x7B	; 123
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
      ce:	0c 94 ff 16 	jmp	0x2dfe	; 0x2dfe <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <main>:
//! This program performs some remote frames (c.f. NB_TARGET).
//! The response must be a data frame that contents (in the order) the addressed
//! node temperature, luminosity and VCC values.
//------------------------------------------------------------------------------
int main (void)
{	
      d6:	df 93       	push	r29
      d8:	cf 93       	push	r28
      da:	cd b7       	in	r28, 0x3d	; 61
      dc:	de b7       	in	r29, 0x3e	; 62
    CLKPR = 0x80;  CLKPR = 0x00;  // Clock prescaler Reset
      de:	e1 e6       	ldi	r30, 0x61	; 97
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	80 e8       	ldi	r24, 0x80	; 128
      e4:	80 83       	st	Z, r24
      e6:	e1 e6       	ldi	r30, 0x61	; 97
      e8:	f0 e0       	ldi	r31, 0x00	; 0
      ea:	10 82       	st	Z, r1
   
	uart_init(CONF_8BIT_NOPAR_1STOP,UART_BAUDRATE);
      ec:	83 e0       	ldi	r24, 0x03	; 3
      ee:	40 e0       	ldi	r20, 0x00	; 0
      f0:	56 e9       	ldi	r21, 0x96	; 150
      f2:	60 e0       	ldi	r22, 0x00	; 0
      f4:	70 e0       	ldi	r23, 0x00	; 0
      f6:	0e 94 23 12 	call	0x2446	; 0x2446 <uart_init>
    
    can_init(0);
      fa:	80 e0       	ldi	r24, 0x00	; 0
      fc:	0e 94 90 05 	call	0xb20	; 0xb20 <can_init>

	DDRA = 0xFF; // LED'er output
     100:	e1 e2       	ldi	r30, 0x21	; 33
     102:	f0 e0       	ldi	r31, 0x00	; 0
     104:	8f ef       	ldi	r24, 0xFF	; 255
     106:	80 83       	st	Z, r24
	PORTA = 0xFF; // LED'er t√¶ndt
     108:	e2 e2       	ldi	r30, 0x22	; 34
     10a:	f0 e0       	ldi	r31, 0x00	; 0
     10c:	8f ef       	ldi	r24, 0xFF	; 255
     10e:	80 83       	st	Z, r24


    // Interrupt
    
    
    sei();
     110:	78 94       	sei

    CANIE2 = 0xFF;
     112:	ee ed       	ldi	r30, 0xDE	; 222
     114:	f0 e0       	ldi	r31, 0x00	; 0
     116:	8f ef       	ldi	r24, 0xFF	; 255
     118:	80 83       	st	Z, r24
    CANIE1 = 0xFF;
     11a:	ef ed       	ldi	r30, 0xDF	; 223
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	8f ef       	ldi	r24, 0xFF	; 255
     120:	80 83       	st	Z, r24

    CANGIE |=(1<<ENRX);
     122:	ab ed       	ldi	r26, 0xDB	; 219
     124:	b0 e0       	ldi	r27, 0x00	; 0
     126:	eb ed       	ldi	r30, 0xDB	; 219
     128:	f0 e0       	ldi	r31, 0x00	; 0
     12a:	80 81       	ld	r24, Z
     12c:	80 62       	ori	r24, 0x20	; 32
     12e:	8c 93       	st	X, r24
    //CANGIE |=(1<<ENTX);

    CANGIE |=(1<<ENIT);
     130:	ab ed       	ldi	r26, 0xDB	; 219
     132:	b0 e0       	ldi	r27, 0x00	; 0
     134:	eb ed       	ldi	r30, 0xDB	; 219
     136:	f0 e0       	ldi	r31, 0x00	; 0
     138:	80 81       	ld	r24, Z
     13a:	80 68       	ori	r24, 0x80	; 128
     13c:	8c 93       	st	X, r24

    response_msg.pt_data = &response_buffer[0];
     13e:	8b e5       	ldi	r24, 0x5B	; 91
     140:	93 e0       	ldi	r25, 0x03	; 3
     142:	90 93 6d 03 	sts	0x036D, r25
     146:	80 93 6c 03 	sts	0x036C, r24
    response_msg.status = 0;
     14a:	10 92 6e 03 	sts	0x036E, r1

    display_sensor_values();
     14e:	0e 94 ae 00 	call	0x15c	; 0x15c <display_sensor_values>

    return 0;
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	90 e0       	ldi	r25, 0x00	; 0
}
     156:	cf 91       	pop	r28
     158:	df 91       	pop	r29
     15a:	08 95       	ret

0000015c <display_sensor_values>:
//!     local temperature, the local luminosity and the VCC values.
//!     When the DVK90CAN1 receives an response, it formates the data and
//!     sends it to a terminal.
//------------------------------------------------------------------------------
void display_sensor_values(void)
{
     15c:	df 93       	push	r29
     15e:	cf 93       	push	r28
     160:	cd b7       	in	r28, 0x3d	; 61
     162:	de b7       	in	r29, 0x3e	; 62
     164:	68 97       	sbiw	r28, 0x18	; 24
     166:	0f b6       	in	r0, 0x3f	; 63
     168:	f8 94       	cli
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	0f be       	out	0x3f, r0	; 63
     16e:	cd bf       	out	0x3d, r28	; 61
 
    U8 tx_remote_buffer[9];
    st_cmd_t tx_remote_msg;

    // --- Init variables
    tx_remote_msg.pt_data = &tx_remote_buffer[0];
     170:	ce 01       	movw	r24, r28
     172:	03 96       	adiw	r24, 0x03	; 3
     174:	9d 8b       	std	Y+21, r25	; 0x15
     176:	8c 8b       	std	Y+20, r24	; 0x14
    tx_remote_msg.status = 0;
     178:	1e 8a       	std	Y+22, r1	; 0x16

    // UART
    uart_mini_printf("GOGO");
     17a:	00 d0       	rcall	.+0      	; 0x17c <display_sensor_values+0x20>
     17c:	ed b7       	in	r30, 0x3d	; 61
     17e:	fe b7       	in	r31, 0x3e	; 62
     180:	31 96       	adiw	r30, 0x01	; 1
     182:	80 e0       	ldi	r24, 0x00	; 0
     184:	91 e0       	ldi	r25, 0x01	; 1
     186:	91 83       	std	Z+1, r25	; 0x01
     188:	80 83       	st	Z, r24
     18a:	0e 94 fd 12 	call	0x25fa	; 0x25fa <uart_mini_printf>
     18e:	0f 90       	pop	r0
     190:	0f 90       	pop	r0

    while (1)
    {
        wait_for(100);  // x ms between refreshed screen
     192:	84 e6       	ldi	r24, 0x64	; 100
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	0e 94 93 10 	call	0x2126	; 0x2126 <wait_for>
        for(j=0; j<NB_TARGET; j++)
     19a:	19 82       	std	Y+1, r1	; 0x01
     19c:	5f c0       	rjmp	.+190    	; 0x25c <display_sensor_values+0x100>
        {
            //CANGIE |=(1<<ENIT);
            // --- Init Rx Commands
      	    for(i=0; i<9; i++) response_buffer[i]=0; // Nulstiller buffer
     19e:	1a 82       	std	Y+2, r1	; 0x02
     1a0:	0a c0       	rjmp	.+20     	; 0x1b6 <display_sensor_values+0x5a>
     1a2:	8a 81       	ldd	r24, Y+2	; 0x02
     1a4:	88 2f       	mov	r24, r24
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	fc 01       	movw	r30, r24
     1aa:	e5 5a       	subi	r30, 0xA5	; 165
     1ac:	fc 4f       	sbci	r31, 0xFC	; 252
     1ae:	10 82       	st	Z, r1
     1b0:	8a 81       	ldd	r24, Y+2	; 0x02
     1b2:	8f 5f       	subi	r24, 0xFF	; 255
     1b4:	8a 83       	std	Y+2, r24	; 0x02
     1b6:	8a 81       	ldd	r24, Y+2	; 0x02
     1b8:	89 30       	cpi	r24, 0x09	; 9
     1ba:	98 f3       	brcs	.-26     	; 0x1a2 <display_sensor_values+0x46>
            response_msg.id.std = ID_TAG_BASE + j;
     1bc:	89 81       	ldd	r24, Y+1	; 0x01
     1be:	88 2f       	mov	r24, r24
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	80 58       	subi	r24, 0x80	; 128
     1c4:	9f 4f       	sbci	r25, 0xFF	; 255
     1c6:	90 93 68 03 	sts	0x0368, r25
     1ca:	80 93 67 03 	sts	0x0367, r24
            response_msg.ctrl.ide = 0;
     1ce:	10 92 70 03 	sts	0x0370, r1
            response_msg.ctrl.rtr = 0;
     1d2:	10 92 6f 03 	sts	0x036F, r1
            response_msg.dlc = 5;
     1d6:	85 e0       	ldi	r24, 0x05	; 5
     1d8:	80 93 6b 03 	sts	0x036B, r24
            response_msg.cmd = CMD_RX_DATA_MASKED;
     1dc:	88 e0       	ldi	r24, 0x08	; 8
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	90 93 66 03 	sts	0x0366, r25
     1e4:	80 93 65 03 	sts	0x0365, r24
            // --- Rx Command
            while(can_cmd(&response_msg) != CAN_CMD_ACCEPTED);
     1e8:	84 e6       	ldi	r24, 0x64	; 100
     1ea:	93 e0       	ldi	r25, 0x03	; 3
     1ec:	0e 94 ae 05 	call	0xb5c	; 0xb5c <can_cmd>
     1f0:	88 23       	and	r24, r24
     1f2:	d1 f7       	brne	.-12     	; 0x1e8 <display_sensor_values+0x8c>

            // --- Init Tx Commands
  	        for(i=0; i<9; i++) tx_remote_buffer[i]=0; // Nulstiller buffer
     1f4:	1a 82       	std	Y+2, r1	; 0x02
     1f6:	0c c0       	rjmp	.+24     	; 0x210 <display_sensor_values+0xb4>
     1f8:	8a 81       	ldd	r24, Y+2	; 0x02
     1fa:	28 2f       	mov	r18, r24
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	ce 01       	movw	r24, r28
     200:	03 96       	adiw	r24, 0x03	; 3
     202:	fc 01       	movw	r30, r24
     204:	e2 0f       	add	r30, r18
     206:	f3 1f       	adc	r31, r19
     208:	10 82       	st	Z, r1
     20a:	8a 81       	ldd	r24, Y+2	; 0x02
     20c:	8f 5f       	subi	r24, 0xFF	; 255
     20e:	8a 83       	std	Y+2, r24	; 0x02
     210:	8a 81       	ldd	r24, Y+2	; 0x02
     212:	89 30       	cpi	r24, 0x09	; 9
     214:	88 f3       	brcs	.-30     	; 0x1f8 <display_sensor_values+0x9c>
            tx_remote_msg.id.std = ID_TAG_BASE + j;
     216:	89 81       	ldd	r24, Y+1	; 0x01
     218:	88 2f       	mov	r24, r24
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	80 58       	subi	r24, 0x80	; 128
     21e:	9f 4f       	sbci	r25, 0xFF	; 255
     220:	98 8b       	std	Y+16, r25	; 0x10
     222:	8f 87       	std	Y+15, r24	; 0x0f
            tx_remote_msg.ctrl.ide = 0;
     224:	18 8e       	std	Y+24, r1	; 0x18
            tx_remote_msg.ctrl.rtr = 1;
     226:	81 e0       	ldi	r24, 0x01	; 1
     228:	8f 8b       	std	Y+23, r24	; 0x17
            tx_remote_msg.dlc = 8; // Antal data bytes der skal modtages 
     22a:	88 e0       	ldi	r24, 0x08	; 8
     22c:	8b 8b       	std	Y+19, r24	; 0x13
            tx_remote_msg.cmd = CMD_TX_REMOTE;
     22e:	83 e0       	ldi	r24, 0x03	; 3
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	9e 87       	std	Y+14, r25	; 0x0e
     234:	8d 87       	std	Y+13, r24	; 0x0d
            // --- Tx Command
            while(can_cmd(&tx_remote_msg) != CAN_CMD_ACCEPTED);
     236:	ce 01       	movw	r24, r28
     238:	0c 96       	adiw	r24, 0x0c	; 12
     23a:	0e 94 ae 05 	call	0xb5c	; 0xb5c <can_cmd>
     23e:	88 23       	and	r24, r24
     240:	d1 f7       	brne	.-12     	; 0x236 <display_sensor_values+0xda>

            // --- Wait for Tx remote completed
            while(can_get_status(&tx_remote_msg) == CAN_STATUS_NOT_COMPLETED);
     242:	ce 01       	movw	r24, r28
     244:	0c 96       	adiw	r24, 0x0c	; 12
     246:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <can_get_status>
     24a:	81 30       	cpi	r24, 0x01	; 1
     24c:	d1 f3       	breq	.-12     	; 0x242 <display_sensor_values+0xe6>

            wait_for(50); // Wait x ms for a response if exits
     24e:	82 e3       	ldi	r24, 0x32	; 50
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	0e 94 93 10 	call	0x2126	; 0x2126 <wait_for>
    uart_mini_printf("GOGO");

    while (1)
    {
        wait_for(100);  // x ms between refreshed screen
        for(j=0; j<NB_TARGET; j++)
     256:	89 81       	ldd	r24, Y+1	; 0x01
     258:	8f 5f       	subi	r24, 0xFF	; 255
     25a:	89 83       	std	Y+1, r24	; 0x01
     25c:	89 81       	ldd	r24, Y+1	; 0x01
     25e:	88 23       	and	r24, r24
     260:	09 f4       	brne	.+2      	; 0x264 <display_sensor_values+0x108>
     262:	9d cf       	rjmp	.-198    	; 0x19e <display_sensor_values+0x42>
     264:	96 cf       	rjmp	.-212    	; 0x192 <display_sensor_values+0x36>

00000266 <__vector_18>:
        }
    }
}

ISR(CANIT_vect)
{
     266:	1f 92       	push	r1
     268:	0f 92       	push	r0
     26a:	0f b6       	in	r0, 0x3f	; 63
     26c:	0f 92       	push	r0
     26e:	00 90 5b 00 	lds	r0, 0x005B
     272:	0f 92       	push	r0
     274:	11 24       	eor	r1, r1
     276:	2f 93       	push	r18
     278:	3f 93       	push	r19
     27a:	4f 93       	push	r20
     27c:	5f 93       	push	r21
     27e:	6f 93       	push	r22
     280:	7f 93       	push	r23
     282:	8f 93       	push	r24
     284:	9f 93       	push	r25
     286:	af 93       	push	r26
     288:	bf 93       	push	r27
     28a:	ef 93       	push	r30
     28c:	ff 93       	push	r31
     28e:	df 93       	push	r29
     290:	cf 93       	push	r28
     292:	0f 92       	push	r0
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
    U8 tmp;
 
    CANGIE &=~(1<<ENIT);
     298:	ab ed       	ldi	r26, 0xDB	; 219
     29a:	b0 e0       	ldi	r27, 0x00	; 0
     29c:	eb ed       	ldi	r30, 0xDB	; 219
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	80 81       	ld	r24, Z
     2a2:	8f 77       	andi	r24, 0x7F	; 127
     2a4:	8c 93       	st	X, r24
    CANGIE |=(1<<ENIT);
     2a6:	ab ed       	ldi	r26, 0xDB	; 219
     2a8:	b0 e0       	ldi	r27, 0x00	; 0
     2aa:	eb ed       	ldi	r30, 0xDB	; 219
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	80 81       	ld	r24, Z
     2b0:	80 68       	ori	r24, 0x80	; 128
     2b2:	8c 93       	st	X, r24
    
    if (can_get_status(&response_msg) == CAN_STATUS_COMPLETED)
     2b4:	84 e6       	ldi	r24, 0x64	; 100
     2b6:	93 e0       	ldi	r25, 0x03	; 3
     2b8:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <can_get_status>
     2bc:	88 23       	and	r24, r24
     2be:	09 f0       	breq	.+2      	; 0x2c2 <__vector_18+0x5c>
     2c0:	cd c0       	rjmp	.+410    	; 0x45c <__vector_18+0x1f6>
            {
                // --- Node ID
				uart_mini_printf("Node: %d",response_msg.id.std-127);
     2c2:	80 91 67 03 	lds	r24, 0x0367
     2c6:	90 91 68 03 	lds	r25, 0x0368
     2ca:	9c 01       	movw	r18, r24
     2cc:	2f 57       	subi	r18, 0x7F	; 127
     2ce:	30 40       	sbci	r19, 0x00	; 0
     2d0:	00 d0       	rcall	.+0      	; 0x2d2 <__vector_18+0x6c>
     2d2:	00 d0       	rcall	.+0      	; 0x2d4 <__vector_18+0x6e>
     2d4:	ed b7       	in	r30, 0x3d	; 61
     2d6:	fe b7       	in	r31, 0x3e	; 62
     2d8:	31 96       	adiw	r30, 0x01	; 1
     2da:	85 e0       	ldi	r24, 0x05	; 5
     2dc:	91 e0       	ldi	r25, 0x01	; 1
     2de:	91 83       	std	Z+1, r25	; 0x01
     2e0:	80 83       	st	Z, r24
     2e2:	33 83       	std	Z+3, r19	; 0x03
     2e4:	22 83       	std	Z+2, r18	; 0x02
     2e6:	0e 94 fd 12 	call	0x25fa	; 0x25fa <uart_mini_printf>
     2ea:	0f 90       	pop	r0
     2ec:	0f 90       	pop	r0
     2ee:	0f 90       	pop	r0
     2f0:	0f 90       	pop	r0
                
                // --- Data               
               	uart_mini_printf(", Data1: %03d", response_buffer[0]);
     2f2:	80 91 5b 03 	lds	r24, 0x035B
     2f6:	28 2f       	mov	r18, r24
     2f8:	30 e0       	ldi	r19, 0x00	; 0
     2fa:	00 d0       	rcall	.+0      	; 0x2fc <__vector_18+0x96>
     2fc:	00 d0       	rcall	.+0      	; 0x2fe <__vector_18+0x98>
     2fe:	ed b7       	in	r30, 0x3d	; 61
     300:	fe b7       	in	r31, 0x3e	; 62
     302:	31 96       	adiw	r30, 0x01	; 1
     304:	8e e0       	ldi	r24, 0x0E	; 14
     306:	91 e0       	ldi	r25, 0x01	; 1
     308:	91 83       	std	Z+1, r25	; 0x01
     30a:	80 83       	st	Z, r24
     30c:	33 83       	std	Z+3, r19	; 0x03
     30e:	22 83       	std	Z+2, r18	; 0x02
     310:	0e 94 fd 12 	call	0x25fa	; 0x25fa <uart_mini_printf>
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	0f 90       	pop	r0
     31a:	0f 90       	pop	r0

				uart_mini_printf(", Data2: %03d", response_buffer[1]);
     31c:	80 91 5c 03 	lds	r24, 0x035C
     320:	28 2f       	mov	r18, r24
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	00 d0       	rcall	.+0      	; 0x326 <__vector_18+0xc0>
     326:	00 d0       	rcall	.+0      	; 0x328 <__vector_18+0xc2>
     328:	ed b7       	in	r30, 0x3d	; 61
     32a:	fe b7       	in	r31, 0x3e	; 62
     32c:	31 96       	adiw	r30, 0x01	; 1
     32e:	8c e1       	ldi	r24, 0x1C	; 28
     330:	91 e0       	ldi	r25, 0x01	; 1
     332:	91 83       	std	Z+1, r25	; 0x01
     334:	80 83       	st	Z, r24
     336:	33 83       	std	Z+3, r19	; 0x03
     338:	22 83       	std	Z+2, r18	; 0x02
     33a:	0e 94 fd 12 	call	0x25fa	; 0x25fa <uart_mini_printf>
     33e:	0f 90       	pop	r0
     340:	0f 90       	pop	r0
     342:	0f 90       	pop	r0
     344:	0f 90       	pop	r0
				uart_mini_printf(", Data3: %03d", response_buffer[2]);
     346:	80 91 5d 03 	lds	r24, 0x035D
     34a:	28 2f       	mov	r18, r24
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	00 d0       	rcall	.+0      	; 0x350 <__vector_18+0xea>
     350:	00 d0       	rcall	.+0      	; 0x352 <__vector_18+0xec>
     352:	ed b7       	in	r30, 0x3d	; 61
     354:	fe b7       	in	r31, 0x3e	; 62
     356:	31 96       	adiw	r30, 0x01	; 1
     358:	8a e2       	ldi	r24, 0x2A	; 42
     35a:	91 e0       	ldi	r25, 0x01	; 1
     35c:	91 83       	std	Z+1, r25	; 0x01
     35e:	80 83       	st	Z, r24
     360:	33 83       	std	Z+3, r19	; 0x03
     362:	22 83       	std	Z+2, r18	; 0x02
     364:	0e 94 fd 12 	call	0x25fa	; 0x25fa <uart_mini_printf>
     368:	0f 90       	pop	r0
     36a:	0f 90       	pop	r0
     36c:	0f 90       	pop	r0
     36e:	0f 90       	pop	r0
				uart_mini_printf(", Data4: %03d", response_buffer[3]);
     370:	80 91 5e 03 	lds	r24, 0x035E
     374:	28 2f       	mov	r18, r24
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	00 d0       	rcall	.+0      	; 0x37a <__vector_18+0x114>
     37a:	00 d0       	rcall	.+0      	; 0x37c <__vector_18+0x116>
     37c:	ed b7       	in	r30, 0x3d	; 61
     37e:	fe b7       	in	r31, 0x3e	; 62
     380:	31 96       	adiw	r30, 0x01	; 1
     382:	88 e3       	ldi	r24, 0x38	; 56
     384:	91 e0       	ldi	r25, 0x01	; 1
     386:	91 83       	std	Z+1, r25	; 0x01
     388:	80 83       	st	Z, r24
     38a:	33 83       	std	Z+3, r19	; 0x03
     38c:	22 83       	std	Z+2, r18	; 0x02
     38e:	0e 94 fd 12 	call	0x25fa	; 0x25fa <uart_mini_printf>
     392:	0f 90       	pop	r0
     394:	0f 90       	pop	r0
     396:	0f 90       	pop	r0
     398:	0f 90       	pop	r0
				uart_mini_printf(", Data5: %03d", response_buffer[4]);
     39a:	80 91 5f 03 	lds	r24, 0x035F
     39e:	28 2f       	mov	r18, r24
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	00 d0       	rcall	.+0      	; 0x3a4 <__vector_18+0x13e>
     3a4:	00 d0       	rcall	.+0      	; 0x3a6 <__vector_18+0x140>
     3a6:	ed b7       	in	r30, 0x3d	; 61
     3a8:	fe b7       	in	r31, 0x3e	; 62
     3aa:	31 96       	adiw	r30, 0x01	; 1
     3ac:	86 e4       	ldi	r24, 0x46	; 70
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	91 83       	std	Z+1, r25	; 0x01
     3b2:	80 83       	st	Z, r24
     3b4:	33 83       	std	Z+3, r19	; 0x03
     3b6:	22 83       	std	Z+2, r18	; 0x02
     3b8:	0e 94 fd 12 	call	0x25fa	; 0x25fa <uart_mini_printf>
     3bc:	0f 90       	pop	r0
     3be:	0f 90       	pop	r0
     3c0:	0f 90       	pop	r0
     3c2:	0f 90       	pop	r0
				uart_mini_printf(", Data6: %03d", response_buffer[5]);
     3c4:	80 91 60 03 	lds	r24, 0x0360
     3c8:	28 2f       	mov	r18, r24
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	00 d0       	rcall	.+0      	; 0x3ce <__vector_18+0x168>
     3ce:	00 d0       	rcall	.+0      	; 0x3d0 <__vector_18+0x16a>
     3d0:	ed b7       	in	r30, 0x3d	; 61
     3d2:	fe b7       	in	r31, 0x3e	; 62
     3d4:	31 96       	adiw	r30, 0x01	; 1
     3d6:	84 e5       	ldi	r24, 0x54	; 84
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	91 83       	std	Z+1, r25	; 0x01
     3dc:	80 83       	st	Z, r24
     3de:	33 83       	std	Z+3, r19	; 0x03
     3e0:	22 83       	std	Z+2, r18	; 0x02
     3e2:	0e 94 fd 12 	call	0x25fa	; 0x25fa <uart_mini_printf>
     3e6:	0f 90       	pop	r0
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
     3ec:	0f 90       	pop	r0
				uart_mini_printf(", Data7: %03d", response_buffer[6]);                
     3ee:	80 91 61 03 	lds	r24, 0x0361
     3f2:	28 2f       	mov	r18, r24
     3f4:	30 e0       	ldi	r19, 0x00	; 0
     3f6:	00 d0       	rcall	.+0      	; 0x3f8 <__vector_18+0x192>
     3f8:	00 d0       	rcall	.+0      	; 0x3fa <__vector_18+0x194>
     3fa:	ed b7       	in	r30, 0x3d	; 61
     3fc:	fe b7       	in	r31, 0x3e	; 62
     3fe:	31 96       	adiw	r30, 0x01	; 1
     400:	82 e6       	ldi	r24, 0x62	; 98
     402:	91 e0       	ldi	r25, 0x01	; 1
     404:	91 83       	std	Z+1, r25	; 0x01
     406:	80 83       	st	Z, r24
     408:	33 83       	std	Z+3, r19	; 0x03
     40a:	22 83       	std	Z+2, r18	; 0x02
     40c:	0e 94 fd 12 	call	0x25fa	; 0x25fa <uart_mini_printf>
     410:	0f 90       	pop	r0
     412:	0f 90       	pop	r0
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
				uart_mini_printf(", Data8: %03d", response_buffer[7]);
     418:	80 91 62 03 	lds	r24, 0x0362
     41c:	28 2f       	mov	r18, r24
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	00 d0       	rcall	.+0      	; 0x422 <__vector_18+0x1bc>
     422:	00 d0       	rcall	.+0      	; 0x424 <__vector_18+0x1be>
     424:	ed b7       	in	r30, 0x3d	; 61
     426:	fe b7       	in	r31, 0x3e	; 62
     428:	31 96       	adiw	r30, 0x01	; 1
     42a:	80 e7       	ldi	r24, 0x70	; 112
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	91 83       	std	Z+1, r25	; 0x01
     430:	80 83       	st	Z, r24
     432:	33 83       	std	Z+3, r19	; 0x03
     434:	22 83       	std	Z+2, r18	; 0x02
     436:	0e 94 fd 12 	call	0x25fa	; 0x25fa <uart_mini_printf>
     43a:	0f 90       	pop	r0
     43c:	0f 90       	pop	r0
     43e:	0f 90       	pop	r0
     440:	0f 90       	pop	r0
				uart_mini_printf("\r\n");  
     442:	00 d0       	rcall	.+0      	; 0x444 <__vector_18+0x1de>
     444:	ed b7       	in	r30, 0x3d	; 61
     446:	fe b7       	in	r31, 0x3e	; 62
     448:	31 96       	adiw	r30, 0x01	; 1
     44a:	8e e7       	ldi	r24, 0x7E	; 126
     44c:	91 e0       	ldi	r25, 0x01	; 1
     44e:	91 83       	std	Z+1, r25	; 0x01
     450:	80 83       	st	Z, r24
     452:	0e 94 fd 12 	call	0x25fa	; 0x25fa <uart_mini_printf>
     456:	0f 90       	pop	r0
     458:	0f 90       	pop	r0
     45a:	0c c0       	rjmp	.+24     	; 0x474 <__vector_18+0x20e>
            }
            else
            {
                response_msg.cmd = CMD_ABORT;
     45c:	8c e0       	ldi	r24, 0x0C	; 12
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	90 93 66 03 	sts	0x0366, r25
     464:	80 93 65 03 	sts	0x0365, r24
  	            while (can_cmd(&response_msg) != CAN_CMD_ACCEPTED);
     468:	84 e6       	ldi	r24, 0x64	; 100
     46a:	93 e0       	ldi	r25, 0x03	; 3
     46c:	0e 94 ae 05 	call	0xb5c	; 0xb5c <can_cmd>
     470:	88 23       	and	r24, r24
     472:	d1 f7       	brne	.-12     	; 0x468 <__vector_18+0x202>
            }
}
     474:	0f 90       	pop	r0
     476:	cf 91       	pop	r28
     478:	df 91       	pop	r29
     47a:	ff 91       	pop	r31
     47c:	ef 91       	pop	r30
     47e:	bf 91       	pop	r27
     480:	af 91       	pop	r26
     482:	9f 91       	pop	r25
     484:	8f 91       	pop	r24
     486:	7f 91       	pop	r23
     488:	6f 91       	pop	r22
     48a:	5f 91       	pop	r21
     48c:	4f 91       	pop	r20
     48e:	3f 91       	pop	r19
     490:	2f 91       	pop	r18
     492:	0f 90       	pop	r0
     494:	00 92 5b 00 	sts	0x005B, r0
     498:	0f 90       	pop	r0
     49a:	0f be       	out	0x3f, r0	; 63
     49c:	0f 90       	pop	r0
     49e:	1f 90       	pop	r1
     4a0:	18 95       	reti

000004a2 <can_clear_all_mob>:
//! @param none
//!
//! @return none
//------------------------------------------------------------------------------
void can_clear_all_mob(void)
{
     4a2:	df 93       	push	r29
     4a4:	cf 93       	push	r28
     4a6:	00 d0       	rcall	.+0      	; 0x4a8 <can_clear_all_mob+0x6>
     4a8:	0f 92       	push	r0
     4aa:	cd b7       	in	r28, 0x3d	; 61
     4ac:	de b7       	in	r29, 0x3e	; 62
U8  mob_number;
/*
    U8  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     4ae:	1b 82       	std	Y+3, r1	; 0x03
     4b0:	1b c0       	rjmp	.+54     	; 0x4e8 <can_clear_all_mob+0x46>
    {
        CANPAGE = (mob_number << 4);    //! Page index
     4b2:	ed ee       	ldi	r30, 0xED	; 237
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	8b 81       	ldd	r24, Y+3	; 0x03
     4b8:	82 95       	swap	r24
     4ba:	80 7f       	andi	r24, 0xF0	; 240
     4bc:	80 83       	st	Z, r24
        Can_clear_mob();                //! All MOb Registers=0
     4be:	8e ee       	ldi	r24, 0xEE	; 238
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	9a 83       	std	Y+2, r25	; 0x02
     4c4:	89 83       	std	Y+1, r24	; 0x01
     4c6:	08 c0       	rjmp	.+16     	; 0x4d8 <can_clear_all_mob+0x36>
     4c8:	e9 81       	ldd	r30, Y+1	; 0x01
     4ca:	fa 81       	ldd	r31, Y+2	; 0x02
     4cc:	10 82       	st	Z, r1
     4ce:	89 81       	ldd	r24, Y+1	; 0x01
     4d0:	9a 81       	ldd	r25, Y+2	; 0x02
     4d2:	01 96       	adiw	r24, 0x01	; 1
     4d4:	9a 83       	std	Y+2, r25	; 0x02
     4d6:	89 83       	std	Y+1, r24	; 0x01
     4d8:	89 81       	ldd	r24, Y+1	; 0x01
     4da:	9a 81       	ldd	r25, Y+2	; 0x02
     4dc:	88 3f       	cpi	r24, 0xF8	; 248
     4de:	91 05       	cpc	r25, r1
     4e0:	98 f3       	brcs	.-26     	; 0x4c8 <can_clear_all_mob+0x26>
U8  mob_number;
/*
    U8  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     4e2:	8b 81       	ldd	r24, Y+3	; 0x03
     4e4:	8f 5f       	subi	r24, 0xFF	; 255
     4e6:	8b 83       	std	Y+3, r24	; 0x03
     4e8:	8b 81       	ldd	r24, Y+3	; 0x03
     4ea:	8f 30       	cpi	r24, 0x0F	; 15
     4ec:	10 f3       	brcs	.-60     	; 0x4b2 <can_clear_all_mob+0x10>
        {
            CANMSG = 0;                 //! MOb data FIFO
        }
*/
    }
}
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	0f 90       	pop	r0
     4f4:	cf 91       	pop	r28
     4f6:	df 91       	pop	r29
     4f8:	08 95       	ret

000004fa <can_get_mob_free>:
//! @return Handle of MOb.
//!          - MOb[0] upto MOb[LAST_MOB_NB]
//!          - 0xFF if no MOb
//------------------------------------------------------------------------------
U8 can_get_mob_free(void)
{
     4fa:	df 93       	push	r29
     4fc:	cf 93       	push	r28
     4fe:	00 d0       	rcall	.+0      	; 0x500 <can_get_mob_free+0x6>
     500:	0f 92       	push	r0
     502:	cd b7       	in	r28, 0x3d	; 61
     504:	de b7       	in	r29, 0x3e	; 62
    U8 mob_number, page_saved;

    page_saved = CANPAGE;
     506:	ed ee       	ldi	r30, 0xED	; 237
     508:	f0 e0       	ldi	r31, 0x00	; 0
     50a:	80 81       	ld	r24, Z
     50c:	89 83       	std	Y+1, r24	; 0x01
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     50e:	1a 82       	std	Y+2, r1	; 0x02
     510:	19 c0       	rjmp	.+50     	; 0x544 <can_get_mob_free+0x4a>
    {
        Can_set_mob(mob_number);
     512:	ed ee       	ldi	r30, 0xED	; 237
     514:	f0 e0       	ldi	r31, 0x00	; 0
     516:	8a 81       	ldd	r24, Y+2	; 0x02
     518:	82 95       	swap	r24
     51a:	80 7f       	andi	r24, 0xF0	; 240
     51c:	80 83       	st	Z, r24
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
     51e:	ef ee       	ldi	r30, 0xEF	; 239
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	80 81       	ld	r24, Z
     524:	88 2f       	mov	r24, r24
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	80 7c       	andi	r24, 0xC0	; 192
     52a:	90 70       	andi	r25, 0x00	; 0
     52c:	00 97       	sbiw	r24, 0x00	; 0
     52e:	39 f4       	brne	.+14     	; 0x53e <can_get_mob_free+0x44>
        {
            CANPAGE = page_saved;
     530:	ed ee       	ldi	r30, 0xED	; 237
     532:	f0 e0       	ldi	r31, 0x00	; 0
     534:	89 81       	ldd	r24, Y+1	; 0x01
     536:	80 83       	st	Z, r24
            return (mob_number);
     538:	8a 81       	ldd	r24, Y+2	; 0x02
     53a:	8b 83       	std	Y+3, r24	; 0x03
     53c:	0c c0       	rjmp	.+24     	; 0x556 <can_get_mob_free+0x5c>
U8 can_get_mob_free(void)
{
    U8 mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     53e:	8a 81       	ldd	r24, Y+2	; 0x02
     540:	8f 5f       	subi	r24, 0xFF	; 255
     542:	8a 83       	std	Y+2, r24	; 0x02
     544:	8a 81       	ldd	r24, Y+2	; 0x02
     546:	8f 30       	cpi	r24, 0x0F	; 15
     548:	20 f3       	brcs	.-56     	; 0x512 <can_get_mob_free+0x18>
        {
            CANPAGE = page_saved;
            return (mob_number);
        }
    }
    CANPAGE = page_saved;
     54a:	ed ee       	ldi	r30, 0xED	; 237
     54c:	f0 e0       	ldi	r31, 0x00	; 0
     54e:	89 81       	ldd	r24, Y+1	; 0x01
     550:	80 83       	st	Z, r24
    return (NO_MOB);
     552:	8f ef       	ldi	r24, 0xFF	; 255
     554:	8b 83       	std	Y+3, r24	; 0x03
     556:	8b 81       	ldd	r24, Y+3	; 0x03
}
     558:	0f 90       	pop	r0
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	cf 91       	pop	r28
     560:	df 91       	pop	r29
     562:	08 95       	ret

00000564 <can_get_mob_status>:
//!          -  MOB_CRC_ERROR
//!          -  MOB_STUFF_ERROR
//!          -  MOB_BIT_ERROR
//------------------------------------------------------------------------------
U8 can_get_mob_status(void)
{
     564:	df 93       	push	r29
     566:	cf 93       	push	r28
     568:	00 d0       	rcall	.+0      	; 0x56a <can_get_mob_status+0x6>
     56a:	0f 92       	push	r0
     56c:	cd b7       	in	r28, 0x3d	; 61
     56e:	de b7       	in	r29, 0x3e	; 62
    U8 mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     570:	ef ee       	ldi	r30, 0xEF	; 239
     572:	f0 e0       	ldi	r31, 0x00	; 0
     574:	80 81       	ld	r24, Z
     576:	88 2f       	mov	r24, r24
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	80 7c       	andi	r24, 0xC0	; 192
     57c:	90 70       	andi	r25, 0x00	; 0
     57e:	00 97       	sbiw	r24, 0x00	; 0
     580:	19 f4       	brne	.+6      	; 0x588 <can_get_mob_status+0x24>
     582:	8f ef       	ldi	r24, 0xFF	; 255
     584:	8b 83       	std	Y+3, r24	; 0x03
     586:	1d c0       	rjmp	.+58     	; 0x5c2 <can_get_mob_status+0x5e>

    canstmob_copy = CANSTMOB; // Copy for test integrity
     588:	ee ee       	ldi	r30, 0xEE	; 238
     58a:	f0 e0       	ldi	r31, 0x00	; 0
     58c:	80 81       	ld	r24, Z
     58e:	89 83       	std	Y+1, r24	; 0x01

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
     590:	89 81       	ldd	r24, Y+1	; 0x01
     592:	80 7e       	andi	r24, 0xE0	; 224
     594:	8a 83       	std	Y+2, r24	; 0x02
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
     596:	8a 81       	ldd	r24, Y+2	; 0x02
     598:	80 32       	cpi	r24, 0x20	; 32
     59a:	31 f0       	breq	.+12     	; 0x5a8 <can_get_mob_status+0x44>
     59c:	8a 81       	ldd	r24, Y+2	; 0x02
     59e:	80 34       	cpi	r24, 0x40	; 64
     5a0:	19 f0       	breq	.+6      	; 0x5a8 <can_get_mob_status+0x44>
     5a2:	8a 81       	ldd	r24, Y+2	; 0x02
     5a4:	80 3a       	cpi	r24, 0xA0	; 160
     5a6:	19 f4       	brne	.+6      	; 0x5ae <can_get_mob_status+0x4a>
         (mob_status==MOB_TX_COMPLETED) ||   \
         (mob_status==MOB_RX_COMPLETED_DLCW) ) { return(mob_status); }
     5a8:	8a 81       	ldd	r24, Y+2	; 0x02
     5aa:	8b 83       	std	Y+3, r24	; 0x03
     5ac:	0a c0       	rjmp	.+20     	; 0x5c2 <can_get_mob_status+0x5e>
    // - MOb Status bit_0 = MOB_ACK_ERROR
    // - MOb Status bit_1 = MOB_FORM_ERROR
    // - MOb Status bit_2 = MOB_CRC_ERROR
    // - MOb Status bit_3 = MOB_STUFF_ERROR
    // - MOb Status bit_4 = MOB_BIT_ERROR
    mob_status = canstmob_copy & ERR_MOB_MSK;
     5ae:	89 81       	ldd	r24, Y+1	; 0x01
     5b0:	8f 71       	andi	r24, 0x1F	; 31
     5b2:	8a 83       	std	Y+2, r24	; 0x02
    if (mob_status != 0) { return(mob_status); }
     5b4:	8a 81       	ldd	r24, Y+2	; 0x02
     5b6:	88 23       	and	r24, r24
     5b8:	19 f0       	breq	.+6      	; 0x5c0 <can_get_mob_status+0x5c>
     5ba:	8a 81       	ldd	r24, Y+2	; 0x02
     5bc:	8b 83       	std	Y+3, r24	; 0x03
     5be:	01 c0       	rjmp	.+2      	; 0x5c2 <can_get_mob_status+0x5e>

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
     5c0:	1b 82       	std	Y+3, r1	; 0x03
     5c2:	8b 81       	ldd	r24, Y+3	; 0x03
}
     5c4:	0f 90       	pop	r0
     5c6:	0f 90       	pop	r0
     5c8:	0f 90       	pop	r0
     5ca:	cf 91       	pop	r28
     5cc:	df 91       	pop	r29
     5ce:	08 95       	ret

000005d0 <can_get_data>:
//! @param CAN message data address.
//!
//! @return none.
//------------------------------------------------------------------------------
void can_get_data(U8* p_can_message_data)
{
     5d0:	df 93       	push	r29
     5d2:	cf 93       	push	r28
     5d4:	00 d0       	rcall	.+0      	; 0x5d6 <can_get_data+0x6>
     5d6:	0f 92       	push	r0
     5d8:	cd b7       	in	r28, 0x3d	; 61
     5da:	de b7       	in	r29, 0x3e	; 62
     5dc:	9b 83       	std	Y+3, r25	; 0x03
     5de:	8a 83       	std	Y+2, r24	; 0x02
    U8 data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
     5e0:	19 82       	std	Y+1, r1	; 0x01
     5e2:	0f c0       	rjmp	.+30     	; 0x602 <can_get_data+0x32>
    {
        *(p_can_message_data + data_index) = CANMSG;
     5e4:	89 81       	ldd	r24, Y+1	; 0x01
     5e6:	28 2f       	mov	r18, r24
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	8a 81       	ldd	r24, Y+2	; 0x02
     5ec:	9b 81       	ldd	r25, Y+3	; 0x03
     5ee:	dc 01       	movw	r26, r24
     5f0:	a2 0f       	add	r26, r18
     5f2:	b3 1f       	adc	r27, r19
     5f4:	ea ef       	ldi	r30, 0xFA	; 250
     5f6:	f0 e0       	ldi	r31, 0x00	; 0
     5f8:	80 81       	ld	r24, Z
     5fa:	8c 93       	st	X, r24
//------------------------------------------------------------------------------
void can_get_data(U8* p_can_message_data)
{
    U8 data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
     5fc:	89 81       	ldd	r24, Y+1	; 0x01
     5fe:	8f 5f       	subi	r24, 0xFF	; 255
     600:	89 83       	std	Y+1, r24	; 0x01
     602:	89 81       	ldd	r24, Y+1	; 0x01
     604:	28 2f       	mov	r18, r24
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	ef ee       	ldi	r30, 0xEF	; 239
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	80 81       	ld	r24, Z
     60e:	88 2f       	mov	r24, r24
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	8f 70       	andi	r24, 0x0F	; 15
     614:	90 70       	andi	r25, 0x00	; 0
     616:	28 17       	cp	r18, r24
     618:	39 07       	cpc	r19, r25
     61a:	24 f3       	brlt	.-56     	; 0x5e4 <can_get_data+0x14>
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
     61c:	0f 90       	pop	r0
     61e:	0f 90       	pop	r0
     620:	0f 90       	pop	r0
     622:	cf 91       	pop	r28
     624:	df 91       	pop	r29
     626:	08 95       	ret

00000628 <can_auto_baudrate>:
//! @return Baudrate Status
//!         ==0: research of bit timing configuration failed
//!         ==1: baudrate performed
//------------------------------------------------------------------------------
U8 can_auto_baudrate (U8 mode)
{
     628:	df 93       	push	r29
     62a:	cf 93       	push	r28
     62c:	cd b7       	in	r28, 0x3d	; 61
     62e:	de b7       	in	r29, 0x3e	; 62
     630:	68 97       	sbiw	r28, 0x18	; 24
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	f8 94       	cli
     636:	de bf       	out	0x3e, r29	; 62
     638:	0f be       	out	0x3f, r0	; 63
     63a:	cd bf       	out	0x3d, r28	; 61
     63c:	8a 8b       	std	Y+18, r24	; 0x12
    U8  u8_temp0;                               //! Temporary variable
    U8  brp, prs, ntq, phs1, phs2;              //! Bit timing segment variables
    U8  phs1_inc;                               //! Computing needed
    U8  bt_not_found, wait_for_rx, evaluate;    //! Keys for "while()" loops
    U8  try_conf;                               //! Key for configurate CAN
    U8  ovrtim_flag=0;                          //! Timer overflow count
     63e:	1e 82       	std	Y+6, r1	; 0x06
    U16 conf_index;                             //! Count of bit timing configuration tried
    U8  bt_performed;                           //! Return flag

    //! --- Default setting
    phs1_inc = evaluate = 0;
     640:	18 86       	std	Y+8, r1	; 0x08
     642:	88 85       	ldd	r24, Y+8	; 0x08
     644:	8b 87       	std	Y+11, r24	; 0x0b
    bt_performed = 0;
     646:	1b 82       	std	Y+3, r1	; 0x03
    conf_index = 0;
     648:	1d 82       	std	Y+5, r1	; 0x05
     64a:	1c 82       	std	Y+4, r1	; 0x04
    bt_not_found = 1;
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	8a 87       	std	Y+10, r24	; 0x0a

    //! --- Init segment variables with MIN values if mode=0
    //!     or init segment variables with CANBTx if mode=1
    if (mode==0)
     650:	8a 89       	ldd	r24, Y+18	; 0x12
     652:	88 23       	and	r24, r24
     654:	a9 f4       	brne	.+42     	; 0x680 <can_auto_baudrate+0x58>
    {
        brp  = BRP_MIN;
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	88 8b       	std	Y+16, r24	; 0x10
        ntq  = NTQ_MIN;
     65a:	88 e0       	ldi	r24, 0x08	; 8
     65c:	8e 87       	std	Y+14, r24	; 0x0e
        phs1 = PHS1_MIN;
     65e:	82 e0       	ldi	r24, 0x02	; 2
     660:	8d 87       	std	Y+13, r24	; 0x0d
        phs2 = PHS2_MIN;
     662:	82 e0       	ldi	r24, 0x02	; 2
     664:	8c 87       	std	Y+12, r24	; 0x0c
        prs  = ntq - ( phs1 + phs2 + 1 );
     666:	9d 85       	ldd	r25, Y+13	; 0x0d
     668:	8c 85       	ldd	r24, Y+12	; 0x0c
     66a:	89 0f       	add	r24, r25
     66c:	98 2f       	mov	r25, r24
     66e:	90 95       	com	r25
     670:	8e 85       	ldd	r24, Y+14	; 0x0e
     672:	89 0f       	add	r24, r25
     674:	8f 87       	std	Y+15, r24	; 0x0f
        try_conf = 1;       //! Try this configuration
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	8f 83       	std	Y+7, r24	; 0x07
        wait_for_rx = 1;    //! Enable "while (wait_for_rx ..." loop
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	89 87       	std	Y+9, r24	; 0x09
     67e:	a5 c0       	rjmp	.+330    	; 0x7ca <can_auto_baudrate+0x1a2>
    }
    else //! mode = 1
    {
        brp  = Max ((((CANBT1 &  BRP_MSK) >> 1) +1) , BRP_MIN );
     680:	e2 ee       	ldi	r30, 0xE2	; 226
     682:	f0 e0       	ldi	r31, 0x00	; 0
     684:	80 81       	ld	r24, Z
     686:	88 2f       	mov	r24, r24
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	8e 77       	andi	r24, 0x7E	; 126
     68c:	90 70       	andi	r25, 0x00	; 0
     68e:	95 95       	asr	r25
     690:	87 95       	ror	r24
     692:	01 96       	adiw	r24, 0x01	; 1
     694:	82 30       	cpi	r24, 0x02	; 2
     696:	91 05       	cpc	r25, r1
     698:	6c f0       	brlt	.+26     	; 0x6b4 <can_auto_baudrate+0x8c>
     69a:	e2 ee       	ldi	r30, 0xE2	; 226
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	80 81       	ld	r24, Z
     6a0:	88 2f       	mov	r24, r24
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	8e 77       	andi	r24, 0x7E	; 126
     6a6:	90 70       	andi	r25, 0x00	; 0
     6a8:	95 95       	asr	r25
     6aa:	87 95       	ror	r24
     6ac:	98 2f       	mov	r25, r24
     6ae:	9f 5f       	subi	r25, 0xFF	; 255
     6b0:	98 8f       	std	Y+24, r25	; 0x18
     6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <can_auto_baudrate+0x90>
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	88 8f       	std	Y+24, r24	; 0x18
     6b8:	98 8d       	ldd	r25, Y+24	; 0x18
     6ba:	98 8b       	std	Y+16, r25	; 0x10
        prs  = Max ((((CANBT2 &  PRS_MSK) >> 1) +1) , PRS_MIN );
     6bc:	e3 ee       	ldi	r30, 0xE3	; 227
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	80 81       	ld	r24, Z
     6c2:	88 2f       	mov	r24, r24
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	8e 70       	andi	r24, 0x0E	; 14
     6c8:	90 70       	andi	r25, 0x00	; 0
     6ca:	95 95       	asr	r25
     6cc:	87 95       	ror	r24
     6ce:	01 96       	adiw	r24, 0x01	; 1
     6d0:	82 30       	cpi	r24, 0x02	; 2
     6d2:	91 05       	cpc	r25, r1
     6d4:	6c f0       	brlt	.+26     	; 0x6f0 <can_auto_baudrate+0xc8>
     6d6:	e3 ee       	ldi	r30, 0xE3	; 227
     6d8:	f0 e0       	ldi	r31, 0x00	; 0
     6da:	80 81       	ld	r24, Z
     6dc:	88 2f       	mov	r24, r24
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	8e 70       	andi	r24, 0x0E	; 14
     6e2:	90 70       	andi	r25, 0x00	; 0
     6e4:	95 95       	asr	r25
     6e6:	87 95       	ror	r24
     6e8:	98 2f       	mov	r25, r24
     6ea:	9f 5f       	subi	r25, 0xFF	; 255
     6ec:	9f 8b       	std	Y+23, r25	; 0x17
     6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <can_auto_baudrate+0xcc>
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	8f 8b       	std	Y+23, r24	; 0x17
     6f4:	9f 89       	ldd	r25, Y+23	; 0x17
     6f6:	9f 87       	std	Y+15, r25	; 0x0f
        phs1 = Max ((((CANBT3 & PHS1_MSK) >> 1) +1) , PHS1_MIN);
     6f8:	e4 ee       	ldi	r30, 0xE4	; 228
     6fa:	f0 e0       	ldi	r31, 0x00	; 0
     6fc:	80 81       	ld	r24, Z
     6fe:	88 2f       	mov	r24, r24
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	8e 70       	andi	r24, 0x0E	; 14
     704:	90 70       	andi	r25, 0x00	; 0
     706:	95 95       	asr	r25
     708:	87 95       	ror	r24
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	83 30       	cpi	r24, 0x03	; 3
     70e:	91 05       	cpc	r25, r1
     710:	6c f0       	brlt	.+26     	; 0x72c <can_auto_baudrate+0x104>
     712:	e4 ee       	ldi	r30, 0xE4	; 228
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	80 81       	ld	r24, Z
     718:	88 2f       	mov	r24, r24
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	8e 70       	andi	r24, 0x0E	; 14
     71e:	90 70       	andi	r25, 0x00	; 0
     720:	95 95       	asr	r25
     722:	87 95       	ror	r24
     724:	98 2f       	mov	r25, r24
     726:	9f 5f       	subi	r25, 0xFF	; 255
     728:	9e 8b       	std	Y+22, r25	; 0x16
     72a:	02 c0       	rjmp	.+4      	; 0x730 <can_auto_baudrate+0x108>
     72c:	82 e0       	ldi	r24, 0x02	; 2
     72e:	8e 8b       	std	Y+22, r24	; 0x16
     730:	9e 89       	ldd	r25, Y+22	; 0x16
     732:	9d 87       	std	Y+13, r25	; 0x0d
        phs2 = Max ((((CANBT3 & PHS2_MSK) >> 4) +1) , PHS2_MIN);
     734:	e4 ee       	ldi	r30, 0xE4	; 228
     736:	f0 e0       	ldi	r31, 0x00	; 0
     738:	80 81       	ld	r24, Z
     73a:	88 2f       	mov	r24, r24
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	80 77       	andi	r24, 0x70	; 112
     740:	90 70       	andi	r25, 0x00	; 0
     742:	95 95       	asr	r25
     744:	87 95       	ror	r24
     746:	95 95       	asr	r25
     748:	87 95       	ror	r24
     74a:	95 95       	asr	r25
     74c:	87 95       	ror	r24
     74e:	95 95       	asr	r25
     750:	87 95       	ror	r24
     752:	01 96       	adiw	r24, 0x01	; 1
     754:	83 30       	cpi	r24, 0x03	; 3
     756:	91 05       	cpc	r25, r1
     758:	9c f0       	brlt	.+38     	; 0x780 <can_auto_baudrate+0x158>
     75a:	e4 ee       	ldi	r30, 0xE4	; 228
     75c:	f0 e0       	ldi	r31, 0x00	; 0
     75e:	80 81       	ld	r24, Z
     760:	88 2f       	mov	r24, r24
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	80 77       	andi	r24, 0x70	; 112
     766:	90 70       	andi	r25, 0x00	; 0
     768:	95 95       	asr	r25
     76a:	87 95       	ror	r24
     76c:	95 95       	asr	r25
     76e:	87 95       	ror	r24
     770:	95 95       	asr	r25
     772:	87 95       	ror	r24
     774:	95 95       	asr	r25
     776:	87 95       	ror	r24
     778:	98 2f       	mov	r25, r24
     77a:	9f 5f       	subi	r25, 0xFF	; 255
     77c:	9d 8b       	std	Y+21, r25	; 0x15
     77e:	02 c0       	rjmp	.+4      	; 0x784 <can_auto_baudrate+0x15c>
     780:	82 e0       	ldi	r24, 0x02	; 2
     782:	8d 8b       	std	Y+21, r24	; 0x15
     784:	9d 89       	ldd	r25, Y+21	; 0x15
     786:	9c 87       	std	Y+12, r25	; 0x0c
        ntq  = Max ((prs + phs1 + phs2 + 1) , NTQ_MIN);
     788:	8f 85       	ldd	r24, Y+15	; 0x0f
     78a:	28 2f       	mov	r18, r24
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	8d 85       	ldd	r24, Y+13	; 0x0d
     790:	88 2f       	mov	r24, r24
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	28 0f       	add	r18, r24
     796:	39 1f       	adc	r19, r25
     798:	8c 85       	ldd	r24, Y+12	; 0x0c
     79a:	88 2f       	mov	r24, r24
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	82 0f       	add	r24, r18
     7a0:	93 1f       	adc	r25, r19
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	9c 8b       	std	Y+20, r25	; 0x14
     7a6:	8b 8b       	std	Y+19, r24	; 0x13
     7a8:	8b 89       	ldd	r24, Y+19	; 0x13
     7aa:	9c 89       	ldd	r25, Y+20	; 0x14
     7ac:	88 30       	cpi	r24, 0x08	; 8
     7ae:	91 05       	cpc	r25, r1
     7b0:	24 f4       	brge	.+8      	; 0x7ba <can_auto_baudrate+0x192>
     7b2:	88 e0       	ldi	r24, 0x08	; 8
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	9c 8b       	std	Y+20, r25	; 0x14
     7b8:	8b 8b       	std	Y+19, r24	; 0x13
     7ba:	9b 89       	ldd	r25, Y+19	; 0x13
     7bc:	9e 87       	std	Y+14, r25	; 0x0e
        phs1_inc = evaluate = 1;   //! To enter in "while (evaluate ..." loop
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	88 87       	std	Y+8, r24	; 0x08
     7c2:	88 85       	ldd	r24, Y+8	; 0x08
     7c4:	8b 87       	std	Y+11, r24	; 0x0b
        try_conf = 0;       //! Look for the next configuration
     7c6:	1f 82       	std	Y+7, r1	; 0x07
        wait_for_rx = 0;    //! Skip "while (wait_for_rx ..." loop
     7c8:	19 86       	std	Y+9, r1	; 0x09
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
     7ca:	19 8a       	std	Y+17, r1	; 0x11
     7cc:	1b c0       	rjmp	.+54     	; 0x804 <can_auto_baudrate+0x1dc>
    {
        Can_set_mob(u8_temp0);  //! Page index
     7ce:	ed ee       	ldi	r30, 0xED	; 237
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	89 89       	ldd	r24, Y+17	; 0x11
     7d4:	82 95       	swap	r24
     7d6:	80 7f       	andi	r24, 0xF0	; 240
     7d8:	80 83       	st	Z, r24
        Can_clear_mob();        //! All MOb Registers = 0x00
     7da:	8e ee       	ldi	r24, 0xEE	; 238
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	9a 83       	std	Y+2, r25	; 0x02
     7e0:	89 83       	std	Y+1, r24	; 0x01
     7e2:	08 c0       	rjmp	.+16     	; 0x7f4 <can_auto_baudrate+0x1cc>
     7e4:	e9 81       	ldd	r30, Y+1	; 0x01
     7e6:	fa 81       	ldd	r31, Y+2	; 0x02
     7e8:	10 82       	st	Z, r1
     7ea:	89 81       	ldd	r24, Y+1	; 0x01
     7ec:	9a 81       	ldd	r25, Y+2	; 0x02
     7ee:	01 96       	adiw	r24, 0x01	; 1
     7f0:	9a 83       	std	Y+2, r25	; 0x02
     7f2:	89 83       	std	Y+1, r24	; 0x01
     7f4:	89 81       	ldd	r24, Y+1	; 0x01
     7f6:	9a 81       	ldd	r25, Y+2	; 0x02
     7f8:	88 3f       	cpi	r24, 0xF8	; 248
     7fa:	91 05       	cpc	r25, r1
     7fc:	98 f3       	brcs	.-26     	; 0x7e4 <can_auto_baudrate+0x1bc>
        try_conf = 0;       //! Look for the next configuration
        wait_for_rx = 0;    //! Skip "while (wait_for_rx ..." loop
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
     7fe:	89 89       	ldd	r24, Y+17	; 0x11
     800:	8f 5f       	subi	r24, 0xFF	; 255
     802:	89 8b       	std	Y+17, r24	; 0x11
     804:	89 89       	ldd	r24, Y+17	; 0x11
     806:	8f 30       	cpi	r24, 0x0F	; 15
     808:	10 f3       	brcs	.-60     	; 0x7ce <can_auto_baudrate+0x1a6>
     80a:	61 c1       	rjmp	.+706    	; 0xace <can_auto_baudrate+0x4a6>
        Can_clear_mob();        //! All MOb Registers = 0x00
    }

    while (bt_not_found == 1)
    {
        if (try_conf == 1)
     80c:	8f 81       	ldd	r24, Y+7	; 0x07
     80e:	81 30       	cpi	r24, 0x01	; 1
     810:	09 f0       	breq	.+2      	; 0x814 <can_auto_baudrate+0x1ec>
     812:	c2 c0       	rjmp	.+388    	; 0x998 <can_auto_baudrate+0x370>
        {
            Can_reset();
     814:	e8 ed       	ldi	r30, 0xD8	; 216
     816:	f0 e0       	ldi	r31, 0x00	; 0
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	80 83       	st	Z, r24
            conf_index++;
     81c:	8c 81       	ldd	r24, Y+4	; 0x04
     81e:	9d 81       	ldd	r25, Y+5	; 0x05
     820:	01 96       	adiw	r24, 0x01	; 1
     822:	9d 83       	std	Y+5, r25	; 0x05
     824:	8c 83       	std	Y+4, r24	; 0x04
            ovrtim_flag=0;
     826:	1e 82       	std	Y+6, r1	; 0x06

            //! --- CANBTx registers update (sjw = phs2/2, 3 sample points)
            CANBT1 = ((brp-1) << BRP);
     828:	e2 ee       	ldi	r30, 0xE2	; 226
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	88 89       	ldd	r24, Y+16	; 0x10
     82e:	81 50       	subi	r24, 0x01	; 1
     830:	88 0f       	add	r24, r24
     832:	80 83       	st	Z, r24
            CANBT2 = (((phs2 >> 1)-1) << SJW) |((prs-1) << PRS);
     834:	e3 ee       	ldi	r30, 0xE3	; 227
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	8c 85       	ldd	r24, Y+12	; 0x0c
     83a:	86 95       	lsr	r24
     83c:	88 2f       	mov	r24, r24
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	01 97       	sbiw	r24, 0x01	; 1
     842:	88 0f       	add	r24, r24
     844:	99 1f       	adc	r25, r25
     846:	82 95       	swap	r24
     848:	92 95       	swap	r25
     84a:	90 7f       	andi	r25, 0xF0	; 240
     84c:	98 27       	eor	r25, r24
     84e:	80 7f       	andi	r24, 0xF0	; 240
     850:	98 27       	eor	r25, r24
     852:	28 2f       	mov	r18, r24
     854:	8f 85       	ldd	r24, Y+15	; 0x0f
     856:	88 2f       	mov	r24, r24
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	01 97       	sbiw	r24, 0x01	; 1
     85c:	88 0f       	add	r24, r24
     85e:	99 1f       	adc	r25, r25
     860:	82 2b       	or	r24, r18
     862:	80 83       	st	Z, r24
            CANBT3 = (((phs2-1) << PHS2) | ((phs1-1) << PHS1) | (1<<SMP));
     864:	e4 ee       	ldi	r30, 0xE4	; 228
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	8c 85       	ldd	r24, Y+12	; 0x0c
     86a:	88 2f       	mov	r24, r24
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	01 97       	sbiw	r24, 0x01	; 1
     870:	82 95       	swap	r24
     872:	92 95       	swap	r25
     874:	90 7f       	andi	r25, 0xF0	; 240
     876:	98 27       	eor	r25, r24
     878:	80 7f       	andi	r24, 0xF0	; 240
     87a:	98 27       	eor	r25, r24
     87c:	28 2f       	mov	r18, r24
     87e:	8d 85       	ldd	r24, Y+13	; 0x0d
     880:	88 2f       	mov	r24, r24
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	01 97       	sbiw	r24, 0x01	; 1
     886:	88 0f       	add	r24, r24
     888:	99 1f       	adc	r25, r25
     88a:	82 2b       	or	r24, r18
     88c:	81 60       	ori	r24, 0x01	; 1
     88e:	80 83       	st	Z, r24

            //! --- Set CAN-Timer - Used for time-out
            //!     There are 641 (0x281) possible evaluations. The first one provides the faster
            //!         the faster bit timing, the last one gives the slower. It is necessary to
            //!         modulate the time-out versus bit timing (0x281>>3=0x50, matching an U8).
            CANTCON = (U8)(conf_index >> 3);
     890:	e5 ee       	ldi	r30, 0xE5	; 229
     892:	f0 e0       	ldi	r31, 0x00	; 0
     894:	8c 81       	ldd	r24, Y+4	; 0x04
     896:	9d 81       	ldd	r25, Y+5	; 0x05
     898:	96 95       	lsr	r25
     89a:	87 95       	ror	r24
     89c:	96 95       	lsr	r25
     89e:	87 95       	ror	r24
     8a0:	96 95       	lsr	r25
     8a2:	87 95       	ror	r24
     8a4:	80 83       	st	Z, r24

            //! --- MOb configuration
            Can_set_mob(MOB_0);                 //! Use MOb-0
     8a6:	ed ee       	ldi	r30, 0xED	; 237
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	10 82       	st	Z, r1
            CANSTMOB = 0;                       //! Reset MOb status (undone by "Can_reset()")
     8ac:	ee ee       	ldi	r30, 0xEE	; 238
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	10 82       	st	Z, r1
            CANCDMOB = (MOB_Rx_ENA  << CONMOB); //! MOb 0 in receive mode
     8b2:	ef ee       	ldi	r30, 0xEF	; 239
     8b4:	f0 e0       	ldi	r31, 0x00	; 0
     8b6:	80 e8       	ldi	r24, 0x80	; 128
     8b8:	80 83       	st	Z, r24

            //! CAN controller configuration
            CANGCON = (1<<LISTEN) | (1<<ENASTB);//! Enable CAN controller in "listen" mode
     8ba:	e8 ed       	ldi	r30, 0xD8	; 216
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	8a e0       	ldi	r24, 0x0A	; 10
     8c0:	80 83       	st	Z, r24
            while ((CANGSTA & (1<<ENFG)) == 0); //! Wait for Enable OK
     8c2:	e9 ed       	ldi	r30, 0xD9	; 217
     8c4:	f0 e0       	ldi	r31, 0x00	; 0
     8c6:	80 81       	ld	r24, Z
     8c8:	88 2f       	mov	r24, r24
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	84 70       	andi	r24, 0x04	; 4
     8ce:	90 70       	andi	r25, 0x00	; 0
     8d0:	00 97       	sbiw	r24, 0x00	; 0
     8d2:	b9 f3       	breq	.-18     	; 0x8c2 <can_auto_baudrate+0x29a>
            CANGIT = 0xFF;                      //! Reset General errors and OVRTIM flag
     8d4:	ea ed       	ldi	r30, 0xDA	; 218
     8d6:	f0 e0       	ldi	r31, 0x00	; 0
     8d8:	8f ef       	ldi	r24, 0xFF	; 255
     8da:	80 83       	st	Z, r24
     8dc:	5d c0       	rjmp	.+186    	; 0x998 <can_auto_baudrate+0x370>
        //!     Try to perform a CAN message reception in "LISTEN" mode without error and
        //!     before a time_out done by CAN-Timer.
        //!     Else gives the hand to "EVALUATE LOOP" to have a new set of bit timing.
        while (wait_for_rx == 1)
        {
            u8_temp0 = CANSTMOB;
     8de:	ee ee       	ldi	r30, 0xEE	; 238
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	80 81       	ld	r24, Z
     8e4:	89 8b       	std	Y+17, r24	; 0x11
            //! --- RxOK received ?
            if ((u8_temp0 & (1<<RXOK)) != 0)
     8e6:	89 89       	ldd	r24, Y+17	; 0x11
     8e8:	88 2f       	mov	r24, r24
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	80 72       	andi	r24, 0x20	; 32
     8ee:	90 70       	andi	r25, 0x00	; 0
     8f0:	00 97       	sbiw	r24, 0x00	; 0
     8f2:	c9 f0       	breq	.+50     	; 0x926 <can_auto_baudrate+0x2fe>
            {   //! --- It is the successful output of "can_auto_baudrate" function
                wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
     8f4:	19 86       	std	Y+9, r1	; 0x09
                evaluate = 0;       //! Will skip "while (evaluate ..." loop
     8f6:	18 86       	std	Y+8, r1	; 0x08
                bt_not_found = 0;   //! Out of "while (bt_not_found ..." loop
     8f8:	1a 86       	std	Y+10, r1	; 0x0a
                bt_performed = 1;   //! Return flag = TRUE
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	8b 83       	std	Y+3, r24	; 0x03
                DISABLE_MOB;        //! Disable MOb-0
     8fe:	af ee       	ldi	r26, 0xEF	; 239
     900:	b0 e0       	ldi	r27, 0x00	; 0
     902:	ef ee       	ldi	r30, 0xEF	; 239
     904:	f0 e0       	ldi	r31, 0x00	; 0
     906:	80 81       	ld	r24, Z
     908:	8f 73       	andi	r24, 0x3F	; 63
     90a:	8c 93       	st	X, r24
                CANGCON = 0x00;     //! Disable CAN controller & reset "listen" mode
     90c:	e8 ed       	ldi	r30, 0xD8	; 216
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	10 82       	st	Z, r1
                while ((CANGSTA & (1<<ENFG)) != 0); //! Wait for Disable OK
     912:	e9 ed       	ldi	r30, 0xD9	; 217
     914:	f0 e0       	ldi	r31, 0x00	; 0
     916:	80 81       	ld	r24, Z
     918:	88 2f       	mov	r24, r24
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	84 70       	andi	r24, 0x04	; 4
     91e:	90 70       	andi	r25, 0x00	; 0
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	b9 f7       	brne	.-18     	; 0x912 <can_auto_baudrate+0x2ea>
     924:	39 c0       	rjmp	.+114    	; 0x998 <can_auto_baudrate+0x370>
            }
             //! --- Else stop if any errors
             else
            {
                //! --- MOb error ?
                if ((u8_temp0 & ((1<<BERR)|(1<<SERR)|(1<<CERR)|(1<<FERR)|(1<<AERR))) !=0)
     926:	89 89       	ldd	r24, Y+17	; 0x11
     928:	88 2f       	mov	r24, r24
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	8f 71       	andi	r24, 0x1F	; 31
     92e:	90 70       	andi	r25, 0x00	; 0
     930:	00 97       	sbiw	r24, 0x00	; 0
     932:	19 f0       	breq	.+6      	; 0x93a <can_auto_baudrate+0x312>
                {
                    evaluate = 1;       //! Will enter in "while (evaluate ..." loop
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	88 87       	std	Y+8, r24	; 0x08
                    wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
     938:	19 86       	std	Y+9, r1	; 0x09
                }

                u8_temp0 = CANGIT;
     93a:	ea ed       	ldi	r30, 0xDA	; 218
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	80 81       	ld	r24, Z
     940:	89 8b       	std	Y+17, r24	; 0x11

                //! --- Time_out reached ?
                if ((u8_temp0 & (1<<OVRTIM)) !=0 )
     942:	89 89       	ldd	r24, Y+17	; 0x11
     944:	88 2f       	mov	r24, r24
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	80 72       	andi	r24, 0x20	; 32
     94a:	90 70       	andi	r25, 0x00	; 0
     94c:	00 97       	sbiw	r24, 0x00	; 0
     94e:	c1 f0       	breq	.+48     	; 0x980 <can_auto_baudrate+0x358>
                {
                    if (ovrtim_flag==0)
     950:	8e 81       	ldd	r24, Y+6	; 0x06
     952:	88 23       	and	r24, r24
     954:	59 f4       	brne	.+22     	; 0x96c <can_auto_baudrate+0x344>
                    {
                        //! --- First Time_out
                        CANGIT |= (1<<OVRTIM);  // Reset OVRTIM
     956:	aa ed       	ldi	r26, 0xDA	; 218
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	ea ed       	ldi	r30, 0xDA	; 218
     95c:	f0 e0       	ldi	r31, 0x00	; 0
     95e:	80 81       	ld	r24, Z
     960:	80 62       	ori	r24, 0x20	; 32
     962:	8c 93       	st	X, r24
                        ovrtim_flag++;
     964:	8e 81       	ldd	r24, Y+6	; 0x06
     966:	8f 5f       	subi	r24, 0xFF	; 255
     968:	8e 83       	std	Y+6, r24	; 0x06
     96a:	0a c0       	rjmp	.+20     	; 0x980 <can_auto_baudrate+0x358>
                    }
                    else
                    {
                        //! --- Second Time_out
                        CANGIT |= (1<<OVRTIM);  // Reset OVRTIM
     96c:	aa ed       	ldi	r26, 0xDA	; 218
     96e:	b0 e0       	ldi	r27, 0x00	; 0
     970:	ea ed       	ldi	r30, 0xDA	; 218
     972:	f0 e0       	ldi	r31, 0x00	; 0
     974:	80 81       	ld	r24, Z
     976:	80 62       	ori	r24, 0x20	; 32
     978:	8c 93       	st	X, r24
                        evaluate = 1;           //! Will enter in "while (evaluate ..." loop
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	88 87       	std	Y+8, r24	; 0x08
                        wait_for_rx = 0;        //! Out of "while (wait_for_rx ..." loop
     97e:	19 86       	std	Y+9, r1	; 0x09
                    }
                }

                //! --- General error ?
                if ((u8_temp0 & ((1<<SERG)|(1<<CERG)|(1<<FERG)|(1<<AERG))) !=0)
     980:	89 89       	ldd	r24, Y+17	; 0x11
     982:	88 2f       	mov	r24, r24
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	8f 70       	andi	r24, 0x0F	; 15
     988:	90 70       	andi	r25, 0x00	; 0
     98a:	00 97       	sbiw	r24, 0x00	; 0
     98c:	29 f0       	breq	.+10     	; 0x998 <can_auto_baudrate+0x370>
                {
                    evaluate = 1;       //! Will enter in "while (evaluate ..." loop
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	88 87       	std	Y+8, r24	; 0x08
                    wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
     992:	19 86       	std	Y+9, r1	; 0x09
                    try_conf = 1;       //! Try this configuration
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	8f 83       	std	Y+7, r24	; 0x07
        //! --- WAIT_FOR_RX LOOP:
        //!     ================
        //!     Try to perform a CAN message reception in "LISTEN" mode without error and
        //!     before a time_out done by CAN-Timer.
        //!     Else gives the hand to "EVALUATE LOOP" to have a new set of bit timing.
        while (wait_for_rx == 1)
     998:	89 85       	ldd	r24, Y+9	; 0x09
     99a:	81 30       	cpi	r24, 0x01	; 1
     99c:	09 f4       	brne	.+2      	; 0x9a0 <can_auto_baudrate+0x378>
     99e:	9f cf       	rjmp	.-194    	; 0x8de <can_auto_baudrate+0x2b6>
     9a0:	92 c0       	rjmp	.+292    	; 0xac6 <can_auto_baudrate+0x49e>
        //!     limit and after it is the Prescaler. During the computing high (80%)
        //!     and low (75%) limits of sampling point location are tested. SJW and
        //!     the number of sampling points are not calculated in this loop.
        while (evaluate == 1)
        {
            if (phs1_inc != 0) phs1++;
     9a2:	8b 85       	ldd	r24, Y+11	; 0x0b
     9a4:	88 23       	and	r24, r24
     9a6:	19 f0       	breq	.+6      	; 0x9ae <can_auto_baudrate+0x386>
     9a8:	8d 85       	ldd	r24, Y+13	; 0x0d
     9aa:	8f 5f       	subi	r24, 0xFF	; 255
     9ac:	8d 87       	std	Y+13, r24	; 0x0d
            phs1_inc = 1;
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	8b 87       	std	Y+11, r24	; 0x0b

            // --- The following test takes into account the previous incrementation of phs1
            if ((phs1 > PHS1_MAX) && (phs2 >= PHS2_MAX))
     9b2:	8d 85       	ldd	r24, Y+13	; 0x0d
     9b4:	89 30       	cpi	r24, 0x09	; 9
     9b6:	78 f1       	brcs	.+94     	; 0xa16 <can_auto_baudrate+0x3ee>
     9b8:	8c 85       	ldd	r24, Y+12	; 0x0c
     9ba:	88 30       	cpi	r24, 0x08	; 8
     9bc:	60 f1       	brcs	.+88     	; 0xa16 <can_auto_baudrate+0x3ee>
            {
                phs1 = PHS1_MIN;
     9be:	82 e0       	ldi	r24, 0x02	; 2
     9c0:	8d 87       	std	Y+13, r24	; 0x0d
                phs2 = PHS2_MIN;
     9c2:	82 e0       	ldi	r24, 0x02	; 2
     9c4:	8c 87       	std	Y+12, r24	; 0x0c
                phs1_inc = 0;
     9c6:	1b 86       	std	Y+11, r1	; 0x0b
                if (ntq != NTQ_MAX) ntq++;
     9c8:	8e 85       	ldd	r24, Y+14	; 0x0e
     9ca:	89 31       	cpi	r24, 0x19	; 25
     9cc:	21 f0       	breq	.+8      	; 0x9d6 <can_auto_baudrate+0x3ae>
     9ce:	8e 85       	ldd	r24, Y+14	; 0x0e
     9d0:	8f 5f       	subi	r24, 0xFF	; 255
     9d2:	8e 87       	std	Y+14, r24	; 0x0e
     9d4:	78 c0       	rjmp	.+240    	; 0xac6 <can_auto_baudrate+0x49e>
                else
                {
                    ntq = NTQ_MIN;
     9d6:	88 e0       	ldi	r24, 0x08	; 8
     9d8:	8e 87       	std	Y+14, r24	; 0x0e
                    if (brp != BRP_MAX) brp++;
     9da:	88 89       	ldd	r24, Y+16	; 0x10
     9dc:	80 34       	cpi	r24, 0x40	; 64
     9de:	21 f0       	breq	.+8      	; 0x9e8 <can_auto_baudrate+0x3c0>
     9e0:	88 89       	ldd	r24, Y+16	; 0x10
     9e2:	8f 5f       	subi	r24, 0xFF	; 255
     9e4:	88 8b       	std	Y+16, r24	; 0x10
     9e6:	6f c0       	rjmp	.+222    	; 0xac6 <can_auto_baudrate+0x49e>
                    else
                    {
                        //! --- It is the failing of "can_auto_baudrate" function
                        evaluate = 0;       //! Out of "while (evaluate ..." loop
     9e8:	18 86       	std	Y+8, r1	; 0x08
                        bt_performed = 0;   //! Return flag = FALSE
     9ea:	1b 82       	std	Y+3, r1	; 0x03
                        bt_not_found = 0;   //! Out of "while (bt_not_found ..." loop
     9ec:	1a 86       	std	Y+10, r1	; 0x0a
                        DISABLE_MOB;        //! Disable MOb-0
     9ee:	af ee       	ldi	r26, 0xEF	; 239
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	ef ee       	ldi	r30, 0xEF	; 239
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	80 81       	ld	r24, Z
     9f8:	8f 73       	andi	r24, 0x3F	; 63
     9fa:	8c 93       	st	X, r24
                        CANGCON = 0x00;     //! Disable CAN controller & reset "listen" mode
     9fc:	e8 ed       	ldi	r30, 0xD8	; 216
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	10 82       	st	Z, r1
                        while ((CANGSTA & (1<<ENFG)) != 0); //! Wait for Disable OK
     a02:	e9 ed       	ldi	r30, 0xD9	; 217
     a04:	f0 e0       	ldi	r31, 0x00	; 0
     a06:	80 81       	ld	r24, Z
     a08:	88 2f       	mov	r24, r24
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	84 70       	andi	r24, 0x04	; 4
     a0e:	90 70       	andi	r25, 0x00	; 0
     a10:	00 97       	sbiw	r24, 0x00	; 0
     a12:	b9 f7       	brne	.-18     	; 0xa02 <can_auto_baudrate+0x3da>
     a14:	58 c0       	rjmp	.+176    	; 0xac6 <can_auto_baudrate+0x49e>
                }
            }
            else    // if (phs1 > PHS1_MAX ...
            {
                //! --- If psh1 > 5 then phs1 =phs2 or =phs2+1, else phs1=phs2
                if (phs1>5)
     a16:	8d 85       	ldd	r24, Y+13	; 0x0d
     a18:	86 30       	cpi	r24, 0x06	; 6
     a1a:	80 f0       	brcs	.+32     	; 0xa3c <can_auto_baudrate+0x414>
                {
                    if (phs1>(phs2+1)) phs1=(++phs2);
     a1c:	8d 85       	ldd	r24, Y+13	; 0x0d
     a1e:	28 2f       	mov	r18, r24
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	8c 85       	ldd	r24, Y+12	; 0x0c
     a24:	88 2f       	mov	r24, r24
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	01 96       	adiw	r24, 0x01	; 1
     a2a:	82 17       	cp	r24, r18
     a2c:	93 07       	cpc	r25, r19
     a2e:	44 f4       	brge	.+16     	; 0xa40 <can_auto_baudrate+0x418>
     a30:	8c 85       	ldd	r24, Y+12	; 0x0c
     a32:	8f 5f       	subi	r24, 0xFF	; 255
     a34:	8c 87       	std	Y+12, r24	; 0x0c
     a36:	8c 85       	ldd	r24, Y+12	; 0x0c
     a38:	8d 87       	std	Y+13, r24	; 0x0d
     a3a:	02 c0       	rjmp	.+4      	; 0xa40 <can_auto_baudrate+0x418>
                }
                else
                {
                phs2=phs1;
     a3c:	8d 85       	ldd	r24, Y+13	; 0x0d
     a3e:	8c 87       	std	Y+12, r24	; 0x0c
                }
                prs = ntq - ( phs1 + phs2 + 1 );
     a40:	9d 85       	ldd	r25, Y+13	; 0x0d
     a42:	8c 85       	ldd	r24, Y+12	; 0x0c
     a44:	89 0f       	add	r24, r25
     a46:	98 2f       	mov	r25, r24
     a48:	90 95       	com	r25
     a4a:	8e 85       	ldd	r24, Y+14	; 0x0e
     a4c:	89 0f       	add	r24, r25
     a4e:	8f 87       	std	Y+15, r24	; 0x0f

                //! --- Test PRS limits
                if ((prs <= PRS_MAX) && (prs >= PRS_MIN))
     a50:	8f 85       	ldd	r24, Y+15	; 0x0f
     a52:	89 30       	cpi	r24, 0x09	; 9
     a54:	c0 f5       	brcc	.+112    	; 0xac6 <can_auto_baudrate+0x49e>
     a56:	8f 85       	ldd	r24, Y+15	; 0x0f
     a58:	88 23       	and	r24, r24
     a5a:	a9 f1       	breq	.+106    	; 0xac6 <can_auto_baudrate+0x49e>
                {
                    //! --- Values  accepted if  80% >= sampling point >= 75%
                    if (((phs2<<2) >= (1+prs+phs1)) && ((phs2+phs2+phs2) <= (1+prs+phs1)))
     a5c:	8c 85       	ldd	r24, Y+12	; 0x0c
     a5e:	88 2f       	mov	r24, r24
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	ac 01       	movw	r20, r24
     a64:	44 0f       	add	r20, r20
     a66:	55 1f       	adc	r21, r21
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	8f 85       	ldd	r24, Y+15	; 0x0f
     a6e:	88 2f       	mov	r24, r24
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	9c 01       	movw	r18, r24
     a74:	2f 5f       	subi	r18, 0xFF	; 255
     a76:	3f 4f       	sbci	r19, 0xFF	; 255
     a78:	8d 85       	ldd	r24, Y+13	; 0x0d
     a7a:	88 2f       	mov	r24, r24
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	82 0f       	add	r24, r18
     a80:	93 1f       	adc	r25, r19
     a82:	48 17       	cp	r20, r24
     a84:	59 07       	cpc	r21, r25
     a86:	fc f0       	brlt	.+62     	; 0xac6 <can_auto_baudrate+0x49e>
     a88:	8c 85       	ldd	r24, Y+12	; 0x0c
     a8a:	28 2f       	mov	r18, r24
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	8c 85       	ldd	r24, Y+12	; 0x0c
     a90:	88 2f       	mov	r24, r24
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	28 0f       	add	r18, r24
     a96:	39 1f       	adc	r19, r25
     a98:	8c 85       	ldd	r24, Y+12	; 0x0c
     a9a:	88 2f       	mov	r24, r24
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	a9 01       	movw	r20, r18
     aa0:	48 0f       	add	r20, r24
     aa2:	59 1f       	adc	r21, r25
     aa4:	8f 85       	ldd	r24, Y+15	; 0x0f
     aa6:	88 2f       	mov	r24, r24
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	9c 01       	movw	r18, r24
     aac:	2f 5f       	subi	r18, 0xFF	; 255
     aae:	3f 4f       	sbci	r19, 0xFF	; 255
     ab0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ab2:	88 2f       	mov	r24, r24
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	82 0f       	add	r24, r18
     ab8:	93 1f       	adc	r25, r19
     aba:	84 17       	cp	r24, r20
     abc:	95 07       	cpc	r25, r21
     abe:	1c f0       	brlt	.+6      	; 0xac6 <can_auto_baudrate+0x49e>
                    {
                        evaluate = 0;     //! Out of "while (evaluate ..." loop &
     ac0:	18 86       	std	Y+8, r1	; 0x08
                        wait_for_rx = 1;  //!    new "while (bt_not_found ..." loop
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	89 87       	std	Y+9, r24	; 0x09
        //!     then Phase2=Phase1 and if Phase1>5, Phase1 can be equal to Phase2 or
        //!     Phase2+1. After this, the number of TQ is increased up to its high
        //!     limit and after it is the Prescaler. During the computing high (80%)
        //!     and low (75%) limits of sampling point location are tested. SJW and
        //!     the number of sampling points are not calculated in this loop.
        while (evaluate == 1)
     ac6:	88 85       	ldd	r24, Y+8	; 0x08
     ac8:	81 30       	cpi	r24, 0x01	; 1
     aca:	09 f4       	brne	.+2      	; 0xace <can_auto_baudrate+0x4a6>
     acc:	6a cf       	rjmp	.-300    	; 0x9a2 <can_auto_baudrate+0x37a>
    {
        Can_set_mob(u8_temp0);  //! Page index
        Can_clear_mob();        //! All MOb Registers = 0x00
    }

    while (bt_not_found == 1)
     ace:	8a 85       	ldd	r24, Y+10	; 0x0a
     ad0:	81 30       	cpi	r24, 0x01	; 1
     ad2:	09 f4       	brne	.+2      	; 0xad6 <can_auto_baudrate+0x4ae>
     ad4:	9b ce       	rjmp	.-714    	; 0x80c <can_auto_baudrate+0x1e4>
                }
            }
        } // while (evaluate ...
    } // while (bt_not_found ...

    return (bt_performed);
     ad6:	8b 81       	ldd	r24, Y+3	; 0x03
}
     ad8:	68 96       	adiw	r28, 0x18	; 24
     ada:	0f b6       	in	r0, 0x3f	; 63
     adc:	f8 94       	cli
     ade:	de bf       	out	0x3e, r29	; 62
     ae0:	0f be       	out	0x3f, r0	; 63
     ae2:	cd bf       	out	0x3d, r28	; 61
     ae4:	cf 91       	pop	r28
     ae6:	df 91       	pop	r29
     ae8:	08 95       	ret

00000aea <can_fixed_baudrate>:
//!
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
U8 can_fixed_baudrate(U8 mode)
{
     aea:	df 93       	push	r29
     aec:	cf 93       	push	r28
     aee:	0f 92       	push	r0
     af0:	cd b7       	in	r28, 0x3d	; 61
     af2:	de b7       	in	r29, 0x3e	; 62
     af4:	89 83       	std	Y+1, r24	; 0x01
    Can_reset();
     af6:	e8 ed       	ldi	r30, 0xD8	; 216
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	80 83       	st	Z, r24
    Can_conf_bt();
     afe:	e2 ee       	ldi	r30, 0xE2	; 226
     b00:	f0 e0       	ldi	r31, 0x00	; 0
     b02:	82 e0       	ldi	r24, 0x02	; 2
     b04:	80 83       	st	Z, r24
     b06:	e3 ee       	ldi	r30, 0xE3	; 227
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	8c e0       	ldi	r24, 0x0C	; 12
     b0c:	80 83       	st	Z, r24
     b0e:	e4 ee       	ldi	r30, 0xE4	; 228
     b10:	f0 e0       	ldi	r31, 0x00	; 0
     b12:	87 e3       	ldi	r24, 0x37	; 55
     b14:	80 83       	st	Z, r24
    return 1;
     b16:	81 e0       	ldi	r24, 0x01	; 1
}
     b18:	0f 90       	pop	r0
     b1a:	cf 91       	pop	r28
     b1c:	df 91       	pop	r29
     b1e:	08 95       	ret

00000b20 <can_init>:
//!         ==0: research of bit timing configuration failed
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
U8 can_init(U8 mode)
{
     b20:	df 93       	push	r29
     b22:	cf 93       	push	r28
     b24:	00 d0       	rcall	.+0      	; 0xb26 <can_init+0x6>
     b26:	cd b7       	in	r28, 0x3d	; 61
     b28:	de b7       	in	r29, 0x3e	; 62
     b2a:	89 83       	std	Y+1, r24	; 0x01
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     b2c:	89 81       	ldd	r24, Y+1	; 0x01
     b2e:	0e 94 75 05 	call	0xaea	; 0xaea <can_fixed_baudrate>
     b32:	88 23       	and	r24, r24
     b34:	11 f4       	brne	.+4      	; 0xb3a <can_init+0x1a>
     b36:	1a 82       	std	Y+2, r1	; 0x02
     b38:	0b c0       	rjmp	.+22     	; 0xb50 <can_init+0x30>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     b3a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <can_clear_all_mob>
    Can_enable();                               // c.f. macro in "can_drv.h" 
     b3e:	a8 ed       	ldi	r26, 0xD8	; 216
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	e8 ed       	ldi	r30, 0xD8	; 216
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	82 60       	ori	r24, 0x02	; 2
     b4a:	8c 93       	st	X, r24
    return (1);
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	8a 83       	std	Y+2, r24	; 0x02
     b50:	8a 81       	ldd	r24, Y+2	; 0x02
}
     b52:	0f 90       	pop	r0
     b54:	0f 90       	pop	r0
     b56:	cf 91       	pop	r28
     b58:	df 91       	pop	r29
     b5a:	08 95       	ret

00000b5c <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
U8 can_cmd(st_cmd_t* cmd)
{
     b5c:	df 93       	push	r29
     b5e:	cf 93       	push	r28
     b60:	cd b7       	in	r28, 0x3d	; 61
     b62:	de b7       	in	r29, 0x3e	; 62
     b64:	2d 97       	sbiw	r28, 0x0d	; 13
     b66:	0f b6       	in	r0, 0x3f	; 63
     b68:	f8 94       	cli
     b6a:	de bf       	out	0x3e, r29	; 62
     b6c:	0f be       	out	0x3f, r0	; 63
     b6e:	cd bf       	out	0x3d, r28	; 61
     b70:	9a 87       	std	Y+10, r25	; 0x0a
     b72:	89 87       	std	Y+9, r24	; 0x09
  U8 mob_handle, cpt;
  U32 u32_temp;
  
  if (cmd->cmd == CMD_ABORT)
     b74:	e9 85       	ldd	r30, Y+9	; 0x09
     b76:	fa 85       	ldd	r31, Y+10	; 0x0a
     b78:	81 81       	ldd	r24, Z+1	; 0x01
     b7a:	92 81       	ldd	r25, Z+2	; 0x02
     b7c:	8c 30       	cpi	r24, 0x0C	; 12
     b7e:	91 05       	cpc	r25, r1
     b80:	f9 f4       	brne	.+62     	; 0xbc0 <can_cmd+0x64>
  {
    if (cmd->status == MOB_PENDING)
     b82:	e9 85       	ldd	r30, Y+9	; 0x09
     b84:	fa 85       	ldd	r31, Y+10	; 0x0a
     b86:	82 85       	ldd	r24, Z+10	; 0x0a
     b88:	80 36       	cpi	r24, 0x60	; 96
     b8a:	a9 f4       	brne	.+42     	; 0xbb6 <can_cmd+0x5a>
    {
      // Rx or Tx not yet performed
      Can_set_mob(cmd->handle);
     b8c:	ad ee       	ldi	r26, 0xED	; 237
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	e9 85       	ldd	r30, Y+9	; 0x09
     b92:	fa 85       	ldd	r31, Y+10	; 0x0a
     b94:	80 81       	ld	r24, Z
     b96:	82 95       	swap	r24
     b98:	80 7f       	andi	r24, 0xF0	; 240
     b9a:	8c 93       	st	X, r24
      Can_mob_abort();
     b9c:	af ee       	ldi	r26, 0xEF	; 239
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	ef ee       	ldi	r30, 0xEF	; 239
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	8f 73       	andi	r24, 0x3F	; 63
     ba8:	8c 93       	st	X, r24
      Can_clear_status_mob();       // To be sure !
     baa:	ee ee       	ldi	r30, 0xEE	; 238
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	10 82       	st	Z, r1
      cmd->handle = 0;
     bb0:	e9 85       	ldd	r30, Y+9	; 0x09
     bb2:	fa 85       	ldd	r31, Y+10	; 0x0a
     bb4:	10 82       	st	Z, r1
    }
    cmd->status = STATUS_CLEARED; 
     bb6:	e9 85       	ldd	r30, Y+9	; 0x09
     bb8:	fa 85       	ldd	r31, Y+10	; 0x0a
     bba:	12 86       	std	Z+10, r1	; 0x0a
     bbc:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <__stack+0xcc1>
  }
  else
  {
    mob_handle = can_get_mob_free();
     bc0:	0e 94 7d 02 	call	0x4fa	; 0x4fa <can_get_mob_free>
     bc4:	8c 83       	std	Y+4, r24	; 0x04
    if (mob_handle!= NO_MOB)
     bc6:	8c 81       	ldd	r24, Y+4	; 0x04
     bc8:	8f 3f       	cpi	r24, 0xFF	; 255
     bca:	11 f4       	brne	.+4      	; 0xbd0 <can_cmd+0x74>
     bcc:	0c 94 d9 0e 	jmp	0x1db2	; 0x1db2 <__stack+0xcb3>
    {
      cmd->status = MOB_PENDING; 
     bd0:	e9 85       	ldd	r30, Y+9	; 0x09
     bd2:	fa 85       	ldd	r31, Y+10	; 0x0a
     bd4:	80 e6       	ldi	r24, 0x60	; 96
     bd6:	82 87       	std	Z+10, r24	; 0x0a
      cmd->handle = mob_handle;
     bd8:	e9 85       	ldd	r30, Y+9	; 0x09
     bda:	fa 85       	ldd	r31, Y+10	; 0x0a
     bdc:	8c 81       	ldd	r24, Y+4	; 0x04
     bde:	80 83       	st	Z, r24
      Can_set_mob(mob_handle);
     be0:	ed ee       	ldi	r30, 0xED	; 237
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	8c 81       	ldd	r24, Y+4	; 0x04
     be6:	82 95       	swap	r24
     be8:	80 7f       	andi	r24, 0xF0	; 240
     bea:	80 83       	st	Z, r24
      Can_clear_mob();
     bec:	8e ee       	ldi	r24, 0xEE	; 238
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	9a 83       	std	Y+2, r25	; 0x02
     bf2:	89 83       	std	Y+1, r24	; 0x01
     bf4:	08 c0       	rjmp	.+16     	; 0xc06 <can_cmd+0xaa>
     bf6:	e9 81       	ldd	r30, Y+1	; 0x01
     bf8:	fa 81       	ldd	r31, Y+2	; 0x02
     bfa:	10 82       	st	Z, r1
     bfc:	89 81       	ldd	r24, Y+1	; 0x01
     bfe:	9a 81       	ldd	r25, Y+2	; 0x02
     c00:	01 96       	adiw	r24, 0x01	; 1
     c02:	9a 83       	std	Y+2, r25	; 0x02
     c04:	89 83       	std	Y+1, r24	; 0x01
     c06:	89 81       	ldd	r24, Y+1	; 0x01
     c08:	9a 81       	ldd	r25, Y+2	; 0x02
     c0a:	88 3f       	cpi	r24, 0xF8	; 248
     c0c:	91 05       	cpc	r25, r1
     c0e:	98 f3       	brcs	.-26     	; 0xbf6 <can_cmd+0x9a>
          
      switch (cmd->cmd)
     c10:	e9 85       	ldd	r30, Y+9	; 0x09
     c12:	fa 85       	ldd	r31, Y+10	; 0x0a
     c14:	81 81       	ldd	r24, Z+1	; 0x01
     c16:	92 81       	ldd	r25, Z+2	; 0x02
     c18:	9d 87       	std	Y+13, r25	; 0x0d
     c1a:	8c 87       	std	Y+12, r24	; 0x0c
     c1c:	8c 85       	ldd	r24, Y+12	; 0x0c
     c1e:	9d 85       	ldd	r25, Y+13	; 0x0d
     c20:	86 30       	cpi	r24, 0x06	; 6
     c22:	91 05       	cpc	r25, r1
     c24:	09 f4       	brne	.+2      	; 0xc28 <can_cmd+0xcc>
     c26:	73 c3       	rjmp	.+1766   	; 0x130e <__stack+0x20f>
     c28:	8c 85       	ldd	r24, Y+12	; 0x0c
     c2a:	9d 85       	ldd	r25, Y+13	; 0x0d
     c2c:	87 30       	cpi	r24, 0x07	; 7
     c2e:	91 05       	cpc	r25, r1
     c30:	30 f5       	brcc	.+76     	; 0xc7e <can_cmd+0x122>
     c32:	8c 85       	ldd	r24, Y+12	; 0x0c
     c34:	9d 85       	ldd	r25, Y+13	; 0x0d
     c36:	83 30       	cpi	r24, 0x03	; 3
     c38:	91 05       	cpc	r25, r1
     c3a:	09 f4       	brne	.+2      	; 0xc3e <can_cmd+0xe2>
     c3c:	d3 c1       	rjmp	.+934    	; 0xfe4 <can_cmd+0x488>
     c3e:	8c 85       	ldd	r24, Y+12	; 0x0c
     c40:	9d 85       	ldd	r25, Y+13	; 0x0d
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	91 05       	cpc	r25, r1
     c46:	68 f4       	brcc	.+26     	; 0xc62 <can_cmd+0x106>
     c48:	8c 85       	ldd	r24, Y+12	; 0x0c
     c4a:	9d 85       	ldd	r25, Y+13	; 0x0d
     c4c:	81 30       	cpi	r24, 0x01	; 1
     c4e:	91 05       	cpc	r25, r1
     c50:	e9 f1       	breq	.+122    	; 0xccc <can_cmd+0x170>
     c52:	8c 85       	ldd	r24, Y+12	; 0x0c
     c54:	9d 85       	ldd	r25, Y+13	; 0x0d
     c56:	82 30       	cpi	r24, 0x02	; 2
     c58:	91 05       	cpc	r25, r1
     c5a:	09 f4       	brne	.+2      	; 0xc5e <can_cmd+0x102>
     c5c:	02 c1       	rjmp	.+516    	; 0xe62 <can_cmd+0x306>
     c5e:	0c 94 d5 0e 	jmp	0x1daa	; 0x1daa <__stack+0xcab>
     c62:	8c 85       	ldd	r24, Y+12	; 0x0c
     c64:	9d 85       	ldd	r25, Y+13	; 0x0d
     c66:	84 30       	cpi	r24, 0x04	; 4
     c68:	91 05       	cpc	r25, r1
     c6a:	09 f4       	brne	.+2      	; 0xc6e <can_cmd+0x112>
     c6c:	64 c2       	rjmp	.+1224   	; 0x1136 <__stack+0x37>
     c6e:	8c 85       	ldd	r24, Y+12	; 0x0c
     c70:	9d 85       	ldd	r25, Y+13	; 0x0d
     c72:	85 30       	cpi	r24, 0x05	; 5
     c74:	91 05       	cpc	r25, r1
     c76:	09 f4       	brne	.+2      	; 0xc7a <can_cmd+0x11e>
     c78:	cf c2       	rjmp	.+1438   	; 0x1218 <__stack+0x119>
     c7a:	0c 94 d5 0e 	jmp	0x1daa	; 0x1daa <__stack+0xcab>
     c7e:	8c 85       	ldd	r24, Y+12	; 0x0c
     c80:	9d 85       	ldd	r25, Y+13	; 0x0d
     c82:	89 30       	cpi	r24, 0x09	; 9
     c84:	91 05       	cpc	r25, r1
     c86:	09 f4       	brne	.+2      	; 0xc8a <can_cmd+0x12e>
     c88:	c3 c5       	rjmp	.+2950   	; 0x1810 <__stack+0x711>
     c8a:	8c 85       	ldd	r24, Y+12	; 0x0c
     c8c:	9d 85       	ldd	r25, Y+13	; 0x0d
     c8e:	8a 30       	cpi	r24, 0x0A	; 10
     c90:	91 05       	cpc	r25, r1
     c92:	70 f4       	brcc	.+28     	; 0xcb0 <can_cmd+0x154>
     c94:	8c 85       	ldd	r24, Y+12	; 0x0c
     c96:	9d 85       	ldd	r25, Y+13	; 0x0d
     c98:	87 30       	cpi	r24, 0x07	; 7
     c9a:	91 05       	cpc	r25, r1
     c9c:	09 f4       	brne	.+2      	; 0xca0 <can_cmd+0x144>
     c9e:	ba c3       	rjmp	.+1908   	; 0x1414 <__stack+0x315>
     ca0:	8c 85       	ldd	r24, Y+12	; 0x0c
     ca2:	9d 85       	ldd	r25, Y+13	; 0x0d
     ca4:	88 30       	cpi	r24, 0x08	; 8
     ca6:	91 05       	cpc	r25, r1
     ca8:	09 f4       	brne	.+2      	; 0xcac <can_cmd+0x150>
     caa:	ae c4       	rjmp	.+2396   	; 0x1608 <__stack+0x509>
     cac:	0c 94 d5 0e 	jmp	0x1daa	; 0x1daa <__stack+0xcab>
     cb0:	8c 85       	ldd	r24, Y+12	; 0x0c
     cb2:	9d 85       	ldd	r25, Y+13	; 0x0d
     cb4:	8a 30       	cpi	r24, 0x0A	; 10
     cb6:	91 05       	cpc	r25, r1
     cb8:	09 f4       	brne	.+2      	; 0xcbc <can_cmd+0x160>
     cba:	b6 c6       	rjmp	.+3436   	; 0x1a28 <__stack+0x929>
     cbc:	8c 85       	ldd	r24, Y+12	; 0x0c
     cbe:	9d 85       	ldd	r25, Y+13	; 0x0d
     cc0:	8b 30       	cpi	r24, 0x0B	; 11
     cc2:	91 05       	cpc	r25, r1
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <can_cmd+0x16c>
     cc6:	4c c7       	rjmp	.+3736   	; 0x1b60 <__stack+0xa61>
     cc8:	0c 94 d5 0e 	jmp	0x1daa	; 0x1daa <__stack+0xcab>
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     ccc:	e9 85       	ldd	r30, Y+9	; 0x09
     cce:	fa 85       	ldd	r31, Y+10	; 0x0a
     cd0:	84 85       	ldd	r24, Z+12	; 0x0c
     cd2:	88 23       	and	r24, r24
     cd4:	09 f4       	brne	.+2      	; 0xcd8 <can_cmd+0x17c>
     cd6:	57 c0       	rjmp	.+174    	; 0xd86 <can_cmd+0x22a>
     cd8:	a3 ef       	ldi	r26, 0xF3	; 243
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	89 85       	ldd	r24, Y+9	; 0x09
     cde:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce0:	03 96       	adiw	r24, 0x03	; 3
     ce2:	fc 01       	movw	r30, r24
     ce4:	33 96       	adiw	r30, 0x03	; 3
     ce6:	80 81       	ld	r24, Z
     ce8:	28 2f       	mov	r18, r24
     cea:	22 0f       	add	r18, r18
     cec:	22 0f       	add	r18, r18
     cee:	22 0f       	add	r18, r18
     cf0:	89 85       	ldd	r24, Y+9	; 0x09
     cf2:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf4:	03 96       	adiw	r24, 0x03	; 3
     cf6:	fc 01       	movw	r30, r24
     cf8:	32 96       	adiw	r30, 0x02	; 2
     cfa:	80 81       	ld	r24, Z
     cfc:	82 95       	swap	r24
     cfe:	86 95       	lsr	r24
     d00:	87 70       	andi	r24, 0x07	; 7
     d02:	82 0f       	add	r24, r18
     d04:	8c 93       	st	X, r24
     d06:	a2 ef       	ldi	r26, 0xF2	; 242
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	89 85       	ldd	r24, Y+9	; 0x09
     d0c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d0e:	03 96       	adiw	r24, 0x03	; 3
     d10:	fc 01       	movw	r30, r24
     d12:	32 96       	adiw	r30, 0x02	; 2
     d14:	80 81       	ld	r24, Z
     d16:	28 2f       	mov	r18, r24
     d18:	22 0f       	add	r18, r18
     d1a:	22 0f       	add	r18, r18
     d1c:	22 0f       	add	r18, r18
     d1e:	89 85       	ldd	r24, Y+9	; 0x09
     d20:	9a 85       	ldd	r25, Y+10	; 0x0a
     d22:	03 96       	adiw	r24, 0x03	; 3
     d24:	fc 01       	movw	r30, r24
     d26:	31 96       	adiw	r30, 0x01	; 1
     d28:	80 81       	ld	r24, Z
     d2a:	82 95       	swap	r24
     d2c:	86 95       	lsr	r24
     d2e:	87 70       	andi	r24, 0x07	; 7
     d30:	82 0f       	add	r24, r18
     d32:	8c 93       	st	X, r24
     d34:	a1 ef       	ldi	r26, 0xF1	; 241
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	89 85       	ldd	r24, Y+9	; 0x09
     d3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d3c:	03 96       	adiw	r24, 0x03	; 3
     d3e:	fc 01       	movw	r30, r24
     d40:	31 96       	adiw	r30, 0x01	; 1
     d42:	80 81       	ld	r24, Z
     d44:	28 2f       	mov	r18, r24
     d46:	22 0f       	add	r18, r18
     d48:	22 0f       	add	r18, r18
     d4a:	22 0f       	add	r18, r18
     d4c:	89 85       	ldd	r24, Y+9	; 0x09
     d4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d50:	03 96       	adiw	r24, 0x03	; 3
     d52:	fc 01       	movw	r30, r24
     d54:	80 81       	ld	r24, Z
     d56:	82 95       	swap	r24
     d58:	86 95       	lsr	r24
     d5a:	87 70       	andi	r24, 0x07	; 7
     d5c:	82 0f       	add	r24, r18
     d5e:	8c 93       	st	X, r24
     d60:	a0 ef       	ldi	r26, 0xF0	; 240
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	89 85       	ldd	r24, Y+9	; 0x09
     d66:	9a 85       	ldd	r25, Y+10	; 0x0a
     d68:	03 96       	adiw	r24, 0x03	; 3
     d6a:	fc 01       	movw	r30, r24
     d6c:	80 81       	ld	r24, Z
     d6e:	88 0f       	add	r24, r24
     d70:	88 0f       	add	r24, r24
     d72:	88 0f       	add	r24, r24
     d74:	8c 93       	st	X, r24
     d76:	af ee       	ldi	r26, 0xEF	; 239
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	ef ee       	ldi	r30, 0xEF	; 239
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	80 61       	ori	r24, 0x10	; 16
     d82:	8c 93       	st	X, r24
     d84:	28 c0       	rjmp	.+80     	; 0xdd6 <can_cmd+0x27a>
          else              { Can_set_std_id(cmd->id.std);}
     d86:	a3 ef       	ldi	r26, 0xF3	; 243
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	89 85       	ldd	r24, Y+9	; 0x09
     d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d8e:	03 96       	adiw	r24, 0x03	; 3
     d90:	fc 01       	movw	r30, r24
     d92:	31 96       	adiw	r30, 0x01	; 1
     d94:	80 81       	ld	r24, Z
     d96:	28 2f       	mov	r18, r24
     d98:	22 95       	swap	r18
     d9a:	22 0f       	add	r18, r18
     d9c:	20 7e       	andi	r18, 0xE0	; 224
     d9e:	89 85       	ldd	r24, Y+9	; 0x09
     da0:	9a 85       	ldd	r25, Y+10	; 0x0a
     da2:	03 96       	adiw	r24, 0x03	; 3
     da4:	fc 01       	movw	r30, r24
     da6:	80 81       	ld	r24, Z
     da8:	86 95       	lsr	r24
     daa:	86 95       	lsr	r24
     dac:	86 95       	lsr	r24
     dae:	82 0f       	add	r24, r18
     db0:	8c 93       	st	X, r24
     db2:	a2 ef       	ldi	r26, 0xF2	; 242
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	89 85       	ldd	r24, Y+9	; 0x09
     db8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dba:	03 96       	adiw	r24, 0x03	; 3
     dbc:	fc 01       	movw	r30, r24
     dbe:	80 81       	ld	r24, Z
     dc0:	82 95       	swap	r24
     dc2:	88 0f       	add	r24, r24
     dc4:	80 7e       	andi	r24, 0xE0	; 224
     dc6:	8c 93       	st	X, r24
     dc8:	af ee       	ldi	r26, 0xEF	; 239
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	ef ee       	ldi	r30, 0xEF	; 239
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	8f 7e       	andi	r24, 0xEF	; 239
     dd4:	8c 93       	st	X, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     dd6:	1b 82       	std	Y+3, r1	; 0x03
     dd8:	11 c0       	rjmp	.+34     	; 0xdfc <can_cmd+0x2a0>
     dda:	aa ef       	ldi	r26, 0xFA	; 250
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	e9 85       	ldd	r30, Y+9	; 0x09
     de0:	fa 85       	ldd	r31, Y+10	; 0x0a
     de2:	20 85       	ldd	r18, Z+8	; 0x08
     de4:	31 85       	ldd	r19, Z+9	; 0x09
     de6:	8b 81       	ldd	r24, Y+3	; 0x03
     de8:	88 2f       	mov	r24, r24
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	f9 01       	movw	r30, r18
     dee:	e8 0f       	add	r30, r24
     df0:	f9 1f       	adc	r31, r25
     df2:	80 81       	ld	r24, Z
     df4:	8c 93       	st	X, r24
     df6:	8b 81       	ldd	r24, Y+3	; 0x03
     df8:	8f 5f       	subi	r24, 0xFF	; 255
     dfa:	8b 83       	std	Y+3, r24	; 0x03
     dfc:	e9 85       	ldd	r30, Y+9	; 0x09
     dfe:	fa 85       	ldd	r31, Y+10	; 0x0a
     e00:	97 81       	ldd	r25, Z+7	; 0x07
     e02:	8b 81       	ldd	r24, Y+3	; 0x03
     e04:	89 17       	cp	r24, r25
     e06:	48 f3       	brcs	.-46     	; 0xdda <can_cmd+0x27e>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     e08:	e9 85       	ldd	r30, Y+9	; 0x09
     e0a:	fa 85       	ldd	r31, Y+10	; 0x0a
     e0c:	83 85       	ldd	r24, Z+11	; 0x0b
     e0e:	88 23       	and	r24, r24
     e10:	41 f0       	breq	.+16     	; 0xe22 <can_cmd+0x2c6>
     e12:	a0 ef       	ldi	r26, 0xF0	; 240
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e0 ef       	ldi	r30, 0xF0	; 240
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	84 60       	ori	r24, 0x04	; 4
     e1e:	8c 93       	st	X, r24
     e20:	07 c0       	rjmp	.+14     	; 0xe30 <can_cmd+0x2d4>
            else Can_clear_rtr();    
     e22:	a0 ef       	ldi	r26, 0xF0	; 240
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	e0 ef       	ldi	r30, 0xF0	; 240
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	8b 7f       	andi	r24, 0xFB	; 251
     e2e:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
     e30:	af ee       	ldi	r26, 0xEF	; 239
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	ef ee       	ldi	r30, 0xEF	; 239
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	90 81       	ld	r25, Z
     e3a:	e9 85       	ldd	r30, Y+9	; 0x09
     e3c:	fa 85       	ldd	r31, Y+10	; 0x0a
     e3e:	87 81       	ldd	r24, Z+7	; 0x07
     e40:	89 2b       	or	r24, r25
     e42:	8c 93       	st	X, r24
          Can_config_tx();
     e44:	af ee       	ldi	r26, 0xEF	; 239
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	ef ee       	ldi	r30, 0xEF	; 239
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8f 73       	andi	r24, 0x3F	; 63
     e50:	8c 93       	st	X, r24
     e52:	af ee       	ldi	r26, 0xEF	; 239
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	ef ee       	ldi	r30, 0xEF	; 239
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	80 64       	ori	r24, 0x40	; 64
     e5e:	8c 93       	st	X, r24
     e60:	af c7       	rjmp	.+3934   	; 0x1dc0 <__stack+0xcc1>
          break;
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     e62:	e9 85       	ldd	r30, Y+9	; 0x09
     e64:	fa 85       	ldd	r31, Y+10	; 0x0a
     e66:	84 85       	ldd	r24, Z+12	; 0x0c
     e68:	88 23       	and	r24, r24
     e6a:	09 f4       	brne	.+2      	; 0xe6e <can_cmd+0x312>
     e6c:	57 c0       	rjmp	.+174    	; 0xf1c <can_cmd+0x3c0>
     e6e:	a3 ef       	ldi	r26, 0xF3	; 243
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	89 85       	ldd	r24, Y+9	; 0x09
     e74:	9a 85       	ldd	r25, Y+10	; 0x0a
     e76:	03 96       	adiw	r24, 0x03	; 3
     e78:	fc 01       	movw	r30, r24
     e7a:	33 96       	adiw	r30, 0x03	; 3
     e7c:	80 81       	ld	r24, Z
     e7e:	28 2f       	mov	r18, r24
     e80:	22 0f       	add	r18, r18
     e82:	22 0f       	add	r18, r18
     e84:	22 0f       	add	r18, r18
     e86:	89 85       	ldd	r24, Y+9	; 0x09
     e88:	9a 85       	ldd	r25, Y+10	; 0x0a
     e8a:	03 96       	adiw	r24, 0x03	; 3
     e8c:	fc 01       	movw	r30, r24
     e8e:	32 96       	adiw	r30, 0x02	; 2
     e90:	80 81       	ld	r24, Z
     e92:	82 95       	swap	r24
     e94:	86 95       	lsr	r24
     e96:	87 70       	andi	r24, 0x07	; 7
     e98:	82 0f       	add	r24, r18
     e9a:	8c 93       	st	X, r24
     e9c:	a2 ef       	ldi	r26, 0xF2	; 242
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	89 85       	ldd	r24, Y+9	; 0x09
     ea2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea4:	03 96       	adiw	r24, 0x03	; 3
     ea6:	fc 01       	movw	r30, r24
     ea8:	32 96       	adiw	r30, 0x02	; 2
     eaa:	80 81       	ld	r24, Z
     eac:	28 2f       	mov	r18, r24
     eae:	22 0f       	add	r18, r18
     eb0:	22 0f       	add	r18, r18
     eb2:	22 0f       	add	r18, r18
     eb4:	89 85       	ldd	r24, Y+9	; 0x09
     eb6:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb8:	03 96       	adiw	r24, 0x03	; 3
     eba:	fc 01       	movw	r30, r24
     ebc:	31 96       	adiw	r30, 0x01	; 1
     ebe:	80 81       	ld	r24, Z
     ec0:	82 95       	swap	r24
     ec2:	86 95       	lsr	r24
     ec4:	87 70       	andi	r24, 0x07	; 7
     ec6:	82 0f       	add	r24, r18
     ec8:	8c 93       	st	X, r24
     eca:	a1 ef       	ldi	r26, 0xF1	; 241
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	89 85       	ldd	r24, Y+9	; 0x09
     ed0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ed2:	03 96       	adiw	r24, 0x03	; 3
     ed4:	fc 01       	movw	r30, r24
     ed6:	31 96       	adiw	r30, 0x01	; 1
     ed8:	80 81       	ld	r24, Z
     eda:	28 2f       	mov	r18, r24
     edc:	22 0f       	add	r18, r18
     ede:	22 0f       	add	r18, r18
     ee0:	22 0f       	add	r18, r18
     ee2:	89 85       	ldd	r24, Y+9	; 0x09
     ee4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee6:	03 96       	adiw	r24, 0x03	; 3
     ee8:	fc 01       	movw	r30, r24
     eea:	80 81       	ld	r24, Z
     eec:	82 95       	swap	r24
     eee:	86 95       	lsr	r24
     ef0:	87 70       	andi	r24, 0x07	; 7
     ef2:	82 0f       	add	r24, r18
     ef4:	8c 93       	st	X, r24
     ef6:	a0 ef       	ldi	r26, 0xF0	; 240
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	89 85       	ldd	r24, Y+9	; 0x09
     efc:	9a 85       	ldd	r25, Y+10	; 0x0a
     efe:	03 96       	adiw	r24, 0x03	; 3
     f00:	fc 01       	movw	r30, r24
     f02:	80 81       	ld	r24, Z
     f04:	88 0f       	add	r24, r24
     f06:	88 0f       	add	r24, r24
     f08:	88 0f       	add	r24, r24
     f0a:	8c 93       	st	X, r24
     f0c:	af ee       	ldi	r26, 0xEF	; 239
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	ef ee       	ldi	r30, 0xEF	; 239
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	80 61       	ori	r24, 0x10	; 16
     f18:	8c 93       	st	X, r24
     f1a:	28 c0       	rjmp	.+80     	; 0xf6c <can_cmd+0x410>
          else              { Can_set_std_id(cmd->id.std);}
     f1c:	a3 ef       	ldi	r26, 0xF3	; 243
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	89 85       	ldd	r24, Y+9	; 0x09
     f22:	9a 85       	ldd	r25, Y+10	; 0x0a
     f24:	03 96       	adiw	r24, 0x03	; 3
     f26:	fc 01       	movw	r30, r24
     f28:	31 96       	adiw	r30, 0x01	; 1
     f2a:	80 81       	ld	r24, Z
     f2c:	28 2f       	mov	r18, r24
     f2e:	22 95       	swap	r18
     f30:	22 0f       	add	r18, r18
     f32:	20 7e       	andi	r18, 0xE0	; 224
     f34:	89 85       	ldd	r24, Y+9	; 0x09
     f36:	9a 85       	ldd	r25, Y+10	; 0x0a
     f38:	03 96       	adiw	r24, 0x03	; 3
     f3a:	fc 01       	movw	r30, r24
     f3c:	80 81       	ld	r24, Z
     f3e:	86 95       	lsr	r24
     f40:	86 95       	lsr	r24
     f42:	86 95       	lsr	r24
     f44:	82 0f       	add	r24, r18
     f46:	8c 93       	st	X, r24
     f48:	a2 ef       	ldi	r26, 0xF2	; 242
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	89 85       	ldd	r24, Y+9	; 0x09
     f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f50:	03 96       	adiw	r24, 0x03	; 3
     f52:	fc 01       	movw	r30, r24
     f54:	80 81       	ld	r24, Z
     f56:	82 95       	swap	r24
     f58:	88 0f       	add	r24, r24
     f5a:	80 7e       	andi	r24, 0xE0	; 224
     f5c:	8c 93       	st	X, r24
     f5e:	af ee       	ldi	r26, 0xEF	; 239
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	ef ee       	ldi	r30, 0xEF	; 239
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	8f 7e       	andi	r24, 0xEF	; 239
     f6a:	8c 93       	st	X, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     f6c:	1b 82       	std	Y+3, r1	; 0x03
     f6e:	11 c0       	rjmp	.+34     	; 0xf92 <can_cmd+0x436>
     f70:	aa ef       	ldi	r26, 0xFA	; 250
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e9 85       	ldd	r30, Y+9	; 0x09
     f76:	fa 85       	ldd	r31, Y+10	; 0x0a
     f78:	20 85       	ldd	r18, Z+8	; 0x08
     f7a:	31 85       	ldd	r19, Z+9	; 0x09
     f7c:	8b 81       	ldd	r24, Y+3	; 0x03
     f7e:	88 2f       	mov	r24, r24
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	f9 01       	movw	r30, r18
     f84:	e8 0f       	add	r30, r24
     f86:	f9 1f       	adc	r31, r25
     f88:	80 81       	ld	r24, Z
     f8a:	8c 93       	st	X, r24
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	8f 5f       	subi	r24, 0xFF	; 255
     f90:	8b 83       	std	Y+3, r24	; 0x03
     f92:	e9 85       	ldd	r30, Y+9	; 0x09
     f94:	fa 85       	ldd	r31, Y+10	; 0x0a
     f96:	97 81       	ldd	r25, Z+7	; 0x07
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	89 17       	cp	r24, r25
     f9c:	48 f3       	brcs	.-46     	; 0xf70 <can_cmd+0x414>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     f9e:	e9 85       	ldd	r30, Y+9	; 0x09
     fa0:	fa 85       	ldd	r31, Y+10	; 0x0a
     fa2:	13 86       	std	Z+11, r1	; 0x0b
     fa4:	a0 ef       	ldi	r26, 0xF0	; 240
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e0 ef       	ldi	r30, 0xF0	; 240
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	8b 7f       	andi	r24, 0xFB	; 251
     fb0:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
     fb2:	af ee       	ldi	r26, 0xEF	; 239
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	ef ee       	ldi	r30, 0xEF	; 239
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	90 81       	ld	r25, Z
     fbc:	e9 85       	ldd	r30, Y+9	; 0x09
     fbe:	fa 85       	ldd	r31, Y+10	; 0x0a
     fc0:	87 81       	ldd	r24, Z+7	; 0x07
     fc2:	89 2b       	or	r24, r25
     fc4:	8c 93       	st	X, r24
          Can_config_tx();
     fc6:	af ee       	ldi	r26, 0xEF	; 239
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	ef ee       	ldi	r30, 0xEF	; 239
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	8f 73       	andi	r24, 0x3F	; 63
     fd2:	8c 93       	st	X, r24
     fd4:	af ee       	ldi	r26, 0xEF	; 239
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	ef ee       	ldi	r30, 0xEF	; 239
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	80 64       	ori	r24, 0x40	; 64
     fe0:	8c 93       	st	X, r24
     fe2:	ee c6       	rjmp	.+3548   	; 0x1dc0 <__stack+0xcc1>
          break;
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     fe4:	e9 85       	ldd	r30, Y+9	; 0x09
     fe6:	fa 85       	ldd	r31, Y+10	; 0x0a
     fe8:	84 85       	ldd	r24, Z+12	; 0x0c
     fea:	88 23       	and	r24, r24
     fec:	09 f4       	brne	.+2      	; 0xff0 <can_cmd+0x494>
     fee:	57 c0       	rjmp	.+174    	; 0x109e <can_cmd+0x542>
     ff0:	a3 ef       	ldi	r26, 0xF3	; 243
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	89 85       	ldd	r24, Y+9	; 0x09
     ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff8:	03 96       	adiw	r24, 0x03	; 3
     ffa:	fc 01       	movw	r30, r24
     ffc:	33 96       	adiw	r30, 0x03	; 3
     ffe:	80 81       	ld	r24, Z
    1000:	28 2f       	mov	r18, r24
    1002:	22 0f       	add	r18, r18
    1004:	22 0f       	add	r18, r18
    1006:	22 0f       	add	r18, r18
    1008:	89 85       	ldd	r24, Y+9	; 0x09
    100a:	9a 85       	ldd	r25, Y+10	; 0x0a
    100c:	03 96       	adiw	r24, 0x03	; 3
    100e:	fc 01       	movw	r30, r24
    1010:	32 96       	adiw	r30, 0x02	; 2
    1012:	80 81       	ld	r24, Z
    1014:	82 95       	swap	r24
    1016:	86 95       	lsr	r24
    1018:	87 70       	andi	r24, 0x07	; 7
    101a:	82 0f       	add	r24, r18
    101c:	8c 93       	st	X, r24
    101e:	a2 ef       	ldi	r26, 0xF2	; 242
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	89 85       	ldd	r24, Y+9	; 0x09
    1024:	9a 85       	ldd	r25, Y+10	; 0x0a
    1026:	03 96       	adiw	r24, 0x03	; 3
    1028:	fc 01       	movw	r30, r24
    102a:	32 96       	adiw	r30, 0x02	; 2
    102c:	80 81       	ld	r24, Z
    102e:	28 2f       	mov	r18, r24
    1030:	22 0f       	add	r18, r18
    1032:	22 0f       	add	r18, r18
    1034:	22 0f       	add	r18, r18
    1036:	89 85       	ldd	r24, Y+9	; 0x09
    1038:	9a 85       	ldd	r25, Y+10	; 0x0a
    103a:	03 96       	adiw	r24, 0x03	; 3
    103c:	fc 01       	movw	r30, r24
    103e:	31 96       	adiw	r30, 0x01	; 1
    1040:	80 81       	ld	r24, Z
    1042:	82 95       	swap	r24
    1044:	86 95       	lsr	r24
    1046:	87 70       	andi	r24, 0x07	; 7
    1048:	82 0f       	add	r24, r18
    104a:	8c 93       	st	X, r24
    104c:	a1 ef       	ldi	r26, 0xF1	; 241
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	89 85       	ldd	r24, Y+9	; 0x09
    1052:	9a 85       	ldd	r25, Y+10	; 0x0a
    1054:	03 96       	adiw	r24, 0x03	; 3
    1056:	fc 01       	movw	r30, r24
    1058:	31 96       	adiw	r30, 0x01	; 1
    105a:	80 81       	ld	r24, Z
    105c:	28 2f       	mov	r18, r24
    105e:	22 0f       	add	r18, r18
    1060:	22 0f       	add	r18, r18
    1062:	22 0f       	add	r18, r18
    1064:	89 85       	ldd	r24, Y+9	; 0x09
    1066:	9a 85       	ldd	r25, Y+10	; 0x0a
    1068:	03 96       	adiw	r24, 0x03	; 3
    106a:	fc 01       	movw	r30, r24
    106c:	80 81       	ld	r24, Z
    106e:	82 95       	swap	r24
    1070:	86 95       	lsr	r24
    1072:	87 70       	andi	r24, 0x07	; 7
    1074:	82 0f       	add	r24, r18
    1076:	8c 93       	st	X, r24
    1078:	a0 ef       	ldi	r26, 0xF0	; 240
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	89 85       	ldd	r24, Y+9	; 0x09
    107e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1080:	03 96       	adiw	r24, 0x03	; 3
    1082:	fc 01       	movw	r30, r24
    1084:	80 81       	ld	r24, Z
    1086:	88 0f       	add	r24, r24
    1088:	88 0f       	add	r24, r24
    108a:	88 0f       	add	r24, r24
    108c:	8c 93       	st	X, r24
    108e:	af ee       	ldi	r26, 0xEF	; 239
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	ef ee       	ldi	r30, 0xEF	; 239
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	80 61       	ori	r24, 0x10	; 16
    109a:	8c 93       	st	X, r24
    109c:	28 c0       	rjmp	.+80     	; 0x10ee <can_cmd+0x592>
          else              { Can_set_std_id(cmd->id.std);}
    109e:	a3 ef       	ldi	r26, 0xF3	; 243
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	89 85       	ldd	r24, Y+9	; 0x09
    10a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a6:	03 96       	adiw	r24, 0x03	; 3
    10a8:	fc 01       	movw	r30, r24
    10aa:	31 96       	adiw	r30, 0x01	; 1
    10ac:	80 81       	ld	r24, Z
    10ae:	28 2f       	mov	r18, r24
    10b0:	22 95       	swap	r18
    10b2:	22 0f       	add	r18, r18
    10b4:	20 7e       	andi	r18, 0xE0	; 224
    10b6:	89 85       	ldd	r24, Y+9	; 0x09
    10b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ba:	03 96       	adiw	r24, 0x03	; 3
    10bc:	fc 01       	movw	r30, r24
    10be:	80 81       	ld	r24, Z
    10c0:	86 95       	lsr	r24
    10c2:	86 95       	lsr	r24
    10c4:	86 95       	lsr	r24
    10c6:	82 0f       	add	r24, r18
    10c8:	8c 93       	st	X, r24
    10ca:	a2 ef       	ldi	r26, 0xF2	; 242
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	89 85       	ldd	r24, Y+9	; 0x09
    10d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d2:	03 96       	adiw	r24, 0x03	; 3
    10d4:	fc 01       	movw	r30, r24
    10d6:	80 81       	ld	r24, Z
    10d8:	82 95       	swap	r24
    10da:	88 0f       	add	r24, r24
    10dc:	80 7e       	andi	r24, 0xE0	; 224
    10de:	8c 93       	st	X, r24
    10e0:	af ee       	ldi	r26, 0xEF	; 239
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	ef ee       	ldi	r30, 0xEF	; 239
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	8f 7e       	andi	r24, 0xEF	; 239
    10ec:	8c 93       	st	X, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
    10ee:	e9 85       	ldd	r30, Y+9	; 0x09
    10f0:	fa 85       	ldd	r31, Y+10	; 0x0a
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	83 87       	std	Z+11, r24	; 0x0b
    10f6:	a0 ef       	ldi	r26, 0xF0	; 240
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e0 ef       	ldi	r30, 0xF0	; 240
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	84 60       	ori	r24, 0x04	; 4
    1102:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    1104:	af ee       	ldi	r26, 0xEF	; 239
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	ef ee       	ldi	r30, 0xEF	; 239
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	90 81       	ld	r25, Z
    110e:	e9 85       	ldd	r30, Y+9	; 0x09
    1110:	fa 85       	ldd	r31, Y+10	; 0x0a
    1112:	87 81       	ldd	r24, Z+7	; 0x07
    1114:	89 2b       	or	r24, r25
    1116:	8c 93       	st	X, r24
          Can_config_tx();
    1118:	af ee       	ldi	r26, 0xEF	; 239
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	ef ee       	ldi	r30, 0xEF	; 239
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	8f 73       	andi	r24, 0x3F	; 63
    1124:	8c 93       	st	X, r24
    1126:	af ee       	ldi	r26, 0xEF	; 239
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	ef ee       	ldi	r30, 0xEF	; 239
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	80 64       	ori	r24, 0x40	; 64
    1132:	8c 93       	st	X, r24
    1134:	45 c6       	rjmp	.+3210   	; 0x1dc0 <__stack+0xcc1>
          break;
        //------------      
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    1136:	1d 82       	std	Y+5, r1	; 0x05
    1138:	1e 82       	std	Y+6, r1	; 0x06
    113a:	1f 82       	std	Y+7, r1	; 0x07
    113c:	18 86       	std	Y+8, r1	; 0x08
    113e:	a7 ef       	ldi	r26, 0xF7	; 247
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	ce 01       	movw	r24, r28
    1144:	05 96       	adiw	r24, 0x05	; 5
    1146:	fc 01       	movw	r30, r24
    1148:	33 96       	adiw	r30, 0x03	; 3
    114a:	80 81       	ld	r24, Z
    114c:	28 2f       	mov	r18, r24
    114e:	22 0f       	add	r18, r18
    1150:	22 0f       	add	r18, r18
    1152:	22 0f       	add	r18, r18
    1154:	ce 01       	movw	r24, r28
    1156:	05 96       	adiw	r24, 0x05	; 5
    1158:	fc 01       	movw	r30, r24
    115a:	32 96       	adiw	r30, 0x02	; 2
    115c:	80 81       	ld	r24, Z
    115e:	82 95       	swap	r24
    1160:	86 95       	lsr	r24
    1162:	87 70       	andi	r24, 0x07	; 7
    1164:	82 0f       	add	r24, r18
    1166:	8c 93       	st	X, r24
    1168:	a6 ef       	ldi	r26, 0xF6	; 246
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	ce 01       	movw	r24, r28
    116e:	05 96       	adiw	r24, 0x05	; 5
    1170:	fc 01       	movw	r30, r24
    1172:	32 96       	adiw	r30, 0x02	; 2
    1174:	80 81       	ld	r24, Z
    1176:	28 2f       	mov	r18, r24
    1178:	22 0f       	add	r18, r18
    117a:	22 0f       	add	r18, r18
    117c:	22 0f       	add	r18, r18
    117e:	ce 01       	movw	r24, r28
    1180:	05 96       	adiw	r24, 0x05	; 5
    1182:	fc 01       	movw	r30, r24
    1184:	31 96       	adiw	r30, 0x01	; 1
    1186:	80 81       	ld	r24, Z
    1188:	82 95       	swap	r24
    118a:	86 95       	lsr	r24
    118c:	87 70       	andi	r24, 0x07	; 7
    118e:	82 0f       	add	r24, r18
    1190:	8c 93       	st	X, r24
    1192:	a5 ef       	ldi	r26, 0xF5	; 245
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	ce 01       	movw	r24, r28
    1198:	05 96       	adiw	r24, 0x05	; 5
    119a:	fc 01       	movw	r30, r24
    119c:	31 96       	adiw	r30, 0x01	; 1
    119e:	80 81       	ld	r24, Z
    11a0:	98 2f       	mov	r25, r24
    11a2:	99 0f       	add	r25, r25
    11a4:	99 0f       	add	r25, r25
    11a6:	99 0f       	add	r25, r25
    11a8:	fe 01       	movw	r30, r28
    11aa:	35 96       	adiw	r30, 0x05	; 5
    11ac:	80 81       	ld	r24, Z
    11ae:	82 95       	swap	r24
    11b0:	86 95       	lsr	r24
    11b2:	87 70       	andi	r24, 0x07	; 7
    11b4:	89 0f       	add	r24, r25
    11b6:	8c 93       	st	X, r24
    11b8:	a4 ef       	ldi	r26, 0xF4	; 244
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	fe 01       	movw	r30, r28
    11be:	35 96       	adiw	r30, 0x05	; 5
    11c0:	80 81       	ld	r24, Z
    11c2:	88 0f       	add	r24, r24
    11c4:	88 0f       	add	r24, r24
    11c6:	88 0f       	add	r24, r24
    11c8:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    11ca:	af ee       	ldi	r26, 0xEF	; 239
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	ef ee       	ldi	r30, 0xEF	; 239
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	90 81       	ld	r25, Z
    11d4:	e9 85       	ldd	r30, Y+9	; 0x09
    11d6:	fa 85       	ldd	r31, Y+10	; 0x0a
    11d8:	87 81       	ldd	r24, Z+7	; 0x07
    11da:	89 2b       	or	r24, r25
    11dc:	8c 93       	st	X, r24
          Can_clear_rtrmsk();
    11de:	a4 ef       	ldi	r26, 0xF4	; 244
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e4 ef       	ldi	r30, 0xF4	; 244
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	8b 7f       	andi	r24, 0xFB	; 251
    11ea:	8c 93       	st	X, r24
          Can_clear_idemsk();
    11ec:	a4 ef       	ldi	r26, 0xF4	; 244
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	e4 ef       	ldi	r30, 0xF4	; 244
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	8e 7f       	andi	r24, 0xFE	; 254
    11f8:	8c 93       	st	X, r24
          Can_config_rx();       
    11fa:	af ee       	ldi	r26, 0xEF	; 239
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	ef ee       	ldi	r30, 0xEF	; 239
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	8f 73       	andi	r24, 0x3F	; 63
    1206:	8c 93       	st	X, r24
    1208:	af ee       	ldi	r26, 0xEF	; 239
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	ef ee       	ldi	r30, 0xEF	; 239
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	80 68       	ori	r24, 0x80	; 128
    1214:	8c 93       	st	X, r24
    1216:	d4 c5       	rjmp	.+2984   	; 0x1dc0 <__stack+0xcc1>
          break;
        //------------      
        case CMD_RX_DATA:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    1218:	1d 82       	std	Y+5, r1	; 0x05
    121a:	1e 82       	std	Y+6, r1	; 0x06
    121c:	1f 82       	std	Y+7, r1	; 0x07
    121e:	18 86       	std	Y+8, r1	; 0x08
    1220:	a7 ef       	ldi	r26, 0xF7	; 247
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	ce 01       	movw	r24, r28
    1226:	05 96       	adiw	r24, 0x05	; 5
    1228:	fc 01       	movw	r30, r24
    122a:	33 96       	adiw	r30, 0x03	; 3
    122c:	80 81       	ld	r24, Z
    122e:	28 2f       	mov	r18, r24
    1230:	22 0f       	add	r18, r18
    1232:	22 0f       	add	r18, r18
    1234:	22 0f       	add	r18, r18
    1236:	ce 01       	movw	r24, r28
    1238:	05 96       	adiw	r24, 0x05	; 5
    123a:	fc 01       	movw	r30, r24
    123c:	32 96       	adiw	r30, 0x02	; 2
    123e:	80 81       	ld	r24, Z
    1240:	82 95       	swap	r24
    1242:	86 95       	lsr	r24
    1244:	87 70       	andi	r24, 0x07	; 7
    1246:	82 0f       	add	r24, r18
    1248:	8c 93       	st	X, r24
    124a:	a6 ef       	ldi	r26, 0xF6	; 246
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	ce 01       	movw	r24, r28
    1250:	05 96       	adiw	r24, 0x05	; 5
    1252:	fc 01       	movw	r30, r24
    1254:	32 96       	adiw	r30, 0x02	; 2
    1256:	80 81       	ld	r24, Z
    1258:	28 2f       	mov	r18, r24
    125a:	22 0f       	add	r18, r18
    125c:	22 0f       	add	r18, r18
    125e:	22 0f       	add	r18, r18
    1260:	ce 01       	movw	r24, r28
    1262:	05 96       	adiw	r24, 0x05	; 5
    1264:	fc 01       	movw	r30, r24
    1266:	31 96       	adiw	r30, 0x01	; 1
    1268:	80 81       	ld	r24, Z
    126a:	82 95       	swap	r24
    126c:	86 95       	lsr	r24
    126e:	87 70       	andi	r24, 0x07	; 7
    1270:	82 0f       	add	r24, r18
    1272:	8c 93       	st	X, r24
    1274:	a5 ef       	ldi	r26, 0xF5	; 245
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	ce 01       	movw	r24, r28
    127a:	05 96       	adiw	r24, 0x05	; 5
    127c:	fc 01       	movw	r30, r24
    127e:	31 96       	adiw	r30, 0x01	; 1
    1280:	80 81       	ld	r24, Z
    1282:	98 2f       	mov	r25, r24
    1284:	99 0f       	add	r25, r25
    1286:	99 0f       	add	r25, r25
    1288:	99 0f       	add	r25, r25
    128a:	fe 01       	movw	r30, r28
    128c:	35 96       	adiw	r30, 0x05	; 5
    128e:	80 81       	ld	r24, Z
    1290:	82 95       	swap	r24
    1292:	86 95       	lsr	r24
    1294:	87 70       	andi	r24, 0x07	; 7
    1296:	89 0f       	add	r24, r25
    1298:	8c 93       	st	X, r24
    129a:	a4 ef       	ldi	r26, 0xF4	; 244
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	fe 01       	movw	r30, r28
    12a0:	35 96       	adiw	r30, 0x05	; 5
    12a2:	80 81       	ld	r24, Z
    12a4:	88 0f       	add	r24, r24
    12a6:	88 0f       	add	r24, r24
    12a8:	88 0f       	add	r24, r24
    12aa:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    12ac:	af ee       	ldi	r26, 0xEF	; 239
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	ef ee       	ldi	r30, 0xEF	; 239
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	90 81       	ld	r25, Z
    12b6:	e9 85       	ldd	r30, Y+9	; 0x09
    12b8:	fa 85       	ldd	r31, Y+10	; 0x0a
    12ba:	87 81       	ldd	r24, Z+7	; 0x07
    12bc:	89 2b       	or	r24, r25
    12be:	8c 93       	st	X, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    12c0:	e9 85       	ldd	r30, Y+9	; 0x09
    12c2:	fa 85       	ldd	r31, Y+10	; 0x0a
    12c4:	13 86       	std	Z+11, r1	; 0x0b
    12c6:	a4 ef       	ldi	r26, 0xF4	; 244
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e4 ef       	ldi	r30, 0xF4	; 244
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	84 60       	ori	r24, 0x04	; 4
    12d2:	8c 93       	st	X, r24
    12d4:	a0 ef       	ldi	r26, 0xF0	; 240
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	e0 ef       	ldi	r30, 0xF0	; 240
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	8b 7f       	andi	r24, 0xFB	; 251
    12e0:	8c 93       	st	X, r24
          Can_clear_idemsk();
    12e2:	a4 ef       	ldi	r26, 0xF4	; 244
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e4 ef       	ldi	r30, 0xF4	; 244
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	8e 7f       	andi	r24, 0xFE	; 254
    12ee:	8c 93       	st	X, r24
          Can_config_rx();       
    12f0:	af ee       	ldi	r26, 0xEF	; 239
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	ef ee       	ldi	r30, 0xEF	; 239
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	8f 73       	andi	r24, 0x3F	; 63
    12fc:	8c 93       	st	X, r24
    12fe:	af ee       	ldi	r26, 0xEF	; 239
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	ef ee       	ldi	r30, 0xEF	; 239
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	80 68       	ori	r24, 0x80	; 128
    130a:	8c 93       	st	X, r24
    130c:	59 c5       	rjmp	.+2738   	; 0x1dc0 <__stack+0xcc1>
          break;
        //------------      
        case CMD_RX_REMOTE:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    130e:	1d 82       	std	Y+5, r1	; 0x05
    1310:	1e 82       	std	Y+6, r1	; 0x06
    1312:	1f 82       	std	Y+7, r1	; 0x07
    1314:	18 86       	std	Y+8, r1	; 0x08
    1316:	a7 ef       	ldi	r26, 0xF7	; 247
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	ce 01       	movw	r24, r28
    131c:	05 96       	adiw	r24, 0x05	; 5
    131e:	fc 01       	movw	r30, r24
    1320:	33 96       	adiw	r30, 0x03	; 3
    1322:	80 81       	ld	r24, Z
    1324:	28 2f       	mov	r18, r24
    1326:	22 0f       	add	r18, r18
    1328:	22 0f       	add	r18, r18
    132a:	22 0f       	add	r18, r18
    132c:	ce 01       	movw	r24, r28
    132e:	05 96       	adiw	r24, 0x05	; 5
    1330:	fc 01       	movw	r30, r24
    1332:	32 96       	adiw	r30, 0x02	; 2
    1334:	80 81       	ld	r24, Z
    1336:	82 95       	swap	r24
    1338:	86 95       	lsr	r24
    133a:	87 70       	andi	r24, 0x07	; 7
    133c:	82 0f       	add	r24, r18
    133e:	8c 93       	st	X, r24
    1340:	a6 ef       	ldi	r26, 0xF6	; 246
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	ce 01       	movw	r24, r28
    1346:	05 96       	adiw	r24, 0x05	; 5
    1348:	fc 01       	movw	r30, r24
    134a:	32 96       	adiw	r30, 0x02	; 2
    134c:	80 81       	ld	r24, Z
    134e:	28 2f       	mov	r18, r24
    1350:	22 0f       	add	r18, r18
    1352:	22 0f       	add	r18, r18
    1354:	22 0f       	add	r18, r18
    1356:	ce 01       	movw	r24, r28
    1358:	05 96       	adiw	r24, 0x05	; 5
    135a:	fc 01       	movw	r30, r24
    135c:	31 96       	adiw	r30, 0x01	; 1
    135e:	80 81       	ld	r24, Z
    1360:	82 95       	swap	r24
    1362:	86 95       	lsr	r24
    1364:	87 70       	andi	r24, 0x07	; 7
    1366:	82 0f       	add	r24, r18
    1368:	8c 93       	st	X, r24
    136a:	a5 ef       	ldi	r26, 0xF5	; 245
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	ce 01       	movw	r24, r28
    1370:	05 96       	adiw	r24, 0x05	; 5
    1372:	fc 01       	movw	r30, r24
    1374:	31 96       	adiw	r30, 0x01	; 1
    1376:	80 81       	ld	r24, Z
    1378:	98 2f       	mov	r25, r24
    137a:	99 0f       	add	r25, r25
    137c:	99 0f       	add	r25, r25
    137e:	99 0f       	add	r25, r25
    1380:	fe 01       	movw	r30, r28
    1382:	35 96       	adiw	r30, 0x05	; 5
    1384:	80 81       	ld	r24, Z
    1386:	82 95       	swap	r24
    1388:	86 95       	lsr	r24
    138a:	87 70       	andi	r24, 0x07	; 7
    138c:	89 0f       	add	r24, r25
    138e:	8c 93       	st	X, r24
    1390:	a4 ef       	ldi	r26, 0xF4	; 244
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	fe 01       	movw	r30, r28
    1396:	35 96       	adiw	r30, 0x05	; 5
    1398:	80 81       	ld	r24, Z
    139a:	88 0f       	add	r24, r24
    139c:	88 0f       	add	r24, r24
    139e:	88 0f       	add	r24, r24
    13a0:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    13a2:	af ee       	ldi	r26, 0xEF	; 239
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	ef ee       	ldi	r30, 0xEF	; 239
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	90 81       	ld	r25, Z
    13ac:	e9 85       	ldd	r30, Y+9	; 0x09
    13ae:	fa 85       	ldd	r31, Y+10	; 0x0a
    13b0:	87 81       	ldd	r24, Z+7	; 0x07
    13b2:	89 2b       	or	r24, r25
    13b4:	8c 93       	st	X, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    13b6:	e9 85       	ldd	r30, Y+9	; 0x09
    13b8:	fa 85       	ldd	r31, Y+10	; 0x0a
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	83 87       	std	Z+11, r24	; 0x0b
    13be:	a4 ef       	ldi	r26, 0xF4	; 244
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	e4 ef       	ldi	r30, 0xF4	; 244
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	84 60       	ori	r24, 0x04	; 4
    13ca:	8c 93       	st	X, r24
    13cc:	a0 ef       	ldi	r26, 0xF0	; 240
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e0 ef       	ldi	r30, 0xF0	; 240
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	84 60       	ori	r24, 0x04	; 4
    13d8:	8c 93       	st	X, r24
          Can_clear_rplv();
    13da:	af ee       	ldi	r26, 0xEF	; 239
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	ef ee       	ldi	r30, 0xEF	; 239
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	8f 7d       	andi	r24, 0xDF	; 223
    13e6:	8c 93       	st	X, r24
          Can_clear_idemsk();
    13e8:	a4 ef       	ldi	r26, 0xF4	; 244
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e4 ef       	ldi	r30, 0xF4	; 244
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	8e 7f       	andi	r24, 0xFE	; 254
    13f4:	8c 93       	st	X, r24
          Can_config_rx();       
    13f6:	af ee       	ldi	r26, 0xEF	; 239
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	ef ee       	ldi	r30, 0xEF	; 239
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	8f 73       	andi	r24, 0x3F	; 63
    1402:	8c 93       	st	X, r24
    1404:	af ee       	ldi	r26, 0xEF	; 239
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	ef ee       	ldi	r30, 0xEF	; 239
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	80 68       	ori	r24, 0x80	; 128
    1410:	8c 93       	st	X, r24
    1412:	d6 c4       	rjmp	.+2476   	; 0x1dc0 <__stack+0xcc1>
          break;
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1414:	e9 85       	ldd	r30, Y+9	; 0x09
    1416:	fa 85       	ldd	r31, Y+10	; 0x0a
    1418:	84 85       	ldd	r24, Z+12	; 0x0c
    141a:	88 23       	and	r24, r24
    141c:	09 f4       	brne	.+2      	; 0x1420 <__stack+0x321>
    141e:	57 c0       	rjmp	.+174    	; 0x14ce <__stack+0x3cf>
    1420:	a3 ef       	ldi	r26, 0xF3	; 243
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	89 85       	ldd	r24, Y+9	; 0x09
    1426:	9a 85       	ldd	r25, Y+10	; 0x0a
    1428:	03 96       	adiw	r24, 0x03	; 3
    142a:	fc 01       	movw	r30, r24
    142c:	33 96       	adiw	r30, 0x03	; 3
    142e:	80 81       	ld	r24, Z
    1430:	28 2f       	mov	r18, r24
    1432:	22 0f       	add	r18, r18
    1434:	22 0f       	add	r18, r18
    1436:	22 0f       	add	r18, r18
    1438:	89 85       	ldd	r24, Y+9	; 0x09
    143a:	9a 85       	ldd	r25, Y+10	; 0x0a
    143c:	03 96       	adiw	r24, 0x03	; 3
    143e:	fc 01       	movw	r30, r24
    1440:	32 96       	adiw	r30, 0x02	; 2
    1442:	80 81       	ld	r24, Z
    1444:	82 95       	swap	r24
    1446:	86 95       	lsr	r24
    1448:	87 70       	andi	r24, 0x07	; 7
    144a:	82 0f       	add	r24, r18
    144c:	8c 93       	st	X, r24
    144e:	a2 ef       	ldi	r26, 0xF2	; 242
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	89 85       	ldd	r24, Y+9	; 0x09
    1454:	9a 85       	ldd	r25, Y+10	; 0x0a
    1456:	03 96       	adiw	r24, 0x03	; 3
    1458:	fc 01       	movw	r30, r24
    145a:	32 96       	adiw	r30, 0x02	; 2
    145c:	80 81       	ld	r24, Z
    145e:	28 2f       	mov	r18, r24
    1460:	22 0f       	add	r18, r18
    1462:	22 0f       	add	r18, r18
    1464:	22 0f       	add	r18, r18
    1466:	89 85       	ldd	r24, Y+9	; 0x09
    1468:	9a 85       	ldd	r25, Y+10	; 0x0a
    146a:	03 96       	adiw	r24, 0x03	; 3
    146c:	fc 01       	movw	r30, r24
    146e:	31 96       	adiw	r30, 0x01	; 1
    1470:	80 81       	ld	r24, Z
    1472:	82 95       	swap	r24
    1474:	86 95       	lsr	r24
    1476:	87 70       	andi	r24, 0x07	; 7
    1478:	82 0f       	add	r24, r18
    147a:	8c 93       	st	X, r24
    147c:	a1 ef       	ldi	r26, 0xF1	; 241
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	89 85       	ldd	r24, Y+9	; 0x09
    1482:	9a 85       	ldd	r25, Y+10	; 0x0a
    1484:	03 96       	adiw	r24, 0x03	; 3
    1486:	fc 01       	movw	r30, r24
    1488:	31 96       	adiw	r30, 0x01	; 1
    148a:	80 81       	ld	r24, Z
    148c:	28 2f       	mov	r18, r24
    148e:	22 0f       	add	r18, r18
    1490:	22 0f       	add	r18, r18
    1492:	22 0f       	add	r18, r18
    1494:	89 85       	ldd	r24, Y+9	; 0x09
    1496:	9a 85       	ldd	r25, Y+10	; 0x0a
    1498:	03 96       	adiw	r24, 0x03	; 3
    149a:	fc 01       	movw	r30, r24
    149c:	80 81       	ld	r24, Z
    149e:	82 95       	swap	r24
    14a0:	86 95       	lsr	r24
    14a2:	87 70       	andi	r24, 0x07	; 7
    14a4:	82 0f       	add	r24, r18
    14a6:	8c 93       	st	X, r24
    14a8:	a0 ef       	ldi	r26, 0xF0	; 240
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	89 85       	ldd	r24, Y+9	; 0x09
    14ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    14b0:	03 96       	adiw	r24, 0x03	; 3
    14b2:	fc 01       	movw	r30, r24
    14b4:	80 81       	ld	r24, Z
    14b6:	88 0f       	add	r24, r24
    14b8:	88 0f       	add	r24, r24
    14ba:	88 0f       	add	r24, r24
    14bc:	8c 93       	st	X, r24
    14be:	af ee       	ldi	r26, 0xEF	; 239
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	ef ee       	ldi	r30, 0xEF	; 239
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	80 61       	ori	r24, 0x10	; 16
    14ca:	8c 93       	st	X, r24
    14cc:	28 c0       	rjmp	.+80     	; 0x151e <__stack+0x41f>
          else              { Can_set_std_id(cmd->id.std);}
    14ce:	a3 ef       	ldi	r26, 0xF3	; 243
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	89 85       	ldd	r24, Y+9	; 0x09
    14d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d6:	03 96       	adiw	r24, 0x03	; 3
    14d8:	fc 01       	movw	r30, r24
    14da:	31 96       	adiw	r30, 0x01	; 1
    14dc:	80 81       	ld	r24, Z
    14de:	28 2f       	mov	r18, r24
    14e0:	22 95       	swap	r18
    14e2:	22 0f       	add	r18, r18
    14e4:	20 7e       	andi	r18, 0xE0	; 224
    14e6:	89 85       	ldd	r24, Y+9	; 0x09
    14e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ea:	03 96       	adiw	r24, 0x03	; 3
    14ec:	fc 01       	movw	r30, r24
    14ee:	80 81       	ld	r24, Z
    14f0:	86 95       	lsr	r24
    14f2:	86 95       	lsr	r24
    14f4:	86 95       	lsr	r24
    14f6:	82 0f       	add	r24, r18
    14f8:	8c 93       	st	X, r24
    14fa:	a2 ef       	ldi	r26, 0xF2	; 242
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	89 85       	ldd	r24, Y+9	; 0x09
    1500:	9a 85       	ldd	r25, Y+10	; 0x0a
    1502:	03 96       	adiw	r24, 0x03	; 3
    1504:	fc 01       	movw	r30, r24
    1506:	80 81       	ld	r24, Z
    1508:	82 95       	swap	r24
    150a:	88 0f       	add	r24, r24
    150c:	80 7e       	andi	r24, 0xE0	; 224
    150e:	8c 93       	st	X, r24
    1510:	af ee       	ldi	r26, 0xEF	; 239
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	ef ee       	ldi	r30, 0xEF	; 239
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	8f 7e       	andi	r24, 0xEF	; 239
    151c:	8c 93       	st	X, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    151e:	8f ef       	ldi	r24, 0xFF	; 255
    1520:	9f ef       	ldi	r25, 0xFF	; 255
    1522:	af ef       	ldi	r26, 0xFF	; 255
    1524:	bf ef       	ldi	r27, 0xFF	; 255
    1526:	8d 83       	std	Y+5, r24	; 0x05
    1528:	9e 83       	std	Y+6, r25	; 0x06
    152a:	af 83       	std	Y+7, r26	; 0x07
    152c:	b8 87       	std	Y+8, r27	; 0x08
    152e:	a7 ef       	ldi	r26, 0xF7	; 247
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	ce 01       	movw	r24, r28
    1534:	05 96       	adiw	r24, 0x05	; 5
    1536:	fc 01       	movw	r30, r24
    1538:	33 96       	adiw	r30, 0x03	; 3
    153a:	80 81       	ld	r24, Z
    153c:	28 2f       	mov	r18, r24
    153e:	22 0f       	add	r18, r18
    1540:	22 0f       	add	r18, r18
    1542:	22 0f       	add	r18, r18
    1544:	ce 01       	movw	r24, r28
    1546:	05 96       	adiw	r24, 0x05	; 5
    1548:	fc 01       	movw	r30, r24
    154a:	32 96       	adiw	r30, 0x02	; 2
    154c:	80 81       	ld	r24, Z
    154e:	82 95       	swap	r24
    1550:	86 95       	lsr	r24
    1552:	87 70       	andi	r24, 0x07	; 7
    1554:	82 0f       	add	r24, r18
    1556:	8c 93       	st	X, r24
    1558:	a6 ef       	ldi	r26, 0xF6	; 246
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	ce 01       	movw	r24, r28
    155e:	05 96       	adiw	r24, 0x05	; 5
    1560:	fc 01       	movw	r30, r24
    1562:	32 96       	adiw	r30, 0x02	; 2
    1564:	80 81       	ld	r24, Z
    1566:	28 2f       	mov	r18, r24
    1568:	22 0f       	add	r18, r18
    156a:	22 0f       	add	r18, r18
    156c:	22 0f       	add	r18, r18
    156e:	ce 01       	movw	r24, r28
    1570:	05 96       	adiw	r24, 0x05	; 5
    1572:	fc 01       	movw	r30, r24
    1574:	31 96       	adiw	r30, 0x01	; 1
    1576:	80 81       	ld	r24, Z
    1578:	82 95       	swap	r24
    157a:	86 95       	lsr	r24
    157c:	87 70       	andi	r24, 0x07	; 7
    157e:	82 0f       	add	r24, r18
    1580:	8c 93       	st	X, r24
    1582:	a5 ef       	ldi	r26, 0xF5	; 245
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	ce 01       	movw	r24, r28
    1588:	05 96       	adiw	r24, 0x05	; 5
    158a:	fc 01       	movw	r30, r24
    158c:	31 96       	adiw	r30, 0x01	; 1
    158e:	80 81       	ld	r24, Z
    1590:	98 2f       	mov	r25, r24
    1592:	99 0f       	add	r25, r25
    1594:	99 0f       	add	r25, r25
    1596:	99 0f       	add	r25, r25
    1598:	fe 01       	movw	r30, r28
    159a:	35 96       	adiw	r30, 0x05	; 5
    159c:	80 81       	ld	r24, Z
    159e:	82 95       	swap	r24
    15a0:	86 95       	lsr	r24
    15a2:	87 70       	andi	r24, 0x07	; 7
    15a4:	89 0f       	add	r24, r25
    15a6:	8c 93       	st	X, r24
    15a8:	a4 ef       	ldi	r26, 0xF4	; 244
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	fe 01       	movw	r30, r28
    15ae:	35 96       	adiw	r30, 0x05	; 5
    15b0:	80 81       	ld	r24, Z
    15b2:	88 0f       	add	r24, r24
    15b4:	88 0f       	add	r24, r24
    15b6:	88 0f       	add	r24, r24
    15b8:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    15ba:	af ee       	ldi	r26, 0xEF	; 239
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	ef ee       	ldi	r30, 0xEF	; 239
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	90 81       	ld	r25, Z
    15c4:	e9 85       	ldd	r30, Y+9	; 0x09
    15c6:	fa 85       	ldd	r31, Y+10	; 0x0a
    15c8:	87 81       	ldd	r24, Z+7	; 0x07
    15ca:	89 2b       	or	r24, r25
    15cc:	8c 93       	st	X, r24
          Can_clear_rtrmsk();
    15ce:	a4 ef       	ldi	r26, 0xF4	; 244
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	e4 ef       	ldi	r30, 0xF4	; 244
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	8b 7f       	andi	r24, 0xFB	; 251
    15da:	8c 93       	st	X, r24
          Can_set_idemsk();
    15dc:	a4 ef       	ldi	r26, 0xF4	; 244
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	e4 ef       	ldi	r30, 0xF4	; 244
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	81 60       	ori	r24, 0x01	; 1
    15e8:	8c 93       	st	X, r24
          Can_config_rx();       
    15ea:	af ee       	ldi	r26, 0xEF	; 239
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	ef ee       	ldi	r30, 0xEF	; 239
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	8f 73       	andi	r24, 0x3F	; 63
    15f6:	8c 93       	st	X, r24
    15f8:	af ee       	ldi	r26, 0xEF	; 239
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	ef ee       	ldi	r30, 0xEF	; 239
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	80 68       	ori	r24, 0x80	; 128
    1604:	8c 93       	st	X, r24
    1606:	dc c3       	rjmp	.+1976   	; 0x1dc0 <__stack+0xcc1>
          break;
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1608:	e9 85       	ldd	r30, Y+9	; 0x09
    160a:	fa 85       	ldd	r31, Y+10	; 0x0a
    160c:	84 85       	ldd	r24, Z+12	; 0x0c
    160e:	88 23       	and	r24, r24
    1610:	09 f4       	brne	.+2      	; 0x1614 <__stack+0x515>
    1612:	57 c0       	rjmp	.+174    	; 0x16c2 <__stack+0x5c3>
    1614:	a3 ef       	ldi	r26, 0xF3	; 243
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	89 85       	ldd	r24, Y+9	; 0x09
    161a:	9a 85       	ldd	r25, Y+10	; 0x0a
    161c:	03 96       	adiw	r24, 0x03	; 3
    161e:	fc 01       	movw	r30, r24
    1620:	33 96       	adiw	r30, 0x03	; 3
    1622:	80 81       	ld	r24, Z
    1624:	28 2f       	mov	r18, r24
    1626:	22 0f       	add	r18, r18
    1628:	22 0f       	add	r18, r18
    162a:	22 0f       	add	r18, r18
    162c:	89 85       	ldd	r24, Y+9	; 0x09
    162e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1630:	03 96       	adiw	r24, 0x03	; 3
    1632:	fc 01       	movw	r30, r24
    1634:	32 96       	adiw	r30, 0x02	; 2
    1636:	80 81       	ld	r24, Z
    1638:	82 95       	swap	r24
    163a:	86 95       	lsr	r24
    163c:	87 70       	andi	r24, 0x07	; 7
    163e:	82 0f       	add	r24, r18
    1640:	8c 93       	st	X, r24
    1642:	a2 ef       	ldi	r26, 0xF2	; 242
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	89 85       	ldd	r24, Y+9	; 0x09
    1648:	9a 85       	ldd	r25, Y+10	; 0x0a
    164a:	03 96       	adiw	r24, 0x03	; 3
    164c:	fc 01       	movw	r30, r24
    164e:	32 96       	adiw	r30, 0x02	; 2
    1650:	80 81       	ld	r24, Z
    1652:	28 2f       	mov	r18, r24
    1654:	22 0f       	add	r18, r18
    1656:	22 0f       	add	r18, r18
    1658:	22 0f       	add	r18, r18
    165a:	89 85       	ldd	r24, Y+9	; 0x09
    165c:	9a 85       	ldd	r25, Y+10	; 0x0a
    165e:	03 96       	adiw	r24, 0x03	; 3
    1660:	fc 01       	movw	r30, r24
    1662:	31 96       	adiw	r30, 0x01	; 1
    1664:	80 81       	ld	r24, Z
    1666:	82 95       	swap	r24
    1668:	86 95       	lsr	r24
    166a:	87 70       	andi	r24, 0x07	; 7
    166c:	82 0f       	add	r24, r18
    166e:	8c 93       	st	X, r24
    1670:	a1 ef       	ldi	r26, 0xF1	; 241
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	89 85       	ldd	r24, Y+9	; 0x09
    1676:	9a 85       	ldd	r25, Y+10	; 0x0a
    1678:	03 96       	adiw	r24, 0x03	; 3
    167a:	fc 01       	movw	r30, r24
    167c:	31 96       	adiw	r30, 0x01	; 1
    167e:	80 81       	ld	r24, Z
    1680:	28 2f       	mov	r18, r24
    1682:	22 0f       	add	r18, r18
    1684:	22 0f       	add	r18, r18
    1686:	22 0f       	add	r18, r18
    1688:	89 85       	ldd	r24, Y+9	; 0x09
    168a:	9a 85       	ldd	r25, Y+10	; 0x0a
    168c:	03 96       	adiw	r24, 0x03	; 3
    168e:	fc 01       	movw	r30, r24
    1690:	80 81       	ld	r24, Z
    1692:	82 95       	swap	r24
    1694:	86 95       	lsr	r24
    1696:	87 70       	andi	r24, 0x07	; 7
    1698:	82 0f       	add	r24, r18
    169a:	8c 93       	st	X, r24
    169c:	a0 ef       	ldi	r26, 0xF0	; 240
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	89 85       	ldd	r24, Y+9	; 0x09
    16a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a4:	03 96       	adiw	r24, 0x03	; 3
    16a6:	fc 01       	movw	r30, r24
    16a8:	80 81       	ld	r24, Z
    16aa:	88 0f       	add	r24, r24
    16ac:	88 0f       	add	r24, r24
    16ae:	88 0f       	add	r24, r24
    16b0:	8c 93       	st	X, r24
    16b2:	af ee       	ldi	r26, 0xEF	; 239
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	ef ee       	ldi	r30, 0xEF	; 239
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	80 61       	ori	r24, 0x10	; 16
    16be:	8c 93       	st	X, r24
    16c0:	28 c0       	rjmp	.+80     	; 0x1712 <__stack+0x613>
          else              { Can_set_std_id(cmd->id.std);}
    16c2:	a3 ef       	ldi	r26, 0xF3	; 243
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	89 85       	ldd	r24, Y+9	; 0x09
    16c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ca:	03 96       	adiw	r24, 0x03	; 3
    16cc:	fc 01       	movw	r30, r24
    16ce:	31 96       	adiw	r30, 0x01	; 1
    16d0:	80 81       	ld	r24, Z
    16d2:	28 2f       	mov	r18, r24
    16d4:	22 95       	swap	r18
    16d6:	22 0f       	add	r18, r18
    16d8:	20 7e       	andi	r18, 0xE0	; 224
    16da:	89 85       	ldd	r24, Y+9	; 0x09
    16dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    16de:	03 96       	adiw	r24, 0x03	; 3
    16e0:	fc 01       	movw	r30, r24
    16e2:	80 81       	ld	r24, Z
    16e4:	86 95       	lsr	r24
    16e6:	86 95       	lsr	r24
    16e8:	86 95       	lsr	r24
    16ea:	82 0f       	add	r24, r18
    16ec:	8c 93       	st	X, r24
    16ee:	a2 ef       	ldi	r26, 0xF2	; 242
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	89 85       	ldd	r24, Y+9	; 0x09
    16f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f6:	03 96       	adiw	r24, 0x03	; 3
    16f8:	fc 01       	movw	r30, r24
    16fa:	80 81       	ld	r24, Z
    16fc:	82 95       	swap	r24
    16fe:	88 0f       	add	r24, r24
    1700:	80 7e       	andi	r24, 0xE0	; 224
    1702:	8c 93       	st	X, r24
    1704:	af ee       	ldi	r26, 0xEF	; 239
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	ef ee       	ldi	r30, 0xEF	; 239
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	8f 7e       	andi	r24, 0xEF	; 239
    1710:	8c 93       	st	X, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    1712:	8f ef       	ldi	r24, 0xFF	; 255
    1714:	9f ef       	ldi	r25, 0xFF	; 255
    1716:	af ef       	ldi	r26, 0xFF	; 255
    1718:	bf ef       	ldi	r27, 0xFF	; 255
    171a:	8d 83       	std	Y+5, r24	; 0x05
    171c:	9e 83       	std	Y+6, r25	; 0x06
    171e:	af 83       	std	Y+7, r26	; 0x07
    1720:	b8 87       	std	Y+8, r27	; 0x08
    1722:	a7 ef       	ldi	r26, 0xF7	; 247
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	ce 01       	movw	r24, r28
    1728:	05 96       	adiw	r24, 0x05	; 5
    172a:	fc 01       	movw	r30, r24
    172c:	33 96       	adiw	r30, 0x03	; 3
    172e:	80 81       	ld	r24, Z
    1730:	28 2f       	mov	r18, r24
    1732:	22 0f       	add	r18, r18
    1734:	22 0f       	add	r18, r18
    1736:	22 0f       	add	r18, r18
    1738:	ce 01       	movw	r24, r28
    173a:	05 96       	adiw	r24, 0x05	; 5
    173c:	fc 01       	movw	r30, r24
    173e:	32 96       	adiw	r30, 0x02	; 2
    1740:	80 81       	ld	r24, Z
    1742:	82 95       	swap	r24
    1744:	86 95       	lsr	r24
    1746:	87 70       	andi	r24, 0x07	; 7
    1748:	82 0f       	add	r24, r18
    174a:	8c 93       	st	X, r24
    174c:	a6 ef       	ldi	r26, 0xF6	; 246
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	ce 01       	movw	r24, r28
    1752:	05 96       	adiw	r24, 0x05	; 5
    1754:	fc 01       	movw	r30, r24
    1756:	32 96       	adiw	r30, 0x02	; 2
    1758:	80 81       	ld	r24, Z
    175a:	28 2f       	mov	r18, r24
    175c:	22 0f       	add	r18, r18
    175e:	22 0f       	add	r18, r18
    1760:	22 0f       	add	r18, r18
    1762:	ce 01       	movw	r24, r28
    1764:	05 96       	adiw	r24, 0x05	; 5
    1766:	fc 01       	movw	r30, r24
    1768:	31 96       	adiw	r30, 0x01	; 1
    176a:	80 81       	ld	r24, Z
    176c:	82 95       	swap	r24
    176e:	86 95       	lsr	r24
    1770:	87 70       	andi	r24, 0x07	; 7
    1772:	82 0f       	add	r24, r18
    1774:	8c 93       	st	X, r24
    1776:	a5 ef       	ldi	r26, 0xF5	; 245
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	ce 01       	movw	r24, r28
    177c:	05 96       	adiw	r24, 0x05	; 5
    177e:	fc 01       	movw	r30, r24
    1780:	31 96       	adiw	r30, 0x01	; 1
    1782:	80 81       	ld	r24, Z
    1784:	98 2f       	mov	r25, r24
    1786:	99 0f       	add	r25, r25
    1788:	99 0f       	add	r25, r25
    178a:	99 0f       	add	r25, r25
    178c:	fe 01       	movw	r30, r28
    178e:	35 96       	adiw	r30, 0x05	; 5
    1790:	80 81       	ld	r24, Z
    1792:	82 95       	swap	r24
    1794:	86 95       	lsr	r24
    1796:	87 70       	andi	r24, 0x07	; 7
    1798:	89 0f       	add	r24, r25
    179a:	8c 93       	st	X, r24
    179c:	a4 ef       	ldi	r26, 0xF4	; 244
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	fe 01       	movw	r30, r28
    17a2:	35 96       	adiw	r30, 0x05	; 5
    17a4:	80 81       	ld	r24, Z
    17a6:	88 0f       	add	r24, r24
    17a8:	88 0f       	add	r24, r24
    17aa:	88 0f       	add	r24, r24
    17ac:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    17ae:	af ee       	ldi	r26, 0xEF	; 239
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	ef ee       	ldi	r30, 0xEF	; 239
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	90 81       	ld	r25, Z
    17b8:	e9 85       	ldd	r30, Y+9	; 0x09
    17ba:	fa 85       	ldd	r31, Y+10	; 0x0a
    17bc:	87 81       	ldd	r24, Z+7	; 0x07
    17be:	89 2b       	or	r24, r25
    17c0:	8c 93       	st	X, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    17c2:	e9 85       	ldd	r30, Y+9	; 0x09
    17c4:	fa 85       	ldd	r31, Y+10	; 0x0a
    17c6:	13 86       	std	Z+11, r1	; 0x0b
    17c8:	a4 ef       	ldi	r26, 0xF4	; 244
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	e4 ef       	ldi	r30, 0xF4	; 244
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	84 60       	ori	r24, 0x04	; 4
    17d4:	8c 93       	st	X, r24
    17d6:	a0 ef       	ldi	r26, 0xF0	; 240
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	e0 ef       	ldi	r30, 0xF0	; 240
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	8b 7f       	andi	r24, 0xFB	; 251
    17e2:	8c 93       	st	X, r24
          Can_set_idemsk();
    17e4:	a4 ef       	ldi	r26, 0xF4	; 244
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	e4 ef       	ldi	r30, 0xF4	; 244
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	81 60       	ori	r24, 0x01	; 1
    17f0:	8c 93       	st	X, r24
          Can_config_rx();       
    17f2:	af ee       	ldi	r26, 0xEF	; 239
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	ef ee       	ldi	r30, 0xEF	; 239
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	8f 73       	andi	r24, 0x3F	; 63
    17fe:	8c 93       	st	X, r24
    1800:	af ee       	ldi	r26, 0xEF	; 239
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	ef ee       	ldi	r30, 0xEF	; 239
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	80 68       	ori	r24, 0x80	; 128
    180c:	8c 93       	st	X, r24
    180e:	d8 c2       	rjmp	.+1456   	; 0x1dc0 <__stack+0xcc1>
          break;
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1810:	e9 85       	ldd	r30, Y+9	; 0x09
    1812:	fa 85       	ldd	r31, Y+10	; 0x0a
    1814:	84 85       	ldd	r24, Z+12	; 0x0c
    1816:	88 23       	and	r24, r24
    1818:	09 f4       	brne	.+2      	; 0x181c <__stack+0x71d>
    181a:	57 c0       	rjmp	.+174    	; 0x18ca <__stack+0x7cb>
    181c:	a3 ef       	ldi	r26, 0xF3	; 243
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	89 85       	ldd	r24, Y+9	; 0x09
    1822:	9a 85       	ldd	r25, Y+10	; 0x0a
    1824:	03 96       	adiw	r24, 0x03	; 3
    1826:	fc 01       	movw	r30, r24
    1828:	33 96       	adiw	r30, 0x03	; 3
    182a:	80 81       	ld	r24, Z
    182c:	28 2f       	mov	r18, r24
    182e:	22 0f       	add	r18, r18
    1830:	22 0f       	add	r18, r18
    1832:	22 0f       	add	r18, r18
    1834:	89 85       	ldd	r24, Y+9	; 0x09
    1836:	9a 85       	ldd	r25, Y+10	; 0x0a
    1838:	03 96       	adiw	r24, 0x03	; 3
    183a:	fc 01       	movw	r30, r24
    183c:	32 96       	adiw	r30, 0x02	; 2
    183e:	80 81       	ld	r24, Z
    1840:	82 95       	swap	r24
    1842:	86 95       	lsr	r24
    1844:	87 70       	andi	r24, 0x07	; 7
    1846:	82 0f       	add	r24, r18
    1848:	8c 93       	st	X, r24
    184a:	a2 ef       	ldi	r26, 0xF2	; 242
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	89 85       	ldd	r24, Y+9	; 0x09
    1850:	9a 85       	ldd	r25, Y+10	; 0x0a
    1852:	03 96       	adiw	r24, 0x03	; 3
    1854:	fc 01       	movw	r30, r24
    1856:	32 96       	adiw	r30, 0x02	; 2
    1858:	80 81       	ld	r24, Z
    185a:	28 2f       	mov	r18, r24
    185c:	22 0f       	add	r18, r18
    185e:	22 0f       	add	r18, r18
    1860:	22 0f       	add	r18, r18
    1862:	89 85       	ldd	r24, Y+9	; 0x09
    1864:	9a 85       	ldd	r25, Y+10	; 0x0a
    1866:	03 96       	adiw	r24, 0x03	; 3
    1868:	fc 01       	movw	r30, r24
    186a:	31 96       	adiw	r30, 0x01	; 1
    186c:	80 81       	ld	r24, Z
    186e:	82 95       	swap	r24
    1870:	86 95       	lsr	r24
    1872:	87 70       	andi	r24, 0x07	; 7
    1874:	82 0f       	add	r24, r18
    1876:	8c 93       	st	X, r24
    1878:	a1 ef       	ldi	r26, 0xF1	; 241
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	89 85       	ldd	r24, Y+9	; 0x09
    187e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1880:	03 96       	adiw	r24, 0x03	; 3
    1882:	fc 01       	movw	r30, r24
    1884:	31 96       	adiw	r30, 0x01	; 1
    1886:	80 81       	ld	r24, Z
    1888:	28 2f       	mov	r18, r24
    188a:	22 0f       	add	r18, r18
    188c:	22 0f       	add	r18, r18
    188e:	22 0f       	add	r18, r18
    1890:	89 85       	ldd	r24, Y+9	; 0x09
    1892:	9a 85       	ldd	r25, Y+10	; 0x0a
    1894:	03 96       	adiw	r24, 0x03	; 3
    1896:	fc 01       	movw	r30, r24
    1898:	80 81       	ld	r24, Z
    189a:	82 95       	swap	r24
    189c:	86 95       	lsr	r24
    189e:	87 70       	andi	r24, 0x07	; 7
    18a0:	82 0f       	add	r24, r18
    18a2:	8c 93       	st	X, r24
    18a4:	a0 ef       	ldi	r26, 0xF0	; 240
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	89 85       	ldd	r24, Y+9	; 0x09
    18aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ac:	03 96       	adiw	r24, 0x03	; 3
    18ae:	fc 01       	movw	r30, r24
    18b0:	80 81       	ld	r24, Z
    18b2:	88 0f       	add	r24, r24
    18b4:	88 0f       	add	r24, r24
    18b6:	88 0f       	add	r24, r24
    18b8:	8c 93       	st	X, r24
    18ba:	af ee       	ldi	r26, 0xEF	; 239
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	ef ee       	ldi	r30, 0xEF	; 239
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	80 61       	ori	r24, 0x10	; 16
    18c6:	8c 93       	st	X, r24
    18c8:	28 c0       	rjmp	.+80     	; 0x191a <__stack+0x81b>
          else              { Can_set_std_id(cmd->id.std);}
    18ca:	a3 ef       	ldi	r26, 0xF3	; 243
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	89 85       	ldd	r24, Y+9	; 0x09
    18d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18d2:	03 96       	adiw	r24, 0x03	; 3
    18d4:	fc 01       	movw	r30, r24
    18d6:	31 96       	adiw	r30, 0x01	; 1
    18d8:	80 81       	ld	r24, Z
    18da:	28 2f       	mov	r18, r24
    18dc:	22 95       	swap	r18
    18de:	22 0f       	add	r18, r18
    18e0:	20 7e       	andi	r18, 0xE0	; 224
    18e2:	89 85       	ldd	r24, Y+9	; 0x09
    18e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e6:	03 96       	adiw	r24, 0x03	; 3
    18e8:	fc 01       	movw	r30, r24
    18ea:	80 81       	ld	r24, Z
    18ec:	86 95       	lsr	r24
    18ee:	86 95       	lsr	r24
    18f0:	86 95       	lsr	r24
    18f2:	82 0f       	add	r24, r18
    18f4:	8c 93       	st	X, r24
    18f6:	a2 ef       	ldi	r26, 0xF2	; 242
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	89 85       	ldd	r24, Y+9	; 0x09
    18fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    18fe:	03 96       	adiw	r24, 0x03	; 3
    1900:	fc 01       	movw	r30, r24
    1902:	80 81       	ld	r24, Z
    1904:	82 95       	swap	r24
    1906:	88 0f       	add	r24, r24
    1908:	80 7e       	andi	r24, 0xE0	; 224
    190a:	8c 93       	st	X, r24
    190c:	af ee       	ldi	r26, 0xEF	; 239
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	ef ee       	ldi	r30, 0xEF	; 239
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	8f 7e       	andi	r24, 0xEF	; 239
    1918:	8c 93       	st	X, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    191a:	8f ef       	ldi	r24, 0xFF	; 255
    191c:	9f ef       	ldi	r25, 0xFF	; 255
    191e:	af ef       	ldi	r26, 0xFF	; 255
    1920:	bf ef       	ldi	r27, 0xFF	; 255
    1922:	8d 83       	std	Y+5, r24	; 0x05
    1924:	9e 83       	std	Y+6, r25	; 0x06
    1926:	af 83       	std	Y+7, r26	; 0x07
    1928:	b8 87       	std	Y+8, r27	; 0x08
    192a:	a7 ef       	ldi	r26, 0xF7	; 247
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	ce 01       	movw	r24, r28
    1930:	05 96       	adiw	r24, 0x05	; 5
    1932:	fc 01       	movw	r30, r24
    1934:	33 96       	adiw	r30, 0x03	; 3
    1936:	80 81       	ld	r24, Z
    1938:	28 2f       	mov	r18, r24
    193a:	22 0f       	add	r18, r18
    193c:	22 0f       	add	r18, r18
    193e:	22 0f       	add	r18, r18
    1940:	ce 01       	movw	r24, r28
    1942:	05 96       	adiw	r24, 0x05	; 5
    1944:	fc 01       	movw	r30, r24
    1946:	32 96       	adiw	r30, 0x02	; 2
    1948:	80 81       	ld	r24, Z
    194a:	82 95       	swap	r24
    194c:	86 95       	lsr	r24
    194e:	87 70       	andi	r24, 0x07	; 7
    1950:	82 0f       	add	r24, r18
    1952:	8c 93       	st	X, r24
    1954:	a6 ef       	ldi	r26, 0xF6	; 246
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	ce 01       	movw	r24, r28
    195a:	05 96       	adiw	r24, 0x05	; 5
    195c:	fc 01       	movw	r30, r24
    195e:	32 96       	adiw	r30, 0x02	; 2
    1960:	80 81       	ld	r24, Z
    1962:	28 2f       	mov	r18, r24
    1964:	22 0f       	add	r18, r18
    1966:	22 0f       	add	r18, r18
    1968:	22 0f       	add	r18, r18
    196a:	ce 01       	movw	r24, r28
    196c:	05 96       	adiw	r24, 0x05	; 5
    196e:	fc 01       	movw	r30, r24
    1970:	31 96       	adiw	r30, 0x01	; 1
    1972:	80 81       	ld	r24, Z
    1974:	82 95       	swap	r24
    1976:	86 95       	lsr	r24
    1978:	87 70       	andi	r24, 0x07	; 7
    197a:	82 0f       	add	r24, r18
    197c:	8c 93       	st	X, r24
    197e:	a5 ef       	ldi	r26, 0xF5	; 245
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	ce 01       	movw	r24, r28
    1984:	05 96       	adiw	r24, 0x05	; 5
    1986:	fc 01       	movw	r30, r24
    1988:	31 96       	adiw	r30, 0x01	; 1
    198a:	80 81       	ld	r24, Z
    198c:	98 2f       	mov	r25, r24
    198e:	99 0f       	add	r25, r25
    1990:	99 0f       	add	r25, r25
    1992:	99 0f       	add	r25, r25
    1994:	fe 01       	movw	r30, r28
    1996:	35 96       	adiw	r30, 0x05	; 5
    1998:	80 81       	ld	r24, Z
    199a:	82 95       	swap	r24
    199c:	86 95       	lsr	r24
    199e:	87 70       	andi	r24, 0x07	; 7
    19a0:	89 0f       	add	r24, r25
    19a2:	8c 93       	st	X, r24
    19a4:	a4 ef       	ldi	r26, 0xF4	; 244
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	fe 01       	movw	r30, r28
    19aa:	35 96       	adiw	r30, 0x05	; 5
    19ac:	80 81       	ld	r24, Z
    19ae:	88 0f       	add	r24, r24
    19b0:	88 0f       	add	r24, r24
    19b2:	88 0f       	add	r24, r24
    19b4:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    19b6:	af ee       	ldi	r26, 0xEF	; 239
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	ef ee       	ldi	r30, 0xEF	; 239
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	90 81       	ld	r25, Z
    19c0:	e9 85       	ldd	r30, Y+9	; 0x09
    19c2:	fa 85       	ldd	r31, Y+10	; 0x0a
    19c4:	87 81       	ldd	r24, Z+7	; 0x07
    19c6:	89 2b       	or	r24, r25
    19c8:	8c 93       	st	X, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    19ca:	e9 85       	ldd	r30, Y+9	; 0x09
    19cc:	fa 85       	ldd	r31, Y+10	; 0x0a
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	83 87       	std	Z+11, r24	; 0x0b
    19d2:	a4 ef       	ldi	r26, 0xF4	; 244
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	e4 ef       	ldi	r30, 0xF4	; 244
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	84 60       	ori	r24, 0x04	; 4
    19de:	8c 93       	st	X, r24
    19e0:	a0 ef       	ldi	r26, 0xF0	; 240
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	e0 ef       	ldi	r30, 0xF0	; 240
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	84 60       	ori	r24, 0x04	; 4
    19ec:	8c 93       	st	X, r24
          Can_clear_rplv();
    19ee:	af ee       	ldi	r26, 0xEF	; 239
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	ef ee       	ldi	r30, 0xEF	; 239
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	8f 7d       	andi	r24, 0xDF	; 223
    19fa:	8c 93       	st	X, r24
          Can_set_idemsk();
    19fc:	a4 ef       	ldi	r26, 0xF4	; 244
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	e4 ef       	ldi	r30, 0xF4	; 244
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	81 60       	ori	r24, 0x01	; 1
    1a08:	8c 93       	st	X, r24
          Can_config_rx();       
    1a0a:	af ee       	ldi	r26, 0xEF	; 239
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	ef ee       	ldi	r30, 0xEF	; 239
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	8f 73       	andi	r24, 0x3F	; 63
    1a16:	8c 93       	st	X, r24
    1a18:	af ee       	ldi	r26, 0xEF	; 239
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	ef ee       	ldi	r30, 0xEF	; 239
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	80 68       	ori	r24, 0x80	; 128
    1a24:	8c 93       	st	X, r24
    1a26:	cc c1       	rjmp	.+920    	; 0x1dc0 <__stack+0xcc1>
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    1a28:	1b 82       	std	Y+3, r1	; 0x03
    1a2a:	11 c0       	rjmp	.+34     	; 0x1a4e <__stack+0x94f>
    1a2c:	aa ef       	ldi	r26, 0xFA	; 250
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	e9 85       	ldd	r30, Y+9	; 0x09
    1a32:	fa 85       	ldd	r31, Y+10	; 0x0a
    1a34:	20 85       	ldd	r18, Z+8	; 0x08
    1a36:	31 85       	ldd	r19, Z+9	; 0x09
    1a38:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3a:	88 2f       	mov	r24, r24
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	f9 01       	movw	r30, r18
    1a40:	e8 0f       	add	r30, r24
    1a42:	f9 1f       	adc	r31, r25
    1a44:	80 81       	ld	r24, Z
    1a46:	8c 93       	st	X, r24
    1a48:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4a:	8f 5f       	subi	r24, 0xFF	; 255
    1a4c:	8b 83       	std	Y+3, r24	; 0x03
    1a4e:	e9 85       	ldd	r30, Y+9	; 0x09
    1a50:	fa 85       	ldd	r31, Y+10	; 0x0a
    1a52:	97 81       	ldd	r25, Z+7	; 0x07
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	89 17       	cp	r24, r25
    1a58:	48 f3       	brcs	.-46     	; 0x1a2c <__stack+0x92d>
          u32_temp=0; Can_set_ext_msk(u32_temp);
    1a5a:	1d 82       	std	Y+5, r1	; 0x05
    1a5c:	1e 82       	std	Y+6, r1	; 0x06
    1a5e:	1f 82       	std	Y+7, r1	; 0x07
    1a60:	18 86       	std	Y+8, r1	; 0x08
    1a62:	a7 ef       	ldi	r26, 0xF7	; 247
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	ce 01       	movw	r24, r28
    1a68:	05 96       	adiw	r24, 0x05	; 5
    1a6a:	fc 01       	movw	r30, r24
    1a6c:	33 96       	adiw	r30, 0x03	; 3
    1a6e:	80 81       	ld	r24, Z
    1a70:	28 2f       	mov	r18, r24
    1a72:	22 0f       	add	r18, r18
    1a74:	22 0f       	add	r18, r18
    1a76:	22 0f       	add	r18, r18
    1a78:	ce 01       	movw	r24, r28
    1a7a:	05 96       	adiw	r24, 0x05	; 5
    1a7c:	fc 01       	movw	r30, r24
    1a7e:	32 96       	adiw	r30, 0x02	; 2
    1a80:	80 81       	ld	r24, Z
    1a82:	82 95       	swap	r24
    1a84:	86 95       	lsr	r24
    1a86:	87 70       	andi	r24, 0x07	; 7
    1a88:	82 0f       	add	r24, r18
    1a8a:	8c 93       	st	X, r24
    1a8c:	a6 ef       	ldi	r26, 0xF6	; 246
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	ce 01       	movw	r24, r28
    1a92:	05 96       	adiw	r24, 0x05	; 5
    1a94:	fc 01       	movw	r30, r24
    1a96:	32 96       	adiw	r30, 0x02	; 2
    1a98:	80 81       	ld	r24, Z
    1a9a:	28 2f       	mov	r18, r24
    1a9c:	22 0f       	add	r18, r18
    1a9e:	22 0f       	add	r18, r18
    1aa0:	22 0f       	add	r18, r18
    1aa2:	ce 01       	movw	r24, r28
    1aa4:	05 96       	adiw	r24, 0x05	; 5
    1aa6:	fc 01       	movw	r30, r24
    1aa8:	31 96       	adiw	r30, 0x01	; 1
    1aaa:	80 81       	ld	r24, Z
    1aac:	82 95       	swap	r24
    1aae:	86 95       	lsr	r24
    1ab0:	87 70       	andi	r24, 0x07	; 7
    1ab2:	82 0f       	add	r24, r18
    1ab4:	8c 93       	st	X, r24
    1ab6:	a5 ef       	ldi	r26, 0xF5	; 245
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	ce 01       	movw	r24, r28
    1abc:	05 96       	adiw	r24, 0x05	; 5
    1abe:	fc 01       	movw	r30, r24
    1ac0:	31 96       	adiw	r30, 0x01	; 1
    1ac2:	80 81       	ld	r24, Z
    1ac4:	98 2f       	mov	r25, r24
    1ac6:	99 0f       	add	r25, r25
    1ac8:	99 0f       	add	r25, r25
    1aca:	99 0f       	add	r25, r25
    1acc:	fe 01       	movw	r30, r28
    1ace:	35 96       	adiw	r30, 0x05	; 5
    1ad0:	80 81       	ld	r24, Z
    1ad2:	82 95       	swap	r24
    1ad4:	86 95       	lsr	r24
    1ad6:	87 70       	andi	r24, 0x07	; 7
    1ad8:	89 0f       	add	r24, r25
    1ada:	8c 93       	st	X, r24
    1adc:	a4 ef       	ldi	r26, 0xF4	; 244
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	fe 01       	movw	r30, r28
    1ae2:	35 96       	adiw	r30, 0x05	; 5
    1ae4:	80 81       	ld	r24, Z
    1ae6:	88 0f       	add	r24, r24
    1ae8:	88 0f       	add	r24, r24
    1aea:	88 0f       	add	r24, r24
    1aec:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    1aee:	af ee       	ldi	r26, 0xEF	; 239
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	ef ee       	ldi	r30, 0xEF	; 239
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	90 81       	ld	r25, Z
    1af8:	e9 85       	ldd	r30, Y+9	; 0x09
    1afa:	fa 85       	ldd	r31, Y+10	; 0x0a
    1afc:	87 81       	ldd	r24, Z+7	; 0x07
    1afe:	89 2b       	or	r24, r25
    1b00:	8c 93       	st	X, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1b02:	e9 85       	ldd	r30, Y+9	; 0x09
    1b04:	fa 85       	ldd	r31, Y+10	; 0x0a
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	83 87       	std	Z+11, r24	; 0x0b
    1b0a:	a4 ef       	ldi	r26, 0xF4	; 244
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	e4 ef       	ldi	r30, 0xF4	; 244
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	84 60       	ori	r24, 0x04	; 4
    1b16:	8c 93       	st	X, r24
    1b18:	a0 ef       	ldi	r26, 0xF0	; 240
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	e0 ef       	ldi	r30, 0xF0	; 240
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	84 60       	ori	r24, 0x04	; 4
    1b24:	8c 93       	st	X, r24
          Can_set_rplv();
    1b26:	af ee       	ldi	r26, 0xEF	; 239
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	ef ee       	ldi	r30, 0xEF	; 239
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	80 81       	ld	r24, Z
    1b30:	80 62       	ori	r24, 0x20	; 32
    1b32:	8c 93       	st	X, r24
          Can_clear_idemsk();
    1b34:	a4 ef       	ldi	r26, 0xF4	; 244
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	e4 ef       	ldi	r30, 0xF4	; 244
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	8e 7f       	andi	r24, 0xFE	; 254
    1b40:	8c 93       	st	X, r24
          Can_config_rx();       
    1b42:	af ee       	ldi	r26, 0xEF	; 239
    1b44:	b0 e0       	ldi	r27, 0x00	; 0
    1b46:	ef ee       	ldi	r30, 0xEF	; 239
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	80 81       	ld	r24, Z
    1b4c:	8f 73       	andi	r24, 0x3F	; 63
    1b4e:	8c 93       	st	X, r24
    1b50:	af ee       	ldi	r26, 0xEF	; 239
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	ef ee       	ldi	r30, 0xEF	; 239
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	80 68       	ori	r24, 0x80	; 128
    1b5c:	8c 93       	st	X, r24
    1b5e:	30 c1       	rjmp	.+608    	; 0x1dc0 <__stack+0xcc1>
          break;
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1b60:	e9 85       	ldd	r30, Y+9	; 0x09
    1b62:	fa 85       	ldd	r31, Y+10	; 0x0a
    1b64:	84 85       	ldd	r24, Z+12	; 0x0c
    1b66:	88 23       	and	r24, r24
    1b68:	09 f4       	brne	.+2      	; 0x1b6c <__stack+0xa6d>
    1b6a:	57 c0       	rjmp	.+174    	; 0x1c1a <__stack+0xb1b>
    1b6c:	a3 ef       	ldi	r26, 0xF3	; 243
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	89 85       	ldd	r24, Y+9	; 0x09
    1b72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b74:	03 96       	adiw	r24, 0x03	; 3
    1b76:	fc 01       	movw	r30, r24
    1b78:	33 96       	adiw	r30, 0x03	; 3
    1b7a:	80 81       	ld	r24, Z
    1b7c:	28 2f       	mov	r18, r24
    1b7e:	22 0f       	add	r18, r18
    1b80:	22 0f       	add	r18, r18
    1b82:	22 0f       	add	r18, r18
    1b84:	89 85       	ldd	r24, Y+9	; 0x09
    1b86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b88:	03 96       	adiw	r24, 0x03	; 3
    1b8a:	fc 01       	movw	r30, r24
    1b8c:	32 96       	adiw	r30, 0x02	; 2
    1b8e:	80 81       	ld	r24, Z
    1b90:	82 95       	swap	r24
    1b92:	86 95       	lsr	r24
    1b94:	87 70       	andi	r24, 0x07	; 7
    1b96:	82 0f       	add	r24, r18
    1b98:	8c 93       	st	X, r24
    1b9a:	a2 ef       	ldi	r26, 0xF2	; 242
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	89 85       	ldd	r24, Y+9	; 0x09
    1ba0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba2:	03 96       	adiw	r24, 0x03	; 3
    1ba4:	fc 01       	movw	r30, r24
    1ba6:	32 96       	adiw	r30, 0x02	; 2
    1ba8:	80 81       	ld	r24, Z
    1baa:	28 2f       	mov	r18, r24
    1bac:	22 0f       	add	r18, r18
    1bae:	22 0f       	add	r18, r18
    1bb0:	22 0f       	add	r18, r18
    1bb2:	89 85       	ldd	r24, Y+9	; 0x09
    1bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb6:	03 96       	adiw	r24, 0x03	; 3
    1bb8:	fc 01       	movw	r30, r24
    1bba:	31 96       	adiw	r30, 0x01	; 1
    1bbc:	80 81       	ld	r24, Z
    1bbe:	82 95       	swap	r24
    1bc0:	86 95       	lsr	r24
    1bc2:	87 70       	andi	r24, 0x07	; 7
    1bc4:	82 0f       	add	r24, r18
    1bc6:	8c 93       	st	X, r24
    1bc8:	a1 ef       	ldi	r26, 0xF1	; 241
    1bca:	b0 e0       	ldi	r27, 0x00	; 0
    1bcc:	89 85       	ldd	r24, Y+9	; 0x09
    1bce:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd0:	03 96       	adiw	r24, 0x03	; 3
    1bd2:	fc 01       	movw	r30, r24
    1bd4:	31 96       	adiw	r30, 0x01	; 1
    1bd6:	80 81       	ld	r24, Z
    1bd8:	28 2f       	mov	r18, r24
    1bda:	22 0f       	add	r18, r18
    1bdc:	22 0f       	add	r18, r18
    1bde:	22 0f       	add	r18, r18
    1be0:	89 85       	ldd	r24, Y+9	; 0x09
    1be2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be4:	03 96       	adiw	r24, 0x03	; 3
    1be6:	fc 01       	movw	r30, r24
    1be8:	80 81       	ld	r24, Z
    1bea:	82 95       	swap	r24
    1bec:	86 95       	lsr	r24
    1bee:	87 70       	andi	r24, 0x07	; 7
    1bf0:	82 0f       	add	r24, r18
    1bf2:	8c 93       	st	X, r24
    1bf4:	a0 ef       	ldi	r26, 0xF0	; 240
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	89 85       	ldd	r24, Y+9	; 0x09
    1bfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bfc:	03 96       	adiw	r24, 0x03	; 3
    1bfe:	fc 01       	movw	r30, r24
    1c00:	80 81       	ld	r24, Z
    1c02:	88 0f       	add	r24, r24
    1c04:	88 0f       	add	r24, r24
    1c06:	88 0f       	add	r24, r24
    1c08:	8c 93       	st	X, r24
    1c0a:	af ee       	ldi	r26, 0xEF	; 239
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	ef ee       	ldi	r30, 0xEF	; 239
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	80 61       	ori	r24, 0x10	; 16
    1c16:	8c 93       	st	X, r24
    1c18:	28 c0       	rjmp	.+80     	; 0x1c6a <__stack+0xb6b>
          else              { Can_set_std_id(cmd->id.std);}
    1c1a:	a3 ef       	ldi	r26, 0xF3	; 243
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	89 85       	ldd	r24, Y+9	; 0x09
    1c20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c22:	03 96       	adiw	r24, 0x03	; 3
    1c24:	fc 01       	movw	r30, r24
    1c26:	31 96       	adiw	r30, 0x01	; 1
    1c28:	80 81       	ld	r24, Z
    1c2a:	28 2f       	mov	r18, r24
    1c2c:	22 95       	swap	r18
    1c2e:	22 0f       	add	r18, r18
    1c30:	20 7e       	andi	r18, 0xE0	; 224
    1c32:	89 85       	ldd	r24, Y+9	; 0x09
    1c34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c36:	03 96       	adiw	r24, 0x03	; 3
    1c38:	fc 01       	movw	r30, r24
    1c3a:	80 81       	ld	r24, Z
    1c3c:	86 95       	lsr	r24
    1c3e:	86 95       	lsr	r24
    1c40:	86 95       	lsr	r24
    1c42:	82 0f       	add	r24, r18
    1c44:	8c 93       	st	X, r24
    1c46:	a2 ef       	ldi	r26, 0xF2	; 242
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	89 85       	ldd	r24, Y+9	; 0x09
    1c4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4e:	03 96       	adiw	r24, 0x03	; 3
    1c50:	fc 01       	movw	r30, r24
    1c52:	80 81       	ld	r24, Z
    1c54:	82 95       	swap	r24
    1c56:	88 0f       	add	r24, r24
    1c58:	80 7e       	andi	r24, 0xE0	; 224
    1c5a:	8c 93       	st	X, r24
    1c5c:	af ee       	ldi	r26, 0xEF	; 239
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	ef ee       	ldi	r30, 0xEF	; 239
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	8f 7e       	andi	r24, 0xEF	; 239
    1c68:	8c 93       	st	X, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    1c6a:	1b 82       	std	Y+3, r1	; 0x03
    1c6c:	11 c0       	rjmp	.+34     	; 0x1c90 <__stack+0xb91>
    1c6e:	aa ef       	ldi	r26, 0xFA	; 250
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	e9 85       	ldd	r30, Y+9	; 0x09
    1c74:	fa 85       	ldd	r31, Y+10	; 0x0a
    1c76:	20 85       	ldd	r18, Z+8	; 0x08
    1c78:	31 85       	ldd	r19, Z+9	; 0x09
    1c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7c:	88 2f       	mov	r24, r24
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	f9 01       	movw	r30, r18
    1c82:	e8 0f       	add	r30, r24
    1c84:	f9 1f       	adc	r31, r25
    1c86:	80 81       	ld	r24, Z
    1c88:	8c 93       	st	X, r24
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	8f 5f       	subi	r24, 0xFF	; 255
    1c8e:	8b 83       	std	Y+3, r24	; 0x03
    1c90:	e9 85       	ldd	r30, Y+9	; 0x09
    1c92:	fa 85       	ldd	r31, Y+10	; 0x0a
    1c94:	97 81       	ldd	r25, Z+7	; 0x07
    1c96:	8b 81       	ldd	r24, Y+3	; 0x03
    1c98:	89 17       	cp	r24, r25
    1c9a:	48 f3       	brcs	.-46     	; 0x1c6e <__stack+0xb6f>
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    1c9c:	8f ef       	ldi	r24, 0xFF	; 255
    1c9e:	9f ef       	ldi	r25, 0xFF	; 255
    1ca0:	af ef       	ldi	r26, 0xFF	; 255
    1ca2:	bf ef       	ldi	r27, 0xFF	; 255
    1ca4:	8d 83       	std	Y+5, r24	; 0x05
    1ca6:	9e 83       	std	Y+6, r25	; 0x06
    1ca8:	af 83       	std	Y+7, r26	; 0x07
    1caa:	b8 87       	std	Y+8, r27	; 0x08
    1cac:	a7 ef       	ldi	r26, 0xF7	; 247
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	ce 01       	movw	r24, r28
    1cb2:	05 96       	adiw	r24, 0x05	; 5
    1cb4:	fc 01       	movw	r30, r24
    1cb6:	33 96       	adiw	r30, 0x03	; 3
    1cb8:	80 81       	ld	r24, Z
    1cba:	28 2f       	mov	r18, r24
    1cbc:	22 0f       	add	r18, r18
    1cbe:	22 0f       	add	r18, r18
    1cc0:	22 0f       	add	r18, r18
    1cc2:	ce 01       	movw	r24, r28
    1cc4:	05 96       	adiw	r24, 0x05	; 5
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	32 96       	adiw	r30, 0x02	; 2
    1cca:	80 81       	ld	r24, Z
    1ccc:	82 95       	swap	r24
    1cce:	86 95       	lsr	r24
    1cd0:	87 70       	andi	r24, 0x07	; 7
    1cd2:	82 0f       	add	r24, r18
    1cd4:	8c 93       	st	X, r24
    1cd6:	a6 ef       	ldi	r26, 0xF6	; 246
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	ce 01       	movw	r24, r28
    1cdc:	05 96       	adiw	r24, 0x05	; 5
    1cde:	fc 01       	movw	r30, r24
    1ce0:	32 96       	adiw	r30, 0x02	; 2
    1ce2:	80 81       	ld	r24, Z
    1ce4:	28 2f       	mov	r18, r24
    1ce6:	22 0f       	add	r18, r18
    1ce8:	22 0f       	add	r18, r18
    1cea:	22 0f       	add	r18, r18
    1cec:	ce 01       	movw	r24, r28
    1cee:	05 96       	adiw	r24, 0x05	; 5
    1cf0:	fc 01       	movw	r30, r24
    1cf2:	31 96       	adiw	r30, 0x01	; 1
    1cf4:	80 81       	ld	r24, Z
    1cf6:	82 95       	swap	r24
    1cf8:	86 95       	lsr	r24
    1cfa:	87 70       	andi	r24, 0x07	; 7
    1cfc:	82 0f       	add	r24, r18
    1cfe:	8c 93       	st	X, r24
    1d00:	a5 ef       	ldi	r26, 0xF5	; 245
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	ce 01       	movw	r24, r28
    1d06:	05 96       	adiw	r24, 0x05	; 5
    1d08:	fc 01       	movw	r30, r24
    1d0a:	31 96       	adiw	r30, 0x01	; 1
    1d0c:	80 81       	ld	r24, Z
    1d0e:	98 2f       	mov	r25, r24
    1d10:	99 0f       	add	r25, r25
    1d12:	99 0f       	add	r25, r25
    1d14:	99 0f       	add	r25, r25
    1d16:	fe 01       	movw	r30, r28
    1d18:	35 96       	adiw	r30, 0x05	; 5
    1d1a:	80 81       	ld	r24, Z
    1d1c:	82 95       	swap	r24
    1d1e:	86 95       	lsr	r24
    1d20:	87 70       	andi	r24, 0x07	; 7
    1d22:	89 0f       	add	r24, r25
    1d24:	8c 93       	st	X, r24
    1d26:	a4 ef       	ldi	r26, 0xF4	; 244
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	fe 01       	movw	r30, r28
    1d2c:	35 96       	adiw	r30, 0x05	; 5
    1d2e:	80 81       	ld	r24, Z
    1d30:	88 0f       	add	r24, r24
    1d32:	88 0f       	add	r24, r24
    1d34:	88 0f       	add	r24, r24
    1d36:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    1d38:	af ee       	ldi	r26, 0xEF	; 239
    1d3a:	b0 e0       	ldi	r27, 0x00	; 0
    1d3c:	ef ee       	ldi	r30, 0xEF	; 239
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	90 81       	ld	r25, Z
    1d42:	e9 85       	ldd	r30, Y+9	; 0x09
    1d44:	fa 85       	ldd	r31, Y+10	; 0x0a
    1d46:	87 81       	ldd	r24, Z+7	; 0x07
    1d48:	89 2b       	or	r24, r25
    1d4a:	8c 93       	st	X, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1d4c:	e9 85       	ldd	r30, Y+9	; 0x09
    1d4e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	83 87       	std	Z+11, r24	; 0x0b
    1d54:	a4 ef       	ldi	r26, 0xF4	; 244
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	e4 ef       	ldi	r30, 0xF4	; 244
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	84 60       	ori	r24, 0x04	; 4
    1d60:	8c 93       	st	X, r24
    1d62:	a0 ef       	ldi	r26, 0xF0	; 240
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	e0 ef       	ldi	r30, 0xF0	; 240
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	80 81       	ld	r24, Z
    1d6c:	84 60       	ori	r24, 0x04	; 4
    1d6e:	8c 93       	st	X, r24
          Can_set_rplv();
    1d70:	af ee       	ldi	r26, 0xEF	; 239
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	ef ee       	ldi	r30, 0xEF	; 239
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	80 62       	ori	r24, 0x20	; 32
    1d7c:	8c 93       	st	X, r24
          Can_set_idemsk();
    1d7e:	a4 ef       	ldi	r26, 0xF4	; 244
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	e4 ef       	ldi	r30, 0xF4	; 244
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	81 60       	ori	r24, 0x01	; 1
    1d8a:	8c 93       	st	X, r24
          Can_config_rx();       
    1d8c:	af ee       	ldi	r26, 0xEF	; 239
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	ef ee       	ldi	r30, 0xEF	; 239
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	8f 73       	andi	r24, 0x3F	; 63
    1d98:	8c 93       	st	X, r24
    1d9a:	af ee       	ldi	r26, 0xEF	; 239
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	ef ee       	ldi	r30, 0xEF	; 239
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	80 68       	ori	r24, 0x80	; 128
    1da6:	8c 93       	st	X, r24
    1da8:	0b c0       	rjmp	.+22     	; 0x1dc0 <__stack+0xcc1>
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    1daa:	e9 85       	ldd	r30, Y+9	; 0x09
    1dac:	fa 85       	ldd	r31, Y+10	; 0x0a
    1dae:	12 86       	std	Z+10, r1	; 0x0a
    1db0:	07 c0       	rjmp	.+14     	; 0x1dc0 <__stack+0xcc1>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    1db2:	e9 85       	ldd	r30, Y+9	; 0x09
    1db4:	fa 85       	ldd	r31, Y+10	; 0x0a
    1db6:	8f e1       	ldi	r24, 0x1F	; 31
    1db8:	82 87       	std	Z+10, r24	; 0x0a
      return CAN_CMD_REFUSED;
    1dba:	9f ef       	ldi	r25, 0xFF	; 255
    1dbc:	9b 87       	std	Y+11, r25	; 0x0b
    1dbe:	01 c0       	rjmp	.+2      	; 0x1dc2 <__stack+0xcc3>
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1dc0:	1b 86       	std	Y+11, r1	; 0x0b
    1dc2:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    1dc4:	2d 96       	adiw	r28, 0x0d	; 13
    1dc6:	0f b6       	in	r0, 0x3f	; 63
    1dc8:	f8 94       	cli
    1dca:	de bf       	out	0x3e, r29	; 62
    1dcc:	0f be       	out	0x3f, r0	; 63
    1dce:	cd bf       	out	0x3d, r28	; 61
    1dd0:	cf 91       	pop	r28
    1dd2:	df 91       	pop	r29
    1dd4:	08 95       	ret

00001dd6 <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
U8 can_get_status (st_cmd_t* cmd)
{
    1dd6:	df 93       	push	r29
    1dd8:	cf 93       	push	r28
    1dda:	cd b7       	in	r28, 0x3d	; 61
    1ddc:	de b7       	in	r29, 0x3e	; 62
    1dde:	27 97       	sbiw	r28, 0x07	; 7
    1de0:	0f b6       	in	r0, 0x3f	; 63
    1de2:	f8 94       	cli
    1de4:	de bf       	out	0x3e, r29	; 62
    1de6:	0f be       	out	0x3f, r0	; 63
    1de8:	cd bf       	out	0x3d, r28	; 61
    1dea:	9c 83       	std	Y+4, r25	; 0x04
    1dec:	8b 83       	std	Y+3, r24	; 0x03
    U8 a_status, rtn_val;
     
    a_status = cmd->status;
    1dee:	eb 81       	ldd	r30, Y+3	; 0x03
    1df0:	fc 81       	ldd	r31, Y+4	; 0x04
    1df2:	82 85       	ldd	r24, Z+10	; 0x0a
    1df4:	8a 83       	std	Y+2, r24	; 0x02
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    1df6:	8a 81       	ldd	r24, Y+2	; 0x02
    1df8:	88 23       	and	r24, r24
    1dfa:	31 f0       	breq	.+12     	; 0x1e08 <can_get_status+0x32>
    1dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfe:	8f 31       	cpi	r24, 0x1F	; 31
    1e00:	19 f0       	breq	.+6      	; 0x1e08 <can_get_status+0x32>
    1e02:	8a 81       	ldd	r24, Y+2	; 0x02
    1e04:	8f 3f       	cpi	r24, 0xFF	; 255
    1e06:	19 f4       	brne	.+6      	; 0x1e0e <can_get_status+0x38>
    {
        return CAN_STATUS_ERROR;
    1e08:	22 e0       	ldi	r18, 0x02	; 2
    1e0a:	2f 83       	std	Y+7, r18	; 0x07
    1e0c:	fb c0       	rjmp	.+502    	; 0x2004 <can_get_status+0x22e>
    }

    Can_set_mob(cmd->handle);
    1e0e:	ad ee       	ldi	r26, 0xED	; 237
    1e10:	b0 e0       	ldi	r27, 0x00	; 0
    1e12:	eb 81       	ldd	r30, Y+3	; 0x03
    1e14:	fc 81       	ldd	r31, Y+4	; 0x04
    1e16:	80 81       	ld	r24, Z
    1e18:	82 95       	swap	r24
    1e1a:	80 7f       	andi	r24, 0xF0	; 240
    1e1c:	8c 93       	st	X, r24
    a_status = can_get_mob_status();
    1e1e:	0e 94 b2 02 	call	0x564	; 0x564 <can_get_mob_status>
    1e22:	8a 83       	std	Y+2, r24	; 0x02
    
    switch (a_status)
    1e24:	8a 81       	ldd	r24, Y+2	; 0x02
    1e26:	28 2f       	mov	r18, r24
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	3e 83       	std	Y+6, r19	; 0x06
    1e2c:	2d 83       	std	Y+5, r18	; 0x05
    1e2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e30:	9e 81       	ldd	r25, Y+6	; 0x06
    1e32:	80 32       	cpi	r24, 0x20	; 32
    1e34:	91 05       	cpc	r25, r1
    1e36:	c9 f0       	breq	.+50     	; 0x1e6a <can_get_status+0x94>
    1e38:	2d 81       	ldd	r18, Y+5	; 0x05
    1e3a:	3e 81       	ldd	r19, Y+6	; 0x06
    1e3c:	21 32       	cpi	r18, 0x21	; 33
    1e3e:	31 05       	cpc	r19, r1
    1e40:	2c f4       	brge	.+10     	; 0x1e4c <can_get_status+0x76>
    1e42:	8d 81       	ldd	r24, Y+5	; 0x05
    1e44:	9e 81       	ldd	r25, Y+6	; 0x06
    1e46:	00 97       	sbiw	r24, 0x00	; 0
    1e48:	69 f0       	breq	.+26     	; 0x1e64 <can_get_status+0x8e>
    1e4a:	ca c0       	rjmp	.+404    	; 0x1fe0 <can_get_status+0x20a>
    1e4c:	2d 81       	ldd	r18, Y+5	; 0x05
    1e4e:	3e 81       	ldd	r19, Y+6	; 0x06
    1e50:	20 34       	cpi	r18, 0x40	; 64
    1e52:	31 05       	cpc	r19, r1
    1e54:	09 f4       	brne	.+2      	; 0x1e58 <can_get_status+0x82>
    1e56:	b4 c0       	rjmp	.+360    	; 0x1fc0 <can_get_status+0x1ea>
    1e58:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5c:	80 3a       	cpi	r24, 0xA0	; 160
    1e5e:	91 05       	cpc	r25, r1
    1e60:	21 f0       	breq	.+8      	; 0x1e6a <can_get_status+0x94>
    1e62:	be c0       	rjmp	.+380    	; 0x1fe0 <can_get_status+0x20a>
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	89 83       	std	Y+1, r24	; 0x01
    1e68:	cb c0       	rjmp	.+406    	; 0x2000 <can_get_status+0x22a>
            break;
        //---------------      
        case MOB_RX_COMPLETED:     
        case MOB_RX_COMPLETED_DLCW:
            cmd->dlc = Can_get_dlc();
    1e6a:	ef ee       	ldi	r30, 0xEF	; 239
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	80 81       	ld	r24, Z
    1e70:	8f 70       	andi	r24, 0x0F	; 15
    1e72:	eb 81       	ldd	r30, Y+3	; 0x03
    1e74:	fc 81       	ldd	r31, Y+4	; 0x04
    1e76:	87 83       	std	Z+7, r24	; 0x07
            can_get_data(cmd->pt_data);
    1e78:	eb 81       	ldd	r30, Y+3	; 0x03
    1e7a:	fc 81       	ldd	r31, Y+4	; 0x04
    1e7c:	80 85       	ldd	r24, Z+8	; 0x08
    1e7e:	91 85       	ldd	r25, Z+9	; 0x09
    1e80:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <can_get_data>
            cmd->ctrl.rtr = Can_get_rtr();
    1e84:	e0 ef       	ldi	r30, 0xF0	; 240
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	88 2f       	mov	r24, r24
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	84 70       	andi	r24, 0x04	; 4
    1e90:	90 70       	andi	r25, 0x00	; 0
    1e92:	95 95       	asr	r25
    1e94:	87 95       	ror	r24
    1e96:	95 95       	asr	r25
    1e98:	87 95       	ror	r24
    1e9a:	eb 81       	ldd	r30, Y+3	; 0x03
    1e9c:	fc 81       	ldd	r31, Y+4	; 0x04
    1e9e:	83 87       	std	Z+11, r24	; 0x0b
            if (Can_get_ide()) // if extended frame
    1ea0:	ef ee       	ldi	r30, 0xEF	; 239
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	80 81       	ld	r24, Z
    1ea6:	88 2f       	mov	r24, r24
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	80 71       	andi	r24, 0x10	; 16
    1eac:	90 70       	andi	r25, 0x00	; 0
    1eae:	95 95       	asr	r25
    1eb0:	87 95       	ror	r24
    1eb2:	95 95       	asr	r25
    1eb4:	87 95       	ror	r24
    1eb6:	95 95       	asr	r25
    1eb8:	87 95       	ror	r24
    1eba:	95 95       	asr	r25
    1ebc:	87 95       	ror	r24
    1ebe:	00 97       	sbiw	r24, 0x00	; 0
    1ec0:	09 f4       	brne	.+2      	; 0x1ec4 <can_get_status+0xee>
    1ec2:	4c c0       	rjmp	.+152    	; 0x1f5c <can_get_status+0x186>
            {
                cmd->ctrl.ide = 1; // extended frame
    1ec4:	eb 81       	ldd	r30, Y+3	; 0x03
    1ec6:	fc 81       	ldd	r31, Y+4	; 0x04
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	84 87       	std	Z+12, r24	; 0x0c
                Can_get_ext_id(cmd->id.ext);
    1ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ece:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed0:	03 96       	adiw	r24, 0x03	; 3
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	13 96       	adiw	r26, 0x03	; 3
    1ed6:	e3 ef       	ldi	r30, 0xF3	; 243
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	86 95       	lsr	r24
    1ede:	86 95       	lsr	r24
    1ee0:	86 95       	lsr	r24
    1ee2:	8c 93       	st	X, r24
    1ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee8:	03 96       	adiw	r24, 0x03	; 3
    1eea:	dc 01       	movw	r26, r24
    1eec:	12 96       	adiw	r26, 0x02	; 2
    1eee:	e2 ef       	ldi	r30, 0xF2	; 242
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	98 2f       	mov	r25, r24
    1ef6:	96 95       	lsr	r25
    1ef8:	96 95       	lsr	r25
    1efa:	96 95       	lsr	r25
    1efc:	e3 ef       	ldi	r30, 0xF3	; 243
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	80 81       	ld	r24, Z
    1f02:	82 95       	swap	r24
    1f04:	88 0f       	add	r24, r24
    1f06:	80 7e       	andi	r24, 0xE0	; 224
    1f08:	89 0f       	add	r24, r25
    1f0a:	8c 93       	st	X, r24
    1f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f10:	03 96       	adiw	r24, 0x03	; 3
    1f12:	dc 01       	movw	r26, r24
    1f14:	11 96       	adiw	r26, 0x01	; 1
    1f16:	e1 ef       	ldi	r30, 0xF1	; 241
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	98 2f       	mov	r25, r24
    1f1e:	96 95       	lsr	r25
    1f20:	96 95       	lsr	r25
    1f22:	96 95       	lsr	r25
    1f24:	e2 ef       	ldi	r30, 0xF2	; 242
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	80 81       	ld	r24, Z
    1f2a:	82 95       	swap	r24
    1f2c:	88 0f       	add	r24, r24
    1f2e:	80 7e       	andi	r24, 0xE0	; 224
    1f30:	89 0f       	add	r24, r25
    1f32:	8c 93       	st	X, r24
    1f34:	8b 81       	ldd	r24, Y+3	; 0x03
    1f36:	9c 81       	ldd	r25, Y+4	; 0x04
    1f38:	03 96       	adiw	r24, 0x03	; 3
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	e0 ef       	ldi	r30, 0xF0	; 240
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 81       	ld	r24, Z
    1f42:	98 2f       	mov	r25, r24
    1f44:	96 95       	lsr	r25
    1f46:	96 95       	lsr	r25
    1f48:	96 95       	lsr	r25
    1f4a:	e1 ef       	ldi	r30, 0xF1	; 241
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	82 95       	swap	r24
    1f52:	88 0f       	add	r24, r24
    1f54:	80 7e       	andi	r24, 0xE0	; 224
    1f56:	89 0f       	add	r24, r25
    1f58:	8c 93       	st	X, r24
    1f5a:	22 c0       	rjmp	.+68     	; 0x1fa0 <can_get_status+0x1ca>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    1f5c:	eb 81       	ldd	r30, Y+3	; 0x03
    1f5e:	fc 81       	ldd	r31, Y+4	; 0x04
    1f60:	14 86       	std	Z+12, r1	; 0x0c
                    Can_get_std_id(cmd->id.std);
    1f62:	8b 81       	ldd	r24, Y+3	; 0x03
    1f64:	9c 81       	ldd	r25, Y+4	; 0x04
    1f66:	03 96       	adiw	r24, 0x03	; 3
    1f68:	dc 01       	movw	r26, r24
    1f6a:	11 96       	adiw	r26, 0x01	; 1
    1f6c:	e3 ef       	ldi	r30, 0xF3	; 243
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	82 95       	swap	r24
    1f74:	86 95       	lsr	r24
    1f76:	87 70       	andi	r24, 0x07	; 7
    1f78:	8c 93       	st	X, r24
    1f7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f7e:	03 96       	adiw	r24, 0x03	; 3
    1f80:	dc 01       	movw	r26, r24
    1f82:	e2 ef       	ldi	r30, 0xF2	; 242
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	98 2f       	mov	r25, r24
    1f8a:	92 95       	swap	r25
    1f8c:	96 95       	lsr	r25
    1f8e:	97 70       	andi	r25, 0x07	; 7
    1f90:	e3 ef       	ldi	r30, 0xF3	; 243
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	88 0f       	add	r24, r24
    1f98:	88 0f       	add	r24, r24
    1f9a:	88 0f       	add	r24, r24
    1f9c:	89 0f       	add	r24, r25
    1f9e:	8c 93       	st	X, r24
                }
            // Status field of descriptor: 0x20 if Rx completed
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
    1fa0:	eb 81       	ldd	r30, Y+3	; 0x03
    1fa2:	fc 81       	ldd	r31, Y+4	; 0x04
    1fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa6:	82 87       	std	Z+10, r24	; 0x0a
            Can_mob_abort();        // Freed the MOB
    1fa8:	af ee       	ldi	r26, 0xEF	; 239
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	ef ee       	ldi	r30, 0xEF	; 239
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	8f 73       	andi	r24, 0x3F	; 63
    1fb4:	8c 93       	st	X, r24
            Can_clear_status_mob(); //   and reset MOb status
    1fb6:	ee ee       	ldi	r30, 0xEE	; 238
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_COMPLETED;
    1fbc:	19 82       	std	Y+1, r1	; 0x01
    1fbe:	20 c0       	rjmp	.+64     	; 0x2000 <can_get_status+0x22a>
            break;
        //---------------      
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    1fc0:	eb 81       	ldd	r30, Y+3	; 0x03
    1fc2:	fc 81       	ldd	r31, Y+4	; 0x04
    1fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc6:	82 87       	std	Z+10, r24	; 0x0a
            Can_mob_abort();        // Freed the MOB
    1fc8:	af ee       	ldi	r26, 0xEF	; 239
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
    1fcc:	ef ee       	ldi	r30, 0xEF	; 239
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	80 81       	ld	r24, Z
    1fd2:	8f 73       	andi	r24, 0x3F	; 63
    1fd4:	8c 93       	st	X, r24
            Can_clear_status_mob(); //   and reset MOb status
    1fd6:	ee ee       	ldi	r30, 0xEE	; 238
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_COMPLETED;
    1fdc:	19 82       	std	Y+1, r1	; 0x01
    1fde:	10 c0       	rjmp	.+32     	; 0x2000 <can_get_status+0x22a>
            break;
        //---------------      
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    1fe0:	eb 81       	ldd	r30, Y+3	; 0x03
    1fe2:	fc 81       	ldd	r31, Y+4	; 0x04
    1fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe6:	82 87       	std	Z+10, r24	; 0x0a
            Can_mob_abort();        // Freed the MOB
    1fe8:	af ee       	ldi	r26, 0xEF	; 239
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	ef ee       	ldi	r30, 0xEF	; 239
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	8f 73       	andi	r24, 0x3F	; 63
    1ff4:	8c 93       	st	X, r24
            Can_clear_status_mob(); //   and reset MOb status
    1ff6:	ee ee       	ldi	r30, 0xEE	; 238
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_ERROR;
    1ffc:	82 e0       	ldi	r24, 0x02	; 2
    1ffe:	89 83       	std	Y+1, r24	; 0x01
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
    2000:	99 81       	ldd	r25, Y+1	; 0x01
    2002:	9f 83       	std	Y+7, r25	; 0x07
    2004:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2006:	27 96       	adiw	r28, 0x07	; 7
    2008:	0f b6       	in	r0, 0x3f	; 63
    200a:	f8 94       	cli
    200c:	de bf       	out	0x3e, r29	; 62
    200e:	0f be       	out	0x3f, r0	; 63
    2010:	cd bf       	out	0x3d, r28	; 61
    2012:	cf 91       	pop	r28
    2014:	df 91       	pop	r29
    2016:	08 95       	ret

00002018 <led_init>:
//!
//! @return  none
//!
//------------------------------------------------------------------------------
void led_init(void)
{
    2018:	df 93       	push	r29
    201a:	cf 93       	push	r28
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
    //-- Set direction
    LED_PORT_DIR = 0xFF;
    2020:	e1 e2       	ldi	r30, 0x21	; 33
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	8f ef       	ldi	r24, 0xFF	; 255
    2026:	80 83       	st	Z, r24
    //-- Clear LEDs.
    LED_PORT_OUT = 0x00;    
    2028:	e2 e2       	ldi	r30, 0x22	; 34
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	10 82       	st	Z, r1
}
    202e:	cf 91       	pop	r28
    2030:	df 91       	pop	r29
    2032:	08 95       	ret

00002034 <write_led>:
//!
//! @return (none)
//!
//------------------------------------------------------------------------------
void write_led(U8 led_display)
{
    2034:	df 93       	push	r29
    2036:	cf 93       	push	r28
    2038:	0f 92       	push	r0
    203a:	cd b7       	in	r28, 0x3d	; 61
    203c:	de b7       	in	r29, 0x3e	; 62
    203e:	89 83       	std	Y+1, r24	; 0x01
    LED_PORT_OUT = led_display;
    2040:	e2 e2       	ldi	r30, 0x22	; 34
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	89 81       	ldd	r24, Y+1	; 0x01
    2046:	80 83       	st	Z, r24
}
    2048:	0f 90       	pop	r0
    204a:	cf 91       	pop	r28
    204c:	df 91       	pop	r29
    204e:	08 95       	ret

00002050 <swap_nibble_led>:
//!
//! @return  none
//!
//------------------------------------------------------------------------------
void swap_nibble_led(void)
{
    2050:	df 93       	push	r29
    2052:	cf 93       	push	r28
    2054:	cd b7       	in	r28, 0x3d	; 61
    2056:	de b7       	in	r29, 0x3e	; 62
    LED_PORT_OUT = (LED_PORT_IN << 4) | (LED_PORT_IN >> 4);
    2058:	a2 e2       	ldi	r26, 0x22	; 34
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	e0 e2       	ldi	r30, 0x20	; 32
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	80 81       	ld	r24, Z
    2062:	88 2f       	mov	r24, r24
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	82 95       	swap	r24
    2068:	92 95       	swap	r25
    206a:	90 7f       	andi	r25, 0xF0	; 240
    206c:	98 27       	eor	r25, r24
    206e:	80 7f       	andi	r24, 0xF0	; 240
    2070:	98 27       	eor	r25, r24
    2072:	98 2f       	mov	r25, r24
    2074:	e0 e2       	ldi	r30, 0x20	; 32
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	80 81       	ld	r24, Z
    207a:	82 95       	swap	r24
    207c:	8f 70       	andi	r24, 0x0F	; 15
    207e:	89 2b       	or	r24, r25
    2080:	8c 93       	st	X, r24
}
    2082:	cf 91       	pop	r28
    2084:	df 91       	pop	r29
    2086:	08 95       	ret

00002088 <toggle_led>:
//!
//! @return  none
//!
//------------------------------------------------------------------------------
void toggle_led(void)
{
    2088:	df 93       	push	r29
    208a:	cf 93       	push	r28
    208c:	cd b7       	in	r28, 0x3d	; 61
    208e:	de b7       	in	r29, 0x3e	; 62
    LED_PORT_IN = 0xFF;
    2090:	e0 e2       	ldi	r30, 0x20	; 32
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	8f ef       	ldi	r24, 0xFF	; 255
    2096:	80 83       	st	Z, r24
}
    2098:	cf 91       	pop	r28
    209a:	df 91       	pop	r29
    209c:	08 95       	ret

0000209e <write_led_number>:
//!             FALSE: led_number >= 8 or led_level >=2,
//!             TRUE:  In range
//!
//------------------------------------------------------------------------------
U8 write_led_number(U8 led_number,Bool led_level)
{
    209e:	df 93       	push	r29
    20a0:	cf 93       	push	r28
    20a2:	00 d0       	rcall	.+0      	; 0x20a4 <write_led_number+0x6>
    20a4:	0f 92       	push	r0
    20a6:	cd b7       	in	r28, 0x3d	; 61
    20a8:	de b7       	in	r29, 0x3e	; 62
    20aa:	8a 83       	std	Y+2, r24	; 0x02
    20ac:	6b 83       	std	Y+3, r22	; 0x03
U8 range_error;
    
    range_error = FALSE;
    20ae:	19 82       	std	Y+1, r1	; 0x01
    if (led_number < 8)
    20b0:	8a 81       	ldd	r24, Y+2	; 0x02
    20b2:	88 30       	cpi	r24, 0x08	; 8
    20b4:	88 f5       	brcc	.+98     	; 0x2118 <write_led_number+0x7a>
    {
        if (led_level==0)
    20b6:	8b 81       	ldd	r24, Y+3	; 0x03
    20b8:	88 23       	and	r24, r24
    20ba:	b1 f4       	brne	.+44     	; 0x20e8 <write_led_number+0x4a>
        {
            range_error = TRUE;
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	89 83       	std	Y+1, r24	; 0x01
            LED_PORT_OUT &= ~(1<<led_number);
    20c0:	a2 e2       	ldi	r26, 0x22	; 34
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e2 e2       	ldi	r30, 0x22	; 34
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	48 2f       	mov	r20, r24
    20cc:	8a 81       	ldd	r24, Y+2	; 0x02
    20ce:	28 2f       	mov	r18, r24
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	02 2e       	mov	r0, r18
    20d8:	02 c0       	rjmp	.+4      	; 0x20de <write_led_number+0x40>
    20da:	88 0f       	add	r24, r24
    20dc:	99 1f       	adc	r25, r25
    20de:	0a 94       	dec	r0
    20e0:	e2 f7       	brpl	.-8      	; 0x20da <write_led_number+0x3c>
    20e2:	80 95       	com	r24
    20e4:	84 23       	and	r24, r20
    20e6:	8c 93       	st	X, r24
        }
        if (led_level==1)
    20e8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ea:	81 30       	cpi	r24, 0x01	; 1
    20ec:	a9 f4       	brne	.+42     	; 0x2118 <write_led_number+0x7a>
        {
            range_error = TRUE;
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	89 83       	std	Y+1, r24	; 0x01
            LED_PORT_OUT |= (1<<led_number);
    20f2:	a2 e2       	ldi	r26, 0x22	; 34
    20f4:	b0 e0       	ldi	r27, 0x00	; 0
    20f6:	e2 e2       	ldi	r30, 0x22	; 34
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	48 2f       	mov	r20, r24
    20fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2100:	28 2f       	mov	r18, r24
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	02 2e       	mov	r0, r18
    210a:	02 c0       	rjmp	.+4      	; 0x2110 <write_led_number+0x72>
    210c:	88 0f       	add	r24, r24
    210e:	99 1f       	adc	r25, r25
    2110:	0a 94       	dec	r0
    2112:	e2 f7       	brpl	.-8      	; 0x210c <write_led_number+0x6e>
    2114:	84 2b       	or	r24, r20
    2116:	8c 93       	st	X, r24
        }
    }
    return range_error;
    2118:	89 81       	ldd	r24, Y+1	; 0x01
}
    211a:	0f 90       	pop	r0
    211c:	0f 90       	pop	r0
    211e:	0f 90       	pop	r0
    2120:	cf 91       	pop	r28
    2122:	df 91       	pop	r29
    2124:	08 95       	ret

00002126 <wait_for>:
//!
//! @return  none 
//!
//------------------------------------------------------------------------------
void wait_for(U16 ms_count)
{
    2126:	df 93       	push	r29
    2128:	cf 93       	push	r28
    212a:	cd b7       	in	r28, 0x3d	; 61
    212c:	de b7       	in	r29, 0x3e	; 62
    212e:	2a 97       	sbiw	r28, 0x0a	; 10
    2130:	0f b6       	in	r0, 0x3f	; 63
    2132:	f8 94       	cli
    2134:	de bf       	out	0x3e, r29	; 62
    2136:	0f be       	out	0x3f, r0	; 63
    2138:	cd bf       	out	0x3d, r28	; 61
    213a:	9a 87       	std	Y+10, r25	; 0x0a
    213c:	89 87       	std	Y+9, r24	; 0x09
U32 temp;
U16 i;
U8  j, k;

    if (rtc_running == ON)
    213e:	80 91 5a 03 	lds	r24, 0x035A
    2142:	81 30       	cpi	r24, 0x01	; 1
    2144:	09 f0       	breq	.+2      	; 0x2148 <wait_for+0x22>
    2146:	45 c0       	rjmp	.+138    	; 0x21d2 <wait_for+0xac>
    {
        Disable_interrupt(); temp = rtc_tics; Enable_interrupt();    //-- Get atomic U32 value
    2148:	f8 94       	cli
    214a:	80 91 75 03 	lds	r24, 0x0375
    214e:	90 91 76 03 	lds	r25, 0x0376
    2152:	a0 91 77 03 	lds	r26, 0x0377
    2156:	b0 91 78 03 	lds	r27, 0x0378
    215a:	8d 83       	std	Y+5, r24	; 0x05
    215c:	9e 83       	std	Y+6, r25	; 0x06
    215e:	af 83       	std	Y+7, r26	; 0x07
    2160:	b8 87       	std	Y+8, r27	; 0x08
    2162:	78 94       	sei
        temp += ((U32)(ms_count));
    2164:	89 85       	ldd	r24, Y+9	; 0x09
    2166:	9a 85       	ldd	r25, Y+10	; 0x0a
    2168:	9c 01       	movw	r18, r24
    216a:	40 e0       	ldi	r20, 0x00	; 0
    216c:	50 e0       	ldi	r21, 0x00	; 0
    216e:	8d 81       	ldd	r24, Y+5	; 0x05
    2170:	9e 81       	ldd	r25, Y+6	; 0x06
    2172:	af 81       	ldd	r26, Y+7	; 0x07
    2174:	b8 85       	ldd	r27, Y+8	; 0x08
    2176:	82 0f       	add	r24, r18
    2178:	93 1f       	adc	r25, r19
    217a:	a4 1f       	adc	r26, r20
    217c:	b5 1f       	adc	r27, r21
    217e:	8d 83       	std	Y+5, r24	; 0x05
    2180:	9e 83       	std	Y+6, r25	; 0x06
    2182:	af 83       	std	Y+7, r26	; 0x07
    2184:	b8 87       	std	Y+8, r27	; 0x08
        while (1)
        {
            Disable_interrupt();    //-- Get atomic U32 values
    2186:	f8 94       	cli
            if (rtc_tics == temp) break;                //-- Standart EXIT
    2188:	20 91 75 03 	lds	r18, 0x0375
    218c:	30 91 76 03 	lds	r19, 0x0376
    2190:	40 91 77 03 	lds	r20, 0x0377
    2194:	50 91 78 03 	lds	r21, 0x0378
    2198:	8d 81       	ldd	r24, Y+5	; 0x05
    219a:	9e 81       	ldd	r25, Y+6	; 0x06
    219c:	af 81       	ldd	r26, Y+7	; 0x07
    219e:	b8 85       	ldd	r27, Y+8	; 0x08
    21a0:	28 17       	cp	r18, r24
    21a2:	39 07       	cpc	r19, r25
    21a4:	4a 07       	cpc	r20, r26
    21a6:	5b 07       	cpc	r21, r27
    21a8:	99 f1       	breq	.+102    	; 0x2210 <wait_for+0xea>
            if (rtc_tics == ((U32)(ms_count)) ) break;  //-- EXIT if overflow (not right)
    21aa:	89 85       	ldd	r24, Y+9	; 0x09
    21ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ae:	9c 01       	movw	r18, r24
    21b0:	40 e0       	ldi	r20, 0x00	; 0
    21b2:	50 e0       	ldi	r21, 0x00	; 0
    21b4:	80 91 75 03 	lds	r24, 0x0375
    21b8:	90 91 76 03 	lds	r25, 0x0376
    21bc:	a0 91 77 03 	lds	r26, 0x0377
    21c0:	b0 91 78 03 	lds	r27, 0x0378
    21c4:	28 17       	cp	r18, r24
    21c6:	39 07       	cpc	r19, r25
    21c8:	4a 07       	cpc	r20, r26
    21ca:	5b 07       	cpc	r21, r27
    21cc:	09 f1       	breq	.+66     	; 0x2210 <wait_for+0xea>
            Enable_interrupt();
    21ce:	78 94       	sei
    21d0:	da cf       	rjmp	.-76     	; 0x2186 <wait_for+0x60>
        }
    }
    else    //-- No RTC, enabling something almost equivalent but not right.
    {
        for (i=0;i<ms_count;i++)
    21d2:	1c 82       	std	Y+4, r1	; 0x04
    21d4:	1b 82       	std	Y+3, r1	; 0x03
    21d6:	15 c0       	rjmp	.+42     	; 0x2202 <wait_for+0xdc>
        {
            for (j=0;j<(U8)(FOSC/1000);j++)
    21d8:	1a 82       	std	Y+2, r1	; 0x02
    21da:	0b c0       	rjmp	.+22     	; 0x21f2 <wait_for+0xcc>
            {
                for (k=0; k<90;k++);
    21dc:	19 82       	std	Y+1, r1	; 0x01
    21de:	03 c0       	rjmp	.+6      	; 0x21e6 <wait_for+0xc0>
    21e0:	89 81       	ldd	r24, Y+1	; 0x01
    21e2:	8f 5f       	subi	r24, 0xFF	; 255
    21e4:	89 83       	std	Y+1, r24	; 0x01
    21e6:	89 81       	ldd	r24, Y+1	; 0x01
    21e8:	8a 35       	cpi	r24, 0x5A	; 90
    21ea:	d0 f3       	brcs	.-12     	; 0x21e0 <wait_for+0xba>
    }
    else    //-- No RTC, enabling something almost equivalent but not right.
    {
        for (i=0;i<ms_count;i++)
        {
            for (j=0;j<(U8)(FOSC/1000);j++)
    21ec:	8a 81       	ldd	r24, Y+2	; 0x02
    21ee:	8f 5f       	subi	r24, 0xFF	; 255
    21f0:	8a 83       	std	Y+2, r24	; 0x02
    21f2:	8a 81       	ldd	r24, Y+2	; 0x02
    21f4:	88 30       	cpi	r24, 0x08	; 8
    21f6:	90 f3       	brcs	.-28     	; 0x21dc <wait_for+0xb6>
            Enable_interrupt();
        }
    }
    else    //-- No RTC, enabling something almost equivalent but not right.
    {
        for (i=0;i<ms_count;i++)
    21f8:	8b 81       	ldd	r24, Y+3	; 0x03
    21fa:	9c 81       	ldd	r25, Y+4	; 0x04
    21fc:	01 96       	adiw	r24, 0x01	; 1
    21fe:	9c 83       	std	Y+4, r25	; 0x04
    2200:	8b 83       	std	Y+3, r24	; 0x03
    2202:	2b 81       	ldd	r18, Y+3	; 0x03
    2204:	3c 81       	ldd	r19, Y+4	; 0x04
    2206:	89 85       	ldd	r24, Y+9	; 0x09
    2208:	9a 85       	ldd	r25, Y+10	; 0x0a
    220a:	28 17       	cp	r18, r24
    220c:	39 07       	cpc	r19, r25
    220e:	20 f3       	brcs	.-56     	; 0x21d8 <wait_for+0xb2>
            {
                for (k=0; k<90;k++);
            }
        }
    }
}
    2210:	2a 96       	adiw	r28, 0x0a	; 10
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	f8 94       	cli
    2216:	de bf       	out	0x3e, r29	; 62
    2218:	0f be       	out	0x3f, r0	; 63
    221a:	cd bf       	out	0x3d, r28	; 61
    221c:	cf 91       	pop	r28
    221e:	df 91       	pop	r29
    2220:	08 95       	ret

00002222 <rtc_int_init>:
//!
//------------------------------------------------------------------------------
#if (RTC_TIMER == 2)

void rtc_int_init(void)
{
    2222:	df 93       	push	r29
    2224:	cf 93       	push	r28
    2226:	00 d0       	rcall	.+0      	; 0x2228 <rtc_int_init+0x6>
    2228:	cd b7       	in	r28, 0x3d	; 61
    222a:	de b7       	in	r29, 0x3e	; 62
U16 i;
    
    Disable_interrupt();
    222c:	f8 94       	cli

    Timer8_clear();                 //-- Timer 2 cleared & initialized "OFF"
    222e:	e0 eb       	ldi	r30, 0xB0	; 176
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	10 82       	st	Z, r1
    2234:	e2 eb       	ldi	r30, 0xB2	; 178
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	10 82       	st	Z, r1
    223a:	e3 eb       	ldi	r30, 0xB3	; 179
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	10 82       	st	Z, r1
    for (i=0;i<0xFFFF;i++);         //-- Waiting to let the Xtal stabilize after a power-on
    2240:	1a 82       	std	Y+2, r1	; 0x02
    2242:	19 82       	std	Y+1, r1	; 0x01
    2244:	05 c0       	rjmp	.+10     	; 0x2250 <rtc_int_init+0x2e>
    2246:	89 81       	ldd	r24, Y+1	; 0x01
    2248:	9a 81       	ldd	r25, Y+2	; 0x02
    224a:	01 96       	adiw	r24, 0x01	; 1
    224c:	9a 83       	std	Y+2, r25	; 0x02
    224e:	89 83       	std	Y+1, r24	; 0x01
    2250:	89 81       	ldd	r24, Y+1	; 0x01
    2252:	9a 81       	ldd	r25, Y+2	; 0x02
    2254:	2f ef       	ldi	r18, 0xFF	; 255
    2256:	8f 3f       	cpi	r24, 0xFF	; 255
    2258:	92 07       	cpc	r25, r18
    225a:	a9 f7       	brne	.-22     	; 0x2246 <rtc_int_init+0x24>
    Timer8_overflow_it_disable();   //-- Disable OCIE2A interrupt
    225c:	a0 e7       	ldi	r26, 0x70	; 112
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	e0 e7       	ldi	r30, 0x70	; 112
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	8e 7f       	andi	r24, 0xFE	; 254
    2268:	8c 93       	st	X, r24
    Timer8_compare_a_it_disable();  //-- Disable TOIE2 interrupt
    226a:	a0 e7       	ldi	r26, 0x70	; 112
    226c:	b0 e0       	ldi	r27, 0x00	; 0
    226e:	e0 e7       	ldi	r30, 0x70	; 112
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	80 81       	ld	r24, Z
    2274:	8d 7f       	andi	r24, 0xFD	; 253
    2276:	8c 93       	st	X, r24
    //-- Config: - CTC mode (mode 2, top=OCR2A)
    //--         - No output
    //--        (- Timer "OFF")
    Timer8_set_mode_output_a(TIMER8_COMP_MODE_NORMAL);
    2278:	a0 eb       	ldi	r26, 0xB0	; 176
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	e0 eb       	ldi	r30, 0xB0	; 176
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	8f 7c       	andi	r24, 0xCF	; 207
    2284:	8c 93       	st	X, r24
    Timer8_set_waveform_mode(TIMER8_WGM_CTC_OCR);
    2286:	a0 eb       	ldi	r26, 0xB0	; 176
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	e0 eb       	ldi	r30, 0xB0	; 176
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
    2290:	87 7b       	andi	r24, 0xB7	; 183
    2292:	88 60       	ori	r24, 0x08	; 8
    2294:	8c 93       	st	X, r24

#   if (RTC_CLOCK == 32)
   
    //--- Asynchronous external clock 32,768 KHZ
        Timer8_2_external_osc();            //-- Init RTC clock
    2296:	a6 eb       	ldi	r26, 0xB6	; 182
    2298:	b0 e0       	ldi	r27, 0x00	; 0
    229a:	e6 eb       	ldi	r30, 0xB6	; 182
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	87 7e       	andi	r24, 0xE7	; 231
    22a2:	88 60       	ori	r24, 0x08	; 8
    22a4:	8c 93       	st	X, r24
        Timer8_set_compare_a(33-1);         //-- MAGIC_NUMBER !
    22a6:	e3 eb       	ldi	r30, 0xB3	; 179
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 e2       	ldi	r24, 0x20	; 32
    22ac:	80 83       	st	Z, r24
        //-- No prescaler & timer "ON"
        //-- Tic interval: ((1/32768)*MAGIC_NUMBER) sec = 1.00708008 msec
        Timer8_set_clock(TIMER8_CLKIO_BY_1);
    22ae:	a0 eb       	ldi	r26, 0xB0	; 176
    22b0:	b0 e0       	ldi	r27, 0x00	; 0
    22b2:	e0 eb       	ldi	r30, 0xB0	; 176
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	80 81       	ld	r24, Z
    22b8:	88 7f       	andi	r24, 0xF8	; 248
    22ba:	81 60       	ori	r24, 0x01	; 1
    22bc:	8c 93       	st	X, r24
#   else
#       error This RTC_CLOCK value is not available input for "rtc_drv.c" file

#   endif // (RTC_CLOCK ...
    
    while(Timer8_2_update_busy());    //-- Wait for TCN2UB, OCR2UB and TCR2UB to be cleared
    22be:	e6 eb       	ldi	r30, 0xB6	; 182
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	80 81       	ld	r24, Z
    22c4:	88 2f       	mov	r24, r24
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	87 70       	andi	r24, 0x07	; 7
    22ca:	90 70       	andi	r25, 0x00	; 0
    22cc:	00 97       	sbiw	r24, 0x00	; 0
    22ce:	b9 f7       	brne	.-18     	; 0x22be <rtc_int_init+0x9c>

    Timer8_clear_compare_a_it();      //-- Clear Output_Compare Interrupt-flags
    22d0:	a7 e3       	ldi	r26, 0x37	; 55
    22d2:	b0 e0       	ldi	r27, 0x00	; 0
    22d4:	e7 e3       	ldi	r30, 0x37	; 55
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	80 81       	ld	r24, Z
    22da:	82 60       	ori	r24, 0x02	; 2
    22dc:	8c 93       	st	X, r24
    Timer8_compare_a_it_enable();     //-- Enable Timer2 Output_Compare Interrupt
    22de:	a0 e7       	ldi	r26, 0x70	; 112
    22e0:	b0 e0       	ldi	r27, 0x00	; 0
    22e2:	e0 e7       	ldi	r30, 0x70	; 112
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	80 81       	ld	r24, Z
    22e8:	82 60       	ori	r24, 0x02	; 2
    22ea:	8c 93       	st	X, r24

    //-- Time setting
    rtc_tics         = 0;
    22ec:	10 92 75 03 	sts	0x0375, r1
    22f0:	10 92 76 03 	sts	0x0376, r1
    22f4:	10 92 77 03 	sts	0x0377, r1
    22f8:	10 92 78 03 	sts	0x0378, r1
    rtc_milliseconds = 0;
    22fc:	10 92 74 03 	sts	0x0374, r1
    2300:	10 92 73 03 	sts	0x0373, r1
    rtc_seconds      = 0;
    2304:	10 92 7a 03 	sts	0x037A, r1
    rtc_minutes      = 0;
    2308:	10 92 71 03 	sts	0x0371, r1
    rtc_hours        = 0;
    230c:	10 92 79 03 	sts	0x0379, r1
    rtc_days         = 0;
    2310:	10 92 72 03 	sts	0x0372, r1

    rtc_running = ON;
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	80 93 5a 03 	sts	0x035A, r24
    Enable_interrupt();
    231a:	78 94       	sei
}
    231c:	0f 90       	pop	r0
    231e:	0f 90       	pop	r0
    2320:	cf 91       	pop	r28
    2322:	df 91       	pop	r29
    2324:	08 95       	ret

00002326 <__vector_9>:
//!
//------------------------------------------------------------------------------
#if (RTC_TIMER == 2)

ISR(TIMER2_COMP_vect)
{
    2326:	1f 92       	push	r1
    2328:	0f 92       	push	r0
    232a:	0f b6       	in	r0, 0x3f	; 63
    232c:	0f 92       	push	r0
    232e:	11 24       	eor	r1, r1
    2330:	2f 93       	push	r18
    2332:	8f 93       	push	r24
    2334:	9f 93       	push	r25
    2336:	af 93       	push	r26
    2338:	bf 93       	push	r27
    233a:	df 93       	push	r29
    233c:	cf 93       	push	r28
    233e:	cd b7       	in	r28, 0x3d	; 61
    2340:	de b7       	in	r29, 0x3e	; 62
    rtc_tics++;                     //-- Increments tics
    2342:	80 91 75 03 	lds	r24, 0x0375
    2346:	90 91 76 03 	lds	r25, 0x0376
    234a:	a0 91 77 03 	lds	r26, 0x0377
    234e:	b0 91 78 03 	lds	r27, 0x0378
    2352:	01 96       	adiw	r24, 0x01	; 1
    2354:	a1 1d       	adc	r26, r1
    2356:	b1 1d       	adc	r27, r1
    2358:	80 93 75 03 	sts	0x0375, r24
    235c:	90 93 76 03 	sts	0x0376, r25
    2360:	a0 93 77 03 	sts	0x0377, r26
    2364:	b0 93 78 03 	sts	0x0378, r27
    rtc_milliseconds++;             //-- Increments milli seconds
    2368:	80 91 73 03 	lds	r24, 0x0373
    236c:	90 91 74 03 	lds	r25, 0x0374
    2370:	01 96       	adiw	r24, 0x01	; 1
    2372:	90 93 74 03 	sts	0x0374, r25
    2376:	80 93 73 03 	sts	0x0373, r24
    
    if (rtc_milliseconds == 1000)
    237a:	80 91 73 03 	lds	r24, 0x0373
    237e:	90 91 74 03 	lds	r25, 0x0374
    2382:	23 e0       	ldi	r18, 0x03	; 3
    2384:	88 3e       	cpi	r24, 0xE8	; 232
    2386:	92 07       	cpc	r25, r18
    2388:	51 f5       	brne	.+84     	; 0x23de <__vector_9+0xb8>
    {
        rtc_milliseconds = 0;
    238a:	10 92 74 03 	sts	0x0374, r1
    238e:	10 92 73 03 	sts	0x0373, r1
        rtc_seconds++;              //-- Increments seconds
    2392:	80 91 7a 03 	lds	r24, 0x037A
    2396:	8f 5f       	subi	r24, 0xFF	; 255
    2398:	80 93 7a 03 	sts	0x037A, r24

        if (rtc_seconds == 60)
    239c:	80 91 7a 03 	lds	r24, 0x037A
    23a0:	8c 33       	cpi	r24, 0x3C	; 60
    23a2:	e9 f4       	brne	.+58     	; 0x23de <__vector_9+0xb8>
        {
            rtc_seconds = 0;
    23a4:	10 92 7a 03 	sts	0x037A, r1
            rtc_minutes++;          //-- Increments minutes
    23a8:	80 91 71 03 	lds	r24, 0x0371
    23ac:	8f 5f       	subi	r24, 0xFF	; 255
    23ae:	80 93 71 03 	sts	0x0371, r24
            
            if (rtc_minutes == 60)
    23b2:	80 91 71 03 	lds	r24, 0x0371
    23b6:	8c 33       	cpi	r24, 0x3C	; 60
    23b8:	91 f4       	brne	.+36     	; 0x23de <__vector_9+0xb8>
            {
                rtc_minutes = 0;
    23ba:	10 92 71 03 	sts	0x0371, r1
                rtc_hours++;        //-- Increments hours
    23be:	80 91 79 03 	lds	r24, 0x0379
    23c2:	8f 5f       	subi	r24, 0xFF	; 255
    23c4:	80 93 79 03 	sts	0x0379, r24
                        
                if (rtc_hours == 24)
    23c8:	80 91 79 03 	lds	r24, 0x0379
    23cc:	88 31       	cpi	r24, 0x18	; 24
    23ce:	39 f4       	brne	.+14     	; 0x23de <__vector_9+0xb8>
                {
                    rtc_hours = 0;
    23d0:	10 92 79 03 	sts	0x0379, r1
                    rtc_days++;     //-- Increments days
    23d4:	80 91 72 03 	lds	r24, 0x0372
    23d8:	8f 5f       	subi	r24, 0xFF	; 255
    23da:	80 93 72 03 	sts	0x0372, r24
                }
            }
        }
    }
}
    23de:	cf 91       	pop	r28
    23e0:	df 91       	pop	r29
    23e2:	bf 91       	pop	r27
    23e4:	af 91       	pop	r26
    23e6:	9f 91       	pop	r25
    23e8:	8f 91       	pop	r24
    23ea:	2f 91       	pop	r18
    23ec:	0f 90       	pop	r0
    23ee:	0f be       	out	0x3f, r0	; 63
    23f0:	0f 90       	pop	r0
    23f2:	1f 90       	pop	r1
    23f4:	18 95       	reti

000023f6 <uart_rx_get_3_data>:
//! @param  none
//!
//! @return UART pin value sampled 3 times
//------------------------------------------------------------------------------
Bool uart_rx_get_3_data (void)
{
    23f6:	df 93       	push	r29
    23f8:	cf 93       	push	r28
    23fa:	0f 92       	push	r0
    23fc:	cd b7       	in	r28, 0x3d	; 61
    23fe:	de b7       	in	r29, 0x3e	; 62
U8 u8_temp = 0;
    2400:	19 82       	std	Y+1, r1	; 0x01

#if ((USE_UART == UART_0) || (USE_UART == UART_1))
    u8_temp = Uart_rx_get_3_data();
    2402:	ec e2       	ldi	r30, 0x2C	; 44
    2404:	f0 e0       	ldi	r31, 0x00	; 0
    2406:	90 81       	ld	r25, Z
    2408:	ec e2       	ldi	r30, 0x2C	; 44
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
    240e:	98 23       	and	r25, r24
    2410:	ec e2       	ldi	r30, 0x2C	; 44
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	80 81       	ld	r24, Z
    2416:	89 23       	and	r24, r25
    2418:	81 70       	andi	r24, 0x01	; 1
    241a:	89 83       	std	Y+1, r24	; 0x01
    }
#   else
#       error USE_UART definition is not referenced in "uart_drv.h" file
#endif

    return u8_temp;
    241c:	89 81       	ldd	r24, Y+1	; 0x01
}
    241e:	0f 90       	pop	r0
    2420:	cf 91       	pop	r28
    2422:	df 91       	pop	r29
    2424:	08 95       	ret

00002426 <uart_rx_get_data>:
//! @param  none
//!
//! @return UART pin value
//------------------------------------------------------------------------------
Bool uart_rx_get_data (void)
{
    2426:	df 93       	push	r29
    2428:	cf 93       	push	r28
    242a:	0f 92       	push	r0
    242c:	cd b7       	in	r28, 0x3d	; 61
    242e:	de b7       	in	r29, 0x3e	; 62
U8 u8_temp = 0;
    2430:	19 82       	std	Y+1, r1	; 0x01

#if ((USE_UART == UART_0) || (USE_UART == UART_1))
    u8_temp = Uart_rx_get_data();
    2432:	ec e2       	ldi	r30, 0x2C	; 44
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	80 81       	ld	r24, Z
    2438:	81 70       	andi	r24, 0x01	; 1
    243a:	89 83       	std	Y+1, r24	; 0x01
    }
#   else
#       error USE_UART definition is not referenced in "uart_drv.h" file
#endif

    return u8_temp;
    243c:	89 81       	ldd	r24, Y+1	; 0x01
}
    243e:	0f 90       	pop	r0
    2440:	cf 91       	pop	r28
    2442:	df 91       	pop	r29
    2444:	08 95       	ret

00002446 <uart_init>:
//!         ==0: research of timing failed
//!         ==1: baudrate performed
//!
//------------------------------------------------------------------------------
U8 uart_init (U8 mode, U32 baudrate)
{
    2446:	df 93       	push	r29
    2448:	cf 93       	push	r28
    244a:	00 d0       	rcall	.+0      	; 0x244c <uart_init+0x6>
    244c:	00 d0       	rcall	.+0      	; 0x244e <uart_init+0x8>
    244e:	00 d0       	rcall	.+0      	; 0x2450 <uart_init+0xa>
    2450:	cd b7       	in	r28, 0x3d	; 61
    2452:	de b7       	in	r29, 0x3e	; 62
    2454:	89 83       	std	Y+1, r24	; 0x01
    2456:	4a 83       	std	Y+2, r20	; 0x02
    2458:	5b 83       	std	Y+3, r21	; 0x03
    245a:	6c 83       	std	Y+4, r22	; 0x04
    245c:	7d 83       	std	Y+5, r23	; 0x05
    Uart_clear();       // Flush, Disable and Reset UART
    245e:	e1 ec       	ldi	r30, 0xC1	; 193
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	10 82       	st	Z, r1
    2464:	a2 ec       	ldi	r26, 0xC2	; 194
    2466:	b0 e0       	ldi	r27, 0x00	; 0
    2468:	e6 ec       	ldi	r30, 0xC6	; 198
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	80 81       	ld	r24, Z
    246e:	8c 93       	st	X, r24
    2470:	e0 ec       	ldi	r30, 0xC0	; 192
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	80 e4       	ldi	r24, 0x40	; 64
    2476:	80 83       	st	Z, r24
    2478:	e2 ec       	ldi	r30, 0xC2	; 194
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	86 e0       	ldi	r24, 0x06	; 6
    247e:	80 83       	st	Z, r24
    2480:	e5 ec       	ldi	r30, 0xC5	; 197
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	10 82       	st	Z, r1
    2486:	e4 ec       	ldi	r30, 0xC4	; 196
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	10 82       	st	Z, r1
    if (Uart_set_baudrate(baudrate) == 0) return 0;  //!<  c.f. macro in "uart_drv.h"
    248c:	e5 ec       	ldi	r30, 0xC5	; 197
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	10 82       	st	Z, r1
    2492:	e4 ec       	ldi	r30, 0xC4	; 196
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	89 e1       	ldi	r24, 0x19	; 25
    2498:	80 83       	st	Z, r24
    249a:	a0 ec       	ldi	r26, 0xC0	; 192
    249c:	b0 e0       	ldi	r27, 0x00	; 0
    249e:	e0 ec       	ldi	r30, 0xC0	; 192
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	80 81       	ld	r24, Z
    24a4:	82 60       	ori	r24, 0x02	; 2
    24a6:	8c 93       	st	X, r24
    24a8:	8c 91       	ld	r24, X
    24aa:	88 23       	and	r24, r24
    24ac:	11 f4       	brne	.+4      	; 0x24b2 <uart_init+0x6c>
    24ae:	1e 82       	std	Y+6, r1	; 0x06
    24b0:	35 c0       	rjmp	.+106    	; 0x251c <uart_init+0xd6>
    Uart_hw_init(mode);     //!<  c.f. macro in "uart_drv.h"
    24b2:	a0 ec       	ldi	r26, 0xC0	; 192
    24b4:	b0 e0       	ldi	r27, 0x00	; 0
    24b6:	e0 ec       	ldi	r30, 0xC0	; 192
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	80 81       	ld	r24, Z
    24bc:	80 62       	ori	r24, 0x20	; 32
    24be:	8c 93       	st	X, r24
    24c0:	a1 ec       	ldi	r26, 0xC1	; 193
    24c2:	b0 e0       	ldi	r27, 0x00	; 0
    24c4:	e1 ec       	ldi	r30, 0xC1	; 193
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	8b 7f       	andi	r24, 0xFB	; 251
    24cc:	8c 93       	st	X, r24
    24ce:	a1 ec       	ldi	r26, 0xC1	; 193
    24d0:	b0 e0       	ldi	r27, 0x00	; 0
    24d2:	e1 ec       	ldi	r30, 0xC1	; 193
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	80 81       	ld	r24, Z
    24d8:	98 2f       	mov	r25, r24
    24da:	89 81       	ldd	r24, Y+1	; 0x01
    24dc:	84 70       	andi	r24, 0x04	; 4
    24de:	89 2b       	or	r24, r25
    24e0:	8c 93       	st	X, r24
    24e2:	e2 ec       	ldi	r30, 0xC2	; 194
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	89 81       	ldd	r24, Y+1	; 0x01
    24e8:	88 73       	andi	r24, 0x38	; 56
    24ea:	80 83       	st	Z, r24
    24ec:	a2 ec       	ldi	r26, 0xC2	; 194
    24ee:	b0 e0       	ldi	r27, 0x00	; 0
    24f0:	e2 ec       	ldi	r30, 0xC2	; 194
    24f2:	f0 e0       	ldi	r31, 0x00	; 0
    24f4:	80 81       	ld	r24, Z
    24f6:	28 2f       	mov	r18, r24
    24f8:	89 81       	ldd	r24, Y+1	; 0x01
    24fa:	88 2f       	mov	r24, r24
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	83 70       	andi	r24, 0x03	; 3
    2500:	90 70       	andi	r25, 0x00	; 0
    2502:	88 0f       	add	r24, r24
    2504:	99 1f       	adc	r25, r25
    2506:	82 2b       	or	r24, r18
    2508:	8c 93       	st	X, r24
    Uart_enable();          //!<  c.f. macro in "uart_drv.h"
    250a:	a1 ec       	ldi	r26, 0xC1	; 193
    250c:	b0 e0       	ldi	r27, 0x00	; 0
    250e:	e1 ec       	ldi	r30, 0xC1	; 193
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	80 81       	ld	r24, Z
    2514:	88 61       	ori	r24, 0x18	; 24
    2516:	8c 93       	st	X, r24
    return (1);
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	8e 83       	std	Y+6, r24	; 0x06
    251c:	8e 81       	ldd	r24, Y+6	; 0x06
}
    251e:	26 96       	adiw	r28, 0x06	; 6
    2520:	0f b6       	in	r0, 0x3f	; 63
    2522:	f8 94       	cli
    2524:	de bf       	out	0x3e, r29	; 62
    2526:	0f be       	out	0x3f, r0	; 63
    2528:	cd bf       	out	0x3d, r28	; 61
    252a:	cf 91       	pop	r28
    252c:	df 91       	pop	r29
    252e:	08 95       	ret

00002530 <uart_test_hit>:
//!         ==0: Nothing has been received
//!         ==1: A character has been received
//!
//------------------------------------------------------------------------------
U8 uart_test_hit (void)
{
    2530:	df 93       	push	r29
    2532:	cf 93       	push	r28
    2534:	cd b7       	in	r28, 0x3d	; 61
    2536:	de b7       	in	r29, 0x3e	; 62
    return (Uart_rx_ready());
    2538:	e0 ec       	ldi	r30, 0xC0	; 192
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	80 81       	ld	r24, Z
    253e:	88 1f       	adc	r24, r24
    2540:	88 27       	eor	r24, r24
    2542:	88 1f       	adc	r24, r24
}
    2544:	cf 91       	pop	r28
    2546:	df 91       	pop	r29
    2548:	08 95       	ret

0000254a <uart_putchar>:
//!
//! @return character sent
//!
//------------------------------------------------------------------------------
U8 uart_putchar (U8 ch)
{
    254a:	df 93       	push	r29
    254c:	cf 93       	push	r28
    254e:	0f 92       	push	r0
    2550:	cd b7       	in	r28, 0x3d	; 61
    2552:	de b7       	in	r29, 0x3e	; 62
    2554:	89 83       	std	Y+1, r24	; 0x01
    while(!Uart_tx_ready());
    2556:	e0 ec       	ldi	r30, 0xC0	; 192
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	80 81       	ld	r24, Z
    255c:	88 2f       	mov	r24, r24
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	80 72       	andi	r24, 0x20	; 32
    2562:	90 70       	andi	r25, 0x00	; 0
    2564:	95 95       	asr	r25
    2566:	87 95       	ror	r24
    2568:	95 95       	asr	r25
    256a:	87 95       	ror	r24
    256c:	95 95       	asr	r25
    256e:	87 95       	ror	r24
    2570:	95 95       	asr	r25
    2572:	87 95       	ror	r24
    2574:	95 95       	asr	r25
    2576:	87 95       	ror	r24
    2578:	00 97       	sbiw	r24, 0x00	; 0
    257a:	69 f3       	breq	.-38     	; 0x2556 <uart_putchar+0xc>
    Uart_set_tx_busy();     // Set Busy flag before sending (always)
    Uart_send_byte(ch);
    257c:	e6 ec       	ldi	r30, 0xC6	; 198
    257e:	f0 e0       	ldi	r31, 0x00	; 0
    2580:	89 81       	ldd	r24, Y+1	; 0x01
    2582:	80 83       	st	Z, r24
    return (ch);
    2584:	89 81       	ldd	r24, Y+1	; 0x01
}
    2586:	0f 90       	pop	r0
    2588:	cf 91       	pop	r28
    258a:	df 91       	pop	r29
    258c:	08 95       	ret

0000258e <uart_getchar>:
//!
//! @return read (received) character on the UART
//!
//------------------------------------------------------------------------------
U8 uart_getchar (void)
{
    258e:	df 93       	push	r29
    2590:	cf 93       	push	r28
    2592:	0f 92       	push	r0
    2594:	cd b7       	in	r28, 0x3d	; 61
    2596:	de b7       	in	r29, 0x3e	; 62
    U8 ch;

    while(!Uart_rx_ready());
    2598:	e0 ec       	ldi	r30, 0xC0	; 192
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	80 81       	ld	r24, Z
    259e:	88 1f       	adc	r24, r24
    25a0:	88 27       	eor	r24, r24
    25a2:	88 1f       	adc	r24, r24
    25a4:	88 2f       	mov	r24, r24
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	90 70       	andi	r25, 0x00	; 0
    25aa:	00 97       	sbiw	r24, 0x00	; 0
    25ac:	a9 f3       	breq	.-22     	; 0x2598 <uart_getchar+0xa>
    ch = Uart_get_byte();
    25ae:	e6 ec       	ldi	r30, 0xC6	; 198
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	80 81       	ld	r24, Z
    25b4:	89 83       	std	Y+1, r24	; 0x01
    Uart_ack_rx_byte();
    return ch;
    25b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    25b8:	0f 90       	pop	r0
    25ba:	cf 91       	pop	r28
    25bc:	df 91       	pop	r29
    25be:	08 95       	ret

000025c0 <uart_put_string>:
//! @return (none)
//!
//------------------------------------------------------------------------------
#ifndef REDUCED_UART_LIB
void uart_put_string (U8 *data_string)
    {
    25c0:	df 93       	push	r29
    25c2:	cf 93       	push	r28
    25c4:	00 d0       	rcall	.+0      	; 0x25c6 <uart_put_string+0x6>
    25c6:	cd b7       	in	r28, 0x3d	; 61
    25c8:	de b7       	in	r29, 0x3e	; 62
    25ca:	9a 83       	std	Y+2, r25	; 0x02
    25cc:	89 83       	std	Y+1, r24	; 0x01
    25ce:	0b c0       	rjmp	.+22     	; 0x25e6 <uart_put_string+0x26>
    while(*data_string) uart_putchar (*data_string++);
    25d0:	e9 81       	ldd	r30, Y+1	; 0x01
    25d2:	fa 81       	ldd	r31, Y+2	; 0x02
    25d4:	20 81       	ld	r18, Z
    25d6:	89 81       	ldd	r24, Y+1	; 0x01
    25d8:	9a 81       	ldd	r25, Y+2	; 0x02
    25da:	01 96       	adiw	r24, 0x01	; 1
    25dc:	9a 83       	std	Y+2, r25	; 0x02
    25de:	89 83       	std	Y+1, r24	; 0x01
    25e0:	82 2f       	mov	r24, r18
    25e2:	0e 94 a5 12 	call	0x254a	; 0x254a <uart_putchar>
    25e6:	e9 81       	ldd	r30, Y+1	; 0x01
    25e8:	fa 81       	ldd	r31, Y+2	; 0x02
    25ea:	80 81       	ld	r24, Z
    25ec:	88 23       	and	r24, r24
    25ee:	81 f7       	brne	.-32     	; 0x25d0 <uart_put_string+0x10>
    }
    25f0:	0f 90       	pop	r0
    25f2:	0f 90       	pop	r0
    25f4:	cf 91       	pop	r28
    25f6:	df 91       	pop	r29
    25f8:	08 95       	ret

000025fa <uart_mini_printf>:
//! Return: 0 = O.K.
//!
//------------------------------------------------------------------------------
#ifndef REDUCED_UART_LIB
U8 uart_mini_printf(char *format, ...)
{
    25fa:	0f 93       	push	r16
    25fc:	1f 93       	push	r17
    25fe:	df 93       	push	r29
    2600:	cf 93       	push	r28
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
    2606:	af 97       	sbiw	r28, 0x2f	; 47
    2608:	0f b6       	in	r0, 0x3f	; 63
    260a:	f8 94       	cli
    260c:	de bf       	out	0x3e, r29	; 62
    260e:	0f be       	out	0x3f, r0	; 63
    2610:	cd bf       	out	0x3d, r28	; 61
    S16     s16_val;
    S32     s32_val;
    U16     u16_val;
    U32     u32_val;

    long_flag = FALSE;
    2612:	1f 86       	std	Y+15, r1	; 0x0f
    alt_p_c = FALSE;
    2614:	1e 86       	std	Y+14, r1	; 0x0e
    min_size = DATA_BUF_LEN-1;
    2616:	8b e0       	ldi	r24, 0x0B	; 11
    2618:	88 8b       	std	Y+16, r24	; 0x10

    va_start(arg_ptr, format);   // make arg_ptr point to the first unnamed arg
    261a:	ce 01       	movw	r24, r28
    261c:	c8 96       	adiw	r24, 0x38	; 56
    261e:	99 8f       	std	Y+25, r25	; 0x19
    2620:	88 8f       	std	Y+24, r24	; 0x18
    for (p = (U8 *) format; *p; p++)
    2622:	8e a9       	ldd	r24, Y+54	; 0x36
    2624:	9f a9       	ldd	r25, Y+55	; 0x37
    2626:	9f 8b       	std	Y+23, r25	; 0x17
    2628:	8e 8b       	std	Y+22, r24	; 0x16
    262a:	73 c3       	rjmp	.+1766   	; 0x2d12 <uart_mini_printf+0x718>
    {
        if ((*p == '%') || (alt_p_c == TRUE))
    262c:	ee 89       	ldd	r30, Y+22	; 0x16
    262e:	ff 89       	ldd	r31, Y+23	; 0x17
    2630:	80 81       	ld	r24, Z
    2632:	85 32       	cpi	r24, 0x25	; 37
    2634:	21 f0       	breq	.+8      	; 0x263e <uart_mini_printf+0x44>
    2636:	8e 85       	ldd	r24, Y+14	; 0x0e
    2638:	81 30       	cpi	r24, 0x01	; 1
    263a:	09 f0       	breq	.+2      	; 0x263e <uart_mini_printf+0x44>
    263c:	47 c0       	rjmp	.+142    	; 0x26cc <uart_mini_printf+0xd2>
        {
            p++;
    263e:	8e 89       	ldd	r24, Y+22	; 0x16
    2640:	9f 89       	ldd	r25, Y+23	; 0x17
    2642:	01 96       	adiw	r24, 0x01	; 1
    2644:	9f 8b       	std	Y+23, r25	; 0x17
    2646:	8e 8b       	std	Y+22, r24	; 0x16
            uart_putchar(*p);
            alt_p_c = FALSE;
            long_flag = FALSE;
            continue;   // "switch (*p)" section skipped
        }
        switch (*p)
    2648:	ee 89       	ldd	r30, Y+22	; 0x16
    264a:	ff 89       	ldd	r31, Y+23	; 0x17
    264c:	80 81       	ld	r24, Z
    264e:	28 2f       	mov	r18, r24
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	3f a7       	std	Y+47, r19	; 0x2f
    2654:	2e a7       	std	Y+46, r18	; 0x2e
    2656:	8e a5       	ldd	r24, Y+46	; 0x2e
    2658:	9f a5       	ldd	r25, Y+47	; 0x2f
    265a:	84 36       	cpi	r24, 0x64	; 100
    265c:	91 05       	cpc	r25, r1
    265e:	09 f4       	brne	.+2      	; 0x2662 <uart_mini_printf+0x68>
    2660:	96 c0       	rjmp	.+300    	; 0x278e <uart_mini_printf+0x194>
    2662:	2e a5       	ldd	r18, Y+46	; 0x2e
    2664:	3f a5       	ldd	r19, Y+47	; 0x2f
    2666:	25 36       	cpi	r18, 0x65	; 101
    2668:	31 05       	cpc	r19, r1
    266a:	94 f4       	brge	.+36     	; 0x2690 <uart_mini_printf+0x96>
    266c:	8e a5       	ldd	r24, Y+46	; 0x2e
    266e:	9f a5       	ldd	r25, Y+47	; 0x2f
    2670:	88 35       	cpi	r24, 0x58	; 88
    2672:	91 05       	cpc	r25, r1
    2674:	09 f4       	brne	.+2      	; 0x2678 <uart_mini_printf+0x7e>
    2676:	fc c1       	rjmp	.+1016   	; 0x2a70 <uart_mini_printf+0x476>
    2678:	2e a5       	ldd	r18, Y+46	; 0x2e
    267a:	3f a5       	ldd	r19, Y+47	; 0x2f
    267c:	23 36       	cpi	r18, 0x63	; 99
    267e:	31 05       	cpc	r19, r1
    2680:	69 f1       	breq	.+90     	; 0x26dc <uart_mini_printf+0xe2>
    2682:	8e a5       	ldd	r24, Y+46	; 0x2e
    2684:	9f a5       	ldd	r25, Y+47	; 0x2f
    2686:	80 33       	cpi	r24, 0x30	; 48
    2688:	91 05       	cpc	r25, r1
    268a:	09 f4       	brne	.+2      	; 0x268e <uart_mini_printf+0x94>
    268c:	bb c2       	rjmp	.+1398   	; 0x2c04 <uart_mini_printf+0x60a>
    268e:	2d c3       	rjmp	.+1626   	; 0x2cea <uart_mini_printf+0x6f0>
    2690:	2e a5       	ldd	r18, Y+46	; 0x2e
    2692:	3f a5       	ldd	r19, Y+47	; 0x2f
    2694:	23 37       	cpi	r18, 0x73	; 115
    2696:	31 05       	cpc	r19, r1
    2698:	e9 f1       	breq	.+122    	; 0x2714 <uart_mini_printf+0x11a>
    269a:	8e a5       	ldd	r24, Y+46	; 0x2e
    269c:	9f a5       	ldd	r25, Y+47	; 0x2f
    269e:	84 37       	cpi	r24, 0x74	; 116
    26a0:	91 05       	cpc	r25, r1
    26a2:	3c f4       	brge	.+14     	; 0x26b2 <uart_mini_printf+0xb8>
    26a4:	2e a5       	ldd	r18, Y+46	; 0x2e
    26a6:	3f a5       	ldd	r19, Y+47	; 0x2f
    26a8:	2c 36       	cpi	r18, 0x6C	; 108
    26aa:	31 05       	cpc	r19, r1
    26ac:	09 f4       	brne	.+2      	; 0x26b0 <uart_mini_printf+0xb6>
    26ae:	5c c0       	rjmp	.+184    	; 0x2768 <uart_mini_printf+0x16e>
    26b0:	1c c3       	rjmp	.+1592   	; 0x2cea <uart_mini_printf+0x6f0>
    26b2:	8e a5       	ldd	r24, Y+46	; 0x2e
    26b4:	9f a5       	ldd	r25, Y+47	; 0x2f
    26b6:	85 37       	cpi	r24, 0x75	; 117
    26b8:	91 05       	cpc	r25, r1
    26ba:	09 f4       	brne	.+2      	; 0x26be <uart_mini_printf+0xc4>
    26bc:	36 c1       	rjmp	.+620    	; 0x292a <uart_mini_printf+0x330>
    26be:	2e a5       	ldd	r18, Y+46	; 0x2e
    26c0:	3f a5       	ldd	r19, Y+47	; 0x2f
    26c2:	28 37       	cpi	r18, 0x78	; 120
    26c4:	31 05       	cpc	r19, r1
    26c6:	09 f4       	brne	.+2      	; 0x26ca <uart_mini_printf+0xd0>
    26c8:	d3 c1       	rjmp	.+934    	; 0x2a70 <uart_mini_printf+0x476>
    26ca:	0f c3       	rjmp	.+1566   	; 0x2cea <uart_mini_printf+0x6f0>
        {
            p++;
        }
        else
        {
            uart_putchar(*p);
    26cc:	ee 89       	ldd	r30, Y+22	; 0x16
    26ce:	ff 89       	ldd	r31, Y+23	; 0x17
    26d0:	80 81       	ld	r24, Z
    26d2:	0e 94 a5 12 	call	0x254a	; 0x254a <uart_putchar>
            alt_p_c = FALSE;
    26d6:	1e 86       	std	Y+14, r1	; 0x0e
            long_flag = FALSE;
    26d8:	1f 86       	std	Y+15, r1	; 0x0f
    26da:	16 c3       	rjmp	.+1580   	; 0x2d08 <uart_mini_printf+0x70e>
            continue;   // "switch (*p)" section skipped
        }
        switch (*p)
        {
            case 'c':
                if (long_flag == TRUE)      // ERROR: 'l' before any 'c'
    26dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    26de:	81 30       	cpi	r24, 0x01	; 1
    26e0:	39 f4       	brne	.+14     	; 0x26f0 <uart_mini_printf+0xf6>
                {
                    uart_putchar('l');
    26e2:	8c e6       	ldi	r24, 0x6C	; 108
    26e4:	0e 94 a5 12 	call	0x254a	; 0x254a <uart_putchar>
                    uart_putchar('c');
    26e8:	83 e6       	ldi	r24, 0x63	; 99
    26ea:	0e 94 a5 12 	call	0x254a	; 0x254a <uart_putchar>
    26ee:	0d c0       	rjmp	.+26     	; 0x270a <uart_mini_printf+0x110>
                }
                else
                {
                    s8_val = (S8)(va_arg(arg_ptr, int));    // s8_val = (S8)(va_arg(arg_ptr, S16));
    26f0:	28 8d       	ldd	r18, Y+24	; 0x18
    26f2:	39 8d       	ldd	r19, Y+25	; 0x19
    26f4:	c9 01       	movw	r24, r18
    26f6:	02 96       	adiw	r24, 0x02	; 2
    26f8:	99 8f       	std	Y+25, r25	; 0x19
    26fa:	88 8f       	std	Y+24, r24	; 0x18
    26fc:	f9 01       	movw	r30, r18
    26fe:	80 81       	ld	r24, Z
    2700:	91 81       	ldd	r25, Z+1	; 0x01
    2702:	8d 87       	std	Y+13, r24	; 0x0d
                    uart_putchar((U8)(s8_val));
    2704:	8d 85       	ldd	r24, Y+13	; 0x0d
    2706:	0e 94 a5 12 	call	0x254a	; 0x254a <uart_putchar>
                }
                // Clean up
                min_size = DATA_BUF_LEN-1;
    270a:	8b e0       	ldi	r24, 0x0B	; 11
    270c:	88 8b       	std	Y+16, r24	; 0x10
                alt_p_c = FALSE;
    270e:	1e 86       	std	Y+14, r1	; 0x0e
                long_flag = FALSE;
    2710:	1f 86       	std	Y+15, r1	; 0x0f
    2712:	fa c2       	rjmp	.+1524   	; 0x2d08 <uart_mini_printf+0x70e>
                break; // case 'c'
                
            case 's':
                if (long_flag == TRUE)      // ERROR: 'l' before any 's'
    2714:	8f 85       	ldd	r24, Y+15	; 0x0f
    2716:	81 30       	cpi	r24, 0x01	; 1
    2718:	39 f4       	brne	.+14     	; 0x2728 <uart_mini_printf+0x12e>
                {
                    uart_putchar('l');
    271a:	8c e6       	ldi	r24, 0x6C	; 108
    271c:	0e 94 a5 12 	call	0x254a	; 0x254a <uart_putchar>
                    uart_putchar('s');
    2720:	83 e7       	ldi	r24, 0x73	; 115
    2722:	0e 94 a5 12 	call	0x254a	; 0x254a <uart_putchar>
    2726:	1b c0       	rjmp	.+54     	; 0x275e <uart_mini_printf+0x164>
                }
                else
                {
                    for (sval = va_arg(arg_ptr, U8 *); *sval; sval++)
    2728:	28 8d       	ldd	r18, Y+24	; 0x18
    272a:	39 8d       	ldd	r19, Y+25	; 0x19
    272c:	c9 01       	movw	r24, r18
    272e:	02 96       	adiw	r24, 0x02	; 2
    2730:	99 8f       	std	Y+25, r25	; 0x19
    2732:	88 8f       	std	Y+24, r24	; 0x18
    2734:	f9 01       	movw	r30, r18
    2736:	80 81       	ld	r24, Z
    2738:	91 81       	ldd	r25, Z+1	; 0x01
    273a:	9d 8b       	std	Y+21, r25	; 0x15
    273c:	8c 8b       	std	Y+20, r24	; 0x14
    273e:	0a c0       	rjmp	.+20     	; 0x2754 <uart_mini_printf+0x15a>
                    {
                        uart_putchar(*sval);
    2740:	ec 89       	ldd	r30, Y+20	; 0x14
    2742:	fd 89       	ldd	r31, Y+21	; 0x15
    2744:	80 81       	ld	r24, Z
    2746:	0e 94 a5 12 	call	0x254a	; 0x254a <uart_putchar>
                    uart_putchar('l');
                    uart_putchar('s');
                }
                else
                {
                    for (sval = va_arg(arg_ptr, U8 *); *sval; sval++)
    274a:	8c 89       	ldd	r24, Y+20	; 0x14
    274c:	9d 89       	ldd	r25, Y+21	; 0x15
    274e:	01 96       	adiw	r24, 0x01	; 1
    2750:	9d 8b       	std	Y+21, r25	; 0x15
    2752:	8c 8b       	std	Y+20, r24	; 0x14
    2754:	ec 89       	ldd	r30, Y+20	; 0x14
    2756:	fd 89       	ldd	r31, Y+21	; 0x15
    2758:	80 81       	ld	r24, Z
    275a:	88 23       	and	r24, r24
    275c:	89 f7       	brne	.-30     	; 0x2740 <uart_mini_printf+0x146>
                    {
                        uart_putchar(*sval);
                    }
                }
                // Clean up
                min_size = DATA_BUF_LEN-1;
    275e:	8b e0       	ldi	r24, 0x0B	; 11
    2760:	88 8b       	std	Y+16, r24	; 0x10
                alt_p_c = FALSE;
    2762:	1e 86       	std	Y+14, r1	; 0x0e
                long_flag = FALSE;
    2764:	1f 86       	std	Y+15, r1	; 0x0f
    2766:	d0 c2       	rjmp	.+1440   	; 0x2d08 <uart_mini_printf+0x70e>
                break;  // case 's'
                
            case 'l':  // It is not the number "ONE" but the lower case of "L" character
                if (long_flag == TRUE)      // ERROR: two consecutive 'l'
    2768:	8f 85       	ldd	r24, Y+15	; 0x0f
    276a:	81 30       	cpi	r24, 0x01	; 1
    276c:	31 f4       	brne	.+12     	; 0x277a <uart_mini_printf+0x180>
                {
                    uart_putchar('l');
    276e:	8c e6       	ldi	r24, 0x6C	; 108
    2770:	0e 94 a5 12 	call	0x254a	; 0x254a <uart_putchar>
                    alt_p_c = FALSE;
    2774:	1e 86       	std	Y+14, r1	; 0x0e
                    long_flag = FALSE;
    2776:	1f 86       	std	Y+15, r1	; 0x0f
    2778:	04 c0       	rjmp	.+8      	; 0x2782 <uart_mini_printf+0x188>
                }
                else
                {
                    alt_p_c = TRUE;
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	8e 87       	std	Y+14, r24	; 0x0e
                    long_flag = TRUE;
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	8f 87       	std	Y+15, r24	; 0x0f
                }
                p--;
    2782:	8e 89       	ldd	r24, Y+22	; 0x16
    2784:	9f 89       	ldd	r25, Y+23	; 0x17
    2786:	01 97       	sbiw	r24, 0x01	; 1
    2788:	9f 8b       	std	Y+23, r25	; 0x17
    278a:	8e 8b       	std	Y+22, r24	; 0x16
    278c:	bd c2       	rjmp	.+1402   	; 0x2d08 <uart_mini_printf+0x70e>
                break;  // case 'l'
                
            case 'd':
                n_sign  = FALSE;               
    278e:	1a 8a       	std	Y+18, r1	; 0x12
                for(data_idx = 0; data_idx < (DATA_BUF_LEN-1); data_idx++)
    2790:	19 8a       	std	Y+17, r1	; 0x11
    2792:	0d c0       	rjmp	.+26     	; 0x27ae <uart_mini_printf+0x1b4>
                {
                    data_buf[data_idx] = '0';
    2794:	89 89       	ldd	r24, Y+17	; 0x11
    2796:	28 2f       	mov	r18, r24
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	ce 01       	movw	r24, r28
    279c:	4a 96       	adiw	r24, 0x1a	; 26
    279e:	fc 01       	movw	r30, r24
    27a0:	e2 0f       	add	r30, r18
    27a2:	f3 1f       	adc	r31, r19
    27a4:	80 e3       	ldi	r24, 0x30	; 48
    27a6:	80 83       	st	Z, r24
                p--;
                break;  // case 'l'
                
            case 'd':
                n_sign  = FALSE;               
                for(data_idx = 0; data_idx < (DATA_BUF_LEN-1); data_idx++)
    27a8:	89 89       	ldd	r24, Y+17	; 0x11
    27aa:	8f 5f       	subi	r24, 0xFF	; 255
    27ac:	89 8b       	std	Y+17, r24	; 0x11
    27ae:	89 89       	ldd	r24, Y+17	; 0x11
    27b0:	8b 30       	cpi	r24, 0x0B	; 11
    27b2:	80 f3       	brcs	.-32     	; 0x2794 <uart_mini_printf+0x19a>
                {
                    data_buf[data_idx] = '0';
                }
                data_buf[DATA_BUF_LEN-1] = 0;
    27b4:	1d a2       	std	Y+37, r1	; 0x25
                data_idx = DATA_BUF_LEN - 2;
    27b6:	8a e0       	ldi	r24, 0x0A	; 10
    27b8:	89 8b       	std	Y+17, r24	; 0x11
                if (long_flag)  // 32-bit
    27ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    27bc:	88 23       	and	r24, r24
    27be:	09 f4       	brne	.+2      	; 0x27c2 <uart_mini_printf+0x1c8>
    27c0:	5d c0       	rjmp	.+186    	; 0x287c <uart_mini_printf+0x282>
                {
                    s32_val = va_arg(arg_ptr, S32);
    27c2:	28 8d       	ldd	r18, Y+24	; 0x18
    27c4:	39 8d       	ldd	r19, Y+25	; 0x19
    27c6:	c9 01       	movw	r24, r18
    27c8:	04 96       	adiw	r24, 0x04	; 4
    27ca:	99 8f       	std	Y+25, r25	; 0x19
    27cc:	88 8f       	std	Y+24, r24	; 0x18
    27ce:	f9 01       	movw	r30, r18
    27d0:	80 81       	ld	r24, Z
    27d2:	91 81       	ldd	r25, Z+1	; 0x01
    27d4:	a2 81       	ldd	r26, Z+2	; 0x02
    27d6:	b3 81       	ldd	r27, Z+3	; 0x03
    27d8:	8f 83       	std	Y+7, r24	; 0x07
    27da:	98 87       	std	Y+8, r25	; 0x08
    27dc:	a9 87       	std	Y+9, r26	; 0x09
    27de:	ba 87       	std	Y+10, r27	; 0x0a
                    if (s32_val < 0)
    27e0:	8f 81       	ldd	r24, Y+7	; 0x07
    27e2:	98 85       	ldd	r25, Y+8	; 0x08
    27e4:	a9 85       	ldd	r26, Y+9	; 0x09
    27e6:	ba 85       	ldd	r27, Y+10	; 0x0a
    27e8:	bb 23       	and	r27, r27
    27ea:	8c f4       	brge	.+34     	; 0x280e <uart_mini_printf+0x214>
                    {
                        n_sign = TRUE;
    27ec:	81 e0       	ldi	r24, 0x01	; 1
    27ee:	8a 8b       	std	Y+18, r24	; 0x12
                        s32_val  = -s32_val;
    27f0:	8f 81       	ldd	r24, Y+7	; 0x07
    27f2:	98 85       	ldd	r25, Y+8	; 0x08
    27f4:	a9 85       	ldd	r26, Y+9	; 0x09
    27f6:	ba 85       	ldd	r27, Y+10	; 0x0a
    27f8:	b0 95       	com	r27
    27fa:	a0 95       	com	r26
    27fc:	90 95       	com	r25
    27fe:	81 95       	neg	r24
    2800:	9f 4f       	sbci	r25, 0xFF	; 255
    2802:	af 4f       	sbci	r26, 0xFF	; 255
    2804:	bf 4f       	sbci	r27, 0xFF	; 255
    2806:	8f 83       	std	Y+7, r24	; 0x07
    2808:	98 87       	std	Y+8, r25	; 0x08
    280a:	a9 87       	std	Y+9, r26	; 0x09
    280c:	ba 87       	std	Y+10, r27	; 0x0a
                    }
                    while (1)
                    {
                        data_buf[data_idx] = s32_val % 10 + '0';
    280e:	89 89       	ldd	r24, Y+17	; 0x11
    2810:	08 2f       	mov	r16, r24
    2812:	10 e0       	ldi	r17, 0x00	; 0
    2814:	8f 81       	ldd	r24, Y+7	; 0x07
    2816:	98 85       	ldd	r25, Y+8	; 0x08
    2818:	a9 85       	ldd	r26, Y+9	; 0x09
    281a:	ba 85       	ldd	r27, Y+10	; 0x0a
    281c:	2a e0       	ldi	r18, 0x0A	; 10
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	40 e0       	ldi	r20, 0x00	; 0
    2822:	50 e0       	ldi	r21, 0x00	; 0
    2824:	bc 01       	movw	r22, r24
    2826:	cd 01       	movw	r24, r26
    2828:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <__divmodsi4>
    282c:	dc 01       	movw	r26, r24
    282e:	cb 01       	movw	r24, r22
    2830:	28 2f       	mov	r18, r24
    2832:	20 5d       	subi	r18, 0xD0	; 208
    2834:	ce 01       	movw	r24, r28
    2836:	4a 96       	adiw	r24, 0x1a	; 26
    2838:	fc 01       	movw	r30, r24
    283a:	e0 0f       	add	r30, r16
    283c:	f1 1f       	adc	r31, r17
    283e:	20 83       	st	Z, r18
                        s32_val /= 10;
    2840:	8f 81       	ldd	r24, Y+7	; 0x07
    2842:	98 85       	ldd	r25, Y+8	; 0x08
    2844:	a9 85       	ldd	r26, Y+9	; 0x09
    2846:	ba 85       	ldd	r27, Y+10	; 0x0a
    2848:	2a e0       	ldi	r18, 0x0A	; 10
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	40 e0       	ldi	r20, 0x00	; 0
    284e:	50 e0       	ldi	r21, 0x00	; 0
    2850:	bc 01       	movw	r22, r24
    2852:	cd 01       	movw	r24, r26
    2854:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <__divmodsi4>
    2858:	da 01       	movw	r26, r20
    285a:	c9 01       	movw	r24, r18
    285c:	8f 83       	std	Y+7, r24	; 0x07
    285e:	98 87       	std	Y+8, r25	; 0x08
    2860:	a9 87       	std	Y+9, r26	; 0x09
    2862:	ba 87       	std	Y+10, r27	; 0x0a
                        data_idx--;
    2864:	89 89       	ldd	r24, Y+17	; 0x11
    2866:	81 50       	subi	r24, 0x01	; 1
    2868:	89 8b       	std	Y+17, r24	; 0x11
						if (s32_val==0) break;
    286a:	8f 81       	ldd	r24, Y+7	; 0x07
    286c:	98 85       	ldd	r25, Y+8	; 0x08
    286e:	a9 85       	ldd	r26, Y+9	; 0x09
    2870:	ba 85       	ldd	r27, Y+10	; 0x0a
    2872:	00 97       	sbiw	r24, 0x00	; 0
    2874:	a1 05       	cpc	r26, r1
    2876:	b1 05       	cpc	r27, r1
    2878:	d9 f1       	breq	.+118    	; 0x28f0 <uart_mini_printf+0x2f6>
    287a:	c9 cf       	rjmp	.-110    	; 0x280e <uart_mini_printf+0x214>
                   }
                }
                else  // 16-bit
                {
                    s16_val = (S16)(va_arg(arg_ptr, int)); // s16_val = va_arg(arg_ptr, S16);
    287c:	28 8d       	ldd	r18, Y+24	; 0x18
    287e:	39 8d       	ldd	r19, Y+25	; 0x19
    2880:	c9 01       	movw	r24, r18
    2882:	02 96       	adiw	r24, 0x02	; 2
    2884:	99 8f       	std	Y+25, r25	; 0x19
    2886:	88 8f       	std	Y+24, r24	; 0x18
    2888:	f9 01       	movw	r30, r18
    288a:	80 81       	ld	r24, Z
    288c:	91 81       	ldd	r25, Z+1	; 0x01
    288e:	9c 87       	std	Y+12, r25	; 0x0c
    2890:	8b 87       	std	Y+11, r24	; 0x0b
                    if (s16_val < 0)
    2892:	8b 85       	ldd	r24, Y+11	; 0x0b
    2894:	9c 85       	ldd	r25, Y+12	; 0x0c
    2896:	99 23       	and	r25, r25
    2898:	4c f4       	brge	.+18     	; 0x28ac <uart_mini_printf+0x2b2>
                    {
                        n_sign = TRUE;
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	8a 8b       	std	Y+18, r24	; 0x12
                        s16_val  = -s16_val;
    289e:	8b 85       	ldd	r24, Y+11	; 0x0b
    28a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    28a2:	90 95       	com	r25
    28a4:	81 95       	neg	r24
    28a6:	9f 4f       	sbci	r25, 0xFF	; 255
    28a8:	9c 87       	std	Y+12, r25	; 0x0c
    28aa:	8b 87       	std	Y+11, r24	; 0x0b
                    }
                    while (1)
                    {
                        data_buf[data_idx] = s16_val % 10 + '0';
    28ac:	89 89       	ldd	r24, Y+17	; 0x11
    28ae:	e8 2f       	mov	r30, r24
    28b0:	f0 e0       	ldi	r31, 0x00	; 0
    28b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    28b4:	9c 85       	ldd	r25, Y+12	; 0x0c
    28b6:	2a e0       	ldi	r18, 0x0A	; 10
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	b9 01       	movw	r22, r18
    28bc:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__divmodhi4>
    28c0:	28 2f       	mov	r18, r24
    28c2:	20 5d       	subi	r18, 0xD0	; 208
    28c4:	ce 01       	movw	r24, r28
    28c6:	4a 96       	adiw	r24, 0x1a	; 26
    28c8:	e8 0f       	add	r30, r24
    28ca:	f9 1f       	adc	r31, r25
    28cc:	20 83       	st	Z, r18
                        s16_val /= 10;
    28ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    28d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    28d2:	2a e0       	ldi	r18, 0x0A	; 10
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	b9 01       	movw	r22, r18
    28d8:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__divmodhi4>
    28dc:	cb 01       	movw	r24, r22
    28de:	9c 87       	std	Y+12, r25	; 0x0c
    28e0:	8b 87       	std	Y+11, r24	; 0x0b
                        data_idx--;
    28e2:	89 89       	ldd	r24, Y+17	; 0x11
    28e4:	81 50       	subi	r24, 0x01	; 1
    28e6:	89 8b       	std	Y+17, r24	; 0x11
						if (s16_val==0) break;
    28e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    28ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    28ec:	00 97       	sbiw	r24, 0x00	; 0
    28ee:	f1 f6       	brne	.-68     	; 0x28ac <uart_mini_printf+0x2b2>
                    }
                }
                if (n_sign) { uart_putchar('-'); }
    28f0:	8a 89       	ldd	r24, Y+18	; 0x12
    28f2:	88 23       	and	r24, r24
    28f4:	19 f0       	breq	.+6      	; 0x28fc <uart_mini_printf+0x302>
    28f6:	8d e2       	ldi	r24, 0x2D	; 45
    28f8:	0e 94 a5 12 	call	0x254a	; 0x254a <uart_putchar>
                data_idx++;
    28fc:	89 89       	ldd	r24, Y+17	; 0x11
    28fe:	8f 5f       	subi	r24, 0xFF	; 255
    2900:	89 8b       	std	Y+17, r24	; 0x11
                if (min_size < data_idx)
    2902:	98 89       	ldd	r25, Y+16	; 0x10
    2904:	89 89       	ldd	r24, Y+17	; 0x11
    2906:	98 17       	cp	r25, r24
    2908:	10 f4       	brcc	.+4      	; 0x290e <uart_mini_printf+0x314>
                {
                    data_idx = min_size;
    290a:	88 89       	ldd	r24, Y+16	; 0x10
    290c:	89 8b       	std	Y+17, r24	; 0x11
                }
                uart_put_string (data_buf + data_idx);
    290e:	89 89       	ldd	r24, Y+17	; 0x11
    2910:	28 2f       	mov	r18, r24
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	ce 01       	movw	r24, r28
    2916:	4a 96       	adiw	r24, 0x1a	; 26
    2918:	82 0f       	add	r24, r18
    291a:	93 1f       	adc	r25, r19
    291c:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <uart_put_string>
                // Clean up
                min_size = DATA_BUF_LEN-1;
    2920:	8b e0       	ldi	r24, 0x0B	; 11
    2922:	88 8b       	std	Y+16, r24	; 0x10
                alt_p_c = FALSE;
    2924:	1e 86       	std	Y+14, r1	; 0x0e
                long_flag = FALSE;
    2926:	1f 86       	std	Y+15, r1	; 0x0f
    2928:	ef c1       	rjmp	.+990    	; 0x2d08 <uart_mini_printf+0x70e>
                break;  // case 'd'
                
            case 'u':
                for(data_idx = 0; data_idx < (DATA_BUF_LEN-1); data_idx++)
    292a:	19 8a       	std	Y+17, r1	; 0x11
    292c:	0d c0       	rjmp	.+26     	; 0x2948 <uart_mini_printf+0x34e>
                {
                    data_buf[data_idx] = '0';
    292e:	89 89       	ldd	r24, Y+17	; 0x11
    2930:	28 2f       	mov	r18, r24
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	ce 01       	movw	r24, r28
    2936:	4a 96       	adiw	r24, 0x1a	; 26
    2938:	fc 01       	movw	r30, r24
    293a:	e2 0f       	add	r30, r18
    293c:	f3 1f       	adc	r31, r19
    293e:	80 e3       	ldi	r24, 0x30	; 48
    2940:	80 83       	st	Z, r24
                alt_p_c = FALSE;
                long_flag = FALSE;
                break;  // case 'd'
                
            case 'u':
                for(data_idx = 0; data_idx < (DATA_BUF_LEN-1); data_idx++)
    2942:	89 89       	ldd	r24, Y+17	; 0x11
    2944:	8f 5f       	subi	r24, 0xFF	; 255
    2946:	89 8b       	std	Y+17, r24	; 0x11
    2948:	89 89       	ldd	r24, Y+17	; 0x11
    294a:	8b 30       	cpi	r24, 0x0B	; 11
    294c:	80 f3       	brcs	.-32     	; 0x292e <uart_mini_printf+0x334>
                {
                    data_buf[data_idx] = '0';
                }
                data_buf[DATA_BUF_LEN-1] = 0;
    294e:	1d a2       	std	Y+37, r1	; 0x25
                data_idx = DATA_BUF_LEN - 2;
    2950:	8a e0       	ldi	r24, 0x0A	; 10
    2952:	89 8b       	std	Y+17, r24	; 0x11
                if (long_flag)  // 32-bit
    2954:	8f 85       	ldd	r24, Y+15	; 0x0f
    2956:	88 23       	and	r24, r24
    2958:	09 f4       	brne	.+2      	; 0x295c <uart_mini_printf+0x362>
    295a:	46 c0       	rjmp	.+140    	; 0x29e8 <uart_mini_printf+0x3ee>
                {
                    u32_val = va_arg(arg_ptr, U32);
    295c:	28 8d       	ldd	r18, Y+24	; 0x18
    295e:	39 8d       	ldd	r19, Y+25	; 0x19
    2960:	c9 01       	movw	r24, r18
    2962:	04 96       	adiw	r24, 0x04	; 4
    2964:	99 8f       	std	Y+25, r25	; 0x19
    2966:	88 8f       	std	Y+24, r24	; 0x18
    2968:	f9 01       	movw	r30, r18
    296a:	80 81       	ld	r24, Z
    296c:	91 81       	ldd	r25, Z+1	; 0x01
    296e:	a2 81       	ldd	r26, Z+2	; 0x02
    2970:	b3 81       	ldd	r27, Z+3	; 0x03
    2972:	89 83       	std	Y+1, r24	; 0x01
    2974:	9a 83       	std	Y+2, r25	; 0x02
    2976:	ab 83       	std	Y+3, r26	; 0x03
    2978:	bc 83       	std	Y+4, r27	; 0x04
                    while (1)
                    {
                        data_buf[data_idx] = u32_val % 10 + '0';
    297a:	89 89       	ldd	r24, Y+17	; 0x11
    297c:	08 2f       	mov	r16, r24
    297e:	10 e0       	ldi	r17, 0x00	; 0
    2980:	89 81       	ldd	r24, Y+1	; 0x01
    2982:	9a 81       	ldd	r25, Y+2	; 0x02
    2984:	ab 81       	ldd	r26, Y+3	; 0x03
    2986:	bc 81       	ldd	r27, Y+4	; 0x04
    2988:	2a e0       	ldi	r18, 0x0A	; 10
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	40 e0       	ldi	r20, 0x00	; 0
    298e:	50 e0       	ldi	r21, 0x00	; 0
    2990:	bc 01       	movw	r22, r24
    2992:	cd 01       	movw	r24, r26
    2994:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__udivmodsi4>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	28 2f       	mov	r18, r24
    299e:	20 5d       	subi	r18, 0xD0	; 208
    29a0:	ce 01       	movw	r24, r28
    29a2:	4a 96       	adiw	r24, 0x1a	; 26
    29a4:	fc 01       	movw	r30, r24
    29a6:	e0 0f       	add	r30, r16
    29a8:	f1 1f       	adc	r31, r17
    29aa:	20 83       	st	Z, r18
                        u32_val /= 10;
    29ac:	89 81       	ldd	r24, Y+1	; 0x01
    29ae:	9a 81       	ldd	r25, Y+2	; 0x02
    29b0:	ab 81       	ldd	r26, Y+3	; 0x03
    29b2:	bc 81       	ldd	r27, Y+4	; 0x04
    29b4:	2a e0       	ldi	r18, 0x0A	; 10
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	40 e0       	ldi	r20, 0x00	; 0
    29ba:	50 e0       	ldi	r21, 0x00	; 0
    29bc:	bc 01       	movw	r22, r24
    29be:	cd 01       	movw	r24, r26
    29c0:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__udivmodsi4>
    29c4:	da 01       	movw	r26, r20
    29c6:	c9 01       	movw	r24, r18
    29c8:	89 83       	std	Y+1, r24	; 0x01
    29ca:	9a 83       	std	Y+2, r25	; 0x02
    29cc:	ab 83       	std	Y+3, r26	; 0x03
    29ce:	bc 83       	std	Y+4, r27	; 0x04
                        data_idx--;
    29d0:	89 89       	ldd	r24, Y+17	; 0x11
    29d2:	81 50       	subi	r24, 0x01	; 1
    29d4:	89 8b       	std	Y+17, r24	; 0x11
						if (u32_val==0) break;
    29d6:	89 81       	ldd	r24, Y+1	; 0x01
    29d8:	9a 81       	ldd	r25, Y+2	; 0x02
    29da:	ab 81       	ldd	r26, Y+3	; 0x03
    29dc:	bc 81       	ldd	r27, Y+4	; 0x04
    29de:	00 97       	sbiw	r24, 0x00	; 0
    29e0:	a1 05       	cpc	r26, r1
    29e2:	b1 05       	cpc	r27, r1
    29e4:	71 f1       	breq	.+92     	; 0x2a42 <uart_mini_printf+0x448>
    29e6:	c9 cf       	rjmp	.-110    	; 0x297a <uart_mini_printf+0x380>
                    }
                }
                else  // 16-bit
                {
                    u16_val = (U16)(va_arg(arg_ptr, int)); // u16_val = va_arg(arg_ptr, U16);
    29e8:	28 8d       	ldd	r18, Y+24	; 0x18
    29ea:	39 8d       	ldd	r19, Y+25	; 0x19
    29ec:	c9 01       	movw	r24, r18
    29ee:	02 96       	adiw	r24, 0x02	; 2
    29f0:	99 8f       	std	Y+25, r25	; 0x19
    29f2:	88 8f       	std	Y+24, r24	; 0x18
    29f4:	f9 01       	movw	r30, r18
    29f6:	80 81       	ld	r24, Z
    29f8:	91 81       	ldd	r25, Z+1	; 0x01
    29fa:	9e 83       	std	Y+6, r25	; 0x06
    29fc:	8d 83       	std	Y+5, r24	; 0x05
                    while (1)
                    {
                        data_buf[data_idx] = u16_val % 10 + '0';
    29fe:	89 89       	ldd	r24, Y+17	; 0x11
    2a00:	e8 2f       	mov	r30, r24
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	8d 81       	ldd	r24, Y+5	; 0x05
    2a06:	9e 81       	ldd	r25, Y+6	; 0x06
    2a08:	2a e0       	ldi	r18, 0x0A	; 10
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	b9 01       	movw	r22, r18
    2a0e:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__udivmodhi4>
    2a12:	28 2f       	mov	r18, r24
    2a14:	20 5d       	subi	r18, 0xD0	; 208
    2a16:	ce 01       	movw	r24, r28
    2a18:	4a 96       	adiw	r24, 0x1a	; 26
    2a1a:	e8 0f       	add	r30, r24
    2a1c:	f9 1f       	adc	r31, r25
    2a1e:	20 83       	st	Z, r18
                        data_idx--;
    2a20:	89 89       	ldd	r24, Y+17	; 0x11
    2a22:	81 50       	subi	r24, 0x01	; 1
    2a24:	89 8b       	std	Y+17, r24	; 0x11
                        u16_val /= 10;
    2a26:	8d 81       	ldd	r24, Y+5	; 0x05
    2a28:	9e 81       	ldd	r25, Y+6	; 0x06
    2a2a:	2a e0       	ldi	r18, 0x0A	; 10
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	b9 01       	movw	r22, r18
    2a30:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__udivmodhi4>
    2a34:	cb 01       	movw	r24, r22
    2a36:	9e 83       	std	Y+6, r25	; 0x06
    2a38:	8d 83       	std	Y+5, r24	; 0x05
						if (u16_val==0) break;
    2a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a3e:	00 97       	sbiw	r24, 0x00	; 0
    2a40:	f1 f6       	brne	.-68     	; 0x29fe <uart_mini_printf+0x404>
                    }
                }
                data_idx++;
    2a42:	89 89       	ldd	r24, Y+17	; 0x11
    2a44:	8f 5f       	subi	r24, 0xFF	; 255
    2a46:	89 8b       	std	Y+17, r24	; 0x11
                if (min_size < data_idx)
    2a48:	98 89       	ldd	r25, Y+16	; 0x10
    2a4a:	89 89       	ldd	r24, Y+17	; 0x11
    2a4c:	98 17       	cp	r25, r24
    2a4e:	10 f4       	brcc	.+4      	; 0x2a54 <uart_mini_printf+0x45a>
                {
                    data_idx = min_size;
    2a50:	88 89       	ldd	r24, Y+16	; 0x10
    2a52:	89 8b       	std	Y+17, r24	; 0x11
                }
                uart_put_string (data_buf + data_idx);
    2a54:	89 89       	ldd	r24, Y+17	; 0x11
    2a56:	28 2f       	mov	r18, r24
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	ce 01       	movw	r24, r28
    2a5c:	4a 96       	adiw	r24, 0x1a	; 26
    2a5e:	82 0f       	add	r24, r18
    2a60:	93 1f       	adc	r25, r19
    2a62:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <uart_put_string>
                // Clean up
                min_size = DATA_BUF_LEN-1;
    2a66:	8b e0       	ldi	r24, 0x0B	; 11
    2a68:	88 8b       	std	Y+16, r24	; 0x10
                alt_p_c = FALSE;
    2a6a:	1e 86       	std	Y+14, r1	; 0x0e
                long_flag = FALSE;
    2a6c:	1f 86       	std	Y+15, r1	; 0x0f
    2a6e:	4c c1       	rjmp	.+664    	; 0x2d08 <uart_mini_printf+0x70e>
                break;  // case 'u':
                
            case 'x':
            case 'X':
                for(data_idx = 0; data_idx < (DATA_BUF_LEN-1); data_idx++)
    2a70:	19 8a       	std	Y+17, r1	; 0x11
    2a72:	0d c0       	rjmp	.+26     	; 0x2a8e <uart_mini_printf+0x494>
                {
                    data_buf[data_idx] = '0';
    2a74:	89 89       	ldd	r24, Y+17	; 0x11
    2a76:	28 2f       	mov	r18, r24
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	ce 01       	movw	r24, r28
    2a7c:	4a 96       	adiw	r24, 0x1a	; 26
    2a7e:	fc 01       	movw	r30, r24
    2a80:	e2 0f       	add	r30, r18
    2a82:	f3 1f       	adc	r31, r19
    2a84:	80 e3       	ldi	r24, 0x30	; 48
    2a86:	80 83       	st	Z, r24
                long_flag = FALSE;
                break;  // case 'u':
                
            case 'x':
            case 'X':
                for(data_idx = 0; data_idx < (DATA_BUF_LEN-1); data_idx++)
    2a88:	89 89       	ldd	r24, Y+17	; 0x11
    2a8a:	8f 5f       	subi	r24, 0xFF	; 255
    2a8c:	89 8b       	std	Y+17, r24	; 0x11
    2a8e:	89 89       	ldd	r24, Y+17	; 0x11
    2a90:	8b 30       	cpi	r24, 0x0B	; 11
    2a92:	80 f3       	brcs	.-32     	; 0x2a74 <uart_mini_printf+0x47a>
                {
                    data_buf[data_idx] = '0';
                }
                data_buf[DATA_BUF_LEN-1] = 0;
    2a94:	1d a2       	std	Y+37, r1	; 0x25
                data_idx = DATA_BUF_LEN - 2;
    2a96:	8a e0       	ldi	r24, 0x0A	; 10
    2a98:	89 8b       	std	Y+17, r24	; 0x11
                if (long_flag)  // 32-bit
    2a9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a9c:	88 23       	and	r24, r24
    2a9e:	09 f4       	brne	.+2      	; 0x2aa2 <uart_mini_printf+0x4a8>
    2aa0:	55 c0       	rjmp	.+170    	; 0x2b4c <uart_mini_printf+0x552>
                { 
                    u32_val = va_arg(arg_ptr, U32);
    2aa2:	28 8d       	ldd	r18, Y+24	; 0x18
    2aa4:	39 8d       	ldd	r19, Y+25	; 0x19
    2aa6:	c9 01       	movw	r24, r18
    2aa8:	04 96       	adiw	r24, 0x04	; 4
    2aaa:	99 8f       	std	Y+25, r25	; 0x19
    2aac:	88 8f       	std	Y+24, r24	; 0x18
    2aae:	f9 01       	movw	r30, r18
    2ab0:	80 81       	ld	r24, Z
    2ab2:	91 81       	ldd	r25, Z+1	; 0x01
    2ab4:	a2 81       	ldd	r26, Z+2	; 0x02
    2ab6:	b3 81       	ldd	r27, Z+3	; 0x03
    2ab8:	89 83       	std	Y+1, r24	; 0x01
    2aba:	9a 83       	std	Y+2, r25	; 0x02
    2abc:	ab 83       	std	Y+3, r26	; 0x03
    2abe:	bc 83       	std	Y+4, r27	; 0x04
    2ac0:	3b c0       	rjmp	.+118    	; 0x2b38 <uart_mini_printf+0x53e>
                    while (u32_val)
                    {
                        u8_temp = (U8)(u32_val & 0x0F);
    2ac2:	89 81       	ldd	r24, Y+1	; 0x01
    2ac4:	8f 70       	andi	r24, 0x0F	; 15
    2ac6:	8b 8b       	std	Y+19, r24	; 0x13
                        data_buf[data_idx] = (u8_temp < 10)? u8_temp+'0':u8_temp-10+(*p=='x'?'a':'A');
    2ac8:	89 89       	ldd	r24, Y+17	; 0x11
    2aca:	28 2f       	mov	r18, r24
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	3d a7       	std	Y+45, r19	; 0x2d
    2ad0:	2c a7       	std	Y+44, r18	; 0x2c
    2ad2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ad4:	8a 30       	cpi	r24, 0x0A	; 10
    2ad6:	28 f4       	brcc	.+10     	; 0x2ae2 <uart_mini_printf+0x4e8>
    2ad8:	8b 89       	ldd	r24, Y+19	; 0x13
    2ada:	38 2f       	mov	r19, r24
    2adc:	30 5d       	subi	r19, 0xD0	; 208
    2ade:	3b a7       	std	Y+43, r19	; 0x2b
    2ae0:	10 c0       	rjmp	.+32     	; 0x2b02 <uart_mini_printf+0x508>
    2ae2:	ee 89       	ldd	r30, Y+22	; 0x16
    2ae4:	ff 89       	ldd	r31, Y+23	; 0x17
    2ae6:	80 81       	ld	r24, Z
    2ae8:	88 37       	cpi	r24, 0x78	; 120
    2aea:	19 f4       	brne	.+6      	; 0x2af2 <uart_mini_printf+0x4f8>
    2aec:	81 e6       	ldi	r24, 0x61	; 97
    2aee:	8a a7       	std	Y+42, r24	; 0x2a
    2af0:	02 c0       	rjmp	.+4      	; 0x2af6 <uart_mini_printf+0x4fc>
    2af2:	91 e4       	ldi	r25, 0x41	; 65
    2af4:	9a a7       	std	Y+42, r25	; 0x2a
    2af6:	8b 89       	ldd	r24, Y+19	; 0x13
    2af8:	2a a5       	ldd	r18, Y+42	; 0x2a
    2afa:	82 0f       	add	r24, r18
    2afc:	38 2f       	mov	r19, r24
    2afe:	3a 50       	subi	r19, 0x0A	; 10
    2b00:	3b a7       	std	Y+43, r19	; 0x2b
    2b02:	ce 01       	movw	r24, r28
    2b04:	4a 96       	adiw	r24, 0x1a	; 26
    2b06:	ec a5       	ldd	r30, Y+44	; 0x2c
    2b08:	fd a5       	ldd	r31, Y+45	; 0x2d
    2b0a:	e8 0f       	add	r30, r24
    2b0c:	f9 1f       	adc	r31, r25
    2b0e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b10:	80 83       	st	Z, r24
                        u32_val >>= 4;
    2b12:	89 81       	ldd	r24, Y+1	; 0x01
    2b14:	9a 81       	ldd	r25, Y+2	; 0x02
    2b16:	ab 81       	ldd	r26, Y+3	; 0x03
    2b18:	bc 81       	ldd	r27, Y+4	; 0x04
    2b1a:	68 94       	set
    2b1c:	13 f8       	bld	r1, 3
    2b1e:	b6 95       	lsr	r27
    2b20:	a7 95       	ror	r26
    2b22:	97 95       	ror	r25
    2b24:	87 95       	ror	r24
    2b26:	16 94       	lsr	r1
    2b28:	d1 f7       	brne	.-12     	; 0x2b1e <uart_mini_printf+0x524>
    2b2a:	89 83       	std	Y+1, r24	; 0x01
    2b2c:	9a 83       	std	Y+2, r25	; 0x02
    2b2e:	ab 83       	std	Y+3, r26	; 0x03
    2b30:	bc 83       	std	Y+4, r27	; 0x04
                        data_idx--;
    2b32:	89 89       	ldd	r24, Y+17	; 0x11
    2b34:	81 50       	subi	r24, 0x01	; 1
    2b36:	89 8b       	std	Y+17, r24	; 0x11
                data_buf[DATA_BUF_LEN-1] = 0;
                data_idx = DATA_BUF_LEN - 2;
                if (long_flag)  // 32-bit
                { 
                    u32_val = va_arg(arg_ptr, U32);
                    while (u32_val)
    2b38:	89 81       	ldd	r24, Y+1	; 0x01
    2b3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b3c:	ab 81       	ldd	r26, Y+3	; 0x03
    2b3e:	bc 81       	ldd	r27, Y+4	; 0x04
    2b40:	00 97       	sbiw	r24, 0x00	; 0
    2b42:	a1 05       	cpc	r26, r1
    2b44:	b1 05       	cpc	r27, r1
    2b46:	09 f0       	breq	.+2      	; 0x2b4a <uart_mini_printf+0x550>
    2b48:	bc cf       	rjmp	.-136    	; 0x2ac2 <uart_mini_printf+0x4c8>
    2b4a:	45 c0       	rjmp	.+138    	; 0x2bd6 <uart_mini_printf+0x5dc>
                        data_idx--;
                    }
                }
                else  // 16-bit
                {
                    u16_val = (U16)(va_arg(arg_ptr, int)); // u16_val = va_arg(arg_ptr, U16);
    2b4c:	28 8d       	ldd	r18, Y+24	; 0x18
    2b4e:	39 8d       	ldd	r19, Y+25	; 0x19
    2b50:	c9 01       	movw	r24, r18
    2b52:	02 96       	adiw	r24, 0x02	; 2
    2b54:	99 8f       	std	Y+25, r25	; 0x19
    2b56:	88 8f       	std	Y+24, r24	; 0x18
    2b58:	f9 01       	movw	r30, r18
    2b5a:	80 81       	ld	r24, Z
    2b5c:	91 81       	ldd	r25, Z+1	; 0x01
    2b5e:	9e 83       	std	Y+6, r25	; 0x06
    2b60:	8d 83       	std	Y+5, r24	; 0x05
    2b62:	35 c0       	rjmp	.+106    	; 0x2bce <uart_mini_printf+0x5d4>
                    while (u16_val)
                    {
                        u8_temp = (U8)(u16_val & 0x0F);
    2b64:	8d 81       	ldd	r24, Y+5	; 0x05
    2b66:	8f 70       	andi	r24, 0x0F	; 15
    2b68:	8b 8b       	std	Y+19, r24	; 0x13
                        data_buf[data_idx] = (u8_temp < 10)? u8_temp+'0':u8_temp-10+(*p=='x'?'a':'A');
    2b6a:	89 89       	ldd	r24, Y+17	; 0x11
    2b6c:	28 2f       	mov	r18, r24
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	39 a7       	std	Y+41, r19	; 0x29
    2b72:	28 a7       	std	Y+40, r18	; 0x28
    2b74:	8b 89       	ldd	r24, Y+19	; 0x13
    2b76:	8a 30       	cpi	r24, 0x0A	; 10
    2b78:	28 f4       	brcc	.+10     	; 0x2b84 <uart_mini_printf+0x58a>
    2b7a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b7c:	38 2f       	mov	r19, r24
    2b7e:	30 5d       	subi	r19, 0xD0	; 208
    2b80:	3f a3       	std	Y+39, r19	; 0x27
    2b82:	10 c0       	rjmp	.+32     	; 0x2ba4 <uart_mini_printf+0x5aa>
    2b84:	ee 89       	ldd	r30, Y+22	; 0x16
    2b86:	ff 89       	ldd	r31, Y+23	; 0x17
    2b88:	80 81       	ld	r24, Z
    2b8a:	88 37       	cpi	r24, 0x78	; 120
    2b8c:	19 f4       	brne	.+6      	; 0x2b94 <uart_mini_printf+0x59a>
    2b8e:	81 e6       	ldi	r24, 0x61	; 97
    2b90:	8e a3       	std	Y+38, r24	; 0x26
    2b92:	02 c0       	rjmp	.+4      	; 0x2b98 <uart_mini_printf+0x59e>
    2b94:	91 e4       	ldi	r25, 0x41	; 65
    2b96:	9e a3       	std	Y+38, r25	; 0x26
    2b98:	8b 89       	ldd	r24, Y+19	; 0x13
    2b9a:	2e a1       	ldd	r18, Y+38	; 0x26
    2b9c:	82 0f       	add	r24, r18
    2b9e:	38 2f       	mov	r19, r24
    2ba0:	3a 50       	subi	r19, 0x0A	; 10
    2ba2:	3f a3       	std	Y+39, r19	; 0x27
    2ba4:	ce 01       	movw	r24, r28
    2ba6:	4a 96       	adiw	r24, 0x1a	; 26
    2ba8:	e8 a5       	ldd	r30, Y+40	; 0x28
    2baa:	f9 a5       	ldd	r31, Y+41	; 0x29
    2bac:	e8 0f       	add	r30, r24
    2bae:	f9 1f       	adc	r31, r25
    2bb0:	8f a1       	ldd	r24, Y+39	; 0x27
    2bb2:	80 83       	st	Z, r24
                        u16_val >>= 4;
    2bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb8:	92 95       	swap	r25
    2bba:	82 95       	swap	r24
    2bbc:	8f 70       	andi	r24, 0x0F	; 15
    2bbe:	89 27       	eor	r24, r25
    2bc0:	9f 70       	andi	r25, 0x0F	; 15
    2bc2:	89 27       	eor	r24, r25
    2bc4:	9e 83       	std	Y+6, r25	; 0x06
    2bc6:	8d 83       	std	Y+5, r24	; 0x05
                        data_idx--;
    2bc8:	89 89       	ldd	r24, Y+17	; 0x11
    2bca:	81 50       	subi	r24, 0x01	; 1
    2bcc:	89 8b       	std	Y+17, r24	; 0x11
                    }
                }
                else  // 16-bit
                {
                    u16_val = (U16)(va_arg(arg_ptr, int)); // u16_val = va_arg(arg_ptr, U16);
                    while (u16_val)
    2bce:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bd2:	00 97       	sbiw	r24, 0x00	; 0
    2bd4:	39 f6       	brne	.-114    	; 0x2b64 <uart_mini_printf+0x56a>
                        data_buf[data_idx] = (u8_temp < 10)? u8_temp+'0':u8_temp-10+(*p=='x'?'a':'A');
                        u16_val >>= 4;
                        data_idx--;
                    }
                }
                data_idx++;
    2bd6:	89 89       	ldd	r24, Y+17	; 0x11
    2bd8:	8f 5f       	subi	r24, 0xFF	; 255
    2bda:	89 8b       	std	Y+17, r24	; 0x11
                if (min_size < data_idx)
    2bdc:	98 89       	ldd	r25, Y+16	; 0x10
    2bde:	89 89       	ldd	r24, Y+17	; 0x11
    2be0:	98 17       	cp	r25, r24
    2be2:	10 f4       	brcc	.+4      	; 0x2be8 <uart_mini_printf+0x5ee>
                {
                    data_idx = min_size;
    2be4:	88 89       	ldd	r24, Y+16	; 0x10
    2be6:	89 8b       	std	Y+17, r24	; 0x11
                }
                uart_put_string (data_buf + data_idx);
    2be8:	89 89       	ldd	r24, Y+17	; 0x11
    2bea:	28 2f       	mov	r18, r24
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	ce 01       	movw	r24, r28
    2bf0:	4a 96       	adiw	r24, 0x1a	; 26
    2bf2:	82 0f       	add	r24, r18
    2bf4:	93 1f       	adc	r25, r19
    2bf6:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <uart_put_string>
                // Clean up
                min_size = DATA_BUF_LEN-1;
    2bfa:	8b e0       	ldi	r24, 0x0B	; 11
    2bfc:	88 8b       	std	Y+16, r24	; 0x10
                alt_p_c = FALSE;
    2bfe:	1e 86       	std	Y+14, r1	; 0x0e
                long_flag = FALSE;
    2c00:	1f 86       	std	Y+15, r1	; 0x0f
    2c02:	82 c0       	rjmp	.+260    	; 0x2d08 <uart_mini_printf+0x70e>
                break;  // case 'x' & 'X'
                
            case '0':   // Max allowed "min_size" 2 decimal digit, truncated to DATA_BUF_LEN-1.
                min_size = DATA_BUF_LEN-1;
    2c04:	8b e0       	ldi	r24, 0x0B	; 11
    2c06:	88 8b       	std	Y+16, r24	; 0x10
                if (long_flag == TRUE)      // ERROR: 'l' before '0'
    2c08:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c0a:	81 30       	cpi	r24, 0x01	; 1
    2c0c:	49 f4       	brne	.+18     	; 0x2c20 <uart_mini_printf+0x626>
                {
                    uart_putchar('l');
    2c0e:	8c e6       	ldi	r24, 0x6C	; 108
    2c10:	0e 94 a5 12 	call	0x254a	; 0x254a <uart_putchar>
                    uart_putchar('0');
    2c14:	80 e3       	ldi	r24, 0x30	; 48
    2c16:	0e 94 a5 12 	call	0x254a	; 0x254a <uart_putchar>
                    // Clean up
                    alt_p_c = FALSE;
    2c1a:	1e 86       	std	Y+14, r1	; 0x0e
                    long_flag = FALSE;
    2c1c:	1f 86       	std	Y+15, r1	; 0x0f
    2c1e:	74 c0       	rjmp	.+232    	; 0x2d08 <uart_mini_printf+0x70e>
                    break;
                }
                u8_temp = *++p;
    2c20:	8e 89       	ldd	r24, Y+22	; 0x16
    2c22:	9f 89       	ldd	r25, Y+23	; 0x17
    2c24:	01 96       	adiw	r24, 0x01	; 1
    2c26:	9f 8b       	std	Y+23, r25	; 0x17
    2c28:	8e 8b       	std	Y+22, r24	; 0x16
    2c2a:	ee 89       	ldd	r30, Y+22	; 0x16
    2c2c:	ff 89       	ldd	r31, Y+23	; 0x17
    2c2e:	80 81       	ld	r24, Z
    2c30:	8b 8b       	std	Y+19, r24	; 0x13
                if ((u8_temp >='0') && (u8_temp <='9'))
    2c32:	8b 89       	ldd	r24, Y+19	; 0x13
    2c34:	80 33       	cpi	r24, 0x30	; 48
    2c36:	08 f4       	brcc	.+2      	; 0x2c3a <uart_mini_printf+0x640>
    2c38:	4d c0       	rjmp	.+154    	; 0x2cd4 <uart_mini_printf+0x6da>
    2c3a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c3c:	8a 33       	cpi	r24, 0x3A	; 58
    2c3e:	08 f0       	brcs	.+2      	; 0x2c42 <uart_mini_printf+0x648>
    2c40:	49 c0       	rjmp	.+146    	; 0x2cd4 <uart_mini_printf+0x6da>
                {
                    min_size = u8_temp & 0x0F;
    2c42:	8b 89       	ldd	r24, Y+19	; 0x13
    2c44:	8f 70       	andi	r24, 0x0F	; 15
    2c46:	88 8b       	std	Y+16, r24	; 0x10
                    u8_temp = *++p;
    2c48:	8e 89       	ldd	r24, Y+22	; 0x16
    2c4a:	9f 89       	ldd	r25, Y+23	; 0x17
    2c4c:	01 96       	adiw	r24, 0x01	; 1
    2c4e:	9f 8b       	std	Y+23, r25	; 0x17
    2c50:	8e 8b       	std	Y+22, r24	; 0x16
    2c52:	ee 89       	ldd	r30, Y+22	; 0x16
    2c54:	ff 89       	ldd	r31, Y+23	; 0x17
    2c56:	80 81       	ld	r24, Z
    2c58:	8b 8b       	std	Y+19, r24	; 0x13
                    if ((u8_temp >='0') && (u8_temp <='9'))
    2c5a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c5c:	80 33       	cpi	r24, 0x30	; 48
    2c5e:	90 f0       	brcs	.+36     	; 0x2c84 <uart_mini_printf+0x68a>
    2c60:	8b 89       	ldd	r24, Y+19	; 0x13
    2c62:	8a 33       	cpi	r24, 0x3A	; 58
    2c64:	78 f4       	brcc	.+30     	; 0x2c84 <uart_mini_printf+0x68a>
                    {
                        min_size <<= 4;
    2c66:	88 89       	ldd	r24, Y+16	; 0x10
    2c68:	82 95       	swap	r24
    2c6a:	80 7f       	andi	r24, 0xF0	; 240
    2c6c:	88 8b       	std	Y+16, r24	; 0x10
                        min_size |= (u8_temp & 0x0F);
    2c6e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c70:	98 2f       	mov	r25, r24
    2c72:	9f 70       	andi	r25, 0x0F	; 15
    2c74:	88 89       	ldd	r24, Y+16	; 0x10
    2c76:	89 2b       	or	r24, r25
    2c78:	88 8b       	std	Y+16, r24	; 0x10
                        p++;
    2c7a:	8e 89       	ldd	r24, Y+22	; 0x16
    2c7c:	9f 89       	ldd	r25, Y+23	; 0x17
    2c7e:	01 96       	adiw	r24, 0x01	; 1
    2c80:	9f 8b       	std	Y+23, r25	; 0x17
    2c82:	8e 8b       	std	Y+22, r24	; 0x16
                    }
                    min_size = ((min_size & 0x0F) + ((min_size >> 4) *10));  // Decimal to hexa
    2c84:	88 89       	ldd	r24, Y+16	; 0x10
    2c86:	48 2f       	mov	r20, r24
    2c88:	4f 70       	andi	r20, 0x0F	; 15
    2c8a:	88 89       	ldd	r24, Y+16	; 0x10
    2c8c:	82 95       	swap	r24
    2c8e:	8f 70       	andi	r24, 0x0F	; 15
    2c90:	88 2f       	mov	r24, r24
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	9c 01       	movw	r18, r24
    2c96:	22 0f       	add	r18, r18
    2c98:	33 1f       	adc	r19, r19
    2c9a:	c9 01       	movw	r24, r18
    2c9c:	88 0f       	add	r24, r24
    2c9e:	99 1f       	adc	r25, r25
    2ca0:	88 0f       	add	r24, r24
    2ca2:	99 1f       	adc	r25, r25
    2ca4:	82 0f       	add	r24, r18
    2ca6:	93 1f       	adc	r25, r19
    2ca8:	84 0f       	add	r24, r20
    2caa:	88 8b       	std	Y+16, r24	; 0x10
                    if (min_size > (DATA_BUF_LEN-1))
    2cac:	88 89       	ldd	r24, Y+16	; 0x10
    2cae:	8c 30       	cpi	r24, 0x0C	; 12
    2cb0:	10 f0       	brcs	.+4      	; 0x2cb6 <uart_mini_printf+0x6bc>
                    {
                        min_size = (DATA_BUF_LEN-1);
    2cb2:	8b e0       	ldi	r24, 0x0B	; 11
    2cb4:	88 8b       	std	Y+16, r24	; 0x10
                    }  // Truncation
                    min_size = DATA_BUF_LEN-1 - min_size;  // "min_size" formatted as "data_ix"
    2cb6:	9b e0       	ldi	r25, 0x0B	; 11
    2cb8:	88 89       	ldd	r24, Y+16	; 0x10
    2cba:	29 2f       	mov	r18, r25
    2cbc:	28 1b       	sub	r18, r24
    2cbe:	82 2f       	mov	r24, r18
    2cc0:	88 8b       	std	Y+16, r24	; 0x10
                    // Clean up
                    alt_p_c = FALSE;
                    long_flag = FALSE;
                    break;
                }
                p-=2;
    2cc2:	8e 89       	ldd	r24, Y+22	; 0x16
    2cc4:	9f 89       	ldd	r25, Y+23	; 0x17
    2cc6:	02 97       	sbiw	r24, 0x02	; 2
    2cc8:	9f 8b       	std	Y+23, r25	; 0x17
    2cca:	8e 8b       	std	Y+22, r24	; 0x16
                alt_p_c = TRUE;
    2ccc:	81 e0       	ldi	r24, 0x01	; 1
    2cce:	8e 87       	std	Y+14, r24	; 0x0e
                // Clean up
                long_flag = FALSE;
    2cd0:	1f 86       	std	Y+15, r1	; 0x0f
    2cd2:	1a c0       	rjmp	.+52     	; 0x2d08 <uart_mini_printf+0x70e>
                    }  // Truncation
                    min_size = DATA_BUF_LEN-1 - min_size;  // "min_size" formatted as "data_ix"
                }
                else      // ERROR: any "char" after '0'
                {
                    uart_putchar('0');
    2cd4:	80 e3       	ldi	r24, 0x30	; 48
    2cd6:	0e 94 a5 12 	call	0x254a	; 0x254a <uart_putchar>
                    uart_putchar(*p);
    2cda:	ee 89       	ldd	r30, Y+22	; 0x16
    2cdc:	ff 89       	ldd	r31, Y+23	; 0x17
    2cde:	80 81       	ld	r24, Z
    2ce0:	0e 94 a5 12 	call	0x254a	; 0x254a <uart_putchar>
                    // Clean up
                    alt_p_c = FALSE;
    2ce4:	1e 86       	std	Y+14, r1	; 0x0e
                    long_flag = FALSE;
    2ce6:	1f 86       	std	Y+15, r1	; 0x0f
    2ce8:	0f c0       	rjmp	.+30     	; 0x2d08 <uart_mini_printf+0x70e>
                // Clean up
                long_flag = FALSE;
                break;  // case '0'
                
            default:
                if (long_flag == TRUE)
    2cea:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cec:	81 30       	cpi	r24, 0x01	; 1
    2cee:	19 f4       	brne	.+6      	; 0x2cf6 <uart_mini_printf+0x6fc>
                {
                    uart_putchar('l');
    2cf0:	8c e6       	ldi	r24, 0x6C	; 108
    2cf2:	0e 94 a5 12 	call	0x254a	; 0x254a <uart_putchar>
                }
                uart_putchar(*p);
    2cf6:	ee 89       	ldd	r30, Y+22	; 0x16
    2cf8:	ff 89       	ldd	r31, Y+23	; 0x17
    2cfa:	80 81       	ld	r24, Z
    2cfc:	0e 94 a5 12 	call	0x254a	; 0x254a <uart_putchar>
                // Clean up
                min_size = DATA_BUF_LEN-1;
    2d00:	8b e0       	ldi	r24, 0x0B	; 11
    2d02:	88 8b       	std	Y+16, r24	; 0x10
                alt_p_c = FALSE;
    2d04:	1e 86       	std	Y+14, r1	; 0x0e
                long_flag = FALSE;
    2d06:	1f 86       	std	Y+15, r1	; 0x0f
    long_flag = FALSE;
    alt_p_c = FALSE;
    min_size = DATA_BUF_LEN-1;

    va_start(arg_ptr, format);   // make arg_ptr point to the first unnamed arg
    for (p = (U8 *) format; *p; p++)
    2d08:	8e 89       	ldd	r24, Y+22	; 0x16
    2d0a:	9f 89       	ldd	r25, Y+23	; 0x17
    2d0c:	01 96       	adiw	r24, 0x01	; 1
    2d0e:	9f 8b       	std	Y+23, r25	; 0x17
    2d10:	8e 8b       	std	Y+22, r24	; 0x16
    2d12:	ee 89       	ldd	r30, Y+22	; 0x16
    2d14:	ff 89       	ldd	r31, Y+23	; 0x17
    2d16:	80 81       	ld	r24, Z
    2d18:	88 23       	and	r24, r24
    2d1a:	09 f0       	breq	.+2      	; 0x2d1e <uart_mini_printf+0x724>
    2d1c:	87 cc       	rjmp	.-1778   	; 0x262c <uart_mini_printf+0x32>
        }   // switch (*p ...
        
    }   // for (p = ...
    
    va_end(arg_ptr);
    return 0;
    2d1e:	80 e0       	ldi	r24, 0x00	; 0
}
    2d20:	af 96       	adiw	r28, 0x2f	; 47
    2d22:	0f b6       	in	r0, 0x3f	; 63
    2d24:	f8 94       	cli
    2d26:	de bf       	out	0x3e, r29	; 62
    2d28:	0f be       	out	0x3f, r0	; 63
    2d2a:	cd bf       	out	0x3d, r28	; 61
    2d2c:	cf 91       	pop	r28
    2d2e:	df 91       	pop	r29
    2d30:	1f 91       	pop	r17
    2d32:	0f 91       	pop	r16
    2d34:	08 95       	ret

00002d36 <__udivmodhi4>:
    2d36:	aa 1b       	sub	r26, r26
    2d38:	bb 1b       	sub	r27, r27
    2d3a:	51 e1       	ldi	r21, 0x11	; 17
    2d3c:	07 c0       	rjmp	.+14     	; 0x2d4c <__udivmodhi4_ep>

00002d3e <__udivmodhi4_loop>:
    2d3e:	aa 1f       	adc	r26, r26
    2d40:	bb 1f       	adc	r27, r27
    2d42:	a6 17       	cp	r26, r22
    2d44:	b7 07       	cpc	r27, r23
    2d46:	10 f0       	brcs	.+4      	; 0x2d4c <__udivmodhi4_ep>
    2d48:	a6 1b       	sub	r26, r22
    2d4a:	b7 0b       	sbc	r27, r23

00002d4c <__udivmodhi4_ep>:
    2d4c:	88 1f       	adc	r24, r24
    2d4e:	99 1f       	adc	r25, r25
    2d50:	5a 95       	dec	r21
    2d52:	a9 f7       	brne	.-22     	; 0x2d3e <__udivmodhi4_loop>
    2d54:	80 95       	com	r24
    2d56:	90 95       	com	r25
    2d58:	bc 01       	movw	r22, r24
    2d5a:	cd 01       	movw	r24, r26
    2d5c:	08 95       	ret

00002d5e <__divmodhi4>:
    2d5e:	97 fb       	bst	r25, 7
    2d60:	09 2e       	mov	r0, r25
    2d62:	07 26       	eor	r0, r23
    2d64:	0a d0       	rcall	.+20     	; 0x2d7a <__divmodhi4_neg1>
    2d66:	77 fd       	sbrc	r23, 7
    2d68:	04 d0       	rcall	.+8      	; 0x2d72 <__divmodhi4_neg2>
    2d6a:	e5 df       	rcall	.-54     	; 0x2d36 <__udivmodhi4>
    2d6c:	06 d0       	rcall	.+12     	; 0x2d7a <__divmodhi4_neg1>
    2d6e:	00 20       	and	r0, r0
    2d70:	1a f4       	brpl	.+6      	; 0x2d78 <__divmodhi4_exit>

00002d72 <__divmodhi4_neg2>:
    2d72:	70 95       	com	r23
    2d74:	61 95       	neg	r22
    2d76:	7f 4f       	sbci	r23, 0xFF	; 255

00002d78 <__divmodhi4_exit>:
    2d78:	08 95       	ret

00002d7a <__divmodhi4_neg1>:
    2d7a:	f6 f7       	brtc	.-4      	; 0x2d78 <__divmodhi4_exit>
    2d7c:	90 95       	com	r25
    2d7e:	81 95       	neg	r24
    2d80:	9f 4f       	sbci	r25, 0xFF	; 255
    2d82:	08 95       	ret

00002d84 <__udivmodsi4>:
    2d84:	a1 e2       	ldi	r26, 0x21	; 33
    2d86:	1a 2e       	mov	r1, r26
    2d88:	aa 1b       	sub	r26, r26
    2d8a:	bb 1b       	sub	r27, r27
    2d8c:	fd 01       	movw	r30, r26
    2d8e:	0d c0       	rjmp	.+26     	; 0x2daa <__udivmodsi4_ep>

00002d90 <__udivmodsi4_loop>:
    2d90:	aa 1f       	adc	r26, r26
    2d92:	bb 1f       	adc	r27, r27
    2d94:	ee 1f       	adc	r30, r30
    2d96:	ff 1f       	adc	r31, r31
    2d98:	a2 17       	cp	r26, r18
    2d9a:	b3 07       	cpc	r27, r19
    2d9c:	e4 07       	cpc	r30, r20
    2d9e:	f5 07       	cpc	r31, r21
    2da0:	20 f0       	brcs	.+8      	; 0x2daa <__udivmodsi4_ep>
    2da2:	a2 1b       	sub	r26, r18
    2da4:	b3 0b       	sbc	r27, r19
    2da6:	e4 0b       	sbc	r30, r20
    2da8:	f5 0b       	sbc	r31, r21

00002daa <__udivmodsi4_ep>:
    2daa:	66 1f       	adc	r22, r22
    2dac:	77 1f       	adc	r23, r23
    2dae:	88 1f       	adc	r24, r24
    2db0:	99 1f       	adc	r25, r25
    2db2:	1a 94       	dec	r1
    2db4:	69 f7       	brne	.-38     	; 0x2d90 <__udivmodsi4_loop>
    2db6:	60 95       	com	r22
    2db8:	70 95       	com	r23
    2dba:	80 95       	com	r24
    2dbc:	90 95       	com	r25
    2dbe:	9b 01       	movw	r18, r22
    2dc0:	ac 01       	movw	r20, r24
    2dc2:	bd 01       	movw	r22, r26
    2dc4:	cf 01       	movw	r24, r30
    2dc6:	08 95       	ret

00002dc8 <__divmodsi4>:
    2dc8:	97 fb       	bst	r25, 7
    2dca:	09 2e       	mov	r0, r25
    2dcc:	05 26       	eor	r0, r21
    2dce:	0e d0       	rcall	.+28     	; 0x2dec <__divmodsi4_neg1>
    2dd0:	57 fd       	sbrc	r21, 7
    2dd2:	04 d0       	rcall	.+8      	; 0x2ddc <__divmodsi4_neg2>
    2dd4:	d7 df       	rcall	.-82     	; 0x2d84 <__udivmodsi4>
    2dd6:	0a d0       	rcall	.+20     	; 0x2dec <__divmodsi4_neg1>
    2dd8:	00 1c       	adc	r0, r0
    2dda:	38 f4       	brcc	.+14     	; 0x2dea <__divmodsi4_exit>

00002ddc <__divmodsi4_neg2>:
    2ddc:	50 95       	com	r21
    2dde:	40 95       	com	r20
    2de0:	30 95       	com	r19
    2de2:	21 95       	neg	r18
    2de4:	3f 4f       	sbci	r19, 0xFF	; 255
    2de6:	4f 4f       	sbci	r20, 0xFF	; 255
    2de8:	5f 4f       	sbci	r21, 0xFF	; 255

00002dea <__divmodsi4_exit>:
    2dea:	08 95       	ret

00002dec <__divmodsi4_neg1>:
    2dec:	f6 f7       	brtc	.-4      	; 0x2dea <__divmodsi4_exit>
    2dee:	90 95       	com	r25
    2df0:	80 95       	com	r24
    2df2:	70 95       	com	r23
    2df4:	61 95       	neg	r22
    2df6:	7f 4f       	sbci	r23, 0xFF	; 255
    2df8:	8f 4f       	sbci	r24, 0xFF	; 255
    2dfa:	9f 4f       	sbci	r25, 0xFF	; 255
    2dfc:	08 95       	ret

00002dfe <_exit>:
    2dfe:	f8 94       	cli

00002e00 <__stop_program>:
    2e00:	ff cf       	rjmp	.-2      	; 0x2e00 <__stop_program>
