
node.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000025a  00800100  00002ece  00002f62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ece  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  0080035a  0080035a  000031bc  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  000031bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  0000390c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00003960  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000332  00000000  00000000  00003a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000f70  00000000  00000000  00003d72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000065e  00000000  00000000  00004ce2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000155c  00000000  00000000  00005340  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000230  00000000  00000000  0000689c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000060e  00000000  00000000  00006acc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__vector_9>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__vector_18>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      80:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	13 e0       	ldi	r17, 0x03	; 3
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	ee ec       	ldi	r30, 0xCE	; 206
      a8:	fe e2       	ldi	r31, 0x2E	; 46
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	aa 35       	cpi	r26, 0x5A	; 90
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	13 e0       	ldi	r17, 0x03	; 3
      bc:	aa e5       	ldi	r26, 0x5A	; 90
      be:	b3 e0       	ldi	r27, 0x03	; 3
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	ab 37       	cpi	r26, 0x7B	; 123
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
      ce:	0c 94 65 17 	jmp	0x2eca	; 0x2eca <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <main>:
//! This program performs some remote frames (c.f. NB_TARGET).
//! The response must be a data frame that contents (in the order) the addressed
//! node temperature, luminosity and VCC values.
//------------------------------------------------------------------------------
int main (void)
{	
      d6:	df 93       	push	r29
      d8:	cf 93       	push	r28
      da:	00 d0       	rcall	.+0      	; 0xdc <main+0x6>
      dc:	cd b7       	in	r28, 0x3d	; 61
      de:	de b7       	in	r29, 0x3e	; 62
    U8 i,j;    
    CLKPR = 0x80;  CLKPR = 0x00;  // Clock prescaler Reset
      e0:	e1 e6       	ldi	r30, 0x61	; 97
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	80 e8       	ldi	r24, 0x80	; 128
      e6:	80 83       	st	Z, r24
      e8:	e1 e6       	ldi	r30, 0x61	; 97
      ea:	f0 e0       	ldi	r31, 0x00	; 0
      ec:	10 82       	st	Z, r1
   
	uart_init(CONF_8BIT_NOPAR_1STOP,UART_BAUDRATE);
      ee:	83 e0       	ldi	r24, 0x03	; 3
      f0:	40 e0       	ldi	r20, 0x00	; 0
      f2:	56 e9       	ldi	r21, 0x96	; 150
      f4:	60 e0       	ldi	r22, 0x00	; 0
      f6:	70 e0       	ldi	r23, 0x00	; 0
      f8:	0e 94 89 12 	call	0x2512	; 0x2512 <uart_init>
    
    can_init(0);
      fc:	80 e0       	ldi	r24, 0x00	; 0
      fe:	0e 94 f6 05 	call	0xbec	; 0xbec <can_init>

	DDRA = 0xFF; // LED'er output
     102:	e1 e2       	ldi	r30, 0x21	; 33
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	8f ef       	ldi	r24, 0xFF	; 255
     108:	80 83       	st	Z, r24
	PORTA = 0xFF; // LED'er t√¶ndt
     10a:	e2 e2       	ldi	r30, 0x22	; 34
     10c:	f0 e0       	ldi	r31, 0x00	; 0
     10e:	8f ef       	ldi	r24, 0xFF	; 255
     110:	80 83       	st	Z, r24

    DDRD = 0xFF;
     112:	ea e2       	ldi	r30, 0x2A	; 42
     114:	f0 e0       	ldi	r31, 0x00	; 0
     116:	8f ef       	ldi	r24, 0xFF	; 255
     118:	80 83       	st	Z, r24
    PORTD |= 0b1000000;
     11a:	ab e2       	ldi	r26, 0x2B	; 43
     11c:	b0 e0       	ldi	r27, 0x00	; 0
     11e:	eb e2       	ldi	r30, 0x2B	; 43
     120:	f0 e0       	ldi	r31, 0x00	; 0
     122:	80 81       	ld	r24, Z
     124:	80 64       	ori	r24, 0x40	; 64
     126:	8c 93       	st	X, r24


    // Interrupt
    
    
    sei();
     128:	78 94       	sei

    CANIE2 = 0xFF;
     12a:	ee ed       	ldi	r30, 0xDE	; 222
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	8f ef       	ldi	r24, 0xFF	; 255
     130:	80 83       	st	Z, r24
    CANIE1 = 0xFF;
     132:	ef ed       	ldi	r30, 0xDF	; 223
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	8f ef       	ldi	r24, 0xFF	; 255
     138:	80 83       	st	Z, r24

    CANGIE |=(1<<ENRX);
     13a:	ab ed       	ldi	r26, 0xDB	; 219
     13c:	b0 e0       	ldi	r27, 0x00	; 0
     13e:	eb ed       	ldi	r30, 0xDB	; 219
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	80 81       	ld	r24, Z
     144:	80 62       	ori	r24, 0x20	; 32
     146:	8c 93       	st	X, r24
    //CANGIE |=(1<<ENTX);

    CANGIE |=(1<<ENIT);
     148:	ab ed       	ldi	r26, 0xDB	; 219
     14a:	b0 e0       	ldi	r27, 0x00	; 0
     14c:	eb ed       	ldi	r30, 0xDB	; 219
     14e:	f0 e0       	ldi	r31, 0x00	; 0
     150:	80 81       	ld	r24, Z
     152:	80 68       	ori	r24, 0x80	; 128
     154:	8c 93       	st	X, r24

    response_msg.pt_data = &response_buffer[0];
     156:	8b e5       	ldi	r24, 0x5B	; 91
     158:	93 e0       	ldi	r25, 0x03	; 3
     15a:	90 93 6d 03 	sts	0x036D, r25
     15e:	80 93 6c 03 	sts	0x036C, r24
    response_msg.status = 0;
     162:	10 92 6e 03 	sts	0x036E, r1

    // --- Init Rx Commands
    for(i=0; i<9; i++) response_buffer[i]=0; // Nulstiller buffer
     166:	1a 82       	std	Y+2, r1	; 0x02
     168:	0a c0       	rjmp	.+20     	; 0x17e <main+0xa8>
     16a:	8a 81       	ldd	r24, Y+2	; 0x02
     16c:	88 2f       	mov	r24, r24
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	fc 01       	movw	r30, r24
     172:	e5 5a       	subi	r30, 0xA5	; 165
     174:	fc 4f       	sbci	r31, 0xFC	; 252
     176:	10 82       	st	Z, r1
     178:	8a 81       	ldd	r24, Y+2	; 0x02
     17a:	8f 5f       	subi	r24, 0xFF	; 255
     17c:	8a 83       	std	Y+2, r24	; 0x02
     17e:	8a 81       	ldd	r24, Y+2	; 0x02
     180:	89 30       	cpi	r24, 0x09	; 9
     182:	98 f3       	brcs	.-26     	; 0x16a <main+0x94>
    response_msg.id.std = ID_TAG_BASE + j;
     184:	89 81       	ldd	r24, Y+1	; 0x01
     186:	88 2f       	mov	r24, r24
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	80 58       	subi	r24, 0x80	; 128
     18c:	9f 4f       	sbci	r25, 0xFF	; 255
     18e:	90 93 68 03 	sts	0x0368, r25
     192:	80 93 67 03 	sts	0x0367, r24
    response_msg.ctrl.ide = 0;
     196:	10 92 70 03 	sts	0x0370, r1
    response_msg.ctrl.rtr = 0;
     19a:	10 92 6f 03 	sts	0x036F, r1
    response_msg.dlc = 5;
     19e:	85 e0       	ldi	r24, 0x05	; 5
     1a0:	80 93 6b 03 	sts	0x036B, r24
    response_msg.cmd = CMD_RX_DATA_MASKED;
     1a4:	88 e0       	ldi	r24, 0x08	; 8
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	90 93 66 03 	sts	0x0366, r25
     1ac:	80 93 65 03 	sts	0x0365, r24
    
    uart_mini_printf("GOGO");
     1b0:	00 d0       	rcall	.+0      	; 0x1b2 <main+0xdc>
     1b2:	ed b7       	in	r30, 0x3d	; 61
     1b4:	fe b7       	in	r31, 0x3e	; 62
     1b6:	31 96       	adiw	r30, 0x01	; 1
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	91 e0       	ldi	r25, 0x01	; 1
     1bc:	91 83       	std	Z+1, r25	; 0x01
     1be:	80 83       	st	Z, r24
     1c0:	0e 94 63 13 	call	0x26c6	; 0x26c6 <uart_mini_printf>
     1c4:	0f 90       	pop	r0
     1c6:	0f 90       	pop	r0
     1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <main+0xf2>

000001ca <display_sensor_values>:
//!     local temperature, the local luminosity and the VCC values.
//!     When the DVK90CAN1 receives an response, it formates the data and
//!     sends it to a terminal.
//------------------------------------------------------------------------------
void display_sensor_values(void)
{
     1ca:	df 93       	push	r29
     1cc:	cf 93       	push	r28
     1ce:	cd b7       	in	r28, 0x3d	; 61
     1d0:	de b7       	in	r29, 0x3e	; 62
     1d2:	68 97       	sbiw	r28, 0x18	; 24
     1d4:	0f b6       	in	r0, 0x3f	; 63
     1d6:	f8 94       	cli
     1d8:	de bf       	out	0x3e, r29	; 62
     1da:	0f be       	out	0x3f, r0	; 63
     1dc:	cd bf       	out	0x3d, r28	; 61
    U8 i, j=0;
     1de:	19 82       	std	Y+1, r1	; 0x01
 
    U8 tx_remote_buffer[9];
    st_cmd_t tx_remote_msg;

    // --- Init variables
    tx_remote_msg.pt_data = &tx_remote_buffer[0];
     1e0:	ce 01       	movw	r24, r28
     1e2:	03 96       	adiw	r24, 0x03	; 3
     1e4:	9d 8b       	std	Y+21, r25	; 0x15
     1e6:	8c 8b       	std	Y+20, r24	; 0x14
    tx_remote_msg.status = 0;
     1e8:	1e 8a       	std	Y+22, r1	; 0x16

    // UART
    uart_mini_printf("GOGO");
     1ea:	00 d0       	rcall	.+0      	; 0x1ec <display_sensor_values+0x22>
     1ec:	ed b7       	in	r30, 0x3d	; 61
     1ee:	fe b7       	in	r31, 0x3e	; 62
     1f0:	31 96       	adiw	r30, 0x01	; 1
     1f2:	80 e0       	ldi	r24, 0x00	; 0
     1f4:	91 e0       	ldi	r25, 0x01	; 1
     1f6:	91 83       	std	Z+1, r25	; 0x01
     1f8:	80 83       	st	Z, r24
     1fa:	0e 94 63 13 	call	0x26c6	; 0x26c6 <uart_mini_printf>
     1fe:	0f 90       	pop	r0
     200:	0f 90       	pop	r0

    while (1)
    {
        wait_for(100);  // x ms between refreshed screen
     202:	84 e6       	ldi	r24, 0x64	; 100
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <wait_for>
        for(j=0; j<NB_TARGET; j++)
     20a:	19 82       	std	Y+1, r1	; 0x01
     20c:	66 c0       	rjmp	.+204    	; 0x2da <display_sensor_values+0x110>
        {
            CANGIE |=(1<<ENIT);
     20e:	ab ed       	ldi	r26, 0xDB	; 219
     210:	b0 e0       	ldi	r27, 0x00	; 0
     212:	eb ed       	ldi	r30, 0xDB	; 219
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	80 81       	ld	r24, Z
     218:	80 68       	ori	r24, 0x80	; 128
     21a:	8c 93       	st	X, r24
            // --- Init Rx Commands
      	    for(i=0; i<9; i++) response_buffer[i]=0; // Nulstiller buffer
     21c:	1a 82       	std	Y+2, r1	; 0x02
     21e:	0a c0       	rjmp	.+20     	; 0x234 <display_sensor_values+0x6a>
     220:	8a 81       	ldd	r24, Y+2	; 0x02
     222:	88 2f       	mov	r24, r24
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	fc 01       	movw	r30, r24
     228:	e5 5a       	subi	r30, 0xA5	; 165
     22a:	fc 4f       	sbci	r31, 0xFC	; 252
     22c:	10 82       	st	Z, r1
     22e:	8a 81       	ldd	r24, Y+2	; 0x02
     230:	8f 5f       	subi	r24, 0xFF	; 255
     232:	8a 83       	std	Y+2, r24	; 0x02
     234:	8a 81       	ldd	r24, Y+2	; 0x02
     236:	89 30       	cpi	r24, 0x09	; 9
     238:	98 f3       	brcs	.-26     	; 0x220 <display_sensor_values+0x56>
            response_msg.id.std = ID_TAG_BASE + j;
     23a:	89 81       	ldd	r24, Y+1	; 0x01
     23c:	88 2f       	mov	r24, r24
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	80 58       	subi	r24, 0x80	; 128
     242:	9f 4f       	sbci	r25, 0xFF	; 255
     244:	90 93 68 03 	sts	0x0368, r25
     248:	80 93 67 03 	sts	0x0367, r24
            response_msg.ctrl.ide = 0;
     24c:	10 92 70 03 	sts	0x0370, r1
            response_msg.ctrl.rtr = 0;
     250:	10 92 6f 03 	sts	0x036F, r1
            response_msg.dlc = 5;
     254:	85 e0       	ldi	r24, 0x05	; 5
     256:	80 93 6b 03 	sts	0x036B, r24
            response_msg.cmd = CMD_RX_DATA_MASKED;
     25a:	88 e0       	ldi	r24, 0x08	; 8
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	90 93 66 03 	sts	0x0366, r25
     262:	80 93 65 03 	sts	0x0365, r24
            // --- Rx Command
            while(can_cmd(&response_msg) != CAN_CMD_ACCEPTED);
     266:	84 e6       	ldi	r24, 0x64	; 100
     268:	93 e0       	ldi	r25, 0x03	; 3
     26a:	0e 94 14 06 	call	0xc28	; 0xc28 <can_cmd>
     26e:	88 23       	and	r24, r24
     270:	d1 f7       	brne	.-12     	; 0x266 <display_sensor_values+0x9c>

            // --- Init Tx Commands
  	        for(i=0; i<9; i++) tx_remote_buffer[i]=0; // Nulstiller buffer
     272:	1a 82       	std	Y+2, r1	; 0x02
     274:	0c c0       	rjmp	.+24     	; 0x28e <display_sensor_values+0xc4>
     276:	8a 81       	ldd	r24, Y+2	; 0x02
     278:	28 2f       	mov	r18, r24
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	ce 01       	movw	r24, r28
     27e:	03 96       	adiw	r24, 0x03	; 3
     280:	fc 01       	movw	r30, r24
     282:	e2 0f       	add	r30, r18
     284:	f3 1f       	adc	r31, r19
     286:	10 82       	st	Z, r1
     288:	8a 81       	ldd	r24, Y+2	; 0x02
     28a:	8f 5f       	subi	r24, 0xFF	; 255
     28c:	8a 83       	std	Y+2, r24	; 0x02
     28e:	8a 81       	ldd	r24, Y+2	; 0x02
     290:	89 30       	cpi	r24, 0x09	; 9
     292:	88 f3       	brcs	.-30     	; 0x276 <display_sensor_values+0xac>
            tx_remote_msg.id.std = ID_TAG_BASE + j;
     294:	89 81       	ldd	r24, Y+1	; 0x01
     296:	88 2f       	mov	r24, r24
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	80 58       	subi	r24, 0x80	; 128
     29c:	9f 4f       	sbci	r25, 0xFF	; 255
     29e:	98 8b       	std	Y+16, r25	; 0x10
     2a0:	8f 87       	std	Y+15, r24	; 0x0f
            tx_remote_msg.ctrl.ide = 0;
     2a2:	18 8e       	std	Y+24, r1	; 0x18
            tx_remote_msg.ctrl.rtr = 1;
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	8f 8b       	std	Y+23, r24	; 0x17
            tx_remote_msg.dlc = 8; // Antal data bytes der skal modtages 
     2a8:	88 e0       	ldi	r24, 0x08	; 8
     2aa:	8b 8b       	std	Y+19, r24	; 0x13
            tx_remote_msg.cmd = CMD_TX_REMOTE;
     2ac:	83 e0       	ldi	r24, 0x03	; 3
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	9e 87       	std	Y+14, r25	; 0x0e
     2b2:	8d 87       	std	Y+13, r24	; 0x0d
            // --- Tx Command
            while(can_cmd(&tx_remote_msg) != CAN_CMD_ACCEPTED);
     2b4:	ce 01       	movw	r24, r28
     2b6:	0c 96       	adiw	r24, 0x0c	; 12
     2b8:	0e 94 14 06 	call	0xc28	; 0xc28 <can_cmd>
     2bc:	88 23       	and	r24, r24
     2be:	d1 f7       	brne	.-12     	; 0x2b4 <display_sensor_values+0xea>

            // --- Wait for Tx remote completed
            while(can_get_status(&tx_remote_msg) == CAN_STATUS_NOT_COMPLETED);
     2c0:	ce 01       	movw	r24, r28
     2c2:	0c 96       	adiw	r24, 0x0c	; 12
     2c4:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <can_get_status>
     2c8:	81 30       	cpi	r24, 0x01	; 1
     2ca:	d1 f3       	breq	.-12     	; 0x2c0 <display_sensor_values+0xf6>

            wait_for(50); // Wait x ms for a response if exits
     2cc:	82 e3       	ldi	r24, 0x32	; 50
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <wait_for>
    uart_mini_printf("GOGO");

    while (1)
    {
        wait_for(100);  // x ms between refreshed screen
        for(j=0; j<NB_TARGET; j++)
     2d4:	89 81       	ldd	r24, Y+1	; 0x01
     2d6:	8f 5f       	subi	r24, 0xFF	; 255
     2d8:	89 83       	std	Y+1, r24	; 0x01
     2da:	89 81       	ldd	r24, Y+1	; 0x01
     2dc:	88 23       	and	r24, r24
     2de:	09 f4       	brne	.+2      	; 0x2e2 <display_sensor_values+0x118>
     2e0:	96 cf       	rjmp	.-212    	; 0x20e <display_sensor_values+0x44>
     2e2:	8f cf       	rjmp	.-226    	; 0x202 <display_sensor_values+0x38>

000002e4 <__vector_18>:
        }
    }
}

ISR(CANIT_vect)
{
     2e4:	1f 92       	push	r1
     2e6:	0f 92       	push	r0
     2e8:	0f b6       	in	r0, 0x3f	; 63
     2ea:	0f 92       	push	r0
     2ec:	00 90 5b 00 	lds	r0, 0x005B
     2f0:	0f 92       	push	r0
     2f2:	11 24       	eor	r1, r1
     2f4:	2f 93       	push	r18
     2f6:	3f 93       	push	r19
     2f8:	4f 93       	push	r20
     2fa:	5f 93       	push	r21
     2fc:	6f 93       	push	r22
     2fe:	7f 93       	push	r23
     300:	8f 93       	push	r24
     302:	9f 93       	push	r25
     304:	af 93       	push	r26
     306:	bf 93       	push	r27
     308:	ef 93       	push	r30
     30a:	ff 93       	push	r31
     30c:	df 93       	push	r29
     30e:	cf 93       	push	r28
     310:	00 d0       	rcall	.+0      	; 0x312 <__vector_18+0x2e>
     312:	cd b7       	in	r28, 0x3d	; 61
     314:	de b7       	in	r29, 0x3e	; 62
    U8 i,j=0;
     316:	19 82       	std	Y+1, r1	; 0x01
    CANGIE &=~(1<<ENIT);
     318:	ab ed       	ldi	r26, 0xDB	; 219
     31a:	b0 e0       	ldi	r27, 0x00	; 0
     31c:	eb ed       	ldi	r30, 0xDB	; 219
     31e:	f0 e0       	ldi	r31, 0x00	; 0
     320:	80 81       	ld	r24, Z
     322:	8f 77       	andi	r24, 0x7F	; 127
     324:	8c 93       	st	X, r24
    CANGIE |=(1<<ENIT);
     326:	ab ed       	ldi	r26, 0xDB	; 219
     328:	b0 e0       	ldi	r27, 0x00	; 0
     32a:	eb ed       	ldi	r30, 0xDB	; 219
     32c:	f0 e0       	ldi	r31, 0x00	; 0
     32e:	80 81       	ld	r24, Z
     330:	80 68       	ori	r24, 0x80	; 128
     332:	8c 93       	st	X, r24

    if (can_get_status(&response_msg) == CAN_STATUS_COMPLETED){
     334:	84 e6       	ldi	r24, 0x64	; 100
     336:	93 e0       	ldi	r25, 0x03	; 3
     338:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <can_get_status>
     33c:	88 23       	and	r24, r24
     33e:	09 f0       	breq	.+2      	; 0x342 <__vector_18+0x5e>
     340:	f2 c0       	rjmp	.+484    	; 0x526 <__vector_18+0x242>
                // --- Node ID
				uart_mini_printf("Node: %d",response_msg.id.std-127);
     342:	80 91 67 03 	lds	r24, 0x0367
     346:	90 91 68 03 	lds	r25, 0x0368
     34a:	9c 01       	movw	r18, r24
     34c:	2f 57       	subi	r18, 0x7F	; 127
     34e:	30 40       	sbci	r19, 0x00	; 0
     350:	00 d0       	rcall	.+0      	; 0x352 <__vector_18+0x6e>
     352:	00 d0       	rcall	.+0      	; 0x354 <__vector_18+0x70>
     354:	ed b7       	in	r30, 0x3d	; 61
     356:	fe b7       	in	r31, 0x3e	; 62
     358:	31 96       	adiw	r30, 0x01	; 1
     35a:	85 e0       	ldi	r24, 0x05	; 5
     35c:	91 e0       	ldi	r25, 0x01	; 1
     35e:	91 83       	std	Z+1, r25	; 0x01
     360:	80 83       	st	Z, r24
     362:	33 83       	std	Z+3, r19	; 0x03
     364:	22 83       	std	Z+2, r18	; 0x02
     366:	0e 94 63 13 	call	0x26c6	; 0x26c6 <uart_mini_printf>
     36a:	0f 90       	pop	r0
     36c:	0f 90       	pop	r0
     36e:	0f 90       	pop	r0
     370:	0f 90       	pop	r0
                
                // --- Data               
               	uart_mini_printf(", Data1: %03d", response_buffer[0]);
     372:	80 91 5b 03 	lds	r24, 0x035B
     376:	28 2f       	mov	r18, r24
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	00 d0       	rcall	.+0      	; 0x37c <__vector_18+0x98>
     37c:	00 d0       	rcall	.+0      	; 0x37e <__vector_18+0x9a>
     37e:	ed b7       	in	r30, 0x3d	; 61
     380:	fe b7       	in	r31, 0x3e	; 62
     382:	31 96       	adiw	r30, 0x01	; 1
     384:	8e e0       	ldi	r24, 0x0E	; 14
     386:	91 e0       	ldi	r25, 0x01	; 1
     388:	91 83       	std	Z+1, r25	; 0x01
     38a:	80 83       	st	Z, r24
     38c:	33 83       	std	Z+3, r19	; 0x03
     38e:	22 83       	std	Z+2, r18	; 0x02
     390:	0e 94 63 13 	call	0x26c6	; 0x26c6 <uart_mini_printf>
     394:	0f 90       	pop	r0
     396:	0f 90       	pop	r0
     398:	0f 90       	pop	r0
     39a:	0f 90       	pop	r0

				uart_mini_printf(", Data2: %03d", response_buffer[1]);
     39c:	80 91 5c 03 	lds	r24, 0x035C
     3a0:	28 2f       	mov	r18, r24
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	00 d0       	rcall	.+0      	; 0x3a6 <__vector_18+0xc2>
     3a6:	00 d0       	rcall	.+0      	; 0x3a8 <__vector_18+0xc4>
     3a8:	ed b7       	in	r30, 0x3d	; 61
     3aa:	fe b7       	in	r31, 0x3e	; 62
     3ac:	31 96       	adiw	r30, 0x01	; 1
     3ae:	8c e1       	ldi	r24, 0x1C	; 28
     3b0:	91 e0       	ldi	r25, 0x01	; 1
     3b2:	91 83       	std	Z+1, r25	; 0x01
     3b4:	80 83       	st	Z, r24
     3b6:	33 83       	std	Z+3, r19	; 0x03
     3b8:	22 83       	std	Z+2, r18	; 0x02
     3ba:	0e 94 63 13 	call	0x26c6	; 0x26c6 <uart_mini_printf>
     3be:	0f 90       	pop	r0
     3c0:	0f 90       	pop	r0
     3c2:	0f 90       	pop	r0
     3c4:	0f 90       	pop	r0
				uart_mini_printf(", Data3: %03d", response_buffer[2]);
     3c6:	80 91 5d 03 	lds	r24, 0x035D
     3ca:	28 2f       	mov	r18, r24
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	00 d0       	rcall	.+0      	; 0x3d0 <__vector_18+0xec>
     3d0:	00 d0       	rcall	.+0      	; 0x3d2 <__vector_18+0xee>
     3d2:	ed b7       	in	r30, 0x3d	; 61
     3d4:	fe b7       	in	r31, 0x3e	; 62
     3d6:	31 96       	adiw	r30, 0x01	; 1
     3d8:	8a e2       	ldi	r24, 0x2A	; 42
     3da:	91 e0       	ldi	r25, 0x01	; 1
     3dc:	91 83       	std	Z+1, r25	; 0x01
     3de:	80 83       	st	Z, r24
     3e0:	33 83       	std	Z+3, r19	; 0x03
     3e2:	22 83       	std	Z+2, r18	; 0x02
     3e4:	0e 94 63 13 	call	0x26c6	; 0x26c6 <uart_mini_printf>
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
     3ec:	0f 90       	pop	r0
     3ee:	0f 90       	pop	r0
				uart_mini_printf(", Data4: %03d", response_buffer[3]);
     3f0:	80 91 5e 03 	lds	r24, 0x035E
     3f4:	28 2f       	mov	r18, r24
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	00 d0       	rcall	.+0      	; 0x3fa <__vector_18+0x116>
     3fa:	00 d0       	rcall	.+0      	; 0x3fc <__vector_18+0x118>
     3fc:	ed b7       	in	r30, 0x3d	; 61
     3fe:	fe b7       	in	r31, 0x3e	; 62
     400:	31 96       	adiw	r30, 0x01	; 1
     402:	88 e3       	ldi	r24, 0x38	; 56
     404:	91 e0       	ldi	r25, 0x01	; 1
     406:	91 83       	std	Z+1, r25	; 0x01
     408:	80 83       	st	Z, r24
     40a:	33 83       	std	Z+3, r19	; 0x03
     40c:	22 83       	std	Z+2, r18	; 0x02
     40e:	0e 94 63 13 	call	0x26c6	; 0x26c6 <uart_mini_printf>
     412:	0f 90       	pop	r0
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
				uart_mini_printf(", Data5: %03d", response_buffer[4]);
     41a:	80 91 5f 03 	lds	r24, 0x035F
     41e:	28 2f       	mov	r18, r24
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	00 d0       	rcall	.+0      	; 0x424 <__vector_18+0x140>
     424:	00 d0       	rcall	.+0      	; 0x426 <__vector_18+0x142>
     426:	ed b7       	in	r30, 0x3d	; 61
     428:	fe b7       	in	r31, 0x3e	; 62
     42a:	31 96       	adiw	r30, 0x01	; 1
     42c:	86 e4       	ldi	r24, 0x46	; 70
     42e:	91 e0       	ldi	r25, 0x01	; 1
     430:	91 83       	std	Z+1, r25	; 0x01
     432:	80 83       	st	Z, r24
     434:	33 83       	std	Z+3, r19	; 0x03
     436:	22 83       	std	Z+2, r18	; 0x02
     438:	0e 94 63 13 	call	0x26c6	; 0x26c6 <uart_mini_printf>
     43c:	0f 90       	pop	r0
     43e:	0f 90       	pop	r0
     440:	0f 90       	pop	r0
     442:	0f 90       	pop	r0
				uart_mini_printf(", Data6: %03d", response_buffer[5]);
     444:	80 91 60 03 	lds	r24, 0x0360
     448:	28 2f       	mov	r18, r24
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	00 d0       	rcall	.+0      	; 0x44e <__vector_18+0x16a>
     44e:	00 d0       	rcall	.+0      	; 0x450 <__vector_18+0x16c>
     450:	ed b7       	in	r30, 0x3d	; 61
     452:	fe b7       	in	r31, 0x3e	; 62
     454:	31 96       	adiw	r30, 0x01	; 1
     456:	84 e5       	ldi	r24, 0x54	; 84
     458:	91 e0       	ldi	r25, 0x01	; 1
     45a:	91 83       	std	Z+1, r25	; 0x01
     45c:	80 83       	st	Z, r24
     45e:	33 83       	std	Z+3, r19	; 0x03
     460:	22 83       	std	Z+2, r18	; 0x02
     462:	0e 94 63 13 	call	0x26c6	; 0x26c6 <uart_mini_printf>
     466:	0f 90       	pop	r0
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
				uart_mini_printf(", Data7: %03d", response_buffer[6]);                
     46e:	80 91 61 03 	lds	r24, 0x0361
     472:	28 2f       	mov	r18, r24
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	00 d0       	rcall	.+0      	; 0x478 <__vector_18+0x194>
     478:	00 d0       	rcall	.+0      	; 0x47a <__vector_18+0x196>
     47a:	ed b7       	in	r30, 0x3d	; 61
     47c:	fe b7       	in	r31, 0x3e	; 62
     47e:	31 96       	adiw	r30, 0x01	; 1
     480:	82 e6       	ldi	r24, 0x62	; 98
     482:	91 e0       	ldi	r25, 0x01	; 1
     484:	91 83       	std	Z+1, r25	; 0x01
     486:	80 83       	st	Z, r24
     488:	33 83       	std	Z+3, r19	; 0x03
     48a:	22 83       	std	Z+2, r18	; 0x02
     48c:	0e 94 63 13 	call	0x26c6	; 0x26c6 <uart_mini_printf>
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
     494:	0f 90       	pop	r0
     496:	0f 90       	pop	r0
				uart_mini_printf(", Data8: %03d", response_buffer[7]);
     498:	80 91 62 03 	lds	r24, 0x0362
     49c:	28 2f       	mov	r18, r24
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	00 d0       	rcall	.+0      	; 0x4a2 <__vector_18+0x1be>
     4a2:	00 d0       	rcall	.+0      	; 0x4a4 <__vector_18+0x1c0>
     4a4:	ed b7       	in	r30, 0x3d	; 61
     4a6:	fe b7       	in	r31, 0x3e	; 62
     4a8:	31 96       	adiw	r30, 0x01	; 1
     4aa:	80 e7       	ldi	r24, 0x70	; 112
     4ac:	91 e0       	ldi	r25, 0x01	; 1
     4ae:	91 83       	std	Z+1, r25	; 0x01
     4b0:	80 83       	st	Z, r24
     4b2:	33 83       	std	Z+3, r19	; 0x03
     4b4:	22 83       	std	Z+2, r18	; 0x02
     4b6:	0e 94 63 13 	call	0x26c6	; 0x26c6 <uart_mini_printf>
     4ba:	0f 90       	pop	r0
     4bc:	0f 90       	pop	r0
     4be:	0f 90       	pop	r0
     4c0:	0f 90       	pop	r0
				uart_mini_printf("\r\n");  
     4c2:	00 d0       	rcall	.+0      	; 0x4c4 <__vector_18+0x1e0>
     4c4:	ed b7       	in	r30, 0x3d	; 61
     4c6:	fe b7       	in	r31, 0x3e	; 62
     4c8:	31 96       	adiw	r30, 0x01	; 1
     4ca:	8e e7       	ldi	r24, 0x7E	; 126
     4cc:	91 e0       	ldi	r25, 0x01	; 1
     4ce:	91 83       	std	Z+1, r25	; 0x01
     4d0:	80 83       	st	Z, r24
     4d2:	0e 94 63 13 	call	0x26c6	; 0x26c6 <uart_mini_printf>
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0

                for(i=0; i<9; i++) response_buffer[i]=0; // Nulstiller buffer
     4da:	1a 82       	std	Y+2, r1	; 0x02
     4dc:	0a c0       	rjmp	.+20     	; 0x4f2 <__vector_18+0x20e>
     4de:	8a 81       	ldd	r24, Y+2	; 0x02
     4e0:	88 2f       	mov	r24, r24
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	fc 01       	movw	r30, r24
     4e6:	e5 5a       	subi	r30, 0xA5	; 165
     4e8:	fc 4f       	sbci	r31, 0xFC	; 252
     4ea:	10 82       	st	Z, r1
     4ec:	8a 81       	ldd	r24, Y+2	; 0x02
     4ee:	8f 5f       	subi	r24, 0xFF	; 255
     4f0:	8a 83       	std	Y+2, r24	; 0x02
     4f2:	8a 81       	ldd	r24, Y+2	; 0x02
     4f4:	89 30       	cpi	r24, 0x09	; 9
     4f6:	98 f3       	brcs	.-26     	; 0x4de <__vector_18+0x1fa>
                response_msg.id.std = ID_TAG_BASE + j;
     4f8:	89 81       	ldd	r24, Y+1	; 0x01
     4fa:	88 2f       	mov	r24, r24
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	80 58       	subi	r24, 0x80	; 128
     500:	9f 4f       	sbci	r25, 0xFF	; 255
     502:	90 93 68 03 	sts	0x0368, r25
     506:	80 93 67 03 	sts	0x0367, r24
                response_msg.ctrl.ide = 0;
     50a:	10 92 70 03 	sts	0x0370, r1
                response_msg.ctrl.rtr = 0;
     50e:	10 92 6f 03 	sts	0x036F, r1
                response_msg.dlc = 5;
     512:	85 e0       	ldi	r24, 0x05	; 5
     514:	80 93 6b 03 	sts	0x036B, r24
                response_msg.cmd = CMD_RX_DATA_MASKED;
     518:	88 e0       	ldi	r24, 0x08	; 8
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	90 93 66 03 	sts	0x0366, r25
     520:	80 93 65 03 	sts	0x0365, r24
     524:	0c c0       	rjmp	.+24     	; 0x53e <__vector_18+0x25a>
    }else{
        response_msg.cmd = CMD_ABORT;
     526:	8c e0       	ldi	r24, 0x0C	; 12
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	90 93 66 03 	sts	0x0366, r25
     52e:	80 93 65 03 	sts	0x0365, r24
  	    while (can_cmd(&response_msg) != CAN_CMD_ACCEPTED);
     532:	84 e6       	ldi	r24, 0x64	; 100
     534:	93 e0       	ldi	r25, 0x03	; 3
     536:	0e 94 14 06 	call	0xc28	; 0xc28 <can_cmd>
     53a:	88 23       	and	r24, r24
     53c:	d1 f7       	brne	.-12     	; 0x532 <__vector_18+0x24e>
    }
}
     53e:	0f 90       	pop	r0
     540:	0f 90       	pop	r0
     542:	cf 91       	pop	r28
     544:	df 91       	pop	r29
     546:	ff 91       	pop	r31
     548:	ef 91       	pop	r30
     54a:	bf 91       	pop	r27
     54c:	af 91       	pop	r26
     54e:	9f 91       	pop	r25
     550:	8f 91       	pop	r24
     552:	7f 91       	pop	r23
     554:	6f 91       	pop	r22
     556:	5f 91       	pop	r21
     558:	4f 91       	pop	r20
     55a:	3f 91       	pop	r19
     55c:	2f 91       	pop	r18
     55e:	0f 90       	pop	r0
     560:	00 92 5b 00 	sts	0x005B, r0
     564:	0f 90       	pop	r0
     566:	0f be       	out	0x3f, r0	; 63
     568:	0f 90       	pop	r0
     56a:	1f 90       	pop	r1
     56c:	18 95       	reti

0000056e <can_clear_all_mob>:
//! @param none
//!
//! @return none
//------------------------------------------------------------------------------
void can_clear_all_mob(void)
{
     56e:	df 93       	push	r29
     570:	cf 93       	push	r28
     572:	00 d0       	rcall	.+0      	; 0x574 <can_clear_all_mob+0x6>
     574:	0f 92       	push	r0
     576:	cd b7       	in	r28, 0x3d	; 61
     578:	de b7       	in	r29, 0x3e	; 62
U8  mob_number;
/*
    U8  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     57a:	1b 82       	std	Y+3, r1	; 0x03
     57c:	1b c0       	rjmp	.+54     	; 0x5b4 <can_clear_all_mob+0x46>
    {
        CANPAGE = (mob_number << 4);    //! Page index
     57e:	ed ee       	ldi	r30, 0xED	; 237
     580:	f0 e0       	ldi	r31, 0x00	; 0
     582:	8b 81       	ldd	r24, Y+3	; 0x03
     584:	82 95       	swap	r24
     586:	80 7f       	andi	r24, 0xF0	; 240
     588:	80 83       	st	Z, r24
        Can_clear_mob();                //! All MOb Registers=0
     58a:	8e ee       	ldi	r24, 0xEE	; 238
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	9a 83       	std	Y+2, r25	; 0x02
     590:	89 83       	std	Y+1, r24	; 0x01
     592:	08 c0       	rjmp	.+16     	; 0x5a4 <can_clear_all_mob+0x36>
     594:	e9 81       	ldd	r30, Y+1	; 0x01
     596:	fa 81       	ldd	r31, Y+2	; 0x02
     598:	10 82       	st	Z, r1
     59a:	89 81       	ldd	r24, Y+1	; 0x01
     59c:	9a 81       	ldd	r25, Y+2	; 0x02
     59e:	01 96       	adiw	r24, 0x01	; 1
     5a0:	9a 83       	std	Y+2, r25	; 0x02
     5a2:	89 83       	std	Y+1, r24	; 0x01
     5a4:	89 81       	ldd	r24, Y+1	; 0x01
     5a6:	9a 81       	ldd	r25, Y+2	; 0x02
     5a8:	88 3f       	cpi	r24, 0xF8	; 248
     5aa:	91 05       	cpc	r25, r1
     5ac:	98 f3       	brcs	.-26     	; 0x594 <can_clear_all_mob+0x26>
U8  mob_number;
/*
    U8  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     5ae:	8b 81       	ldd	r24, Y+3	; 0x03
     5b0:	8f 5f       	subi	r24, 0xFF	; 255
     5b2:	8b 83       	std	Y+3, r24	; 0x03
     5b4:	8b 81       	ldd	r24, Y+3	; 0x03
     5b6:	8f 30       	cpi	r24, 0x0F	; 15
     5b8:	10 f3       	brcs	.-60     	; 0x57e <can_clear_all_mob+0x10>
        {
            CANMSG = 0;                 //! MOb data FIFO
        }
*/
    }
}
     5ba:	0f 90       	pop	r0
     5bc:	0f 90       	pop	r0
     5be:	0f 90       	pop	r0
     5c0:	cf 91       	pop	r28
     5c2:	df 91       	pop	r29
     5c4:	08 95       	ret

000005c6 <can_get_mob_free>:
//! @return Handle of MOb.
//!          - MOb[0] upto MOb[LAST_MOB_NB]
//!          - 0xFF if no MOb
//------------------------------------------------------------------------------
U8 can_get_mob_free(void)
{
     5c6:	df 93       	push	r29
     5c8:	cf 93       	push	r28
     5ca:	00 d0       	rcall	.+0      	; 0x5cc <can_get_mob_free+0x6>
     5cc:	0f 92       	push	r0
     5ce:	cd b7       	in	r28, 0x3d	; 61
     5d0:	de b7       	in	r29, 0x3e	; 62
    U8 mob_number, page_saved;

    page_saved = CANPAGE;
     5d2:	ed ee       	ldi	r30, 0xED	; 237
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	80 81       	ld	r24, Z
     5d8:	89 83       	std	Y+1, r24	; 0x01
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     5da:	1a 82       	std	Y+2, r1	; 0x02
     5dc:	19 c0       	rjmp	.+50     	; 0x610 <can_get_mob_free+0x4a>
    {
        Can_set_mob(mob_number);
     5de:	ed ee       	ldi	r30, 0xED	; 237
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	8a 81       	ldd	r24, Y+2	; 0x02
     5e4:	82 95       	swap	r24
     5e6:	80 7f       	andi	r24, 0xF0	; 240
     5e8:	80 83       	st	Z, r24
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
     5ea:	ef ee       	ldi	r30, 0xEF	; 239
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	80 81       	ld	r24, Z
     5f0:	88 2f       	mov	r24, r24
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	80 7c       	andi	r24, 0xC0	; 192
     5f6:	90 70       	andi	r25, 0x00	; 0
     5f8:	00 97       	sbiw	r24, 0x00	; 0
     5fa:	39 f4       	brne	.+14     	; 0x60a <can_get_mob_free+0x44>
        {
            CANPAGE = page_saved;
     5fc:	ed ee       	ldi	r30, 0xED	; 237
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	89 81       	ldd	r24, Y+1	; 0x01
     602:	80 83       	st	Z, r24
            return (mob_number);
     604:	8a 81       	ldd	r24, Y+2	; 0x02
     606:	8b 83       	std	Y+3, r24	; 0x03
     608:	0c c0       	rjmp	.+24     	; 0x622 <can_get_mob_free+0x5c>
U8 can_get_mob_free(void)
{
    U8 mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     60a:	8a 81       	ldd	r24, Y+2	; 0x02
     60c:	8f 5f       	subi	r24, 0xFF	; 255
     60e:	8a 83       	std	Y+2, r24	; 0x02
     610:	8a 81       	ldd	r24, Y+2	; 0x02
     612:	8f 30       	cpi	r24, 0x0F	; 15
     614:	20 f3       	brcs	.-56     	; 0x5de <can_get_mob_free+0x18>
        {
            CANPAGE = page_saved;
            return (mob_number);
        }
    }
    CANPAGE = page_saved;
     616:	ed ee       	ldi	r30, 0xED	; 237
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	89 81       	ldd	r24, Y+1	; 0x01
     61c:	80 83       	st	Z, r24
    return (NO_MOB);
     61e:	8f ef       	ldi	r24, 0xFF	; 255
     620:	8b 83       	std	Y+3, r24	; 0x03
     622:	8b 81       	ldd	r24, Y+3	; 0x03
}
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	cf 91       	pop	r28
     62c:	df 91       	pop	r29
     62e:	08 95       	ret

00000630 <can_get_mob_status>:
//!          -  MOB_CRC_ERROR
//!          -  MOB_STUFF_ERROR
//!          -  MOB_BIT_ERROR
//------------------------------------------------------------------------------
U8 can_get_mob_status(void)
{
     630:	df 93       	push	r29
     632:	cf 93       	push	r28
     634:	00 d0       	rcall	.+0      	; 0x636 <can_get_mob_status+0x6>
     636:	0f 92       	push	r0
     638:	cd b7       	in	r28, 0x3d	; 61
     63a:	de b7       	in	r29, 0x3e	; 62
    U8 mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     63c:	ef ee       	ldi	r30, 0xEF	; 239
     63e:	f0 e0       	ldi	r31, 0x00	; 0
     640:	80 81       	ld	r24, Z
     642:	88 2f       	mov	r24, r24
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	80 7c       	andi	r24, 0xC0	; 192
     648:	90 70       	andi	r25, 0x00	; 0
     64a:	00 97       	sbiw	r24, 0x00	; 0
     64c:	19 f4       	brne	.+6      	; 0x654 <can_get_mob_status+0x24>
     64e:	8f ef       	ldi	r24, 0xFF	; 255
     650:	8b 83       	std	Y+3, r24	; 0x03
     652:	1d c0       	rjmp	.+58     	; 0x68e <can_get_mob_status+0x5e>

    canstmob_copy = CANSTMOB; // Copy for test integrity
     654:	ee ee       	ldi	r30, 0xEE	; 238
     656:	f0 e0       	ldi	r31, 0x00	; 0
     658:	80 81       	ld	r24, Z
     65a:	89 83       	std	Y+1, r24	; 0x01

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
     65c:	89 81       	ldd	r24, Y+1	; 0x01
     65e:	80 7e       	andi	r24, 0xE0	; 224
     660:	8a 83       	std	Y+2, r24	; 0x02
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
     662:	8a 81       	ldd	r24, Y+2	; 0x02
     664:	80 32       	cpi	r24, 0x20	; 32
     666:	31 f0       	breq	.+12     	; 0x674 <can_get_mob_status+0x44>
     668:	8a 81       	ldd	r24, Y+2	; 0x02
     66a:	80 34       	cpi	r24, 0x40	; 64
     66c:	19 f0       	breq	.+6      	; 0x674 <can_get_mob_status+0x44>
     66e:	8a 81       	ldd	r24, Y+2	; 0x02
     670:	80 3a       	cpi	r24, 0xA0	; 160
     672:	19 f4       	brne	.+6      	; 0x67a <can_get_mob_status+0x4a>
         (mob_status==MOB_TX_COMPLETED) ||   \
         (mob_status==MOB_RX_COMPLETED_DLCW) ) { return(mob_status); }
     674:	8a 81       	ldd	r24, Y+2	; 0x02
     676:	8b 83       	std	Y+3, r24	; 0x03
     678:	0a c0       	rjmp	.+20     	; 0x68e <can_get_mob_status+0x5e>
    // - MOb Status bit_0 = MOB_ACK_ERROR
    // - MOb Status bit_1 = MOB_FORM_ERROR
    // - MOb Status bit_2 = MOB_CRC_ERROR
    // - MOb Status bit_3 = MOB_STUFF_ERROR
    // - MOb Status bit_4 = MOB_BIT_ERROR
    mob_status = canstmob_copy & ERR_MOB_MSK;
     67a:	89 81       	ldd	r24, Y+1	; 0x01
     67c:	8f 71       	andi	r24, 0x1F	; 31
     67e:	8a 83       	std	Y+2, r24	; 0x02
    if (mob_status != 0) { return(mob_status); }
     680:	8a 81       	ldd	r24, Y+2	; 0x02
     682:	88 23       	and	r24, r24
     684:	19 f0       	breq	.+6      	; 0x68c <can_get_mob_status+0x5c>
     686:	8a 81       	ldd	r24, Y+2	; 0x02
     688:	8b 83       	std	Y+3, r24	; 0x03
     68a:	01 c0       	rjmp	.+2      	; 0x68e <can_get_mob_status+0x5e>

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
     68c:	1b 82       	std	Y+3, r1	; 0x03
     68e:	8b 81       	ldd	r24, Y+3	; 0x03
}
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
     696:	cf 91       	pop	r28
     698:	df 91       	pop	r29
     69a:	08 95       	ret

0000069c <can_get_data>:
//! @param CAN message data address.
//!
//! @return none.
//------------------------------------------------------------------------------
void can_get_data(U8* p_can_message_data)
{
     69c:	df 93       	push	r29
     69e:	cf 93       	push	r28
     6a0:	00 d0       	rcall	.+0      	; 0x6a2 <can_get_data+0x6>
     6a2:	0f 92       	push	r0
     6a4:	cd b7       	in	r28, 0x3d	; 61
     6a6:	de b7       	in	r29, 0x3e	; 62
     6a8:	9b 83       	std	Y+3, r25	; 0x03
     6aa:	8a 83       	std	Y+2, r24	; 0x02
    U8 data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
     6ac:	19 82       	std	Y+1, r1	; 0x01
     6ae:	0f c0       	rjmp	.+30     	; 0x6ce <can_get_data+0x32>
    {
        *(p_can_message_data + data_index) = CANMSG;
     6b0:	89 81       	ldd	r24, Y+1	; 0x01
     6b2:	28 2f       	mov	r18, r24
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	8a 81       	ldd	r24, Y+2	; 0x02
     6b8:	9b 81       	ldd	r25, Y+3	; 0x03
     6ba:	dc 01       	movw	r26, r24
     6bc:	a2 0f       	add	r26, r18
     6be:	b3 1f       	adc	r27, r19
     6c0:	ea ef       	ldi	r30, 0xFA	; 250
     6c2:	f0 e0       	ldi	r31, 0x00	; 0
     6c4:	80 81       	ld	r24, Z
     6c6:	8c 93       	st	X, r24
//------------------------------------------------------------------------------
void can_get_data(U8* p_can_message_data)
{
    U8 data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
     6c8:	89 81       	ldd	r24, Y+1	; 0x01
     6ca:	8f 5f       	subi	r24, 0xFF	; 255
     6cc:	89 83       	std	Y+1, r24	; 0x01
     6ce:	89 81       	ldd	r24, Y+1	; 0x01
     6d0:	28 2f       	mov	r18, r24
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	ef ee       	ldi	r30, 0xEF	; 239
     6d6:	f0 e0       	ldi	r31, 0x00	; 0
     6d8:	80 81       	ld	r24, Z
     6da:	88 2f       	mov	r24, r24
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	8f 70       	andi	r24, 0x0F	; 15
     6e0:	90 70       	andi	r25, 0x00	; 0
     6e2:	28 17       	cp	r18, r24
     6e4:	39 07       	cpc	r19, r25
     6e6:	24 f3       	brlt	.-56     	; 0x6b0 <can_get_data+0x14>
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
     6e8:	0f 90       	pop	r0
     6ea:	0f 90       	pop	r0
     6ec:	0f 90       	pop	r0
     6ee:	cf 91       	pop	r28
     6f0:	df 91       	pop	r29
     6f2:	08 95       	ret

000006f4 <can_auto_baudrate>:
//! @return Baudrate Status
//!         ==0: research of bit timing configuration failed
//!         ==1: baudrate performed
//------------------------------------------------------------------------------
U8 can_auto_baudrate (U8 mode)
{
     6f4:	df 93       	push	r29
     6f6:	cf 93       	push	r28
     6f8:	cd b7       	in	r28, 0x3d	; 61
     6fa:	de b7       	in	r29, 0x3e	; 62
     6fc:	68 97       	sbiw	r28, 0x18	; 24
     6fe:	0f b6       	in	r0, 0x3f	; 63
     700:	f8 94       	cli
     702:	de bf       	out	0x3e, r29	; 62
     704:	0f be       	out	0x3f, r0	; 63
     706:	cd bf       	out	0x3d, r28	; 61
     708:	8a 8b       	std	Y+18, r24	; 0x12
    U8  u8_temp0;                               //! Temporary variable
    U8  brp, prs, ntq, phs1, phs2;              //! Bit timing segment variables
    U8  phs1_inc;                               //! Computing needed
    U8  bt_not_found, wait_for_rx, evaluate;    //! Keys for "while()" loops
    U8  try_conf;                               //! Key for configurate CAN
    U8  ovrtim_flag=0;                          //! Timer overflow count
     70a:	1e 82       	std	Y+6, r1	; 0x06
    U16 conf_index;                             //! Count of bit timing configuration tried
    U8  bt_performed;                           //! Return flag

    //! --- Default setting
    phs1_inc = evaluate = 0;
     70c:	18 86       	std	Y+8, r1	; 0x08
     70e:	88 85       	ldd	r24, Y+8	; 0x08
     710:	8b 87       	std	Y+11, r24	; 0x0b
    bt_performed = 0;
     712:	1b 82       	std	Y+3, r1	; 0x03
    conf_index = 0;
     714:	1d 82       	std	Y+5, r1	; 0x05
     716:	1c 82       	std	Y+4, r1	; 0x04
    bt_not_found = 1;
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	8a 87       	std	Y+10, r24	; 0x0a

    //! --- Init segment variables with MIN values if mode=0
    //!     or init segment variables with CANBTx if mode=1
    if (mode==0)
     71c:	8a 89       	ldd	r24, Y+18	; 0x12
     71e:	88 23       	and	r24, r24
     720:	a9 f4       	brne	.+42     	; 0x74c <can_auto_baudrate+0x58>
    {
        brp  = BRP_MIN;
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	88 8b       	std	Y+16, r24	; 0x10
        ntq  = NTQ_MIN;
     726:	88 e0       	ldi	r24, 0x08	; 8
     728:	8e 87       	std	Y+14, r24	; 0x0e
        phs1 = PHS1_MIN;
     72a:	82 e0       	ldi	r24, 0x02	; 2
     72c:	8d 87       	std	Y+13, r24	; 0x0d
        phs2 = PHS2_MIN;
     72e:	82 e0       	ldi	r24, 0x02	; 2
     730:	8c 87       	std	Y+12, r24	; 0x0c
        prs  = ntq - ( phs1 + phs2 + 1 );
     732:	9d 85       	ldd	r25, Y+13	; 0x0d
     734:	8c 85       	ldd	r24, Y+12	; 0x0c
     736:	89 0f       	add	r24, r25
     738:	98 2f       	mov	r25, r24
     73a:	90 95       	com	r25
     73c:	8e 85       	ldd	r24, Y+14	; 0x0e
     73e:	89 0f       	add	r24, r25
     740:	8f 87       	std	Y+15, r24	; 0x0f
        try_conf = 1;       //! Try this configuration
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	8f 83       	std	Y+7, r24	; 0x07
        wait_for_rx = 1;    //! Enable "while (wait_for_rx ..." loop
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	89 87       	std	Y+9, r24	; 0x09
     74a:	a5 c0       	rjmp	.+330    	; 0x896 <can_auto_baudrate+0x1a2>
    }
    else //! mode = 1
    {
        brp  = Max ((((CANBT1 &  BRP_MSK) >> 1) +1) , BRP_MIN );
     74c:	e2 ee       	ldi	r30, 0xE2	; 226
     74e:	f0 e0       	ldi	r31, 0x00	; 0
     750:	80 81       	ld	r24, Z
     752:	88 2f       	mov	r24, r24
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	8e 77       	andi	r24, 0x7E	; 126
     758:	90 70       	andi	r25, 0x00	; 0
     75a:	95 95       	asr	r25
     75c:	87 95       	ror	r24
     75e:	01 96       	adiw	r24, 0x01	; 1
     760:	82 30       	cpi	r24, 0x02	; 2
     762:	91 05       	cpc	r25, r1
     764:	6c f0       	brlt	.+26     	; 0x780 <can_auto_baudrate+0x8c>
     766:	e2 ee       	ldi	r30, 0xE2	; 226
     768:	f0 e0       	ldi	r31, 0x00	; 0
     76a:	80 81       	ld	r24, Z
     76c:	88 2f       	mov	r24, r24
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	8e 77       	andi	r24, 0x7E	; 126
     772:	90 70       	andi	r25, 0x00	; 0
     774:	95 95       	asr	r25
     776:	87 95       	ror	r24
     778:	98 2f       	mov	r25, r24
     77a:	9f 5f       	subi	r25, 0xFF	; 255
     77c:	98 8f       	std	Y+24, r25	; 0x18
     77e:	02 c0       	rjmp	.+4      	; 0x784 <can_auto_baudrate+0x90>
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	88 8f       	std	Y+24, r24	; 0x18
     784:	98 8d       	ldd	r25, Y+24	; 0x18
     786:	98 8b       	std	Y+16, r25	; 0x10
        prs  = Max ((((CANBT2 &  PRS_MSK) >> 1) +1) , PRS_MIN );
     788:	e3 ee       	ldi	r30, 0xE3	; 227
     78a:	f0 e0       	ldi	r31, 0x00	; 0
     78c:	80 81       	ld	r24, Z
     78e:	88 2f       	mov	r24, r24
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	8e 70       	andi	r24, 0x0E	; 14
     794:	90 70       	andi	r25, 0x00	; 0
     796:	95 95       	asr	r25
     798:	87 95       	ror	r24
     79a:	01 96       	adiw	r24, 0x01	; 1
     79c:	82 30       	cpi	r24, 0x02	; 2
     79e:	91 05       	cpc	r25, r1
     7a0:	6c f0       	brlt	.+26     	; 0x7bc <can_auto_baudrate+0xc8>
     7a2:	e3 ee       	ldi	r30, 0xE3	; 227
     7a4:	f0 e0       	ldi	r31, 0x00	; 0
     7a6:	80 81       	ld	r24, Z
     7a8:	88 2f       	mov	r24, r24
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	8e 70       	andi	r24, 0x0E	; 14
     7ae:	90 70       	andi	r25, 0x00	; 0
     7b0:	95 95       	asr	r25
     7b2:	87 95       	ror	r24
     7b4:	98 2f       	mov	r25, r24
     7b6:	9f 5f       	subi	r25, 0xFF	; 255
     7b8:	9f 8b       	std	Y+23, r25	; 0x17
     7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <can_auto_baudrate+0xcc>
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	8f 8b       	std	Y+23, r24	; 0x17
     7c0:	9f 89       	ldd	r25, Y+23	; 0x17
     7c2:	9f 87       	std	Y+15, r25	; 0x0f
        phs1 = Max ((((CANBT3 & PHS1_MSK) >> 1) +1) , PHS1_MIN);
     7c4:	e4 ee       	ldi	r30, 0xE4	; 228
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	80 81       	ld	r24, Z
     7ca:	88 2f       	mov	r24, r24
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	8e 70       	andi	r24, 0x0E	; 14
     7d0:	90 70       	andi	r25, 0x00	; 0
     7d2:	95 95       	asr	r25
     7d4:	87 95       	ror	r24
     7d6:	01 96       	adiw	r24, 0x01	; 1
     7d8:	83 30       	cpi	r24, 0x03	; 3
     7da:	91 05       	cpc	r25, r1
     7dc:	6c f0       	brlt	.+26     	; 0x7f8 <can_auto_baudrate+0x104>
     7de:	e4 ee       	ldi	r30, 0xE4	; 228
     7e0:	f0 e0       	ldi	r31, 0x00	; 0
     7e2:	80 81       	ld	r24, Z
     7e4:	88 2f       	mov	r24, r24
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	8e 70       	andi	r24, 0x0E	; 14
     7ea:	90 70       	andi	r25, 0x00	; 0
     7ec:	95 95       	asr	r25
     7ee:	87 95       	ror	r24
     7f0:	98 2f       	mov	r25, r24
     7f2:	9f 5f       	subi	r25, 0xFF	; 255
     7f4:	9e 8b       	std	Y+22, r25	; 0x16
     7f6:	02 c0       	rjmp	.+4      	; 0x7fc <can_auto_baudrate+0x108>
     7f8:	82 e0       	ldi	r24, 0x02	; 2
     7fa:	8e 8b       	std	Y+22, r24	; 0x16
     7fc:	9e 89       	ldd	r25, Y+22	; 0x16
     7fe:	9d 87       	std	Y+13, r25	; 0x0d
        phs2 = Max ((((CANBT3 & PHS2_MSK) >> 4) +1) , PHS2_MIN);
     800:	e4 ee       	ldi	r30, 0xE4	; 228
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	80 81       	ld	r24, Z
     806:	88 2f       	mov	r24, r24
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	80 77       	andi	r24, 0x70	; 112
     80c:	90 70       	andi	r25, 0x00	; 0
     80e:	95 95       	asr	r25
     810:	87 95       	ror	r24
     812:	95 95       	asr	r25
     814:	87 95       	ror	r24
     816:	95 95       	asr	r25
     818:	87 95       	ror	r24
     81a:	95 95       	asr	r25
     81c:	87 95       	ror	r24
     81e:	01 96       	adiw	r24, 0x01	; 1
     820:	83 30       	cpi	r24, 0x03	; 3
     822:	91 05       	cpc	r25, r1
     824:	9c f0       	brlt	.+38     	; 0x84c <can_auto_baudrate+0x158>
     826:	e4 ee       	ldi	r30, 0xE4	; 228
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	80 81       	ld	r24, Z
     82c:	88 2f       	mov	r24, r24
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	80 77       	andi	r24, 0x70	; 112
     832:	90 70       	andi	r25, 0x00	; 0
     834:	95 95       	asr	r25
     836:	87 95       	ror	r24
     838:	95 95       	asr	r25
     83a:	87 95       	ror	r24
     83c:	95 95       	asr	r25
     83e:	87 95       	ror	r24
     840:	95 95       	asr	r25
     842:	87 95       	ror	r24
     844:	98 2f       	mov	r25, r24
     846:	9f 5f       	subi	r25, 0xFF	; 255
     848:	9d 8b       	std	Y+21, r25	; 0x15
     84a:	02 c0       	rjmp	.+4      	; 0x850 <can_auto_baudrate+0x15c>
     84c:	82 e0       	ldi	r24, 0x02	; 2
     84e:	8d 8b       	std	Y+21, r24	; 0x15
     850:	9d 89       	ldd	r25, Y+21	; 0x15
     852:	9c 87       	std	Y+12, r25	; 0x0c
        ntq  = Max ((prs + phs1 + phs2 + 1) , NTQ_MIN);
     854:	8f 85       	ldd	r24, Y+15	; 0x0f
     856:	28 2f       	mov	r18, r24
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	8d 85       	ldd	r24, Y+13	; 0x0d
     85c:	88 2f       	mov	r24, r24
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	28 0f       	add	r18, r24
     862:	39 1f       	adc	r19, r25
     864:	8c 85       	ldd	r24, Y+12	; 0x0c
     866:	88 2f       	mov	r24, r24
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	82 0f       	add	r24, r18
     86c:	93 1f       	adc	r25, r19
     86e:	01 96       	adiw	r24, 0x01	; 1
     870:	9c 8b       	std	Y+20, r25	; 0x14
     872:	8b 8b       	std	Y+19, r24	; 0x13
     874:	8b 89       	ldd	r24, Y+19	; 0x13
     876:	9c 89       	ldd	r25, Y+20	; 0x14
     878:	88 30       	cpi	r24, 0x08	; 8
     87a:	91 05       	cpc	r25, r1
     87c:	24 f4       	brge	.+8      	; 0x886 <can_auto_baudrate+0x192>
     87e:	88 e0       	ldi	r24, 0x08	; 8
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	9c 8b       	std	Y+20, r25	; 0x14
     884:	8b 8b       	std	Y+19, r24	; 0x13
     886:	9b 89       	ldd	r25, Y+19	; 0x13
     888:	9e 87       	std	Y+14, r25	; 0x0e
        phs1_inc = evaluate = 1;   //! To enter in "while (evaluate ..." loop
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	88 87       	std	Y+8, r24	; 0x08
     88e:	88 85       	ldd	r24, Y+8	; 0x08
     890:	8b 87       	std	Y+11, r24	; 0x0b
        try_conf = 0;       //! Look for the next configuration
     892:	1f 82       	std	Y+7, r1	; 0x07
        wait_for_rx = 0;    //! Skip "while (wait_for_rx ..." loop
     894:	19 86       	std	Y+9, r1	; 0x09
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
     896:	19 8a       	std	Y+17, r1	; 0x11
     898:	1b c0       	rjmp	.+54     	; 0x8d0 <can_auto_baudrate+0x1dc>
    {
        Can_set_mob(u8_temp0);  //! Page index
     89a:	ed ee       	ldi	r30, 0xED	; 237
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	89 89       	ldd	r24, Y+17	; 0x11
     8a0:	82 95       	swap	r24
     8a2:	80 7f       	andi	r24, 0xF0	; 240
     8a4:	80 83       	st	Z, r24
        Can_clear_mob();        //! All MOb Registers = 0x00
     8a6:	8e ee       	ldi	r24, 0xEE	; 238
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	9a 83       	std	Y+2, r25	; 0x02
     8ac:	89 83       	std	Y+1, r24	; 0x01
     8ae:	08 c0       	rjmp	.+16     	; 0x8c0 <can_auto_baudrate+0x1cc>
     8b0:	e9 81       	ldd	r30, Y+1	; 0x01
     8b2:	fa 81       	ldd	r31, Y+2	; 0x02
     8b4:	10 82       	st	Z, r1
     8b6:	89 81       	ldd	r24, Y+1	; 0x01
     8b8:	9a 81       	ldd	r25, Y+2	; 0x02
     8ba:	01 96       	adiw	r24, 0x01	; 1
     8bc:	9a 83       	std	Y+2, r25	; 0x02
     8be:	89 83       	std	Y+1, r24	; 0x01
     8c0:	89 81       	ldd	r24, Y+1	; 0x01
     8c2:	9a 81       	ldd	r25, Y+2	; 0x02
     8c4:	88 3f       	cpi	r24, 0xF8	; 248
     8c6:	91 05       	cpc	r25, r1
     8c8:	98 f3       	brcs	.-26     	; 0x8b0 <can_auto_baudrate+0x1bc>
        try_conf = 0;       //! Look for the next configuration
        wait_for_rx = 0;    //! Skip "while (wait_for_rx ..." loop
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
     8ca:	89 89       	ldd	r24, Y+17	; 0x11
     8cc:	8f 5f       	subi	r24, 0xFF	; 255
     8ce:	89 8b       	std	Y+17, r24	; 0x11
     8d0:	89 89       	ldd	r24, Y+17	; 0x11
     8d2:	8f 30       	cpi	r24, 0x0F	; 15
     8d4:	10 f3       	brcs	.-60     	; 0x89a <can_auto_baudrate+0x1a6>
     8d6:	61 c1       	rjmp	.+706    	; 0xb9a <can_auto_baudrate+0x4a6>
        Can_clear_mob();        //! All MOb Registers = 0x00
    }

    while (bt_not_found == 1)
    {
        if (try_conf == 1)
     8d8:	8f 81       	ldd	r24, Y+7	; 0x07
     8da:	81 30       	cpi	r24, 0x01	; 1
     8dc:	09 f0       	breq	.+2      	; 0x8e0 <can_auto_baudrate+0x1ec>
     8de:	c2 c0       	rjmp	.+388    	; 0xa64 <can_auto_baudrate+0x370>
        {
            Can_reset();
     8e0:	e8 ed       	ldi	r30, 0xD8	; 216
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	80 83       	st	Z, r24
            conf_index++;
     8e8:	8c 81       	ldd	r24, Y+4	; 0x04
     8ea:	9d 81       	ldd	r25, Y+5	; 0x05
     8ec:	01 96       	adiw	r24, 0x01	; 1
     8ee:	9d 83       	std	Y+5, r25	; 0x05
     8f0:	8c 83       	std	Y+4, r24	; 0x04
            ovrtim_flag=0;
     8f2:	1e 82       	std	Y+6, r1	; 0x06

            //! --- CANBTx registers update (sjw = phs2/2, 3 sample points)
            CANBT1 = ((brp-1) << BRP);
     8f4:	e2 ee       	ldi	r30, 0xE2	; 226
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	88 89       	ldd	r24, Y+16	; 0x10
     8fa:	81 50       	subi	r24, 0x01	; 1
     8fc:	88 0f       	add	r24, r24
     8fe:	80 83       	st	Z, r24
            CANBT2 = (((phs2 >> 1)-1) << SJW) |((prs-1) << PRS);
     900:	e3 ee       	ldi	r30, 0xE3	; 227
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	8c 85       	ldd	r24, Y+12	; 0x0c
     906:	86 95       	lsr	r24
     908:	88 2f       	mov	r24, r24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	01 97       	sbiw	r24, 0x01	; 1
     90e:	88 0f       	add	r24, r24
     910:	99 1f       	adc	r25, r25
     912:	82 95       	swap	r24
     914:	92 95       	swap	r25
     916:	90 7f       	andi	r25, 0xF0	; 240
     918:	98 27       	eor	r25, r24
     91a:	80 7f       	andi	r24, 0xF0	; 240
     91c:	98 27       	eor	r25, r24
     91e:	28 2f       	mov	r18, r24
     920:	8f 85       	ldd	r24, Y+15	; 0x0f
     922:	88 2f       	mov	r24, r24
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	01 97       	sbiw	r24, 0x01	; 1
     928:	88 0f       	add	r24, r24
     92a:	99 1f       	adc	r25, r25
     92c:	82 2b       	or	r24, r18
     92e:	80 83       	st	Z, r24
            CANBT3 = (((phs2-1) << PHS2) | ((phs1-1) << PHS1) | (1<<SMP));
     930:	e4 ee       	ldi	r30, 0xE4	; 228
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	8c 85       	ldd	r24, Y+12	; 0x0c
     936:	88 2f       	mov	r24, r24
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	01 97       	sbiw	r24, 0x01	; 1
     93c:	82 95       	swap	r24
     93e:	92 95       	swap	r25
     940:	90 7f       	andi	r25, 0xF0	; 240
     942:	98 27       	eor	r25, r24
     944:	80 7f       	andi	r24, 0xF0	; 240
     946:	98 27       	eor	r25, r24
     948:	28 2f       	mov	r18, r24
     94a:	8d 85       	ldd	r24, Y+13	; 0x0d
     94c:	88 2f       	mov	r24, r24
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	01 97       	sbiw	r24, 0x01	; 1
     952:	88 0f       	add	r24, r24
     954:	99 1f       	adc	r25, r25
     956:	82 2b       	or	r24, r18
     958:	81 60       	ori	r24, 0x01	; 1
     95a:	80 83       	st	Z, r24

            //! --- Set CAN-Timer - Used for time-out
            //!     There are 641 (0x281) possible evaluations. The first one provides the faster
            //!         the faster bit timing, the last one gives the slower. It is necessary to
            //!         modulate the time-out versus bit timing (0x281>>3=0x50, matching an U8).
            CANTCON = (U8)(conf_index >> 3);
     95c:	e5 ee       	ldi	r30, 0xE5	; 229
     95e:	f0 e0       	ldi	r31, 0x00	; 0
     960:	8c 81       	ldd	r24, Y+4	; 0x04
     962:	9d 81       	ldd	r25, Y+5	; 0x05
     964:	96 95       	lsr	r25
     966:	87 95       	ror	r24
     968:	96 95       	lsr	r25
     96a:	87 95       	ror	r24
     96c:	96 95       	lsr	r25
     96e:	87 95       	ror	r24
     970:	80 83       	st	Z, r24

            //! --- MOb configuration
            Can_set_mob(MOB_0);                 //! Use MOb-0
     972:	ed ee       	ldi	r30, 0xED	; 237
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	10 82       	st	Z, r1
            CANSTMOB = 0;                       //! Reset MOb status (undone by "Can_reset()")
     978:	ee ee       	ldi	r30, 0xEE	; 238
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	10 82       	st	Z, r1
            CANCDMOB = (MOB_Rx_ENA  << CONMOB); //! MOb 0 in receive mode
     97e:	ef ee       	ldi	r30, 0xEF	; 239
     980:	f0 e0       	ldi	r31, 0x00	; 0
     982:	80 e8       	ldi	r24, 0x80	; 128
     984:	80 83       	st	Z, r24

            //! CAN controller configuration
            CANGCON = (1<<LISTEN) | (1<<ENASTB);//! Enable CAN controller in "listen" mode
     986:	e8 ed       	ldi	r30, 0xD8	; 216
     988:	f0 e0       	ldi	r31, 0x00	; 0
     98a:	8a e0       	ldi	r24, 0x0A	; 10
     98c:	80 83       	st	Z, r24
            while ((CANGSTA & (1<<ENFG)) == 0); //! Wait for Enable OK
     98e:	e9 ed       	ldi	r30, 0xD9	; 217
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	80 81       	ld	r24, Z
     994:	88 2f       	mov	r24, r24
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	84 70       	andi	r24, 0x04	; 4
     99a:	90 70       	andi	r25, 0x00	; 0
     99c:	00 97       	sbiw	r24, 0x00	; 0
     99e:	b9 f3       	breq	.-18     	; 0x98e <can_auto_baudrate+0x29a>
            CANGIT = 0xFF;                      //! Reset General errors and OVRTIM flag
     9a0:	ea ed       	ldi	r30, 0xDA	; 218
     9a2:	f0 e0       	ldi	r31, 0x00	; 0
     9a4:	8f ef       	ldi	r24, 0xFF	; 255
     9a6:	80 83       	st	Z, r24
     9a8:	5d c0       	rjmp	.+186    	; 0xa64 <can_auto_baudrate+0x370>
        //!     Try to perform a CAN message reception in "LISTEN" mode without error and
        //!     before a time_out done by CAN-Timer.
        //!     Else gives the hand to "EVALUATE LOOP" to have a new set of bit timing.
        while (wait_for_rx == 1)
        {
            u8_temp0 = CANSTMOB;
     9aa:	ee ee       	ldi	r30, 0xEE	; 238
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	80 81       	ld	r24, Z
     9b0:	89 8b       	std	Y+17, r24	; 0x11
            //! --- RxOK received ?
            if ((u8_temp0 & (1<<RXOK)) != 0)
     9b2:	89 89       	ldd	r24, Y+17	; 0x11
     9b4:	88 2f       	mov	r24, r24
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	80 72       	andi	r24, 0x20	; 32
     9ba:	90 70       	andi	r25, 0x00	; 0
     9bc:	00 97       	sbiw	r24, 0x00	; 0
     9be:	c9 f0       	breq	.+50     	; 0x9f2 <can_auto_baudrate+0x2fe>
            {   //! --- It is the successful output of "can_auto_baudrate" function
                wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
     9c0:	19 86       	std	Y+9, r1	; 0x09
                evaluate = 0;       //! Will skip "while (evaluate ..." loop
     9c2:	18 86       	std	Y+8, r1	; 0x08
                bt_not_found = 0;   //! Out of "while (bt_not_found ..." loop
     9c4:	1a 86       	std	Y+10, r1	; 0x0a
                bt_performed = 1;   //! Return flag = TRUE
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	8b 83       	std	Y+3, r24	; 0x03
                DISABLE_MOB;        //! Disable MOb-0
     9ca:	af ee       	ldi	r26, 0xEF	; 239
     9cc:	b0 e0       	ldi	r27, 0x00	; 0
     9ce:	ef ee       	ldi	r30, 0xEF	; 239
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
     9d2:	80 81       	ld	r24, Z
     9d4:	8f 73       	andi	r24, 0x3F	; 63
     9d6:	8c 93       	st	X, r24
                CANGCON = 0x00;     //! Disable CAN controller & reset "listen" mode
     9d8:	e8 ed       	ldi	r30, 0xD8	; 216
     9da:	f0 e0       	ldi	r31, 0x00	; 0
     9dc:	10 82       	st	Z, r1
                while ((CANGSTA & (1<<ENFG)) != 0); //! Wait for Disable OK
     9de:	e9 ed       	ldi	r30, 0xD9	; 217
     9e0:	f0 e0       	ldi	r31, 0x00	; 0
     9e2:	80 81       	ld	r24, Z
     9e4:	88 2f       	mov	r24, r24
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	84 70       	andi	r24, 0x04	; 4
     9ea:	90 70       	andi	r25, 0x00	; 0
     9ec:	00 97       	sbiw	r24, 0x00	; 0
     9ee:	b9 f7       	brne	.-18     	; 0x9de <can_auto_baudrate+0x2ea>
     9f0:	39 c0       	rjmp	.+114    	; 0xa64 <can_auto_baudrate+0x370>
            }
             //! --- Else stop if any errors
             else
            {
                //! --- MOb error ?
                if ((u8_temp0 & ((1<<BERR)|(1<<SERR)|(1<<CERR)|(1<<FERR)|(1<<AERR))) !=0)
     9f2:	89 89       	ldd	r24, Y+17	; 0x11
     9f4:	88 2f       	mov	r24, r24
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	8f 71       	andi	r24, 0x1F	; 31
     9fa:	90 70       	andi	r25, 0x00	; 0
     9fc:	00 97       	sbiw	r24, 0x00	; 0
     9fe:	19 f0       	breq	.+6      	; 0xa06 <can_auto_baudrate+0x312>
                {
                    evaluate = 1;       //! Will enter in "while (evaluate ..." loop
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	88 87       	std	Y+8, r24	; 0x08
                    wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
     a04:	19 86       	std	Y+9, r1	; 0x09
                }

                u8_temp0 = CANGIT;
     a06:	ea ed       	ldi	r30, 0xDA	; 218
     a08:	f0 e0       	ldi	r31, 0x00	; 0
     a0a:	80 81       	ld	r24, Z
     a0c:	89 8b       	std	Y+17, r24	; 0x11

                //! --- Time_out reached ?
                if ((u8_temp0 & (1<<OVRTIM)) !=0 )
     a0e:	89 89       	ldd	r24, Y+17	; 0x11
     a10:	88 2f       	mov	r24, r24
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	80 72       	andi	r24, 0x20	; 32
     a16:	90 70       	andi	r25, 0x00	; 0
     a18:	00 97       	sbiw	r24, 0x00	; 0
     a1a:	c1 f0       	breq	.+48     	; 0xa4c <can_auto_baudrate+0x358>
                {
                    if (ovrtim_flag==0)
     a1c:	8e 81       	ldd	r24, Y+6	; 0x06
     a1e:	88 23       	and	r24, r24
     a20:	59 f4       	brne	.+22     	; 0xa38 <can_auto_baudrate+0x344>
                    {
                        //! --- First Time_out
                        CANGIT |= (1<<OVRTIM);  // Reset OVRTIM
     a22:	aa ed       	ldi	r26, 0xDA	; 218
     a24:	b0 e0       	ldi	r27, 0x00	; 0
     a26:	ea ed       	ldi	r30, 0xDA	; 218
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	80 81       	ld	r24, Z
     a2c:	80 62       	ori	r24, 0x20	; 32
     a2e:	8c 93       	st	X, r24
                        ovrtim_flag++;
     a30:	8e 81       	ldd	r24, Y+6	; 0x06
     a32:	8f 5f       	subi	r24, 0xFF	; 255
     a34:	8e 83       	std	Y+6, r24	; 0x06
     a36:	0a c0       	rjmp	.+20     	; 0xa4c <can_auto_baudrate+0x358>
                    }
                    else
                    {
                        //! --- Second Time_out
                        CANGIT |= (1<<OVRTIM);  // Reset OVRTIM
     a38:	aa ed       	ldi	r26, 0xDA	; 218
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	ea ed       	ldi	r30, 0xDA	; 218
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	80 81       	ld	r24, Z
     a42:	80 62       	ori	r24, 0x20	; 32
     a44:	8c 93       	st	X, r24
                        evaluate = 1;           //! Will enter in "while (evaluate ..." loop
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	88 87       	std	Y+8, r24	; 0x08
                        wait_for_rx = 0;        //! Out of "while (wait_for_rx ..." loop
     a4a:	19 86       	std	Y+9, r1	; 0x09
                    }
                }

                //! --- General error ?
                if ((u8_temp0 & ((1<<SERG)|(1<<CERG)|(1<<FERG)|(1<<AERG))) !=0)
     a4c:	89 89       	ldd	r24, Y+17	; 0x11
     a4e:	88 2f       	mov	r24, r24
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	8f 70       	andi	r24, 0x0F	; 15
     a54:	90 70       	andi	r25, 0x00	; 0
     a56:	00 97       	sbiw	r24, 0x00	; 0
     a58:	29 f0       	breq	.+10     	; 0xa64 <can_auto_baudrate+0x370>
                {
                    evaluate = 1;       //! Will enter in "while (evaluate ..." loop
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	88 87       	std	Y+8, r24	; 0x08
                    wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
     a5e:	19 86       	std	Y+9, r1	; 0x09
                    try_conf = 1;       //! Try this configuration
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	8f 83       	std	Y+7, r24	; 0x07
        //! --- WAIT_FOR_RX LOOP:
        //!     ================
        //!     Try to perform a CAN message reception in "LISTEN" mode without error and
        //!     before a time_out done by CAN-Timer.
        //!     Else gives the hand to "EVALUATE LOOP" to have a new set of bit timing.
        while (wait_for_rx == 1)
     a64:	89 85       	ldd	r24, Y+9	; 0x09
     a66:	81 30       	cpi	r24, 0x01	; 1
     a68:	09 f4       	brne	.+2      	; 0xa6c <can_auto_baudrate+0x378>
     a6a:	9f cf       	rjmp	.-194    	; 0x9aa <can_auto_baudrate+0x2b6>
     a6c:	92 c0       	rjmp	.+292    	; 0xb92 <can_auto_baudrate+0x49e>
        //!     limit and after it is the Prescaler. During the computing high (80%)
        //!     and low (75%) limits of sampling point location are tested. SJW and
        //!     the number of sampling points are not calculated in this loop.
        while (evaluate == 1)
        {
            if (phs1_inc != 0) phs1++;
     a6e:	8b 85       	ldd	r24, Y+11	; 0x0b
     a70:	88 23       	and	r24, r24
     a72:	19 f0       	breq	.+6      	; 0xa7a <can_auto_baudrate+0x386>
     a74:	8d 85       	ldd	r24, Y+13	; 0x0d
     a76:	8f 5f       	subi	r24, 0xFF	; 255
     a78:	8d 87       	std	Y+13, r24	; 0x0d
            phs1_inc = 1;
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	8b 87       	std	Y+11, r24	; 0x0b

            // --- The following test takes into account the previous incrementation of phs1
            if ((phs1 > PHS1_MAX) && (phs2 >= PHS2_MAX))
     a7e:	8d 85       	ldd	r24, Y+13	; 0x0d
     a80:	89 30       	cpi	r24, 0x09	; 9
     a82:	78 f1       	brcs	.+94     	; 0xae2 <can_auto_baudrate+0x3ee>
     a84:	8c 85       	ldd	r24, Y+12	; 0x0c
     a86:	88 30       	cpi	r24, 0x08	; 8
     a88:	60 f1       	brcs	.+88     	; 0xae2 <can_auto_baudrate+0x3ee>
            {
                phs1 = PHS1_MIN;
     a8a:	82 e0       	ldi	r24, 0x02	; 2
     a8c:	8d 87       	std	Y+13, r24	; 0x0d
                phs2 = PHS2_MIN;
     a8e:	82 e0       	ldi	r24, 0x02	; 2
     a90:	8c 87       	std	Y+12, r24	; 0x0c
                phs1_inc = 0;
     a92:	1b 86       	std	Y+11, r1	; 0x0b
                if (ntq != NTQ_MAX) ntq++;
     a94:	8e 85       	ldd	r24, Y+14	; 0x0e
     a96:	89 31       	cpi	r24, 0x19	; 25
     a98:	21 f0       	breq	.+8      	; 0xaa2 <can_auto_baudrate+0x3ae>
     a9a:	8e 85       	ldd	r24, Y+14	; 0x0e
     a9c:	8f 5f       	subi	r24, 0xFF	; 255
     a9e:	8e 87       	std	Y+14, r24	; 0x0e
     aa0:	78 c0       	rjmp	.+240    	; 0xb92 <can_auto_baudrate+0x49e>
                else
                {
                    ntq = NTQ_MIN;
     aa2:	88 e0       	ldi	r24, 0x08	; 8
     aa4:	8e 87       	std	Y+14, r24	; 0x0e
                    if (brp != BRP_MAX) brp++;
     aa6:	88 89       	ldd	r24, Y+16	; 0x10
     aa8:	80 34       	cpi	r24, 0x40	; 64
     aaa:	21 f0       	breq	.+8      	; 0xab4 <can_auto_baudrate+0x3c0>
     aac:	88 89       	ldd	r24, Y+16	; 0x10
     aae:	8f 5f       	subi	r24, 0xFF	; 255
     ab0:	88 8b       	std	Y+16, r24	; 0x10
     ab2:	6f c0       	rjmp	.+222    	; 0xb92 <can_auto_baudrate+0x49e>
                    else
                    {
                        //! --- It is the failing of "can_auto_baudrate" function
                        evaluate = 0;       //! Out of "while (evaluate ..." loop
     ab4:	18 86       	std	Y+8, r1	; 0x08
                        bt_performed = 0;   //! Return flag = FALSE
     ab6:	1b 82       	std	Y+3, r1	; 0x03
                        bt_not_found = 0;   //! Out of "while (bt_not_found ..." loop
     ab8:	1a 86       	std	Y+10, r1	; 0x0a
                        DISABLE_MOB;        //! Disable MOb-0
     aba:	af ee       	ldi	r26, 0xEF	; 239
     abc:	b0 e0       	ldi	r27, 0x00	; 0
     abe:	ef ee       	ldi	r30, 0xEF	; 239
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	80 81       	ld	r24, Z
     ac4:	8f 73       	andi	r24, 0x3F	; 63
     ac6:	8c 93       	st	X, r24
                        CANGCON = 0x00;     //! Disable CAN controller & reset "listen" mode
     ac8:	e8 ed       	ldi	r30, 0xD8	; 216
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	10 82       	st	Z, r1
                        while ((CANGSTA & (1<<ENFG)) != 0); //! Wait for Disable OK
     ace:	e9 ed       	ldi	r30, 0xD9	; 217
     ad0:	f0 e0       	ldi	r31, 0x00	; 0
     ad2:	80 81       	ld	r24, Z
     ad4:	88 2f       	mov	r24, r24
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	84 70       	andi	r24, 0x04	; 4
     ada:	90 70       	andi	r25, 0x00	; 0
     adc:	00 97       	sbiw	r24, 0x00	; 0
     ade:	b9 f7       	brne	.-18     	; 0xace <can_auto_baudrate+0x3da>
     ae0:	58 c0       	rjmp	.+176    	; 0xb92 <can_auto_baudrate+0x49e>
                }
            }
            else    // if (phs1 > PHS1_MAX ...
            {
                //! --- If psh1 > 5 then phs1 =phs2 or =phs2+1, else phs1=phs2
                if (phs1>5)
     ae2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ae4:	86 30       	cpi	r24, 0x06	; 6
     ae6:	80 f0       	brcs	.+32     	; 0xb08 <can_auto_baudrate+0x414>
                {
                    if (phs1>(phs2+1)) phs1=(++phs2);
     ae8:	8d 85       	ldd	r24, Y+13	; 0x0d
     aea:	28 2f       	mov	r18, r24
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	8c 85       	ldd	r24, Y+12	; 0x0c
     af0:	88 2f       	mov	r24, r24
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	01 96       	adiw	r24, 0x01	; 1
     af6:	82 17       	cp	r24, r18
     af8:	93 07       	cpc	r25, r19
     afa:	44 f4       	brge	.+16     	; 0xb0c <can_auto_baudrate+0x418>
     afc:	8c 85       	ldd	r24, Y+12	; 0x0c
     afe:	8f 5f       	subi	r24, 0xFF	; 255
     b00:	8c 87       	std	Y+12, r24	; 0x0c
     b02:	8c 85       	ldd	r24, Y+12	; 0x0c
     b04:	8d 87       	std	Y+13, r24	; 0x0d
     b06:	02 c0       	rjmp	.+4      	; 0xb0c <can_auto_baudrate+0x418>
                }
                else
                {
                phs2=phs1;
     b08:	8d 85       	ldd	r24, Y+13	; 0x0d
     b0a:	8c 87       	std	Y+12, r24	; 0x0c
                }
                prs = ntq - ( phs1 + phs2 + 1 );
     b0c:	9d 85       	ldd	r25, Y+13	; 0x0d
     b0e:	8c 85       	ldd	r24, Y+12	; 0x0c
     b10:	89 0f       	add	r24, r25
     b12:	98 2f       	mov	r25, r24
     b14:	90 95       	com	r25
     b16:	8e 85       	ldd	r24, Y+14	; 0x0e
     b18:	89 0f       	add	r24, r25
     b1a:	8f 87       	std	Y+15, r24	; 0x0f

                //! --- Test PRS limits
                if ((prs <= PRS_MAX) && (prs >= PRS_MIN))
     b1c:	8f 85       	ldd	r24, Y+15	; 0x0f
     b1e:	89 30       	cpi	r24, 0x09	; 9
     b20:	c0 f5       	brcc	.+112    	; 0xb92 <can_auto_baudrate+0x49e>
     b22:	8f 85       	ldd	r24, Y+15	; 0x0f
     b24:	88 23       	and	r24, r24
     b26:	a9 f1       	breq	.+106    	; 0xb92 <can_auto_baudrate+0x49e>
                {
                    //! --- Values  accepted if  80% >= sampling point >= 75%
                    if (((phs2<<2) >= (1+prs+phs1)) && ((phs2+phs2+phs2) <= (1+prs+phs1)))
     b28:	8c 85       	ldd	r24, Y+12	; 0x0c
     b2a:	88 2f       	mov	r24, r24
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	ac 01       	movw	r20, r24
     b30:	44 0f       	add	r20, r20
     b32:	55 1f       	adc	r21, r21
     b34:	44 0f       	add	r20, r20
     b36:	55 1f       	adc	r21, r21
     b38:	8f 85       	ldd	r24, Y+15	; 0x0f
     b3a:	88 2f       	mov	r24, r24
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	9c 01       	movw	r18, r24
     b40:	2f 5f       	subi	r18, 0xFF	; 255
     b42:	3f 4f       	sbci	r19, 0xFF	; 255
     b44:	8d 85       	ldd	r24, Y+13	; 0x0d
     b46:	88 2f       	mov	r24, r24
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	82 0f       	add	r24, r18
     b4c:	93 1f       	adc	r25, r19
     b4e:	48 17       	cp	r20, r24
     b50:	59 07       	cpc	r21, r25
     b52:	fc f0       	brlt	.+62     	; 0xb92 <can_auto_baudrate+0x49e>
     b54:	8c 85       	ldd	r24, Y+12	; 0x0c
     b56:	28 2f       	mov	r18, r24
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	8c 85       	ldd	r24, Y+12	; 0x0c
     b5c:	88 2f       	mov	r24, r24
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	28 0f       	add	r18, r24
     b62:	39 1f       	adc	r19, r25
     b64:	8c 85       	ldd	r24, Y+12	; 0x0c
     b66:	88 2f       	mov	r24, r24
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a9 01       	movw	r20, r18
     b6c:	48 0f       	add	r20, r24
     b6e:	59 1f       	adc	r21, r25
     b70:	8f 85       	ldd	r24, Y+15	; 0x0f
     b72:	88 2f       	mov	r24, r24
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	9c 01       	movw	r18, r24
     b78:	2f 5f       	subi	r18, 0xFF	; 255
     b7a:	3f 4f       	sbci	r19, 0xFF	; 255
     b7c:	8d 85       	ldd	r24, Y+13	; 0x0d
     b7e:	88 2f       	mov	r24, r24
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	82 0f       	add	r24, r18
     b84:	93 1f       	adc	r25, r19
     b86:	84 17       	cp	r24, r20
     b88:	95 07       	cpc	r25, r21
     b8a:	1c f0       	brlt	.+6      	; 0xb92 <can_auto_baudrate+0x49e>
                    {
                        evaluate = 0;     //! Out of "while (evaluate ..." loop &
     b8c:	18 86       	std	Y+8, r1	; 0x08
                        wait_for_rx = 1;  //!    new "while (bt_not_found ..." loop
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	89 87       	std	Y+9, r24	; 0x09
        //!     then Phase2=Phase1 and if Phase1>5, Phase1 can be equal to Phase2 or
        //!     Phase2+1. After this, the number of TQ is increased up to its high
        //!     limit and after it is the Prescaler. During the computing high (80%)
        //!     and low (75%) limits of sampling point location are tested. SJW and
        //!     the number of sampling points are not calculated in this loop.
        while (evaluate == 1)
     b92:	88 85       	ldd	r24, Y+8	; 0x08
     b94:	81 30       	cpi	r24, 0x01	; 1
     b96:	09 f4       	brne	.+2      	; 0xb9a <can_auto_baudrate+0x4a6>
     b98:	6a cf       	rjmp	.-300    	; 0xa6e <can_auto_baudrate+0x37a>
    {
        Can_set_mob(u8_temp0);  //! Page index
        Can_clear_mob();        //! All MOb Registers = 0x00
    }

    while (bt_not_found == 1)
     b9a:	8a 85       	ldd	r24, Y+10	; 0x0a
     b9c:	81 30       	cpi	r24, 0x01	; 1
     b9e:	09 f4       	brne	.+2      	; 0xba2 <can_auto_baudrate+0x4ae>
     ba0:	9b ce       	rjmp	.-714    	; 0x8d8 <can_auto_baudrate+0x1e4>
                }
            }
        } // while (evaluate ...
    } // while (bt_not_found ...

    return (bt_performed);
     ba2:	8b 81       	ldd	r24, Y+3	; 0x03
}
     ba4:	68 96       	adiw	r28, 0x18	; 24
     ba6:	0f b6       	in	r0, 0x3f	; 63
     ba8:	f8 94       	cli
     baa:	de bf       	out	0x3e, r29	; 62
     bac:	0f be       	out	0x3f, r0	; 63
     bae:	cd bf       	out	0x3d, r28	; 61
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <can_fixed_baudrate>:
//!
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
U8 can_fixed_baudrate(U8 mode)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	0f 92       	push	r0
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	89 83       	std	Y+1, r24	; 0x01
    Can_reset();
     bc2:	e8 ed       	ldi	r30, 0xD8	; 216
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	80 83       	st	Z, r24
    Can_conf_bt();
     bca:	e2 ee       	ldi	r30, 0xE2	; 226
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	82 e0       	ldi	r24, 0x02	; 2
     bd0:	80 83       	st	Z, r24
     bd2:	e3 ee       	ldi	r30, 0xE3	; 227
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	8c e0       	ldi	r24, 0x0C	; 12
     bd8:	80 83       	st	Z, r24
     bda:	e4 ee       	ldi	r30, 0xE4	; 228
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	87 e3       	ldi	r24, 0x37	; 55
     be0:	80 83       	st	Z, r24
    return 1;
     be2:	81 e0       	ldi	r24, 0x01	; 1
}
     be4:	0f 90       	pop	r0
     be6:	cf 91       	pop	r28
     be8:	df 91       	pop	r29
     bea:	08 95       	ret

00000bec <can_init>:
//!         ==0: research of bit timing configuration failed
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
U8 can_init(U8 mode)
{
     bec:	df 93       	push	r29
     bee:	cf 93       	push	r28
     bf0:	00 d0       	rcall	.+0      	; 0xbf2 <can_init+0x6>
     bf2:	cd b7       	in	r28, 0x3d	; 61
     bf4:	de b7       	in	r29, 0x3e	; 62
     bf6:	89 83       	std	Y+1, r24	; 0x01
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	0e 94 db 05 	call	0xbb6	; 0xbb6 <can_fixed_baudrate>
     bfe:	88 23       	and	r24, r24
     c00:	11 f4       	brne	.+4      	; 0xc06 <can_init+0x1a>
     c02:	1a 82       	std	Y+2, r1	; 0x02
     c04:	0b c0       	rjmp	.+22     	; 0xc1c <can_init+0x30>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     c06:	0e 94 b7 02 	call	0x56e	; 0x56e <can_clear_all_mob>
    Can_enable();                               // c.f. macro in "can_drv.h" 
     c0a:	a8 ed       	ldi	r26, 0xD8	; 216
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	e8 ed       	ldi	r30, 0xD8	; 216
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	82 60       	ori	r24, 0x02	; 2
     c16:	8c 93       	st	X, r24
    return (1);
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	8a 83       	std	Y+2, r24	; 0x02
     c1c:	8a 81       	ldd	r24, Y+2	; 0x02
}
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	cf 91       	pop	r28
     c24:	df 91       	pop	r29
     c26:	08 95       	ret

00000c28 <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
U8 can_cmd(st_cmd_t* cmd)
{
     c28:	df 93       	push	r29
     c2a:	cf 93       	push	r28
     c2c:	cd b7       	in	r28, 0x3d	; 61
     c2e:	de b7       	in	r29, 0x3e	; 62
     c30:	2d 97       	sbiw	r28, 0x0d	; 13
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	f8 94       	cli
     c36:	de bf       	out	0x3e, r29	; 62
     c38:	0f be       	out	0x3f, r0	; 63
     c3a:	cd bf       	out	0x3d, r28	; 61
     c3c:	9a 87       	std	Y+10, r25	; 0x0a
     c3e:	89 87       	std	Y+9, r24	; 0x09
  U8 mob_handle, cpt;
  U32 u32_temp;
  
  if (cmd->cmd == CMD_ABORT)
     c40:	e9 85       	ldd	r30, Y+9	; 0x09
     c42:	fa 85       	ldd	r31, Y+10	; 0x0a
     c44:	81 81       	ldd	r24, Z+1	; 0x01
     c46:	92 81       	ldd	r25, Z+2	; 0x02
     c48:	8c 30       	cpi	r24, 0x0C	; 12
     c4a:	91 05       	cpc	r25, r1
     c4c:	f9 f4       	brne	.+62     	; 0xc8c <can_cmd+0x64>
  {
    if (cmd->status == MOB_PENDING)
     c4e:	e9 85       	ldd	r30, Y+9	; 0x09
     c50:	fa 85       	ldd	r31, Y+10	; 0x0a
     c52:	82 85       	ldd	r24, Z+10	; 0x0a
     c54:	80 36       	cpi	r24, 0x60	; 96
     c56:	a9 f4       	brne	.+42     	; 0xc82 <can_cmd+0x5a>
    {
      // Rx or Tx not yet performed
      Can_set_mob(cmd->handle);
     c58:	ad ee       	ldi	r26, 0xED	; 237
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	e9 85       	ldd	r30, Y+9	; 0x09
     c5e:	fa 85       	ldd	r31, Y+10	; 0x0a
     c60:	80 81       	ld	r24, Z
     c62:	82 95       	swap	r24
     c64:	80 7f       	andi	r24, 0xF0	; 240
     c66:	8c 93       	st	X, r24
      Can_mob_abort();
     c68:	af ee       	ldi	r26, 0xEF	; 239
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	ef ee       	ldi	r30, 0xEF	; 239
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	8f 73       	andi	r24, 0x3F	; 63
     c74:	8c 93       	st	X, r24
      Can_clear_status_mob();       // To be sure !
     c76:	ee ee       	ldi	r30, 0xEE	; 238
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	10 82       	st	Z, r1
      cmd->handle = 0;
     c7c:	e9 85       	ldd	r30, Y+9	; 0x09
     c7e:	fa 85       	ldd	r31, Y+10	; 0x0a
     c80:	10 82       	st	Z, r1
    }
    cmd->status = STATUS_CLEARED; 
     c82:	e9 85       	ldd	r30, Y+9	; 0x09
     c84:	fa 85       	ldd	r31, Y+10	; 0x0a
     c86:	12 86       	std	Z+10, r1	; 0x0a
     c88:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <__stack+0xd8d>
  }
  else
  {
    mob_handle = can_get_mob_free();
     c8c:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <can_get_mob_free>
     c90:	8c 83       	std	Y+4, r24	; 0x04
    if (mob_handle!= NO_MOB)
     c92:	8c 81       	ldd	r24, Y+4	; 0x04
     c94:	8f 3f       	cpi	r24, 0xFF	; 255
     c96:	11 f4       	brne	.+4      	; 0xc9c <can_cmd+0x74>
     c98:	0c 94 3f 0f 	jmp	0x1e7e	; 0x1e7e <__stack+0xd7f>
    {
      cmd->status = MOB_PENDING; 
     c9c:	e9 85       	ldd	r30, Y+9	; 0x09
     c9e:	fa 85       	ldd	r31, Y+10	; 0x0a
     ca0:	80 e6       	ldi	r24, 0x60	; 96
     ca2:	82 87       	std	Z+10, r24	; 0x0a
      cmd->handle = mob_handle;
     ca4:	e9 85       	ldd	r30, Y+9	; 0x09
     ca6:	fa 85       	ldd	r31, Y+10	; 0x0a
     ca8:	8c 81       	ldd	r24, Y+4	; 0x04
     caa:	80 83       	st	Z, r24
      Can_set_mob(mob_handle);
     cac:	ed ee       	ldi	r30, 0xED	; 237
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	8c 81       	ldd	r24, Y+4	; 0x04
     cb2:	82 95       	swap	r24
     cb4:	80 7f       	andi	r24, 0xF0	; 240
     cb6:	80 83       	st	Z, r24
      Can_clear_mob();
     cb8:	8e ee       	ldi	r24, 0xEE	; 238
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	9a 83       	std	Y+2, r25	; 0x02
     cbe:	89 83       	std	Y+1, r24	; 0x01
     cc0:	08 c0       	rjmp	.+16     	; 0xcd2 <can_cmd+0xaa>
     cc2:	e9 81       	ldd	r30, Y+1	; 0x01
     cc4:	fa 81       	ldd	r31, Y+2	; 0x02
     cc6:	10 82       	st	Z, r1
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	9a 81       	ldd	r25, Y+2	; 0x02
     ccc:	01 96       	adiw	r24, 0x01	; 1
     cce:	9a 83       	std	Y+2, r25	; 0x02
     cd0:	89 83       	std	Y+1, r24	; 0x01
     cd2:	89 81       	ldd	r24, Y+1	; 0x01
     cd4:	9a 81       	ldd	r25, Y+2	; 0x02
     cd6:	88 3f       	cpi	r24, 0xF8	; 248
     cd8:	91 05       	cpc	r25, r1
     cda:	98 f3       	brcs	.-26     	; 0xcc2 <can_cmd+0x9a>
          
      switch (cmd->cmd)
     cdc:	e9 85       	ldd	r30, Y+9	; 0x09
     cde:	fa 85       	ldd	r31, Y+10	; 0x0a
     ce0:	81 81       	ldd	r24, Z+1	; 0x01
     ce2:	92 81       	ldd	r25, Z+2	; 0x02
     ce4:	9d 87       	std	Y+13, r25	; 0x0d
     ce6:	8c 87       	std	Y+12, r24	; 0x0c
     ce8:	8c 85       	ldd	r24, Y+12	; 0x0c
     cea:	9d 85       	ldd	r25, Y+13	; 0x0d
     cec:	86 30       	cpi	r24, 0x06	; 6
     cee:	91 05       	cpc	r25, r1
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <can_cmd+0xcc>
     cf2:	73 c3       	rjmp	.+1766   	; 0x13da <__stack+0x2db>
     cf4:	8c 85       	ldd	r24, Y+12	; 0x0c
     cf6:	9d 85       	ldd	r25, Y+13	; 0x0d
     cf8:	87 30       	cpi	r24, 0x07	; 7
     cfa:	91 05       	cpc	r25, r1
     cfc:	30 f5       	brcc	.+76     	; 0xd4a <can_cmd+0x122>
     cfe:	8c 85       	ldd	r24, Y+12	; 0x0c
     d00:	9d 85       	ldd	r25, Y+13	; 0x0d
     d02:	83 30       	cpi	r24, 0x03	; 3
     d04:	91 05       	cpc	r25, r1
     d06:	09 f4       	brne	.+2      	; 0xd0a <can_cmd+0xe2>
     d08:	d3 c1       	rjmp	.+934    	; 0x10b0 <can_cmd+0x488>
     d0a:	8c 85       	ldd	r24, Y+12	; 0x0c
     d0c:	9d 85       	ldd	r25, Y+13	; 0x0d
     d0e:	84 30       	cpi	r24, 0x04	; 4
     d10:	91 05       	cpc	r25, r1
     d12:	68 f4       	brcc	.+26     	; 0xd2e <can_cmd+0x106>
     d14:	8c 85       	ldd	r24, Y+12	; 0x0c
     d16:	9d 85       	ldd	r25, Y+13	; 0x0d
     d18:	81 30       	cpi	r24, 0x01	; 1
     d1a:	91 05       	cpc	r25, r1
     d1c:	e9 f1       	breq	.+122    	; 0xd98 <can_cmd+0x170>
     d1e:	8c 85       	ldd	r24, Y+12	; 0x0c
     d20:	9d 85       	ldd	r25, Y+13	; 0x0d
     d22:	82 30       	cpi	r24, 0x02	; 2
     d24:	91 05       	cpc	r25, r1
     d26:	09 f4       	brne	.+2      	; 0xd2a <can_cmd+0x102>
     d28:	02 c1       	rjmp	.+516    	; 0xf2e <can_cmd+0x306>
     d2a:	0c 94 3b 0f 	jmp	0x1e76	; 0x1e76 <__stack+0xd77>
     d2e:	8c 85       	ldd	r24, Y+12	; 0x0c
     d30:	9d 85       	ldd	r25, Y+13	; 0x0d
     d32:	84 30       	cpi	r24, 0x04	; 4
     d34:	91 05       	cpc	r25, r1
     d36:	09 f4       	brne	.+2      	; 0xd3a <can_cmd+0x112>
     d38:	64 c2       	rjmp	.+1224   	; 0x1202 <__stack+0x103>
     d3a:	8c 85       	ldd	r24, Y+12	; 0x0c
     d3c:	9d 85       	ldd	r25, Y+13	; 0x0d
     d3e:	85 30       	cpi	r24, 0x05	; 5
     d40:	91 05       	cpc	r25, r1
     d42:	09 f4       	brne	.+2      	; 0xd46 <can_cmd+0x11e>
     d44:	cf c2       	rjmp	.+1438   	; 0x12e4 <__stack+0x1e5>
     d46:	0c 94 3b 0f 	jmp	0x1e76	; 0x1e76 <__stack+0xd77>
     d4a:	8c 85       	ldd	r24, Y+12	; 0x0c
     d4c:	9d 85       	ldd	r25, Y+13	; 0x0d
     d4e:	89 30       	cpi	r24, 0x09	; 9
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <can_cmd+0x12e>
     d54:	c3 c5       	rjmp	.+2950   	; 0x18dc <__stack+0x7dd>
     d56:	8c 85       	ldd	r24, Y+12	; 0x0c
     d58:	9d 85       	ldd	r25, Y+13	; 0x0d
     d5a:	8a 30       	cpi	r24, 0x0A	; 10
     d5c:	91 05       	cpc	r25, r1
     d5e:	70 f4       	brcc	.+28     	; 0xd7c <can_cmd+0x154>
     d60:	8c 85       	ldd	r24, Y+12	; 0x0c
     d62:	9d 85       	ldd	r25, Y+13	; 0x0d
     d64:	87 30       	cpi	r24, 0x07	; 7
     d66:	91 05       	cpc	r25, r1
     d68:	09 f4       	brne	.+2      	; 0xd6c <can_cmd+0x144>
     d6a:	ba c3       	rjmp	.+1908   	; 0x14e0 <__stack+0x3e1>
     d6c:	8c 85       	ldd	r24, Y+12	; 0x0c
     d6e:	9d 85       	ldd	r25, Y+13	; 0x0d
     d70:	88 30       	cpi	r24, 0x08	; 8
     d72:	91 05       	cpc	r25, r1
     d74:	09 f4       	brne	.+2      	; 0xd78 <can_cmd+0x150>
     d76:	ae c4       	rjmp	.+2396   	; 0x16d4 <__stack+0x5d5>
     d78:	0c 94 3b 0f 	jmp	0x1e76	; 0x1e76 <__stack+0xd77>
     d7c:	8c 85       	ldd	r24, Y+12	; 0x0c
     d7e:	9d 85       	ldd	r25, Y+13	; 0x0d
     d80:	8a 30       	cpi	r24, 0x0A	; 10
     d82:	91 05       	cpc	r25, r1
     d84:	09 f4       	brne	.+2      	; 0xd88 <can_cmd+0x160>
     d86:	b6 c6       	rjmp	.+3436   	; 0x1af4 <__stack+0x9f5>
     d88:	8c 85       	ldd	r24, Y+12	; 0x0c
     d8a:	9d 85       	ldd	r25, Y+13	; 0x0d
     d8c:	8b 30       	cpi	r24, 0x0B	; 11
     d8e:	91 05       	cpc	r25, r1
     d90:	09 f4       	brne	.+2      	; 0xd94 <can_cmd+0x16c>
     d92:	4c c7       	rjmp	.+3736   	; 0x1c2c <__stack+0xb2d>
     d94:	0c 94 3b 0f 	jmp	0x1e76	; 0x1e76 <__stack+0xd77>
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     d98:	e9 85       	ldd	r30, Y+9	; 0x09
     d9a:	fa 85       	ldd	r31, Y+10	; 0x0a
     d9c:	84 85       	ldd	r24, Z+12	; 0x0c
     d9e:	88 23       	and	r24, r24
     da0:	09 f4       	brne	.+2      	; 0xda4 <can_cmd+0x17c>
     da2:	57 c0       	rjmp	.+174    	; 0xe52 <can_cmd+0x22a>
     da4:	a3 ef       	ldi	r26, 0xF3	; 243
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	89 85       	ldd	r24, Y+9	; 0x09
     daa:	9a 85       	ldd	r25, Y+10	; 0x0a
     dac:	03 96       	adiw	r24, 0x03	; 3
     dae:	fc 01       	movw	r30, r24
     db0:	33 96       	adiw	r30, 0x03	; 3
     db2:	80 81       	ld	r24, Z
     db4:	28 2f       	mov	r18, r24
     db6:	22 0f       	add	r18, r18
     db8:	22 0f       	add	r18, r18
     dba:	22 0f       	add	r18, r18
     dbc:	89 85       	ldd	r24, Y+9	; 0x09
     dbe:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc0:	03 96       	adiw	r24, 0x03	; 3
     dc2:	fc 01       	movw	r30, r24
     dc4:	32 96       	adiw	r30, 0x02	; 2
     dc6:	80 81       	ld	r24, Z
     dc8:	82 95       	swap	r24
     dca:	86 95       	lsr	r24
     dcc:	87 70       	andi	r24, 0x07	; 7
     dce:	82 0f       	add	r24, r18
     dd0:	8c 93       	st	X, r24
     dd2:	a2 ef       	ldi	r26, 0xF2	; 242
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	89 85       	ldd	r24, Y+9	; 0x09
     dd8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dda:	03 96       	adiw	r24, 0x03	; 3
     ddc:	fc 01       	movw	r30, r24
     dde:	32 96       	adiw	r30, 0x02	; 2
     de0:	80 81       	ld	r24, Z
     de2:	28 2f       	mov	r18, r24
     de4:	22 0f       	add	r18, r18
     de6:	22 0f       	add	r18, r18
     de8:	22 0f       	add	r18, r18
     dea:	89 85       	ldd	r24, Y+9	; 0x09
     dec:	9a 85       	ldd	r25, Y+10	; 0x0a
     dee:	03 96       	adiw	r24, 0x03	; 3
     df0:	fc 01       	movw	r30, r24
     df2:	31 96       	adiw	r30, 0x01	; 1
     df4:	80 81       	ld	r24, Z
     df6:	82 95       	swap	r24
     df8:	86 95       	lsr	r24
     dfa:	87 70       	andi	r24, 0x07	; 7
     dfc:	82 0f       	add	r24, r18
     dfe:	8c 93       	st	X, r24
     e00:	a1 ef       	ldi	r26, 0xF1	; 241
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	89 85       	ldd	r24, Y+9	; 0x09
     e06:	9a 85       	ldd	r25, Y+10	; 0x0a
     e08:	03 96       	adiw	r24, 0x03	; 3
     e0a:	fc 01       	movw	r30, r24
     e0c:	31 96       	adiw	r30, 0x01	; 1
     e0e:	80 81       	ld	r24, Z
     e10:	28 2f       	mov	r18, r24
     e12:	22 0f       	add	r18, r18
     e14:	22 0f       	add	r18, r18
     e16:	22 0f       	add	r18, r18
     e18:	89 85       	ldd	r24, Y+9	; 0x09
     e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e1c:	03 96       	adiw	r24, 0x03	; 3
     e1e:	fc 01       	movw	r30, r24
     e20:	80 81       	ld	r24, Z
     e22:	82 95       	swap	r24
     e24:	86 95       	lsr	r24
     e26:	87 70       	andi	r24, 0x07	; 7
     e28:	82 0f       	add	r24, r18
     e2a:	8c 93       	st	X, r24
     e2c:	a0 ef       	ldi	r26, 0xF0	; 240
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	89 85       	ldd	r24, Y+9	; 0x09
     e32:	9a 85       	ldd	r25, Y+10	; 0x0a
     e34:	03 96       	adiw	r24, 0x03	; 3
     e36:	fc 01       	movw	r30, r24
     e38:	80 81       	ld	r24, Z
     e3a:	88 0f       	add	r24, r24
     e3c:	88 0f       	add	r24, r24
     e3e:	88 0f       	add	r24, r24
     e40:	8c 93       	st	X, r24
     e42:	af ee       	ldi	r26, 0xEF	; 239
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	ef ee       	ldi	r30, 0xEF	; 239
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	80 61       	ori	r24, 0x10	; 16
     e4e:	8c 93       	st	X, r24
     e50:	28 c0       	rjmp	.+80     	; 0xea2 <can_cmd+0x27a>
          else              { Can_set_std_id(cmd->id.std);}
     e52:	a3 ef       	ldi	r26, 0xF3	; 243
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	89 85       	ldd	r24, Y+9	; 0x09
     e58:	9a 85       	ldd	r25, Y+10	; 0x0a
     e5a:	03 96       	adiw	r24, 0x03	; 3
     e5c:	fc 01       	movw	r30, r24
     e5e:	31 96       	adiw	r30, 0x01	; 1
     e60:	80 81       	ld	r24, Z
     e62:	28 2f       	mov	r18, r24
     e64:	22 95       	swap	r18
     e66:	22 0f       	add	r18, r18
     e68:	20 7e       	andi	r18, 0xE0	; 224
     e6a:	89 85       	ldd	r24, Y+9	; 0x09
     e6c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e6e:	03 96       	adiw	r24, 0x03	; 3
     e70:	fc 01       	movw	r30, r24
     e72:	80 81       	ld	r24, Z
     e74:	86 95       	lsr	r24
     e76:	86 95       	lsr	r24
     e78:	86 95       	lsr	r24
     e7a:	82 0f       	add	r24, r18
     e7c:	8c 93       	st	X, r24
     e7e:	a2 ef       	ldi	r26, 0xF2	; 242
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	89 85       	ldd	r24, Y+9	; 0x09
     e84:	9a 85       	ldd	r25, Y+10	; 0x0a
     e86:	03 96       	adiw	r24, 0x03	; 3
     e88:	fc 01       	movw	r30, r24
     e8a:	80 81       	ld	r24, Z
     e8c:	82 95       	swap	r24
     e8e:	88 0f       	add	r24, r24
     e90:	80 7e       	andi	r24, 0xE0	; 224
     e92:	8c 93       	st	X, r24
     e94:	af ee       	ldi	r26, 0xEF	; 239
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	ef ee       	ldi	r30, 0xEF	; 239
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	8f 7e       	andi	r24, 0xEF	; 239
     ea0:	8c 93       	st	X, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     ea2:	1b 82       	std	Y+3, r1	; 0x03
     ea4:	11 c0       	rjmp	.+34     	; 0xec8 <can_cmd+0x2a0>
     ea6:	aa ef       	ldi	r26, 0xFA	; 250
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e9 85       	ldd	r30, Y+9	; 0x09
     eac:	fa 85       	ldd	r31, Y+10	; 0x0a
     eae:	20 85       	ldd	r18, Z+8	; 0x08
     eb0:	31 85       	ldd	r19, Z+9	; 0x09
     eb2:	8b 81       	ldd	r24, Y+3	; 0x03
     eb4:	88 2f       	mov	r24, r24
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	f9 01       	movw	r30, r18
     eba:	e8 0f       	add	r30, r24
     ebc:	f9 1f       	adc	r31, r25
     ebe:	80 81       	ld	r24, Z
     ec0:	8c 93       	st	X, r24
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	8f 5f       	subi	r24, 0xFF	; 255
     ec6:	8b 83       	std	Y+3, r24	; 0x03
     ec8:	e9 85       	ldd	r30, Y+9	; 0x09
     eca:	fa 85       	ldd	r31, Y+10	; 0x0a
     ecc:	97 81       	ldd	r25, Z+7	; 0x07
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	89 17       	cp	r24, r25
     ed2:	48 f3       	brcs	.-46     	; 0xea6 <can_cmd+0x27e>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     ed4:	e9 85       	ldd	r30, Y+9	; 0x09
     ed6:	fa 85       	ldd	r31, Y+10	; 0x0a
     ed8:	83 85       	ldd	r24, Z+11	; 0x0b
     eda:	88 23       	and	r24, r24
     edc:	41 f0       	breq	.+16     	; 0xeee <can_cmd+0x2c6>
     ede:	a0 ef       	ldi	r26, 0xF0	; 240
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e0 ef       	ldi	r30, 0xF0	; 240
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	84 60       	ori	r24, 0x04	; 4
     eea:	8c 93       	st	X, r24
     eec:	07 c0       	rjmp	.+14     	; 0xefc <can_cmd+0x2d4>
            else Can_clear_rtr();    
     eee:	a0 ef       	ldi	r26, 0xF0	; 240
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e0 ef       	ldi	r30, 0xF0	; 240
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	8b 7f       	andi	r24, 0xFB	; 251
     efa:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
     efc:	af ee       	ldi	r26, 0xEF	; 239
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	ef ee       	ldi	r30, 0xEF	; 239
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	90 81       	ld	r25, Z
     f06:	e9 85       	ldd	r30, Y+9	; 0x09
     f08:	fa 85       	ldd	r31, Y+10	; 0x0a
     f0a:	87 81       	ldd	r24, Z+7	; 0x07
     f0c:	89 2b       	or	r24, r25
     f0e:	8c 93       	st	X, r24
          Can_config_tx();
     f10:	af ee       	ldi	r26, 0xEF	; 239
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	ef ee       	ldi	r30, 0xEF	; 239
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	8f 73       	andi	r24, 0x3F	; 63
     f1c:	8c 93       	st	X, r24
     f1e:	af ee       	ldi	r26, 0xEF	; 239
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	ef ee       	ldi	r30, 0xEF	; 239
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	80 64       	ori	r24, 0x40	; 64
     f2a:	8c 93       	st	X, r24
     f2c:	af c7       	rjmp	.+3934   	; 0x1e8c <__stack+0xd8d>
          break;
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     f2e:	e9 85       	ldd	r30, Y+9	; 0x09
     f30:	fa 85       	ldd	r31, Y+10	; 0x0a
     f32:	84 85       	ldd	r24, Z+12	; 0x0c
     f34:	88 23       	and	r24, r24
     f36:	09 f4       	brne	.+2      	; 0xf3a <can_cmd+0x312>
     f38:	57 c0       	rjmp	.+174    	; 0xfe8 <can_cmd+0x3c0>
     f3a:	a3 ef       	ldi	r26, 0xF3	; 243
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	89 85       	ldd	r24, Y+9	; 0x09
     f40:	9a 85       	ldd	r25, Y+10	; 0x0a
     f42:	03 96       	adiw	r24, 0x03	; 3
     f44:	fc 01       	movw	r30, r24
     f46:	33 96       	adiw	r30, 0x03	; 3
     f48:	80 81       	ld	r24, Z
     f4a:	28 2f       	mov	r18, r24
     f4c:	22 0f       	add	r18, r18
     f4e:	22 0f       	add	r18, r18
     f50:	22 0f       	add	r18, r18
     f52:	89 85       	ldd	r24, Y+9	; 0x09
     f54:	9a 85       	ldd	r25, Y+10	; 0x0a
     f56:	03 96       	adiw	r24, 0x03	; 3
     f58:	fc 01       	movw	r30, r24
     f5a:	32 96       	adiw	r30, 0x02	; 2
     f5c:	80 81       	ld	r24, Z
     f5e:	82 95       	swap	r24
     f60:	86 95       	lsr	r24
     f62:	87 70       	andi	r24, 0x07	; 7
     f64:	82 0f       	add	r24, r18
     f66:	8c 93       	st	X, r24
     f68:	a2 ef       	ldi	r26, 0xF2	; 242
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	89 85       	ldd	r24, Y+9	; 0x09
     f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f70:	03 96       	adiw	r24, 0x03	; 3
     f72:	fc 01       	movw	r30, r24
     f74:	32 96       	adiw	r30, 0x02	; 2
     f76:	80 81       	ld	r24, Z
     f78:	28 2f       	mov	r18, r24
     f7a:	22 0f       	add	r18, r18
     f7c:	22 0f       	add	r18, r18
     f7e:	22 0f       	add	r18, r18
     f80:	89 85       	ldd	r24, Y+9	; 0x09
     f82:	9a 85       	ldd	r25, Y+10	; 0x0a
     f84:	03 96       	adiw	r24, 0x03	; 3
     f86:	fc 01       	movw	r30, r24
     f88:	31 96       	adiw	r30, 0x01	; 1
     f8a:	80 81       	ld	r24, Z
     f8c:	82 95       	swap	r24
     f8e:	86 95       	lsr	r24
     f90:	87 70       	andi	r24, 0x07	; 7
     f92:	82 0f       	add	r24, r18
     f94:	8c 93       	st	X, r24
     f96:	a1 ef       	ldi	r26, 0xF1	; 241
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	89 85       	ldd	r24, Y+9	; 0x09
     f9c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f9e:	03 96       	adiw	r24, 0x03	; 3
     fa0:	fc 01       	movw	r30, r24
     fa2:	31 96       	adiw	r30, 0x01	; 1
     fa4:	80 81       	ld	r24, Z
     fa6:	28 2f       	mov	r18, r24
     fa8:	22 0f       	add	r18, r18
     faa:	22 0f       	add	r18, r18
     fac:	22 0f       	add	r18, r18
     fae:	89 85       	ldd	r24, Y+9	; 0x09
     fb0:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb2:	03 96       	adiw	r24, 0x03	; 3
     fb4:	fc 01       	movw	r30, r24
     fb6:	80 81       	ld	r24, Z
     fb8:	82 95       	swap	r24
     fba:	86 95       	lsr	r24
     fbc:	87 70       	andi	r24, 0x07	; 7
     fbe:	82 0f       	add	r24, r18
     fc0:	8c 93       	st	X, r24
     fc2:	a0 ef       	ldi	r26, 0xF0	; 240
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	89 85       	ldd	r24, Y+9	; 0x09
     fc8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fca:	03 96       	adiw	r24, 0x03	; 3
     fcc:	fc 01       	movw	r30, r24
     fce:	80 81       	ld	r24, Z
     fd0:	88 0f       	add	r24, r24
     fd2:	88 0f       	add	r24, r24
     fd4:	88 0f       	add	r24, r24
     fd6:	8c 93       	st	X, r24
     fd8:	af ee       	ldi	r26, 0xEF	; 239
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	ef ee       	ldi	r30, 0xEF	; 239
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	80 61       	ori	r24, 0x10	; 16
     fe4:	8c 93       	st	X, r24
     fe6:	28 c0       	rjmp	.+80     	; 0x1038 <can_cmd+0x410>
          else              { Can_set_std_id(cmd->id.std);}
     fe8:	a3 ef       	ldi	r26, 0xF3	; 243
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	89 85       	ldd	r24, Y+9	; 0x09
     fee:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff0:	03 96       	adiw	r24, 0x03	; 3
     ff2:	fc 01       	movw	r30, r24
     ff4:	31 96       	adiw	r30, 0x01	; 1
     ff6:	80 81       	ld	r24, Z
     ff8:	28 2f       	mov	r18, r24
     ffa:	22 95       	swap	r18
     ffc:	22 0f       	add	r18, r18
     ffe:	20 7e       	andi	r18, 0xE0	; 224
    1000:	89 85       	ldd	r24, Y+9	; 0x09
    1002:	9a 85       	ldd	r25, Y+10	; 0x0a
    1004:	03 96       	adiw	r24, 0x03	; 3
    1006:	fc 01       	movw	r30, r24
    1008:	80 81       	ld	r24, Z
    100a:	86 95       	lsr	r24
    100c:	86 95       	lsr	r24
    100e:	86 95       	lsr	r24
    1010:	82 0f       	add	r24, r18
    1012:	8c 93       	st	X, r24
    1014:	a2 ef       	ldi	r26, 0xF2	; 242
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	89 85       	ldd	r24, Y+9	; 0x09
    101a:	9a 85       	ldd	r25, Y+10	; 0x0a
    101c:	03 96       	adiw	r24, 0x03	; 3
    101e:	fc 01       	movw	r30, r24
    1020:	80 81       	ld	r24, Z
    1022:	82 95       	swap	r24
    1024:	88 0f       	add	r24, r24
    1026:	80 7e       	andi	r24, 0xE0	; 224
    1028:	8c 93       	st	X, r24
    102a:	af ee       	ldi	r26, 0xEF	; 239
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	ef ee       	ldi	r30, 0xEF	; 239
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	8f 7e       	andi	r24, 0xEF	; 239
    1036:	8c 93       	st	X, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    1038:	1b 82       	std	Y+3, r1	; 0x03
    103a:	11 c0       	rjmp	.+34     	; 0x105e <can_cmd+0x436>
    103c:	aa ef       	ldi	r26, 0xFA	; 250
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e9 85       	ldd	r30, Y+9	; 0x09
    1042:	fa 85       	ldd	r31, Y+10	; 0x0a
    1044:	20 85       	ldd	r18, Z+8	; 0x08
    1046:	31 85       	ldd	r19, Z+9	; 0x09
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	88 2f       	mov	r24, r24
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	f9 01       	movw	r30, r18
    1050:	e8 0f       	add	r30, r24
    1052:	f9 1f       	adc	r31, r25
    1054:	80 81       	ld	r24, Z
    1056:	8c 93       	st	X, r24
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	8f 5f       	subi	r24, 0xFF	; 255
    105c:	8b 83       	std	Y+3, r24	; 0x03
    105e:	e9 85       	ldd	r30, Y+9	; 0x09
    1060:	fa 85       	ldd	r31, Y+10	; 0x0a
    1062:	97 81       	ldd	r25, Z+7	; 0x07
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	89 17       	cp	r24, r25
    1068:	48 f3       	brcs	.-46     	; 0x103c <can_cmd+0x414>
          cmd->ctrl.rtr=0; Can_clear_rtr();
    106a:	e9 85       	ldd	r30, Y+9	; 0x09
    106c:	fa 85       	ldd	r31, Y+10	; 0x0a
    106e:	13 86       	std	Z+11, r1	; 0x0b
    1070:	a0 ef       	ldi	r26, 0xF0	; 240
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	e0 ef       	ldi	r30, 0xF0	; 240
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	8b 7f       	andi	r24, 0xFB	; 251
    107c:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    107e:	af ee       	ldi	r26, 0xEF	; 239
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	ef ee       	ldi	r30, 0xEF	; 239
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	90 81       	ld	r25, Z
    1088:	e9 85       	ldd	r30, Y+9	; 0x09
    108a:	fa 85       	ldd	r31, Y+10	; 0x0a
    108c:	87 81       	ldd	r24, Z+7	; 0x07
    108e:	89 2b       	or	r24, r25
    1090:	8c 93       	st	X, r24
          Can_config_tx();
    1092:	af ee       	ldi	r26, 0xEF	; 239
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	ef ee       	ldi	r30, 0xEF	; 239
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	8f 73       	andi	r24, 0x3F	; 63
    109e:	8c 93       	st	X, r24
    10a0:	af ee       	ldi	r26, 0xEF	; 239
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	ef ee       	ldi	r30, 0xEF	; 239
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	80 64       	ori	r24, 0x40	; 64
    10ac:	8c 93       	st	X, r24
    10ae:	ee c6       	rjmp	.+3548   	; 0x1e8c <__stack+0xd8d>
          break;
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    10b0:	e9 85       	ldd	r30, Y+9	; 0x09
    10b2:	fa 85       	ldd	r31, Y+10	; 0x0a
    10b4:	84 85       	ldd	r24, Z+12	; 0x0c
    10b6:	88 23       	and	r24, r24
    10b8:	09 f4       	brne	.+2      	; 0x10bc <can_cmd+0x494>
    10ba:	57 c0       	rjmp	.+174    	; 0x116a <__stack+0x6b>
    10bc:	a3 ef       	ldi	r26, 0xF3	; 243
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	89 85       	ldd	r24, Y+9	; 0x09
    10c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c4:	03 96       	adiw	r24, 0x03	; 3
    10c6:	fc 01       	movw	r30, r24
    10c8:	33 96       	adiw	r30, 0x03	; 3
    10ca:	80 81       	ld	r24, Z
    10cc:	28 2f       	mov	r18, r24
    10ce:	22 0f       	add	r18, r18
    10d0:	22 0f       	add	r18, r18
    10d2:	22 0f       	add	r18, r18
    10d4:	89 85       	ldd	r24, Y+9	; 0x09
    10d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d8:	03 96       	adiw	r24, 0x03	; 3
    10da:	fc 01       	movw	r30, r24
    10dc:	32 96       	adiw	r30, 0x02	; 2
    10de:	80 81       	ld	r24, Z
    10e0:	82 95       	swap	r24
    10e2:	86 95       	lsr	r24
    10e4:	87 70       	andi	r24, 0x07	; 7
    10e6:	82 0f       	add	r24, r18
    10e8:	8c 93       	st	X, r24
    10ea:	a2 ef       	ldi	r26, 0xF2	; 242
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	89 85       	ldd	r24, Y+9	; 0x09
    10f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f2:	03 96       	adiw	r24, 0x03	; 3
    10f4:	fc 01       	movw	r30, r24
    10f6:	32 96       	adiw	r30, 0x02	; 2
    10f8:	80 81       	ld	r24, Z
    10fa:	28 2f       	mov	r18, r24
    10fc:	22 0f       	add	r18, r18
    10fe:	22 0f       	add	r18, r18
    1100:	22 0f       	add	r18, r18
    1102:	89 85       	ldd	r24, Y+9	; 0x09
    1104:	9a 85       	ldd	r25, Y+10	; 0x0a
    1106:	03 96       	adiw	r24, 0x03	; 3
    1108:	fc 01       	movw	r30, r24
    110a:	31 96       	adiw	r30, 0x01	; 1
    110c:	80 81       	ld	r24, Z
    110e:	82 95       	swap	r24
    1110:	86 95       	lsr	r24
    1112:	87 70       	andi	r24, 0x07	; 7
    1114:	82 0f       	add	r24, r18
    1116:	8c 93       	st	X, r24
    1118:	a1 ef       	ldi	r26, 0xF1	; 241
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	89 85       	ldd	r24, Y+9	; 0x09
    111e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1120:	03 96       	adiw	r24, 0x03	; 3
    1122:	fc 01       	movw	r30, r24
    1124:	31 96       	adiw	r30, 0x01	; 1
    1126:	80 81       	ld	r24, Z
    1128:	28 2f       	mov	r18, r24
    112a:	22 0f       	add	r18, r18
    112c:	22 0f       	add	r18, r18
    112e:	22 0f       	add	r18, r18
    1130:	89 85       	ldd	r24, Y+9	; 0x09
    1132:	9a 85       	ldd	r25, Y+10	; 0x0a
    1134:	03 96       	adiw	r24, 0x03	; 3
    1136:	fc 01       	movw	r30, r24
    1138:	80 81       	ld	r24, Z
    113a:	82 95       	swap	r24
    113c:	86 95       	lsr	r24
    113e:	87 70       	andi	r24, 0x07	; 7
    1140:	82 0f       	add	r24, r18
    1142:	8c 93       	st	X, r24
    1144:	a0 ef       	ldi	r26, 0xF0	; 240
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	89 85       	ldd	r24, Y+9	; 0x09
    114a:	9a 85       	ldd	r25, Y+10	; 0x0a
    114c:	03 96       	adiw	r24, 0x03	; 3
    114e:	fc 01       	movw	r30, r24
    1150:	80 81       	ld	r24, Z
    1152:	88 0f       	add	r24, r24
    1154:	88 0f       	add	r24, r24
    1156:	88 0f       	add	r24, r24
    1158:	8c 93       	st	X, r24
    115a:	af ee       	ldi	r26, 0xEF	; 239
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	ef ee       	ldi	r30, 0xEF	; 239
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	80 61       	ori	r24, 0x10	; 16
    1166:	8c 93       	st	X, r24
    1168:	28 c0       	rjmp	.+80     	; 0x11ba <__stack+0xbb>
          else              { Can_set_std_id(cmd->id.std);}
    116a:	a3 ef       	ldi	r26, 0xF3	; 243
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	89 85       	ldd	r24, Y+9	; 0x09
    1170:	9a 85       	ldd	r25, Y+10	; 0x0a
    1172:	03 96       	adiw	r24, 0x03	; 3
    1174:	fc 01       	movw	r30, r24
    1176:	31 96       	adiw	r30, 0x01	; 1
    1178:	80 81       	ld	r24, Z
    117a:	28 2f       	mov	r18, r24
    117c:	22 95       	swap	r18
    117e:	22 0f       	add	r18, r18
    1180:	20 7e       	andi	r18, 0xE0	; 224
    1182:	89 85       	ldd	r24, Y+9	; 0x09
    1184:	9a 85       	ldd	r25, Y+10	; 0x0a
    1186:	03 96       	adiw	r24, 0x03	; 3
    1188:	fc 01       	movw	r30, r24
    118a:	80 81       	ld	r24, Z
    118c:	86 95       	lsr	r24
    118e:	86 95       	lsr	r24
    1190:	86 95       	lsr	r24
    1192:	82 0f       	add	r24, r18
    1194:	8c 93       	st	X, r24
    1196:	a2 ef       	ldi	r26, 0xF2	; 242
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	89 85       	ldd	r24, Y+9	; 0x09
    119c:	9a 85       	ldd	r25, Y+10	; 0x0a
    119e:	03 96       	adiw	r24, 0x03	; 3
    11a0:	fc 01       	movw	r30, r24
    11a2:	80 81       	ld	r24, Z
    11a4:	82 95       	swap	r24
    11a6:	88 0f       	add	r24, r24
    11a8:	80 7e       	andi	r24, 0xE0	; 224
    11aa:	8c 93       	st	X, r24
    11ac:	af ee       	ldi	r26, 0xEF	; 239
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	ef ee       	ldi	r30, 0xEF	; 239
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	8f 7e       	andi	r24, 0xEF	; 239
    11b8:	8c 93       	st	X, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
    11ba:	e9 85       	ldd	r30, Y+9	; 0x09
    11bc:	fa 85       	ldd	r31, Y+10	; 0x0a
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	83 87       	std	Z+11, r24	; 0x0b
    11c2:	a0 ef       	ldi	r26, 0xF0	; 240
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e0 ef       	ldi	r30, 0xF0	; 240
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	84 60       	ori	r24, 0x04	; 4
    11ce:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    11d0:	af ee       	ldi	r26, 0xEF	; 239
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	ef ee       	ldi	r30, 0xEF	; 239
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	90 81       	ld	r25, Z
    11da:	e9 85       	ldd	r30, Y+9	; 0x09
    11dc:	fa 85       	ldd	r31, Y+10	; 0x0a
    11de:	87 81       	ldd	r24, Z+7	; 0x07
    11e0:	89 2b       	or	r24, r25
    11e2:	8c 93       	st	X, r24
          Can_config_tx();
    11e4:	af ee       	ldi	r26, 0xEF	; 239
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	ef ee       	ldi	r30, 0xEF	; 239
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	8f 73       	andi	r24, 0x3F	; 63
    11f0:	8c 93       	st	X, r24
    11f2:	af ee       	ldi	r26, 0xEF	; 239
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	ef ee       	ldi	r30, 0xEF	; 239
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	80 64       	ori	r24, 0x40	; 64
    11fe:	8c 93       	st	X, r24
    1200:	45 c6       	rjmp	.+3210   	; 0x1e8c <__stack+0xd8d>
          break;
        //------------      
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    1202:	1d 82       	std	Y+5, r1	; 0x05
    1204:	1e 82       	std	Y+6, r1	; 0x06
    1206:	1f 82       	std	Y+7, r1	; 0x07
    1208:	18 86       	std	Y+8, r1	; 0x08
    120a:	a7 ef       	ldi	r26, 0xF7	; 247
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	ce 01       	movw	r24, r28
    1210:	05 96       	adiw	r24, 0x05	; 5
    1212:	fc 01       	movw	r30, r24
    1214:	33 96       	adiw	r30, 0x03	; 3
    1216:	80 81       	ld	r24, Z
    1218:	28 2f       	mov	r18, r24
    121a:	22 0f       	add	r18, r18
    121c:	22 0f       	add	r18, r18
    121e:	22 0f       	add	r18, r18
    1220:	ce 01       	movw	r24, r28
    1222:	05 96       	adiw	r24, 0x05	; 5
    1224:	fc 01       	movw	r30, r24
    1226:	32 96       	adiw	r30, 0x02	; 2
    1228:	80 81       	ld	r24, Z
    122a:	82 95       	swap	r24
    122c:	86 95       	lsr	r24
    122e:	87 70       	andi	r24, 0x07	; 7
    1230:	82 0f       	add	r24, r18
    1232:	8c 93       	st	X, r24
    1234:	a6 ef       	ldi	r26, 0xF6	; 246
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	ce 01       	movw	r24, r28
    123a:	05 96       	adiw	r24, 0x05	; 5
    123c:	fc 01       	movw	r30, r24
    123e:	32 96       	adiw	r30, 0x02	; 2
    1240:	80 81       	ld	r24, Z
    1242:	28 2f       	mov	r18, r24
    1244:	22 0f       	add	r18, r18
    1246:	22 0f       	add	r18, r18
    1248:	22 0f       	add	r18, r18
    124a:	ce 01       	movw	r24, r28
    124c:	05 96       	adiw	r24, 0x05	; 5
    124e:	fc 01       	movw	r30, r24
    1250:	31 96       	adiw	r30, 0x01	; 1
    1252:	80 81       	ld	r24, Z
    1254:	82 95       	swap	r24
    1256:	86 95       	lsr	r24
    1258:	87 70       	andi	r24, 0x07	; 7
    125a:	82 0f       	add	r24, r18
    125c:	8c 93       	st	X, r24
    125e:	a5 ef       	ldi	r26, 0xF5	; 245
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	ce 01       	movw	r24, r28
    1264:	05 96       	adiw	r24, 0x05	; 5
    1266:	fc 01       	movw	r30, r24
    1268:	31 96       	adiw	r30, 0x01	; 1
    126a:	80 81       	ld	r24, Z
    126c:	98 2f       	mov	r25, r24
    126e:	99 0f       	add	r25, r25
    1270:	99 0f       	add	r25, r25
    1272:	99 0f       	add	r25, r25
    1274:	fe 01       	movw	r30, r28
    1276:	35 96       	adiw	r30, 0x05	; 5
    1278:	80 81       	ld	r24, Z
    127a:	82 95       	swap	r24
    127c:	86 95       	lsr	r24
    127e:	87 70       	andi	r24, 0x07	; 7
    1280:	89 0f       	add	r24, r25
    1282:	8c 93       	st	X, r24
    1284:	a4 ef       	ldi	r26, 0xF4	; 244
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	fe 01       	movw	r30, r28
    128a:	35 96       	adiw	r30, 0x05	; 5
    128c:	80 81       	ld	r24, Z
    128e:	88 0f       	add	r24, r24
    1290:	88 0f       	add	r24, r24
    1292:	88 0f       	add	r24, r24
    1294:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    1296:	af ee       	ldi	r26, 0xEF	; 239
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	ef ee       	ldi	r30, 0xEF	; 239
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	90 81       	ld	r25, Z
    12a0:	e9 85       	ldd	r30, Y+9	; 0x09
    12a2:	fa 85       	ldd	r31, Y+10	; 0x0a
    12a4:	87 81       	ldd	r24, Z+7	; 0x07
    12a6:	89 2b       	or	r24, r25
    12a8:	8c 93       	st	X, r24
          Can_clear_rtrmsk();
    12aa:	a4 ef       	ldi	r26, 0xF4	; 244
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	e4 ef       	ldi	r30, 0xF4	; 244
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	8b 7f       	andi	r24, 0xFB	; 251
    12b6:	8c 93       	st	X, r24
          Can_clear_idemsk();
    12b8:	a4 ef       	ldi	r26, 0xF4	; 244
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	e4 ef       	ldi	r30, 0xF4	; 244
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	8e 7f       	andi	r24, 0xFE	; 254
    12c4:	8c 93       	st	X, r24
          Can_config_rx();       
    12c6:	af ee       	ldi	r26, 0xEF	; 239
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	ef ee       	ldi	r30, 0xEF	; 239
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	8f 73       	andi	r24, 0x3F	; 63
    12d2:	8c 93       	st	X, r24
    12d4:	af ee       	ldi	r26, 0xEF	; 239
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	ef ee       	ldi	r30, 0xEF	; 239
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	80 68       	ori	r24, 0x80	; 128
    12e0:	8c 93       	st	X, r24
    12e2:	d4 c5       	rjmp	.+2984   	; 0x1e8c <__stack+0xd8d>
          break;
        //------------      
        case CMD_RX_DATA:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    12e4:	1d 82       	std	Y+5, r1	; 0x05
    12e6:	1e 82       	std	Y+6, r1	; 0x06
    12e8:	1f 82       	std	Y+7, r1	; 0x07
    12ea:	18 86       	std	Y+8, r1	; 0x08
    12ec:	a7 ef       	ldi	r26, 0xF7	; 247
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	ce 01       	movw	r24, r28
    12f2:	05 96       	adiw	r24, 0x05	; 5
    12f4:	fc 01       	movw	r30, r24
    12f6:	33 96       	adiw	r30, 0x03	; 3
    12f8:	80 81       	ld	r24, Z
    12fa:	28 2f       	mov	r18, r24
    12fc:	22 0f       	add	r18, r18
    12fe:	22 0f       	add	r18, r18
    1300:	22 0f       	add	r18, r18
    1302:	ce 01       	movw	r24, r28
    1304:	05 96       	adiw	r24, 0x05	; 5
    1306:	fc 01       	movw	r30, r24
    1308:	32 96       	adiw	r30, 0x02	; 2
    130a:	80 81       	ld	r24, Z
    130c:	82 95       	swap	r24
    130e:	86 95       	lsr	r24
    1310:	87 70       	andi	r24, 0x07	; 7
    1312:	82 0f       	add	r24, r18
    1314:	8c 93       	st	X, r24
    1316:	a6 ef       	ldi	r26, 0xF6	; 246
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	ce 01       	movw	r24, r28
    131c:	05 96       	adiw	r24, 0x05	; 5
    131e:	fc 01       	movw	r30, r24
    1320:	32 96       	adiw	r30, 0x02	; 2
    1322:	80 81       	ld	r24, Z
    1324:	28 2f       	mov	r18, r24
    1326:	22 0f       	add	r18, r18
    1328:	22 0f       	add	r18, r18
    132a:	22 0f       	add	r18, r18
    132c:	ce 01       	movw	r24, r28
    132e:	05 96       	adiw	r24, 0x05	; 5
    1330:	fc 01       	movw	r30, r24
    1332:	31 96       	adiw	r30, 0x01	; 1
    1334:	80 81       	ld	r24, Z
    1336:	82 95       	swap	r24
    1338:	86 95       	lsr	r24
    133a:	87 70       	andi	r24, 0x07	; 7
    133c:	82 0f       	add	r24, r18
    133e:	8c 93       	st	X, r24
    1340:	a5 ef       	ldi	r26, 0xF5	; 245
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	ce 01       	movw	r24, r28
    1346:	05 96       	adiw	r24, 0x05	; 5
    1348:	fc 01       	movw	r30, r24
    134a:	31 96       	adiw	r30, 0x01	; 1
    134c:	80 81       	ld	r24, Z
    134e:	98 2f       	mov	r25, r24
    1350:	99 0f       	add	r25, r25
    1352:	99 0f       	add	r25, r25
    1354:	99 0f       	add	r25, r25
    1356:	fe 01       	movw	r30, r28
    1358:	35 96       	adiw	r30, 0x05	; 5
    135a:	80 81       	ld	r24, Z
    135c:	82 95       	swap	r24
    135e:	86 95       	lsr	r24
    1360:	87 70       	andi	r24, 0x07	; 7
    1362:	89 0f       	add	r24, r25
    1364:	8c 93       	st	X, r24
    1366:	a4 ef       	ldi	r26, 0xF4	; 244
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	fe 01       	movw	r30, r28
    136c:	35 96       	adiw	r30, 0x05	; 5
    136e:	80 81       	ld	r24, Z
    1370:	88 0f       	add	r24, r24
    1372:	88 0f       	add	r24, r24
    1374:	88 0f       	add	r24, r24
    1376:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    1378:	af ee       	ldi	r26, 0xEF	; 239
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	ef ee       	ldi	r30, 0xEF	; 239
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	90 81       	ld	r25, Z
    1382:	e9 85       	ldd	r30, Y+9	; 0x09
    1384:	fa 85       	ldd	r31, Y+10	; 0x0a
    1386:	87 81       	ldd	r24, Z+7	; 0x07
    1388:	89 2b       	or	r24, r25
    138a:	8c 93       	st	X, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    138c:	e9 85       	ldd	r30, Y+9	; 0x09
    138e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1390:	13 86       	std	Z+11, r1	; 0x0b
    1392:	a4 ef       	ldi	r26, 0xF4	; 244
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	e4 ef       	ldi	r30, 0xF4	; 244
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	84 60       	ori	r24, 0x04	; 4
    139e:	8c 93       	st	X, r24
    13a0:	a0 ef       	ldi	r26, 0xF0	; 240
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	e0 ef       	ldi	r30, 0xF0	; 240
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	8b 7f       	andi	r24, 0xFB	; 251
    13ac:	8c 93       	st	X, r24
          Can_clear_idemsk();
    13ae:	a4 ef       	ldi	r26, 0xF4	; 244
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	e4 ef       	ldi	r30, 0xF4	; 244
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	8e 7f       	andi	r24, 0xFE	; 254
    13ba:	8c 93       	st	X, r24
          Can_config_rx();       
    13bc:	af ee       	ldi	r26, 0xEF	; 239
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	ef ee       	ldi	r30, 0xEF	; 239
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	8f 73       	andi	r24, 0x3F	; 63
    13c8:	8c 93       	st	X, r24
    13ca:	af ee       	ldi	r26, 0xEF	; 239
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	ef ee       	ldi	r30, 0xEF	; 239
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	80 68       	ori	r24, 0x80	; 128
    13d6:	8c 93       	st	X, r24
    13d8:	59 c5       	rjmp	.+2738   	; 0x1e8c <__stack+0xd8d>
          break;
        //------------      
        case CMD_RX_REMOTE:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    13da:	1d 82       	std	Y+5, r1	; 0x05
    13dc:	1e 82       	std	Y+6, r1	; 0x06
    13de:	1f 82       	std	Y+7, r1	; 0x07
    13e0:	18 86       	std	Y+8, r1	; 0x08
    13e2:	a7 ef       	ldi	r26, 0xF7	; 247
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	ce 01       	movw	r24, r28
    13e8:	05 96       	adiw	r24, 0x05	; 5
    13ea:	fc 01       	movw	r30, r24
    13ec:	33 96       	adiw	r30, 0x03	; 3
    13ee:	80 81       	ld	r24, Z
    13f0:	28 2f       	mov	r18, r24
    13f2:	22 0f       	add	r18, r18
    13f4:	22 0f       	add	r18, r18
    13f6:	22 0f       	add	r18, r18
    13f8:	ce 01       	movw	r24, r28
    13fa:	05 96       	adiw	r24, 0x05	; 5
    13fc:	fc 01       	movw	r30, r24
    13fe:	32 96       	adiw	r30, 0x02	; 2
    1400:	80 81       	ld	r24, Z
    1402:	82 95       	swap	r24
    1404:	86 95       	lsr	r24
    1406:	87 70       	andi	r24, 0x07	; 7
    1408:	82 0f       	add	r24, r18
    140a:	8c 93       	st	X, r24
    140c:	a6 ef       	ldi	r26, 0xF6	; 246
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	ce 01       	movw	r24, r28
    1412:	05 96       	adiw	r24, 0x05	; 5
    1414:	fc 01       	movw	r30, r24
    1416:	32 96       	adiw	r30, 0x02	; 2
    1418:	80 81       	ld	r24, Z
    141a:	28 2f       	mov	r18, r24
    141c:	22 0f       	add	r18, r18
    141e:	22 0f       	add	r18, r18
    1420:	22 0f       	add	r18, r18
    1422:	ce 01       	movw	r24, r28
    1424:	05 96       	adiw	r24, 0x05	; 5
    1426:	fc 01       	movw	r30, r24
    1428:	31 96       	adiw	r30, 0x01	; 1
    142a:	80 81       	ld	r24, Z
    142c:	82 95       	swap	r24
    142e:	86 95       	lsr	r24
    1430:	87 70       	andi	r24, 0x07	; 7
    1432:	82 0f       	add	r24, r18
    1434:	8c 93       	st	X, r24
    1436:	a5 ef       	ldi	r26, 0xF5	; 245
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	ce 01       	movw	r24, r28
    143c:	05 96       	adiw	r24, 0x05	; 5
    143e:	fc 01       	movw	r30, r24
    1440:	31 96       	adiw	r30, 0x01	; 1
    1442:	80 81       	ld	r24, Z
    1444:	98 2f       	mov	r25, r24
    1446:	99 0f       	add	r25, r25
    1448:	99 0f       	add	r25, r25
    144a:	99 0f       	add	r25, r25
    144c:	fe 01       	movw	r30, r28
    144e:	35 96       	adiw	r30, 0x05	; 5
    1450:	80 81       	ld	r24, Z
    1452:	82 95       	swap	r24
    1454:	86 95       	lsr	r24
    1456:	87 70       	andi	r24, 0x07	; 7
    1458:	89 0f       	add	r24, r25
    145a:	8c 93       	st	X, r24
    145c:	a4 ef       	ldi	r26, 0xF4	; 244
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	fe 01       	movw	r30, r28
    1462:	35 96       	adiw	r30, 0x05	; 5
    1464:	80 81       	ld	r24, Z
    1466:	88 0f       	add	r24, r24
    1468:	88 0f       	add	r24, r24
    146a:	88 0f       	add	r24, r24
    146c:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    146e:	af ee       	ldi	r26, 0xEF	; 239
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	ef ee       	ldi	r30, 0xEF	; 239
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	90 81       	ld	r25, Z
    1478:	e9 85       	ldd	r30, Y+9	; 0x09
    147a:	fa 85       	ldd	r31, Y+10	; 0x0a
    147c:	87 81       	ldd	r24, Z+7	; 0x07
    147e:	89 2b       	or	r24, r25
    1480:	8c 93       	st	X, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1482:	e9 85       	ldd	r30, Y+9	; 0x09
    1484:	fa 85       	ldd	r31, Y+10	; 0x0a
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	83 87       	std	Z+11, r24	; 0x0b
    148a:	a4 ef       	ldi	r26, 0xF4	; 244
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	e4 ef       	ldi	r30, 0xF4	; 244
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	84 60       	ori	r24, 0x04	; 4
    1496:	8c 93       	st	X, r24
    1498:	a0 ef       	ldi	r26, 0xF0	; 240
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	e0 ef       	ldi	r30, 0xF0	; 240
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	84 60       	ori	r24, 0x04	; 4
    14a4:	8c 93       	st	X, r24
          Can_clear_rplv();
    14a6:	af ee       	ldi	r26, 0xEF	; 239
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	ef ee       	ldi	r30, 0xEF	; 239
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	8f 7d       	andi	r24, 0xDF	; 223
    14b2:	8c 93       	st	X, r24
          Can_clear_idemsk();
    14b4:	a4 ef       	ldi	r26, 0xF4	; 244
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	e4 ef       	ldi	r30, 0xF4	; 244
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	8e 7f       	andi	r24, 0xFE	; 254
    14c0:	8c 93       	st	X, r24
          Can_config_rx();       
    14c2:	af ee       	ldi	r26, 0xEF	; 239
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	ef ee       	ldi	r30, 0xEF	; 239
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	8f 73       	andi	r24, 0x3F	; 63
    14ce:	8c 93       	st	X, r24
    14d0:	af ee       	ldi	r26, 0xEF	; 239
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	ef ee       	ldi	r30, 0xEF	; 239
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	80 68       	ori	r24, 0x80	; 128
    14dc:	8c 93       	st	X, r24
    14de:	d6 c4       	rjmp	.+2476   	; 0x1e8c <__stack+0xd8d>
          break;
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    14e0:	e9 85       	ldd	r30, Y+9	; 0x09
    14e2:	fa 85       	ldd	r31, Y+10	; 0x0a
    14e4:	84 85       	ldd	r24, Z+12	; 0x0c
    14e6:	88 23       	and	r24, r24
    14e8:	09 f4       	brne	.+2      	; 0x14ec <__stack+0x3ed>
    14ea:	57 c0       	rjmp	.+174    	; 0x159a <__stack+0x49b>
    14ec:	a3 ef       	ldi	r26, 0xF3	; 243
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	89 85       	ldd	r24, Y+9	; 0x09
    14f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f4:	03 96       	adiw	r24, 0x03	; 3
    14f6:	fc 01       	movw	r30, r24
    14f8:	33 96       	adiw	r30, 0x03	; 3
    14fa:	80 81       	ld	r24, Z
    14fc:	28 2f       	mov	r18, r24
    14fe:	22 0f       	add	r18, r18
    1500:	22 0f       	add	r18, r18
    1502:	22 0f       	add	r18, r18
    1504:	89 85       	ldd	r24, Y+9	; 0x09
    1506:	9a 85       	ldd	r25, Y+10	; 0x0a
    1508:	03 96       	adiw	r24, 0x03	; 3
    150a:	fc 01       	movw	r30, r24
    150c:	32 96       	adiw	r30, 0x02	; 2
    150e:	80 81       	ld	r24, Z
    1510:	82 95       	swap	r24
    1512:	86 95       	lsr	r24
    1514:	87 70       	andi	r24, 0x07	; 7
    1516:	82 0f       	add	r24, r18
    1518:	8c 93       	st	X, r24
    151a:	a2 ef       	ldi	r26, 0xF2	; 242
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	89 85       	ldd	r24, Y+9	; 0x09
    1520:	9a 85       	ldd	r25, Y+10	; 0x0a
    1522:	03 96       	adiw	r24, 0x03	; 3
    1524:	fc 01       	movw	r30, r24
    1526:	32 96       	adiw	r30, 0x02	; 2
    1528:	80 81       	ld	r24, Z
    152a:	28 2f       	mov	r18, r24
    152c:	22 0f       	add	r18, r18
    152e:	22 0f       	add	r18, r18
    1530:	22 0f       	add	r18, r18
    1532:	89 85       	ldd	r24, Y+9	; 0x09
    1534:	9a 85       	ldd	r25, Y+10	; 0x0a
    1536:	03 96       	adiw	r24, 0x03	; 3
    1538:	fc 01       	movw	r30, r24
    153a:	31 96       	adiw	r30, 0x01	; 1
    153c:	80 81       	ld	r24, Z
    153e:	82 95       	swap	r24
    1540:	86 95       	lsr	r24
    1542:	87 70       	andi	r24, 0x07	; 7
    1544:	82 0f       	add	r24, r18
    1546:	8c 93       	st	X, r24
    1548:	a1 ef       	ldi	r26, 0xF1	; 241
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	89 85       	ldd	r24, Y+9	; 0x09
    154e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1550:	03 96       	adiw	r24, 0x03	; 3
    1552:	fc 01       	movw	r30, r24
    1554:	31 96       	adiw	r30, 0x01	; 1
    1556:	80 81       	ld	r24, Z
    1558:	28 2f       	mov	r18, r24
    155a:	22 0f       	add	r18, r18
    155c:	22 0f       	add	r18, r18
    155e:	22 0f       	add	r18, r18
    1560:	89 85       	ldd	r24, Y+9	; 0x09
    1562:	9a 85       	ldd	r25, Y+10	; 0x0a
    1564:	03 96       	adiw	r24, 0x03	; 3
    1566:	fc 01       	movw	r30, r24
    1568:	80 81       	ld	r24, Z
    156a:	82 95       	swap	r24
    156c:	86 95       	lsr	r24
    156e:	87 70       	andi	r24, 0x07	; 7
    1570:	82 0f       	add	r24, r18
    1572:	8c 93       	st	X, r24
    1574:	a0 ef       	ldi	r26, 0xF0	; 240
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	89 85       	ldd	r24, Y+9	; 0x09
    157a:	9a 85       	ldd	r25, Y+10	; 0x0a
    157c:	03 96       	adiw	r24, 0x03	; 3
    157e:	fc 01       	movw	r30, r24
    1580:	80 81       	ld	r24, Z
    1582:	88 0f       	add	r24, r24
    1584:	88 0f       	add	r24, r24
    1586:	88 0f       	add	r24, r24
    1588:	8c 93       	st	X, r24
    158a:	af ee       	ldi	r26, 0xEF	; 239
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	ef ee       	ldi	r30, 0xEF	; 239
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	80 61       	ori	r24, 0x10	; 16
    1596:	8c 93       	st	X, r24
    1598:	28 c0       	rjmp	.+80     	; 0x15ea <__stack+0x4eb>
          else              { Can_set_std_id(cmd->id.std);}
    159a:	a3 ef       	ldi	r26, 0xF3	; 243
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	89 85       	ldd	r24, Y+9	; 0x09
    15a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a2:	03 96       	adiw	r24, 0x03	; 3
    15a4:	fc 01       	movw	r30, r24
    15a6:	31 96       	adiw	r30, 0x01	; 1
    15a8:	80 81       	ld	r24, Z
    15aa:	28 2f       	mov	r18, r24
    15ac:	22 95       	swap	r18
    15ae:	22 0f       	add	r18, r18
    15b0:	20 7e       	andi	r18, 0xE0	; 224
    15b2:	89 85       	ldd	r24, Y+9	; 0x09
    15b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b6:	03 96       	adiw	r24, 0x03	; 3
    15b8:	fc 01       	movw	r30, r24
    15ba:	80 81       	ld	r24, Z
    15bc:	86 95       	lsr	r24
    15be:	86 95       	lsr	r24
    15c0:	86 95       	lsr	r24
    15c2:	82 0f       	add	r24, r18
    15c4:	8c 93       	st	X, r24
    15c6:	a2 ef       	ldi	r26, 0xF2	; 242
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	89 85       	ldd	r24, Y+9	; 0x09
    15cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ce:	03 96       	adiw	r24, 0x03	; 3
    15d0:	fc 01       	movw	r30, r24
    15d2:	80 81       	ld	r24, Z
    15d4:	82 95       	swap	r24
    15d6:	88 0f       	add	r24, r24
    15d8:	80 7e       	andi	r24, 0xE0	; 224
    15da:	8c 93       	st	X, r24
    15dc:	af ee       	ldi	r26, 0xEF	; 239
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	ef ee       	ldi	r30, 0xEF	; 239
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	8f 7e       	andi	r24, 0xEF	; 239
    15e8:	8c 93       	st	X, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    15ea:	8f ef       	ldi	r24, 0xFF	; 255
    15ec:	9f ef       	ldi	r25, 0xFF	; 255
    15ee:	af ef       	ldi	r26, 0xFF	; 255
    15f0:	bf ef       	ldi	r27, 0xFF	; 255
    15f2:	8d 83       	std	Y+5, r24	; 0x05
    15f4:	9e 83       	std	Y+6, r25	; 0x06
    15f6:	af 83       	std	Y+7, r26	; 0x07
    15f8:	b8 87       	std	Y+8, r27	; 0x08
    15fa:	a7 ef       	ldi	r26, 0xF7	; 247
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	ce 01       	movw	r24, r28
    1600:	05 96       	adiw	r24, 0x05	; 5
    1602:	fc 01       	movw	r30, r24
    1604:	33 96       	adiw	r30, 0x03	; 3
    1606:	80 81       	ld	r24, Z
    1608:	28 2f       	mov	r18, r24
    160a:	22 0f       	add	r18, r18
    160c:	22 0f       	add	r18, r18
    160e:	22 0f       	add	r18, r18
    1610:	ce 01       	movw	r24, r28
    1612:	05 96       	adiw	r24, 0x05	; 5
    1614:	fc 01       	movw	r30, r24
    1616:	32 96       	adiw	r30, 0x02	; 2
    1618:	80 81       	ld	r24, Z
    161a:	82 95       	swap	r24
    161c:	86 95       	lsr	r24
    161e:	87 70       	andi	r24, 0x07	; 7
    1620:	82 0f       	add	r24, r18
    1622:	8c 93       	st	X, r24
    1624:	a6 ef       	ldi	r26, 0xF6	; 246
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	ce 01       	movw	r24, r28
    162a:	05 96       	adiw	r24, 0x05	; 5
    162c:	fc 01       	movw	r30, r24
    162e:	32 96       	adiw	r30, 0x02	; 2
    1630:	80 81       	ld	r24, Z
    1632:	28 2f       	mov	r18, r24
    1634:	22 0f       	add	r18, r18
    1636:	22 0f       	add	r18, r18
    1638:	22 0f       	add	r18, r18
    163a:	ce 01       	movw	r24, r28
    163c:	05 96       	adiw	r24, 0x05	; 5
    163e:	fc 01       	movw	r30, r24
    1640:	31 96       	adiw	r30, 0x01	; 1
    1642:	80 81       	ld	r24, Z
    1644:	82 95       	swap	r24
    1646:	86 95       	lsr	r24
    1648:	87 70       	andi	r24, 0x07	; 7
    164a:	82 0f       	add	r24, r18
    164c:	8c 93       	st	X, r24
    164e:	a5 ef       	ldi	r26, 0xF5	; 245
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	ce 01       	movw	r24, r28
    1654:	05 96       	adiw	r24, 0x05	; 5
    1656:	fc 01       	movw	r30, r24
    1658:	31 96       	adiw	r30, 0x01	; 1
    165a:	80 81       	ld	r24, Z
    165c:	98 2f       	mov	r25, r24
    165e:	99 0f       	add	r25, r25
    1660:	99 0f       	add	r25, r25
    1662:	99 0f       	add	r25, r25
    1664:	fe 01       	movw	r30, r28
    1666:	35 96       	adiw	r30, 0x05	; 5
    1668:	80 81       	ld	r24, Z
    166a:	82 95       	swap	r24
    166c:	86 95       	lsr	r24
    166e:	87 70       	andi	r24, 0x07	; 7
    1670:	89 0f       	add	r24, r25
    1672:	8c 93       	st	X, r24
    1674:	a4 ef       	ldi	r26, 0xF4	; 244
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	fe 01       	movw	r30, r28
    167a:	35 96       	adiw	r30, 0x05	; 5
    167c:	80 81       	ld	r24, Z
    167e:	88 0f       	add	r24, r24
    1680:	88 0f       	add	r24, r24
    1682:	88 0f       	add	r24, r24
    1684:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    1686:	af ee       	ldi	r26, 0xEF	; 239
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	ef ee       	ldi	r30, 0xEF	; 239
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	90 81       	ld	r25, Z
    1690:	e9 85       	ldd	r30, Y+9	; 0x09
    1692:	fa 85       	ldd	r31, Y+10	; 0x0a
    1694:	87 81       	ldd	r24, Z+7	; 0x07
    1696:	89 2b       	or	r24, r25
    1698:	8c 93       	st	X, r24
          Can_clear_rtrmsk();
    169a:	a4 ef       	ldi	r26, 0xF4	; 244
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	e4 ef       	ldi	r30, 0xF4	; 244
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	8b 7f       	andi	r24, 0xFB	; 251
    16a6:	8c 93       	st	X, r24
          Can_set_idemsk();
    16a8:	a4 ef       	ldi	r26, 0xF4	; 244
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	e4 ef       	ldi	r30, 0xF4	; 244
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	81 60       	ori	r24, 0x01	; 1
    16b4:	8c 93       	st	X, r24
          Can_config_rx();       
    16b6:	af ee       	ldi	r26, 0xEF	; 239
    16b8:	b0 e0       	ldi	r27, 0x00	; 0
    16ba:	ef ee       	ldi	r30, 0xEF	; 239
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	8f 73       	andi	r24, 0x3F	; 63
    16c2:	8c 93       	st	X, r24
    16c4:	af ee       	ldi	r26, 0xEF	; 239
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	ef ee       	ldi	r30, 0xEF	; 239
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	80 68       	ori	r24, 0x80	; 128
    16d0:	8c 93       	st	X, r24
    16d2:	dc c3       	rjmp	.+1976   	; 0x1e8c <__stack+0xd8d>
          break;
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    16d4:	e9 85       	ldd	r30, Y+9	; 0x09
    16d6:	fa 85       	ldd	r31, Y+10	; 0x0a
    16d8:	84 85       	ldd	r24, Z+12	; 0x0c
    16da:	88 23       	and	r24, r24
    16dc:	09 f4       	brne	.+2      	; 0x16e0 <__stack+0x5e1>
    16de:	57 c0       	rjmp	.+174    	; 0x178e <__stack+0x68f>
    16e0:	a3 ef       	ldi	r26, 0xF3	; 243
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	89 85       	ldd	r24, Y+9	; 0x09
    16e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e8:	03 96       	adiw	r24, 0x03	; 3
    16ea:	fc 01       	movw	r30, r24
    16ec:	33 96       	adiw	r30, 0x03	; 3
    16ee:	80 81       	ld	r24, Z
    16f0:	28 2f       	mov	r18, r24
    16f2:	22 0f       	add	r18, r18
    16f4:	22 0f       	add	r18, r18
    16f6:	22 0f       	add	r18, r18
    16f8:	89 85       	ldd	r24, Y+9	; 0x09
    16fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    16fc:	03 96       	adiw	r24, 0x03	; 3
    16fe:	fc 01       	movw	r30, r24
    1700:	32 96       	adiw	r30, 0x02	; 2
    1702:	80 81       	ld	r24, Z
    1704:	82 95       	swap	r24
    1706:	86 95       	lsr	r24
    1708:	87 70       	andi	r24, 0x07	; 7
    170a:	82 0f       	add	r24, r18
    170c:	8c 93       	st	X, r24
    170e:	a2 ef       	ldi	r26, 0xF2	; 242
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	89 85       	ldd	r24, Y+9	; 0x09
    1714:	9a 85       	ldd	r25, Y+10	; 0x0a
    1716:	03 96       	adiw	r24, 0x03	; 3
    1718:	fc 01       	movw	r30, r24
    171a:	32 96       	adiw	r30, 0x02	; 2
    171c:	80 81       	ld	r24, Z
    171e:	28 2f       	mov	r18, r24
    1720:	22 0f       	add	r18, r18
    1722:	22 0f       	add	r18, r18
    1724:	22 0f       	add	r18, r18
    1726:	89 85       	ldd	r24, Y+9	; 0x09
    1728:	9a 85       	ldd	r25, Y+10	; 0x0a
    172a:	03 96       	adiw	r24, 0x03	; 3
    172c:	fc 01       	movw	r30, r24
    172e:	31 96       	adiw	r30, 0x01	; 1
    1730:	80 81       	ld	r24, Z
    1732:	82 95       	swap	r24
    1734:	86 95       	lsr	r24
    1736:	87 70       	andi	r24, 0x07	; 7
    1738:	82 0f       	add	r24, r18
    173a:	8c 93       	st	X, r24
    173c:	a1 ef       	ldi	r26, 0xF1	; 241
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	89 85       	ldd	r24, Y+9	; 0x09
    1742:	9a 85       	ldd	r25, Y+10	; 0x0a
    1744:	03 96       	adiw	r24, 0x03	; 3
    1746:	fc 01       	movw	r30, r24
    1748:	31 96       	adiw	r30, 0x01	; 1
    174a:	80 81       	ld	r24, Z
    174c:	28 2f       	mov	r18, r24
    174e:	22 0f       	add	r18, r18
    1750:	22 0f       	add	r18, r18
    1752:	22 0f       	add	r18, r18
    1754:	89 85       	ldd	r24, Y+9	; 0x09
    1756:	9a 85       	ldd	r25, Y+10	; 0x0a
    1758:	03 96       	adiw	r24, 0x03	; 3
    175a:	fc 01       	movw	r30, r24
    175c:	80 81       	ld	r24, Z
    175e:	82 95       	swap	r24
    1760:	86 95       	lsr	r24
    1762:	87 70       	andi	r24, 0x07	; 7
    1764:	82 0f       	add	r24, r18
    1766:	8c 93       	st	X, r24
    1768:	a0 ef       	ldi	r26, 0xF0	; 240
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	89 85       	ldd	r24, Y+9	; 0x09
    176e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1770:	03 96       	adiw	r24, 0x03	; 3
    1772:	fc 01       	movw	r30, r24
    1774:	80 81       	ld	r24, Z
    1776:	88 0f       	add	r24, r24
    1778:	88 0f       	add	r24, r24
    177a:	88 0f       	add	r24, r24
    177c:	8c 93       	st	X, r24
    177e:	af ee       	ldi	r26, 0xEF	; 239
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	ef ee       	ldi	r30, 0xEF	; 239
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	80 61       	ori	r24, 0x10	; 16
    178a:	8c 93       	st	X, r24
    178c:	28 c0       	rjmp	.+80     	; 0x17de <__stack+0x6df>
          else              { Can_set_std_id(cmd->id.std);}
    178e:	a3 ef       	ldi	r26, 0xF3	; 243
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	89 85       	ldd	r24, Y+9	; 0x09
    1794:	9a 85       	ldd	r25, Y+10	; 0x0a
    1796:	03 96       	adiw	r24, 0x03	; 3
    1798:	fc 01       	movw	r30, r24
    179a:	31 96       	adiw	r30, 0x01	; 1
    179c:	80 81       	ld	r24, Z
    179e:	28 2f       	mov	r18, r24
    17a0:	22 95       	swap	r18
    17a2:	22 0f       	add	r18, r18
    17a4:	20 7e       	andi	r18, 0xE0	; 224
    17a6:	89 85       	ldd	r24, Y+9	; 0x09
    17a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17aa:	03 96       	adiw	r24, 0x03	; 3
    17ac:	fc 01       	movw	r30, r24
    17ae:	80 81       	ld	r24, Z
    17b0:	86 95       	lsr	r24
    17b2:	86 95       	lsr	r24
    17b4:	86 95       	lsr	r24
    17b6:	82 0f       	add	r24, r18
    17b8:	8c 93       	st	X, r24
    17ba:	a2 ef       	ldi	r26, 0xF2	; 242
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	89 85       	ldd	r24, Y+9	; 0x09
    17c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c2:	03 96       	adiw	r24, 0x03	; 3
    17c4:	fc 01       	movw	r30, r24
    17c6:	80 81       	ld	r24, Z
    17c8:	82 95       	swap	r24
    17ca:	88 0f       	add	r24, r24
    17cc:	80 7e       	andi	r24, 0xE0	; 224
    17ce:	8c 93       	st	X, r24
    17d0:	af ee       	ldi	r26, 0xEF	; 239
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	ef ee       	ldi	r30, 0xEF	; 239
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	8f 7e       	andi	r24, 0xEF	; 239
    17dc:	8c 93       	st	X, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    17de:	8f ef       	ldi	r24, 0xFF	; 255
    17e0:	9f ef       	ldi	r25, 0xFF	; 255
    17e2:	af ef       	ldi	r26, 0xFF	; 255
    17e4:	bf ef       	ldi	r27, 0xFF	; 255
    17e6:	8d 83       	std	Y+5, r24	; 0x05
    17e8:	9e 83       	std	Y+6, r25	; 0x06
    17ea:	af 83       	std	Y+7, r26	; 0x07
    17ec:	b8 87       	std	Y+8, r27	; 0x08
    17ee:	a7 ef       	ldi	r26, 0xF7	; 247
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	ce 01       	movw	r24, r28
    17f4:	05 96       	adiw	r24, 0x05	; 5
    17f6:	fc 01       	movw	r30, r24
    17f8:	33 96       	adiw	r30, 0x03	; 3
    17fa:	80 81       	ld	r24, Z
    17fc:	28 2f       	mov	r18, r24
    17fe:	22 0f       	add	r18, r18
    1800:	22 0f       	add	r18, r18
    1802:	22 0f       	add	r18, r18
    1804:	ce 01       	movw	r24, r28
    1806:	05 96       	adiw	r24, 0x05	; 5
    1808:	fc 01       	movw	r30, r24
    180a:	32 96       	adiw	r30, 0x02	; 2
    180c:	80 81       	ld	r24, Z
    180e:	82 95       	swap	r24
    1810:	86 95       	lsr	r24
    1812:	87 70       	andi	r24, 0x07	; 7
    1814:	82 0f       	add	r24, r18
    1816:	8c 93       	st	X, r24
    1818:	a6 ef       	ldi	r26, 0xF6	; 246
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	ce 01       	movw	r24, r28
    181e:	05 96       	adiw	r24, 0x05	; 5
    1820:	fc 01       	movw	r30, r24
    1822:	32 96       	adiw	r30, 0x02	; 2
    1824:	80 81       	ld	r24, Z
    1826:	28 2f       	mov	r18, r24
    1828:	22 0f       	add	r18, r18
    182a:	22 0f       	add	r18, r18
    182c:	22 0f       	add	r18, r18
    182e:	ce 01       	movw	r24, r28
    1830:	05 96       	adiw	r24, 0x05	; 5
    1832:	fc 01       	movw	r30, r24
    1834:	31 96       	adiw	r30, 0x01	; 1
    1836:	80 81       	ld	r24, Z
    1838:	82 95       	swap	r24
    183a:	86 95       	lsr	r24
    183c:	87 70       	andi	r24, 0x07	; 7
    183e:	82 0f       	add	r24, r18
    1840:	8c 93       	st	X, r24
    1842:	a5 ef       	ldi	r26, 0xF5	; 245
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	ce 01       	movw	r24, r28
    1848:	05 96       	adiw	r24, 0x05	; 5
    184a:	fc 01       	movw	r30, r24
    184c:	31 96       	adiw	r30, 0x01	; 1
    184e:	80 81       	ld	r24, Z
    1850:	98 2f       	mov	r25, r24
    1852:	99 0f       	add	r25, r25
    1854:	99 0f       	add	r25, r25
    1856:	99 0f       	add	r25, r25
    1858:	fe 01       	movw	r30, r28
    185a:	35 96       	adiw	r30, 0x05	; 5
    185c:	80 81       	ld	r24, Z
    185e:	82 95       	swap	r24
    1860:	86 95       	lsr	r24
    1862:	87 70       	andi	r24, 0x07	; 7
    1864:	89 0f       	add	r24, r25
    1866:	8c 93       	st	X, r24
    1868:	a4 ef       	ldi	r26, 0xF4	; 244
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	fe 01       	movw	r30, r28
    186e:	35 96       	adiw	r30, 0x05	; 5
    1870:	80 81       	ld	r24, Z
    1872:	88 0f       	add	r24, r24
    1874:	88 0f       	add	r24, r24
    1876:	88 0f       	add	r24, r24
    1878:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    187a:	af ee       	ldi	r26, 0xEF	; 239
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	ef ee       	ldi	r30, 0xEF	; 239
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	90 81       	ld	r25, Z
    1884:	e9 85       	ldd	r30, Y+9	; 0x09
    1886:	fa 85       	ldd	r31, Y+10	; 0x0a
    1888:	87 81       	ldd	r24, Z+7	; 0x07
    188a:	89 2b       	or	r24, r25
    188c:	8c 93       	st	X, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    188e:	e9 85       	ldd	r30, Y+9	; 0x09
    1890:	fa 85       	ldd	r31, Y+10	; 0x0a
    1892:	13 86       	std	Z+11, r1	; 0x0b
    1894:	a4 ef       	ldi	r26, 0xF4	; 244
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	e4 ef       	ldi	r30, 0xF4	; 244
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	84 60       	ori	r24, 0x04	; 4
    18a0:	8c 93       	st	X, r24
    18a2:	a0 ef       	ldi	r26, 0xF0	; 240
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	e0 ef       	ldi	r30, 0xF0	; 240
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	8b 7f       	andi	r24, 0xFB	; 251
    18ae:	8c 93       	st	X, r24
          Can_set_idemsk();
    18b0:	a4 ef       	ldi	r26, 0xF4	; 244
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	e4 ef       	ldi	r30, 0xF4	; 244
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	81 60       	ori	r24, 0x01	; 1
    18bc:	8c 93       	st	X, r24
          Can_config_rx();       
    18be:	af ee       	ldi	r26, 0xEF	; 239
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	ef ee       	ldi	r30, 0xEF	; 239
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	8f 73       	andi	r24, 0x3F	; 63
    18ca:	8c 93       	st	X, r24
    18cc:	af ee       	ldi	r26, 0xEF	; 239
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	ef ee       	ldi	r30, 0xEF	; 239
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	80 68       	ori	r24, 0x80	; 128
    18d8:	8c 93       	st	X, r24
    18da:	d8 c2       	rjmp	.+1456   	; 0x1e8c <__stack+0xd8d>
          break;
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    18dc:	e9 85       	ldd	r30, Y+9	; 0x09
    18de:	fa 85       	ldd	r31, Y+10	; 0x0a
    18e0:	84 85       	ldd	r24, Z+12	; 0x0c
    18e2:	88 23       	and	r24, r24
    18e4:	09 f4       	brne	.+2      	; 0x18e8 <__stack+0x7e9>
    18e6:	57 c0       	rjmp	.+174    	; 0x1996 <__stack+0x897>
    18e8:	a3 ef       	ldi	r26, 0xF3	; 243
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	89 85       	ldd	r24, Y+9	; 0x09
    18ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f0:	03 96       	adiw	r24, 0x03	; 3
    18f2:	fc 01       	movw	r30, r24
    18f4:	33 96       	adiw	r30, 0x03	; 3
    18f6:	80 81       	ld	r24, Z
    18f8:	28 2f       	mov	r18, r24
    18fa:	22 0f       	add	r18, r18
    18fc:	22 0f       	add	r18, r18
    18fe:	22 0f       	add	r18, r18
    1900:	89 85       	ldd	r24, Y+9	; 0x09
    1902:	9a 85       	ldd	r25, Y+10	; 0x0a
    1904:	03 96       	adiw	r24, 0x03	; 3
    1906:	fc 01       	movw	r30, r24
    1908:	32 96       	adiw	r30, 0x02	; 2
    190a:	80 81       	ld	r24, Z
    190c:	82 95       	swap	r24
    190e:	86 95       	lsr	r24
    1910:	87 70       	andi	r24, 0x07	; 7
    1912:	82 0f       	add	r24, r18
    1914:	8c 93       	st	X, r24
    1916:	a2 ef       	ldi	r26, 0xF2	; 242
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	89 85       	ldd	r24, Y+9	; 0x09
    191c:	9a 85       	ldd	r25, Y+10	; 0x0a
    191e:	03 96       	adiw	r24, 0x03	; 3
    1920:	fc 01       	movw	r30, r24
    1922:	32 96       	adiw	r30, 0x02	; 2
    1924:	80 81       	ld	r24, Z
    1926:	28 2f       	mov	r18, r24
    1928:	22 0f       	add	r18, r18
    192a:	22 0f       	add	r18, r18
    192c:	22 0f       	add	r18, r18
    192e:	89 85       	ldd	r24, Y+9	; 0x09
    1930:	9a 85       	ldd	r25, Y+10	; 0x0a
    1932:	03 96       	adiw	r24, 0x03	; 3
    1934:	fc 01       	movw	r30, r24
    1936:	31 96       	adiw	r30, 0x01	; 1
    1938:	80 81       	ld	r24, Z
    193a:	82 95       	swap	r24
    193c:	86 95       	lsr	r24
    193e:	87 70       	andi	r24, 0x07	; 7
    1940:	82 0f       	add	r24, r18
    1942:	8c 93       	st	X, r24
    1944:	a1 ef       	ldi	r26, 0xF1	; 241
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	89 85       	ldd	r24, Y+9	; 0x09
    194a:	9a 85       	ldd	r25, Y+10	; 0x0a
    194c:	03 96       	adiw	r24, 0x03	; 3
    194e:	fc 01       	movw	r30, r24
    1950:	31 96       	adiw	r30, 0x01	; 1
    1952:	80 81       	ld	r24, Z
    1954:	28 2f       	mov	r18, r24
    1956:	22 0f       	add	r18, r18
    1958:	22 0f       	add	r18, r18
    195a:	22 0f       	add	r18, r18
    195c:	89 85       	ldd	r24, Y+9	; 0x09
    195e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1960:	03 96       	adiw	r24, 0x03	; 3
    1962:	fc 01       	movw	r30, r24
    1964:	80 81       	ld	r24, Z
    1966:	82 95       	swap	r24
    1968:	86 95       	lsr	r24
    196a:	87 70       	andi	r24, 0x07	; 7
    196c:	82 0f       	add	r24, r18
    196e:	8c 93       	st	X, r24
    1970:	a0 ef       	ldi	r26, 0xF0	; 240
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	89 85       	ldd	r24, Y+9	; 0x09
    1976:	9a 85       	ldd	r25, Y+10	; 0x0a
    1978:	03 96       	adiw	r24, 0x03	; 3
    197a:	fc 01       	movw	r30, r24
    197c:	80 81       	ld	r24, Z
    197e:	88 0f       	add	r24, r24
    1980:	88 0f       	add	r24, r24
    1982:	88 0f       	add	r24, r24
    1984:	8c 93       	st	X, r24
    1986:	af ee       	ldi	r26, 0xEF	; 239
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	ef ee       	ldi	r30, 0xEF	; 239
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	80 61       	ori	r24, 0x10	; 16
    1992:	8c 93       	st	X, r24
    1994:	28 c0       	rjmp	.+80     	; 0x19e6 <__stack+0x8e7>
          else              { Can_set_std_id(cmd->id.std);}
    1996:	a3 ef       	ldi	r26, 0xF3	; 243
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	89 85       	ldd	r24, Y+9	; 0x09
    199c:	9a 85       	ldd	r25, Y+10	; 0x0a
    199e:	03 96       	adiw	r24, 0x03	; 3
    19a0:	fc 01       	movw	r30, r24
    19a2:	31 96       	adiw	r30, 0x01	; 1
    19a4:	80 81       	ld	r24, Z
    19a6:	28 2f       	mov	r18, r24
    19a8:	22 95       	swap	r18
    19aa:	22 0f       	add	r18, r18
    19ac:	20 7e       	andi	r18, 0xE0	; 224
    19ae:	89 85       	ldd	r24, Y+9	; 0x09
    19b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b2:	03 96       	adiw	r24, 0x03	; 3
    19b4:	fc 01       	movw	r30, r24
    19b6:	80 81       	ld	r24, Z
    19b8:	86 95       	lsr	r24
    19ba:	86 95       	lsr	r24
    19bc:	86 95       	lsr	r24
    19be:	82 0f       	add	r24, r18
    19c0:	8c 93       	st	X, r24
    19c2:	a2 ef       	ldi	r26, 0xF2	; 242
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	89 85       	ldd	r24, Y+9	; 0x09
    19c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ca:	03 96       	adiw	r24, 0x03	; 3
    19cc:	fc 01       	movw	r30, r24
    19ce:	80 81       	ld	r24, Z
    19d0:	82 95       	swap	r24
    19d2:	88 0f       	add	r24, r24
    19d4:	80 7e       	andi	r24, 0xE0	; 224
    19d6:	8c 93       	st	X, r24
    19d8:	af ee       	ldi	r26, 0xEF	; 239
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	ef ee       	ldi	r30, 0xEF	; 239
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	8f 7e       	andi	r24, 0xEF	; 239
    19e4:	8c 93       	st	X, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    19e6:	8f ef       	ldi	r24, 0xFF	; 255
    19e8:	9f ef       	ldi	r25, 0xFF	; 255
    19ea:	af ef       	ldi	r26, 0xFF	; 255
    19ec:	bf ef       	ldi	r27, 0xFF	; 255
    19ee:	8d 83       	std	Y+5, r24	; 0x05
    19f0:	9e 83       	std	Y+6, r25	; 0x06
    19f2:	af 83       	std	Y+7, r26	; 0x07
    19f4:	b8 87       	std	Y+8, r27	; 0x08
    19f6:	a7 ef       	ldi	r26, 0xF7	; 247
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	ce 01       	movw	r24, r28
    19fc:	05 96       	adiw	r24, 0x05	; 5
    19fe:	fc 01       	movw	r30, r24
    1a00:	33 96       	adiw	r30, 0x03	; 3
    1a02:	80 81       	ld	r24, Z
    1a04:	28 2f       	mov	r18, r24
    1a06:	22 0f       	add	r18, r18
    1a08:	22 0f       	add	r18, r18
    1a0a:	22 0f       	add	r18, r18
    1a0c:	ce 01       	movw	r24, r28
    1a0e:	05 96       	adiw	r24, 0x05	; 5
    1a10:	fc 01       	movw	r30, r24
    1a12:	32 96       	adiw	r30, 0x02	; 2
    1a14:	80 81       	ld	r24, Z
    1a16:	82 95       	swap	r24
    1a18:	86 95       	lsr	r24
    1a1a:	87 70       	andi	r24, 0x07	; 7
    1a1c:	82 0f       	add	r24, r18
    1a1e:	8c 93       	st	X, r24
    1a20:	a6 ef       	ldi	r26, 0xF6	; 246
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	ce 01       	movw	r24, r28
    1a26:	05 96       	adiw	r24, 0x05	; 5
    1a28:	fc 01       	movw	r30, r24
    1a2a:	32 96       	adiw	r30, 0x02	; 2
    1a2c:	80 81       	ld	r24, Z
    1a2e:	28 2f       	mov	r18, r24
    1a30:	22 0f       	add	r18, r18
    1a32:	22 0f       	add	r18, r18
    1a34:	22 0f       	add	r18, r18
    1a36:	ce 01       	movw	r24, r28
    1a38:	05 96       	adiw	r24, 0x05	; 5
    1a3a:	fc 01       	movw	r30, r24
    1a3c:	31 96       	adiw	r30, 0x01	; 1
    1a3e:	80 81       	ld	r24, Z
    1a40:	82 95       	swap	r24
    1a42:	86 95       	lsr	r24
    1a44:	87 70       	andi	r24, 0x07	; 7
    1a46:	82 0f       	add	r24, r18
    1a48:	8c 93       	st	X, r24
    1a4a:	a5 ef       	ldi	r26, 0xF5	; 245
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	ce 01       	movw	r24, r28
    1a50:	05 96       	adiw	r24, 0x05	; 5
    1a52:	fc 01       	movw	r30, r24
    1a54:	31 96       	adiw	r30, 0x01	; 1
    1a56:	80 81       	ld	r24, Z
    1a58:	98 2f       	mov	r25, r24
    1a5a:	99 0f       	add	r25, r25
    1a5c:	99 0f       	add	r25, r25
    1a5e:	99 0f       	add	r25, r25
    1a60:	fe 01       	movw	r30, r28
    1a62:	35 96       	adiw	r30, 0x05	; 5
    1a64:	80 81       	ld	r24, Z
    1a66:	82 95       	swap	r24
    1a68:	86 95       	lsr	r24
    1a6a:	87 70       	andi	r24, 0x07	; 7
    1a6c:	89 0f       	add	r24, r25
    1a6e:	8c 93       	st	X, r24
    1a70:	a4 ef       	ldi	r26, 0xF4	; 244
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	fe 01       	movw	r30, r28
    1a76:	35 96       	adiw	r30, 0x05	; 5
    1a78:	80 81       	ld	r24, Z
    1a7a:	88 0f       	add	r24, r24
    1a7c:	88 0f       	add	r24, r24
    1a7e:	88 0f       	add	r24, r24
    1a80:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    1a82:	af ee       	ldi	r26, 0xEF	; 239
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	ef ee       	ldi	r30, 0xEF	; 239
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	90 81       	ld	r25, Z
    1a8c:	e9 85       	ldd	r30, Y+9	; 0x09
    1a8e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1a90:	87 81       	ldd	r24, Z+7	; 0x07
    1a92:	89 2b       	or	r24, r25
    1a94:	8c 93       	st	X, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1a96:	e9 85       	ldd	r30, Y+9	; 0x09
    1a98:	fa 85       	ldd	r31, Y+10	; 0x0a
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	83 87       	std	Z+11, r24	; 0x0b
    1a9e:	a4 ef       	ldi	r26, 0xF4	; 244
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	e4 ef       	ldi	r30, 0xF4	; 244
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	84 60       	ori	r24, 0x04	; 4
    1aaa:	8c 93       	st	X, r24
    1aac:	a0 ef       	ldi	r26, 0xF0	; 240
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	e0 ef       	ldi	r30, 0xF0	; 240
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	84 60       	ori	r24, 0x04	; 4
    1ab8:	8c 93       	st	X, r24
          Can_clear_rplv();
    1aba:	af ee       	ldi	r26, 0xEF	; 239
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	ef ee       	ldi	r30, 0xEF	; 239
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	8f 7d       	andi	r24, 0xDF	; 223
    1ac6:	8c 93       	st	X, r24
          Can_set_idemsk();
    1ac8:	a4 ef       	ldi	r26, 0xF4	; 244
    1aca:	b0 e0       	ldi	r27, 0x00	; 0
    1acc:	e4 ef       	ldi	r30, 0xF4	; 244
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	81 60       	ori	r24, 0x01	; 1
    1ad4:	8c 93       	st	X, r24
          Can_config_rx();       
    1ad6:	af ee       	ldi	r26, 0xEF	; 239
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	ef ee       	ldi	r30, 0xEF	; 239
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	8f 73       	andi	r24, 0x3F	; 63
    1ae2:	8c 93       	st	X, r24
    1ae4:	af ee       	ldi	r26, 0xEF	; 239
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	ef ee       	ldi	r30, 0xEF	; 239
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	80 68       	ori	r24, 0x80	; 128
    1af0:	8c 93       	st	X, r24
    1af2:	cc c1       	rjmp	.+920    	; 0x1e8c <__stack+0xd8d>
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    1af4:	1b 82       	std	Y+3, r1	; 0x03
    1af6:	11 c0       	rjmp	.+34     	; 0x1b1a <__stack+0xa1b>
    1af8:	aa ef       	ldi	r26, 0xFA	; 250
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e9 85       	ldd	r30, Y+9	; 0x09
    1afe:	fa 85       	ldd	r31, Y+10	; 0x0a
    1b00:	20 85       	ldd	r18, Z+8	; 0x08
    1b02:	31 85       	ldd	r19, Z+9	; 0x09
    1b04:	8b 81       	ldd	r24, Y+3	; 0x03
    1b06:	88 2f       	mov	r24, r24
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	f9 01       	movw	r30, r18
    1b0c:	e8 0f       	add	r30, r24
    1b0e:	f9 1f       	adc	r31, r25
    1b10:	80 81       	ld	r24, Z
    1b12:	8c 93       	st	X, r24
    1b14:	8b 81       	ldd	r24, Y+3	; 0x03
    1b16:	8f 5f       	subi	r24, 0xFF	; 255
    1b18:	8b 83       	std	Y+3, r24	; 0x03
    1b1a:	e9 85       	ldd	r30, Y+9	; 0x09
    1b1c:	fa 85       	ldd	r31, Y+10	; 0x0a
    1b1e:	97 81       	ldd	r25, Z+7	; 0x07
    1b20:	8b 81       	ldd	r24, Y+3	; 0x03
    1b22:	89 17       	cp	r24, r25
    1b24:	48 f3       	brcs	.-46     	; 0x1af8 <__stack+0x9f9>
          u32_temp=0; Can_set_ext_msk(u32_temp);
    1b26:	1d 82       	std	Y+5, r1	; 0x05
    1b28:	1e 82       	std	Y+6, r1	; 0x06
    1b2a:	1f 82       	std	Y+7, r1	; 0x07
    1b2c:	18 86       	std	Y+8, r1	; 0x08
    1b2e:	a7 ef       	ldi	r26, 0xF7	; 247
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	ce 01       	movw	r24, r28
    1b34:	05 96       	adiw	r24, 0x05	; 5
    1b36:	fc 01       	movw	r30, r24
    1b38:	33 96       	adiw	r30, 0x03	; 3
    1b3a:	80 81       	ld	r24, Z
    1b3c:	28 2f       	mov	r18, r24
    1b3e:	22 0f       	add	r18, r18
    1b40:	22 0f       	add	r18, r18
    1b42:	22 0f       	add	r18, r18
    1b44:	ce 01       	movw	r24, r28
    1b46:	05 96       	adiw	r24, 0x05	; 5
    1b48:	fc 01       	movw	r30, r24
    1b4a:	32 96       	adiw	r30, 0x02	; 2
    1b4c:	80 81       	ld	r24, Z
    1b4e:	82 95       	swap	r24
    1b50:	86 95       	lsr	r24
    1b52:	87 70       	andi	r24, 0x07	; 7
    1b54:	82 0f       	add	r24, r18
    1b56:	8c 93       	st	X, r24
    1b58:	a6 ef       	ldi	r26, 0xF6	; 246
    1b5a:	b0 e0       	ldi	r27, 0x00	; 0
    1b5c:	ce 01       	movw	r24, r28
    1b5e:	05 96       	adiw	r24, 0x05	; 5
    1b60:	fc 01       	movw	r30, r24
    1b62:	32 96       	adiw	r30, 0x02	; 2
    1b64:	80 81       	ld	r24, Z
    1b66:	28 2f       	mov	r18, r24
    1b68:	22 0f       	add	r18, r18
    1b6a:	22 0f       	add	r18, r18
    1b6c:	22 0f       	add	r18, r18
    1b6e:	ce 01       	movw	r24, r28
    1b70:	05 96       	adiw	r24, 0x05	; 5
    1b72:	fc 01       	movw	r30, r24
    1b74:	31 96       	adiw	r30, 0x01	; 1
    1b76:	80 81       	ld	r24, Z
    1b78:	82 95       	swap	r24
    1b7a:	86 95       	lsr	r24
    1b7c:	87 70       	andi	r24, 0x07	; 7
    1b7e:	82 0f       	add	r24, r18
    1b80:	8c 93       	st	X, r24
    1b82:	a5 ef       	ldi	r26, 0xF5	; 245
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	ce 01       	movw	r24, r28
    1b88:	05 96       	adiw	r24, 0x05	; 5
    1b8a:	fc 01       	movw	r30, r24
    1b8c:	31 96       	adiw	r30, 0x01	; 1
    1b8e:	80 81       	ld	r24, Z
    1b90:	98 2f       	mov	r25, r24
    1b92:	99 0f       	add	r25, r25
    1b94:	99 0f       	add	r25, r25
    1b96:	99 0f       	add	r25, r25
    1b98:	fe 01       	movw	r30, r28
    1b9a:	35 96       	adiw	r30, 0x05	; 5
    1b9c:	80 81       	ld	r24, Z
    1b9e:	82 95       	swap	r24
    1ba0:	86 95       	lsr	r24
    1ba2:	87 70       	andi	r24, 0x07	; 7
    1ba4:	89 0f       	add	r24, r25
    1ba6:	8c 93       	st	X, r24
    1ba8:	a4 ef       	ldi	r26, 0xF4	; 244
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	fe 01       	movw	r30, r28
    1bae:	35 96       	adiw	r30, 0x05	; 5
    1bb0:	80 81       	ld	r24, Z
    1bb2:	88 0f       	add	r24, r24
    1bb4:	88 0f       	add	r24, r24
    1bb6:	88 0f       	add	r24, r24
    1bb8:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    1bba:	af ee       	ldi	r26, 0xEF	; 239
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
    1bbe:	ef ee       	ldi	r30, 0xEF	; 239
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	90 81       	ld	r25, Z
    1bc4:	e9 85       	ldd	r30, Y+9	; 0x09
    1bc6:	fa 85       	ldd	r31, Y+10	; 0x0a
    1bc8:	87 81       	ldd	r24, Z+7	; 0x07
    1bca:	89 2b       	or	r24, r25
    1bcc:	8c 93       	st	X, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1bce:	e9 85       	ldd	r30, Y+9	; 0x09
    1bd0:	fa 85       	ldd	r31, Y+10	; 0x0a
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	83 87       	std	Z+11, r24	; 0x0b
    1bd6:	a4 ef       	ldi	r26, 0xF4	; 244
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	e4 ef       	ldi	r30, 0xF4	; 244
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	84 60       	ori	r24, 0x04	; 4
    1be2:	8c 93       	st	X, r24
    1be4:	a0 ef       	ldi	r26, 0xF0	; 240
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	e0 ef       	ldi	r30, 0xF0	; 240
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	84 60       	ori	r24, 0x04	; 4
    1bf0:	8c 93       	st	X, r24
          Can_set_rplv();
    1bf2:	af ee       	ldi	r26, 0xEF	; 239
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	ef ee       	ldi	r30, 0xEF	; 239
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	80 62       	ori	r24, 0x20	; 32
    1bfe:	8c 93       	st	X, r24
          Can_clear_idemsk();
    1c00:	a4 ef       	ldi	r26, 0xF4	; 244
    1c02:	b0 e0       	ldi	r27, 0x00	; 0
    1c04:	e4 ef       	ldi	r30, 0xF4	; 244
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	80 81       	ld	r24, Z
    1c0a:	8e 7f       	andi	r24, 0xFE	; 254
    1c0c:	8c 93       	st	X, r24
          Can_config_rx();       
    1c0e:	af ee       	ldi	r26, 0xEF	; 239
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	ef ee       	ldi	r30, 0xEF	; 239
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	8f 73       	andi	r24, 0x3F	; 63
    1c1a:	8c 93       	st	X, r24
    1c1c:	af ee       	ldi	r26, 0xEF	; 239
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	ef ee       	ldi	r30, 0xEF	; 239
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	80 68       	ori	r24, 0x80	; 128
    1c28:	8c 93       	st	X, r24
    1c2a:	30 c1       	rjmp	.+608    	; 0x1e8c <__stack+0xd8d>
          break;
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1c2c:	e9 85       	ldd	r30, Y+9	; 0x09
    1c2e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1c30:	84 85       	ldd	r24, Z+12	; 0x0c
    1c32:	88 23       	and	r24, r24
    1c34:	09 f4       	brne	.+2      	; 0x1c38 <__stack+0xb39>
    1c36:	57 c0       	rjmp	.+174    	; 0x1ce6 <__stack+0xbe7>
    1c38:	a3 ef       	ldi	r26, 0xF3	; 243
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	89 85       	ldd	r24, Y+9	; 0x09
    1c3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c40:	03 96       	adiw	r24, 0x03	; 3
    1c42:	fc 01       	movw	r30, r24
    1c44:	33 96       	adiw	r30, 0x03	; 3
    1c46:	80 81       	ld	r24, Z
    1c48:	28 2f       	mov	r18, r24
    1c4a:	22 0f       	add	r18, r18
    1c4c:	22 0f       	add	r18, r18
    1c4e:	22 0f       	add	r18, r18
    1c50:	89 85       	ldd	r24, Y+9	; 0x09
    1c52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c54:	03 96       	adiw	r24, 0x03	; 3
    1c56:	fc 01       	movw	r30, r24
    1c58:	32 96       	adiw	r30, 0x02	; 2
    1c5a:	80 81       	ld	r24, Z
    1c5c:	82 95       	swap	r24
    1c5e:	86 95       	lsr	r24
    1c60:	87 70       	andi	r24, 0x07	; 7
    1c62:	82 0f       	add	r24, r18
    1c64:	8c 93       	st	X, r24
    1c66:	a2 ef       	ldi	r26, 0xF2	; 242
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	89 85       	ldd	r24, Y+9	; 0x09
    1c6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6e:	03 96       	adiw	r24, 0x03	; 3
    1c70:	fc 01       	movw	r30, r24
    1c72:	32 96       	adiw	r30, 0x02	; 2
    1c74:	80 81       	ld	r24, Z
    1c76:	28 2f       	mov	r18, r24
    1c78:	22 0f       	add	r18, r18
    1c7a:	22 0f       	add	r18, r18
    1c7c:	22 0f       	add	r18, r18
    1c7e:	89 85       	ldd	r24, Y+9	; 0x09
    1c80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c82:	03 96       	adiw	r24, 0x03	; 3
    1c84:	fc 01       	movw	r30, r24
    1c86:	31 96       	adiw	r30, 0x01	; 1
    1c88:	80 81       	ld	r24, Z
    1c8a:	82 95       	swap	r24
    1c8c:	86 95       	lsr	r24
    1c8e:	87 70       	andi	r24, 0x07	; 7
    1c90:	82 0f       	add	r24, r18
    1c92:	8c 93       	st	X, r24
    1c94:	a1 ef       	ldi	r26, 0xF1	; 241
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	89 85       	ldd	r24, Y+9	; 0x09
    1c9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c9c:	03 96       	adiw	r24, 0x03	; 3
    1c9e:	fc 01       	movw	r30, r24
    1ca0:	31 96       	adiw	r30, 0x01	; 1
    1ca2:	80 81       	ld	r24, Z
    1ca4:	28 2f       	mov	r18, r24
    1ca6:	22 0f       	add	r18, r18
    1ca8:	22 0f       	add	r18, r18
    1caa:	22 0f       	add	r18, r18
    1cac:	89 85       	ldd	r24, Y+9	; 0x09
    1cae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb0:	03 96       	adiw	r24, 0x03	; 3
    1cb2:	fc 01       	movw	r30, r24
    1cb4:	80 81       	ld	r24, Z
    1cb6:	82 95       	swap	r24
    1cb8:	86 95       	lsr	r24
    1cba:	87 70       	andi	r24, 0x07	; 7
    1cbc:	82 0f       	add	r24, r18
    1cbe:	8c 93       	st	X, r24
    1cc0:	a0 ef       	ldi	r26, 0xF0	; 240
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	89 85       	ldd	r24, Y+9	; 0x09
    1cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc8:	03 96       	adiw	r24, 0x03	; 3
    1cca:	fc 01       	movw	r30, r24
    1ccc:	80 81       	ld	r24, Z
    1cce:	88 0f       	add	r24, r24
    1cd0:	88 0f       	add	r24, r24
    1cd2:	88 0f       	add	r24, r24
    1cd4:	8c 93       	st	X, r24
    1cd6:	af ee       	ldi	r26, 0xEF	; 239
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	ef ee       	ldi	r30, 0xEF	; 239
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	80 61       	ori	r24, 0x10	; 16
    1ce2:	8c 93       	st	X, r24
    1ce4:	28 c0       	rjmp	.+80     	; 0x1d36 <__stack+0xc37>
          else              { Can_set_std_id(cmd->id.std);}
    1ce6:	a3 ef       	ldi	r26, 0xF3	; 243
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	89 85       	ldd	r24, Y+9	; 0x09
    1cec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cee:	03 96       	adiw	r24, 0x03	; 3
    1cf0:	fc 01       	movw	r30, r24
    1cf2:	31 96       	adiw	r30, 0x01	; 1
    1cf4:	80 81       	ld	r24, Z
    1cf6:	28 2f       	mov	r18, r24
    1cf8:	22 95       	swap	r18
    1cfa:	22 0f       	add	r18, r18
    1cfc:	20 7e       	andi	r18, 0xE0	; 224
    1cfe:	89 85       	ldd	r24, Y+9	; 0x09
    1d00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d02:	03 96       	adiw	r24, 0x03	; 3
    1d04:	fc 01       	movw	r30, r24
    1d06:	80 81       	ld	r24, Z
    1d08:	86 95       	lsr	r24
    1d0a:	86 95       	lsr	r24
    1d0c:	86 95       	lsr	r24
    1d0e:	82 0f       	add	r24, r18
    1d10:	8c 93       	st	X, r24
    1d12:	a2 ef       	ldi	r26, 0xF2	; 242
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	89 85       	ldd	r24, Y+9	; 0x09
    1d18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d1a:	03 96       	adiw	r24, 0x03	; 3
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	80 81       	ld	r24, Z
    1d20:	82 95       	swap	r24
    1d22:	88 0f       	add	r24, r24
    1d24:	80 7e       	andi	r24, 0xE0	; 224
    1d26:	8c 93       	st	X, r24
    1d28:	af ee       	ldi	r26, 0xEF	; 239
    1d2a:	b0 e0       	ldi	r27, 0x00	; 0
    1d2c:	ef ee       	ldi	r30, 0xEF	; 239
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	80 81       	ld	r24, Z
    1d32:	8f 7e       	andi	r24, 0xEF	; 239
    1d34:	8c 93       	st	X, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    1d36:	1b 82       	std	Y+3, r1	; 0x03
    1d38:	11 c0       	rjmp	.+34     	; 0x1d5c <__stack+0xc5d>
    1d3a:	aa ef       	ldi	r26, 0xFA	; 250
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	e9 85       	ldd	r30, Y+9	; 0x09
    1d40:	fa 85       	ldd	r31, Y+10	; 0x0a
    1d42:	20 85       	ldd	r18, Z+8	; 0x08
    1d44:	31 85       	ldd	r19, Z+9	; 0x09
    1d46:	8b 81       	ldd	r24, Y+3	; 0x03
    1d48:	88 2f       	mov	r24, r24
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	f9 01       	movw	r30, r18
    1d4e:	e8 0f       	add	r30, r24
    1d50:	f9 1f       	adc	r31, r25
    1d52:	80 81       	ld	r24, Z
    1d54:	8c 93       	st	X, r24
    1d56:	8b 81       	ldd	r24, Y+3	; 0x03
    1d58:	8f 5f       	subi	r24, 0xFF	; 255
    1d5a:	8b 83       	std	Y+3, r24	; 0x03
    1d5c:	e9 85       	ldd	r30, Y+9	; 0x09
    1d5e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1d60:	97 81       	ldd	r25, Z+7	; 0x07
    1d62:	8b 81       	ldd	r24, Y+3	; 0x03
    1d64:	89 17       	cp	r24, r25
    1d66:	48 f3       	brcs	.-46     	; 0x1d3a <__stack+0xc3b>
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    1d68:	8f ef       	ldi	r24, 0xFF	; 255
    1d6a:	9f ef       	ldi	r25, 0xFF	; 255
    1d6c:	af ef       	ldi	r26, 0xFF	; 255
    1d6e:	bf ef       	ldi	r27, 0xFF	; 255
    1d70:	8d 83       	std	Y+5, r24	; 0x05
    1d72:	9e 83       	std	Y+6, r25	; 0x06
    1d74:	af 83       	std	Y+7, r26	; 0x07
    1d76:	b8 87       	std	Y+8, r27	; 0x08
    1d78:	a7 ef       	ldi	r26, 0xF7	; 247
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	ce 01       	movw	r24, r28
    1d7e:	05 96       	adiw	r24, 0x05	; 5
    1d80:	fc 01       	movw	r30, r24
    1d82:	33 96       	adiw	r30, 0x03	; 3
    1d84:	80 81       	ld	r24, Z
    1d86:	28 2f       	mov	r18, r24
    1d88:	22 0f       	add	r18, r18
    1d8a:	22 0f       	add	r18, r18
    1d8c:	22 0f       	add	r18, r18
    1d8e:	ce 01       	movw	r24, r28
    1d90:	05 96       	adiw	r24, 0x05	; 5
    1d92:	fc 01       	movw	r30, r24
    1d94:	32 96       	adiw	r30, 0x02	; 2
    1d96:	80 81       	ld	r24, Z
    1d98:	82 95       	swap	r24
    1d9a:	86 95       	lsr	r24
    1d9c:	87 70       	andi	r24, 0x07	; 7
    1d9e:	82 0f       	add	r24, r18
    1da0:	8c 93       	st	X, r24
    1da2:	a6 ef       	ldi	r26, 0xF6	; 246
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	ce 01       	movw	r24, r28
    1da8:	05 96       	adiw	r24, 0x05	; 5
    1daa:	fc 01       	movw	r30, r24
    1dac:	32 96       	adiw	r30, 0x02	; 2
    1dae:	80 81       	ld	r24, Z
    1db0:	28 2f       	mov	r18, r24
    1db2:	22 0f       	add	r18, r18
    1db4:	22 0f       	add	r18, r18
    1db6:	22 0f       	add	r18, r18
    1db8:	ce 01       	movw	r24, r28
    1dba:	05 96       	adiw	r24, 0x05	; 5
    1dbc:	fc 01       	movw	r30, r24
    1dbe:	31 96       	adiw	r30, 0x01	; 1
    1dc0:	80 81       	ld	r24, Z
    1dc2:	82 95       	swap	r24
    1dc4:	86 95       	lsr	r24
    1dc6:	87 70       	andi	r24, 0x07	; 7
    1dc8:	82 0f       	add	r24, r18
    1dca:	8c 93       	st	X, r24
    1dcc:	a5 ef       	ldi	r26, 0xF5	; 245
    1dce:	b0 e0       	ldi	r27, 0x00	; 0
    1dd0:	ce 01       	movw	r24, r28
    1dd2:	05 96       	adiw	r24, 0x05	; 5
    1dd4:	fc 01       	movw	r30, r24
    1dd6:	31 96       	adiw	r30, 0x01	; 1
    1dd8:	80 81       	ld	r24, Z
    1dda:	98 2f       	mov	r25, r24
    1ddc:	99 0f       	add	r25, r25
    1dde:	99 0f       	add	r25, r25
    1de0:	99 0f       	add	r25, r25
    1de2:	fe 01       	movw	r30, r28
    1de4:	35 96       	adiw	r30, 0x05	; 5
    1de6:	80 81       	ld	r24, Z
    1de8:	82 95       	swap	r24
    1dea:	86 95       	lsr	r24
    1dec:	87 70       	andi	r24, 0x07	; 7
    1dee:	89 0f       	add	r24, r25
    1df0:	8c 93       	st	X, r24
    1df2:	a4 ef       	ldi	r26, 0xF4	; 244
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	fe 01       	movw	r30, r28
    1df8:	35 96       	adiw	r30, 0x05	; 5
    1dfa:	80 81       	ld	r24, Z
    1dfc:	88 0f       	add	r24, r24
    1dfe:	88 0f       	add	r24, r24
    1e00:	88 0f       	add	r24, r24
    1e02:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    1e04:	af ee       	ldi	r26, 0xEF	; 239
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	ef ee       	ldi	r30, 0xEF	; 239
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	90 81       	ld	r25, Z
    1e0e:	e9 85       	ldd	r30, Y+9	; 0x09
    1e10:	fa 85       	ldd	r31, Y+10	; 0x0a
    1e12:	87 81       	ldd	r24, Z+7	; 0x07
    1e14:	89 2b       	or	r24, r25
    1e16:	8c 93       	st	X, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1e18:	e9 85       	ldd	r30, Y+9	; 0x09
    1e1a:	fa 85       	ldd	r31, Y+10	; 0x0a
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	83 87       	std	Z+11, r24	; 0x0b
    1e20:	a4 ef       	ldi	r26, 0xF4	; 244
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	e4 ef       	ldi	r30, 0xF4	; 244
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	84 60       	ori	r24, 0x04	; 4
    1e2c:	8c 93       	st	X, r24
    1e2e:	a0 ef       	ldi	r26, 0xF0	; 240
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	e0 ef       	ldi	r30, 0xF0	; 240
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	84 60       	ori	r24, 0x04	; 4
    1e3a:	8c 93       	st	X, r24
          Can_set_rplv();
    1e3c:	af ee       	ldi	r26, 0xEF	; 239
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	ef ee       	ldi	r30, 0xEF	; 239
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	80 81       	ld	r24, Z
    1e46:	80 62       	ori	r24, 0x20	; 32
    1e48:	8c 93       	st	X, r24
          Can_set_idemsk();
    1e4a:	a4 ef       	ldi	r26, 0xF4	; 244
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	e4 ef       	ldi	r30, 0xF4	; 244
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	81 60       	ori	r24, 0x01	; 1
    1e56:	8c 93       	st	X, r24
          Can_config_rx();       
    1e58:	af ee       	ldi	r26, 0xEF	; 239
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	ef ee       	ldi	r30, 0xEF	; 239
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	8f 73       	andi	r24, 0x3F	; 63
    1e64:	8c 93       	st	X, r24
    1e66:	af ee       	ldi	r26, 0xEF	; 239
    1e68:	b0 e0       	ldi	r27, 0x00	; 0
    1e6a:	ef ee       	ldi	r30, 0xEF	; 239
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	80 81       	ld	r24, Z
    1e70:	80 68       	ori	r24, 0x80	; 128
    1e72:	8c 93       	st	X, r24
    1e74:	0b c0       	rjmp	.+22     	; 0x1e8c <__stack+0xd8d>
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    1e76:	e9 85       	ldd	r30, Y+9	; 0x09
    1e78:	fa 85       	ldd	r31, Y+10	; 0x0a
    1e7a:	12 86       	std	Z+10, r1	; 0x0a
    1e7c:	07 c0       	rjmp	.+14     	; 0x1e8c <__stack+0xd8d>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    1e7e:	e9 85       	ldd	r30, Y+9	; 0x09
    1e80:	fa 85       	ldd	r31, Y+10	; 0x0a
    1e82:	8f e1       	ldi	r24, 0x1F	; 31
    1e84:	82 87       	std	Z+10, r24	; 0x0a
      return CAN_CMD_REFUSED;
    1e86:	9f ef       	ldi	r25, 0xFF	; 255
    1e88:	9b 87       	std	Y+11, r25	; 0x0b
    1e8a:	01 c0       	rjmp	.+2      	; 0x1e8e <__stack+0xd8f>
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1e8c:	1b 86       	std	Y+11, r1	; 0x0b
    1e8e:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    1e90:	2d 96       	adiw	r28, 0x0d	; 13
    1e92:	0f b6       	in	r0, 0x3f	; 63
    1e94:	f8 94       	cli
    1e96:	de bf       	out	0x3e, r29	; 62
    1e98:	0f be       	out	0x3f, r0	; 63
    1e9a:	cd bf       	out	0x3d, r28	; 61
    1e9c:	cf 91       	pop	r28
    1e9e:	df 91       	pop	r29
    1ea0:	08 95       	ret

00001ea2 <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
U8 can_get_status (st_cmd_t* cmd)
{
    1ea2:	df 93       	push	r29
    1ea4:	cf 93       	push	r28
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62
    1eaa:	27 97       	sbiw	r28, 0x07	; 7
    1eac:	0f b6       	in	r0, 0x3f	; 63
    1eae:	f8 94       	cli
    1eb0:	de bf       	out	0x3e, r29	; 62
    1eb2:	0f be       	out	0x3f, r0	; 63
    1eb4:	cd bf       	out	0x3d, r28	; 61
    1eb6:	9c 83       	std	Y+4, r25	; 0x04
    1eb8:	8b 83       	std	Y+3, r24	; 0x03
    U8 a_status, rtn_val;
     
    a_status = cmd->status;
    1eba:	eb 81       	ldd	r30, Y+3	; 0x03
    1ebc:	fc 81       	ldd	r31, Y+4	; 0x04
    1ebe:	82 85       	ldd	r24, Z+10	; 0x0a
    1ec0:	8a 83       	std	Y+2, r24	; 0x02
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    1ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec4:	88 23       	and	r24, r24
    1ec6:	31 f0       	breq	.+12     	; 0x1ed4 <can_get_status+0x32>
    1ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eca:	8f 31       	cpi	r24, 0x1F	; 31
    1ecc:	19 f0       	breq	.+6      	; 0x1ed4 <can_get_status+0x32>
    1ece:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed0:	8f 3f       	cpi	r24, 0xFF	; 255
    1ed2:	19 f4       	brne	.+6      	; 0x1eda <can_get_status+0x38>
    {
        return CAN_STATUS_ERROR;
    1ed4:	22 e0       	ldi	r18, 0x02	; 2
    1ed6:	2f 83       	std	Y+7, r18	; 0x07
    1ed8:	fb c0       	rjmp	.+502    	; 0x20d0 <can_get_status+0x22e>
    }

    Can_set_mob(cmd->handle);
    1eda:	ad ee       	ldi	r26, 0xED	; 237
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	eb 81       	ldd	r30, Y+3	; 0x03
    1ee0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ee2:	80 81       	ld	r24, Z
    1ee4:	82 95       	swap	r24
    1ee6:	80 7f       	andi	r24, 0xF0	; 240
    1ee8:	8c 93       	st	X, r24
    a_status = can_get_mob_status();
    1eea:	0e 94 18 03 	call	0x630	; 0x630 <can_get_mob_status>
    1eee:	8a 83       	std	Y+2, r24	; 0x02
    
    switch (a_status)
    1ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef2:	28 2f       	mov	r18, r24
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	3e 83       	std	Y+6, r19	; 0x06
    1ef8:	2d 83       	std	Y+5, r18	; 0x05
    1efa:	8d 81       	ldd	r24, Y+5	; 0x05
    1efc:	9e 81       	ldd	r25, Y+6	; 0x06
    1efe:	80 32       	cpi	r24, 0x20	; 32
    1f00:	91 05       	cpc	r25, r1
    1f02:	c9 f0       	breq	.+50     	; 0x1f36 <can_get_status+0x94>
    1f04:	2d 81       	ldd	r18, Y+5	; 0x05
    1f06:	3e 81       	ldd	r19, Y+6	; 0x06
    1f08:	21 32       	cpi	r18, 0x21	; 33
    1f0a:	31 05       	cpc	r19, r1
    1f0c:	2c f4       	brge	.+10     	; 0x1f18 <can_get_status+0x76>
    1f0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f10:	9e 81       	ldd	r25, Y+6	; 0x06
    1f12:	00 97       	sbiw	r24, 0x00	; 0
    1f14:	69 f0       	breq	.+26     	; 0x1f30 <can_get_status+0x8e>
    1f16:	ca c0       	rjmp	.+404    	; 0x20ac <can_get_status+0x20a>
    1f18:	2d 81       	ldd	r18, Y+5	; 0x05
    1f1a:	3e 81       	ldd	r19, Y+6	; 0x06
    1f1c:	20 34       	cpi	r18, 0x40	; 64
    1f1e:	31 05       	cpc	r19, r1
    1f20:	09 f4       	brne	.+2      	; 0x1f24 <can_get_status+0x82>
    1f22:	b4 c0       	rjmp	.+360    	; 0x208c <can_get_status+0x1ea>
    1f24:	8d 81       	ldd	r24, Y+5	; 0x05
    1f26:	9e 81       	ldd	r25, Y+6	; 0x06
    1f28:	80 3a       	cpi	r24, 0xA0	; 160
    1f2a:	91 05       	cpc	r25, r1
    1f2c:	21 f0       	breq	.+8      	; 0x1f36 <can_get_status+0x94>
    1f2e:	be c0       	rjmp	.+380    	; 0x20ac <can_get_status+0x20a>
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	89 83       	std	Y+1, r24	; 0x01
    1f34:	cb c0       	rjmp	.+406    	; 0x20cc <can_get_status+0x22a>
            break;
        //---------------      
        case MOB_RX_COMPLETED:     
        case MOB_RX_COMPLETED_DLCW:
            cmd->dlc = Can_get_dlc();
    1f36:	ef ee       	ldi	r30, 0xEF	; 239
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	80 81       	ld	r24, Z
    1f3c:	8f 70       	andi	r24, 0x0F	; 15
    1f3e:	eb 81       	ldd	r30, Y+3	; 0x03
    1f40:	fc 81       	ldd	r31, Y+4	; 0x04
    1f42:	87 83       	std	Z+7, r24	; 0x07
            can_get_data(cmd->pt_data);
    1f44:	eb 81       	ldd	r30, Y+3	; 0x03
    1f46:	fc 81       	ldd	r31, Y+4	; 0x04
    1f48:	80 85       	ldd	r24, Z+8	; 0x08
    1f4a:	91 85       	ldd	r25, Z+9	; 0x09
    1f4c:	0e 94 4e 03 	call	0x69c	; 0x69c <can_get_data>
            cmd->ctrl.rtr = Can_get_rtr();
    1f50:	e0 ef       	ldi	r30, 0xF0	; 240
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	88 2f       	mov	r24, r24
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	84 70       	andi	r24, 0x04	; 4
    1f5c:	90 70       	andi	r25, 0x00	; 0
    1f5e:	95 95       	asr	r25
    1f60:	87 95       	ror	r24
    1f62:	95 95       	asr	r25
    1f64:	87 95       	ror	r24
    1f66:	eb 81       	ldd	r30, Y+3	; 0x03
    1f68:	fc 81       	ldd	r31, Y+4	; 0x04
    1f6a:	83 87       	std	Z+11, r24	; 0x0b
            if (Can_get_ide()) // if extended frame
    1f6c:	ef ee       	ldi	r30, 0xEF	; 239
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	88 2f       	mov	r24, r24
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	80 71       	andi	r24, 0x10	; 16
    1f78:	90 70       	andi	r25, 0x00	; 0
    1f7a:	95 95       	asr	r25
    1f7c:	87 95       	ror	r24
    1f7e:	95 95       	asr	r25
    1f80:	87 95       	ror	r24
    1f82:	95 95       	asr	r25
    1f84:	87 95       	ror	r24
    1f86:	95 95       	asr	r25
    1f88:	87 95       	ror	r24
    1f8a:	00 97       	sbiw	r24, 0x00	; 0
    1f8c:	09 f4       	brne	.+2      	; 0x1f90 <can_get_status+0xee>
    1f8e:	4c c0       	rjmp	.+152    	; 0x2028 <can_get_status+0x186>
            {
                cmd->ctrl.ide = 1; // extended frame
    1f90:	eb 81       	ldd	r30, Y+3	; 0x03
    1f92:	fc 81       	ldd	r31, Y+4	; 0x04
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	84 87       	std	Z+12, r24	; 0x0c
                Can_get_ext_id(cmd->id.ext);
    1f98:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9c:	03 96       	adiw	r24, 0x03	; 3
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	13 96       	adiw	r26, 0x03	; 3
    1fa2:	e3 ef       	ldi	r30, 0xF3	; 243
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	86 95       	lsr	r24
    1faa:	86 95       	lsr	r24
    1fac:	86 95       	lsr	r24
    1fae:	8c 93       	st	X, r24
    1fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb4:	03 96       	adiw	r24, 0x03	; 3
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	12 96       	adiw	r26, 0x02	; 2
    1fba:	e2 ef       	ldi	r30, 0xF2	; 242
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	98 2f       	mov	r25, r24
    1fc2:	96 95       	lsr	r25
    1fc4:	96 95       	lsr	r25
    1fc6:	96 95       	lsr	r25
    1fc8:	e3 ef       	ldi	r30, 0xF3	; 243
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	80 81       	ld	r24, Z
    1fce:	82 95       	swap	r24
    1fd0:	88 0f       	add	r24, r24
    1fd2:	80 7e       	andi	r24, 0xE0	; 224
    1fd4:	89 0f       	add	r24, r25
    1fd6:	8c 93       	st	X, r24
    1fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fda:	9c 81       	ldd	r25, Y+4	; 0x04
    1fdc:	03 96       	adiw	r24, 0x03	; 3
    1fde:	dc 01       	movw	r26, r24
    1fe0:	11 96       	adiw	r26, 0x01	; 1
    1fe2:	e1 ef       	ldi	r30, 0xF1	; 241
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	80 81       	ld	r24, Z
    1fe8:	98 2f       	mov	r25, r24
    1fea:	96 95       	lsr	r25
    1fec:	96 95       	lsr	r25
    1fee:	96 95       	lsr	r25
    1ff0:	e2 ef       	ldi	r30, 0xF2	; 242
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	80 81       	ld	r24, Z
    1ff6:	82 95       	swap	r24
    1ff8:	88 0f       	add	r24, r24
    1ffa:	80 7e       	andi	r24, 0xE0	; 224
    1ffc:	89 0f       	add	r24, r25
    1ffe:	8c 93       	st	X, r24
    2000:	8b 81       	ldd	r24, Y+3	; 0x03
    2002:	9c 81       	ldd	r25, Y+4	; 0x04
    2004:	03 96       	adiw	r24, 0x03	; 3
    2006:	dc 01       	movw	r26, r24
    2008:	e0 ef       	ldi	r30, 0xF0	; 240
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	98 2f       	mov	r25, r24
    2010:	96 95       	lsr	r25
    2012:	96 95       	lsr	r25
    2014:	96 95       	lsr	r25
    2016:	e1 ef       	ldi	r30, 0xF1	; 241
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
    201c:	82 95       	swap	r24
    201e:	88 0f       	add	r24, r24
    2020:	80 7e       	andi	r24, 0xE0	; 224
    2022:	89 0f       	add	r24, r25
    2024:	8c 93       	st	X, r24
    2026:	22 c0       	rjmp	.+68     	; 0x206c <can_get_status+0x1ca>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    2028:	eb 81       	ldd	r30, Y+3	; 0x03
    202a:	fc 81       	ldd	r31, Y+4	; 0x04
    202c:	14 86       	std	Z+12, r1	; 0x0c
                    Can_get_std_id(cmd->id.std);
    202e:	8b 81       	ldd	r24, Y+3	; 0x03
    2030:	9c 81       	ldd	r25, Y+4	; 0x04
    2032:	03 96       	adiw	r24, 0x03	; 3
    2034:	dc 01       	movw	r26, r24
    2036:	11 96       	adiw	r26, 0x01	; 1
    2038:	e3 ef       	ldi	r30, 0xF3	; 243
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	82 95       	swap	r24
    2040:	86 95       	lsr	r24
    2042:	87 70       	andi	r24, 0x07	; 7
    2044:	8c 93       	st	X, r24
    2046:	8b 81       	ldd	r24, Y+3	; 0x03
    2048:	9c 81       	ldd	r25, Y+4	; 0x04
    204a:	03 96       	adiw	r24, 0x03	; 3
    204c:	dc 01       	movw	r26, r24
    204e:	e2 ef       	ldi	r30, 0xF2	; 242
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	80 81       	ld	r24, Z
    2054:	98 2f       	mov	r25, r24
    2056:	92 95       	swap	r25
    2058:	96 95       	lsr	r25
    205a:	97 70       	andi	r25, 0x07	; 7
    205c:	e3 ef       	ldi	r30, 0xF3	; 243
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	80 81       	ld	r24, Z
    2062:	88 0f       	add	r24, r24
    2064:	88 0f       	add	r24, r24
    2066:	88 0f       	add	r24, r24
    2068:	89 0f       	add	r24, r25
    206a:	8c 93       	st	X, r24
                }
            // Status field of descriptor: 0x20 if Rx completed
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
    206c:	eb 81       	ldd	r30, Y+3	; 0x03
    206e:	fc 81       	ldd	r31, Y+4	; 0x04
    2070:	8a 81       	ldd	r24, Y+2	; 0x02
    2072:	82 87       	std	Z+10, r24	; 0x0a
            Can_mob_abort();        // Freed the MOB
    2074:	af ee       	ldi	r26, 0xEF	; 239
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	ef ee       	ldi	r30, 0xEF	; 239
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	8f 73       	andi	r24, 0x3F	; 63
    2080:	8c 93       	st	X, r24
            Can_clear_status_mob(); //   and reset MOb status
    2082:	ee ee       	ldi	r30, 0xEE	; 238
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_COMPLETED;
    2088:	19 82       	std	Y+1, r1	; 0x01
    208a:	20 c0       	rjmp	.+64     	; 0x20cc <can_get_status+0x22a>
            break;
        //---------------      
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    208c:	eb 81       	ldd	r30, Y+3	; 0x03
    208e:	fc 81       	ldd	r31, Y+4	; 0x04
    2090:	8a 81       	ldd	r24, Y+2	; 0x02
    2092:	82 87       	std	Z+10, r24	; 0x0a
            Can_mob_abort();        // Freed the MOB
    2094:	af ee       	ldi	r26, 0xEF	; 239
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	ef ee       	ldi	r30, 0xEF	; 239
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	8f 73       	andi	r24, 0x3F	; 63
    20a0:	8c 93       	st	X, r24
            Can_clear_status_mob(); //   and reset MOb status
    20a2:	ee ee       	ldi	r30, 0xEE	; 238
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_COMPLETED;
    20a8:	19 82       	std	Y+1, r1	; 0x01
    20aa:	10 c0       	rjmp	.+32     	; 0x20cc <can_get_status+0x22a>
            break;
        //---------------      
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    20ac:	eb 81       	ldd	r30, Y+3	; 0x03
    20ae:	fc 81       	ldd	r31, Y+4	; 0x04
    20b0:	8a 81       	ldd	r24, Y+2	; 0x02
    20b2:	82 87       	std	Z+10, r24	; 0x0a
            Can_mob_abort();        // Freed the MOB
    20b4:	af ee       	ldi	r26, 0xEF	; 239
    20b6:	b0 e0       	ldi	r27, 0x00	; 0
    20b8:	ef ee       	ldi	r30, 0xEF	; 239
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 81       	ld	r24, Z
    20be:	8f 73       	andi	r24, 0x3F	; 63
    20c0:	8c 93       	st	X, r24
            Can_clear_status_mob(); //   and reset MOb status
    20c2:	ee ee       	ldi	r30, 0xEE	; 238
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_ERROR;
    20c8:	82 e0       	ldi	r24, 0x02	; 2
    20ca:	89 83       	std	Y+1, r24	; 0x01
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
    20cc:	99 81       	ldd	r25, Y+1	; 0x01
    20ce:	9f 83       	std	Y+7, r25	; 0x07
    20d0:	8f 81       	ldd	r24, Y+7	; 0x07
}
    20d2:	27 96       	adiw	r28, 0x07	; 7
    20d4:	0f b6       	in	r0, 0x3f	; 63
    20d6:	f8 94       	cli
    20d8:	de bf       	out	0x3e, r29	; 62
    20da:	0f be       	out	0x3f, r0	; 63
    20dc:	cd bf       	out	0x3d, r28	; 61
    20de:	cf 91       	pop	r28
    20e0:	df 91       	pop	r29
    20e2:	08 95       	ret

000020e4 <led_init>:
//!
//! @return  none
//!
//------------------------------------------------------------------------------
void led_init(void)
{
    20e4:	df 93       	push	r29
    20e6:	cf 93       	push	r28
    20e8:	cd b7       	in	r28, 0x3d	; 61
    20ea:	de b7       	in	r29, 0x3e	; 62
    //-- Set direction
    LED_PORT_DIR = 0xFF;
    20ec:	e1 e2       	ldi	r30, 0x21	; 33
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	8f ef       	ldi	r24, 0xFF	; 255
    20f2:	80 83       	st	Z, r24
    //-- Clear LEDs.
    LED_PORT_OUT = 0x00;    
    20f4:	e2 e2       	ldi	r30, 0x22	; 34
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	10 82       	st	Z, r1
}
    20fa:	cf 91       	pop	r28
    20fc:	df 91       	pop	r29
    20fe:	08 95       	ret

00002100 <write_led>:
//!
//! @return (none)
//!
//------------------------------------------------------------------------------
void write_led(U8 led_display)
{
    2100:	df 93       	push	r29
    2102:	cf 93       	push	r28
    2104:	0f 92       	push	r0
    2106:	cd b7       	in	r28, 0x3d	; 61
    2108:	de b7       	in	r29, 0x3e	; 62
    210a:	89 83       	std	Y+1, r24	; 0x01
    LED_PORT_OUT = led_display;
    210c:	e2 e2       	ldi	r30, 0x22	; 34
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	89 81       	ldd	r24, Y+1	; 0x01
    2112:	80 83       	st	Z, r24
}
    2114:	0f 90       	pop	r0
    2116:	cf 91       	pop	r28
    2118:	df 91       	pop	r29
    211a:	08 95       	ret

0000211c <swap_nibble_led>:
//!
//! @return  none
//!
//------------------------------------------------------------------------------
void swap_nibble_led(void)
{
    211c:	df 93       	push	r29
    211e:	cf 93       	push	r28
    2120:	cd b7       	in	r28, 0x3d	; 61
    2122:	de b7       	in	r29, 0x3e	; 62
    LED_PORT_OUT = (LED_PORT_IN << 4) | (LED_PORT_IN >> 4);
    2124:	a2 e2       	ldi	r26, 0x22	; 34
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	e0 e2       	ldi	r30, 0x20	; 32
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	88 2f       	mov	r24, r24
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	82 95       	swap	r24
    2134:	92 95       	swap	r25
    2136:	90 7f       	andi	r25, 0xF0	; 240
    2138:	98 27       	eor	r25, r24
    213a:	80 7f       	andi	r24, 0xF0	; 240
    213c:	98 27       	eor	r25, r24
    213e:	98 2f       	mov	r25, r24
    2140:	e0 e2       	ldi	r30, 0x20	; 32
    2142:	f0 e0       	ldi	r31, 0x00	; 0
    2144:	80 81       	ld	r24, Z
    2146:	82 95       	swap	r24
    2148:	8f 70       	andi	r24, 0x0F	; 15
    214a:	89 2b       	or	r24, r25
    214c:	8c 93       	st	X, r24
}
    214e:	cf 91       	pop	r28
    2150:	df 91       	pop	r29
    2152:	08 95       	ret

00002154 <toggle_led>:
//!
//! @return  none
//!
//------------------------------------------------------------------------------
void toggle_led(void)
{
    2154:	df 93       	push	r29
    2156:	cf 93       	push	r28
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62
    LED_PORT_IN = 0xFF;
    215c:	e0 e2       	ldi	r30, 0x20	; 32
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	8f ef       	ldi	r24, 0xFF	; 255
    2162:	80 83       	st	Z, r24
}
    2164:	cf 91       	pop	r28
    2166:	df 91       	pop	r29
    2168:	08 95       	ret

0000216a <write_led_number>:
//!             FALSE: led_number >= 8 or led_level >=2,
//!             TRUE:  In range
//!
//------------------------------------------------------------------------------
U8 write_led_number(U8 led_number,Bool led_level)
{
    216a:	df 93       	push	r29
    216c:	cf 93       	push	r28
    216e:	00 d0       	rcall	.+0      	; 0x2170 <write_led_number+0x6>
    2170:	0f 92       	push	r0
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
    2176:	8a 83       	std	Y+2, r24	; 0x02
    2178:	6b 83       	std	Y+3, r22	; 0x03
U8 range_error;
    
    range_error = FALSE;
    217a:	19 82       	std	Y+1, r1	; 0x01
    if (led_number < 8)
    217c:	8a 81       	ldd	r24, Y+2	; 0x02
    217e:	88 30       	cpi	r24, 0x08	; 8
    2180:	88 f5       	brcc	.+98     	; 0x21e4 <write_led_number+0x7a>
    {
        if (led_level==0)
    2182:	8b 81       	ldd	r24, Y+3	; 0x03
    2184:	88 23       	and	r24, r24
    2186:	b1 f4       	brne	.+44     	; 0x21b4 <write_led_number+0x4a>
        {
            range_error = TRUE;
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	89 83       	std	Y+1, r24	; 0x01
            LED_PORT_OUT &= ~(1<<led_number);
    218c:	a2 e2       	ldi	r26, 0x22	; 34
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	e2 e2       	ldi	r30, 0x22	; 34
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	80 81       	ld	r24, Z
    2196:	48 2f       	mov	r20, r24
    2198:	8a 81       	ldd	r24, Y+2	; 0x02
    219a:	28 2f       	mov	r18, r24
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	02 2e       	mov	r0, r18
    21a4:	02 c0       	rjmp	.+4      	; 0x21aa <write_led_number+0x40>
    21a6:	88 0f       	add	r24, r24
    21a8:	99 1f       	adc	r25, r25
    21aa:	0a 94       	dec	r0
    21ac:	e2 f7       	brpl	.-8      	; 0x21a6 <write_led_number+0x3c>
    21ae:	80 95       	com	r24
    21b0:	84 23       	and	r24, r20
    21b2:	8c 93       	st	X, r24
        }
        if (led_level==1)
    21b4:	8b 81       	ldd	r24, Y+3	; 0x03
    21b6:	81 30       	cpi	r24, 0x01	; 1
    21b8:	a9 f4       	brne	.+42     	; 0x21e4 <write_led_number+0x7a>
        {
            range_error = TRUE;
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	89 83       	std	Y+1, r24	; 0x01
            LED_PORT_OUT |= (1<<led_number);
    21be:	a2 e2       	ldi	r26, 0x22	; 34
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	e2 e2       	ldi	r30, 0x22	; 34
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	80 81       	ld	r24, Z
    21c8:	48 2f       	mov	r20, r24
    21ca:	8a 81       	ldd	r24, Y+2	; 0x02
    21cc:	28 2f       	mov	r18, r24
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	02 2e       	mov	r0, r18
    21d6:	02 c0       	rjmp	.+4      	; 0x21dc <write_led_number+0x72>
    21d8:	88 0f       	add	r24, r24
    21da:	99 1f       	adc	r25, r25
    21dc:	0a 94       	dec	r0
    21de:	e2 f7       	brpl	.-8      	; 0x21d8 <write_led_number+0x6e>
    21e0:	84 2b       	or	r24, r20
    21e2:	8c 93       	st	X, r24
        }
    }
    return range_error;
    21e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    21e6:	0f 90       	pop	r0
    21e8:	0f 90       	pop	r0
    21ea:	0f 90       	pop	r0
    21ec:	cf 91       	pop	r28
    21ee:	df 91       	pop	r29
    21f0:	08 95       	ret

000021f2 <wait_for>:
//!
//! @return  none 
//!
//------------------------------------------------------------------------------
void wait_for(U16 ms_count)
{
    21f2:	df 93       	push	r29
    21f4:	cf 93       	push	r28
    21f6:	cd b7       	in	r28, 0x3d	; 61
    21f8:	de b7       	in	r29, 0x3e	; 62
    21fa:	2a 97       	sbiw	r28, 0x0a	; 10
    21fc:	0f b6       	in	r0, 0x3f	; 63
    21fe:	f8 94       	cli
    2200:	de bf       	out	0x3e, r29	; 62
    2202:	0f be       	out	0x3f, r0	; 63
    2204:	cd bf       	out	0x3d, r28	; 61
    2206:	9a 87       	std	Y+10, r25	; 0x0a
    2208:	89 87       	std	Y+9, r24	; 0x09
U32 temp;
U16 i;
U8  j, k;

    if (rtc_running == ON)
    220a:	80 91 5a 03 	lds	r24, 0x035A
    220e:	81 30       	cpi	r24, 0x01	; 1
    2210:	09 f0       	breq	.+2      	; 0x2214 <wait_for+0x22>
    2212:	45 c0       	rjmp	.+138    	; 0x229e <wait_for+0xac>
    {
        Disable_interrupt(); temp = rtc_tics; Enable_interrupt();    //-- Get atomic U32 value
    2214:	f8 94       	cli
    2216:	80 91 75 03 	lds	r24, 0x0375
    221a:	90 91 76 03 	lds	r25, 0x0376
    221e:	a0 91 77 03 	lds	r26, 0x0377
    2222:	b0 91 78 03 	lds	r27, 0x0378
    2226:	8d 83       	std	Y+5, r24	; 0x05
    2228:	9e 83       	std	Y+6, r25	; 0x06
    222a:	af 83       	std	Y+7, r26	; 0x07
    222c:	b8 87       	std	Y+8, r27	; 0x08
    222e:	78 94       	sei
        temp += ((U32)(ms_count));
    2230:	89 85       	ldd	r24, Y+9	; 0x09
    2232:	9a 85       	ldd	r25, Y+10	; 0x0a
    2234:	9c 01       	movw	r18, r24
    2236:	40 e0       	ldi	r20, 0x00	; 0
    2238:	50 e0       	ldi	r21, 0x00	; 0
    223a:	8d 81       	ldd	r24, Y+5	; 0x05
    223c:	9e 81       	ldd	r25, Y+6	; 0x06
    223e:	af 81       	ldd	r26, Y+7	; 0x07
    2240:	b8 85       	ldd	r27, Y+8	; 0x08
    2242:	82 0f       	add	r24, r18
    2244:	93 1f       	adc	r25, r19
    2246:	a4 1f       	adc	r26, r20
    2248:	b5 1f       	adc	r27, r21
    224a:	8d 83       	std	Y+5, r24	; 0x05
    224c:	9e 83       	std	Y+6, r25	; 0x06
    224e:	af 83       	std	Y+7, r26	; 0x07
    2250:	b8 87       	std	Y+8, r27	; 0x08
        while (1)
        {
            Disable_interrupt();    //-- Get atomic U32 values
    2252:	f8 94       	cli
            if (rtc_tics == temp) break;                //-- Standart EXIT
    2254:	20 91 75 03 	lds	r18, 0x0375
    2258:	30 91 76 03 	lds	r19, 0x0376
    225c:	40 91 77 03 	lds	r20, 0x0377
    2260:	50 91 78 03 	lds	r21, 0x0378
    2264:	8d 81       	ldd	r24, Y+5	; 0x05
    2266:	9e 81       	ldd	r25, Y+6	; 0x06
    2268:	af 81       	ldd	r26, Y+7	; 0x07
    226a:	b8 85       	ldd	r27, Y+8	; 0x08
    226c:	28 17       	cp	r18, r24
    226e:	39 07       	cpc	r19, r25
    2270:	4a 07       	cpc	r20, r26
    2272:	5b 07       	cpc	r21, r27
    2274:	99 f1       	breq	.+102    	; 0x22dc <wait_for+0xea>
            if (rtc_tics == ((U32)(ms_count)) ) break;  //-- EXIT if overflow (not right)
    2276:	89 85       	ldd	r24, Y+9	; 0x09
    2278:	9a 85       	ldd	r25, Y+10	; 0x0a
    227a:	9c 01       	movw	r18, r24
    227c:	40 e0       	ldi	r20, 0x00	; 0
    227e:	50 e0       	ldi	r21, 0x00	; 0
    2280:	80 91 75 03 	lds	r24, 0x0375
    2284:	90 91 76 03 	lds	r25, 0x0376
    2288:	a0 91 77 03 	lds	r26, 0x0377
    228c:	b0 91 78 03 	lds	r27, 0x0378
    2290:	28 17       	cp	r18, r24
    2292:	39 07       	cpc	r19, r25
    2294:	4a 07       	cpc	r20, r26
    2296:	5b 07       	cpc	r21, r27
    2298:	09 f1       	breq	.+66     	; 0x22dc <wait_for+0xea>
            Enable_interrupt();
    229a:	78 94       	sei
    229c:	da cf       	rjmp	.-76     	; 0x2252 <wait_for+0x60>
        }
    }
    else    //-- No RTC, enabling something almost equivalent but not right.
    {
        for (i=0;i<ms_count;i++)
    229e:	1c 82       	std	Y+4, r1	; 0x04
    22a0:	1b 82       	std	Y+3, r1	; 0x03
    22a2:	15 c0       	rjmp	.+42     	; 0x22ce <wait_for+0xdc>
        {
            for (j=0;j<(U8)(FOSC/1000);j++)
    22a4:	1a 82       	std	Y+2, r1	; 0x02
    22a6:	0b c0       	rjmp	.+22     	; 0x22be <wait_for+0xcc>
            {
                for (k=0; k<90;k++);
    22a8:	19 82       	std	Y+1, r1	; 0x01
    22aa:	03 c0       	rjmp	.+6      	; 0x22b2 <wait_for+0xc0>
    22ac:	89 81       	ldd	r24, Y+1	; 0x01
    22ae:	8f 5f       	subi	r24, 0xFF	; 255
    22b0:	89 83       	std	Y+1, r24	; 0x01
    22b2:	89 81       	ldd	r24, Y+1	; 0x01
    22b4:	8a 35       	cpi	r24, 0x5A	; 90
    22b6:	d0 f3       	brcs	.-12     	; 0x22ac <wait_for+0xba>
    }
    else    //-- No RTC, enabling something almost equivalent but not right.
    {
        for (i=0;i<ms_count;i++)
        {
            for (j=0;j<(U8)(FOSC/1000);j++)
    22b8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ba:	8f 5f       	subi	r24, 0xFF	; 255
    22bc:	8a 83       	std	Y+2, r24	; 0x02
    22be:	8a 81       	ldd	r24, Y+2	; 0x02
    22c0:	88 30       	cpi	r24, 0x08	; 8
    22c2:	90 f3       	brcs	.-28     	; 0x22a8 <wait_for+0xb6>
            Enable_interrupt();
        }
    }
    else    //-- No RTC, enabling something almost equivalent but not right.
    {
        for (i=0;i<ms_count;i++)
    22c4:	8b 81       	ldd	r24, Y+3	; 0x03
    22c6:	9c 81       	ldd	r25, Y+4	; 0x04
    22c8:	01 96       	adiw	r24, 0x01	; 1
    22ca:	9c 83       	std	Y+4, r25	; 0x04
    22cc:	8b 83       	std	Y+3, r24	; 0x03
    22ce:	2b 81       	ldd	r18, Y+3	; 0x03
    22d0:	3c 81       	ldd	r19, Y+4	; 0x04
    22d2:	89 85       	ldd	r24, Y+9	; 0x09
    22d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d6:	28 17       	cp	r18, r24
    22d8:	39 07       	cpc	r19, r25
    22da:	20 f3       	brcs	.-56     	; 0x22a4 <wait_for+0xb2>
            {
                for (k=0; k<90;k++);
            }
        }
    }
}
    22dc:	2a 96       	adiw	r28, 0x0a	; 10
    22de:	0f b6       	in	r0, 0x3f	; 63
    22e0:	f8 94       	cli
    22e2:	de bf       	out	0x3e, r29	; 62
    22e4:	0f be       	out	0x3f, r0	; 63
    22e6:	cd bf       	out	0x3d, r28	; 61
    22e8:	cf 91       	pop	r28
    22ea:	df 91       	pop	r29
    22ec:	08 95       	ret

000022ee <rtc_int_init>:
//!
//------------------------------------------------------------------------------
#if (RTC_TIMER == 2)

void rtc_int_init(void)
{
    22ee:	df 93       	push	r29
    22f0:	cf 93       	push	r28
    22f2:	00 d0       	rcall	.+0      	; 0x22f4 <rtc_int_init+0x6>
    22f4:	cd b7       	in	r28, 0x3d	; 61
    22f6:	de b7       	in	r29, 0x3e	; 62
U16 i;
    
    Disable_interrupt();
    22f8:	f8 94       	cli

    Timer8_clear();                 //-- Timer 2 cleared & initialized "OFF"
    22fa:	e0 eb       	ldi	r30, 0xB0	; 176
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	10 82       	st	Z, r1
    2300:	e2 eb       	ldi	r30, 0xB2	; 178
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	10 82       	st	Z, r1
    2306:	e3 eb       	ldi	r30, 0xB3	; 179
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	10 82       	st	Z, r1
    for (i=0;i<0xFFFF;i++);         //-- Waiting to let the Xtal stabilize after a power-on
    230c:	1a 82       	std	Y+2, r1	; 0x02
    230e:	19 82       	std	Y+1, r1	; 0x01
    2310:	05 c0       	rjmp	.+10     	; 0x231c <rtc_int_init+0x2e>
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	9a 81       	ldd	r25, Y+2	; 0x02
    2316:	01 96       	adiw	r24, 0x01	; 1
    2318:	9a 83       	std	Y+2, r25	; 0x02
    231a:	89 83       	std	Y+1, r24	; 0x01
    231c:	89 81       	ldd	r24, Y+1	; 0x01
    231e:	9a 81       	ldd	r25, Y+2	; 0x02
    2320:	2f ef       	ldi	r18, 0xFF	; 255
    2322:	8f 3f       	cpi	r24, 0xFF	; 255
    2324:	92 07       	cpc	r25, r18
    2326:	a9 f7       	brne	.-22     	; 0x2312 <rtc_int_init+0x24>
    Timer8_overflow_it_disable();   //-- Disable OCIE2A interrupt
    2328:	a0 e7       	ldi	r26, 0x70	; 112
    232a:	b0 e0       	ldi	r27, 0x00	; 0
    232c:	e0 e7       	ldi	r30, 0x70	; 112
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	80 81       	ld	r24, Z
    2332:	8e 7f       	andi	r24, 0xFE	; 254
    2334:	8c 93       	st	X, r24
    Timer8_compare_a_it_disable();  //-- Disable TOIE2 interrupt
    2336:	a0 e7       	ldi	r26, 0x70	; 112
    2338:	b0 e0       	ldi	r27, 0x00	; 0
    233a:	e0 e7       	ldi	r30, 0x70	; 112
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	80 81       	ld	r24, Z
    2340:	8d 7f       	andi	r24, 0xFD	; 253
    2342:	8c 93       	st	X, r24
    //-- Config: - CTC mode (mode 2, top=OCR2A)
    //--         - No output
    //--        (- Timer "OFF")
    Timer8_set_mode_output_a(TIMER8_COMP_MODE_NORMAL);
    2344:	a0 eb       	ldi	r26, 0xB0	; 176
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	e0 eb       	ldi	r30, 0xB0	; 176
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	80 81       	ld	r24, Z
    234e:	8f 7c       	andi	r24, 0xCF	; 207
    2350:	8c 93       	st	X, r24
    Timer8_set_waveform_mode(TIMER8_WGM_CTC_OCR);
    2352:	a0 eb       	ldi	r26, 0xB0	; 176
    2354:	b0 e0       	ldi	r27, 0x00	; 0
    2356:	e0 eb       	ldi	r30, 0xB0	; 176
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	80 81       	ld	r24, Z
    235c:	87 7b       	andi	r24, 0xB7	; 183
    235e:	88 60       	ori	r24, 0x08	; 8
    2360:	8c 93       	st	X, r24

#   if (RTC_CLOCK == 32)
   
    //--- Asynchronous external clock 32,768 KHZ
        Timer8_2_external_osc();            //-- Init RTC clock
    2362:	a6 eb       	ldi	r26, 0xB6	; 182
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	e6 eb       	ldi	r30, 0xB6	; 182
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	87 7e       	andi	r24, 0xE7	; 231
    236e:	88 60       	ori	r24, 0x08	; 8
    2370:	8c 93       	st	X, r24
        Timer8_set_compare_a(33-1);         //-- MAGIC_NUMBER !
    2372:	e3 eb       	ldi	r30, 0xB3	; 179
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	80 e2       	ldi	r24, 0x20	; 32
    2378:	80 83       	st	Z, r24
        //-- No prescaler & timer "ON"
        //-- Tic interval: ((1/32768)*MAGIC_NUMBER) sec = 1.00708008 msec
        Timer8_set_clock(TIMER8_CLKIO_BY_1);
    237a:	a0 eb       	ldi	r26, 0xB0	; 176
    237c:	b0 e0       	ldi	r27, 0x00	; 0
    237e:	e0 eb       	ldi	r30, 0xB0	; 176
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	80 81       	ld	r24, Z
    2384:	88 7f       	andi	r24, 0xF8	; 248
    2386:	81 60       	ori	r24, 0x01	; 1
    2388:	8c 93       	st	X, r24
#   else
#       error This RTC_CLOCK value is not available input for "rtc_drv.c" file

#   endif // (RTC_CLOCK ...
    
    while(Timer8_2_update_busy());    //-- Wait for TCN2UB, OCR2UB and TCR2UB to be cleared
    238a:	e6 eb       	ldi	r30, 0xB6	; 182
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	80 81       	ld	r24, Z
    2390:	88 2f       	mov	r24, r24
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	87 70       	andi	r24, 0x07	; 7
    2396:	90 70       	andi	r25, 0x00	; 0
    2398:	00 97       	sbiw	r24, 0x00	; 0
    239a:	b9 f7       	brne	.-18     	; 0x238a <rtc_int_init+0x9c>

    Timer8_clear_compare_a_it();      //-- Clear Output_Compare Interrupt-flags
    239c:	a7 e3       	ldi	r26, 0x37	; 55
    239e:	b0 e0       	ldi	r27, 0x00	; 0
    23a0:	e7 e3       	ldi	r30, 0x37	; 55
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	80 81       	ld	r24, Z
    23a6:	82 60       	ori	r24, 0x02	; 2
    23a8:	8c 93       	st	X, r24
    Timer8_compare_a_it_enable();     //-- Enable Timer2 Output_Compare Interrupt
    23aa:	a0 e7       	ldi	r26, 0x70	; 112
    23ac:	b0 e0       	ldi	r27, 0x00	; 0
    23ae:	e0 e7       	ldi	r30, 0x70	; 112
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	80 81       	ld	r24, Z
    23b4:	82 60       	ori	r24, 0x02	; 2
    23b6:	8c 93       	st	X, r24

    //-- Time setting
    rtc_tics         = 0;
    23b8:	10 92 75 03 	sts	0x0375, r1
    23bc:	10 92 76 03 	sts	0x0376, r1
    23c0:	10 92 77 03 	sts	0x0377, r1
    23c4:	10 92 78 03 	sts	0x0378, r1
    rtc_milliseconds = 0;
    23c8:	10 92 74 03 	sts	0x0374, r1
    23cc:	10 92 73 03 	sts	0x0373, r1
    rtc_seconds      = 0;
    23d0:	10 92 7a 03 	sts	0x037A, r1
    rtc_minutes      = 0;
    23d4:	10 92 71 03 	sts	0x0371, r1
    rtc_hours        = 0;
    23d8:	10 92 79 03 	sts	0x0379, r1
    rtc_days         = 0;
    23dc:	10 92 72 03 	sts	0x0372, r1

    rtc_running = ON;
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	80 93 5a 03 	sts	0x035A, r24
    Enable_interrupt();
    23e6:	78 94       	sei
}
    23e8:	0f 90       	pop	r0
    23ea:	0f 90       	pop	r0
    23ec:	cf 91       	pop	r28
    23ee:	df 91       	pop	r29
    23f0:	08 95       	ret

000023f2 <__vector_9>:
//!
//------------------------------------------------------------------------------
#if (RTC_TIMER == 2)

ISR(TIMER2_COMP_vect)
{
    23f2:	1f 92       	push	r1
    23f4:	0f 92       	push	r0
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	0f 92       	push	r0
    23fa:	11 24       	eor	r1, r1
    23fc:	2f 93       	push	r18
    23fe:	8f 93       	push	r24
    2400:	9f 93       	push	r25
    2402:	af 93       	push	r26
    2404:	bf 93       	push	r27
    2406:	df 93       	push	r29
    2408:	cf 93       	push	r28
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
    rtc_tics++;                     //-- Increments tics
    240e:	80 91 75 03 	lds	r24, 0x0375
    2412:	90 91 76 03 	lds	r25, 0x0376
    2416:	a0 91 77 03 	lds	r26, 0x0377
    241a:	b0 91 78 03 	lds	r27, 0x0378
    241e:	01 96       	adiw	r24, 0x01	; 1
    2420:	a1 1d       	adc	r26, r1
    2422:	b1 1d       	adc	r27, r1
    2424:	80 93 75 03 	sts	0x0375, r24
    2428:	90 93 76 03 	sts	0x0376, r25
    242c:	a0 93 77 03 	sts	0x0377, r26
    2430:	b0 93 78 03 	sts	0x0378, r27
    rtc_milliseconds++;             //-- Increments milli seconds
    2434:	80 91 73 03 	lds	r24, 0x0373
    2438:	90 91 74 03 	lds	r25, 0x0374
    243c:	01 96       	adiw	r24, 0x01	; 1
    243e:	90 93 74 03 	sts	0x0374, r25
    2442:	80 93 73 03 	sts	0x0373, r24
    
    if (rtc_milliseconds == 1000)
    2446:	80 91 73 03 	lds	r24, 0x0373
    244a:	90 91 74 03 	lds	r25, 0x0374
    244e:	23 e0       	ldi	r18, 0x03	; 3
    2450:	88 3e       	cpi	r24, 0xE8	; 232
    2452:	92 07       	cpc	r25, r18
    2454:	51 f5       	brne	.+84     	; 0x24aa <__vector_9+0xb8>
    {
        rtc_milliseconds = 0;
    2456:	10 92 74 03 	sts	0x0374, r1
    245a:	10 92 73 03 	sts	0x0373, r1
        rtc_seconds++;              //-- Increments seconds
    245e:	80 91 7a 03 	lds	r24, 0x037A
    2462:	8f 5f       	subi	r24, 0xFF	; 255
    2464:	80 93 7a 03 	sts	0x037A, r24

        if (rtc_seconds == 60)
    2468:	80 91 7a 03 	lds	r24, 0x037A
    246c:	8c 33       	cpi	r24, 0x3C	; 60
    246e:	e9 f4       	brne	.+58     	; 0x24aa <__vector_9+0xb8>
        {
            rtc_seconds = 0;
    2470:	10 92 7a 03 	sts	0x037A, r1
            rtc_minutes++;          //-- Increments minutes
    2474:	80 91 71 03 	lds	r24, 0x0371
    2478:	8f 5f       	subi	r24, 0xFF	; 255
    247a:	80 93 71 03 	sts	0x0371, r24
            
            if (rtc_minutes == 60)
    247e:	80 91 71 03 	lds	r24, 0x0371
    2482:	8c 33       	cpi	r24, 0x3C	; 60
    2484:	91 f4       	brne	.+36     	; 0x24aa <__vector_9+0xb8>
            {
                rtc_minutes = 0;
    2486:	10 92 71 03 	sts	0x0371, r1
                rtc_hours++;        //-- Increments hours
    248a:	80 91 79 03 	lds	r24, 0x0379
    248e:	8f 5f       	subi	r24, 0xFF	; 255
    2490:	80 93 79 03 	sts	0x0379, r24
                        
                if (rtc_hours == 24)
    2494:	80 91 79 03 	lds	r24, 0x0379
    2498:	88 31       	cpi	r24, 0x18	; 24
    249a:	39 f4       	brne	.+14     	; 0x24aa <__vector_9+0xb8>
                {
                    rtc_hours = 0;
    249c:	10 92 79 03 	sts	0x0379, r1
                    rtc_days++;     //-- Increments days
    24a0:	80 91 72 03 	lds	r24, 0x0372
    24a4:	8f 5f       	subi	r24, 0xFF	; 255
    24a6:	80 93 72 03 	sts	0x0372, r24
                }
            }
        }
    }
}
    24aa:	cf 91       	pop	r28
    24ac:	df 91       	pop	r29
    24ae:	bf 91       	pop	r27
    24b0:	af 91       	pop	r26
    24b2:	9f 91       	pop	r25
    24b4:	8f 91       	pop	r24
    24b6:	2f 91       	pop	r18
    24b8:	0f 90       	pop	r0
    24ba:	0f be       	out	0x3f, r0	; 63
    24bc:	0f 90       	pop	r0
    24be:	1f 90       	pop	r1
    24c0:	18 95       	reti

000024c2 <uart_rx_get_3_data>:
//! @param  none
//!
//! @return UART pin value sampled 3 times
//------------------------------------------------------------------------------
Bool uart_rx_get_3_data (void)
{
    24c2:	df 93       	push	r29
    24c4:	cf 93       	push	r28
    24c6:	0f 92       	push	r0
    24c8:	cd b7       	in	r28, 0x3d	; 61
    24ca:	de b7       	in	r29, 0x3e	; 62
U8 u8_temp = 0;
    24cc:	19 82       	std	Y+1, r1	; 0x01

#if ((USE_UART == UART_0) || (USE_UART == UART_1))
    u8_temp = Uart_rx_get_3_data();
    24ce:	ec e2       	ldi	r30, 0x2C	; 44
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	90 81       	ld	r25, Z
    24d4:	ec e2       	ldi	r30, 0x2C	; 44
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	80 81       	ld	r24, Z
    24da:	98 23       	and	r25, r24
    24dc:	ec e2       	ldi	r30, 0x2C	; 44
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	80 81       	ld	r24, Z
    24e2:	89 23       	and	r24, r25
    24e4:	81 70       	andi	r24, 0x01	; 1
    24e6:	89 83       	std	Y+1, r24	; 0x01
    }
#   else
#       error USE_UART definition is not referenced in "uart_drv.h" file
#endif

    return u8_temp;
    24e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    24ea:	0f 90       	pop	r0
    24ec:	cf 91       	pop	r28
    24ee:	df 91       	pop	r29
    24f0:	08 95       	ret

000024f2 <uart_rx_get_data>:
//! @param  none
//!
//! @return UART pin value
//------------------------------------------------------------------------------
Bool uart_rx_get_data (void)
{
    24f2:	df 93       	push	r29
    24f4:	cf 93       	push	r28
    24f6:	0f 92       	push	r0
    24f8:	cd b7       	in	r28, 0x3d	; 61
    24fa:	de b7       	in	r29, 0x3e	; 62
U8 u8_temp = 0;
    24fc:	19 82       	std	Y+1, r1	; 0x01

#if ((USE_UART == UART_0) || (USE_UART == UART_1))
    u8_temp = Uart_rx_get_data();
    24fe:	ec e2       	ldi	r30, 0x2C	; 44
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
    2504:	81 70       	andi	r24, 0x01	; 1
    2506:	89 83       	std	Y+1, r24	; 0x01
    }
#   else
#       error USE_UART definition is not referenced in "uart_drv.h" file
#endif

    return u8_temp;
    2508:	89 81       	ldd	r24, Y+1	; 0x01
}
    250a:	0f 90       	pop	r0
    250c:	cf 91       	pop	r28
    250e:	df 91       	pop	r29
    2510:	08 95       	ret

00002512 <uart_init>:
//!         ==0: research of timing failed
//!         ==1: baudrate performed
//!
//------------------------------------------------------------------------------
U8 uart_init (U8 mode, U32 baudrate)
{
    2512:	df 93       	push	r29
    2514:	cf 93       	push	r28
    2516:	00 d0       	rcall	.+0      	; 0x2518 <uart_init+0x6>
    2518:	00 d0       	rcall	.+0      	; 0x251a <uart_init+0x8>
    251a:	00 d0       	rcall	.+0      	; 0x251c <uart_init+0xa>
    251c:	cd b7       	in	r28, 0x3d	; 61
    251e:	de b7       	in	r29, 0x3e	; 62
    2520:	89 83       	std	Y+1, r24	; 0x01
    2522:	4a 83       	std	Y+2, r20	; 0x02
    2524:	5b 83       	std	Y+3, r21	; 0x03
    2526:	6c 83       	std	Y+4, r22	; 0x04
    2528:	7d 83       	std	Y+5, r23	; 0x05
    Uart_clear();       // Flush, Disable and Reset UART
    252a:	e1 ec       	ldi	r30, 0xC1	; 193
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	10 82       	st	Z, r1
    2530:	a2 ec       	ldi	r26, 0xC2	; 194
    2532:	b0 e0       	ldi	r27, 0x00	; 0
    2534:	e6 ec       	ldi	r30, 0xC6	; 198
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	80 81       	ld	r24, Z
    253a:	8c 93       	st	X, r24
    253c:	e0 ec       	ldi	r30, 0xC0	; 192
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	80 e4       	ldi	r24, 0x40	; 64
    2542:	80 83       	st	Z, r24
    2544:	e2 ec       	ldi	r30, 0xC2	; 194
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	86 e0       	ldi	r24, 0x06	; 6
    254a:	80 83       	st	Z, r24
    254c:	e5 ec       	ldi	r30, 0xC5	; 197
    254e:	f0 e0       	ldi	r31, 0x00	; 0
    2550:	10 82       	st	Z, r1
    2552:	e4 ec       	ldi	r30, 0xC4	; 196
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	10 82       	st	Z, r1
    if (Uart_set_baudrate(baudrate) == 0) return 0;  //!<  c.f. macro in "uart_drv.h"
    2558:	e5 ec       	ldi	r30, 0xC5	; 197
    255a:	f0 e0       	ldi	r31, 0x00	; 0
    255c:	10 82       	st	Z, r1
    255e:	e4 ec       	ldi	r30, 0xC4	; 196
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	89 e1       	ldi	r24, 0x19	; 25
    2564:	80 83       	st	Z, r24
    2566:	a0 ec       	ldi	r26, 0xC0	; 192
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	e0 ec       	ldi	r30, 0xC0	; 192
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	82 60       	ori	r24, 0x02	; 2
    2572:	8c 93       	st	X, r24
    2574:	8c 91       	ld	r24, X
    2576:	88 23       	and	r24, r24
    2578:	11 f4       	brne	.+4      	; 0x257e <uart_init+0x6c>
    257a:	1e 82       	std	Y+6, r1	; 0x06
    257c:	35 c0       	rjmp	.+106    	; 0x25e8 <uart_init+0xd6>
    Uart_hw_init(mode);     //!<  c.f. macro in "uart_drv.h"
    257e:	a0 ec       	ldi	r26, 0xC0	; 192
    2580:	b0 e0       	ldi	r27, 0x00	; 0
    2582:	e0 ec       	ldi	r30, 0xC0	; 192
    2584:	f0 e0       	ldi	r31, 0x00	; 0
    2586:	80 81       	ld	r24, Z
    2588:	80 62       	ori	r24, 0x20	; 32
    258a:	8c 93       	st	X, r24
    258c:	a1 ec       	ldi	r26, 0xC1	; 193
    258e:	b0 e0       	ldi	r27, 0x00	; 0
    2590:	e1 ec       	ldi	r30, 0xC1	; 193
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	80 81       	ld	r24, Z
    2596:	8b 7f       	andi	r24, 0xFB	; 251
    2598:	8c 93       	st	X, r24
    259a:	a1 ec       	ldi	r26, 0xC1	; 193
    259c:	b0 e0       	ldi	r27, 0x00	; 0
    259e:	e1 ec       	ldi	r30, 0xC1	; 193
    25a0:	f0 e0       	ldi	r31, 0x00	; 0
    25a2:	80 81       	ld	r24, Z
    25a4:	98 2f       	mov	r25, r24
    25a6:	89 81       	ldd	r24, Y+1	; 0x01
    25a8:	84 70       	andi	r24, 0x04	; 4
    25aa:	89 2b       	or	r24, r25
    25ac:	8c 93       	st	X, r24
    25ae:	e2 ec       	ldi	r30, 0xC2	; 194
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	89 81       	ldd	r24, Y+1	; 0x01
    25b4:	88 73       	andi	r24, 0x38	; 56
    25b6:	80 83       	st	Z, r24
    25b8:	a2 ec       	ldi	r26, 0xC2	; 194
    25ba:	b0 e0       	ldi	r27, 0x00	; 0
    25bc:	e2 ec       	ldi	r30, 0xC2	; 194
    25be:	f0 e0       	ldi	r31, 0x00	; 0
    25c0:	80 81       	ld	r24, Z
    25c2:	28 2f       	mov	r18, r24
    25c4:	89 81       	ldd	r24, Y+1	; 0x01
    25c6:	88 2f       	mov	r24, r24
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	83 70       	andi	r24, 0x03	; 3
    25cc:	90 70       	andi	r25, 0x00	; 0
    25ce:	88 0f       	add	r24, r24
    25d0:	99 1f       	adc	r25, r25
    25d2:	82 2b       	or	r24, r18
    25d4:	8c 93       	st	X, r24
    Uart_enable();          //!<  c.f. macro in "uart_drv.h"
    25d6:	a1 ec       	ldi	r26, 0xC1	; 193
    25d8:	b0 e0       	ldi	r27, 0x00	; 0
    25da:	e1 ec       	ldi	r30, 0xC1	; 193
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	80 81       	ld	r24, Z
    25e0:	88 61       	ori	r24, 0x18	; 24
    25e2:	8c 93       	st	X, r24
    return (1);
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	8e 83       	std	Y+6, r24	; 0x06
    25e8:	8e 81       	ldd	r24, Y+6	; 0x06
}
    25ea:	26 96       	adiw	r28, 0x06	; 6
    25ec:	0f b6       	in	r0, 0x3f	; 63
    25ee:	f8 94       	cli
    25f0:	de bf       	out	0x3e, r29	; 62
    25f2:	0f be       	out	0x3f, r0	; 63
    25f4:	cd bf       	out	0x3d, r28	; 61
    25f6:	cf 91       	pop	r28
    25f8:	df 91       	pop	r29
    25fa:	08 95       	ret

000025fc <uart_test_hit>:
//!         ==0: Nothing has been received
//!         ==1: A character has been received
//!
//------------------------------------------------------------------------------
U8 uart_test_hit (void)
{
    25fc:	df 93       	push	r29
    25fe:	cf 93       	push	r28
    2600:	cd b7       	in	r28, 0x3d	; 61
    2602:	de b7       	in	r29, 0x3e	; 62
    return (Uart_rx_ready());
    2604:	e0 ec       	ldi	r30, 0xC0	; 192
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	80 81       	ld	r24, Z
    260a:	88 1f       	adc	r24, r24
    260c:	88 27       	eor	r24, r24
    260e:	88 1f       	adc	r24, r24
}
    2610:	cf 91       	pop	r28
    2612:	df 91       	pop	r29
    2614:	08 95       	ret

00002616 <uart_putchar>:
//!
//! @return character sent
//!
//------------------------------------------------------------------------------
U8 uart_putchar (U8 ch)
{
    2616:	df 93       	push	r29
    2618:	cf 93       	push	r28
    261a:	0f 92       	push	r0
    261c:	cd b7       	in	r28, 0x3d	; 61
    261e:	de b7       	in	r29, 0x3e	; 62
    2620:	89 83       	std	Y+1, r24	; 0x01
    while(!Uart_tx_ready());
    2622:	e0 ec       	ldi	r30, 0xC0	; 192
    2624:	f0 e0       	ldi	r31, 0x00	; 0
    2626:	80 81       	ld	r24, Z
    2628:	88 2f       	mov	r24, r24
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	80 72       	andi	r24, 0x20	; 32
    262e:	90 70       	andi	r25, 0x00	; 0
    2630:	95 95       	asr	r25
    2632:	87 95       	ror	r24
    2634:	95 95       	asr	r25
    2636:	87 95       	ror	r24
    2638:	95 95       	asr	r25
    263a:	87 95       	ror	r24
    263c:	95 95       	asr	r25
    263e:	87 95       	ror	r24
    2640:	95 95       	asr	r25
    2642:	87 95       	ror	r24
    2644:	00 97       	sbiw	r24, 0x00	; 0
    2646:	69 f3       	breq	.-38     	; 0x2622 <uart_putchar+0xc>
    Uart_set_tx_busy();     // Set Busy flag before sending (always)
    Uart_send_byte(ch);
    2648:	e6 ec       	ldi	r30, 0xC6	; 198
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	89 81       	ldd	r24, Y+1	; 0x01
    264e:	80 83       	st	Z, r24
    return (ch);
    2650:	89 81       	ldd	r24, Y+1	; 0x01
}
    2652:	0f 90       	pop	r0
    2654:	cf 91       	pop	r28
    2656:	df 91       	pop	r29
    2658:	08 95       	ret

0000265a <uart_getchar>:
//!
//! @return read (received) character on the UART
//!
//------------------------------------------------------------------------------
U8 uart_getchar (void)
{
    265a:	df 93       	push	r29
    265c:	cf 93       	push	r28
    265e:	0f 92       	push	r0
    2660:	cd b7       	in	r28, 0x3d	; 61
    2662:	de b7       	in	r29, 0x3e	; 62
    U8 ch;

    while(!Uart_rx_ready());
    2664:	e0 ec       	ldi	r30, 0xC0	; 192
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	80 81       	ld	r24, Z
    266a:	88 1f       	adc	r24, r24
    266c:	88 27       	eor	r24, r24
    266e:	88 1f       	adc	r24, r24
    2670:	88 2f       	mov	r24, r24
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	90 70       	andi	r25, 0x00	; 0
    2676:	00 97       	sbiw	r24, 0x00	; 0
    2678:	a9 f3       	breq	.-22     	; 0x2664 <uart_getchar+0xa>
    ch = Uart_get_byte();
    267a:	e6 ec       	ldi	r30, 0xC6	; 198
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	80 81       	ld	r24, Z
    2680:	89 83       	std	Y+1, r24	; 0x01
    Uart_ack_rx_byte();
    return ch;
    2682:	89 81       	ldd	r24, Y+1	; 0x01
}
    2684:	0f 90       	pop	r0
    2686:	cf 91       	pop	r28
    2688:	df 91       	pop	r29
    268a:	08 95       	ret

0000268c <uart_put_string>:
//! @return (none)
//!
//------------------------------------------------------------------------------
#ifndef REDUCED_UART_LIB
void uart_put_string (U8 *data_string)
    {
    268c:	df 93       	push	r29
    268e:	cf 93       	push	r28
    2690:	00 d0       	rcall	.+0      	; 0x2692 <uart_put_string+0x6>
    2692:	cd b7       	in	r28, 0x3d	; 61
    2694:	de b7       	in	r29, 0x3e	; 62
    2696:	9a 83       	std	Y+2, r25	; 0x02
    2698:	89 83       	std	Y+1, r24	; 0x01
    269a:	0b c0       	rjmp	.+22     	; 0x26b2 <uart_put_string+0x26>
    while(*data_string) uart_putchar (*data_string++);
    269c:	e9 81       	ldd	r30, Y+1	; 0x01
    269e:	fa 81       	ldd	r31, Y+2	; 0x02
    26a0:	20 81       	ld	r18, Z
    26a2:	89 81       	ldd	r24, Y+1	; 0x01
    26a4:	9a 81       	ldd	r25, Y+2	; 0x02
    26a6:	01 96       	adiw	r24, 0x01	; 1
    26a8:	9a 83       	std	Y+2, r25	; 0x02
    26aa:	89 83       	std	Y+1, r24	; 0x01
    26ac:	82 2f       	mov	r24, r18
    26ae:	0e 94 0b 13 	call	0x2616	; 0x2616 <uart_putchar>
    26b2:	e9 81       	ldd	r30, Y+1	; 0x01
    26b4:	fa 81       	ldd	r31, Y+2	; 0x02
    26b6:	80 81       	ld	r24, Z
    26b8:	88 23       	and	r24, r24
    26ba:	81 f7       	brne	.-32     	; 0x269c <uart_put_string+0x10>
    }
    26bc:	0f 90       	pop	r0
    26be:	0f 90       	pop	r0
    26c0:	cf 91       	pop	r28
    26c2:	df 91       	pop	r29
    26c4:	08 95       	ret

000026c6 <uart_mini_printf>:
//! Return: 0 = O.K.
//!
//------------------------------------------------------------------------------
#ifndef REDUCED_UART_LIB
U8 uart_mini_printf(char *format, ...)
{
    26c6:	0f 93       	push	r16
    26c8:	1f 93       	push	r17
    26ca:	df 93       	push	r29
    26cc:	cf 93       	push	r28
    26ce:	cd b7       	in	r28, 0x3d	; 61
    26d0:	de b7       	in	r29, 0x3e	; 62
    26d2:	af 97       	sbiw	r28, 0x2f	; 47
    26d4:	0f b6       	in	r0, 0x3f	; 63
    26d6:	f8 94       	cli
    26d8:	de bf       	out	0x3e, r29	; 62
    26da:	0f be       	out	0x3f, r0	; 63
    26dc:	cd bf       	out	0x3d, r28	; 61
    S16     s16_val;
    S32     s32_val;
    U16     u16_val;
    U32     u32_val;

    long_flag = FALSE;
    26de:	1f 86       	std	Y+15, r1	; 0x0f
    alt_p_c = FALSE;
    26e0:	1e 86       	std	Y+14, r1	; 0x0e
    min_size = DATA_BUF_LEN-1;
    26e2:	8b e0       	ldi	r24, 0x0B	; 11
    26e4:	88 8b       	std	Y+16, r24	; 0x10

    va_start(arg_ptr, format);   // make arg_ptr point to the first unnamed arg
    26e6:	ce 01       	movw	r24, r28
    26e8:	c8 96       	adiw	r24, 0x38	; 56
    26ea:	99 8f       	std	Y+25, r25	; 0x19
    26ec:	88 8f       	std	Y+24, r24	; 0x18
    for (p = (U8 *) format; *p; p++)
    26ee:	8e a9       	ldd	r24, Y+54	; 0x36
    26f0:	9f a9       	ldd	r25, Y+55	; 0x37
    26f2:	9f 8b       	std	Y+23, r25	; 0x17
    26f4:	8e 8b       	std	Y+22, r24	; 0x16
    26f6:	73 c3       	rjmp	.+1766   	; 0x2dde <uart_mini_printf+0x718>
    {
        if ((*p == '%') || (alt_p_c == TRUE))
    26f8:	ee 89       	ldd	r30, Y+22	; 0x16
    26fa:	ff 89       	ldd	r31, Y+23	; 0x17
    26fc:	80 81       	ld	r24, Z
    26fe:	85 32       	cpi	r24, 0x25	; 37
    2700:	21 f0       	breq	.+8      	; 0x270a <uart_mini_printf+0x44>
    2702:	8e 85       	ldd	r24, Y+14	; 0x0e
    2704:	81 30       	cpi	r24, 0x01	; 1
    2706:	09 f0       	breq	.+2      	; 0x270a <uart_mini_printf+0x44>
    2708:	47 c0       	rjmp	.+142    	; 0x2798 <uart_mini_printf+0xd2>
        {
            p++;
    270a:	8e 89       	ldd	r24, Y+22	; 0x16
    270c:	9f 89       	ldd	r25, Y+23	; 0x17
    270e:	01 96       	adiw	r24, 0x01	; 1
    2710:	9f 8b       	std	Y+23, r25	; 0x17
    2712:	8e 8b       	std	Y+22, r24	; 0x16
            uart_putchar(*p);
            alt_p_c = FALSE;
            long_flag = FALSE;
            continue;   // "switch (*p)" section skipped
        }
        switch (*p)
    2714:	ee 89       	ldd	r30, Y+22	; 0x16
    2716:	ff 89       	ldd	r31, Y+23	; 0x17
    2718:	80 81       	ld	r24, Z
    271a:	28 2f       	mov	r18, r24
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	3f a7       	std	Y+47, r19	; 0x2f
    2720:	2e a7       	std	Y+46, r18	; 0x2e
    2722:	8e a5       	ldd	r24, Y+46	; 0x2e
    2724:	9f a5       	ldd	r25, Y+47	; 0x2f
    2726:	84 36       	cpi	r24, 0x64	; 100
    2728:	91 05       	cpc	r25, r1
    272a:	09 f4       	brne	.+2      	; 0x272e <uart_mini_printf+0x68>
    272c:	96 c0       	rjmp	.+300    	; 0x285a <uart_mini_printf+0x194>
    272e:	2e a5       	ldd	r18, Y+46	; 0x2e
    2730:	3f a5       	ldd	r19, Y+47	; 0x2f
    2732:	25 36       	cpi	r18, 0x65	; 101
    2734:	31 05       	cpc	r19, r1
    2736:	94 f4       	brge	.+36     	; 0x275c <uart_mini_printf+0x96>
    2738:	8e a5       	ldd	r24, Y+46	; 0x2e
    273a:	9f a5       	ldd	r25, Y+47	; 0x2f
    273c:	88 35       	cpi	r24, 0x58	; 88
    273e:	91 05       	cpc	r25, r1
    2740:	09 f4       	brne	.+2      	; 0x2744 <uart_mini_printf+0x7e>
    2742:	fc c1       	rjmp	.+1016   	; 0x2b3c <uart_mini_printf+0x476>
    2744:	2e a5       	ldd	r18, Y+46	; 0x2e
    2746:	3f a5       	ldd	r19, Y+47	; 0x2f
    2748:	23 36       	cpi	r18, 0x63	; 99
    274a:	31 05       	cpc	r19, r1
    274c:	69 f1       	breq	.+90     	; 0x27a8 <uart_mini_printf+0xe2>
    274e:	8e a5       	ldd	r24, Y+46	; 0x2e
    2750:	9f a5       	ldd	r25, Y+47	; 0x2f
    2752:	80 33       	cpi	r24, 0x30	; 48
    2754:	91 05       	cpc	r25, r1
    2756:	09 f4       	brne	.+2      	; 0x275a <uart_mini_printf+0x94>
    2758:	bb c2       	rjmp	.+1398   	; 0x2cd0 <uart_mini_printf+0x60a>
    275a:	2d c3       	rjmp	.+1626   	; 0x2db6 <uart_mini_printf+0x6f0>
    275c:	2e a5       	ldd	r18, Y+46	; 0x2e
    275e:	3f a5       	ldd	r19, Y+47	; 0x2f
    2760:	23 37       	cpi	r18, 0x73	; 115
    2762:	31 05       	cpc	r19, r1
    2764:	e9 f1       	breq	.+122    	; 0x27e0 <uart_mini_printf+0x11a>
    2766:	8e a5       	ldd	r24, Y+46	; 0x2e
    2768:	9f a5       	ldd	r25, Y+47	; 0x2f
    276a:	84 37       	cpi	r24, 0x74	; 116
    276c:	91 05       	cpc	r25, r1
    276e:	3c f4       	brge	.+14     	; 0x277e <uart_mini_printf+0xb8>
    2770:	2e a5       	ldd	r18, Y+46	; 0x2e
    2772:	3f a5       	ldd	r19, Y+47	; 0x2f
    2774:	2c 36       	cpi	r18, 0x6C	; 108
    2776:	31 05       	cpc	r19, r1
    2778:	09 f4       	brne	.+2      	; 0x277c <uart_mini_printf+0xb6>
    277a:	5c c0       	rjmp	.+184    	; 0x2834 <uart_mini_printf+0x16e>
    277c:	1c c3       	rjmp	.+1592   	; 0x2db6 <uart_mini_printf+0x6f0>
    277e:	8e a5       	ldd	r24, Y+46	; 0x2e
    2780:	9f a5       	ldd	r25, Y+47	; 0x2f
    2782:	85 37       	cpi	r24, 0x75	; 117
    2784:	91 05       	cpc	r25, r1
    2786:	09 f4       	brne	.+2      	; 0x278a <uart_mini_printf+0xc4>
    2788:	36 c1       	rjmp	.+620    	; 0x29f6 <uart_mini_printf+0x330>
    278a:	2e a5       	ldd	r18, Y+46	; 0x2e
    278c:	3f a5       	ldd	r19, Y+47	; 0x2f
    278e:	28 37       	cpi	r18, 0x78	; 120
    2790:	31 05       	cpc	r19, r1
    2792:	09 f4       	brne	.+2      	; 0x2796 <uart_mini_printf+0xd0>
    2794:	d3 c1       	rjmp	.+934    	; 0x2b3c <uart_mini_printf+0x476>
    2796:	0f c3       	rjmp	.+1566   	; 0x2db6 <uart_mini_printf+0x6f0>
        {
            p++;
        }
        else
        {
            uart_putchar(*p);
    2798:	ee 89       	ldd	r30, Y+22	; 0x16
    279a:	ff 89       	ldd	r31, Y+23	; 0x17
    279c:	80 81       	ld	r24, Z
    279e:	0e 94 0b 13 	call	0x2616	; 0x2616 <uart_putchar>
            alt_p_c = FALSE;
    27a2:	1e 86       	std	Y+14, r1	; 0x0e
            long_flag = FALSE;
    27a4:	1f 86       	std	Y+15, r1	; 0x0f
    27a6:	16 c3       	rjmp	.+1580   	; 0x2dd4 <uart_mini_printf+0x70e>
            continue;   // "switch (*p)" section skipped
        }
        switch (*p)
        {
            case 'c':
                if (long_flag == TRUE)      // ERROR: 'l' before any 'c'
    27a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    27aa:	81 30       	cpi	r24, 0x01	; 1
    27ac:	39 f4       	brne	.+14     	; 0x27bc <uart_mini_printf+0xf6>
                {
                    uart_putchar('l');
    27ae:	8c e6       	ldi	r24, 0x6C	; 108
    27b0:	0e 94 0b 13 	call	0x2616	; 0x2616 <uart_putchar>
                    uart_putchar('c');
    27b4:	83 e6       	ldi	r24, 0x63	; 99
    27b6:	0e 94 0b 13 	call	0x2616	; 0x2616 <uart_putchar>
    27ba:	0d c0       	rjmp	.+26     	; 0x27d6 <uart_mini_printf+0x110>
                }
                else
                {
                    s8_val = (S8)(va_arg(arg_ptr, int));    // s8_val = (S8)(va_arg(arg_ptr, S16));
    27bc:	28 8d       	ldd	r18, Y+24	; 0x18
    27be:	39 8d       	ldd	r19, Y+25	; 0x19
    27c0:	c9 01       	movw	r24, r18
    27c2:	02 96       	adiw	r24, 0x02	; 2
    27c4:	99 8f       	std	Y+25, r25	; 0x19
    27c6:	88 8f       	std	Y+24, r24	; 0x18
    27c8:	f9 01       	movw	r30, r18
    27ca:	80 81       	ld	r24, Z
    27cc:	91 81       	ldd	r25, Z+1	; 0x01
    27ce:	8d 87       	std	Y+13, r24	; 0x0d
                    uart_putchar((U8)(s8_val));
    27d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d2:	0e 94 0b 13 	call	0x2616	; 0x2616 <uart_putchar>
                }
                // Clean up
                min_size = DATA_BUF_LEN-1;
    27d6:	8b e0       	ldi	r24, 0x0B	; 11
    27d8:	88 8b       	std	Y+16, r24	; 0x10
                alt_p_c = FALSE;
    27da:	1e 86       	std	Y+14, r1	; 0x0e
                long_flag = FALSE;
    27dc:	1f 86       	std	Y+15, r1	; 0x0f
    27de:	fa c2       	rjmp	.+1524   	; 0x2dd4 <uart_mini_printf+0x70e>
                break; // case 'c'
                
            case 's':
                if (long_flag == TRUE)      // ERROR: 'l' before any 's'
    27e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    27e2:	81 30       	cpi	r24, 0x01	; 1
    27e4:	39 f4       	brne	.+14     	; 0x27f4 <uart_mini_printf+0x12e>
                {
                    uart_putchar('l');
    27e6:	8c e6       	ldi	r24, 0x6C	; 108
    27e8:	0e 94 0b 13 	call	0x2616	; 0x2616 <uart_putchar>
                    uart_putchar('s');
    27ec:	83 e7       	ldi	r24, 0x73	; 115
    27ee:	0e 94 0b 13 	call	0x2616	; 0x2616 <uart_putchar>
    27f2:	1b c0       	rjmp	.+54     	; 0x282a <uart_mini_printf+0x164>
                }
                else
                {
                    for (sval = va_arg(arg_ptr, U8 *); *sval; sval++)
    27f4:	28 8d       	ldd	r18, Y+24	; 0x18
    27f6:	39 8d       	ldd	r19, Y+25	; 0x19
    27f8:	c9 01       	movw	r24, r18
    27fa:	02 96       	adiw	r24, 0x02	; 2
    27fc:	99 8f       	std	Y+25, r25	; 0x19
    27fe:	88 8f       	std	Y+24, r24	; 0x18
    2800:	f9 01       	movw	r30, r18
    2802:	80 81       	ld	r24, Z
    2804:	91 81       	ldd	r25, Z+1	; 0x01
    2806:	9d 8b       	std	Y+21, r25	; 0x15
    2808:	8c 8b       	std	Y+20, r24	; 0x14
    280a:	0a c0       	rjmp	.+20     	; 0x2820 <uart_mini_printf+0x15a>
                    {
                        uart_putchar(*sval);
    280c:	ec 89       	ldd	r30, Y+20	; 0x14
    280e:	fd 89       	ldd	r31, Y+21	; 0x15
    2810:	80 81       	ld	r24, Z
    2812:	0e 94 0b 13 	call	0x2616	; 0x2616 <uart_putchar>
                    uart_putchar('l');
                    uart_putchar('s');
                }
                else
                {
                    for (sval = va_arg(arg_ptr, U8 *); *sval; sval++)
    2816:	8c 89       	ldd	r24, Y+20	; 0x14
    2818:	9d 89       	ldd	r25, Y+21	; 0x15
    281a:	01 96       	adiw	r24, 0x01	; 1
    281c:	9d 8b       	std	Y+21, r25	; 0x15
    281e:	8c 8b       	std	Y+20, r24	; 0x14
    2820:	ec 89       	ldd	r30, Y+20	; 0x14
    2822:	fd 89       	ldd	r31, Y+21	; 0x15
    2824:	80 81       	ld	r24, Z
    2826:	88 23       	and	r24, r24
    2828:	89 f7       	brne	.-30     	; 0x280c <uart_mini_printf+0x146>
                    {
                        uart_putchar(*sval);
                    }
                }
                // Clean up
                min_size = DATA_BUF_LEN-1;
    282a:	8b e0       	ldi	r24, 0x0B	; 11
    282c:	88 8b       	std	Y+16, r24	; 0x10
                alt_p_c = FALSE;
    282e:	1e 86       	std	Y+14, r1	; 0x0e
                long_flag = FALSE;
    2830:	1f 86       	std	Y+15, r1	; 0x0f
    2832:	d0 c2       	rjmp	.+1440   	; 0x2dd4 <uart_mini_printf+0x70e>
                break;  // case 's'
                
            case 'l':  // It is not the number "ONE" but the lower case of "L" character
                if (long_flag == TRUE)      // ERROR: two consecutive 'l'
    2834:	8f 85       	ldd	r24, Y+15	; 0x0f
    2836:	81 30       	cpi	r24, 0x01	; 1
    2838:	31 f4       	brne	.+12     	; 0x2846 <uart_mini_printf+0x180>
                {
                    uart_putchar('l');
    283a:	8c e6       	ldi	r24, 0x6C	; 108
    283c:	0e 94 0b 13 	call	0x2616	; 0x2616 <uart_putchar>
                    alt_p_c = FALSE;
    2840:	1e 86       	std	Y+14, r1	; 0x0e
                    long_flag = FALSE;
    2842:	1f 86       	std	Y+15, r1	; 0x0f
    2844:	04 c0       	rjmp	.+8      	; 0x284e <uart_mini_printf+0x188>
                }
                else
                {
                    alt_p_c = TRUE;
    2846:	81 e0       	ldi	r24, 0x01	; 1
    2848:	8e 87       	std	Y+14, r24	; 0x0e
                    long_flag = TRUE;
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	8f 87       	std	Y+15, r24	; 0x0f
                }
                p--;
    284e:	8e 89       	ldd	r24, Y+22	; 0x16
    2850:	9f 89       	ldd	r25, Y+23	; 0x17
    2852:	01 97       	sbiw	r24, 0x01	; 1
    2854:	9f 8b       	std	Y+23, r25	; 0x17
    2856:	8e 8b       	std	Y+22, r24	; 0x16
    2858:	bd c2       	rjmp	.+1402   	; 0x2dd4 <uart_mini_printf+0x70e>
                break;  // case 'l'
                
            case 'd':
                n_sign  = FALSE;               
    285a:	1a 8a       	std	Y+18, r1	; 0x12
                for(data_idx = 0; data_idx < (DATA_BUF_LEN-1); data_idx++)
    285c:	19 8a       	std	Y+17, r1	; 0x11
    285e:	0d c0       	rjmp	.+26     	; 0x287a <uart_mini_printf+0x1b4>
                {
                    data_buf[data_idx] = '0';
    2860:	89 89       	ldd	r24, Y+17	; 0x11
    2862:	28 2f       	mov	r18, r24
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	ce 01       	movw	r24, r28
    2868:	4a 96       	adiw	r24, 0x1a	; 26
    286a:	fc 01       	movw	r30, r24
    286c:	e2 0f       	add	r30, r18
    286e:	f3 1f       	adc	r31, r19
    2870:	80 e3       	ldi	r24, 0x30	; 48
    2872:	80 83       	st	Z, r24
                p--;
                break;  // case 'l'
                
            case 'd':
                n_sign  = FALSE;               
                for(data_idx = 0; data_idx < (DATA_BUF_LEN-1); data_idx++)
    2874:	89 89       	ldd	r24, Y+17	; 0x11
    2876:	8f 5f       	subi	r24, 0xFF	; 255
    2878:	89 8b       	std	Y+17, r24	; 0x11
    287a:	89 89       	ldd	r24, Y+17	; 0x11
    287c:	8b 30       	cpi	r24, 0x0B	; 11
    287e:	80 f3       	brcs	.-32     	; 0x2860 <uart_mini_printf+0x19a>
                {
                    data_buf[data_idx] = '0';
                }
                data_buf[DATA_BUF_LEN-1] = 0;
    2880:	1d a2       	std	Y+37, r1	; 0x25
                data_idx = DATA_BUF_LEN - 2;
    2882:	8a e0       	ldi	r24, 0x0A	; 10
    2884:	89 8b       	std	Y+17, r24	; 0x11
                if (long_flag)  // 32-bit
    2886:	8f 85       	ldd	r24, Y+15	; 0x0f
    2888:	88 23       	and	r24, r24
    288a:	09 f4       	brne	.+2      	; 0x288e <uart_mini_printf+0x1c8>
    288c:	5d c0       	rjmp	.+186    	; 0x2948 <uart_mini_printf+0x282>
                {
                    s32_val = va_arg(arg_ptr, S32);
    288e:	28 8d       	ldd	r18, Y+24	; 0x18
    2890:	39 8d       	ldd	r19, Y+25	; 0x19
    2892:	c9 01       	movw	r24, r18
    2894:	04 96       	adiw	r24, 0x04	; 4
    2896:	99 8f       	std	Y+25, r25	; 0x19
    2898:	88 8f       	std	Y+24, r24	; 0x18
    289a:	f9 01       	movw	r30, r18
    289c:	80 81       	ld	r24, Z
    289e:	91 81       	ldd	r25, Z+1	; 0x01
    28a0:	a2 81       	ldd	r26, Z+2	; 0x02
    28a2:	b3 81       	ldd	r27, Z+3	; 0x03
    28a4:	8f 83       	std	Y+7, r24	; 0x07
    28a6:	98 87       	std	Y+8, r25	; 0x08
    28a8:	a9 87       	std	Y+9, r26	; 0x09
    28aa:	ba 87       	std	Y+10, r27	; 0x0a
                    if (s32_val < 0)
    28ac:	8f 81       	ldd	r24, Y+7	; 0x07
    28ae:	98 85       	ldd	r25, Y+8	; 0x08
    28b0:	a9 85       	ldd	r26, Y+9	; 0x09
    28b2:	ba 85       	ldd	r27, Y+10	; 0x0a
    28b4:	bb 23       	and	r27, r27
    28b6:	8c f4       	brge	.+34     	; 0x28da <uart_mini_printf+0x214>
                    {
                        n_sign = TRUE;
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	8a 8b       	std	Y+18, r24	; 0x12
                        s32_val  = -s32_val;
    28bc:	8f 81       	ldd	r24, Y+7	; 0x07
    28be:	98 85       	ldd	r25, Y+8	; 0x08
    28c0:	a9 85       	ldd	r26, Y+9	; 0x09
    28c2:	ba 85       	ldd	r27, Y+10	; 0x0a
    28c4:	b0 95       	com	r27
    28c6:	a0 95       	com	r26
    28c8:	90 95       	com	r25
    28ca:	81 95       	neg	r24
    28cc:	9f 4f       	sbci	r25, 0xFF	; 255
    28ce:	af 4f       	sbci	r26, 0xFF	; 255
    28d0:	bf 4f       	sbci	r27, 0xFF	; 255
    28d2:	8f 83       	std	Y+7, r24	; 0x07
    28d4:	98 87       	std	Y+8, r25	; 0x08
    28d6:	a9 87       	std	Y+9, r26	; 0x09
    28d8:	ba 87       	std	Y+10, r27	; 0x0a
                    }
                    while (1)
                    {
                        data_buf[data_idx] = s32_val % 10 + '0';
    28da:	89 89       	ldd	r24, Y+17	; 0x11
    28dc:	08 2f       	mov	r16, r24
    28de:	10 e0       	ldi	r17, 0x00	; 0
    28e0:	8f 81       	ldd	r24, Y+7	; 0x07
    28e2:	98 85       	ldd	r25, Y+8	; 0x08
    28e4:	a9 85       	ldd	r26, Y+9	; 0x09
    28e6:	ba 85       	ldd	r27, Y+10	; 0x0a
    28e8:	2a e0       	ldi	r18, 0x0A	; 10
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	40 e0       	ldi	r20, 0x00	; 0
    28ee:	50 e0       	ldi	r21, 0x00	; 0
    28f0:	bc 01       	movw	r22, r24
    28f2:	cd 01       	movw	r24, r26
    28f4:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <__divmodsi4>
    28f8:	dc 01       	movw	r26, r24
    28fa:	cb 01       	movw	r24, r22
    28fc:	28 2f       	mov	r18, r24
    28fe:	20 5d       	subi	r18, 0xD0	; 208
    2900:	ce 01       	movw	r24, r28
    2902:	4a 96       	adiw	r24, 0x1a	; 26
    2904:	fc 01       	movw	r30, r24
    2906:	e0 0f       	add	r30, r16
    2908:	f1 1f       	adc	r31, r17
    290a:	20 83       	st	Z, r18
                        s32_val /= 10;
    290c:	8f 81       	ldd	r24, Y+7	; 0x07
    290e:	98 85       	ldd	r25, Y+8	; 0x08
    2910:	a9 85       	ldd	r26, Y+9	; 0x09
    2912:	ba 85       	ldd	r27, Y+10	; 0x0a
    2914:	2a e0       	ldi	r18, 0x0A	; 10
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	40 e0       	ldi	r20, 0x00	; 0
    291a:	50 e0       	ldi	r21, 0x00	; 0
    291c:	bc 01       	movw	r22, r24
    291e:	cd 01       	movw	r24, r26
    2920:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <__divmodsi4>
    2924:	da 01       	movw	r26, r20
    2926:	c9 01       	movw	r24, r18
    2928:	8f 83       	std	Y+7, r24	; 0x07
    292a:	98 87       	std	Y+8, r25	; 0x08
    292c:	a9 87       	std	Y+9, r26	; 0x09
    292e:	ba 87       	std	Y+10, r27	; 0x0a
                        data_idx--;
    2930:	89 89       	ldd	r24, Y+17	; 0x11
    2932:	81 50       	subi	r24, 0x01	; 1
    2934:	89 8b       	std	Y+17, r24	; 0x11
						if (s32_val==0) break;
    2936:	8f 81       	ldd	r24, Y+7	; 0x07
    2938:	98 85       	ldd	r25, Y+8	; 0x08
    293a:	a9 85       	ldd	r26, Y+9	; 0x09
    293c:	ba 85       	ldd	r27, Y+10	; 0x0a
    293e:	00 97       	sbiw	r24, 0x00	; 0
    2940:	a1 05       	cpc	r26, r1
    2942:	b1 05       	cpc	r27, r1
    2944:	d9 f1       	breq	.+118    	; 0x29bc <uart_mini_printf+0x2f6>
    2946:	c9 cf       	rjmp	.-110    	; 0x28da <uart_mini_printf+0x214>
                   }
                }
                else  // 16-bit
                {
                    s16_val = (S16)(va_arg(arg_ptr, int)); // s16_val = va_arg(arg_ptr, S16);
    2948:	28 8d       	ldd	r18, Y+24	; 0x18
    294a:	39 8d       	ldd	r19, Y+25	; 0x19
    294c:	c9 01       	movw	r24, r18
    294e:	02 96       	adiw	r24, 0x02	; 2
    2950:	99 8f       	std	Y+25, r25	; 0x19
    2952:	88 8f       	std	Y+24, r24	; 0x18
    2954:	f9 01       	movw	r30, r18
    2956:	80 81       	ld	r24, Z
    2958:	91 81       	ldd	r25, Z+1	; 0x01
    295a:	9c 87       	std	Y+12, r25	; 0x0c
    295c:	8b 87       	std	Y+11, r24	; 0x0b
                    if (s16_val < 0)
    295e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2960:	9c 85       	ldd	r25, Y+12	; 0x0c
    2962:	99 23       	and	r25, r25
    2964:	4c f4       	brge	.+18     	; 0x2978 <uart_mini_printf+0x2b2>
                    {
                        n_sign = TRUE;
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	8a 8b       	std	Y+18, r24	; 0x12
                        s16_val  = -s16_val;
    296a:	8b 85       	ldd	r24, Y+11	; 0x0b
    296c:	9c 85       	ldd	r25, Y+12	; 0x0c
    296e:	90 95       	com	r25
    2970:	81 95       	neg	r24
    2972:	9f 4f       	sbci	r25, 0xFF	; 255
    2974:	9c 87       	std	Y+12, r25	; 0x0c
    2976:	8b 87       	std	Y+11, r24	; 0x0b
                    }
                    while (1)
                    {
                        data_buf[data_idx] = s16_val % 10 + '0';
    2978:	89 89       	ldd	r24, Y+17	; 0x11
    297a:	e8 2f       	mov	r30, r24
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2980:	9c 85       	ldd	r25, Y+12	; 0x0c
    2982:	2a e0       	ldi	r18, 0x0A	; 10
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	b9 01       	movw	r22, r18
    2988:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <__divmodhi4>
    298c:	28 2f       	mov	r18, r24
    298e:	20 5d       	subi	r18, 0xD0	; 208
    2990:	ce 01       	movw	r24, r28
    2992:	4a 96       	adiw	r24, 0x1a	; 26
    2994:	e8 0f       	add	r30, r24
    2996:	f9 1f       	adc	r31, r25
    2998:	20 83       	st	Z, r18
                        s16_val /= 10;
    299a:	8b 85       	ldd	r24, Y+11	; 0x0b
    299c:	9c 85       	ldd	r25, Y+12	; 0x0c
    299e:	2a e0       	ldi	r18, 0x0A	; 10
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	b9 01       	movw	r22, r18
    29a4:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <__divmodhi4>
    29a8:	cb 01       	movw	r24, r22
    29aa:	9c 87       	std	Y+12, r25	; 0x0c
    29ac:	8b 87       	std	Y+11, r24	; 0x0b
                        data_idx--;
    29ae:	89 89       	ldd	r24, Y+17	; 0x11
    29b0:	81 50       	subi	r24, 0x01	; 1
    29b2:	89 8b       	std	Y+17, r24	; 0x11
						if (s16_val==0) break;
    29b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    29b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    29b8:	00 97       	sbiw	r24, 0x00	; 0
    29ba:	f1 f6       	brne	.-68     	; 0x2978 <uart_mini_printf+0x2b2>
                    }
                }
                if (n_sign) { uart_putchar('-'); }
    29bc:	8a 89       	ldd	r24, Y+18	; 0x12
    29be:	88 23       	and	r24, r24
    29c0:	19 f0       	breq	.+6      	; 0x29c8 <uart_mini_printf+0x302>
    29c2:	8d e2       	ldi	r24, 0x2D	; 45
    29c4:	0e 94 0b 13 	call	0x2616	; 0x2616 <uart_putchar>
                data_idx++;
    29c8:	89 89       	ldd	r24, Y+17	; 0x11
    29ca:	8f 5f       	subi	r24, 0xFF	; 255
    29cc:	89 8b       	std	Y+17, r24	; 0x11
                if (min_size < data_idx)
    29ce:	98 89       	ldd	r25, Y+16	; 0x10
    29d0:	89 89       	ldd	r24, Y+17	; 0x11
    29d2:	98 17       	cp	r25, r24
    29d4:	10 f4       	brcc	.+4      	; 0x29da <uart_mini_printf+0x314>
                {
                    data_idx = min_size;
    29d6:	88 89       	ldd	r24, Y+16	; 0x10
    29d8:	89 8b       	std	Y+17, r24	; 0x11
                }
                uart_put_string (data_buf + data_idx);
    29da:	89 89       	ldd	r24, Y+17	; 0x11
    29dc:	28 2f       	mov	r18, r24
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	ce 01       	movw	r24, r28
    29e2:	4a 96       	adiw	r24, 0x1a	; 26
    29e4:	82 0f       	add	r24, r18
    29e6:	93 1f       	adc	r25, r19
    29e8:	0e 94 46 13 	call	0x268c	; 0x268c <uart_put_string>
                // Clean up
                min_size = DATA_BUF_LEN-1;
    29ec:	8b e0       	ldi	r24, 0x0B	; 11
    29ee:	88 8b       	std	Y+16, r24	; 0x10
                alt_p_c = FALSE;
    29f0:	1e 86       	std	Y+14, r1	; 0x0e
                long_flag = FALSE;
    29f2:	1f 86       	std	Y+15, r1	; 0x0f
    29f4:	ef c1       	rjmp	.+990    	; 0x2dd4 <uart_mini_printf+0x70e>
                break;  // case 'd'
                
            case 'u':
                for(data_idx = 0; data_idx < (DATA_BUF_LEN-1); data_idx++)
    29f6:	19 8a       	std	Y+17, r1	; 0x11
    29f8:	0d c0       	rjmp	.+26     	; 0x2a14 <uart_mini_printf+0x34e>
                {
                    data_buf[data_idx] = '0';
    29fa:	89 89       	ldd	r24, Y+17	; 0x11
    29fc:	28 2f       	mov	r18, r24
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	ce 01       	movw	r24, r28
    2a02:	4a 96       	adiw	r24, 0x1a	; 26
    2a04:	fc 01       	movw	r30, r24
    2a06:	e2 0f       	add	r30, r18
    2a08:	f3 1f       	adc	r31, r19
    2a0a:	80 e3       	ldi	r24, 0x30	; 48
    2a0c:	80 83       	st	Z, r24
                alt_p_c = FALSE;
                long_flag = FALSE;
                break;  // case 'd'
                
            case 'u':
                for(data_idx = 0; data_idx < (DATA_BUF_LEN-1); data_idx++)
    2a0e:	89 89       	ldd	r24, Y+17	; 0x11
    2a10:	8f 5f       	subi	r24, 0xFF	; 255
    2a12:	89 8b       	std	Y+17, r24	; 0x11
    2a14:	89 89       	ldd	r24, Y+17	; 0x11
    2a16:	8b 30       	cpi	r24, 0x0B	; 11
    2a18:	80 f3       	brcs	.-32     	; 0x29fa <uart_mini_printf+0x334>
                {
                    data_buf[data_idx] = '0';
                }
                data_buf[DATA_BUF_LEN-1] = 0;
    2a1a:	1d a2       	std	Y+37, r1	; 0x25
                data_idx = DATA_BUF_LEN - 2;
    2a1c:	8a e0       	ldi	r24, 0x0A	; 10
    2a1e:	89 8b       	std	Y+17, r24	; 0x11
                if (long_flag)  // 32-bit
    2a20:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a22:	88 23       	and	r24, r24
    2a24:	09 f4       	brne	.+2      	; 0x2a28 <uart_mini_printf+0x362>
    2a26:	46 c0       	rjmp	.+140    	; 0x2ab4 <uart_mini_printf+0x3ee>
                {
                    u32_val = va_arg(arg_ptr, U32);
    2a28:	28 8d       	ldd	r18, Y+24	; 0x18
    2a2a:	39 8d       	ldd	r19, Y+25	; 0x19
    2a2c:	c9 01       	movw	r24, r18
    2a2e:	04 96       	adiw	r24, 0x04	; 4
    2a30:	99 8f       	std	Y+25, r25	; 0x19
    2a32:	88 8f       	std	Y+24, r24	; 0x18
    2a34:	f9 01       	movw	r30, r18
    2a36:	80 81       	ld	r24, Z
    2a38:	91 81       	ldd	r25, Z+1	; 0x01
    2a3a:	a2 81       	ldd	r26, Z+2	; 0x02
    2a3c:	b3 81       	ldd	r27, Z+3	; 0x03
    2a3e:	89 83       	std	Y+1, r24	; 0x01
    2a40:	9a 83       	std	Y+2, r25	; 0x02
    2a42:	ab 83       	std	Y+3, r26	; 0x03
    2a44:	bc 83       	std	Y+4, r27	; 0x04
                    while (1)
                    {
                        data_buf[data_idx] = u32_val % 10 + '0';
    2a46:	89 89       	ldd	r24, Y+17	; 0x11
    2a48:	08 2f       	mov	r16, r24
    2a4a:	10 e0       	ldi	r17, 0x00	; 0
    2a4c:	89 81       	ldd	r24, Y+1	; 0x01
    2a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a50:	ab 81       	ldd	r26, Y+3	; 0x03
    2a52:	bc 81       	ldd	r27, Y+4	; 0x04
    2a54:	2a e0       	ldi	r18, 0x0A	; 10
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	40 e0       	ldi	r20, 0x00	; 0
    2a5a:	50 e0       	ldi	r21, 0x00	; 0
    2a5c:	bc 01       	movw	r22, r24
    2a5e:	cd 01       	movw	r24, r26
    2a60:	0e 94 28 17 	call	0x2e50	; 0x2e50 <__udivmodsi4>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	28 2f       	mov	r18, r24
    2a6a:	20 5d       	subi	r18, 0xD0	; 208
    2a6c:	ce 01       	movw	r24, r28
    2a6e:	4a 96       	adiw	r24, 0x1a	; 26
    2a70:	fc 01       	movw	r30, r24
    2a72:	e0 0f       	add	r30, r16
    2a74:	f1 1f       	adc	r31, r17
    2a76:	20 83       	st	Z, r18
                        u32_val /= 10;
    2a78:	89 81       	ldd	r24, Y+1	; 0x01
    2a7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a7c:	ab 81       	ldd	r26, Y+3	; 0x03
    2a7e:	bc 81       	ldd	r27, Y+4	; 0x04
    2a80:	2a e0       	ldi	r18, 0x0A	; 10
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	40 e0       	ldi	r20, 0x00	; 0
    2a86:	50 e0       	ldi	r21, 0x00	; 0
    2a88:	bc 01       	movw	r22, r24
    2a8a:	cd 01       	movw	r24, r26
    2a8c:	0e 94 28 17 	call	0x2e50	; 0x2e50 <__udivmodsi4>
    2a90:	da 01       	movw	r26, r20
    2a92:	c9 01       	movw	r24, r18
    2a94:	89 83       	std	Y+1, r24	; 0x01
    2a96:	9a 83       	std	Y+2, r25	; 0x02
    2a98:	ab 83       	std	Y+3, r26	; 0x03
    2a9a:	bc 83       	std	Y+4, r27	; 0x04
                        data_idx--;
    2a9c:	89 89       	ldd	r24, Y+17	; 0x11
    2a9e:	81 50       	subi	r24, 0x01	; 1
    2aa0:	89 8b       	std	Y+17, r24	; 0x11
						if (u32_val==0) break;
    2aa2:	89 81       	ldd	r24, Y+1	; 0x01
    2aa4:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa6:	ab 81       	ldd	r26, Y+3	; 0x03
    2aa8:	bc 81       	ldd	r27, Y+4	; 0x04
    2aaa:	00 97       	sbiw	r24, 0x00	; 0
    2aac:	a1 05       	cpc	r26, r1
    2aae:	b1 05       	cpc	r27, r1
    2ab0:	71 f1       	breq	.+92     	; 0x2b0e <uart_mini_printf+0x448>
    2ab2:	c9 cf       	rjmp	.-110    	; 0x2a46 <uart_mini_printf+0x380>
                    }
                }
                else  // 16-bit
                {
                    u16_val = (U16)(va_arg(arg_ptr, int)); // u16_val = va_arg(arg_ptr, U16);
    2ab4:	28 8d       	ldd	r18, Y+24	; 0x18
    2ab6:	39 8d       	ldd	r19, Y+25	; 0x19
    2ab8:	c9 01       	movw	r24, r18
    2aba:	02 96       	adiw	r24, 0x02	; 2
    2abc:	99 8f       	std	Y+25, r25	; 0x19
    2abe:	88 8f       	std	Y+24, r24	; 0x18
    2ac0:	f9 01       	movw	r30, r18
    2ac2:	80 81       	ld	r24, Z
    2ac4:	91 81       	ldd	r25, Z+1	; 0x01
    2ac6:	9e 83       	std	Y+6, r25	; 0x06
    2ac8:	8d 83       	std	Y+5, r24	; 0x05
                    while (1)
                    {
                        data_buf[data_idx] = u16_val % 10 + '0';
    2aca:	89 89       	ldd	r24, Y+17	; 0x11
    2acc:	e8 2f       	mov	r30, r24
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ad4:	2a e0       	ldi	r18, 0x0A	; 10
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	b9 01       	movw	r22, r18
    2ada:	0e 94 01 17 	call	0x2e02	; 0x2e02 <__udivmodhi4>
    2ade:	28 2f       	mov	r18, r24
    2ae0:	20 5d       	subi	r18, 0xD0	; 208
    2ae2:	ce 01       	movw	r24, r28
    2ae4:	4a 96       	adiw	r24, 0x1a	; 26
    2ae6:	e8 0f       	add	r30, r24
    2ae8:	f9 1f       	adc	r31, r25
    2aea:	20 83       	st	Z, r18
                        data_idx--;
    2aec:	89 89       	ldd	r24, Y+17	; 0x11
    2aee:	81 50       	subi	r24, 0x01	; 1
    2af0:	89 8b       	std	Y+17, r24	; 0x11
                        u16_val /= 10;
    2af2:	8d 81       	ldd	r24, Y+5	; 0x05
    2af4:	9e 81       	ldd	r25, Y+6	; 0x06
    2af6:	2a e0       	ldi	r18, 0x0A	; 10
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	b9 01       	movw	r22, r18
    2afc:	0e 94 01 17 	call	0x2e02	; 0x2e02 <__udivmodhi4>
    2b00:	cb 01       	movw	r24, r22
    2b02:	9e 83       	std	Y+6, r25	; 0x06
    2b04:	8d 83       	std	Y+5, r24	; 0x05
						if (u16_val==0) break;
    2b06:	8d 81       	ldd	r24, Y+5	; 0x05
    2b08:	9e 81       	ldd	r25, Y+6	; 0x06
    2b0a:	00 97       	sbiw	r24, 0x00	; 0
    2b0c:	f1 f6       	brne	.-68     	; 0x2aca <uart_mini_printf+0x404>
                    }
                }
                data_idx++;
    2b0e:	89 89       	ldd	r24, Y+17	; 0x11
    2b10:	8f 5f       	subi	r24, 0xFF	; 255
    2b12:	89 8b       	std	Y+17, r24	; 0x11
                if (min_size < data_idx)
    2b14:	98 89       	ldd	r25, Y+16	; 0x10
    2b16:	89 89       	ldd	r24, Y+17	; 0x11
    2b18:	98 17       	cp	r25, r24
    2b1a:	10 f4       	brcc	.+4      	; 0x2b20 <uart_mini_printf+0x45a>
                {
                    data_idx = min_size;
    2b1c:	88 89       	ldd	r24, Y+16	; 0x10
    2b1e:	89 8b       	std	Y+17, r24	; 0x11
                }
                uart_put_string (data_buf + data_idx);
    2b20:	89 89       	ldd	r24, Y+17	; 0x11
    2b22:	28 2f       	mov	r18, r24
    2b24:	30 e0       	ldi	r19, 0x00	; 0
    2b26:	ce 01       	movw	r24, r28
    2b28:	4a 96       	adiw	r24, 0x1a	; 26
    2b2a:	82 0f       	add	r24, r18
    2b2c:	93 1f       	adc	r25, r19
    2b2e:	0e 94 46 13 	call	0x268c	; 0x268c <uart_put_string>
                // Clean up
                min_size = DATA_BUF_LEN-1;
    2b32:	8b e0       	ldi	r24, 0x0B	; 11
    2b34:	88 8b       	std	Y+16, r24	; 0x10
                alt_p_c = FALSE;
    2b36:	1e 86       	std	Y+14, r1	; 0x0e
                long_flag = FALSE;
    2b38:	1f 86       	std	Y+15, r1	; 0x0f
    2b3a:	4c c1       	rjmp	.+664    	; 0x2dd4 <uart_mini_printf+0x70e>
                break;  // case 'u':
                
            case 'x':
            case 'X':
                for(data_idx = 0; data_idx < (DATA_BUF_LEN-1); data_idx++)
    2b3c:	19 8a       	std	Y+17, r1	; 0x11
    2b3e:	0d c0       	rjmp	.+26     	; 0x2b5a <uart_mini_printf+0x494>
                {
                    data_buf[data_idx] = '0';
    2b40:	89 89       	ldd	r24, Y+17	; 0x11
    2b42:	28 2f       	mov	r18, r24
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	ce 01       	movw	r24, r28
    2b48:	4a 96       	adiw	r24, 0x1a	; 26
    2b4a:	fc 01       	movw	r30, r24
    2b4c:	e2 0f       	add	r30, r18
    2b4e:	f3 1f       	adc	r31, r19
    2b50:	80 e3       	ldi	r24, 0x30	; 48
    2b52:	80 83       	st	Z, r24
                long_flag = FALSE;
                break;  // case 'u':
                
            case 'x':
            case 'X':
                for(data_idx = 0; data_idx < (DATA_BUF_LEN-1); data_idx++)
    2b54:	89 89       	ldd	r24, Y+17	; 0x11
    2b56:	8f 5f       	subi	r24, 0xFF	; 255
    2b58:	89 8b       	std	Y+17, r24	; 0x11
    2b5a:	89 89       	ldd	r24, Y+17	; 0x11
    2b5c:	8b 30       	cpi	r24, 0x0B	; 11
    2b5e:	80 f3       	brcs	.-32     	; 0x2b40 <uart_mini_printf+0x47a>
                {
                    data_buf[data_idx] = '0';
                }
                data_buf[DATA_BUF_LEN-1] = 0;
    2b60:	1d a2       	std	Y+37, r1	; 0x25
                data_idx = DATA_BUF_LEN - 2;
    2b62:	8a e0       	ldi	r24, 0x0A	; 10
    2b64:	89 8b       	std	Y+17, r24	; 0x11
                if (long_flag)  // 32-bit
    2b66:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b68:	88 23       	and	r24, r24
    2b6a:	09 f4       	brne	.+2      	; 0x2b6e <uart_mini_printf+0x4a8>
    2b6c:	55 c0       	rjmp	.+170    	; 0x2c18 <uart_mini_printf+0x552>
                { 
                    u32_val = va_arg(arg_ptr, U32);
    2b6e:	28 8d       	ldd	r18, Y+24	; 0x18
    2b70:	39 8d       	ldd	r19, Y+25	; 0x19
    2b72:	c9 01       	movw	r24, r18
    2b74:	04 96       	adiw	r24, 0x04	; 4
    2b76:	99 8f       	std	Y+25, r25	; 0x19
    2b78:	88 8f       	std	Y+24, r24	; 0x18
    2b7a:	f9 01       	movw	r30, r18
    2b7c:	80 81       	ld	r24, Z
    2b7e:	91 81       	ldd	r25, Z+1	; 0x01
    2b80:	a2 81       	ldd	r26, Z+2	; 0x02
    2b82:	b3 81       	ldd	r27, Z+3	; 0x03
    2b84:	89 83       	std	Y+1, r24	; 0x01
    2b86:	9a 83       	std	Y+2, r25	; 0x02
    2b88:	ab 83       	std	Y+3, r26	; 0x03
    2b8a:	bc 83       	std	Y+4, r27	; 0x04
    2b8c:	3b c0       	rjmp	.+118    	; 0x2c04 <uart_mini_printf+0x53e>
                    while (u32_val)
                    {
                        u8_temp = (U8)(u32_val & 0x0F);
    2b8e:	89 81       	ldd	r24, Y+1	; 0x01
    2b90:	8f 70       	andi	r24, 0x0F	; 15
    2b92:	8b 8b       	std	Y+19, r24	; 0x13
                        data_buf[data_idx] = (u8_temp < 10)? u8_temp+'0':u8_temp-10+(*p=='x'?'a':'A');
    2b94:	89 89       	ldd	r24, Y+17	; 0x11
    2b96:	28 2f       	mov	r18, r24
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	3d a7       	std	Y+45, r19	; 0x2d
    2b9c:	2c a7       	std	Y+44, r18	; 0x2c
    2b9e:	8b 89       	ldd	r24, Y+19	; 0x13
    2ba0:	8a 30       	cpi	r24, 0x0A	; 10
    2ba2:	28 f4       	brcc	.+10     	; 0x2bae <uart_mini_printf+0x4e8>
    2ba4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ba6:	38 2f       	mov	r19, r24
    2ba8:	30 5d       	subi	r19, 0xD0	; 208
    2baa:	3b a7       	std	Y+43, r19	; 0x2b
    2bac:	10 c0       	rjmp	.+32     	; 0x2bce <uart_mini_printf+0x508>
    2bae:	ee 89       	ldd	r30, Y+22	; 0x16
    2bb0:	ff 89       	ldd	r31, Y+23	; 0x17
    2bb2:	80 81       	ld	r24, Z
    2bb4:	88 37       	cpi	r24, 0x78	; 120
    2bb6:	19 f4       	brne	.+6      	; 0x2bbe <uart_mini_printf+0x4f8>
    2bb8:	81 e6       	ldi	r24, 0x61	; 97
    2bba:	8a a7       	std	Y+42, r24	; 0x2a
    2bbc:	02 c0       	rjmp	.+4      	; 0x2bc2 <uart_mini_printf+0x4fc>
    2bbe:	91 e4       	ldi	r25, 0x41	; 65
    2bc0:	9a a7       	std	Y+42, r25	; 0x2a
    2bc2:	8b 89       	ldd	r24, Y+19	; 0x13
    2bc4:	2a a5       	ldd	r18, Y+42	; 0x2a
    2bc6:	82 0f       	add	r24, r18
    2bc8:	38 2f       	mov	r19, r24
    2bca:	3a 50       	subi	r19, 0x0A	; 10
    2bcc:	3b a7       	std	Y+43, r19	; 0x2b
    2bce:	ce 01       	movw	r24, r28
    2bd0:	4a 96       	adiw	r24, 0x1a	; 26
    2bd2:	ec a5       	ldd	r30, Y+44	; 0x2c
    2bd4:	fd a5       	ldd	r31, Y+45	; 0x2d
    2bd6:	e8 0f       	add	r30, r24
    2bd8:	f9 1f       	adc	r31, r25
    2bda:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bdc:	80 83       	st	Z, r24
                        u32_val >>= 4;
    2bde:	89 81       	ldd	r24, Y+1	; 0x01
    2be0:	9a 81       	ldd	r25, Y+2	; 0x02
    2be2:	ab 81       	ldd	r26, Y+3	; 0x03
    2be4:	bc 81       	ldd	r27, Y+4	; 0x04
    2be6:	68 94       	set
    2be8:	13 f8       	bld	r1, 3
    2bea:	b6 95       	lsr	r27
    2bec:	a7 95       	ror	r26
    2bee:	97 95       	ror	r25
    2bf0:	87 95       	ror	r24
    2bf2:	16 94       	lsr	r1
    2bf4:	d1 f7       	brne	.-12     	; 0x2bea <uart_mini_printf+0x524>
    2bf6:	89 83       	std	Y+1, r24	; 0x01
    2bf8:	9a 83       	std	Y+2, r25	; 0x02
    2bfa:	ab 83       	std	Y+3, r26	; 0x03
    2bfc:	bc 83       	std	Y+4, r27	; 0x04
                        data_idx--;
    2bfe:	89 89       	ldd	r24, Y+17	; 0x11
    2c00:	81 50       	subi	r24, 0x01	; 1
    2c02:	89 8b       	std	Y+17, r24	; 0x11
                data_buf[DATA_BUF_LEN-1] = 0;
                data_idx = DATA_BUF_LEN - 2;
                if (long_flag)  // 32-bit
                { 
                    u32_val = va_arg(arg_ptr, U32);
                    while (u32_val)
    2c04:	89 81       	ldd	r24, Y+1	; 0x01
    2c06:	9a 81       	ldd	r25, Y+2	; 0x02
    2c08:	ab 81       	ldd	r26, Y+3	; 0x03
    2c0a:	bc 81       	ldd	r27, Y+4	; 0x04
    2c0c:	00 97       	sbiw	r24, 0x00	; 0
    2c0e:	a1 05       	cpc	r26, r1
    2c10:	b1 05       	cpc	r27, r1
    2c12:	09 f0       	breq	.+2      	; 0x2c16 <uart_mini_printf+0x550>
    2c14:	bc cf       	rjmp	.-136    	; 0x2b8e <uart_mini_printf+0x4c8>
    2c16:	45 c0       	rjmp	.+138    	; 0x2ca2 <uart_mini_printf+0x5dc>
                        data_idx--;
                    }
                }
                else  // 16-bit
                {
                    u16_val = (U16)(va_arg(arg_ptr, int)); // u16_val = va_arg(arg_ptr, U16);
    2c18:	28 8d       	ldd	r18, Y+24	; 0x18
    2c1a:	39 8d       	ldd	r19, Y+25	; 0x19
    2c1c:	c9 01       	movw	r24, r18
    2c1e:	02 96       	adiw	r24, 0x02	; 2
    2c20:	99 8f       	std	Y+25, r25	; 0x19
    2c22:	88 8f       	std	Y+24, r24	; 0x18
    2c24:	f9 01       	movw	r30, r18
    2c26:	80 81       	ld	r24, Z
    2c28:	91 81       	ldd	r25, Z+1	; 0x01
    2c2a:	9e 83       	std	Y+6, r25	; 0x06
    2c2c:	8d 83       	std	Y+5, r24	; 0x05
    2c2e:	35 c0       	rjmp	.+106    	; 0x2c9a <uart_mini_printf+0x5d4>
                    while (u16_val)
                    {
                        u8_temp = (U8)(u16_val & 0x0F);
    2c30:	8d 81       	ldd	r24, Y+5	; 0x05
    2c32:	8f 70       	andi	r24, 0x0F	; 15
    2c34:	8b 8b       	std	Y+19, r24	; 0x13
                        data_buf[data_idx] = (u8_temp < 10)? u8_temp+'0':u8_temp-10+(*p=='x'?'a':'A');
    2c36:	89 89       	ldd	r24, Y+17	; 0x11
    2c38:	28 2f       	mov	r18, r24
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	39 a7       	std	Y+41, r19	; 0x29
    2c3e:	28 a7       	std	Y+40, r18	; 0x28
    2c40:	8b 89       	ldd	r24, Y+19	; 0x13
    2c42:	8a 30       	cpi	r24, 0x0A	; 10
    2c44:	28 f4       	brcc	.+10     	; 0x2c50 <uart_mini_printf+0x58a>
    2c46:	8b 89       	ldd	r24, Y+19	; 0x13
    2c48:	38 2f       	mov	r19, r24
    2c4a:	30 5d       	subi	r19, 0xD0	; 208
    2c4c:	3f a3       	std	Y+39, r19	; 0x27
    2c4e:	10 c0       	rjmp	.+32     	; 0x2c70 <uart_mini_printf+0x5aa>
    2c50:	ee 89       	ldd	r30, Y+22	; 0x16
    2c52:	ff 89       	ldd	r31, Y+23	; 0x17
    2c54:	80 81       	ld	r24, Z
    2c56:	88 37       	cpi	r24, 0x78	; 120
    2c58:	19 f4       	brne	.+6      	; 0x2c60 <uart_mini_printf+0x59a>
    2c5a:	81 e6       	ldi	r24, 0x61	; 97
    2c5c:	8e a3       	std	Y+38, r24	; 0x26
    2c5e:	02 c0       	rjmp	.+4      	; 0x2c64 <uart_mini_printf+0x59e>
    2c60:	91 e4       	ldi	r25, 0x41	; 65
    2c62:	9e a3       	std	Y+38, r25	; 0x26
    2c64:	8b 89       	ldd	r24, Y+19	; 0x13
    2c66:	2e a1       	ldd	r18, Y+38	; 0x26
    2c68:	82 0f       	add	r24, r18
    2c6a:	38 2f       	mov	r19, r24
    2c6c:	3a 50       	subi	r19, 0x0A	; 10
    2c6e:	3f a3       	std	Y+39, r19	; 0x27
    2c70:	ce 01       	movw	r24, r28
    2c72:	4a 96       	adiw	r24, 0x1a	; 26
    2c74:	e8 a5       	ldd	r30, Y+40	; 0x28
    2c76:	f9 a5       	ldd	r31, Y+41	; 0x29
    2c78:	e8 0f       	add	r30, r24
    2c7a:	f9 1f       	adc	r31, r25
    2c7c:	8f a1       	ldd	r24, Y+39	; 0x27
    2c7e:	80 83       	st	Z, r24
                        u16_val >>= 4;
    2c80:	8d 81       	ldd	r24, Y+5	; 0x05
    2c82:	9e 81       	ldd	r25, Y+6	; 0x06
    2c84:	92 95       	swap	r25
    2c86:	82 95       	swap	r24
    2c88:	8f 70       	andi	r24, 0x0F	; 15
    2c8a:	89 27       	eor	r24, r25
    2c8c:	9f 70       	andi	r25, 0x0F	; 15
    2c8e:	89 27       	eor	r24, r25
    2c90:	9e 83       	std	Y+6, r25	; 0x06
    2c92:	8d 83       	std	Y+5, r24	; 0x05
                        data_idx--;
    2c94:	89 89       	ldd	r24, Y+17	; 0x11
    2c96:	81 50       	subi	r24, 0x01	; 1
    2c98:	89 8b       	std	Y+17, r24	; 0x11
                    }
                }
                else  // 16-bit
                {
                    u16_val = (U16)(va_arg(arg_ptr, int)); // u16_val = va_arg(arg_ptr, U16);
                    while (u16_val)
    2c9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c9e:	00 97       	sbiw	r24, 0x00	; 0
    2ca0:	39 f6       	brne	.-114    	; 0x2c30 <uart_mini_printf+0x56a>
                        data_buf[data_idx] = (u8_temp < 10)? u8_temp+'0':u8_temp-10+(*p=='x'?'a':'A');
                        u16_val >>= 4;
                        data_idx--;
                    }
                }
                data_idx++;
    2ca2:	89 89       	ldd	r24, Y+17	; 0x11
    2ca4:	8f 5f       	subi	r24, 0xFF	; 255
    2ca6:	89 8b       	std	Y+17, r24	; 0x11
                if (min_size < data_idx)
    2ca8:	98 89       	ldd	r25, Y+16	; 0x10
    2caa:	89 89       	ldd	r24, Y+17	; 0x11
    2cac:	98 17       	cp	r25, r24
    2cae:	10 f4       	brcc	.+4      	; 0x2cb4 <uart_mini_printf+0x5ee>
                {
                    data_idx = min_size;
    2cb0:	88 89       	ldd	r24, Y+16	; 0x10
    2cb2:	89 8b       	std	Y+17, r24	; 0x11
                }
                uart_put_string (data_buf + data_idx);
    2cb4:	89 89       	ldd	r24, Y+17	; 0x11
    2cb6:	28 2f       	mov	r18, r24
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	ce 01       	movw	r24, r28
    2cbc:	4a 96       	adiw	r24, 0x1a	; 26
    2cbe:	82 0f       	add	r24, r18
    2cc0:	93 1f       	adc	r25, r19
    2cc2:	0e 94 46 13 	call	0x268c	; 0x268c <uart_put_string>
                // Clean up
                min_size = DATA_BUF_LEN-1;
    2cc6:	8b e0       	ldi	r24, 0x0B	; 11
    2cc8:	88 8b       	std	Y+16, r24	; 0x10
                alt_p_c = FALSE;
    2cca:	1e 86       	std	Y+14, r1	; 0x0e
                long_flag = FALSE;
    2ccc:	1f 86       	std	Y+15, r1	; 0x0f
    2cce:	82 c0       	rjmp	.+260    	; 0x2dd4 <uart_mini_printf+0x70e>
                break;  // case 'x' & 'X'
                
            case '0':   // Max allowed "min_size" 2 decimal digit, truncated to DATA_BUF_LEN-1.
                min_size = DATA_BUF_LEN-1;
    2cd0:	8b e0       	ldi	r24, 0x0B	; 11
    2cd2:	88 8b       	std	Y+16, r24	; 0x10
                if (long_flag == TRUE)      // ERROR: 'l' before '0'
    2cd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cd6:	81 30       	cpi	r24, 0x01	; 1
    2cd8:	49 f4       	brne	.+18     	; 0x2cec <uart_mini_printf+0x626>
                {
                    uart_putchar('l');
    2cda:	8c e6       	ldi	r24, 0x6C	; 108
    2cdc:	0e 94 0b 13 	call	0x2616	; 0x2616 <uart_putchar>
                    uart_putchar('0');
    2ce0:	80 e3       	ldi	r24, 0x30	; 48
    2ce2:	0e 94 0b 13 	call	0x2616	; 0x2616 <uart_putchar>
                    // Clean up
                    alt_p_c = FALSE;
    2ce6:	1e 86       	std	Y+14, r1	; 0x0e
                    long_flag = FALSE;
    2ce8:	1f 86       	std	Y+15, r1	; 0x0f
    2cea:	74 c0       	rjmp	.+232    	; 0x2dd4 <uart_mini_printf+0x70e>
                    break;
                }
                u8_temp = *++p;
    2cec:	8e 89       	ldd	r24, Y+22	; 0x16
    2cee:	9f 89       	ldd	r25, Y+23	; 0x17
    2cf0:	01 96       	adiw	r24, 0x01	; 1
    2cf2:	9f 8b       	std	Y+23, r25	; 0x17
    2cf4:	8e 8b       	std	Y+22, r24	; 0x16
    2cf6:	ee 89       	ldd	r30, Y+22	; 0x16
    2cf8:	ff 89       	ldd	r31, Y+23	; 0x17
    2cfa:	80 81       	ld	r24, Z
    2cfc:	8b 8b       	std	Y+19, r24	; 0x13
                if ((u8_temp >='0') && (u8_temp <='9'))
    2cfe:	8b 89       	ldd	r24, Y+19	; 0x13
    2d00:	80 33       	cpi	r24, 0x30	; 48
    2d02:	08 f4       	brcc	.+2      	; 0x2d06 <uart_mini_printf+0x640>
    2d04:	4d c0       	rjmp	.+154    	; 0x2da0 <uart_mini_printf+0x6da>
    2d06:	8b 89       	ldd	r24, Y+19	; 0x13
    2d08:	8a 33       	cpi	r24, 0x3A	; 58
    2d0a:	08 f0       	brcs	.+2      	; 0x2d0e <uart_mini_printf+0x648>
    2d0c:	49 c0       	rjmp	.+146    	; 0x2da0 <uart_mini_printf+0x6da>
                {
                    min_size = u8_temp & 0x0F;
    2d0e:	8b 89       	ldd	r24, Y+19	; 0x13
    2d10:	8f 70       	andi	r24, 0x0F	; 15
    2d12:	88 8b       	std	Y+16, r24	; 0x10
                    u8_temp = *++p;
    2d14:	8e 89       	ldd	r24, Y+22	; 0x16
    2d16:	9f 89       	ldd	r25, Y+23	; 0x17
    2d18:	01 96       	adiw	r24, 0x01	; 1
    2d1a:	9f 8b       	std	Y+23, r25	; 0x17
    2d1c:	8e 8b       	std	Y+22, r24	; 0x16
    2d1e:	ee 89       	ldd	r30, Y+22	; 0x16
    2d20:	ff 89       	ldd	r31, Y+23	; 0x17
    2d22:	80 81       	ld	r24, Z
    2d24:	8b 8b       	std	Y+19, r24	; 0x13
                    if ((u8_temp >='0') && (u8_temp <='9'))
    2d26:	8b 89       	ldd	r24, Y+19	; 0x13
    2d28:	80 33       	cpi	r24, 0x30	; 48
    2d2a:	90 f0       	brcs	.+36     	; 0x2d50 <uart_mini_printf+0x68a>
    2d2c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d2e:	8a 33       	cpi	r24, 0x3A	; 58
    2d30:	78 f4       	brcc	.+30     	; 0x2d50 <uart_mini_printf+0x68a>
                    {
                        min_size <<= 4;
    2d32:	88 89       	ldd	r24, Y+16	; 0x10
    2d34:	82 95       	swap	r24
    2d36:	80 7f       	andi	r24, 0xF0	; 240
    2d38:	88 8b       	std	Y+16, r24	; 0x10
                        min_size |= (u8_temp & 0x0F);
    2d3a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d3c:	98 2f       	mov	r25, r24
    2d3e:	9f 70       	andi	r25, 0x0F	; 15
    2d40:	88 89       	ldd	r24, Y+16	; 0x10
    2d42:	89 2b       	or	r24, r25
    2d44:	88 8b       	std	Y+16, r24	; 0x10
                        p++;
    2d46:	8e 89       	ldd	r24, Y+22	; 0x16
    2d48:	9f 89       	ldd	r25, Y+23	; 0x17
    2d4a:	01 96       	adiw	r24, 0x01	; 1
    2d4c:	9f 8b       	std	Y+23, r25	; 0x17
    2d4e:	8e 8b       	std	Y+22, r24	; 0x16
                    }
                    min_size = ((min_size & 0x0F) + ((min_size >> 4) *10));  // Decimal to hexa
    2d50:	88 89       	ldd	r24, Y+16	; 0x10
    2d52:	48 2f       	mov	r20, r24
    2d54:	4f 70       	andi	r20, 0x0F	; 15
    2d56:	88 89       	ldd	r24, Y+16	; 0x10
    2d58:	82 95       	swap	r24
    2d5a:	8f 70       	andi	r24, 0x0F	; 15
    2d5c:	88 2f       	mov	r24, r24
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	9c 01       	movw	r18, r24
    2d62:	22 0f       	add	r18, r18
    2d64:	33 1f       	adc	r19, r19
    2d66:	c9 01       	movw	r24, r18
    2d68:	88 0f       	add	r24, r24
    2d6a:	99 1f       	adc	r25, r25
    2d6c:	88 0f       	add	r24, r24
    2d6e:	99 1f       	adc	r25, r25
    2d70:	82 0f       	add	r24, r18
    2d72:	93 1f       	adc	r25, r19
    2d74:	84 0f       	add	r24, r20
    2d76:	88 8b       	std	Y+16, r24	; 0x10
                    if (min_size > (DATA_BUF_LEN-1))
    2d78:	88 89       	ldd	r24, Y+16	; 0x10
    2d7a:	8c 30       	cpi	r24, 0x0C	; 12
    2d7c:	10 f0       	brcs	.+4      	; 0x2d82 <uart_mini_printf+0x6bc>
                    {
                        min_size = (DATA_BUF_LEN-1);
    2d7e:	8b e0       	ldi	r24, 0x0B	; 11
    2d80:	88 8b       	std	Y+16, r24	; 0x10
                    }  // Truncation
                    min_size = DATA_BUF_LEN-1 - min_size;  // "min_size" formatted as "data_ix"
    2d82:	9b e0       	ldi	r25, 0x0B	; 11
    2d84:	88 89       	ldd	r24, Y+16	; 0x10
    2d86:	29 2f       	mov	r18, r25
    2d88:	28 1b       	sub	r18, r24
    2d8a:	82 2f       	mov	r24, r18
    2d8c:	88 8b       	std	Y+16, r24	; 0x10
                    // Clean up
                    alt_p_c = FALSE;
                    long_flag = FALSE;
                    break;
                }
                p-=2;
    2d8e:	8e 89       	ldd	r24, Y+22	; 0x16
    2d90:	9f 89       	ldd	r25, Y+23	; 0x17
    2d92:	02 97       	sbiw	r24, 0x02	; 2
    2d94:	9f 8b       	std	Y+23, r25	; 0x17
    2d96:	8e 8b       	std	Y+22, r24	; 0x16
                alt_p_c = TRUE;
    2d98:	81 e0       	ldi	r24, 0x01	; 1
    2d9a:	8e 87       	std	Y+14, r24	; 0x0e
                // Clean up
                long_flag = FALSE;
    2d9c:	1f 86       	std	Y+15, r1	; 0x0f
    2d9e:	1a c0       	rjmp	.+52     	; 0x2dd4 <uart_mini_printf+0x70e>
                    }  // Truncation
                    min_size = DATA_BUF_LEN-1 - min_size;  // "min_size" formatted as "data_ix"
                }
                else      // ERROR: any "char" after '0'
                {
                    uart_putchar('0');
    2da0:	80 e3       	ldi	r24, 0x30	; 48
    2da2:	0e 94 0b 13 	call	0x2616	; 0x2616 <uart_putchar>
                    uart_putchar(*p);
    2da6:	ee 89       	ldd	r30, Y+22	; 0x16
    2da8:	ff 89       	ldd	r31, Y+23	; 0x17
    2daa:	80 81       	ld	r24, Z
    2dac:	0e 94 0b 13 	call	0x2616	; 0x2616 <uart_putchar>
                    // Clean up
                    alt_p_c = FALSE;
    2db0:	1e 86       	std	Y+14, r1	; 0x0e
                    long_flag = FALSE;
    2db2:	1f 86       	std	Y+15, r1	; 0x0f
    2db4:	0f c0       	rjmp	.+30     	; 0x2dd4 <uart_mini_printf+0x70e>
                // Clean up
                long_flag = FALSE;
                break;  // case '0'
                
            default:
                if (long_flag == TRUE)
    2db6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2db8:	81 30       	cpi	r24, 0x01	; 1
    2dba:	19 f4       	brne	.+6      	; 0x2dc2 <uart_mini_printf+0x6fc>
                {
                    uart_putchar('l');
    2dbc:	8c e6       	ldi	r24, 0x6C	; 108
    2dbe:	0e 94 0b 13 	call	0x2616	; 0x2616 <uart_putchar>
                }
                uart_putchar(*p);
    2dc2:	ee 89       	ldd	r30, Y+22	; 0x16
    2dc4:	ff 89       	ldd	r31, Y+23	; 0x17
    2dc6:	80 81       	ld	r24, Z
    2dc8:	0e 94 0b 13 	call	0x2616	; 0x2616 <uart_putchar>
                // Clean up
                min_size = DATA_BUF_LEN-1;
    2dcc:	8b e0       	ldi	r24, 0x0B	; 11
    2dce:	88 8b       	std	Y+16, r24	; 0x10
                alt_p_c = FALSE;
    2dd0:	1e 86       	std	Y+14, r1	; 0x0e
                long_flag = FALSE;
    2dd2:	1f 86       	std	Y+15, r1	; 0x0f
    long_flag = FALSE;
    alt_p_c = FALSE;
    min_size = DATA_BUF_LEN-1;

    va_start(arg_ptr, format);   // make arg_ptr point to the first unnamed arg
    for (p = (U8 *) format; *p; p++)
    2dd4:	8e 89       	ldd	r24, Y+22	; 0x16
    2dd6:	9f 89       	ldd	r25, Y+23	; 0x17
    2dd8:	01 96       	adiw	r24, 0x01	; 1
    2dda:	9f 8b       	std	Y+23, r25	; 0x17
    2ddc:	8e 8b       	std	Y+22, r24	; 0x16
    2dde:	ee 89       	ldd	r30, Y+22	; 0x16
    2de0:	ff 89       	ldd	r31, Y+23	; 0x17
    2de2:	80 81       	ld	r24, Z
    2de4:	88 23       	and	r24, r24
    2de6:	09 f0       	breq	.+2      	; 0x2dea <uart_mini_printf+0x724>
    2de8:	87 cc       	rjmp	.-1778   	; 0x26f8 <uart_mini_printf+0x32>
        }   // switch (*p ...
        
    }   // for (p = ...
    
    va_end(arg_ptr);
    return 0;
    2dea:	80 e0       	ldi	r24, 0x00	; 0
}
    2dec:	af 96       	adiw	r28, 0x2f	; 47
    2dee:	0f b6       	in	r0, 0x3f	; 63
    2df0:	f8 94       	cli
    2df2:	de bf       	out	0x3e, r29	; 62
    2df4:	0f be       	out	0x3f, r0	; 63
    2df6:	cd bf       	out	0x3d, r28	; 61
    2df8:	cf 91       	pop	r28
    2dfa:	df 91       	pop	r29
    2dfc:	1f 91       	pop	r17
    2dfe:	0f 91       	pop	r16
    2e00:	08 95       	ret

00002e02 <__udivmodhi4>:
    2e02:	aa 1b       	sub	r26, r26
    2e04:	bb 1b       	sub	r27, r27
    2e06:	51 e1       	ldi	r21, 0x11	; 17
    2e08:	07 c0       	rjmp	.+14     	; 0x2e18 <__udivmodhi4_ep>

00002e0a <__udivmodhi4_loop>:
    2e0a:	aa 1f       	adc	r26, r26
    2e0c:	bb 1f       	adc	r27, r27
    2e0e:	a6 17       	cp	r26, r22
    2e10:	b7 07       	cpc	r27, r23
    2e12:	10 f0       	brcs	.+4      	; 0x2e18 <__udivmodhi4_ep>
    2e14:	a6 1b       	sub	r26, r22
    2e16:	b7 0b       	sbc	r27, r23

00002e18 <__udivmodhi4_ep>:
    2e18:	88 1f       	adc	r24, r24
    2e1a:	99 1f       	adc	r25, r25
    2e1c:	5a 95       	dec	r21
    2e1e:	a9 f7       	brne	.-22     	; 0x2e0a <__udivmodhi4_loop>
    2e20:	80 95       	com	r24
    2e22:	90 95       	com	r25
    2e24:	bc 01       	movw	r22, r24
    2e26:	cd 01       	movw	r24, r26
    2e28:	08 95       	ret

00002e2a <__divmodhi4>:
    2e2a:	97 fb       	bst	r25, 7
    2e2c:	09 2e       	mov	r0, r25
    2e2e:	07 26       	eor	r0, r23
    2e30:	0a d0       	rcall	.+20     	; 0x2e46 <__divmodhi4_neg1>
    2e32:	77 fd       	sbrc	r23, 7
    2e34:	04 d0       	rcall	.+8      	; 0x2e3e <__divmodhi4_neg2>
    2e36:	e5 df       	rcall	.-54     	; 0x2e02 <__udivmodhi4>
    2e38:	06 d0       	rcall	.+12     	; 0x2e46 <__divmodhi4_neg1>
    2e3a:	00 20       	and	r0, r0
    2e3c:	1a f4       	brpl	.+6      	; 0x2e44 <__divmodhi4_exit>

00002e3e <__divmodhi4_neg2>:
    2e3e:	70 95       	com	r23
    2e40:	61 95       	neg	r22
    2e42:	7f 4f       	sbci	r23, 0xFF	; 255

00002e44 <__divmodhi4_exit>:
    2e44:	08 95       	ret

00002e46 <__divmodhi4_neg1>:
    2e46:	f6 f7       	brtc	.-4      	; 0x2e44 <__divmodhi4_exit>
    2e48:	90 95       	com	r25
    2e4a:	81 95       	neg	r24
    2e4c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e4e:	08 95       	ret

00002e50 <__udivmodsi4>:
    2e50:	a1 e2       	ldi	r26, 0x21	; 33
    2e52:	1a 2e       	mov	r1, r26
    2e54:	aa 1b       	sub	r26, r26
    2e56:	bb 1b       	sub	r27, r27
    2e58:	fd 01       	movw	r30, r26
    2e5a:	0d c0       	rjmp	.+26     	; 0x2e76 <__udivmodsi4_ep>

00002e5c <__udivmodsi4_loop>:
    2e5c:	aa 1f       	adc	r26, r26
    2e5e:	bb 1f       	adc	r27, r27
    2e60:	ee 1f       	adc	r30, r30
    2e62:	ff 1f       	adc	r31, r31
    2e64:	a2 17       	cp	r26, r18
    2e66:	b3 07       	cpc	r27, r19
    2e68:	e4 07       	cpc	r30, r20
    2e6a:	f5 07       	cpc	r31, r21
    2e6c:	20 f0       	brcs	.+8      	; 0x2e76 <__udivmodsi4_ep>
    2e6e:	a2 1b       	sub	r26, r18
    2e70:	b3 0b       	sbc	r27, r19
    2e72:	e4 0b       	sbc	r30, r20
    2e74:	f5 0b       	sbc	r31, r21

00002e76 <__udivmodsi4_ep>:
    2e76:	66 1f       	adc	r22, r22
    2e78:	77 1f       	adc	r23, r23
    2e7a:	88 1f       	adc	r24, r24
    2e7c:	99 1f       	adc	r25, r25
    2e7e:	1a 94       	dec	r1
    2e80:	69 f7       	brne	.-38     	; 0x2e5c <__udivmodsi4_loop>
    2e82:	60 95       	com	r22
    2e84:	70 95       	com	r23
    2e86:	80 95       	com	r24
    2e88:	90 95       	com	r25
    2e8a:	9b 01       	movw	r18, r22
    2e8c:	ac 01       	movw	r20, r24
    2e8e:	bd 01       	movw	r22, r26
    2e90:	cf 01       	movw	r24, r30
    2e92:	08 95       	ret

00002e94 <__divmodsi4>:
    2e94:	97 fb       	bst	r25, 7
    2e96:	09 2e       	mov	r0, r25
    2e98:	05 26       	eor	r0, r21
    2e9a:	0e d0       	rcall	.+28     	; 0x2eb8 <__divmodsi4_neg1>
    2e9c:	57 fd       	sbrc	r21, 7
    2e9e:	04 d0       	rcall	.+8      	; 0x2ea8 <__divmodsi4_neg2>
    2ea0:	d7 df       	rcall	.-82     	; 0x2e50 <__udivmodsi4>
    2ea2:	0a d0       	rcall	.+20     	; 0x2eb8 <__divmodsi4_neg1>
    2ea4:	00 1c       	adc	r0, r0
    2ea6:	38 f4       	brcc	.+14     	; 0x2eb6 <__divmodsi4_exit>

00002ea8 <__divmodsi4_neg2>:
    2ea8:	50 95       	com	r21
    2eaa:	40 95       	com	r20
    2eac:	30 95       	com	r19
    2eae:	21 95       	neg	r18
    2eb0:	3f 4f       	sbci	r19, 0xFF	; 255
    2eb2:	4f 4f       	sbci	r20, 0xFF	; 255
    2eb4:	5f 4f       	sbci	r21, 0xFF	; 255

00002eb6 <__divmodsi4_exit>:
    2eb6:	08 95       	ret

00002eb8 <__divmodsi4_neg1>:
    2eb8:	f6 f7       	brtc	.-4      	; 0x2eb6 <__divmodsi4_exit>
    2eba:	90 95       	com	r25
    2ebc:	80 95       	com	r24
    2ebe:	70 95       	com	r23
    2ec0:	61 95       	neg	r22
    2ec2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ec4:	8f 4f       	sbci	r24, 0xFF	; 255
    2ec6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ec8:	08 95       	ret

00002eca <_exit>:
    2eca:	f8 94       	cli

00002ecc <__stop_program>:
    2ecc:	ff cf       	rjmp	.-2      	; 0x2ecc <__stop_program>
