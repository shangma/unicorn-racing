GAS LISTING /tmp/ccJqfgJ9.s 			page 1


   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  10               		.stabs	"/home/morten/Documents/unicorn-racing/avr/CAN/pwdtest/",100,0,2,.Ltext0
  11               		.stabs	"main.c",100,0,2,.Ltext0
  12               		.text
  13               	.Ltext0:
  14               		.stabs	"gcc2_compiled.",60,0,0,0
  15               		.stabs	"int:t(0,1)=r(0,1);-32768;32767;",128,0,1,0
  16               		.stabs	"char:t(0,2)=@s8;r(0,2);0;255;",128,0,1,0
  17               		.stabs	"long int:t(0,3)=@s32;r(0,3);020000000000;017777777777;",128,0,1,0
  18               		.stabs	"unsigned int:t(0,4)=r(0,4);0;0177777;",128,0,1,0
  19               		.stabs	"long unsigned int:t(0,5)=@s32;r(0,5);0;037777777777;",128,0,1,0
  20               		.stabs	"long long int:t(0,6)=@s64;r(0,6);01000000000000000000000;0777777777777777777777;",128,0,1,
  21               		.stabs	"long long unsigned int:t(0,7)=@s64;r(0,7);0;01777777777777777777777;",128,0,1,0
  22               		.stabs	"short int:t(0,8)=r(0,8);-32768;32767;",128,0,1,0
  23               		.stabs	"short unsigned int:t(0,9)=r(0,9);0;0177777;",128,0,1,0
  24               		.stabs	"signed char:t(0,10)=@s8;r(0,10);-128;127;",128,0,1,0
  25               		.stabs	"unsigned char:t(0,11)=@s8;r(0,11);0;255;",128,0,1,0
  26               		.stabs	"float:t(0,12)=r(0,1);4;0;",128,0,1,0
  27               		.stabs	"double:t(0,13)=r(0,1);4;0;",128,0,1,0
  28               		.stabs	"long double:t(0,14)=r(0,1);4;0;",128,0,1,0
  29               		.stabs	"void:t(0,15)=(0,15)",128,0,1,0
  30               		.stabs	"/usr/lib/gcc/avr/4.3.4/../../../avr/include/avr/io.h",130,0,0,0
  31               		.stabs	"/usr/lib/gcc/avr/4.3.4/../../../avr/include/avr/sfr_defs.h",130,0,0,0
  32               		.stabs	"/usr/lib/gcc/avr/4.3.4/../../../avr/include/inttypes.h",130,0,0,0
  33               		.stabs	"/usr/lib/gcc/avr/4.3.4/../../../avr/include/stdint.h",130,0,0,0
  34               		.stabs	"int8_t:t(4,1)=(0,10)",128,0,121,0
  35               		.stabs	"uint8_t:t(4,2)=(0,11)",128,0,122,0
  36               		.stabs	"int16_t:t(4,3)=(0,1)",128,0,123,0
  37               		.stabs	"uint16_t:t(4,4)=(0,4)",128,0,124,0
  38               		.stabs	"int32_t:t(4,5)=(0,3)",128,0,125,0
  39               		.stabs	"uint32_t:t(4,6)=(0,5)",128,0,126,0
  40               		.stabs	"int64_t:t(4,7)=(0,6)",128,0,128,0
  41               		.stabs	"uint64_t:t(4,8)=(0,7)",128,0,129,0
  42               		.stabs	"intptr_t:t(4,9)=(4,3)",128,0,142,0
  43               		.stabs	"uintptr_t:t(4,10)=(4,4)",128,0,147,0
  44               		.stabs	"int_least8_t:t(4,11)=(4,1)",128,0,159,0
  45               		.stabs	"uint_least8_t:t(4,12)=(4,2)",128,0,164,0
  46               		.stabs	"int_least16_t:t(4,13)=(4,3)",128,0,169,0
  47               		.stabs	"uint_least16_t:t(4,14)=(4,4)",128,0,174,0
  48               		.stabs	"int_least32_t:t(4,15)=(4,5)",128,0,179,0
  49               		.stabs	"uint_least32_t:t(4,16)=(4,6)",128,0,184,0
  50               		.stabs	"int_least64_t:t(4,17)=(4,7)",128,0,192,0
  51               		.stabs	"uint_least64_t:t(4,18)=(4,8)",128,0,199,0
  52               		.stabs	"int_fast8_t:t(4,19)=(4,1)",128,0,213,0
  53               		.stabs	"uint_fast8_t:t(4,20)=(4,2)",128,0,218,0
  54               		.stabs	"int_fast16_t:t(4,21)=(4,3)",128,0,223,0
  55               		.stabs	"uint_fast16_t:t(4,22)=(4,4)",128,0,228,0
  56               		.stabs	"int_fast32_t:t(4,23)=(4,5)",128,0,233,0
  57               		.stabs	"uint_fast32_t:t(4,24)=(4,6)",128,0,238,0
GAS LISTING /tmp/ccJqfgJ9.s 			page 2


  58               		.stabs	"int_fast64_t:t(4,25)=(4,7)",128,0,246,0
  59               		.stabs	"uint_fast64_t:t(4,26)=(4,8)",128,0,253,0
  60               		.stabs	"intmax_t:t(4,27)=(4,7)",128,0,273,0
  61               		.stabs	"uintmax_t:t(4,28)=(4,8)",128,0,278,0
  62               		.stabn	162,0,0,0
  63               		.stabs	"int_farptr_t:t(3,1)=(4,5)",128,0,77,0
  64               		.stabs	"uint_farptr_t:t(3,2)=(4,6)",128,0,81,0
  65               		.stabn	162,0,0,0
  66               		.stabn	162,0,0,0
  67               		.stabs	"/usr/lib/gcc/avr/4.3.4/../../../avr/include/avr/fuse.h",130,0,0,0
  68               		.stabs	"__fuse_t:t(5,1)=(5,2)=s3low:(0,11),0,8;high:(0,11),8,8;extended:(0,11),16,8;;",128,0,239,0
  69               		.stabn	162,0,0,0
  70               		.stabn	162,0,0,0
  71               		.stabs	"/usr/lib/gcc/avr/4.3.4/../../../avr/include/stdlib.h",130,0,0,0
  72               		.stabs	"/usr/lib/gcc/avr/4.3.4/include/stddef.h",130,0,0,0
  73               		.stabs	"size_t:t(7,1)=(0,4)",128,0,214,0
  74               		.stabs	"wchar_t:t(7,2)=(0,1)",128,0,326,0
  75               		.stabn	162,0,0,0
  76               		.stabs	"div_t:t(6,1)=(6,2)=s4quot:(0,1),0,16;rem:(0,1),16,16;;",128,0,71,0
  77               		.stabs	"ldiv_t:t(6,3)=(6,4)=s8quot:(0,3),0,32;rem:(0,3),32,32;;",128,0,77,0
  78               		.stabs	"__compar_fn_t:t(6,5)=(6,6)=*(6,7)=f(0,1)",128,0,80,0
  79               		.stabn	162,0,0,0
  80               		.stabs	"uartinit:F(0,15)",36,0,16,uartinit
  81               	.global	uartinit
  82               		.type	uartinit, @function
  83               	uartinit:
  84               		.stabd	46,0,0
   0:main.c        **** #include <avr/io.h>
   1:main.c        **** #include <stdlib.h>
   2:main.c        **** #include <avr/interrupt.h>
   3:main.c        **** 
   4:main.c        **** 
   5:main.c        **** #define F_CPU 18432000
   6:main.c        **** #include <util/delay.h>
   7:main.c        **** #define USART_BAUDRATE 230400
   8:main.c        **** #define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 16UL))) - 1) 
   9:main.c        **** 
  10:main.c        **** int p = 0;
  11:main.c        **** float i = 0.0;
  12:main.c        **** int ref = 60;
  13:main.c        **** 
  14:main.c        **** void uartinit(void)
  15:main.c        **** {
  85               		.stabn	68,0,16,.LM0-.LFBB1
  86               	.LM0:
  87               	.LFBB1:
  88               	/* prologue: function */
  89               	/* frame size = 0 */
  16:main.c        **** 	//"Tænder" for TXen og RXen (send og modtag portene)
  17:main.c        **** 	UCSR0B = (1<<RXEN0)|(1<<TXEN0); 
  90               		.stabn	68,0,18,.LM1-.LFBB1
  91               	.LM1:
  92 0000 E1EC      		ldi r30,lo8(193)
  93 0002 F0E0      		ldi r31,hi8(193)
  94 0004 88E1      		ldi r24,lo8(24)
  95 0006 8083      		st Z,r24
  18:main.c        **** 	
GAS LISTING /tmp/ccJqfgJ9.s 			page 3


  19:main.c        **** 	// Opsætning af format: 8data, 1 stop bit
  20:main.c        **** 	UCSR0C = (3<<UCSZ00);
  96               		.stabn	68,0,21,.LM2-.LFBB1
  97               	.LM2:
  98 0008 86E0      		ldi r24,lo8(6)
  99 000a 8093 C200 		sts 194,r24
  21:main.c        **** 
  22:main.c        **** 	// Opsætning af baud rate
  23:main.c        **** 	UBRR0L = BAUD_PRESCALE;
 100               		.stabn	68,0,24,.LM3-.LFBB1
 101               	.LM3:
 102 000e 84E0      		ldi r24,lo8(4)
 103 0010 8093 C400 		sts 196,r24
  24:main.c        **** 	UBRR0H = (BAUD_PRESCALE >> 8);
 104               		.stabn	68,0,25,.LM4-.LFBB1
 105               	.LM4:
 106 0014 1092 C500 		sts 197,__zero_reg__
  25:main.c        **** 	
  26:main.c        **** 	// Opsætning af Rx Uart interrupt (Receive Complete Interrupt) til indkommen seriel data
  27:main.c        **** 	UCSR0B|=(1<<RXCIE0);
 107               		.stabn	68,0,28,.LM5-.LFBB1
 108               	.LM5:
 109 0018 8081      		ld r24,Z
 110 001a 8068      		ori r24,lo8(-128)
 111 001c 8083      		st Z,r24
 112               	/* epilogue start */
  28:main.c        **** }
 113               		.stabn	68,0,29,.LM6-.LFBB1
 114               	.LM6:
 115 001e 0895      		ret
 116               		.size	uartinit, .-uartinit
 117               	.Lscope1:
 118               		.stabs	"",36,0,0,.Lscope1-.LFBB1
 119               		.stabd	78,0,0
 120               		.stabs	"PWM_duty_cycle_A_set:F(0,15)",36,0,32,PWM_duty_cycle_A_set
 121               	.global	PWM_duty_cycle_A_set
 122               		.type	PWM_duty_cycle_A_set, @function
 123               	PWM_duty_cycle_A_set:
 124               		.stabd	46,0,0
  29:main.c        **** 
  30:main.c        **** void PWM_duty_cycle_A_set(unsigned int x)
  31:main.c        **** {
 125               		.stabn	68,0,32,.LM7-.LFBB2
 126               	.LM7:
 127               	.LFBB2:
 128               	/* prologue: function */
 129               	/* frame size = 0 */
  32:main.c        **** 	OCR0A = x; 
 130               		.stabn	68,0,33,.LM8-.LFBB2
 131               	.LM8:
 132 0020 87BD      		out 71-32,r24
 133               	/* epilogue start */
  33:main.c        **** }
 134               		.stabn	68,0,34,.LM9-.LFBB2
 135               	.LM9:
 136 0022 0895      		ret
 137               		.size	PWM_duty_cycle_A_set, .-PWM_duty_cycle_A_set
GAS LISTING /tmp/ccJqfgJ9.s 			page 4


 138               	.Lscope2:
 139               		.stabs	"",36,0,0,.Lscope2-.LFBB2
 140               		.stabd	78,0,0
 141               		.stabs	"PWM_duty_cycle_B_set:F(0,15)",36,0,37,PWM_duty_cycle_B_set
 142               	.global	PWM_duty_cycle_B_set
 143               		.type	PWM_duty_cycle_B_set, @function
 144               	PWM_duty_cycle_B_set:
 145               		.stabd	46,0,0
  34:main.c        **** 
  35:main.c        **** void PWM_duty_cycle_B_set(unsigned int x)
  36:main.c        **** {
 146               		.stabn	68,0,37,.LM10-.LFBB3
 147               	.LM10:
 148               	.LFBB3:
 149               	/* prologue: function */
 150               	/* frame size = 0 */
  37:main.c        **** 	OCR0B = x; 
 151               		.stabn	68,0,38,.LM11-.LFBB3
 152               	.LM11:
 153 0024 88BD      		out 72-32,r24
 154               	/* epilogue start */
  38:main.c        **** }
 155               		.stabn	68,0,39,.LM12-.LFBB3
 156               	.LM12:
 157 0026 0895      		ret
 158               		.size	PWM_duty_cycle_B_set, .-PWM_duty_cycle_B_set
 159               	.Lscope3:
 160               		.stabs	"",36,0,0,.Lscope3-.LFBB3
 161               		.stabd	78,0,0
 162               		.stabs	"PWM_duty_cycle_A16_set:F(0,15)",36,0,42,PWM_duty_cycle_A16_set
 163               	.global	PWM_duty_cycle_A16_set
 164               		.type	PWM_duty_cycle_A16_set, @function
 165               	PWM_duty_cycle_A16_set:
 166               		.stabd	46,0,0
  39:main.c        **** 
  40:main.c        **** void PWM_duty_cycle_A16_set(unsigned int x)
  41:main.c        **** {
 167               		.stabn	68,0,42,.LM13-.LFBB4
 168               	.LM13:
 169               	.LFBB4:
 170               	/* prologue: function */
 171               	/* frame size = 0 */
  42:main.c        **** 	OCR1AH = (0xFF) & (x>>8);
 172               		.stabn	68,0,43,.LM14-.LFBB4
 173               	.LM14:
 174 0028 9093 8900 		sts 137,r25
  43:main.c        **** 	OCR1AL = (0xFF) & (x); 
 175               		.stabn	68,0,44,.LM15-.LFBB4
 176               	.LM15:
 177 002c 8093 8800 		sts 136,r24
 178               	/* epilogue start */
  44:main.c        **** }
 179               		.stabn	68,0,45,.LM16-.LFBB4
 180               	.LM16:
 181 0030 0895      		ret
 182               		.size	PWM_duty_cycle_A16_set, .-PWM_duty_cycle_A16_set
 183               	.Lscope4:
GAS LISTING /tmp/ccJqfgJ9.s 			page 5


 184               		.stabs	"",36,0,0,.Lscope4-.LFBB4
 185               		.stabd	78,0,0
 186               		.stabs	"pwm8Init:F(0,15)",36,0,48,pwm8Init
 187               	.global	pwm8Init
 188               		.type	pwm8Init, @function
 189               	pwm8Init:
 190               		.stabd	46,0,0
  45:main.c        **** 
  46:main.c        **** void pwm8Init(void)
  47:main.c        **** {
 191               		.stabn	68,0,48,.LM17-.LFBB5
 192               	.LM17:
 193               	.LFBB5:
 194               	/* prologue: function */
 195               	/* frame size = 0 */
  48:main.c        **** 	//PWM, 8 bit counter (counter0)
  49:main.c        **** 	// (OC0A) Output
  50:main.c        ****     DDRB|= (1<<PB3);  
 196               		.stabn	68,0,51,.LM18-.LFBB5
 197               	.LM18:
 198 0032 239A      		sbi 36-32,3
  51:main.c        **** 	// (OC0B) Output
  52:main.c        **** 	DDRB|= (1<<PB4);      
 199               		.stabn	68,0,53,.LM19-.LFBB5
 200               	.LM19:
 201 0034 249A      		sbi 36-32,4
  53:main.c        **** 
  54:main.c        **** 	// Opsætning af compare match.
  55:main.c        **** 	TCCR0A |=(1<<COM0A1);
 202               		.stabn	68,0,56,.LM20-.LFBB5
 203               	.LM20:
 204 0036 84B5      		in r24,68-32
 205 0038 8068      		ori r24,lo8(-128)
 206 003a 84BD      		out 68-32,r24
  56:main.c        **** 	TCCR0A &=~(1<<COM0A0);
 207               		.stabn	68,0,57,.LM21-.LFBB5
 208               	.LM21:
 209 003c 84B5      		in r24,68-32
 210 003e 8F7B      		andi r24,lo8(-65)
 211 0040 84BD      		out 68-32,r24
  57:main.c        **** 
  58:main.c        **** 	TCCR0A |=(1<<COM0B1);
 212               		.stabn	68,0,59,.LM22-.LFBB5
 213               	.LM22:
 214 0042 84B5      		in r24,68-32
 215 0044 8062      		ori r24,lo8(32)
 216 0046 84BD      		out 68-32,r24
  59:main.c        **** 	TCCR0A &=~(1<<COM0B0);
 217               		.stabn	68,0,60,.LM23-.LFBB5
 218               	.LM23:
 219 0048 84B5      		in r24,68-32
 220 004a 8F7E      		andi r24,lo8(-17)
 221 004c 84BD      		out 68-32,r24
  60:main.c        **** 
  61:main.c        **** 	// FAST-PWM
  62:main.c        **** 	TCCR0A |=(1<<WGM00);
 222               		.stabn	68,0,63,.LM24-.LFBB5
GAS LISTING /tmp/ccJqfgJ9.s 			page 6


 223               	.LM24:
 224 004e 84B5      		in r24,68-32
 225 0050 8160      		ori r24,lo8(1)
 226 0052 84BD      		out 68-32,r24
  63:main.c        **** 	TCCR0A |=(1<<WGM01);
 227               		.stabn	68,0,64,.LM25-.LFBB5
 228               	.LM25:
 229 0054 84B5      		in r24,68-32
 230 0056 8260      		ori r24,lo8(2)
 231 0058 84BD      		out 68-32,r24
  64:main.c        **** 
  65:main.c        **** 	// Prescaler, 1
  66:main.c        ****     TCCR0B |=(1<<CS00);
 232               		.stabn	68,0,67,.LM26-.LFBB5
 233               	.LM26:
 234 005a 85B5      		in r24,69-32
 235 005c 8160      		ori r24,lo8(1)
 236 005e 85BD      		out 69-32,r24
 237               	.LBB44:
 238               	.LBB45:
  33:main.c        **** 	OCR0A = x; 
 239               		.stabn	68,0,33,.LM27-.LFBB5
 240               	.LM27:
 241 0060 17BC      		out 71-32,__zero_reg__
 242               	.LBE45:
 243               	.LBE44:
 244               	.LBB46:
 245               	.LBB47:
  38:main.c        **** 	OCR0B = x; 
 246               		.stabn	68,0,38,.LM28-.LFBB5
 247               	.LM28:
 248 0062 18BC      		out 72-32,__zero_reg__
 249               	/* epilogue start */
 250               	.LBE47:
 251               	.LBE46:
  67:main.c        **** 
  68:main.c        **** 	PWM_duty_cycle_A_set(0);
  69:main.c        **** 	PWM_duty_cycle_B_set(0);
  70:main.c        **** }
 252               		.stabn	68,0,71,.LM29-.LFBB5
 253               	.LM29:
 254 0064 0895      		ret
 255               		.size	pwm8Init, .-pwm8Init
 256               	.Lscope5:
 257               		.stabs	"",36,0,0,.Lscope5-.LFBB5
 258               		.stabd	78,0,0
 259               		.stabs	"pwm16Init:F(0,15)",36,0,74,pwm16Init
 260               	.global	pwm16Init
 261               		.type	pwm16Init, @function
 262               	pwm16Init:
 263               		.stabd	46,0,0
  71:main.c        **** 
  72:main.c        **** void pwm16Init(void)
  73:main.c        **** {
 264               		.stabn	68,0,74,.LM30-.LFBB6
 265               	.LM30:
 266               	.LFBB6:
GAS LISTING /tmp/ccJqfgJ9.s 			page 7


 267               	/* prologue: function */
 268               	/* frame size = 0 */
  74:main.c        **** 	//PWM, 16 bit counter (counter1)
  75:main.c        **** 	// (OC1A) Output
  76:main.c        ****     DDRD|= (1<<PD4);  
 269               		.stabn	68,0,77,.LM31-.LFBB6
 270               	.LM31:
 271 0066 549A      		sbi 42-32,4
  77:main.c        ****     DDRD|= (1<<PD5);  
 272               		.stabn	68,0,78,.LM32-.LFBB6
 273               	.LM32:
 274 0068 559A      		sbi 42-32,5
  78:main.c        ****      
  79:main.c        **** 	// Opsætning af compare match.
  80:main.c        **** 	TCCR1A |=(1<<COM1A1);
 275               		.stabn	68,0,81,.LM33-.LFBB6
 276               	.LM33:
 277 006a E0E8      		ldi r30,lo8(128)
 278 006c F0E0      		ldi r31,hi8(128)
 279 006e 8081      		ld r24,Z
 280 0070 8068      		ori r24,lo8(-128)
 281 0072 8083      		st Z,r24
  81:main.c        **** 	TCCR1A |=(1<<COM1A0);
 282               		.stabn	68,0,82,.LM34-.LFBB6
 283               	.LM34:
 284 0074 8081      		ld r24,Z
 285 0076 8064      		ori r24,lo8(64)
 286 0078 8083      		st Z,r24
  82:main.c        **** 
  83:main.c        **** 	// FAST-PWM TOP = ICRn
  84:main.c        **** 	TCCR1A &=~(1<<WGM10);
 287               		.stabn	68,0,85,.LM35-.LFBB6
 288               	.LM35:
 289 007a 8081      		ld r24,Z
 290 007c 8E7F      		andi r24,lo8(-2)
 291 007e 8083      		st Z,r24
  85:main.c        **** 	TCCR1A |=(1<<WGM11);
 292               		.stabn	68,0,86,.LM36-.LFBB6
 293               	.LM36:
 294 0080 8081      		ld r24,Z
 295 0082 8260      		ori r24,lo8(2)
 296 0084 8083      		st Z,r24
  86:main.c        **** 	TCCR1B |=(1<<WGM12);
 297               		.stabn	68,0,87,.LM37-.LFBB6
 298               	.LM37:
 299 0086 E1E8      		ldi r30,lo8(129)
 300 0088 F0E0      		ldi r31,hi8(129)
 301 008a 8081      		ld r24,Z
 302 008c 8860      		ori r24,lo8(8)
 303 008e 8083      		st Z,r24
  87:main.c        **** 	TCCR1B |=(1<<WGM13);
 304               		.stabn	68,0,88,.LM38-.LFBB6
 305               	.LM38:
 306 0090 8081      		ld r24,Z
 307 0092 8061      		ori r24,lo8(16)
 308 0094 8083      		st Z,r24
  88:main.c        **** 
GAS LISTING /tmp/ccJqfgJ9.s 			page 8


  89:main.c        **** 	//Top (10-bit)
  90:main.c        **** 	ICR1H = 0x00;
 309               		.stabn	68,0,91,.LM39-.LFBB6
 310               	.LM39:
 311 0096 1092 8700 		sts 135,__zero_reg__
  91:main.c        **** 	ICR1L = 0xFF;
 312               		.stabn	68,0,92,.LM40-.LFBB6
 313               	.LM40:
 314 009a 8FEF      		ldi r24,lo8(-1)
 315 009c 8093 8600 		sts 134,r24
  92:main.c        **** 
  93:main.c        **** 	// Prescaler, 64
  94:main.c        ****     TCCR1B &=~(1<<CS10);
 316               		.stabn	68,0,95,.LM41-.LFBB6
 317               	.LM41:
 318 00a0 8081      		ld r24,Z
 319 00a2 8E7F      		andi r24,lo8(-2)
 320 00a4 8083      		st Z,r24
  95:main.c        **** 	TCCR1B |=(1<<CS11); 
 321               		.stabn	68,0,96,.LM42-.LFBB6
 322               	.LM42:
 323 00a6 8081      		ld r24,Z
 324 00a8 8260      		ori r24,lo8(2)
 325 00aa 8083      		st Z,r24
  96:main.c        **** 	TCCR1B &=~(1<<CS12); 
 326               		.stabn	68,0,97,.LM43-.LFBB6
 327               	.LM43:
 328 00ac 8081      		ld r24,Z
 329 00ae 8B7F      		andi r24,lo8(-5)
 330 00b0 8083      		st Z,r24
 331               	.LBB48:
 332               	.LBB49:
  43:main.c        **** 	OCR1AH = (0xFF) & (x>>8);
 333               		.stabn	68,0,43,.LM44-.LFBB6
 334               	.LM44:
 335 00b2 1092 8900 		sts 137,__zero_reg__
  44:main.c        **** 	OCR1AL = (0xFF) & (x); 
 336               		.stabn	68,0,44,.LM45-.LFBB6
 337               	.LM45:
 338 00b6 1092 8800 		sts 136,__zero_reg__
 339               	/* epilogue start */
 340               	.LBE49:
 341               	.LBE48:
  97:main.c        **** 
  98:main.c        **** 	// Compare match værdi
  99:main.c        **** 	PWM_duty_cycle_A16_set(0);
 100:main.c        **** }
 342               		.stabn	68,0,101,.LM46-.LFBB6
 343               	.LM46:
 344 00ba 0895      		ret
 345               		.size	pwm16Init, .-pwm16Init
 346               	.Lscope6:
 347               		.stabs	"",36,0,0,.Lscope6-.LFBB6
 348               		.stabd	78,0,0
 349               		.stabs	"sendtekst:F(0,15)",36,0,104,sendtekst
 350               		.stabs	"tekstarray:P(0,16)=*(0,2)",64,0,103,30
 351               	.global	sendtekst
GAS LISTING /tmp/ccJqfgJ9.s 			page 9


 352               		.type	sendtekst, @function
 353               	sendtekst:
 354               		.stabd	46,0,0
 101:main.c        **** 
 102:main.c        **** void sendtekst(char *tekstarray)
 103:main.c        **** {
 355               		.stabn	68,0,104,.LM47-.LFBB7
 356               	.LM47:
 357               	.LFBB7:
 358               	/* prologue: function */
 359               	/* frame size = 0 */
 360 00bc FC01      		movw r30,r24
 104:main.c        **** 	// Tæller
 105:main.c        **** 	short int i;
 106:main.c        **** 
 107:main.c        **** 	// Sender en byte af gangen
 108:main.c        **** 	for (i = 0; tekstarray[i] != '\0'; i++)
 361               		.stabn	68,0,109,.LM48-.LFBB7
 362               	.LM48:
 363 00be 9081      		ld r25,Z
 364 00c0 9923      		tst r25
 365 00c2 01F0      		breq .L16
 366               	.L19:
 109:main.c        **** 	{	
 110:main.c        **** 		while ((UCSR0A & (1 << UDRE0)) == 0) {};	// Venter indtil UDR0 er klar til ny data
 367               		.stabn	68,0,111,.LM49-.LFBB7
 368               	.LM49:
 369 00c4 8091 C000 		lds r24,192
 370 00c8 85FF      		sbrs r24,5
 371 00ca 00C0      		rjmp .L19
 111:main.c        **** 		UDR0 = tekstarray[i]; 						// Data lægges i buffer (UDR0) og sendes via TXen
 372               		.stabn	68,0,112,.LM50-.LFBB7
 373               	.LM50:
 374 00cc 9093 C600 		sts 198,r25
 109:main.c        **** 	{	
 375               		.stabn	68,0,109,.LM51-.LFBB7
 376               	.LM51:
 377 00d0 9181      		ldd r25,Z+1
 378 00d2 3196      		adiw r30,1
 379 00d4 9923      		tst r25
 380 00d6 01F4      		brne .L19
 381               	.L16:
 382 00d8 0895      		ret
 383               		.size	sendtekst, .-sendtekst
 384               	.Lscope7:
 385               		.stabs	"",36,0,0,.Lscope7-.LFBB7
 386               		.stabd	78,0,0
 387               		.stabs	"convertanalog:F(0,4)",36,0,117,convertanalog
 388               	.global	convertanalog
 389               		.type	convertanalog, @function
 390               	convertanalog:
 391               		.stabd	46,0,0
 112:main.c        **** 	}
 113:main.c        **** }
 114:main.c        **** 
 115:main.c        **** unsigned int convertanalog(unsigned channel)
 116:main.c        **** {
GAS LISTING /tmp/ccJqfgJ9.s 			page 10


 392               		.stabn	68,0,117,.LM52-.LFBB8
 393               	.LM52:
 394               	.LFBB8:
 395               	/* prologue: function */
 396               	/* frame size = 0 */
 117:main.c        **** 	unsigned int adlow = 0;
 118:main.c        **** 	unsigned int adhigh = 0; 
 119:main.c        **** 	
 120:main.c        ****     ADMUX=(1<<REFS0)|(channel & 0x0f);
 397               		.stabn	68,0,121,.LM53-.LFBB8
 398               	.LM53:
 399 00da 8F70      		andi r24,lo8(15)
 400 00dc 8064      		ori r24,lo8(64)
 401 00de 8093 7C00 		sts 124,r24
 121:main.c        ****     ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 402               		.stabn	68,0,122,.LM54-.LFBB8
 403               	.LM54:
 404 00e2 87E8      		ldi r24,lo8(-121)
 405 00e4 8093 7A00 		sts 122,r24
 122:main.c        ****     ADCSRA|= (1<<ADSC);
 406               		.stabn	68,0,123,.LM55-.LFBB8
 407               	.LM55:
 408 00e8 8091 7A00 		lds r24,122
 409 00ec 8064      		ori r24,lo8(64)
 410 00ee 8093 7A00 		sts 122,r24
 411               	.L22:
 123:main.c        ****     while(bit_is_set(ADCSRA,ADSC)); 
 412               		.stabn	68,0,124,.LM56-.LFBB8
 413               	.LM56:
 414 00f2 8091 7A00 		lds r24,122
 415 00f6 86FD      		sbrc r24,6
 416 00f8 00C0      		rjmp .L22
 124:main.c        ****     adlow=ADCL; 
 417               		.stabn	68,0,125,.LM57-.LFBB8
 418               	.LM57:
 419 00fa 2091 7800 		lds r18,120
 125:main.c        ****     adhigh=ADCH;
 420               		.stabn	68,0,126,.LM58-.LFBB8
 421               	.LM58:
 422 00fe 4091 7900 		lds r20,121
 423 0102 30E0      		ldi r19,lo8(0)
 424 0104 942F      		mov r25,r20
 425 0106 80E0      		ldi r24,lo8(0)
 426 0108 282B      		or r18,r24
 427 010a 392B      		or r19,r25
 126:main.c        ****     return((unsigned int)((adhigh<<8)|(adlow & 0xFF)));
 127:main.c        **** }
 428               		.stabn	68,0,128,.LM59-.LFBB8
 429               	.LM59:
 430 010c C901      		movw r24,r18
 431               	/* epilogue start */
 432 010e 0895      		ret
 433               		.size	convertanalog, .-convertanalog
 434               	.Lscope8:
 435               		.stabs	"",36,0,0,.Lscope8-.LFBB8
 436               		.stabd	78,0,0
 437               		.data
GAS LISTING /tmp/ccJqfgJ9.s 			page 11


 438               	.LC0:
 439 0000 3B00      		.string	";"
 440               	.LC1:
 441 0002 0A0D 00   		.string	"\n\r"
 442               		.text
 443               		.stabs	"main:F(0,1)",36,0,133,main
 444               	.global	main
 445               		.type	main, @function
 446               	main:
 447               		.stabd	46,0,0
 128:main.c        **** 
 129:main.c        **** 
 130:main.c        **** 
 131:main.c        **** int main(void)
 132:main.c        **** {
 448               		.stabn	68,0,133,.LM60-.LFBB9
 449               	.LM60:
 450               	.LFBB9:
 451 0110 2F92      		push r2
 452 0112 3F92      		push r3
 453 0114 4F92      		push r4
 454 0116 5F92      		push r5
 455 0118 6F92      		push r6
 456 011a 7F92      		push r7
 457 011c 8F92      		push r8
 458 011e 9F92      		push r9
 459 0120 AF92      		push r10
 460 0122 BF92      		push r11
 461 0124 CF92      		push r12
 462 0126 DF92      		push r13
 463 0128 EF92      		push r14
 464 012a FF92      		push r15
 465 012c 0F93      		push r16
 466 012e 1F93      		push r17
 467 0130 DF93      		push r29
 468 0132 CF93      		push r28
 469 0134 00D0      		rcall .
 470 0136 00D0      		rcall .
 471 0138 0F92      		push __tmp_reg__
 472 013a CDB7      		in r28,__SP_L__
 473 013c DEB7      		in r29,__SP_H__
 474               	/* prologue: function */
 475               	/* frame size = 5 */
 476               	.LBB50:
 477               	.LBB51:
  18:main.c        **** 	UCSR0B = (1<<RXEN0)|(1<<TXEN0); 
 478               		.stabn	68,0,18,.LM61-.LFBB9
 479               	.LM61:
 480 013e 88E1      		ldi r24,lo8(24)
 481 0140 8093 C100 		sts 193,r24
  21:main.c        **** 	UCSR0C = (3<<UCSZ00);
 482               		.stabn	68,0,21,.LM62-.LFBB9
 483               	.LM62:
 484 0144 86E0      		ldi r24,lo8(6)
 485 0146 8093 C200 		sts 194,r24
  24:main.c        **** 	UBRR0L = BAUD_PRESCALE;
 486               		.stabn	68,0,24,.LM63-.LFBB9
GAS LISTING /tmp/ccJqfgJ9.s 			page 12


 487               	.LM63:
 488 014a 84E0      		ldi r24,lo8(4)
 489 014c 8093 C400 		sts 196,r24
  25:main.c        **** 	UBRR0H = (BAUD_PRESCALE >> 8);
 490               		.stabn	68,0,25,.LM64-.LFBB9
 491               	.LM64:
 492 0150 1092 C500 		sts 197,__zero_reg__
  28:main.c        **** 	UCSR0B|=(1<<RXCIE0);
 493               		.stabn	68,0,28,.LM65-.LFBB9
 494               	.LM65:
 495 0154 8091 C100 		lds r24,193
 496 0158 8068      		ori r24,lo8(-128)
 497 015a 8093 C100 		sts 193,r24
 498               	.LBE51:
 499               	.LBE50:
 133:main.c        ****     uartinit();
 134:main.c        ****     pwm8Init();
 500               		.stabn	68,0,135,.LM66-.LFBB9
 501               	.LM66:
 502 015e 0E94 0000 		call pwm8Init
 135:main.c        ****     pwm16Init();
 503               		.stabn	68,0,136,.LM67-.LFBB9
 504               	.LM67:
 505 0162 0E94 0000 		call pwm16Init
 136:main.c        ****     sei();
 506               		.stabn	68,0,137,.LM68-.LFBB9
 507               	.LM68:
 508               	/* #APP */
 509               	 ;  137 "main.c" 1
 510 0166 7894      		sei
 511               	 ;  0 "" 2
 512               	/* #NOAPP */
 513 0168 0F2E      		mov __tmp_reg__,r31
 514 016a F0E0      		ldi r31,lo8(0x0)
 515 016c AF2E      		mov r10,r31
 516 016e F0E0      		ldi r31,hi8(0x0)
 517 0170 BF2E      		mov r11,r31
 518 0172 F0E0      		ldi r31,hlo8(0x0)
 519 0174 CF2E      		mov r12,r31
 520 0176 F0E0      		ldi r31,hhi8(0x0)
 521 0178 DF2E      		mov r13,r31
 522 017a F02D      		mov r31,__tmp_reg__
 523 017c 1E01      		movw r2,r28
 524 017e 0894      		sec
 525 0180 211C      		adc r2,__zero_reg__
 526 0182 311C      		adc r3,__zero_reg__
 527               	.L50:
 528               	.LBB52:
 529               	.LBB53:
 530               	.LBB54:
 531               	.LBB55:
 532               		.stabs	"/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h",132,0,0,.Ltext1
 533               	.Ltext1:
   0:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   1:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****    Copyright (c) 2007 Joerg Wunsch
   2:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****    All rights reserved.
   3:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
GAS LISTING /tmp/ccJqfgJ9.s 			page 13


   4:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****    Redistribution and use in source and binary forms, with or without
   5:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****    modification, are permitted provided that the following conditions are met:
   6:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
   7:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****    * Redistributions of source code must retain the above copyright
   8:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer.
   9:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
  10:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****    * Redistributions in binary form must reproduce the above copyright
  11:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer in
  12:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****      the documentation and/or other materials provided with the
  13:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****      distribution.
  14:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
  15:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****    * Neither the name of the copyright holders nor the names of
  16:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****      contributors may be used to endorse or promote products derived
  17:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****      from this software without specific prior written permission.
  18:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
  19:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  20:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  21:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  22:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  23:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  24:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  25:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  26:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  27:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  28:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  29:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****   POSSIBILITY OF SUCH DAMAGE. */
  30:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
  31:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** /* $Id: delay_basic.h,v 1.1 2007/05/13 21:23:20 joerg_wunsch Exp $ */
  32:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
  33:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** #ifndef _UTIL_DELAY_BASIC_H_
  34:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** #define _UTIL_DELAY_BASIC_H_ 1
  35:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
  36:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** #include <inttypes.h>
  37:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
  38:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** /** \file */
  39:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** /** \defgroup util_delay_basic <util/delay_basic.h>: Basic busy-wait delay loops
  40:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     \code
  41:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     #include <util/delay_basic.h>
  42:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     \endcode
  43:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
  44:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     The functions in this header file implement simple delay loops
  45:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     that perform a busy-waiting.  They are typically used to
  46:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     facilitate short delays in the program execution.  They are
  47:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     implemented as count-down loops with a well-known CPU cycle
  48:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     count per loop iteration.  As such, no other processing can
  49:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     occur simultaneously.  It should be kept in mind that the
  50:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     functions described here do not disable interrupts.
  51:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
  52:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     In general, for long delays, the use of hardware timers is
  53:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     much preferrable, as they free the CPU, and allow for
  54:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     concurrent processing of other events while the timer is
  55:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     running.  However, in particular for very short delays, the
  56:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     overhead of setting up a hardware timer is too much compared
  57:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     to the overall delay time.
  58:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
  59:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     Two inline functions are provided for the actual delay algorithms.
  60:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
GAS LISTING /tmp/ccJqfgJ9.s 			page 14


  61:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** */
  62:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
  63:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** #if !defined(__DOXYGEN__)
  64:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** static inline void _delay_loop_1(uint8_t __count) __attribute__((always_inline));
  65:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));
  66:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** #endif
  67:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
  68:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  69:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
  70:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  71:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 256 would have to be passed
  72:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  73:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     including the overhead the compiler needs to setup the counter
  74:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     register.
  75:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
  76:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  77:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     can be achieved.
  78:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** */
  79:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** void
  80:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** _delay_loop_1(uint8_t __count)
  81:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** {
  82:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
  83:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 		"1: dec %0" "\n\t"
  84:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 		"brne 1b"
  85:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 		: "=r" (__count)
  86:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 		: "0" (__count)
  87:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 	);
  88:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** }
  89:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
  90:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  91:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
  92:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
  93:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 65536 would have to be
  94:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
  95:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     not including the overhead the compiler requires to setup the
  96:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     counter register pair.
  97:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 
  98:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
  99:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****     milliseconds can be achieved.
 100:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h ****  */
 101:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** void
 102:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** _delay_loop_2(uint16_t __count)
 103:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** {
 104:/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
 534               		.stabn	68,0,105,.LM69-.LFBB9
 535               	.LM69:
 536 0184 80E0      		ldi r24,lo8(-19456)
 537 0186 94EB      		ldi r25,hi8(-19456)
 538               	/* #APP */
 539               	 ;  105 "/usr/lib/gcc/avr/4.3.4/../../../avr/include/util/delay_basic.h" 1
 540 0188 0197      		1: sbiw r24,1
 541 018a 01F4      		brne 1b
 542               	 ;  0 "" 2
 543               	/* #NOAPP */
 544               	.LBE55:
 545               	.LBE54:
 546               	.LBE53:
GAS LISTING /tmp/ccJqfgJ9.s 			page 15


 547               	.LBE52:
 548               	.LBB56:
 549               	.LBB57:
 550               		.stabs	"main.c",132,0,0,.Ltext2
 551               	.Ltext2:
 121:main.c        ****     ADMUX=(1<<REFS0)|(channel & 0x0f);
 552               		.stabn	68,0,121,.LM70-.LFBB9
 553               	.LM70:
 554 018c 80E4      		ldi r24,lo8(64)
 555 018e 8093 7C00 		sts 124,r24
 122:main.c        ****     ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 556               		.stabn	68,0,122,.LM71-.LFBB9
 557               	.LM71:
 558 0192 E7E8      		ldi r30,lo8(-121)
 559 0194 E093 7A00 		sts 122,r30
 123:main.c        ****     ADCSRA|= (1<<ADSC);
 560               		.stabn	68,0,123,.LM72-.LFBB9
 561               	.LM72:
 562 0198 8091 7A00 		lds r24,122
 563 019c 8064      		ori r24,lo8(64)
 564 019e 8093 7A00 		sts 122,r24
 565               	.L26:
 124:main.c        ****     while(bit_is_set(ADCSRA,ADSC)); 
 566               		.stabn	68,0,124,.LM73-.LFBB9
 567               	.LM73:
 568 01a2 8091 7A00 		lds r24,122
 569 01a6 86FD      		sbrc r24,6
 570 01a8 00C0      		rjmp .L26
 125:main.c        ****     adlow=ADCL; 
 571               		.stabn	68,0,125,.LM74-.LFBB9
 572               	.LM74:
 573 01aa 6091 7800 		lds r22,120
 126:main.c        ****     adhigh=ADCH;
 574               		.stabn	68,0,126,.LM75-.LFBB9
 575               	.LM75:
 576 01ae 2091 7900 		lds r18,121
 577               	.LBE57:
 578               	.LBE56:
 137:main.c        ****     char tempchar[5];
 138:main.c        ****     int press = 0;
 139:main.c        **** 
 140:main.c        ****     int out = 0;
 141:main.c        ****     int outP = 0;
 142:main.c        ****     float outI = 0;    
 143:main.c        **** 
 144:main.c        ****     float pressOld = 0; 
 145:main.c        **** 
 146:main.c        ****     while (1){
 147:main.c        **** 
 148:main.c        ****     _delay_ms(10);
 149:main.c        **** 
 150:main.c        ****     press = 0.17*convertanalog(0)-18.0;
 579               		.stabn	68,0,151,.LM76-.LFBB9
 580               	.LM76:
 581 01b2 70E0      		ldi r23,lo8(0)
 582 01b4 522E      		mov r5,r18
 583 01b6 4424      		clr r4
GAS LISTING /tmp/ccJqfgJ9.s 			page 16


 584 01b8 6429      		or r22,r4
 585 01ba 7529      		or r23,r5
 586 01bc 80E0      		ldi r24,lo8(0)
 587 01be 90E0      		ldi r25,hi8(0)
 588 01c0 0E94 0000 		call __floatunsisf
 589 01c4 2BE7      		ldi r18,lo8(0x3e2e147b)
 590 01c6 34E1      		ldi r19,hi8(0x3e2e147b)
 591 01c8 4EE2      		ldi r20,hlo8(0x3e2e147b)
 592 01ca 5EE3      		ldi r21,hhi8(0x3e2e147b)
 593 01cc 0E94 0000 		call __mulsf3
 594 01d0 20E0      		ldi r18,lo8(0x41900000)
 595 01d2 30E0      		ldi r19,hi8(0x41900000)
 596 01d4 40E9      		ldi r20,hlo8(0x41900000)
 597 01d6 51E4      		ldi r21,hhi8(0x41900000)
 598 01d8 0E94 0000 		call __subsf3
 599 01dc 0E94 0000 		call __fixsfsi
 600 01e0 4B01      		movw r8,r22
 601 01e2 77FD      		sbrc r23,7
 602 01e4 00C0      		rjmp .L86
 603               	.L27:
 151:main.c        **** 
 152:main.c        ****     if(press<=0)
 153:main.c        ****         press = 0;
 154:main.c        **** 
 155:main.c        ****     outP = (ref-press)*p;
 604               		.stabn	68,0,156,.LM77-.LFBB9
 605               	.LM77:
 606 01e6 6090 0000 		lds r6,ref
 607 01ea 7090 0000 		lds r7,(ref)+1
 608 01ee 8301      		movw r16,r6
 609 01f0 0819      		sub r16,r8
 610 01f2 1909      		sbc r17,r9
 156:main.c        **** 
 157:main.c        ****     outI = (((ref-press)*0.01+pressOld)*i);
 611               		.stabn	68,0,158,.LM78-.LFBB9
 612               	.LM78:
 613 01f4 B801      		movw r22,r16
 614 01f6 8827      		clr r24
 615 01f8 77FD      		sbrc r23,7
 616 01fa 8095      		com r24
 617 01fc 982F      		mov r25,r24
 618 01fe 0E94 0000 		call __floatsisf
 619 0202 2AE0      		ldi r18,lo8(0x3c23d70a)
 620 0204 37ED      		ldi r19,hi8(0x3c23d70a)
 621 0206 43E2      		ldi r20,hlo8(0x3c23d70a)
 622 0208 5CE3      		ldi r21,hhi8(0x3c23d70a)
 623 020a 0E94 0000 		call __mulsf3
 624 020e 9B01      		movw r18,r22
 625 0210 AC01      		movw r20,r24
 626 0212 C601      		movw r24,r12
 627 0214 B501      		movw r22,r10
 628 0216 0E94 0000 		call __addsf3
 629 021a 5B01      		movw r10,r22
 630 021c 6C01      		movw r12,r24
 158:main.c        **** 
 159:main.c        ****     pressOld = pressOld + (ref-press)*(0.01);
 160:main.c        **** 
GAS LISTING /tmp/ccJqfgJ9.s 			page 17


 161:main.c        ****     out = (int)(outP + outI);
 631               		.stabn	68,0,162,.LM79-.LFBB9
 632               	.LM79:
 633 021e 8091 0000 		lds r24,p
 634 0222 9091 0000 		lds r25,(p)+1
 635 0226 089F      		mul r16,r24
 636 0228 B001      		movw r22,r0
 637 022a 099F      		mul r16,r25
 638 022c 700D      		add r23,r0
 639 022e 189F      		mul r17,r24
 640 0230 700D      		add r23,r0
 641 0232 1124      		clr r1
 642 0234 8827      		clr r24
 643 0236 77FD      		sbrc r23,7
 644 0238 8095      		com r24
 645 023a 982F      		mov r25,r24
 646 023c 0E94 0000 		call __floatsisf
 647 0240 7B01      		movw r14,r22
 648 0242 8C01      		movw r16,r24
 649 0244 C601      		movw r24,r12
 650 0246 B501      		movw r22,r10
 651 0248 2091 0000 		lds r18,i
 652 024c 3091 0000 		lds r19,(i)+1
 653 0250 4091 0000 		lds r20,(i)+2
 654 0254 5091 0000 		lds r21,(i)+3
 655 0258 0E94 0000 		call __mulsf3
 656 025c 9B01      		movw r18,r22
 657 025e AC01      		movw r20,r24
 658 0260 C801      		movw r24,r16
 659 0262 B701      		movw r22,r14
 660 0264 0E94 0000 		call __addsf3
 661 0268 0E94 0000 		call __fixsfsi
 662 026c 7B01      		movw r14,r22
 162:main.c        **** 
 163:main.c        ****     if(pressOld>5000)
 663               		.stabn	68,0,164,.LM80-.LFBB9
 664               	.LM80:
 665 026e C601      		movw r24,r12
 666 0270 B501      		movw r22,r10
 667 0272 20E0      		ldi r18,lo8(0x459c4000)
 668 0274 30E4      		ldi r19,hi8(0x459c4000)
 669 0276 4CE9      		ldi r20,hlo8(0x459c4000)
 670 0278 55E4      		ldi r21,hhi8(0x459c4000)
 671 027a 0E94 0000 		call __gtsf2
 672 027e 1816      		cp __zero_reg__,r24
 673 0280 04F0      		brlt .+2
 674 0282 00C0      		rjmp .L85
 675 0284 0F2E      		mov __tmp_reg__,r31
 676 0286 F0E0      		ldi r31,lo8(0x459c4000)
 677 0288 AF2E      		mov r10,r31
 678 028a F0E4      		ldi r31,hi8(0x459c4000)
 679 028c BF2E      		mov r11,r31
 680 028e FCE9      		ldi r31,hlo8(0x459c4000)
 681 0290 CF2E      		mov r12,r31
 682 0292 F5E4      		ldi r31,hhi8(0x459c4000)
 683 0294 DF2E      		mov r13,r31
 684 0296 F02D      		mov r31,__tmp_reg__
GAS LISTING /tmp/ccJqfgJ9.s 			page 18


 685               	.L30:
 164:main.c        ****        pressOld = 5000;
 165:main.c        **** 
 166:main.c        ****     if(pressOld<-5000)
 167:main.c        ****         pressOld = -5000;
 168:main.c        **** 
 169:main.c        ****     if(out>1023)
 686               		.stabn	68,0,170,.LM81-.LFBB9
 687               	.LM81:
 688 0298 F0E0      		ldi r31,lo8(1024)
 689 029a EF16      		cp r14,r31
 690 029c F4E0      		ldi r31,hi8(1024)
 691 029e FF06      		cpc r15,r31
 692 02a0 04F4      		brge .+2
 693 02a2 00C0      		rjmp .L32
 694 02a4 8FEF      		ldi r24,lo8(1023)
 695 02a6 E82E      		mov r14,r24
 696 02a8 83E0      		ldi r24,hi8(1023)
 697 02aa F82E      		mov r15,r24
 698               	.L33:
 170:main.c        ****         out = 1023;
 171:main.c        **** 
 172:main.c        ****     if(out<=0)
 699               		.stabn	68,0,173,.LM82-.LFBB9
 700               	.LM82:
 701 02ac C701      		movw r24,r14
 702               	.L34:
 703               	.LBB58:
 704               	.LBB59:
  43:main.c        **** 	OCR1AH = (0xFF) & (x>>8);
 705               		.stabn	68,0,43,.LM83-.LFBB9
 706               	.LM83:
 707 02ae 9093 8900 		sts 137,r25
  44:main.c        **** 	OCR1AL = (0xFF) & (x); 
 708               		.stabn	68,0,44,.LM84-.LFBB9
 709               	.LM84:
 710 02b2 8093 8800 		sts 136,r24
 711               	.LBE59:
 712               	.LBE58:
 173:main.c        ****         out = 0;
 174:main.c        **** 
 175:main.c        ****     PWM_duty_cycle_A16_set(out);
 176:main.c        **** 
 177:main.c        **** 	itoa(ref, tempchar,10); 
 713               		.stabn	68,0,178,.LM85-.LFBB9
 714               	.LM85:
 715 02b6 C301      		movw r24,r6
 716 02b8 B101      		movw r22,r2
 717 02ba 4AE0      		ldi r20,lo8(10)
 718 02bc 50E0      		ldi r21,hi8(10)
 719 02be 0E94 0000 		call itoa
 720               	.LBB60:
 721               	.LBB61:
 109:main.c        **** 	for (i = 0; tekstarray[i] != '\0'; i++)
 722               		.stabn	68,0,109,.LM86-.LFBB9
 723               	.LM86:
 724 02c2 9981      		ldd r25,Y+1
GAS LISTING /tmp/ccJqfgJ9.s 			page 19


 725 02c4 9923      		tst r25
 726 02c6 01F0      		breq .L35
 727 02c8 FE01      		movw r30,r28
 728 02ca 3296      		adiw r30,2
 729               	.L75:
 111:main.c        **** 		while ((UCSR0A & (1 << UDRE0)) == 0) {};	// Venter indtil UDR0 er klar til ny data
 730               		.stabn	68,0,111,.LM87-.LFBB9
 731               	.LM87:
 732 02cc 8091 C000 		lds r24,192
 733 02d0 85FF      		sbrs r24,5
 734 02d2 00C0      		rjmp .L75
 112:main.c        **** 		UDR0 = tekstarray[i]; 						// Data lægges i buffer (UDR0) og sendes via TXen
 735               		.stabn	68,0,112,.LM88-.LFBB9
 736               	.LM88:
 737 02d4 9093 C600 		sts 198,r25
 109:main.c        **** 	for (i = 0; tekstarray[i] != '\0'; i++)
 738               		.stabn	68,0,109,.LM89-.LFBB9
 739               	.LM89:
 740 02d8 9191      		ld r25,Z+
 741 02da 9923      		tst r25
 742 02dc 01F4      		brne .L75
 743               	.L35:
 744 02de 00E0      		ldi r16,lo8(.LC0+1)
 745 02e0 10E0      		ldi r17,hi8(.LC0+1)
 746 02e2 F801      		movw r30,r16
 747 02e4 9BE3      		ldi r25,lo8(59)
 748               	.L76:
 749               	.LBE61:
 750               	.LBE60:
 751               	.LBB62:
 752               	.LBB63:
 111:main.c        **** 		while ((UCSR0A & (1 << UDRE0)) == 0) {};	// Venter indtil UDR0 er klar til ny data
 753               		.stabn	68,0,111,.LM90-.LFBB9
 754               	.LM90:
 755 02e6 8091 C000 		lds r24,192
 756 02ea 85FF      		sbrs r24,5
 757 02ec 00C0      		rjmp .L76
 112:main.c        **** 		UDR0 = tekstarray[i]; 						// Data lægges i buffer (UDR0) og sendes via TXen
 758               		.stabn	68,0,112,.LM91-.LFBB9
 759               	.LM91:
 760 02ee 9093 C600 		sts 198,r25
 109:main.c        **** 	for (i = 0; tekstarray[i] != '\0'; i++)
 761               		.stabn	68,0,109,.LM92-.LFBB9
 762               	.LM92:
 763 02f2 9191      		ld r25,Z+
 764 02f4 9923      		tst r25
 765 02f6 01F4      		brne .L76
 766               	.LBE63:
 767               	.LBE62:
 178:main.c        **** 	sendtekst(tempchar);
 179:main.c        ****     sendtekst(";");
 180:main.c        **** 	itoa(press, tempchar,10); 
 768               		.stabn	68,0,181,.LM93-.LFBB9
 769               	.LM93:
 770 02f8 C401      		movw r24,r8
 771 02fa B101      		movw r22,r2
 772 02fc 4AE0      		ldi r20,lo8(10)
GAS LISTING /tmp/ccJqfgJ9.s 			page 20


 773 02fe 50E0      		ldi r21,hi8(10)
 774 0300 0E94 0000 		call itoa
 775               	.LBB64:
 776               	.LBB65:
 109:main.c        **** 	for (i = 0; tekstarray[i] != '\0'; i++)
 777               		.stabn	68,0,109,.LM94-.LFBB9
 778               	.LM94:
 779 0304 9981      		ldd r25,Y+1
 780 0306 9923      		tst r25
 781 0308 01F0      		breq .L38
 782 030a FE01      		movw r30,r28
 783 030c 3296      		adiw r30,2
 784               	.L77:
 111:main.c        **** 		while ((UCSR0A & (1 << UDRE0)) == 0) {};	// Venter indtil UDR0 er klar til ny data
 785               		.stabn	68,0,111,.LM95-.LFBB9
 786               	.LM95:
 787 030e 8091 C000 		lds r24,192
 788 0312 85FF      		sbrs r24,5
 789 0314 00C0      		rjmp .L77
 112:main.c        **** 		UDR0 = tekstarray[i]; 						// Data lægges i buffer (UDR0) og sendes via TXen
 790               		.stabn	68,0,112,.LM96-.LFBB9
 791               	.LM96:
 792 0316 9093 C600 		sts 198,r25
 109:main.c        **** 	for (i = 0; tekstarray[i] != '\0'; i++)
 793               		.stabn	68,0,109,.LM97-.LFBB9
 794               	.LM97:
 795 031a 9191      		ld r25,Z+
 796 031c 9923      		tst r25
 797 031e 01F4      		brne .L77
 798               	.L38:
 799 0320 E0E0      		ldi r30,lo8(.LC0+1)
 800 0322 F0E0      		ldi r31,hi8(.LC0+1)
 801 0324 9BE3      		ldi r25,lo8(59)
 802               	.L78:
 803               	.LBE65:
 804               	.LBE64:
 805               	.LBB66:
 806               	.LBB67:
 111:main.c        **** 		while ((UCSR0A & (1 << UDRE0)) == 0) {};	// Venter indtil UDR0 er klar til ny data
 807               		.stabn	68,0,111,.LM98-.LFBB9
 808               	.LM98:
 809 0326 8091 C000 		lds r24,192
 810 032a 85FF      		sbrs r24,5
 811 032c 00C0      		rjmp .L78
 112:main.c        **** 		UDR0 = tekstarray[i]; 						// Data lægges i buffer (UDR0) og sendes via TXen
 812               		.stabn	68,0,112,.LM99-.LFBB9
 813               	.LM99:
 814 032e 9093 C600 		sts 198,r25
 109:main.c        **** 	for (i = 0; tekstarray[i] != '\0'; i++)
 815               		.stabn	68,0,109,.LM100-.LFBB9
 816               	.LM100:
 817 0332 9191      		ld r25,Z+
 818 0334 9923      		tst r25
 819 0336 01F4      		brne .L78
 820               	.LBE67:
 821               	.LBE66:
 181:main.c        **** 	sendtekst(tempchar);
GAS LISTING /tmp/ccJqfgJ9.s 			page 21


 182:main.c        ****     sendtekst(";");
 183:main.c        **** 	itoa(out, tempchar,10); 
 822               		.stabn	68,0,184,.LM101-.LFBB9
 823               	.LM101:
 824 0338 C701      		movw r24,r14
 825 033a B101      		movw r22,r2
 826 033c 4AE0      		ldi r20,lo8(10)
 827 033e 50E0      		ldi r21,hi8(10)
 828 0340 0E94 0000 		call itoa
 829               	.LBB68:
 830               	.LBB69:
 109:main.c        **** 	for (i = 0; tekstarray[i] != '\0'; i++)
 831               		.stabn	68,0,109,.LM102-.LFBB9
 832               	.LM102:
 833 0344 9981      		ldd r25,Y+1
 834 0346 9923      		tst r25
 835 0348 01F0      		breq .L41
 836 034a FE01      		movw r30,r28
 837 034c 3296      		adiw r30,2
 838               	.L79:
 111:main.c        **** 		while ((UCSR0A & (1 << UDRE0)) == 0) {};	// Venter indtil UDR0 er klar til ny data
 839               		.stabn	68,0,111,.LM103-.LFBB9
 840               	.LM103:
 841 034e 8091 C000 		lds r24,192
 842 0352 85FF      		sbrs r24,5
 843 0354 00C0      		rjmp .L79
 112:main.c        **** 		UDR0 = tekstarray[i]; 						// Data lægges i buffer (UDR0) og sendes via TXen
 844               		.stabn	68,0,112,.LM104-.LFBB9
 845               	.LM104:
 846 0356 9093 C600 		sts 198,r25
 109:main.c        **** 	for (i = 0; tekstarray[i] != '\0'; i++)
 847               		.stabn	68,0,109,.LM105-.LFBB9
 848               	.LM105:
 849 035a 9191      		ld r25,Z+
 850 035c 9923      		tst r25
 851 035e 01F4      		brne .L79
 852               	.L41:
 853 0360 E0E0      		ldi r30,lo8(.LC0+1)
 854 0362 F0E0      		ldi r31,hi8(.LC0+1)
 855 0364 9BE3      		ldi r25,lo8(59)
 856               	.L80:
 857               	.LBE69:
 858               	.LBE68:
 859               	.LBB70:
 860               	.LBB71:
 111:main.c        **** 		while ((UCSR0A & (1 << UDRE0)) == 0) {};	// Venter indtil UDR0 er klar til ny data
 861               		.stabn	68,0,111,.LM106-.LFBB9
 862               	.LM106:
 863 0366 8091 C000 		lds r24,192
 864 036a 85FF      		sbrs r24,5
 865 036c 00C0      		rjmp .L80
 112:main.c        **** 		UDR0 = tekstarray[i]; 						// Data lægges i buffer (UDR0) og sendes via TXen
 866               		.stabn	68,0,112,.LM107-.LFBB9
 867               	.LM107:
 868 036e 9093 C600 		sts 198,r25
 109:main.c        **** 	for (i = 0; tekstarray[i] != '\0'; i++)
 869               		.stabn	68,0,109,.LM108-.LFBB9
GAS LISTING /tmp/ccJqfgJ9.s 			page 22


 870               	.LM108:
 871 0372 9191      		ld r25,Z+
 872 0374 9923      		tst r25
 873 0376 01F4      		brne .L80
 874               	.LBE71:
 875               	.LBE70:
 184:main.c        **** 	sendtekst(tempchar);
 185:main.c        ****     sendtekst(";");
 186:main.c        **** 	itoa(p, tempchar,10); 
 876               		.stabn	68,0,187,.LM109-.LFBB9
 877               	.LM109:
 878 0378 8091 0000 		lds r24,p
 879 037c 9091 0000 		lds r25,(p)+1
 880 0380 B101      		movw r22,r2
 881 0382 4AE0      		ldi r20,lo8(10)
 882 0384 50E0      		ldi r21,hi8(10)
 883 0386 0E94 0000 		call itoa
 884               	.LBB72:
 885               	.LBB73:
 109:main.c        **** 	for (i = 0; tekstarray[i] != '\0'; i++)
 886               		.stabn	68,0,109,.LM110-.LFBB9
 887               	.LM110:
 888 038a 9981      		ldd r25,Y+1
 889 038c 9923      		tst r25
 890 038e 01F0      		breq .L44
 891 0390 FE01      		movw r30,r28
 892 0392 3296      		adiw r30,2
 893               	.L81:
 111:main.c        **** 		while ((UCSR0A & (1 << UDRE0)) == 0) {};	// Venter indtil UDR0 er klar til ny data
 894               		.stabn	68,0,111,.LM111-.LFBB9
 895               	.LM111:
 896 0394 8091 C000 		lds r24,192
 897 0398 85FF      		sbrs r24,5
 898 039a 00C0      		rjmp .L81
 112:main.c        **** 		UDR0 = tekstarray[i]; 						// Data lægges i buffer (UDR0) og sendes via TXen
 899               		.stabn	68,0,112,.LM112-.LFBB9
 900               	.LM112:
 901 039c 9093 C600 		sts 198,r25
 109:main.c        **** 	for (i = 0; tekstarray[i] != '\0'; i++)
 902               		.stabn	68,0,109,.LM113-.LFBB9
 903               	.LM113:
 904 03a0 9191      		ld r25,Z+
 905 03a2 9923      		tst r25
 906 03a4 01F4      		brne .L81
 907               	.L44:
 908 03a6 9BE3      		ldi r25,lo8(59)
 909               	.L82:
 910               	.LBE73:
 911               	.LBE72:
 912               	.LBB74:
 913               	.LBB75:
 111:main.c        **** 		while ((UCSR0A & (1 << UDRE0)) == 0) {};	// Venter indtil UDR0 er klar til ny data
 914               		.stabn	68,0,111,.LM114-.LFBB9
 915               	.LM114:
 916 03a8 8091 C000 		lds r24,192
 917 03ac 85FF      		sbrs r24,5
 918 03ae 00C0      		rjmp .L82
GAS LISTING /tmp/ccJqfgJ9.s 			page 23


 112:main.c        **** 		UDR0 = tekstarray[i]; 						// Data lægges i buffer (UDR0) og sendes via TXen
 919               		.stabn	68,0,112,.LM115-.LFBB9
 920               	.LM115:
 921 03b0 9093 C600 		sts 198,r25
 109:main.c        **** 	for (i = 0; tekstarray[i] != '\0'; i++)
 922               		.stabn	68,0,109,.LM116-.LFBB9
 923               	.LM116:
 924 03b4 F801      		movw r30,r16
 925 03b6 9191      		ld r25,Z+
 926 03b8 8F01      		movw r16,r30
 927 03ba 9923      		tst r25
 928 03bc 01F4      		brne .L82
 929               	.LBE75:
 930               	.LBE74:
 187:main.c        **** 	sendtekst(tempchar);
 188:main.c        ****     sendtekst(";");
 189:main.c        **** 	itoa((int)(i*100), tempchar,10); 
 931               		.stabn	68,0,190,.LM117-.LFBB9
 932               	.LM117:
 933 03be 6091 0000 		lds r22,i
 934 03c2 7091 0000 		lds r23,(i)+1
 935 03c6 8091 0000 		lds r24,(i)+2
 936 03ca 9091 0000 		lds r25,(i)+3
 937 03ce 20E0      		ldi r18,lo8(0x42c80000)
 938 03d0 30E0      		ldi r19,hi8(0x42c80000)
 939 03d2 48EC      		ldi r20,hlo8(0x42c80000)
 940 03d4 52E4      		ldi r21,hhi8(0x42c80000)
 941 03d6 0E94 0000 		call __mulsf3
 942 03da 0E94 0000 		call __fixsfsi
 943 03de DC01      		movw r26,r24
 944 03e0 CB01      		movw r24,r22
 945 03e2 B101      		movw r22,r2
 946 03e4 4AE0      		ldi r20,lo8(10)
 947 03e6 50E0      		ldi r21,hi8(10)
 948 03e8 0E94 0000 		call itoa
 949               	.LBB76:
 950               	.LBB77:
 109:main.c        **** 	for (i = 0; tekstarray[i] != '\0'; i++)
 951               		.stabn	68,0,109,.LM118-.LFBB9
 952               	.LM118:
 953 03ec 9981      		ldd r25,Y+1
 954 03ee 9923      		tst r25
 955 03f0 01F0      		breq .L47
 956 03f2 FE01      		movw r30,r28
 957 03f4 3296      		adiw r30,2
 958               	.L83:
 111:main.c        **** 		while ((UCSR0A & (1 << UDRE0)) == 0) {};	// Venter indtil UDR0 er klar til ny data
 959               		.stabn	68,0,111,.LM119-.LFBB9
 960               	.LM119:
 961 03f6 8091 C000 		lds r24,192
 962 03fa 85FF      		sbrs r24,5
 963 03fc 00C0      		rjmp .L83
 112:main.c        **** 		UDR0 = tekstarray[i]; 						// Data lægges i buffer (UDR0) og sendes via TXen
 964               		.stabn	68,0,112,.LM120-.LFBB9
 965               	.LM120:
 966 03fe 9093 C600 		sts 198,r25
 109:main.c        **** 	for (i = 0; tekstarray[i] != '\0'; i++)
GAS LISTING /tmp/ccJqfgJ9.s 			page 24


 967               		.stabn	68,0,109,.LM121-.LFBB9
 968               	.LM121:
 969 0402 9191      		ld r25,Z+
 970 0404 9923      		tst r25
 971 0406 01F4      		brne .L83
 972               	.L47:
 973 0408 E0E0      		ldi r30,lo8(.LC1+1)
 974 040a F0E0      		ldi r31,hi8(.LC1+1)
 975 040c 9AE0      		ldi r25,lo8(10)
 976               	.L84:
 977               	.LBE77:
 978               	.LBE76:
 979               	.LBB78:
 980               	.LBB79:
 111:main.c        **** 		while ((UCSR0A & (1 << UDRE0)) == 0) {};	// Venter indtil UDR0 er klar til ny data
 981               		.stabn	68,0,111,.LM122-.LFBB9
 982               	.LM122:
 983 040e 8091 C000 		lds r24,192
 984 0412 85FF      		sbrs r24,5
 985 0414 00C0      		rjmp .L84
 112:main.c        **** 		UDR0 = tekstarray[i]; 						// Data lægges i buffer (UDR0) og sendes via TXen
 986               		.stabn	68,0,112,.LM123-.LFBB9
 987               	.LM123:
 988 0416 9093 C600 		sts 198,r25
 109:main.c        **** 	for (i = 0; tekstarray[i] != '\0'; i++)
 989               		.stabn	68,0,109,.LM124-.LFBB9
 990               	.LM124:
 991 041a 9191      		ld r25,Z+
 992 041c 9923      		tst r25
 993 041e 01F4      		brne .+2
 994 0420 00C0      		rjmp .L50
 995 0422 00C0      		rjmp .L84
 996               	.L32:
 997               	.LBE79:
 998               	.LBE78:
 173:main.c        ****     if(out<=0)
 999               		.stabn	68,0,173,.LM125-.LFBB9
 1000               	.LM125:
 1001 0424 1E14      		cp __zero_reg__,r14
 1002 0426 1F04      		cpc __zero_reg__,r15
 1003 0428 04F4      		brge .+2
 1004 042a 00C0      		rjmp .L33
 1005 042c EE24      		clr r14
 1006 042e FF24      		clr r15
 1007 0430 90E0      		ldi r25,lo8(0)
 1008 0432 80E0      		ldi r24,lo8(0)
 1009 0434 00C0      		rjmp .L34
 1010               	.L85:
 167:main.c        ****     if(pressOld<-5000)
 1011               		.stabn	68,0,167,.LM126-.LFBB9
 1012               	.LM126:
 1013 0436 C601      		movw r24,r12
 1014 0438 B501      		movw r22,r10
 1015 043a 20E0      		ldi r18,lo8(0xc59c4000)
 1016 043c 30E4      		ldi r19,hi8(0xc59c4000)
 1017 043e 4CE9      		ldi r20,hlo8(0xc59c4000)
 1018 0440 55EC      		ldi r21,hhi8(0xc59c4000)
GAS LISTING /tmp/ccJqfgJ9.s 			page 25


 1019 0442 0E94 0000 		call __ltsf2
 1020 0446 8823      		tst r24
 1021 0448 04F0      		brlt .+2
 1022 044a 00C0      		rjmp .L30
 1023 044c 0F2E      		mov __tmp_reg__,r31
 1024 044e F0E0      		ldi r31,lo8(0xc59c4000)
 1025 0450 AF2E      		mov r10,r31
 1026 0452 F0E4      		ldi r31,hi8(0xc59c4000)
 1027 0454 BF2E      		mov r11,r31
 1028 0456 FCE9      		ldi r31,hlo8(0xc59c4000)
 1029 0458 CF2E      		mov r12,r31
 1030 045a F5EC      		ldi r31,hhi8(0xc59c4000)
 1031 045c DF2E      		mov r13,r31
 1032 045e F02D      		mov r31,__tmp_reg__
 1033 0460 00C0      		rjmp .L30
 1034               	.L86:
 151:main.c        ****     press = 0.17*convertanalog(0)-18.0;
 1035               		.stabn	68,0,151,.LM127-.LFBB9
 1036               	.LM127:
 1037 0462 8824      		clr r8
 1038 0464 9924      		clr r9
 1039 0466 00C0      		rjmp .L27
 1040               		.size	main, .-main
 1041               		.stabs	"tempchar:(0,17)=ar(0,18)=r(0,18);0;0177777;;0;4;(0,2)",128,0,138,1
 1042               		.stabs	"press:r(0,1)",64,0,139,8
 1043               		.stabs	"out:r(0,1)",64,0,141,14
 1044               		.stabs	"pressOld:r(0,12)",64,0,145,10
 1045               		.stabn	192,0,0,.LFBB9-.LFBB9
 1046               		.stabn	224,0,0,.Lscope9-.LFBB9
 1047               	.Lscope9:
 1048               		.stabs	"",36,0,0,.Lscope9-.LFBB9
 1049               		.stabd	78,0,0
 1050               	.global	p
 1051               	.global	p
 1052               		.section .bss
 1053               		.type	p, @object
 1054               		.size	p, 2
 1055               	p:
 1056 0000 0000      		.skip 2,0
 1057               	.global	i
 1058               	.global	i
 1059               		.type	i, @object
 1060               		.size	i, 4
 1061               	i:
 1062 0002 0000 0000 		.skip 4,0
 1063               	.global	ref
 1064               		.data
 1065               		.type	ref, @object
 1066               		.size	ref, 2
 1067               	ref:
 1068 0005 3C00      		.word	60
 1069               		.stabs	"p:G(0,1)",32,0,11,0
 1070               		.stabs	"i:G(0,12)",32,0,12,0
 1071               		.stabs	"ref:G(0,1)",32,0,13,0
 1072               		.text
 1073               		.stabs	"",100,0,0,.Letext0
 1074               	.Letext0:
GAS LISTING /tmp/ccJqfgJ9.s 			page 26


GAS LISTING /tmp/ccJqfgJ9.s 			page 27


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccJqfgJ9.s:2      *ABS*:0000003f __SREG__
     /tmp/ccJqfgJ9.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccJqfgJ9.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccJqfgJ9.s:5      *ABS*:00000034 __CCP__
     /tmp/ccJqfgJ9.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccJqfgJ9.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccJqfgJ9.s:83     .text:00000000 uartinit
     /tmp/ccJqfgJ9.s:123    .text:00000020 PWM_duty_cycle_A_set
     /tmp/ccJqfgJ9.s:144    .text:00000024 PWM_duty_cycle_B_set
     /tmp/ccJqfgJ9.s:165    .text:00000028 PWM_duty_cycle_A16_set
     /tmp/ccJqfgJ9.s:189    .text:00000032 pwm8Init
     /tmp/ccJqfgJ9.s:262    .text:00000066 pwm16Init
     /tmp/ccJqfgJ9.s:353    .text:000000bc sendtekst
     /tmp/ccJqfgJ9.s:390    .text:000000da convertanalog
     /tmp/ccJqfgJ9.s:446    .text:00000110 main
     /tmp/ccJqfgJ9.s:1067   .data:00000005 ref
     /tmp/ccJqfgJ9.s:1055   .bss:00000000 p
     /tmp/ccJqfgJ9.s:1061   .bss:00000002 i

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
__floatunsisf
__mulsf3
__subsf3
__fixsfsi
__floatsisf
__addsf3
__gtsf2
itoa
__ltsf2
